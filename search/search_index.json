{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":"<p>\u5feb\u901f\u8c08\u8bdd(1) \u53d1\u8868\u8bc4\u8bba(2) \u8054\u7cfb\u6211(3)</p> <ol> <li>\u70b9\u51fb\u53f3\u4e0b\u89d2\u4e0e\u6211\u5728\u7ebf\u4ea4\u8c08\u3002</li> <li>\u5728\u8bc4\u8bba\u533a\u767b\u9646GitHub\u8d26\u53f7\u5373\u53ef\u8bc4\u8bba\u3002</li> <li>anqi.huang@outlook.com</li> </ol> <p>Tip</p> <ol> <li> <p>\u8bf7\u70b9\u51fb\u53f3\u4e0a\u65b9\u300c\u6708\u4eae/\u592a\u9633\u300d\u56fe\u7247\u5207\u6362\u4e3b\u9898\uff0c\u5efa\u8bae\u4f7f\u7528\u6df1\u8272\u4e3b\u9898\u3002</p> </li> <li> <p>\u4e3b\u9898\u56fe\u6807\u5de6\u8fb9\u663e\u793a\u7684\u662f\u8bd7\u8bcd\uff0c\u5207\u6362\u9875\u9762\u6216\u5237\u65b0\u9875\u9762\u8bd7\u53e5\u4e5f\u4f1a\u8ddf\u7740\u5237\u65b0\u3002</p> </li> </ol> <p>Warning</p> <p>\u535a\u5ba2\u6240\u6709\u7684\u89c2\u70b9\u4ec5\u9650\u4e8e\u672c\u4eba\u7406\u89e3\uff0c\u5982\u6709\u4efb\u4f55\u7591\u95ee\u3002</p> <p>Read The Fucking Source Code\u3002</p> <p>\u672c\u7ad9\u70b9\u5305\u542b\u4ee5\u4e0b\u77e5\u8bc6\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li> <p> Android\u57fa\u7840</p> <ul> <li>repo \u4f7f\u7528\u6280\u5de7</li> <li>adb \u547d\u4ee4\u5927\u5168</li> <li>as\u5feb\u6377\u952e</li> <li>winscope</li> <li>aosp \u4ee3\u7801\u8df3\u8f6c\u3001\u8054\u60f3</li> <li>... </li> </ul> </li> <li> <p> Android\u8c03\u8bd5\u6280\u5de7</p> <ul> <li>\u65ad\u70b9</li> <li>event log\u6392\u67e5bug</li> <li>native \u6253\u5370callstack</li> <li>\u591alog\u6587\u4ef6\u5408\u62cd\u5e76\u6309\u65f6\u95f4\u6392\u5e8f</li> <li>...</li> </ul> </li> <li> <p> Android\u6a21\u5757\u5206\u6790</p> <ul> <li>binder</li> <li>input</li> <li>ams</li> <li>broadcast</li> <li>selinux</li> <li>\u81ea\u52a8\u80cc\u5149</li> <li>\u5f00\u673a\u52a8\u753b</li> <li>...</li> </ul> </li> <li> <p> Android\u9ad8\u9636</p> <ul> <li>motionevent\u4e8b\u4ef6x,y\u8d70\u52bf\u56fe</li> <li>\u4e0d\u4fee\u6539aidl\u6269\u5c55\u539f\u751f\u670d\u52a1\u63a5\u53e3</li> <li>\u5185\u5b58\u52a0\u538b\u624b\u6bb5</li> <li>bp\u5b9e\u73b0if\u5224\u65ad</li> <li>frida</li> <li>...</li> </ul> </li> </ul> <ul> <li> <p> \u57fa\u7840\u6280\u672f</p> <ul> <li>Linux\u5e38\u7528\u547d\u4ee4\u3001\u9ad8\u9636\u547d\u4ee4\u7b49</li> <li>Linux\u65b0\u589e\u4e00\u4e2a\u5f00\u673a\u670d\u52a1</li> <li>...</li> </ul> </li> <li> <p> AI</p> <ul> <li>\u56fe\u50cf\u5206\u7c7b\u6a21\u578b</li> <li>\u6a21\u578b\u5de5\u7a0b\u843d\u5730</li> </ul> </li> </ul> <ul> <li> <p> \u66f4\u591a</p> <p>\u6587\u7ae0\u4e00\u76f4\u66f4\u65b0\uff0c\u66f4\u591a\u5185\u5bb9\u8bf7\u81ea\u884c\u53d1\u6398\u3002</p> </li> </ul>"},{"location":"android/brightness/automatic-brightness-intro/","title":"Android\u81ea\u52a8\u80cc\u5149\u673a\u5236","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_1","title":"\u7c7b\u7ed3\u6784\u56fe","text":"<ul> <li>AutomaticBrightnessController\uff1a\u53ea\u8fdb\u884c\u73af\u5883\u5149\u5f3a\u7684\u76d1\u542c\u540e\u7684\u4e00\u4e9b\u5904\u7406\uff0c\u5c06\u80cc\u5149\u66f2\u7ebf\u7684\u521b\u5efa\u7b49\u5de5\u4f5c\uff0c\u4ea4\u7ed9\u4e86BrightnessMappingStrategy</li> <li>BrightnessMappingStrategy\uff1a\u5c06\u8d1f\u8d23\u66f2\u7ebf\u7684\u521b\u5efa\uff0c\u81ea\u52a8\u80cc\u5149\u503c\u7684\u8ba1\u7b97\u7b49\u3002</li> </ul> <p>\u5f53\u83b7\u53d6\u81ea\u52a8\u80cc\u5149\u503c\u65f6\uff0cAutomaticBrightnessController\u5c06\u8c03\u7528BrightnessMappingStrategy\u7684\u63a5\u53e3\u83b7\u53d6\u3002\u800cBrightnessMappingStrategy\u5728\u521b\u5efa\u66f2\u7ebf\u65f6\uff0c\u5219\u9700\u8981\u4eceBrightnessConfigure\u7c7b\u4e2d\u8bfb\u53d6\u4e24\u4e2a\u6570\u7ec4\u6e90: config_autoBrightnessLevels \u548c config_autoBrightnessDisplayValuesNits\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_2","title":"\u521b\u5efa\u80cc\u5149\u6837\u6761\u66f2\u7ebf","text":"<p>\u81ea\u52a8\u80cc\u5149\u662f\u901a\u8fc7\u521b\u5efa\u591a\u4e2a\u6837\u6761\u66f2\u7ebf\u6765\u5b8c\u6210\u73af\u5883\u5149\u7167\u5ea6\u4e0e\u5c4f\u5e55\u80cc\u5149\u503c\u7684\u6620\u5c04\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u5df2\u77e5\u6570\u636e\u521b\u5efa\u4e09\u6761\u6837\u6761\u66f2\u7ebf\uff1amNitsToBacklightSpline\u3001mBacklightToNitsSpline\u3001mBrightnessSpline\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86\u8fd9\u4e09\u4e2a\u6837\u6761\u66f2\u7ebf\u7684\u521b\u5efa\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u7684\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a </p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#displaypowercontroller","title":"DisplayPowerController","text":"<p>\u81ea\u52a8\u80cc\u5149\u6837\u6761\u66f2\u7ebf\u7684\u521b\u5efa\u653e\u5728\u4e86BrightnessMappingStrategy\u4e2d\uff0c\u5f53\u7cfb\u7edf\u542f\u52a8\u8fdb\u5165DisplayPowerController\u6784\u9020\u65b9\u6cd5\u540e\uff0c\u5c31\u4f1a\u5f00\u59cb\u521b\u5efa\u80cc\u5149\u6837\u6761\u66f2\u7ebf\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\npublic DisplayPowerController(Context context,\n       DisplayPowerCallbacks callbacks, Handler handler,\n       SensorManager sensorManager, DisplayBlanker blanker, LogicalDisplay logicalDisplay,\n       BrightnessTracker brightnessTracker, BrightnessSetting brightnessSetting,\n       Runnable onBrightnessChangeRunnable) {\n\n       ...\n       //\u83b7\u53d6\u6620\u5c04Lux-Nits-Backlight\u503c\u7684\u5bf9\u8c61\n       setUpAutoBrightness(resources, handler);\n       ...\n\n}\n\nprivate void setUpAutoBrightness(Resources resources, Handler handler) {\n   if (!mUseSoftwareAutoBrightnessConfig) {\n       return;\n   }\n\n   mBrightnessMapper = BrightnessMappingStrategy.create(resources, mDisplayDeviceConfig);\n\n   ...\n   if (mBrightnessMapper != null) {\n       mAutomaticBrightnessController = new AutomaticBrightnessController(this,\n                    handler.getLooper(), mSensorManager, mLightSensor, mBrightnessMapper,\n                    lightSensorWarmUpTimeConfig, PowerManager.BRIGHTNESS_MIN,\n                    PowerManager.BRIGHTNESS_MAX, dozeScaleFactor, lightSensorRate,\n                    initialLightSensorRate, brighteningLightDebounce, darkeningLightDebounce,\n                    autoBrightnessResetAmbientLuxAfterWarmUp, ambientBrightnessThresholds,\n                    screenBrightnessThresholds, mLogicalDisplay, mContext, mHbmController);\n   }\n   ...\n}   \n</code></pre> \u6211\u4eec\u4eceBrightnessMappingStrategy.create()\u51fd\u6570\u5f00\u59cb\u6765\u67e5\u770b\u66f2\u7ebf\u7684\u7ed8\u5236\uff0ccreate()\u65b9\u6cd5\u5982\u4e0b\uff0c\u76f8\u5173\u4ee3\u7801\u5df2\u8fdb\u884c\u6ce8\u91ca\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\n@Nullable\npublic static BrightnessMappingStrategy create(Resources resources,\n       DisplayDeviceConfig displayDeviceConfig) {\n\n   // Display independent values\n   //Lux\u503c\u7684\u6570\u7ec4\uff0cgetLuxLevels()\u4e2d\u4f1a\u6dfb\u52a0\u4e00\u4e2a0\u5143\u7d20\u4f5c\u4e3aLux[0]\n   float[] luxLevels = getLuxLevels(resources.getIntArray(\n           com.android.internal.R.array.config_autoBrightnessLevels));\n   //Lux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\uff0c\u4ec5\u5728\u7b80\u5355\u6620\u5c04\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\n   int[] brightnessLevelsBacklight = resources.getIntArray(\n           com.android.internal.R.array.config_autoBrightnessLcdBacklightValues);\n   //\u63cf\u8ff0\u548cLux\u503c\u5bf9\u5e94\u5c4f\u5e55\u4eae\u5ea6\u7684Nits\u503c\u6570\u7ec4\uff0c\u957f\u5ea6\u6bd4\u539f\u59cbLux\u503c\u6570\u7ec4\u59271\u3002\n   //\u5982\u679c\u914d\u7f6e\u4e86\u8be5\u503c\uff0c\u5219\u5fc5\u987b\u914d\u7f6e config_screenBrightnessNits \u548c config_screenBrightnessBacklight\n   float[] brightnessLevelsNits = getFloatArray(resources.obtainTypedArray(\n           com.android.internal.R.array.config_autoBrightnessDisplayValuesNits));\n   //\u7528\u6237\u53ef\u8c03\u6574\u7684\u6700\u5927Gamma\u503c\n   float autoBrightnessAdjustmentMaxGamma = resources.getFraction(\n           com.android.internal.R.fraction.config_autoBrightnessAdjustmentMaxGamma,\n           1, 1);\n   long shortTermModelTimeout = resources.getInteger(\n           com.android.internal.R.integer.config_autoBrightnessShortTermModelTimeout);\n\n   // Display dependent values - used for physical mapping strategy nits -&gt; brightness\n   //\u63cf\u8ff0\u5c4f\u5e55\u4eae\u5ea6\u7684 nits \u503c\u6570\u7ec4\n   final float[] nitsRange = displayDeviceConfig.getNits();\n   //\u63cf\u8ff0\u4e0e nitsRange \u6570\u7ec4\u4e2d\u7684\u4eae\u5ea6\u503c(\u5355\u4f4d\u4e3aNits)\u76f8\u5bf9\u5e94\u7684\u5c4f\u5e55\u80cc\u5149\u503c\n   final float[] brightnessRange = displayDeviceConfig.getBrightness();\n\n   //isValidMapping()\u7528\u6765\u68c0\u67e5\u6620\u5c04\u7684\u6709\u6548\u6027\uff0c\u4e24\u4e2a\u53c2\u6570\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n   //\uff081\uff09\u975e\u7a7a;\n   //\uff082\uff09\u957f\u5ea6\u76f8\u540c;\n   //\uff083\uff09\u957f\u5ea6&gt;=0;\n   //\uff084\uff09\u53c2\u65701\u5fc5\u987b\u4e25\u683c\u5355\u8c03\u9012\u589e,\u53c2\u65702\u5fc5\u987b\u5355\u8c03\u9012\u589e\n   if (isValidMapping(nitsRange, brightnessRange)\n           &amp;&amp; isValidMapping(luxLevels, brightnessLevelsNits)) {\n\n       //\u83b7\u53d6BrightnessConfiguration.Builder\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5c06\u8bfb\u53d6\u7684Lux\u503c\u548cNits\u503c\u4fdd\u5b58\u5728builder\u5bf9\u8c61\u4e2d\n       BrightnessConfiguration.Builder builder = new BrightnessConfiguration.Builder(\n               luxLevels, brightnessLevelsNits);\n       builder.setShortTermModelTimeoutMillis(shortTermModelTimeout);\n       builder.setShortTermModelLowerLuxMultiplier(SHORT_TERM_MODEL_THRESHOLD_RATIO);\n       builder.setShortTermModelUpperLuxMultiplier(SHORT_TERM_MODEL_THRESHOLD_RATIO);\n       //\u6620\u5c04Lux\u503c\u548cNits\u503c\uff0c\u7269\u7406\u6620\u5c04\n       return new PhysicalMappingStrategy(builder.build(), nitsRange, brightnessRange,\n               autoBrightnessAdjustmentMaxGamma);\n   } else if (isValidMapping(luxLevels, brightnessLevelsBacklight)) {\n       //\u7b80\u5355\u6620\u5c04\n       return new SimpleMappingStrategy(luxLevels, brightnessLevelsBacklight,\n               autoBrightnessAdjustmentMaxGamma, shortTermModelTimeout);\n   } else {\n       return null;\n   }\n}\n</code></pre> \u5728create()\u65b9\u6cd5\u4e2d\uff0c\u8bfb\u53d6config.xml\u6587\u4ef6\u4e2d\u7684\u591a\u4e2a\u914d\u7f6e\u503c\uff0c\u7136\u540e\u6839\u636e\u914d\u7f6e\u503c\u6765\u51b3\u5b9a\u6620\u5c04\u65b9\u5f0f\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#displaydeviceconfig","title":"DisplayDeviceConfig","text":"<p>\u5c4f\u5e55\u4eae\u5ea6\u7684 nits \u503c\u6570\u7ec4\u3001\u5c4f\u5e55\u4eae\u5ea6\u7684 nits \u503c\u6570\u7ec4\u76f8\u5bf9\u5e94\u7684\u5c4f\u5e55\u80cc\u5149\u503c\u662f\u901a\u8fc7DisplayDeviceConfig\u83b7\u53d6\uff0c\u800c\u5728DisplayDeviceConfig\u91cc\uff0c\u5176\u5b9e\u4e5f\u662f\u901a\u8fc7\u8bfb\u53d6config.xml\u6587\u4ef6\u4e2d\u7684config_screenBrightnessNits\u548cconfig_screenBrightnessBacklight\u914d\u7f6e\u503c\uff0c\u8ddfAndroid11\u7684\u4ee3\u7801\u4e00\u6837\uff0c\u53ea\u662f\u6362\u5230\u4e86DisplayDeviceConfig\u4e2d\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayDeviceConfig.java\nprivate void loadBrightnessMapFromConfigXml() {\n    // Use the config.xml mapping\n    final Resources res = mContext.getResources();\n    final float[] sysNits = BrightnessMappingStrategy.getFloatArray(res.obtainTypedArray(\n        com.android.internal.R.array.config_screenBrightnessNits));\n    final int[] sysBrightness = res.getIntArray(\n        com.android.internal.R.array.config_screenBrightnessBacklight);\n    final float[] sysBrightnessFloat = new float[sysBrightness.length];\n\n    for (int i = 0; i &lt; sysBrightness.length; i++) {\n        sysBrightnessFloat[i] = BrightnessSynchronizer.brightnessIntToFloat(\n            sysBrightness[i]);\n    }\n\n    // These arrays are allowed to be empty, we set null values so that\n    // BrightnessMappingStrategy will create a SimpleMappingStrategy instead.\n    if (sysBrightnessFloat.length == 0 || sysNits.length == 0) {\n        setSimpleMappingStrategyValues();\n        return;\n    }\n\n    mRawNits = sysNits;\n    mRawBacklight = sysBrightnessFloat;\n    constrainNitsAndBacklightArrays();\n}\n\n/**\n * Change the nits and backlight arrays, so that they cover only the allowed backlight values\n * Use the brightness minimum and maximum values to clamp these arrays.\n */\nprivate void constrainNitsAndBacklightArrays() {\n    if (mRawBacklight[0] &gt; mBacklightMinimum\n        || mRawBacklight[mRawBacklight.length - 1] &lt; mBacklightMaximum\n        || mBacklightMinimum &gt; mBacklightMaximum) {\n        throw new IllegalStateException(\"Min or max values are invalid\"\n                                        + \"; raw min=\" + mRawBacklight[0]\n                                        + \"; raw max=\" + mRawBacklight[mRawBacklight.length - 1]\n                                        + \"; backlight min=\" + mBacklightMinimum\n                                        + \"; backlight max=\" + mBacklightMaximum);\n    }\n\n    float[] newNits = new float[mRawBacklight.length];\n    float[] newBacklight = new float[mRawBacklight.length];\n    // Find the starting index of the clamped arrays. This may be less than the min so\n    // we'll need to clamp this value still when actually doing the remapping.\n    int newStart = 0;\n    for (int i = 0; i &lt; mRawBacklight.length - 1; i++) {\n        if (mRawBacklight[i + 1] &gt; mBacklightMinimum) {\n            newStart = i;\n            break;\n        }\n    }\n\n    boolean isLastValue = false;\n    int newIndex = 0;\n    for (int i = newStart; i &lt; mRawBacklight.length &amp;&amp; !isLastValue; i++) {\n        newIndex = i - newStart;\n        final float newBacklightVal;\n        final float newNitsVal;\n        isLastValue = mRawBacklight[i] &gt;= mBacklightMaximum\n            || i &gt;= mRawBacklight.length - 1;\n        // Clamp beginning and end to valid backlight values.\n        if (newIndex == 0) {\n            newBacklightVal = MathUtils.max(mRawBacklight[i], mBacklightMinimum);\n            newNitsVal = rawBacklightToNits(i, newBacklightVal);\n        } else if (isLastValue) {\n            newBacklightVal = MathUtils.min(mRawBacklight[i], mBacklightMaximum);\n            newNitsVal = rawBacklightToNits(i - 1, newBacklightVal);\n        } else {\n            newBacklightVal = mRawBacklight[i];\n            newNitsVal = mRawNits[i];\n        }\n        newBacklight[newIndex] = newBacklightVal;\n        newNits[newIndex] = newNitsVal;\n    }\n    mBacklight = Arrays.copyOf(newBacklight, newIndex + 1);\n    mNits = Arrays.copyOf(newNits, newIndex + 1);\n    createBacklightConversionSplines();\n}\n\n// This method creates a brightness spline that is of equal length with proportional increments\n// to the backlight spline. The values of this array range from 0.0f to 1.0f instead of the\n// potential constrained range that the backlight array covers\n// These splines are used to convert from the system brightness value to the HAL backlight\n// value\nprivate void createBacklightConversionSplines() {\n   mBrightness = new float[mBacklight.length];\n   for (int i = 0; i &lt; mBrightness.length; i++) {\n       mBrightness[i] = MathUtils.map(mBacklight[0],\n               mBacklight[mBacklight.length - 1],\n               PowerManager.BRIGHTNESS_MIN, PowerManager.BRIGHTNESS_MAX, mBacklight[i]);\n   }\n   mBrightnessToBacklightSpline = Spline.createSpline(mBrightness, mBacklight);\n   mBacklightToBrightnessSpline = Spline.createSpline(mBacklight, mBrightness);\n   mBacklightToNitsSpline = Spline.createSpline(mBacklight, mNits);\n}\n</code></pre> \u7efc\u4e0a\u6d89\u53ca\u5230\u7684\u914d\u7f6e\u503c\u5982\u4e0b\uff1a</p> <ul> <li>config_autoBrightnessLevels\uff1aLux\u503c\u6570\u7ec4</li> <li>config_autoBrightnessLcdBacklightValues\uff1aLux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u6570\u7ec4</li> <li>config_autoBrightnessDisplayValuesNits\uff1aLux\u503c\u5bf9\u5e94\u7684Nits\u503c\u6570\u7ec4</li> <li>config_screenBrightnessNits\uff1a\u5c4f\u5e55\u53d1\u5149\u5f3a\u5ea6\u7684Nits\u503c\u6570\u7ec4</li> <li>config_screenBrightnessBacklight\uff1a\u548c\u53d1\u5149\u5f3a\u5ea6Nits\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u6570\u7ec4 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Lux\u503c\u6570\u7ec4--&gt;\n&lt;!-- Array of light sensor lux values to define our levels for auto backlight brightness support.\n    The N entries of this array define N + 1 control points as follows:\n    (1-based arrays)\n\n    Point 1:            (0, value[1]):             lux &lt;= 0\n    Point 2:     (level[1], value[2]):  0        &lt; lux &lt;= level[1]\n    Point 3:     (level[2], value[3]):  level[2] &lt; lux &lt;= level[3]\n    ...\n    Point N+1: (level[N], value[N+1]):  level[N] &lt; lux\n\n    The control points must be strictly increasing.  Each control point\n    corresponds to an entry in the brightness backlight values arrays.\n    For example, if lux == level[1] (first element of the levels array)\n    then the brightness will be determined by value[2] (second element\n    of the brightness values array).\n\n    Spline interpolation is used to determine the auto-brightness\n    backlight values for lux levels between these control points.\n\n    Must be overridden in platform specific overlays --&gt;\n&lt;integer-array name=\"config_autoBrightnessLevels\"&gt;\n&lt;/integer-array&gt;\n\n\n&lt;!-- Lux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u6570\u7ec4 --&gt;\n&lt;!-- Array of output values for LCD backlight corresponding to the lux values\n    in the config_autoBrightnessLevels array.  This array should have size one greater\n    than the size of the config_autoBrightnessLevels array.\n    The brightness values must be between 0 and 255 and be non-decreasing.\n    This must be overridden in platform specific overlays --&gt;\n&lt;integer-array name=\"config_autoBrightnessLcdBacklightValues\"&gt;\n&lt;/integer-array&gt;\n\n\n&lt;!-- Lux\u503c\u5bf9\u5e94\u7684Nits\u503c\u6570\u7ec4 --&gt;\n&lt;!-- Array of desired screen brightness in nits corresponding to the lux values\n    in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and\n    config_screenBrightnessMaximumNits, the display brightness is defined as the measured\n    brightness of an all-white image.\n\n    If this is defined then:\n       - config_autoBrightnessLcdBacklightValues should not be defined\n       - config_screenBrightnessNits must be defined\n       - config_screenBrightnessBacklight must be defined\n\n    This array should have size one greater than the size of the config_autoBrightnessLevels\n    array. The brightness values must be non-negative and non-decreasing. This must be\n    overridden in platform specific overlays --&gt;\n&lt;array name=\"config_autoBrightnessDisplayValuesNits\"&gt;\n&lt;/array&gt;\n\n\n&lt;!-- \u63cf\u8ff0\u5c4f\u5e55\u53d1\u5149\u5f3a\u5ea6\u7684Nits\u503c\u6570\u7ec4 --&gt;\n&lt;!-- An array of floats describing the screen brightness in nits corresponding to the backlight\n    values in the config_screenBrightnessBacklight array.  On OLED displays these  values\n    should be measured with an all white image while the display is in the fully on state.\n    Note that this value should *not* reflect the maximum brightness value for any high\n    brightness modes but only the maximum brightness value obtainable in a sustainable manner.\n\n    This array should be equal in size to config_screenBrightnessBacklight --&gt;\n&lt;array name=\"config_screenBrightnessNits\"&gt;\n&lt;/array&gt;\n\n\n&lt;!-- \u548c\u53d1\u5149\u5f3a\u5ea6Nits\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u6570\u7ec4 --&gt;\n&lt;!-- An array describing the screen's backlight values corresponding to the brightness\n    values in the config_screenBrightnessNits array.\n\n    This array should be equal in size to config_screenBrightnessBacklight. --&gt;\n&lt;integer-array name=\"config_screenBrightnessBacklight\"&gt;\n&lt;/integer-array&gt;\n</code></pre> <p>\u601d\u8003\uff1a \u4ece\u8fd9\u91cc\u5176\u5b9e\u6ca1\u770b\u5230\u6709\u5bf9\u80cc\u5149\u503c\u5bf9\u4efb\u4f55\u9650\u5236\u3002\u5982\u679c\u80cc\u5149\u4e3a0\u6216\u8005\u5f88\u5927\uff0c\u90a3\u8981\u4e48\u5c31\u770b\u4e0d\u89c1\u65e0\u6cd5\u8c03\u8282\uff0c\u8981\u4e48\u4eae\u5ea6\u8fc7\u9ad8\u5bfc\u81f4\u201c\u70e7\u5c4f\u201d\uff08\u5371\u8a00\u8038\u542c\uff09\u3002 \u6240\u4ee5\u8fd9\u91cc\u662f\u4e0d\u662f\u53ef\u4ee5\u5728config.xml\u65b0\u589e\u4e24\u4e2a\u914d\u7f6e\u503c\uff0c\u4e0d\u540c\u7684\u9879\u76ee\u901a\u8fc7overlay\u7684\u65b9\u5f0f\u8bbe\u7f6e\u5408\u9002\u7684\u914d\u7f6e\u503c\u3002 \u7136\u540e\u505a\u5982\u4e0b\u9650\u5236\uff1a - brightnessRange[0] &gt; miniBrightness - brightnessRange[brightnessRange.length - 1] &lt; maxBrightness</p> </li> </ul>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#brightnessconfiguration","title":"BrightnessConfiguration","text":"<p>\u8bfb\u53d6\u5b8c\u914d\u7f6e\u503c\u540e\uff0cLux\u503c\u6570\u7ec4\u53ca\u5176\u5bf9\u5e94\u7684Nits\u503c\u6570\u7ec4\u5c06\u4f1a\u7528\u6765\u6784\u5efaBrightnessConfiguration.Builder\u5b9e\u4f8bbuilder\uff0cBuilder\u9996\u5148\u4f1a\u68c0\u67e5\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u6709\u6548\u6027\uff0c\u8be5\u8fc7\u7a0b\u4e0e\u4e0a\u9762\u7684isValidMapping()\u65b9\u6cd5\u7c7b\u4f3c\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/java/android/hardware/display/BrightnessConfiguration.java\n\n/**\n * Constructs the builder with the control points for the brightness curve.\n *\n * Brightness curves must have strictly increasing ambient brightness values in lux and\n * monotonically increasing display brightness values in nits. In addition, the initial\n * control point must be 0 lux.\n *\n * @throws IllegalArgumentException if the initial control point is not at 0 lux.\n * @throws IllegalArgumentException if the lux levels are not strictly increasing.\n * @throws IllegalArgumentException if the nit levels are not monotonically increasing.\n */\npublic Builder(float[] lux, float[] nits) {\n     Objects.requireNonNull(lux);\n     Objects.requireNonNull(nits);\n     // \u68c0\u67e5\u4e24\u4e2a\u6570\u7ec4\u662f\u5426\u975e\u7a7a\n     if (lux.length == 0 || nits.length == 0) {\n          throw new IllegalArgumentException(\"Lux and nits arrays must not be empty\");\n     }\n     // \u68c0\u67e5\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u5426\u76f8\u540c\n     if (lux.length != nits.length) {\n          throw new IllegalArgumentException(\"Lux and nits arrays must be the same length\");\n     }\n     if (lux[0] != 0) {\n          throw new IllegalArgumentException(\"Initial control point must be for 0 lux\");\n     }\n     // \u68c0\u67e5Lux\u6570\u7ec4\u548cNits\u6570\u7ec4\u662f\u5426\u6709\u5e8f\n     Preconditions.checkArrayElementsInRange(lux, 0, Float.MAX_VALUE, \"lux\");\n     Preconditions.checkArrayElementsInRange(nits, 0, Float.MAX_VALUE, \"nits\");\n     // \u68c0\u67e5Lux\u6570\u7ec4\u662f\u5426\u4e25\u683c\u5355\u8c03\u9012\u589e\n     checkMonotonic(lux, true /*strictly increasing*/, \"lux\");\n     // \u68c0\u67e5Nits\u6570\u7ec4\u662f\u5426\u5355\u8c03\u9012\u589e\n     checkMonotonic(nits, false /*strictly increasing*/, \"nits\");\n     // \u6682\u5b58Lux\u6570\u7ec4\n     mCurveLux = lux;\n     // \u6682\u5b58Nits\u6570\u7ec4\n     mCurveNits = nits;\n     // \u9488\u5bf9App\u7684\u80cc\u5149\u6821\u6b63\n     mCorrectionsByPackageName = new HashMap&lt;&gt;();\n     // \u9488\u5bf9\u7c7b\u522b\u7684\u80cc\u5149\u6821\u6b63\n     mCorrectionsByCategory = new HashMap&lt;&gt;();\n}\n</code></pre> \u4e4b\u540ebulider.bulid()\u88ab\u7528\u6765\u6784\u5efaPhysicalMappingStrategy\u5b9e\u4f8b\uff0c\u6b64\u65f6\u4f1a\u5c06Lux\u503c\u6570\u7ec4\u53ca\u5176\u5bf9\u5e94\u7684Nits\u503c\u6570\u7ec4\u4fdd\u5b58\u4e3aBrightnessConfiguration\u7c7b\u7684\u5168\u5c40\u53d8\u91cf\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/java/android/hardware/display/BrightnessConfiguration.java\n\n/**\n * Builds the {@link BrightnessConfiguration}.\n */\n@NonNull\npublic BrightnessConfiguration build() {\n     if (mCurveLux == null || mCurveNits == null) {\n          throw new IllegalStateException(\"A curve must be set!\");\n     }\n     //\u521b\u5efaBrightnessConfiguration\u5b9e\u4f8b\n     return new BrightnessConfiguration(mCurveLux, mCurveNits, mCorrectionsByPackageName,\n          mCorrectionsByCategory, mDescription, mShouldCollectColorSamples,\n          mShortTermModelTimeout, mShortTermModelLowerLuxMultiplier,\n          mShortTermModelUpperLuxMultiplier);\n}\n\npublic final class BrightnessConfiguration implements Parcelable {\n    // ......\n    private BrightnessConfiguration(float[] lux, float[] nits,\n           Map&lt;String, BrightnessCorrection&gt; correctionsByPackageName,\n           Map&lt;Integer, BrightnessCorrection&gt; correctionsByCategory, String description,\n           boolean shouldCollectColorSamples,\n           long shortTermModelTimeout,\n           float shortTermModelLowerLuxMultiplier,\n           float shortTermModelUpperLuxMultiplier) {\n         //\u4fdd\u5b58Lux\u6570\u7ec4\u5230BrightnessConfiguration\u5168\u5c40\u53d8\u91cf\n         mLux = lux;\n         //\u4fdd\u5b58Nits\u6570\u7ec4\u5230BrightnessConfiguration\u5168\u5c40\u53d8\u91cf\n         mNits = nits;\n         mCorrectionsByPackageName = correctionsByPackageName;\n         mCorrectionsByCategory = correctionsByCategory;\n         mDescription = description;\n         mShouldCollectColorSamples = shouldCollectColorSamples;\n         mShortTermModelTimeout = shortTermModelTimeout;\n         mShortTermModelLowerLuxMultiplier = shortTermModelLowerLuxMultiplier;\n         mShortTermModelUpperLuxMultiplier = shortTermModelUpperLuxMultiplier;\n    }\n    // ......\n}\n</code></pre> BrightnessConfiguration\u7c7b\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2agetCurve()\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u5b83\u7684mLux\u548cmNits\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#physicalmappingstrategy","title":"PhysicalMappingStrategy","text":"<p>\u4e0b\u9762\u8fdb\u5165\u5230\u7269\u7406\u6620\u5c04\u5173\u7cfb\u5bf9\u8c61PhysicalMappingStrategy\u4e2d\uff0c\u5206\u6790\u5176\u6784\u9020\u65b9\u6cd5\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\n/**\n * @param config: BrightnessConfiguration\u5bf9\u8c61\uff0c\u643a\u5e26\u6709\u7528\u4e8e\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u7684Lux\u6570\u7ec4\u548c\u5bf9\u5e94\u7684Nits\u6570\u7ec4\n * @param nits: \u63cf\u8ff0\u5c4f\u5e55\u53d1\u5149\u5f3a\u5ea6\u7684nits\u503c\u6570\u7ec4\n * @param backlight: \u63cf\u8ff0\u4e0enits\u503c\u6570\u7ec4\u5bf9\u5e94\u7684\u80cc\u5149\u503c\n * @param maxGamma: \u7528\u6237\u53ef\u8c03\u6574\u6700\u5927Gamma\u503c\n */\npublic PhysicalMappingStrategy(BrightnessConfiguration config, float[] nits,\n          float[] brightness, float maxGamma) {\n\n     //\u4e00\u4e9b\u68c0\u67e5\u8fc7\u7a0b\n     Preconditions.checkArgument(nits.length != 0 &amp;&amp; brightness.length != 0,\n          \"Nits and brightness arrays must not be empty!\");\n\n     Preconditions.checkArgument(nits.length == brightness.length,\n          \"Nits and brightness arrays must be the same length!\");\n     Objects.requireNonNull(config);\n     Preconditions.checkArrayElementsInRange(nits, 0, Float.MAX_VALUE, \"nits\");\n     Preconditions.checkArrayElementsInRange(brightness,\n          PowerManager.BRIGHTNESS_MIN, PowerManager.BRIGHTNESS_MAX, \"brightness\");\n\n     //\u7528\u6237\u53ef\u8c03\u6574\u7684\u6700\u5927Gamma\u503c\n     mMaxGamma = maxGamma;\n     //\u81ea\u52a8\u80cc\u5149\u8c03\u8282\u503c\n     mAutoBrightnessAdjustment = 0;\n     //\u5728\u81ea\u52a8\u80cc\u5149\u5f00\u542f\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u624b\u52a8\u8c03\u8282\u4eae\u5ea6\u65f6\u7684\u5f53\u524dLux\u503c\n     mUserLux = -1;\n     //\u5728\u81ea\u52a8\u80cc\u5149\u5f00\u542f\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u624b\u52a8\u8c03\u8282\u8bbe\u7f6e\u7684\u4eae\u5ea6\n     mUserBrightness = -1;\n\n     mNits = nits;\n     mBrightness = brightness;\n     computeNitsBrightnessSplines(mNits);\n\n     mDefaultConfig = config;\n     if (mLoggingEnabled) {\n          PLOG.start(\"physical mapping strategy\");\n     }\n     mConfig = config;\n     //\u521b\u5efaLux-Nits\u66f2\u7ebf\n     computeSpline();\n}\n\nprivate void computeNitsBrightnessSplines(float[] nits) {\n     //\u521b\u5efaNits-Backlight\u66f2\u7ebf\n     mNitsToBrightnessSpline = Spline.createSpline(nits, mBrightness);\n     //\u521b\u5efaBacklight-Nits\u66f2\u7ebf\n     mBrightnessToNitsSpline = Spline.createSpline(mBrightness, nits);\n}\n</code></pre> \u5728PhysicalMappingStrategy\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\uff0c\u9996\u5148\u6839\u636enits\u6570\u7ec4\u548cnormalizedBacklight\u6570\u7ec4\uff0c\u521b\u5efa\u4e24\u6761\u6837\u6761\u66f2\u7ebf\uff1aNits-Backlight\u66f2\u7ebf\u548cBacklight-Nits\u66f2\u7ebf\u3002\u7136\u540e\u8c03\u7528computeSpline()\u65b9\u6cd5\uff0c\u521b\u5efaLux-Nits\u66f2\u7ebf</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#computespline","title":"computeSpline() \uff08\u63d2\u503c\u7b97\u6cd5\uff09","text":"<p>computeSpline()\u662f\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u9664\u4e86\u521b\u5efa\u53e6\u5916\u4e00\u6761Lux-Nits\u66f2\u7ebf\u5916\uff0c\u8fd8\u4f1a\u6839\u636e\u7528\u6237\u5f53\u524d\u5bf9\u4eae\u5ea6\u7684\u8c03\u6574\uff0c\u63d2\u5165\u7528\u6237\u8c03\u6574\u540e\u7684\u503c\uff0c\u5e76\u8c03\u6574Lux-Nits\u66f2\u7ebf\uff0c\u8be5\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\nprivate void computeSpline() {\n     //\u5f97\u5230BrightnessConfiguration\u4e2d\u7684Lux\u6570\u7ec4\u53ca\u5176\u5bf9\u5e94\u7684Nits\u6570\u7ec4\uff0c\u5e76\u653e\u5165Pair\u5bf9\u8c61\u4e2d\n     Pair&lt;float[], float[]&gt; defaultCurve = mConfig.getCurve();\n     //Lux\u6570\u7ec4\n     float[] defaultLux = defaultCurve.first;\n     //Lux\u5bf9\u5e94\u7684Nits\u6570\u7ec4\n     float[] defaultNits = defaultCurve.second;\n\n     //\u521b\u5efa\u4e00\u4e2a\u548cdefaultNits\u6570\u7ec4\u7b49\u957f\u7684\u6570\u7ec4 defaultBrightness \uff0c\u7528\u6765\u5b58\u653e\u5bf9\u5e94\u7684\u80cc\u5149\u503c\n     //\u6839\u636eLux-Nit\u503c\uff0c\u4eceNitsToBacklight\u66f2\u7ebf\u4e2d\u83b7\u53d6\u80cc\u5149\u503c\n     //\u5373\u6839\u636e config_autoBrightnessDisplayValuesNits \u503c\u4ececonfig_screenBrightnessNits \u548c config_screenBrightnessBacklight \u6784\u5efa\u7684mNitsToBacklightSpline\u66f2\u7ebf\u4e2d\u83b7\u53d6\u80cc\u5149\u503c\n     float[] defaultBrightness = new float[defaultNits.length];\n     for (int i = 0; i &lt; defaultBrightness.length; i++) {\n          defaultBrightness[i] = mNitsToBrightnessSpline.interpolate(defaultNits[i]);\n     }\n\n     //\u5bf9\u5f97\u5230\u7684\u9ed8\u8ba4\u80cc\u5149\u503c\u8fdb\u4e00\u6b65\u52a0\u5de5,\u5982\u679c\u671f\u95f4\u7528\u6237\u624b\u52a8\u8c03\u8282\u8fc7\u4eae\u5ea6\uff0c\u9700\u8981\u5c06\u8c03\u8282\u65f6\u7684Lux\u503c\u4e0e\u80cc\u5149\u503c\u6dfb\u52a0\u8fdb\u5bf9\u5e94\u6570\u7ec4\n     //\u5f97\u5230\u8c03\u6574\u540e\u7684Lux\u503c\u6570\u7ec4\u548cBacklight\u503c\u6570\u7ec4\n     Pair&lt;float[], float[]&gt; curve = getAdjustedCurve(defaultLux, defaultBrightness, mUserLux,\n          mUserBrightness, mAutoBrightnessAdjustment, mMaxGamma);\n\n     //\u6700\u7ec8\u7684Lux\u503c\u548c\u80cc\u5149\u503c\n     float[] lux = curve.first;\n     float[] brightness = curve.second;\n     float[] nits = new float[brightness.length];\n\n     //\u6839\u636e\u80cc\u5149\u503c\uff0c\u4ece config_screenBrightnessNits \u548c config_screenBrightnessBacklight \u6784\u5efa\u7684 mBacklightToNitsSpline \u66f2\u7ebf\u4e2d\u83b7\u53d6Nit\u503c\n     for (int i = 0; i &lt; nits.length; i++) {\n          nits[i] = mBrightnessToNitsSpline.interpolate(brightness[i]);\n     }\n     //\u521b\u5efaLux-Nits\u66f2\u7ebf,\u6700\u7ec8\u7684\u80cc\u5149\u503c\u5c06\u6839\u636e\u8be5\u66f2\u7ebf\u548cmNitsToBacklightSpline\u66f2\u7ebf\u6620\u5c04\u800c\u6765\n     mBrightnessSpline = Spline.createSpline(lux, nits);\n}\n</code></pre> \u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u9996\u5148\u8c03\u7528mConfig.getCurve()\u65b9\u6cd5\uff0c\u83b7\u53d6\u4e86mConfig\u5bf9\u8c61\u4e2d\u7684mLux\u548cmNits\u7684\u62f7\u8d1d\uff0c\u8fd9\u4e24\u4e2a\u503c\u5c31\u662f\u5728\u521b\u5efamConfig\u65f6\u4f20\u5165\u7684config_autoBrightnessLevels\u6570\u7ec4\u548cconfig_autoBrightnessDisplayValuesNits\u6570\u7ec4\u3002\u7136\u540e\u5229\u7528\u5f97\u5230\u7684nits\u503c\u4ece\u66f2\u7ebfmNitsToBacklightSpline\u4e2d\u5f97\u5230\u80cc\u5149\u503c\u6570\u7ec4defaultBacklight\u3002\u4e4b\u540e\u8c03\u7528getAdjustedCurve()\u65b9\u6cd5\u5bf9defaultBacklight\u505a\u8fdb\u4e00\u6b65\u52a0\u5de5\uff0c\u5982\u679c\u5728\u81ea\u52a8\u80cc\u5149\u6253\u5f00\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u6ca1\u6709\u901a\u8fc7\u4eae\u5ea6\u6761\u8c03\u8282\u80cc\u5149\uff0c\u5219\u5c06\u8fd4\u56de\u539f\u6570\u636e\u3002\u6b64\u5904\u6682\u4e14\u8ba4\u4e3a\u6ca1\u6709\u64cd\u4f5c\u8fc7\u4eae\u5ea6\u6761\uff0c\u5bf9getAdjustedCurve()\u5148\u4e0d\u505a\u5206\u6790\u3002 \u6700\u540e\uff0c\u5229\u7528defaultBacklight\u6570\u7ec4\u4ece\u66f2\u7ebfmBacklightToNitsSpline\u4e2d\u5f97\u5230Nits\u503c\uff0c\u7136\u540e\uff0c\u521b\u5efa\u8868\u793aLux\u503c\u548c\u5bf9\u5e94Nits\u503c\u7684\u66f2\u7ebfmBrightnessSpline\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u7684\u6700\u540e\u4e00\u6761\u5168\u5c40\u6837\u6761\u66f2\u7ebf(\u5728\u67d0\u4e9b\u65b9\u6cd5\u4e2d\u4f1a\u521b\u5efa\u4e00\u4e9b\u4e34\u65f6\u66f2\u7ebf)\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_3","title":"\u603b\u7ed3","text":"<p>\u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u5bf9\u81ea\u52a8\u80cc\u5149\u6837\u6761\u66f2\u7ebf\u7684\u521b\u5efa\u5c31\u5206\u6790\u5b8c\u6210\u4e86\uff0c\u6574\u4f53\u6765\u770b\uff0c\u5171\u521b\u5efa\u4e86\u4e09\u6761\u6837\u6761\u66f2\u7ebf\uff0c\u6765\u5bf9Lux-Nit-Backlight\u8fdb\u884c\u6620\u5c04\u3002\u8fd9\u91cc\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528Lux\u548cBaclight\u7684\u6620\u5c04\uff0c\u800c\u662f\u5c06Nit\u4f5c\u4e3aLux\u548cBacklight\u7684\u4e2d\u95f4\u4ecb\u8d28\u3002 \u4ece\u5149\u5b66\u89d2\u5ea6\u800c\u8a00\uff0c\u6211\u4eec\u611f\u77e5\u7684\u4eae\u5ea6\u662f\u6307\u4ece\u5c4f\u5e55\u53cd\u5c04\u5230\u773c\u7403\u4e2d\u7684\u5149\u7684\u5f3a\u5ea6\uff0c\u800c\u4e14\u8fd9\u4e2a\u5f3a\u5ea6\u8ddf\u5149\u4eae\u5ea6(Nit)\u6709\u4e00\u5b9a\u5173\u7cfb\uff0c\u5149\u4eae\u5ea6\u53c8\u8ddf\u5149\u7167\u5ea6(Lux)\u6709\u4e00\u5b9a\u5173\u7cfb\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4e25\u683c\u8003\u8651\u5149\u7167\u5ea6\u3001\u5149\u4eae\u5ea6\u3001\u5165\u5c04\u5149\u3001\u53cd\u5c04\u5149\u7b49\u8c03\u8282\uff0c\u76f8\u6bd4\u901a\u8fc7Lux\u503c\u51b3\u5b9a\u80cc\u5149\u503c\u800c\u8a00\uff0c\u901a\u8fc7Lux\u503c\u51b3\u5b9aNit\u503c\uff0c\u518d\u7531Nit\u503c\u51b3\u5b9a\u80cc\u5149\u503c\uff0c\u65e0\u7591\u662f\u6700\u7cbe\u51c6\u7684\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#automaticbrightnesscontroller","title":"AutomaticBrightnessController","text":"<p>\u4e86\u89e3\u4e86\u6837\u6761\u66f2\u7ebf\u7684\u521b\u5efa\u540e\uff0c\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790\u81ea\u52a8\u80cc\u5149\u7684\u8c03\u8282\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u8fd8\u662f\u5728DisplayPowerController\u7684setUpAutoBrightness()\u4e2d\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\npublic DisplayPowerController(Context context,\n       DisplayPowerCallbacks callbacks, Handler handler,\n       SensorManager sensorManager, DisplayBlanker blanker, LogicalDisplay logicalDisplay,\n       BrightnessTracker brightnessTracker, BrightnessSetting brightnessSetting,\n       Runnable onBrightnessChangeRunnable) {\n\n       ...\n       //\u83b7\u53d6\u6620\u5c04Lux-Nits-Backlight\u503c\u7684\u5bf9\u8c61\n       setUpAutoBrightness(resources, handler);\n       ...\n\n}\n\nprivate void setUpAutoBrightness(Resources resources, Handler handler) {\n   if (!mUseSoftwareAutoBrightnessConfig) {\n       return;\n   }\n\n   mBrightnessMapper = BrightnessMappingStrategy.create(resources, mDisplayDeviceConfig);\n\n   ...\n   if (mBrightnessMapper != null) {\n       ...\n       mAutomaticBrightnessController = new AutomaticBrightnessController(this,\n                    handler.getLooper(), mSensorManager, mLightSensor, mBrightnessMapper,\n                    lightSensorWarmUpTimeConfig, PowerManager.BRIGHTNESS_MIN,\n                    PowerManager.BRIGHTNESS_MAX, dozeScaleFactor, lightSensorRate,\n                    initialLightSensorRate, brighteningLightDebounce, darkeningLightDebounce,\n                    autoBrightnessResetAmbientLuxAfterWarmUp, ambientBrightnessThresholds,\n                    screenBrightnessThresholds, mLogicalDisplay, mContext, mHbmController);\n   }\n   ...\n}  \n</code></pre> \u5176\u4e2d\u901a\u8fc7AutomaticBrightnessController\u6765\u91c7\u96c6\u5149\u7167\u5f3a\u5ea6\u3001\u83b7\u53d6\u81ea\u52a8\u80cc\u5149\uff0c\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e86\u5b83\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u4ee5\u53ca\u914d\u7f6e\u5165\u53e3\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_4","title":"\u521d\u59cb\u5316","text":"<p>AutomaticBrightnessController\u901a\u8fc7\u5176\u6784\u9020\u51fd\u6570\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u5176\u4e2d\u4f1a\u5bf9\u8bb8\u591a\u6210\u5458\u53d8\u91cf\u8d4b\u503c\uff1a</p> <ul> <li>mBrightnessMapper \uff1aBrightnessMappingStretagy\u5b9e\u4f8b\uff0c\u7531\u6784\u9020\u65b9\u6cd5\u4f20\u5165\uff0c\u7528\u6765\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u3001\u83b7\u53d6\u81ea\u52a8\u80cc\u5149\u503c\u3002</li> <li>mShortTermModelValid \uff1a\u8868\u793a\u77ed\u671f\u6a21\u578b\u662f\u5426\u6709\u6548\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u4e3atrue\u3002</li> <li>mShortTermModelAnchor \uff1a\u8bb0\u5f55\u7528\u6237\u6dfb\u52a0\u7684\u80cc\u5149\u63a7\u5236\u70b9\u7684Lux\u503c\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u4e3a-1\u3002 \u201c\u77ed\u671f\u6a21\u578b\u201d\u6307\u7684\u662f\u6dfb\u52a0\u4e86\u7528\u6237\u624b\u52a8\u8c03\u8282\u80cc\u5149\u63a7\u5236\u70b9\u7684\u6837\u6761\u66f2\u7ebf\u3002\u5f53\u77ed\u671f\u6a21\u578b\u5931\u6548\u540e\uff0c\u5e76\u4e0d\u4f1a\u7acb\u5373\u91cd\u7f6e\u6570\u636e\uff0c\u800c\u662f\u7b49\u5f85\u73af\u5883\u5149\u53d1\u751f\u8f83\u5927\u53d8\u5316\u540e\uff0c\u624d\u6e05\u9664\u7528\u6237\u8bbe\u7f6e\u7684\u6570\u636e\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nAutomaticBrightnessController(Injector injector, Callbacks callbacks, Looper looper,\n       SensorManager sensorManager, Sensor lightSensor, BrightnessMappingStrategy mapper,\n       int lightSensorWarmUpTime, float brightnessMin, float brightnessMax,\n       float dozeScaleFactor, int lightSensorRate, int initialLightSensorRate,\n       long brighteningLightDebounceConfig, long darkeningLightDebounceConfig,\n       boolean resetAmbientLuxAfterWarmUpConfig, HysteresisLevels ambientBrightnessThresholds,\n       HysteresisLevels screenBrightnessThresholds, LogicalDisplay display, Context context,\n       HighBrightnessModeController hbmController) {\n   //\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u591a\u4e2a\u6210\u5458\u53d8\u91cf\n   mInjector = injector;\n   mContext = context;\n   mCallbacks = callbacks;\n   mSensorManager = sensorManager;\n   //BrightnessMappingStrategy\u5b9e\u4f8b\n   mBrightnessMapper = mapper;\n   //\u6700\u5c0f\u80cc\u5149\u503c\n   mScreenBrightnessRangeMinimum = brightnessMin;\n   //\u6700\u5927\u80cc\u5149\u503c\n   mScreenBrightnessRangeMaximum = brightnessMax;\n   mLightSensorWarmUpTimeConfig = lightSensorWarmUpTime;\n   mDozeScaleFactor = dozeScaleFactor;\n   mNormalLightSensorRate = lightSensorRate;\n   mInitialLightSensorRate = initialLightSensorRate;\n   mCurrentLightSensorRate = -1;\n   mBrighteningLightDebounceConfig = brighteningLightDebounceConfig;\n   mDarkeningLightDebounceConfig = darkeningLightDebounceConfig;\n   mResetAmbientLuxAfterWarmUpConfig = resetAmbientLuxAfterWarmUpConfig;\n   mAmbientLightHorizon = AMBIENT_LIGHT_LONG_HORIZON_MILLIS;\n   mWeightingIntercept = AMBIENT_LIGHT_LONG_HORIZON_MILLIS;\n   mAmbientBrightnessThresholds = ambientBrightnessThresholds;\n   mScreenBrightnessThresholds = screenBrightnessThresholds;\n   //\u77ed\u671f\u6a21\u578b\u662f\u5426\u6709\u6548\n   mShortTermModelValid = true;\n   mShortTermModelAnchor = -1;\n   //\u521b\u5efa\u5904\u7406Handler\u7684\u5b9e\u4f8b\n   mHandler = new AutomaticBrightnessHandler(looper);\n   mAmbientLightRingBuffer =\n       new AmbientLightRingBuffer(mNormalLightSensorRate, mAmbientLightHorizon);\n\n   if (!DEBUG_PRETEND_LIGHT_SENSOR_ABSENT) {\n       mLightSensor = lightSensor;\n   }\n\n   mActivityTaskManager = ActivityTaskManager.getService();\n   mPackageManager = mContext.getPackageManager();\n   mTaskStackListener = new TaskStackListenerImpl();\n   mForegroundAppPackageName = null;\n   mPendingForegroundAppPackageName = null;\n   mForegroundAppCategory = ApplicationInfo.CATEGORY_UNDEFINED;\n   mPendingForegroundAppCategory = ApplicationInfo.CATEGORY_UNDEFINED;\n   mHbmController = hbmController;\n}\n</code></pre></li> </ul>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_5","title":"\u914d\u7f6e","text":"<p>\u5728DisplayPowerController\u4e2d\uff0c\u6bcf\u6b21\u8c03\u7528updatePowerState()\u66f4\u65b0\u72b6\u6001\u65f6\uff0c\u90fd\u4f1a\u5bf9AutomaticBrightnessController\u8fdb\u884c\u914d\u7f6e\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\nprivate void updatePowerState() {\n    ...\n\n    // Configure auto-brightness.\n    if (mAutomaticBrightnessController != null) {\n        //\u66f2\u7ebf\u4e2d\u662f\u5426\u6709\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u63a7\u5236\u70b9\n        hadUserBrightnessPoint = mAutomaticBrightnessController.hasUserDataPoints();\n        //\u8c03\u7528configure()\u65b9\u6cd5\u5f00\u59cb\u914d\u7f6e\n        mAutomaticBrightnessController.configure(autoBrightnessEnabled,\n                mBrightnessConfiguration,\n                mLastUserSetScreenBrightness,\n                userSetBrightnessChanged, autoBrightnessAdjustment,\n                autoBrightnessAdjustmentChanged, mPowerRequest.policy);\n    }\n\n    ...\n}\n</code></pre> \u5728\u4ee5\u4e0a\u903b\u8f91\u4e2d\uff0chadUserBrightnessPoint\u8868\u793a\u662f\u5426\u5728\u81ea\u52a8\u80cc\u5149\u6253\u5f00\u7684\u60c5\u51b5\u4e0b\u62d6\u52a8\u80cc\u5149\u6761\u8c03\u8282\u8fc7\u80cc\u5149\uff0c\u5224\u65ad\u4f9d\u636e\u662fBrightnessMappingStrategy\u4e2d\u7684mUserLux\u6210\u5458\uff0c\u5b83\u8868\u793a\u7528\u6237\u5728\u5f00\u542f\u81ea\u52a8\u80cc\u5149\u540e\u624b\u52a8\u8bbe\u7f6e\u80cc\u5149\u65f6\u7684Lux\u503c\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\n@Override\npublic boolean hasUserDataPoints() {\n    return mUserLux != -1;\n}\n</code></pre> \u6709\u5173AutomaticBrightnessController\u7684\u914d\u7f6e\u540e\u6587\u4f1a\u8be6\u7ec6\u8bb2\u89e3\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u4f7f\u7528\u6837\u6761\u66f2\u7ebf\u83b7\u53d6\u81ea\u52a8\u80cc\u5149\u7684\u8fc7\u7a0b\uff1a</p> <p></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#automaticbrightnesscontrollerconfigure","title":"AutomaticBrightnessController.configure()","text":"<p>\u7531\u4e0a\u4e00\u8282\u53ef\u77e5\u5728updatePowerState()\u4e2d\u4f1a\u8c03\u7528configure()\u65b9\u6cd5\u6765\u914d\u7f6eAutomaticBrightnessController.configure()\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\npublic void configure(boolean enable, @Nullable BrightnessConfiguration configuration,\n     float brightness, boolean userChangedBrightness, float adjustment,\n     boolean userChangedAutoBrightnessAdjustment, int displayPolicy) {\n     mHbmController.setAutoBrightnessEnabled(enable);\n     // While dozing, the application processor may be suspended which will prevent us from\n     // receiving new information from the light sensor. On some devices, we may be able to\n     // switch to a wake-up light sensor instead but for now we will simply disable the sensor\n     // and hold onto the last computed screen auto brightness.  We save the dozing flag for\n     // debugging purposes.\n     //\u5c4f\u5e55\u662f\u5426\u8981\u8fdb\u5165doze\u72b6\u6001\n     boolean dozing = (displayPolicy == DisplayPowerRequest.POLICY_DOZE);\n\n     //\u8bbe\u7f6eBrightnessConfigure\u5bf9\u8c61\uff0c\u82e5BrightnessConfigure\u53d1\u751f\u6539\u53d8\uff0c\u4f1a\u91cd\u7f6e\u77ed\u671f\u6a21\u578b\uff0c\u5e76\u8fd4\u56detrue\n     boolean changed = setBrightnessConfiguration(configuration);\n\n     //\u8bbe\u7f6eDisplay\u72b6\u6001\uff0c\u82e5\u53d1\u751f\u6539\u53d8\uff0c\u8fd4\u56detrue\n     changed |= setDisplayPolicy(displayPolicy);\n     if (userChangedAutoBrightnessAdjustment) {\n          changed |= setAutoBrightnessAdjustment(adjustment);\n     }\n\n     //\u5982\u679c\u5728\u81ea\u52a8\u80cc\u5149\u5f00\u542f\u7684\u60c5\u51b5\u4e0b\u8c03\u8282\u4e86\u80cc\u5149\uff0c\u9700\u8981\u5c06\u5f53\u524d\u7684Lux\u503c\u548c\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u6dfb\u52a0\u5230\u6837\u6761\u66f2\u7ebf\u4e2d\n     if (userChangedBrightness &amp;&amp; enable) {\n          // Update the brightness curve with the new user control point. It's critical this\n          // happens after we update the autobrightness adjustment since it may reset it.\n          changed |= setScreenBrightnessByUser(brightness);\n     }\n     final boolean userInitiatedChange =\n           userChangedBrightness || userChangedAutoBrightnessAdjustment;\n     if (userInitiatedChange &amp;&amp; enable &amp;&amp; !dozing) {\n          //\u8bb0\u5f55\u65e7\u503c\n          prepareBrightnessAdjustmentSample();\n     }\n\n     //\u6ce8\u518c\u6216\u89e3\u9664\u6ce8\u518cLightSensor\n     changed |= setLightSensorEnabled(enable &amp;&amp; !dozing);\n     if (changed) {\n          updateAutoBrightness(false /*sendUpdate*/, userInitiatedChange);\n     }\n}\n</code></pre></p> <ul> <li>enable \uff1a\u8868\u793a\u81ea\u52a8\u80cc\u5149\u662f\u5426\u53ef\u7528\u3002</li> <li>configuration \uff1aBrightnessConfiguration\u5bf9\u8c61\uff0c\u643a\u5e26\u6709\u7528\u4e8e\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u7684Lux\u503c\u6570\u7ec4\u548c\u5bf9\u5e94\u7684Nit\u503c\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7528\u6237\u53ef\u5bf9\u5e94\u4e00\u4e2a\u8be5\u5bf9\u8c61\uff0c\u7531DisplayManagerService\u8d1f\u8d23\u8bbe\u7f6e\u3002</li> <li>brightness \uff1a\u6807\u51c6\u5316\u540e\u7684\u5f53\u524d\u80cc\u5149\u503c\uff0c\u4ecb\u4e8e[0, 1]\u3002</li> <li>userChangedBrightness \uff1a\u8868\u793a\u7528\u6237\u662f\u5426\u624b\u52a8\u901a\u8fc7\u62d6\u52a8\u80cc\u5149\u6761\u8bbe\u7f6e\u8fc7\u80cc\u5149\u3002</li> <li>adjustment \uff1a\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\u3002</li> <li>userChangedAutoBrightnessAdjustment \uff1a\u8868\u793a\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503cadjustment\u662f\u5426\u53d1\u751f\u53d8\u5316\u3002</li> <li>displayPolicy \uff1a\u5f53\u524d\u8bf7\u6c42\u7684\u5c4f\u5e55\u72b6\u6001\u3002</li> </ul> <p>\u5728configure()\u65b9\u6cd5\u4e2d\u6d89\u53ca\u4e86\u8bb8\u591a\u4e0e\u81ea\u9002\u5e94\u80cc\u5149\u8c03\u8282\u76f8\u5173\u7684\u914d\u7f6e\u65b9\u6cd5\uff1a</p> <ul> <li>setBrightnessConfiguration()</li> <li>setDisplayPolicy()</li> <li>setAutoBrightnessAdjustment()</li> <li>setScreenBrightnessByUser()</li> <li>prepareBrightnessAdjustmentSample()</li> <li>setLightSensorEnabled()</li> <li>updateAutoBrightness()</li> </ul> <p>\u4e0b\u9762\u5c06\u9010\u4e00\u5206\u6790\u6bcf\u4e2a\u914d\u7f6e\u65b9\u6cd5\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#setbrightnessconfiguration","title":"setBrightnessConfiguration()","text":"<p>\u8fd9\u4e2a\u65b9\u6cd5\u8d1f\u8d23\u914d\u7f6e\u5f53\u524d\u81ea\u52a8\u80cc\u5149\u7684BrighnessConfiguration\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e2d\u5e26\u6709Lux\u6570\u7ec4\u548cNits\u6570\u7ec4\uff0c\u7528\u6765\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u548c\u83b7\u53d6\u80cc\u5149\u503c\u3002\u8be5\u65b9\u6cd5\u5982\u4e0b <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\npublic boolean setBrightnessConfiguration(BrightnessConfiguration configuration) {\n    //\u8c03\u7528\u8fdb\u5165mBrightnessMapper\u4e2d\uff0c\u4e5f\u5c31\u662fBrightnessMappingStrategy\n    if (mBrightnessMapper.setBrightnessConfiguration(configuration)) {\n        //\u5982\u679c BrightnessConfiguration\u5bf9\u8c61\u53d1\u751f\u6539\u53d8\uff0c\u91cd\u7f6e\u7528\u6237\u8bbe\u7f6e\u7684\u77ed\u671f\u6a21\u578b\n        resetShortTermModel();\n        return true;\n    }\n    return false;\n}\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n@Override\npublic boolean setBrightnessConfiguration(@Nullable BrightnessConfiguration config) {\n    if (config == null) {\n        config = mDefaultConfig;\n    }\n    if (config.equals(mConfig)) {\n        return false;\n    }\n    if (mLoggingEnabled) {\n        PLOG.start(\"brightness configuration\");\n    }\n    // \u5982\u679cBrightnessConfiguration\u5bf9\u8c61\u53d1\u751f\u6539\u53d8\uff0c\u5219\u4f7f\u7528\u8be5\u65b0\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528computeSpline()\u65b9\u6cd5\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\n    mConfig = config;\n    //\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\n    computeSpline();\n    return true;\n}\n</code></pre> \u5982\u679cBrightnessConfiguration\u5bf9\u8c61\u53d1\u751f\u6539\u53d8\uff0c\u5219\u4f1a\u6839\u636eBrightnessConfiguration\u4e2d\u643a\u5e26\u7684Lux\u6570\u7ec4\u548cNits\u6570\u7ec4\u91cd\u65b0\u521b\u5efa\u66f2\u7ebf\uff0c\u5e76\u6e05\u9664\u4e4b\u524d\u7528\u6237\u7684\u914d\u7f6e\u3002\u90a3\u4e48BrightnessConfiguration\u5bf9\u8c61\u4f55\u65f6\u4f1a\u6539\u53d8\u5462\uff1f\u7b54\u6848\u662f\u5728\u5207\u6362\u7528\u6237\u65f6\u3002\u9488\u5bf9\u6bcf\u4e2a\u7528\u6237\uff0c\u90fd\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684BrightnessConfiguration\u5bf9\u8c61\uff0c\u6240\u4ee5\u5f53\u5207\u6362\u7528\u6237\u540e\uff0c\u8bbe\u5907\u7684\u81ea\u9002\u5e94\u80cc\u5149\u8c03\u8282\u65b9\u5f0f\u5c06\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002 \u5f53BrightnessConfiguration\u5bf9\u8c61\u53d1\u751f\u6539\u53d8\u4e14\u5728BrighnessMappingStragety\u4e2d\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u5c06\u4f1a\u901a\u8fc7resetShortTermModel()\u65b9\u6cd5\u6e05\u9664\u539f\u6709\u7528\u6237\u7684\u914d\u7f6e\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\npublic void resetShortTermModel() {\n    //\u6e05\u9664\u7528\u6237\u6dfb\u52a0\u7684\u80cc\u5149\u63a7\u5236\u70b9\n    mBrightnessMapper.clearUserDataPoints();\n    //\u8868\u793a\u77ed\u671f\u6a21\u578b\u4ecd\u65e7\u6709\u6548\n    mShortTermModelValid = true;\n    mShortTermModelAnchor = -1;\n}\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n@Override\npublic void clearUserDataPoints() {\n    if (mUserLux != -1) {\n        if (mLoggingEnabled) {\n            Slog.d(TAG, \"clearUserDataPoints: \" + mAutoBrightnessAdjustment + \" =&gt; 0\");\n            PLOG.start(\"clear user data points\")\n                .logPoint(\"user data point\", mUserLux, mUserBrightness);\n        }\n        //\u91cd\u7f6e\u81ea\u52a8\u80cc\u5149\u8c03\u8282\u503c\u4e3a0\n        mAutoBrightnessAdjustment = 0;\n        //\u91cd\u7f6e\u7528\u6237\u8bbe\u7f6e\u80cc\u5149\u65f6\u7684Lux\u503c\u4e3a-1\n        mUserLux = -1;\n        //\u91cd\u7f6e\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u503c\u4e3a-1\n        mUserBrightness = -1;\n        //\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\n        computeSpline();\n    }\n}\n</code></pre> \u5728clearUserDataPoint()\u65b9\u6cd5\u4e2d\u5c06\u5168\u5c40\u81ea\u52a8\u80cc\u5149\u8c03\u8282\u503c\u3001\u7528\u6237\u8bbe\u7f6e\u80cc\u5149\u65f6Lux\u503c\u548c\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u503c\u8fdb\u884c\u91cd\u7f6e\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#setdisplaypolicy","title":"setDisplayPolicy()","text":"<p>\u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u6839\u636e\u5c4f\u5e55\u72b6\u6001\u6765\u8bbe\u7f6emShortTermModelValid\u7684\u503c\uff0c\u8be5\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate boolean setDisplayPolicy(int policy) {\n    if (mDisplayPolicy == policy) {\n        return false;\n    }\n    final int oldPolicy = mDisplayPolicy;\n    mDisplayPolicy = policy;\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"Display policy transitioning from \" + oldPolicy + \" to \" + policy);\n    }\n    //\u5982\u679cDisplay\u72b6\u6001\u503c\u7531\u4ea4\u4e92\u53d8\u4e3a\u4e0d\u53ef\u4ea4\u4e92\u72b6\u6001\n    if (!isInteractivePolicy(policy) &amp;&amp; isInteractivePolicy(oldPolicy)) {\n        //\u9001\u4e00\u4e2a300s\u7684\u5ef6\u8fdf\u6d88\u606f\uff0c300s\u540e\u5c06mShortTermModelValid\u7f6e\u4e3afalse\n        mHandler.sendEmptyMessageDelayed(MSG_INVALIDATE_SHORT_TERM_MODEL,\n                                         mBrightnessMapper.getShortTermModelTimeout());\n    } else if (isInteractivePolicy(policy) &amp;&amp; !isInteractivePolicy(oldPolicy)) {\n        //\u5982\u679cDisplay\u72b6\u6001\u503c\u7531\u4e0d\u53ef\u4ea4\u4e92\u53d8\u4e3a\u4ea4\u4e92\u72b6\u6001\uff0c\u5219\u79fb\u9664\u5ef6\u65f6\u6d88\u606f\u7684\u53d1\u9001\n        mHandler.removeMessages(MSG_INVALIDATE_SHORT_TERM_MODEL);\n    }\n    return true;\n}\n</code></pre> \u4ece\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u5c4f\u5e55\u72b6\u6001\u8fdb\u5165doze\u6216\u8005asleep\u540e\uff0c\u4f1a\u53d1\u9001\u4e00\u4e2a\u5ef6\u65f6Handler\u6d88\u606f\uff0c\u5e76\u5728\u5230\u8fbe\u65f6\u95f4\u540e\u5c06mShortTermModelValid\u503c\u7f6e\u4e3afalse\uff0c\u8be5\u503c\u7528\u6765\u6807\u793a\u7528\u6237\u8bbe\u7f6e\u7684\u77ed\u671f\u6a21\u578b\u5931\u6548\u3002 \u5176\u4e2dmShortTermModelTimeout\u6700\u7ec8\u6765\u6e90\u5982\u4e0b\uff0c\u8868\u793a300\u79d2\u3002 <pre><code>1. mBrightnessMapper.getShortTermModelTimeout() \u4e5f\u5c31\u662f BrightnessMappingStrategy.getShortTermModelTimeout()\n\n2. mBrightnessMapper.mShortTermModelTimeout\n\n3. private SimpleMappingStrategy(float[] lux, int[] brightness, float maxGamma,\n                long timeout) {\n       mShortTermModelTimeout = timeout;\n   }\n\n4. new SimpleMappingStrategy(luxLevels, brightnessLevelsBacklight, autoBrightnessAdjustmentMaxGamma, shortTermModelTimeout);\n\n5. long shortTermModelTimeout = resources.getInteger(com.android.internal.R.integer.config_autoBrightnessShortTermModelTimeout);\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n&lt;integer name=\"config_autoBrightnessShortTermModelTimeout\"&gt;300000&lt;/integer&gt;\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#setautobrightnessadjustment","title":"setAutoBrightnessAdjustment()","text":"<p>\u8bbe\u7f6e\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\uff0c\u524d\u63d0\u662f\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u540e\uff0c\u5c06\u8c03\u7528\u5230BrightnessMappingStragety\u4e2d\u7684\u540c\u540d\u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\nprivate boolean setAutoBrightnessAdjustment(float adjustment) {\n    return mBrightnessMapper.setAutoBrightnessAdjustment(adjustment);\n}\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n@Override\npublic boolean setAutoBrightnessAdjustment(float adjustment) {\n    //\u5bf9adjustment\u8fdb\u884c\u9650\u5236\uff0c\u53d6\u503c\u8303\u56f4\u4e3a[-1,1]\n    adjustment = MathUtils.constrain(adjustment, -1, 1);\n    if (adjustment == mAutoBrightnessAdjustment) {\n        return false;\n    }\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"setAutoBrightnessAdjustment: \" + mAutoBrightnessAdjustment + \" =&gt; \" +\n               adjustment);\n        PLOG.start(\"auto-brightness adjustment\");\n    }\n    //\u8bbe\u7f6e\u81ea\u52a8\u80cc\u5149\u8c03\u8282\u503c\n    mAutoBrightnessAdjustment = adjustment;\n    //\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\n    computeSpline();\n    return true;\n}\n</code></pre> \u5982\u679cmAutoBrightnessAdjustment\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u4f1a\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\u3002\u53ef\u4ee5\u8bf4\uff0cLux-Nits\u66f2\u7ebf\u7684\u521b\u5efa\u548c\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\u6709\u7740\u83ab\u5927\u7684\u5173\u7cfb\uff0c\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u503c\u4e3a0\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#setscreenbrightnessbyuser","title":"setScreenBrightnessByUser()","text":"<p>\u5c06\u7528\u6237\u62d6\u52a8\u80cc\u5149\u6761\u8bbe\u7f6e\u7684\u80cc\u5149\u548c\u5f53\u65f6\u7684Lux\u503c\u6dfb\u52a0\u5230\u7528\u4e8e\u521b\u5efa\u66f2\u7ebf\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u91cd\u65b0\u521b\u5efaLux-Nits\u66f2\u7ebf\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate boolean setScreenBrightnessByUser(float brightness) {\n    if (!mAmbientLuxValid) {\n        // If we don't have a valid ambient lux then we don't have a valid brightness anyways,\n        // and we can't use this data to add a new control point to the short-term model.\n        return false;\n    }\n    //\u5c06\u5f53\u524d\u7684Lux\u503c\u548c\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u503c\u6dfb\u52a0\u5230\u66f2\u7ebf\u4e2d\n    mBrightnessMapper.addUserDataPoint(mAmbientLux, brightness);\n    //\u8bbe\u7f6e\u77ed\u671f\u6a21\u578b\u6709\u6548\n    mShortTermModelValid = true;\n    //\u8bb0\u5f55\u8be5\u80cc\u5149\u63a7\u5236\u70b9\u7684Lux\u503c\n    mShortTermModelAnchor = mAmbientLux;\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"ShortTermModel: anchor=\" + mShortTermModelAnchor);\n    }\n    return true;\n}\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#preparebrightnessadjustmentsample","title":"prepareBrightnessAdjustmentSample()","text":"<p>\u5f53\u914d\u7f6e\u5143\u7d20\u53d1\u751f\u6539\u53d8\u540e\uff0c\u5bf9Lux\u548c\u80cc\u5149\u65e7\u503c\u8fdb\u884c\u8bb0\u5f55\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate void prepareBrightnessAdjustmentSample() {\n    if (!mBrightnessAdjustmentSamplePending) {\n        mBrightnessAdjustmentSamplePending = true;\n        //\u8bb0\u5f55Lux\u548c\u80cc\u5149\u65e7\u503c\n        mBrightnessAdjustmentSampleOldLux = mAmbientLuxValid ? mAmbientLux : -1;\n        mBrightnessAdjustmentSampleOldBrightness = mScreenAutoBrightness;\n    } else {\n        mHandler.removeMessages(MSG_BRIGHTNESS_ADJUSTMENT_SAMPLE);\n    }\n\n    mHandler.sendEmptyMessageDelayed(MSG_BRIGHTNESS_ADJUSTMENT_SAMPLE,\n                                     BRIGHTNESS_ADJUSTMENT_SAMPLE_DEBOUNCE_MILLIS);\n}\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#setlightsensorenabled","title":"setLightSensorEnabled()","text":"<p>\u8d1f\u8d23LightSensor\u7684\u6ce8\u518c\u548c\u89e3\u9664\u6ce8\u518c\uff0c\u5f53\u8bbe\u5907\u5904\u4e8e\u4eae\u5c4f\u72b6\u6001\u4e14\u6253\u5f00\u81ea\u9002\u5e94\u80cc\u5149\u8c03\u8282\u65f6\uff0c\u5c06\u6ce8\u518c\u4e00\u4e2aLightSensor\uff0c\u4ee5\u76d1\u542c\u73af\u5883\u5149\u7684\u5f3a\u5ea6\u53d8\u5316\uff0c\u8be5\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate boolean setLightSensorEnabled(boolean enable) {\n    if (enable) {//\u6ce8\u518c\n        if (!mLightSensorEnabled) {\n            //\u542f\u7528LightSensor\n            mLightSensorEnabled = true;\n            //LightSensor\u5f00\u542f\u65f6\u95f4\n            mLightSensorEnableTime = SystemClock.uptimeMillis();\n            //LightSensor\u7684\u4e8b\u4ef6\u901f\u7387\n            mCurrentLightSensorRate = mInitialLightSensorRate;\n            registerForegroundAppUpdater();\n            //\u6ce8\u518cLightSensor\n            mSensorManager.registerListener(mLightSensorListener, mLightSensor,\n                                            mCurrentLightSensorRate * 1000, mHandler);\n            return true;\n        }\n    } else if (mLightSensorEnabled) {//\u89e3\u9664\u6ce8\u518c\n        mLightSensorEnabled = false;\n        mAmbientLuxValid = !mResetAmbientLuxAfterWarmUpConfig;\n        mScreenAutoBrightness = PowerManager.BRIGHTNESS_INVALID_FLOAT;\n        mRecentLightSamples = 0;\n        mAmbientLightRingBuffer.clear();\n        mCurrentLightSensorRate = -1;\n        mHandler.removeMessages(MSG_UPDATE_AMBIENT_LUX);\n        unregisterForegroundAppUpdater();\n        mSensorManager.unregisterListener(mLightSensorListener);\n    }\n    return false;\n}\n</code></pre> \u5f53\u73af\u5883\u5149\u5f3a\u5ea6\u53d1\u751f\u53d8\u5316\u540e\uff0c\u5c06\u56de\u8c03mLightSensorListener\u63a5\u53e3\u7684\u65b9\u6cd5\u6765\u66f4\u65b0\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate final SensorEventListener mLightSensorListener = new SensorEventListener() {\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (mLightSensorEnabled) {\n            final long time = SystemClock.uptimeMillis();\n            final float lux = event.values[0];\n            //\u5904\u7406LightSensor\u7684\u4e0a\u62a5\u4e8b\u4ef6\uff0c\u5e76\u66f4\u65b0Lux\u503c\n            handleLightSensorEvent(time, lux);\n        }\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // Not used.\n    }\n};\n\nprivate void handleLightSensorEvent(long time, float lux) {\n    Trace.traceCounter(Trace.TRACE_TAG_POWER, \"ALS\", (int) lux);\n    mHandler.removeMessages(MSG_UPDATE_AMBIENT_LUX);\n\n    if (mAmbientLightRingBuffer.size() == 0) {\n        // switch to using the steady-state sample rate after grabbing the initial light sample\n        adjustLightSensorRate(mNormalLightSensorRate);\n    }\n    applyLightSensorMeasurement(time, lux);\n    updateAmbientLux(time);\n}\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#updateautobrightness","title":"updateAutoBrightness()","text":"<p>\u66f4\u65b0\u6700\u7ec8\u8ba1\u7b97\u7684\u81ea\u52a8\u80cc\u5149\u503c\uff0c\u5176\u4e2d\u4f1a\u5c06\u8fd9\u4e2a\u503c\u4e0e\u8c03\u8282\u5c4f\u5e55\u53d8\u6697\u6216\u53d8\u4eae\u7684\u9608\u503c\u505a\u5224\u65ad\uff0c\u7136\u540e\u518d\u51b3\u5b9a\u662f\u5426\u8981\u5e94\u7528\u8be5\u80cc\u5149\u503c\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate void updateAutoBrightness(boolean sendUpdate, boolean isManuallySet) {\n    if (!mAmbientLuxValid) {\n        return;\n    }\n\n    //\u6839\u636eLux\u503c\u4ece\u6837\u6761\u66f2\u7ebf\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684\u80cc\u5149\u503c\uff0c\u533a\u95f4\u4e3a(0,1.0]\u7684\u6d6e\u70b9\u6570\n    float value = mBrightnessMapper.getBrightness(mAmbientLux, mForegroundAppPackageName,\n            mForegroundAppCategory);\n\n    //\u8ba1\u7b97\u6700\u7ec8\u7684\u80cc\u5149\u503c\n    float newScreenAutoBrightness = clampScreenBrightness(value);\n\n    // The min/max range can change for brightness due to HBM. See if the current brightness\n    // value still falls within the current range (which could have changed).\n    //\u5bf9\u80cc\u5149\u503c\u8fdb\u884c\u5408\u6cd5\u68c0\u6d4b\n    final boolean currentBrightnessWithinAllowedRange = BrightnessSynchronizer.floatEquals(\n            mScreenAutoBrightness, clampScreenBrightness(mScreenAutoBrightness));\n\n    // If screenAutoBrightness is set, we should have screen{Brightening,Darkening}Threshold,\n    // in which case we ignore the new screen brightness if it doesn't differ enough from the\n    // previous one.\n    //\u5982\u679c\u65b0\u7684\u80cc\u5149\u503c\u4ecb\u4e8e\u53d8\u6697\u548c\u53d8\u4eae\u9608\u503c\u4e4b\u95f4\uff0c\u5219\u4e0d\u8fdb\u884c\u80cc\u5149\u8c03\u8282\n    if (!Float.isNaN(mScreenAutoBrightness)\n            &amp;&amp; !isManuallySet\n            &amp;&amp; newScreenAutoBrightness &gt; mScreenDarkeningThreshold\n            &amp;&amp; newScreenAutoBrightness &lt; mScreenBrighteningThreshold\n            &amp;&amp; currentBrightnessWithinAllowedRange) {\n        if (mLoggingEnabled) {\n            Slog.d(TAG, \"ignoring newScreenAutoBrightness: \"\n                    + mScreenDarkeningThreshold + \" &lt; \" + newScreenAutoBrightness\n                    + \" &lt; \" + mScreenBrighteningThreshold);\n        }\n        return;\n    }\n    if (!BrightnessSynchronizer.floatEquals(mScreenAutoBrightness,\n            newScreenAutoBrightness)) {\n        if (mLoggingEnabled) {\n            Slog.d(TAG, \"updateAutoBrightness: \"\n                    + \"mScreenAutoBrightness=\" + mScreenAutoBrightness + \", \"\n                    + \"newScreenAutoBrightness=\" + newScreenAutoBrightness);\n        }\n        //\u5426\u5219\u4f7f\u7528\u65b0\u7684\u80cc\u5149\u503c\n        mScreenAutoBrightness = newScreenAutoBrightness;\n        mScreenBrighteningThreshold = clampScreenBrightness(\n                mScreenBrightnessThresholds.getBrighteningThreshold(newScreenAutoBrightness));\n        mScreenDarkeningThreshold = clampScreenBrightness(\n                mScreenBrightnessThresholds.getDarkeningThreshold(newScreenAutoBrightness));\n\n        if (sendUpdate) {\n            //\u66f4\u65b0\u80cc\u5149\n            mCallbacks.updateBrightness();\n        }\n    }\n}\n</code></pre> \u901a\u8fc7\u5f53\u524d\u7684Lux\u503c\u4ecemBrightnessMapper\u4e2d\u83b7\u53d6\u5230\u4e86\u6700\u7ec8\u7684\u80cc\u5149\u503c\uff0cgetBrightness()\u65b9\u6cd5\u4f1a\u4f7f\u7528mBrightnessSpline\u66f2\u7ebf\u548cmNitsToBacklightSpline\u66f2\u7ebf\u5b8c\u6210Lux\u503c\u5230Nits\u503c\u518d\u5230Backlight\u503c\u7684\u8f6c\u6362\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\n@Override\npublic float getBrightness(float lux, String packageName,\n                           @ApplicationInfo.Category int category) {\n    //\u6839\u636eLux\u503c\uff0c\u4ecemBrightnessSpline\u66f2\u7ebf\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684Nits\u503c\n    float nits = mBrightnessSpline.interpolate(lux);\n    //\u518d\u6839\u636eNits\u503c\uff0c\u4ecemNitsToBacklightSpline\u66f2\u7ebf\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684\u80cc\u5149\u503c\n    float brightness = mNitsToBrightnessSpline.interpolate(nits);\n    // Correct the brightness according to the current application and its category, but\n    // only if no user data point is set (as this will override the user setting).\n    if (mUserLux == -1) {\n        brightness = correctBrightness(brightness, packageName, category);\n    } else if (mLoggingEnabled) {\n        Slog.d(TAG, \"user point set, correction not applied\");\n    }\n    return brightness;\n}\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#adjustment","title":"adjustment\u503c\u7684\u8ba1\u7b97","text":"<p>\u5728Android 8.1\u4e2d\uff0c\u5f53\u7528\u6237\u5728\u5f00\u542f\u81ea\u52a8\u80cc\u5149\u7684\u573a\u666f\u4e0b\u624b\u52a8\u62d6\u52a8\u80cc\u5149\u6761\u8c03\u8282\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528setScreenAutoBrightnessAdjustment()\u65b9\u6cd5\u8c03\u6574\u4e86\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\uff0c\u7136\u540e\u901a\u8fc7\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\u8ba1\u7b97\u51fa\u65b0\u7684\u81ea\u52a8\u80cc\u5149\u503c\u3002 \u800c\u4eceAndroid 9.0\u5f00\u59cb\u5c31\u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u4f1a\u76f4\u63a5\u8bbe\u7f6e\u7528\u6237\u9009\u62e9\u7684\u80cc\u5149\u503c\u4f5c\u4e3a\u8bbe\u5907\u65b0\u7684\u80cc\u5149\u503c\uff0c\u8fd8\u4f1a\u5c06\u6b64\u65f6\u7684\u73af\u5883\u5149\u5f3aLux\u503c\u548c\u8bbe\u7f6e\u7684\u80cc\u5149\u503c\u4f5c\u4e3a\u63a7\u5236\u70b9\u6dfb\u52a0\u5230\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u91cd\u65b0\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u81ea\u52a8\u80cc\u5149\u7684\u8c03\u6574\u503c\u5c06\u4e0d\u518d\u7531\u7528\u6237\u4e3b\u52a8\u8bbe\u7f6e(\u867d\u7136\u5728DMS\u4e2d\u4fdd\u7559\u4e86setTemporaryAutoBrightnessAdjustment()\u7528\u4e8e\u8c03\u6574adjustment\u503c)\uff0c\u800c\u662f\u6839\u636e\u7528\u6237\u7684\u8c03\u6574\u81ea\u52a8\u63a8\u65ad\u5f97\u51fa\uff0c\u4e0b\u9762\u5c31\u4ece\u4ee3\u7801\u4e2d\u5f00\u59cb\u5206\u6790\u8fd9\u4e9b\u65b0\u673a\u5236\u7684\u5b9e\u73b0\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\n1. public void setTemporaryAutoBrightnessAdjustment(float adjustment) {\n        Message msg = mHandler.obtainMessage(MSG_SET_TEMPORARY_AUTO_BRIGHTNESS_ADJUSTMENT,\n                Float.floatToIntBits(adjustment), 0 /*unused*/);\n        msg.sendToTarget();\n    }\n\n2. case MSG_SET_TEMPORARY_AUTO_BRIGHTNESS_ADJUSTMENT:\n        mTemporaryAutoBrightnessAdjustment = Float.intBitsToFloat(msg.arg1);\n        updatePowerState();\n        break;\n3. updatePowerState() {\n       AutomaticBrightnessController.configure() \n   }\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n4. AutomaticBrightnessController.configure() \n\n5. final boolean userSetBrightnessChanged = updateUserSetScreenBrightness();\n   AutomaticBrightnessController.setScreenBrightnessByUser() \n\n6. mBrightnessMapper.addUserDataPoint(mAmbientLux, brightness);\n\nhttp://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n7. BrightnessMappingStrategy.addUserDataPoint()\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#adduserdatapoint","title":"addUserDataPoint()","text":"<p>\u5f53\u901a\u8fc7\u80cc\u5149\u6761\u8c03\u8282\u80cc\u5149\u65f6\uff0c\u5c06\u8c03\u7528DisplayPowerController\u4e2d\u7684setTemporaryAutoBrightnessAdjustment()\u65b9\u6cd5\uff0c\u5e76\u6267\u884c\u624b\u52a8\u80cc\u5149\u8c03\u8282\u6d41\u7a0b\uff0c\u7136\u540e\u6267\u884c\u81ea\u52a8\u80cc\u5149\u63a7\u5236\u5668\u7684\u914d\u7f6e\u6d41\u7a0b\u3002\u7531\u4e8e\u7528\u6237\u5bf9\u80cc\u5149\u7684\u624b\u52a8\u8bbe\u7f6e\uff0c\u56e0\u6b64\u5c06\u6709:</p> <ul> <li>mLastUserSetScreenBrightness\uff1a\u7531\u9ed8\u8ba4\u76840\u53d8\u4e3a\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u503c;</li> <li>userChangedBrightness\uff1a\u7531false\u53d8\u4e3atrue\u3002</li> </ul> <p>\u6b64\u65f6\u8fd9\u4e24\u4e2a\u503c\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\uff0c\u4f46\u5176\u4ed6\u503c\u8fd8\u672a\u53d1\u751f\u53d8\u5316\u3002\u90a3\u4e48\u7ed3\u5408AutomaticBrightnessController\u7684\u914d\u7f6e\uff0c\u5728\u8c03\u7528configure()\u65b9\u6cd5\u65f6\u5c06\u8c03\u7528setScreenBrightnessByUser()\u65b9\u6cd5\uff0c\u7528\u4e8e\u5c06\u7528\u6237\u62d6\u52a8\u80cc\u5149\u6761\u8bbe\u7f6e\u7684\u80cc\u5149\u548c\u5f53\u65f6\u7684Lux\u503c\u6dfb\u52a0\u5230\u7528\u4e8e\u521b\u5efa\u6837\u6761\u66f2\u7ebf\u7684\u6570\u7ec4\u4e2d\uff0c\u5177\u4f53\u662f\u8c03\u7528BrigtnessMappingStrategy\u5bf9\u8c61\u7684addUserDataPoint()\u65b9\u6cd5\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u5c06\u4f1a\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u65b0\u7684adjustment\u503c\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\n@Override\npublic void addUserDataPoint(float lux, float brightness) {\n    //\u83b7\u53d6\u9ed8\u8ba4\u914d\u7f6e\u503c\u521b\u5efa\u7684\u6837\u6761\u66f2\u7ebf\u4e2dLux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\n    float unadjustedBrightness = getUnadjustedBrightness(lux);\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"addUserDataPoint: (\" + lux + \",\" + brightness + \")\");\n        PLOG.start(\"add user data point\")\n                .logPoint(\"user data point\", lux, brightness)\n                .logPoint(\"current brightness\", lux, unadjustedBrightness);\n    }\n    //\u901a\u8fc7\u4f20\u5165\u7684\u4e09\u4e2a\u503c\u63a8\u65ad\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\n    float adjustment = inferAutoBrightnessAdjustment(mMaxGamma,\n            brightness /* desiredBrightness */,\n            unadjustedBrightness /* currentBrightness */);\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"addUserDataPoint: \" + mAutoBrightnessAdjustment + \" =&gt; \" +\n                adjustment);\n    }\n    //\u66f4\u65b0\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\n    mAutoBrightnessAdjustment = adjustment;\n    //\u7528\u6237\u5728\u5f00\u542f\u81ea\u52a8\u80cc\u5149\u60c5\u51b5\u4e0b\u62d6\u52a8\u80cc\u5149\u6761\u8c03\u8282\u80cc\u5149\u65f6\u7684Lux\u503c\n    mUserLux = lux;\n    //\u7528\u6237\u5728\u5f00\u542f\u81ea\u52a8\u80cc\u5149\u60c5\u51b5\u4e0b\u62d6\u52a8\u80cc\u5149\u6761\u8c03\u8282\u65f6\u7684\u80cc\u5149\u503c\n    mUserBrightness = brightness;\n    //\u91cd\u65b0\u521b\u5efaLux-Nits\u6837\u6761\u66f2\u7ebf\n    computeSpline();\n}\n</code></pre> \u9996\u5148\u5c06\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u6570\u7ec4\u503c\u521b\u5efa\u7684\u539f\u59cb\u6837\u6761\u66f2\u7ebf\u4e2d\u83b7\u53d6\u5f53\u524dLux\u7684\u503c\u3002\u8c03\u7528getUnadjustedBrightness()\u83b7\u53d6\u9ed8\u8ba4\u914d\u7f6e\u503c\u521b\u5efa\u7684\u6837\u6761\u66f2\u7ebf\u4e2dLux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#getunadjustedbrightness","title":"getUnadjustedBrightness()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\nprivate float getUnadjustedBrightness(float lux) {\n    //\u83b7\u53d6BrightnessConfiguration\u4e2d\u7684Lux-Nits\u6620\u5c04\n    Pair&lt;float[], float[]&gt; curve = mConfig.getCurve();\n    //\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6Lux-Nits\u6837\u6761\u66f2\u7ebf\n    Spline spline = Spline.createSpline(curve.first, curve.second);\n    //\u6839\u636eLux\u503c\u5f97\u5230Nits\u503c\uff0c\u518d\u6839\u636eNits\u503c\u4ecemNitsToBacklightSpline\u4e2d\u5f97\u5230\u5bf9\u5e94\u7684\u80cc\u5149\u503c\n    return mNitsToBacklightSpline.interpolate(spline.interpolate(lux));\n}\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#inferautobrightnessadjustment","title":"inferAutoBrightnessAdjustment()","text":"<p>\u5f00\u59cb\u8ba1\u7b97\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c\uff0c\u8c03\u7528inferAutoBrightnessAdjustment()\u65b9\u6cd5\uff0c\u5e76\u4e14\u5c06\u6839\u636e\u4ee5\u4e0b\u4e09\u4e2a\u503c\u7528\u516c\u5f0f\u8ba1\u7b97\u51fa\u65b0\u7684adjustment\u503c\uff1a</p> <ul> <li>\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684MaxGamma\u503c\uff1b</li> <li>\u539f\u59cb\u6837\u6761\u66f2\u7ebf\u4e2d\u6b64Lux\u503c\u5bf9\u5e94\u7684\u6807\u51c6\u5316\u80cc\u5149\u503c\uff1b</li> <li>\u7528\u6237\u6240\u8c03\u6574\u7684\u76ee\u6807\u80cc\u5149\u503c\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\nprotected float inferAutoBrightnessAdjustment(float maxGamma, float desiredBrightness,\n        float currentBrightness) {\n    float adjustment = 0;\n    float gamma = Float.NaN;\n    // Extreme edge cases: use a simpler heuristic, as proper gamma correction around the edges\n    // affects the curve rather drastically.\n    if (currentBrightness &lt;= 0.1f || currentBrightness &gt;= 0.9f) {\n        //\u5982\u679c\u5f53\u524d\u6807\u51c6\u5316\u7684\u80cc\u5149\u503c\u4ecb\u4e8e[0.1, 0.9]\u4e4b\u95f4\n        adjustment = (desiredBrightness - currentBrightness);\n    // Edge case: darkest adjustment possible.\n    } else if (desiredBrightness == 0) {\n        //\u5982\u679cLux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u4e3a0\n        adjustment = -1;\n    // Edge case: brightest adjustment possible.\n    } else if (desiredBrightness == 1) {\n        //\u5982\u679cLux\u503c\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u4e3a\u6700\u5927\u503c\n        adjustment = +1;\n    } else {\n        // current^gamma = desired =&gt; gamma = log[current](desired)\n        //\u8ba1\u7b97adjustment\u503c\u7684\u6570\u5b66\u516c\u5f0f\n        gamma = MathUtils.log(desiredBrightness) / MathUtils.log(currentBrightness);\n        // max^-adjustment = gamma =&gt; adjustment = -log[max](gamma)\n        adjustment = -MathUtils.log(gamma) / MathUtils.log(maxGamma);\n    }\n    //\u5bf9adjustment\u503c\u8fdb\u884c\u8303\u56f4\u68c0\u67e5\uff0c\u4fdd\u8bc1\u4ecb\u4e8e[-1, 1]\u4e4b\u95f4\n    adjustment = MathUtils.constrain(adjustment, -1, +1);\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"inferAutoBrightnessAdjustment: \" + maxGamma + \"^\" + -adjustment + \"=\" +\n                MathUtils.pow(maxGamma, -adjustment) + \" == \" + gamma);\n        Slog.d(TAG, \"inferAutoBrightnessAdjustment: \" + currentBrightness + \"^\" + gamma + \"=\" +\n                MathUtils.pow(currentBrightness, gamma) + \" == \" + desiredBrightness);\n    }\n    return adjustment;\n}\n</code></pre> \u5230\u8fd9\u91cc\uff0c\u81ea\u52a8\u80cc\u5149\u7684\u8c03\u6574\u503cadjustment\u5df2\u7ecf\u8ba1\u7b97\u51fa\u4e86\uff0c\u63a5\u4e0b\u6765\u518d\u4e86\u89e3\u6709\u4e86adjustment\u4e4b\u540e\u8be5\u5982\u4f55\u8c03\u6574\u6837\u6761\u66f2\u7ebf\u3002</li> </ul>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#getadjustedcurve","title":"getAdjustedCurve()","text":"<p>\u5728addUserDataPoint()\u65b9\u6cd5\u4e2d\uff0c\u8ba1\u7b97\u5b8cadjustment\u503c\u540e\uff0c\u4f1a\u5c06\u7528\u6237\u8bbe\u7f6e\u7684Lux\u503c\u548cBrightness\u503c\u5206\u522b\u8d4b\u7ed9BrightnessMappingStrategy\u5bf9\u8c61\u6210\u5458mUserLux\u548cmUserBrightness\uff0c\u5e76\u8c03\u7528computeSpline()\u91cd\u65b0\u521b\u5efaLux-Nits\u6837\u6761\u66f2\u7ebf\u3002 \u4e0a\u6587\u6709\u5bf9computeSpline\u8bb2\u8ff0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5bf9\u5176\u4e2d\u8c03\u7528\u7684getAdjustedCurve()\u8fdb\u884c\u5206\u6790\uff0c\u4e0b\u9762\u5bf9\u5b83\u505a\u4e00\u4e9b\u8865\u5145\u8bf4\u660e\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\nprotected Pair&lt;float[], float[]&gt; getAdjustedCurve(float[] lux, float[] brightness,\n        float userLux, float userBrightness, float adjustment, float maxGamma) {\n    //\u521d\u59cb\u5316\u4e24\u4e2a\u65b0\u6570\u7ec4\uff0c\u5206\u522b\u5b58\u50a8Lux\u503c\u548c\u80cc\u5149\u503c\n    float[] newLux = lux;\n    float[] newBrightness = Arrays.copyOf(brightness, brightness.length);\n    if (mLoggingEnabled) {\n        PLOG.logCurve(\"unadjusted curve\", newLux, newBrightness);\n    }\n\n    //\u9650\u5b9aadjustment\u4ecb\u4e8e[-1, 1]\u4e4b\u95f4\n    adjustment = MathUtils.constrain(adjustment, -1, 1);\n    float gamma = MathUtils.pow(maxGamma, -adjustment);\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"getAdjustedCurve: \" + maxGamma + \"^\" + -adjustment + \"=\" +\n                MathUtils.pow(maxGamma, -adjustment) + \" == \" + gamma);\n    }\n\n    //gamma != 1\u8bf4\u660eadjustment\u4e0d\u4e3a0\n    if (gamma != 1) {\n        for (int i = 0; i &lt; newBrightness.length; i++) {\n            newBrightness[i] = MathUtils.pow(newBrightness[i], gamma);\n        }\n    }\n    if (mLoggingEnabled) {\n        PLOG.logCurve(\"gamma adjusted curve\", newLux, newBrightness);\n    }\n\n    //\u5982\u679c\u7528\u6237\u5728\u80cc\u5149\u6761\u4e0a\u624b\u52a8\u8c03\u8282\u4e86\u80cc\u5149\n    if (userLux != -1) {\n        Pair&lt;float[], float[]&gt; curve = insertControlPoint(newLux, newBrightness, userLux,\n                userBrightness);\n        newLux = curve.first;\n        newBrightness = curve.second;\n        //\u5982\u679c\u5141\u8bb8\u5bf9\u5e94\u7b49\u7ea7\u7684log\uff0c\u4e0b\u9762\u5c06\u8ba1\u7b97\u5e76\u6253\u5370\u65e7\u503c\uff0c\u7528\u4e8e\u5bf9\u6bd4\n        if (mLoggingEnabled) {\n            PLOG.logCurve(\"gamma and user adjusted curve\", newLux, newBrightness);\n            // This is done for comparison.\n            curve = insertControlPoint(lux, brightness, userLux, userBrightness);\n            PLOG.logCurve(\"user adjusted curve\", curve.first ,curve.second);\n        }\n    }\n    return Pair.create(newLux, newBrightness);\n}\n</code></pre> getAdjustedCurve\u65b9\u6cd5\u63a5\u6536\u4ee5\u4e0b6\u4e2a\u53c2\u6570\uff1a - lux\uff1aLux\u503c\u6570\u7ec4 - brightness\uff1a\u6839\u636eLux-&gt; Nits-&gt;Backlight\u8f6c\u6362\u5f97\u5230\u7684\u6700\u7ec8\u80cc\u5149\u503c\u6570\u7ec4 - userLux\uff1a\u7528\u6237\u8bbe\u7f6e\u65f6\u7684Lux\u503c - userBrightness\uff1a\u7528\u6237\u8bbe\u7f6e\u7684\u80cc\u5149\u503c - adjustment\uff1a\u81ea\u52a8\u80cc\u5149\u8c03\u6574\u503c - maxGamma\uff1a\u6700\u5927Gamma\u503c</p> <p>\u901a\u8fc7adustment\u503c\u83b7\u53d6gamma\u503c\uff0c\u518d\u901a\u8fc7gamma\u503c\u8c03\u6574\u6574\u4e2a\u80cc\u5149\u6570\u7ec4\u5143\u7d20\u3002\u5176\u5b9e\u8fd9\u91cc\u8ba1\u7b97\u65b0\u7684\u80cc\u5149\u503c\u7684\u7b97\u6cd5\u5c31\u662finferAutoBrightnessAdjustment()\u4e2d\u7684\u53cd\u64cd\u4f5c\uff0c\u901a\u8fc7adjustment\u503c\u5f97\u5230gamma\u503c\uff0c\u518d\u7531gamma\u503c\u5f97\u5230\u65b0\u7684\u80cc\u5149\u503c\u6570\u7ec4\u3002 \u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0cgetAdjustedCurve()\u4e2d\u7684maxGamma\u3001adjustment\u503c\u6709\u5982\u4e0b\u5173\u7cfb\uff1a</p> <p></p> <p>\u51fa\u65b0\u7684\u80cc\u5149\u503c\u540e\uff0c\u8c03\u7528insertControlPoint()\u5c06\u7528\u6237\u8bbe\u7f6e\u7684Lux\u503c\u53ca\u5bf9\u5e94\u80cc\u5149\u503c\u4f5c\u4e3a\u66f2\u7ebf\u63a7\u5236\u70b9\u63d2\u5165\u76f8\u5173\u6570\u7ec4\u4e2d\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/BrightnessMappingStrategy.java\n\nprivate Pair&lt;float[], float[]&gt; insertControlPoint(\n        float[] luxLevels, float[] brightnessLevels, float lux, float brightness) {\n    //\u627e\u5230\u63d2\u5165\u70b9\u7d22\u5f15\uff0c\u4ee5\u4fdd\u6301\u6570\u7ec4\u5143\u7d20\u9012\u589e\n    final int idx = findInsertionPoint(luxLevels, lux);\n    final float[] newLuxLevels;\n    final float[] newBrightnessLevels;\n    if (idx == luxLevels.length) { //\u5982\u679c\u63d2\u5165\u7d22\u5f15\u7b49\u4e8e\u6570\u7ec4\u957f\u5ea6\uff0c\u5219\u9700\u8981\u63d2\u5165\u5230\u672b\u5c3e\u4f4d\u7f6e\uff0c\u4e14\u65b0Lux\u6570\u7ec4\u957f\u5ea6\u6bd4\u539f\u6765\u59271\n        newLuxLevels = Arrays.copyOf(luxLevels, luxLevels.length + 1);\n        newBrightnessLevels  = Arrays.copyOf(brightnessLevels, brightnessLevels.length + 1);\n        newLuxLevels[idx] = lux;\n        newBrightnessLevels[idx] = brightness;\n    } else if (luxLevels[idx] == lux) { //\u5982\u679c\u7528\u6237\u8bbe\u7f6e\u7684lux\u503c\u5df2\u5904\u4e8eLux\u503c\u6570\u7ec4\u4e2d\uff0c\u5219\u76f4\u63a5\u590d\u5236\u539f\u6570\u7ec4\u5373\u53ef\n        newLuxLevels = Arrays.copyOf(luxLevels, luxLevels.length);\n        newBrightnessLevels = Arrays.copyOf(brightnessLevels, brightnessLevels.length);\n        newBrightnessLevels[idx] = brightness;\n    } else { //\u5426\u5219\u8868\u793a\u9700\u8981\u63d2\u5165\u5728\u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\n        //\u521d\u59cb\u5316\u65b0Lux\u503c\u6570\u7ec4\uff0c\u957f\u5ea6\u6bd4\u539f\u6570\u7ec4\u59271\n        newLuxLevels = Arrays.copyOf(luxLevels, luxLevels.length + 1);\n        //\u5c06\u539f\u6570\u7ec4idx\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u5411\u540e\u79fb\u52a81\u4f4d\uff0c\u7136\u540e\u5c06\u65b0\u7684Lux\u503c\u63d2\u5165\u5230idx\u4f4d\u7f6e\n        System.arraycopy(newLuxLevels, idx, newLuxLevels, idx+1, luxLevels.length - idx);\n        newLuxLevels[idx] = lux;\n        //\u521d\u59cb\u5316\u65b0\u80cc\u5149\u503c\u6570\u7ec4\uff0c\u957f\u5ea6\u6bd4\u539f\u6570\u7ec4\u59271\n        newBrightnessLevels  = Arrays.copyOf(brightnessLevels, brightnessLevels.length + 1);\n        //\u5c06\u539f\u6570\u7ec4idx\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u5411\u540e\u79fb\u52a81\u4f4d\uff0c\u7136\u540e\u5c06\u65b0\u7684\u80cc\u5149\u503c\u63d2\u5165\u5230idx\u4f4d\u7f6e\n        System.arraycopy(newBrightnessLevels, idx, newBrightnessLevels, idx+1,\n                brightnessLevels.length - idx);\n        newBrightnessLevels[idx] = brightness;\n    }\n    //\u5e73\u6ed1\u66f2\u7ebf\u65b9\u6cd5\uff0c\u65b0Lux\u503c\u4e4b\u540e\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u5c06\u5168\u90e8\u4e3anewBrightnessLevels\n    smoothCurve(newLuxLevels, newBrightnessLevels, idx);\n    return Pair.create(newLuxLevels, newBrightnessLevels);\n}\n</code></pre> \u8be5\u65b9\u6cd5\u8c03\u7528\u5b8c\u6bd5\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u643a\u5e26\u6709Lux\u503c\u548c\u5bf9\u5e94\u80cc\u5149\u503c\u7684Pair\u5bf9\u8c61\u7ed9getAdjustedCurve()\uff0c\u5728getAdjustedCurve()\u4e2d\u5c06\u8fd4\u56de\u8be5Pair\u5bf9\u8c61\u7ed9\u5230computeSpline()\u4e2d\uff0ccomputeSpline()\u5c06\u4ece\u8fd4\u56de\u7684Pair\u5bf9\u50cf\u4e2d\u53d6\u51faLux\u6570\u7ec4\u503c\u548c\u80cc\u5149\u6570\u7ec4\u503c\uff0c\u5b8c\u6210\u66f2\u7ebf\u7684\u521b\u5efa\u3002 \u8fd9\u4e9b\u903b\u8f91\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u4e4b\u540e\u56de\u5230configure()\u65b9\u6cd5\u4e2d\u7531LightSensor\u68c0\u6d4b\u73af\u5883\u5149\u5f3a\uff0c\u5e76\u6700\u7ec8\u8c03\u8282\u80cc\u5149\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#updatepowerstate","title":"updatePowerState()","text":"<p>\u6211\u4eec\u518d\u56de\u5230DisplayPowerController\u7684updatePowerState()\u65b9\u6cd5\u4e2d\uff0c\u5f53configure()\u6267\u884c\u5b8c\u6bd5\u540e\uff0cDPC\u4e2d\u5c06\u62ff\u5230\u8c03\u6574\u540e\u7684adjustment\u503c\uff0c\u5e76\u5b8c\u6210\u4fdd\u5b58\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\nprivate void updatePowerState() {\n    ...\n\n    // Apply auto-brightness.\n    boolean slowChange = false;\n    if (Float.isNaN(brightnessState)) {\n        float newAutoBrightnessAdjustment = autoBrightnessAdjustment;\n        if (autoBrightnessEnabled) {\n            //\u83b7\u53d6\u81ea\u52a8\u80cc\u5149\u503c\n            brightnessState = mAutomaticBrightnessController.getAutomaticScreenBrightness();\n            //\u83b7\u53d6\u65b0\u7684adjustment\u503c\n            newAutoBrightnessAdjustment =\n                    mAutomaticBrightnessController.getAutomaticScreenBrightnessAdjustment();\n        }\n        if (isValidBrightnessValue(brightnessState)\n                || brightnessState == PowerManager.BRIGHTNESS_OFF_FLOAT) {\n            // Use current auto-brightness value and slowly adjust to changes.\n            //\u4f7f\u7528\u5f53\u524d\u80cc\u5149\u503c\u5e76\u901a\u8fc7\u6162\u9002\u5e94\u8fc7\u7a0b\u8fdb\u884c\u8c03\u6574\n            brightnessState = clampScreenBrightness(brightnessState);\n            if (mAppliedAutoBrightness &amp;&amp; !autoBrightnessAdjustmentChanged) {\n                slowChange = true; // slowly adapt to auto-brightness\n            }\n            updateScreenBrightnessSetting = true;\n            mAppliedAutoBrightness = true;\n            mBrightnessReasonTemp.setReason(BrightnessReason.REASON_AUTOMATIC);\n        } else {\n            mAppliedAutoBrightness = false;\n        }\n        if (autoBrightnessAdjustment != newAutoBrightnessAdjustment) {\n            // If the autobrightness controller has decided to change the adjustment value\n            // used, make sure that's reflected in settings.\n            //\u5c06adjustment\u503c\u4fdd\u5b58\u5230SettingsProvider\u4e2d\n            putAutoBrightnessAdjustmentSetting(newAutoBrightnessAdjustment);\n        } else {\n            // Adjustment values resulted in no change\n            brightnessAdjustmentFlags = 0;\n        }\n    }\n    ...\n}\n</code></pre> putAutoBrightnessAdjustmentSetting()\u65b9\u6cd5\u4f1a\u5c06AutomaticBrightnessController\u4e2d\u8ba1\u7b97\u5f97\u51fa\u7684adjustment\u503c\u4fdd\u5b58\u5728SettingsProvider\u4e2d\uff0c\u4ee5\u786e\u4fddSettings\u7b49\u5176\u4ed6\u8fdb\u7a0b\u80fd\u4f7f\u7528\u5b83\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\nprivate void putAutoBrightnessAdjustmentSetting(float adjustment) {\n    if (mDisplayId == Display.DEFAULT_DISPLAY) {\n        mAutoBrightnessAdjustment = adjustment;\n        Settings.System.putFloatForUser(mContext.getContentResolver(),\n                Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ, adjustment,\n                UserHandle.USER_CURRENT);\n    }\n}\n</code></pre> \u4ece\u7528\u6237\u62d6\u52a8\u80cc\u5149\u6761\u8c03\u8282\u81ea\u52a8\u80cc\u5149\u5f00\u59cb\uff0c\u5230adjustment\u503c\u8ba1\u7b97\u5b8c\u6210\uff0c\u5e76\u6700\u7ec8\u5728SettingsProvider\u4e2d\u5b8c\u6210\u4fdd\u5b58\uff0c\u6574\u4e2a\u8fc7\u7a0b\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a</p> <p></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_6","title":"\u6e05\u9664\u7528\u6237\u77ed\u671f\u6a21\u578b","text":"<p>\u4f7f\u7528AutomaticBrightnessController\u7684resetShortTermModel()\u53ef\u4ee5\u6e05\u9664\u77ed\u671f\u6a21\u578b\u4e2d\u7528\u6237\u8bbe\u7f6e\u7684Lux\u503c\u53ca\u5176\u5bf9\u5e94\u7684\u80cc\u5149\u503c\u3002\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_7","title":"\u5207\u6362\u7528\u6237","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/DisplayPowerController.java\n\nprivate void handleSettingsChange(boolean userSwitch) {\n    mPendingScreenBrightnessSetting = getScreenBrightnessSetting();\n    if (userSwitch) { //\u7528\u6237\u6539\u53d8\n        // Don't treat user switches as user initiated change.\n        setCurrentScreenBrightness(mPendingScreenBrightnessSetting);\n        if (mAutomaticBrightnessController != null) {\n            //\u6e05\u9664\u7528\u6237\u77ed\u671f\u6a21\u578b\n            mAutomaticBrightnessController.resetShortTermModel();\n        }\n    }\n    mPendingAutoBrightnessAdjustment = getAutoBrightnessAdjustmentSetting();\n    // We don't bother with a pending variable for VR screen brightness since we just\n    // immediately adapt to it.\n    mScreenBrightnessForVr = getScreenBrightnessForVrSetting();\n    sendUpdatePowerState();\n}\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#brightnessconfigure","title":"BrightnessConfigure\u5bf9\u8c61\u53d1\u751f\u53d8\u5316","text":"<p>\u8fd9\u79cd\u60c5\u51b5\u5728\u4e0a\u6587\u5206\u6790setBrightnessConfiguration()\u65f6\u6709\u8bf4\u660e\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#timeout","title":"timeout","text":"<p>\u5c4f\u5e55\u8fdb\u5165\u4e0d\u53ef\u4ea4\u4e92\u72b6\u6001\u8d85\u8fc7300s\uff0c\u4e14\u518d\u6b21\u8fdb\u5165\u4ea4\u4e92\u72b6\u6001\u540e\u73af\u5883\u5149\u5f3a\u6709\u4e00\u5b9a\u8303\u56f4\u53d8\u5316\u3002\u5728\u4e0a\u6587\u5206\u6790setDisplayPolicy()\u65f6\u6709\u8bf4\u660e\uff0c\u82e5\u5c4f\u5e55\u7531\u4ea4\u4e92\u72b6\u6001\u8fdb\u5165\u975e\u4ea4\u4e92\u72b6\u6001\u65f6\uff0c\u5c06\u4f1a\u53d1\u9001\u4e00\u4e2a\u5ef6\u65f6Handler\u6d88\u606f\uff0c\u5e76\u5728\u5230\u8fbe\u65f6\u95f4\u540e\u5c06mShortTermModelValid\u503c\u8bbe\u7f6e\u4e3afalse\u3002\u5f53\u5c4f\u5e55\u72b6\u6001\u518d\u8fdb\u5165\u4ea4\u4e92\u72b6\u6001\u65f6\uff0c\u4f1a\u6709\u8bbe\u7f6eLux\u503c\u7684\u6d41\u7a0b\uff0c\u5728\u8fd9\u4e2a\u6d41\u7a0b\u4e2d\uff0cmShortTermModelValid\u53d8\u91cf\u5c06\u53d1\u6325\u4f5c\u7528\uff1a <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/display/AutomaticBrightnessController.java\n\nprivate void setAmbientLux(float lux) {\n    if (mLoggingEnabled) {\n        Slog.d(TAG, \"setAmbientLux(\" + lux + \")\");\n    }\n    if (lux &lt; 0) {\n        Slog.w(TAG, \"Ambient lux was negative, ignoring and setting to 0\");\n        lux = 0;\n    }\n    mAmbientLux = lux;\n    mAmbientBrighteningThreshold = mAmbientBrightnessThresholds.getBrighteningThreshold(lux);\n    mAmbientDarkeningThreshold = mAmbientBrightnessThresholds.getDarkeningThreshold(lux);\n    mHbmController.onAmbientLuxChange(mAmbientLux);\n\n    // If the short term model was invalidated and the change is drastic enough, reset it.\n    //\u5982\u679c\u73af\u5883\u5149\u5f3a\u4ecb\u4e8e\u4e0b\u9762\u4e24\u4e2a\u503c\u4e4b\u95f4\uff0c\u5219\u4e0d\u4f1a\u6e05\u9664\u7528\u6237\u77ed\u671f\u6a21\u578b\uff0c\u5426\u5219\u8fdb\u884c\u8be5\u64cd\u4f5c\n    if (!mShortTermModelValid &amp;&amp; mShortTermModelAnchor != -1) {\n        if (mBrightnessMapper.shouldResetShortTermModel(mAmbientLux, mShortTermModelAnchor)) {\n            resetShortTermModel();\n        } else {\n            mShortTermModelValid = true;\n        }\n    }\n}\n</code></pre> \u53ea\u6709\u8fdb\u5165\u975e\u4ea4\u4e92\u72b6\u6001\u65f6mShortTermModelValid\u624d\u4f1a\u4e3afalse\uff0c\u8868\u793a\u7528\u6237\u8bbe\u7f6e\u7684\u77ed\u671f\u6a21\u578b\u53d8\u4e3a\u65e0\u6548\u72b6\u6001\uff0c\u4f46\u4e0d\u4f1a\u7acb\u5373\u6e05\u9664\uff0c\u53ea\u6709\u73af\u5883\u5149\u5f3a\u53d8\u5316\u5e45\u5ea6\u8d85\u8fc760%\u65f6\u624d\u4f1a\u8fdb\u884c\u8be5\u64cd\u4f5c\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_8","title":"\u914d\u7f6e","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_9","title":"\u4eae\u5ea6\u503c","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_10","title":"\u4eae\u5ea6\u6761\u6700\u5c0f\u503c","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Minimum screen brightness setting allowed by power manager.\n    -2 is invalid so setting will resort to int value specified above.\n    Set this to 0.0 to allow screen to go to minimal brightness.\n    The user is forbidden from setting the brightness below this level. --&gt;\n&lt;item name=\"config_screenBrightnessSettingMinimumFloat\" format=\"float\" type=\"dimen\"&gt;-2&lt;/item&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_11","title":"\u4eae\u5ea6\u6761\u6700\u5927\u503c","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Maximum screen brightness allowed by the power manager.\n    -2 is invalid so setting will resort to int value specified above.\n    Set this to 1.0 for maximum brightness range.\n    The user is forbidden from setting the brightness above this level. --&gt;\n&lt;item name=\"config_screenBrightnessSettingMaximumFloat\" format=\"float\" type=\"dimen\"&gt;-2&lt;/item&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_12","title":"\u9ed8\u8ba4\u4eae\u5ea6\u503c","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Default screen brightness setting set.\n     -2 is invalid so setting will resort to int value specified above.\n     Must be in the range specified by minimum and maximum. --&gt;\n&lt;item name=\"config_screenBrightnessSettingDefaultFloat\" format=\"float\" type=\"dimen\"&gt;-2&lt;/item&gt;\n</code></pre> \u8bbe\u5907\u521d\u59cb\u5316\u6216\u914d\u7f6e\u91cd\u7f6e\u65f6\u4f7f\u7528\u7684\u4eae\u5ea6\u503c\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_13","title":"\u5c4f\u5e55\u8d85\u65f6\u706d\u5c4f\u524d\u7684\u4eae\u5ea6\u503c","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Screen brightness used to dim the screen when the user activity\n     timeout expires.  May be less than the minimum allowed brightness setting\n     that can be set by the user. --&gt;\n&lt;integer name=\"config_screenBrightnessDim\"&gt;10&lt;/integer&gt;\n</code></pre> \u8be5\u503c\u4e0d\u80fd\u5c0f\u4e8e\u4eae\u5ea6\u6761\u6700\u5c0f\u503c\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u591c\u5149\u5c4f\u65e0\u6cd5\u751f\u6548\u3002\u4e00\u822c\u6bd4\u4eae\u5ea6\u6761\u6700\u5c0f\u503c\u59271\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_14","title":"\u8c03\u8282\u901f\u7387","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_15","title":"\u5feb\u901f\u8c03\u8282\u901f\u7387","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Fast brightness animation ramp rate in brightness units per second--&gt;\n&lt;integer translatable=\"false\" name=\"config_brightness_ramp_rate_fast\"&gt;180&lt;/integer&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_16","title":"\u6162\u901f\u8c03\u8282\u901f\u7387","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Slow brightness animation ramp rate in brightness units per second--&gt;\n&lt;integer translatable=\"false\" name=\"config_brightness_ramp_rate_slow\"&gt;60&lt;/integer&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_17","title":"\u9632\u6296\u65f6\u95f4","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_18","title":"\u8c03\u4eae\u9632\u6296\u65f6\u95f4","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used\n     for debouncing the light sensor.  Different constants are used to debounce the light sensor\n     when adapting to brighter or darker environments.  This parameter controls how quickly\n     brightness changes occur in response to an observed change in light level that exceeds the\n     hysteresis threshold. --&gt;\n&lt;integer name=\"config_autoBrightnessBrighteningLightDebounce\"&gt;4000&lt;/integer&gt;\n</code></pre> \u5355\u4f4d\u4e3ams\uff0c\u73af\u5883\u5149\u589e\u5f3a\u4e14\u6301\u7eed\u8d85\u8fc7\u8be5\u65f6\u95f4\u624d\u4f1a\u89e6\u53d1\u4eae\u5ea6\u589e\u52a0\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_19","title":"\u8c03\u6697\u9632\u6296\u65f6\u95f4","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used\n     for debouncing the light sensor.  Different constants are used to debounce the light sensor\n     when adapting to brighter or darker environments.  This parameter controls how quickly\n     brightness changes occur in response to an observed change in light level that exceeds the\n     hysteresis threshold. --&gt;\n&lt;integer name=\"config_autoBrightnessDarkeningLightDebounce\"&gt;8000&lt;/integer&gt;\n</code></pre> \u5355\u4f4d\u4e3ams\uff0c\u73af\u5883\u5149\u51cf\u5f31\u4e14\u6301\u7eed\u8d85\u8fc7\u8be5\u65f6\u95f4\u624d\u4f1a\u89e6\u53d1\u4eae\u5ea6\u51cf\u5c11\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_20","title":"\u81ea\u52a8\u4eae\u5ea6\u6570\u7ec4","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_autobrightnesslevels","title":"config_autoBrightnessLevels","text":"<p>**lux\u503c\u6570\u7ec4\uff0c**\u63cf\u8ff0\u73af\u5883\u5149\u5f3a\u5ea6\uff08lux\uff09\uff0c\u6574\u5f62\u6570\u7ec4\uff0c\u5176\u503c\u5747\u4e3a\u533a\u95f4\u70b9\uff0c\u6570\u7ec4\u957f\u5ea6\u6bd4config_autoBrightnessLcdBacklightValues\u548cconfig_autoBrightnessDisplayValuesNits\u5c111\u3002\u8be5\u6570\u7ec4\u957f\u5ea6\u8d8a\u5927\uff0c\u4eae\u5ea6\u5212\u5206\u7c92\u5ea6\u8d8a\u7ec6\uff0c\u81ea\u52a8\u4eae\u5ea6\u66f2\u7ebf\u5c31\u8d8a\u5e73\u6ed1\u3002\uff08\u76ee\u524d\u9879\u76ee\u4e2d\u4e00\u822c\u4f7f\u752850\u591a\u4e2a\u7ea7\u522b\uff09 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of light sensor lux values to define our levels for auto backlight brightness support.\n     The N entries of this array define N + 1 control points as follows:\n     (1-based arrays)\n\n     Point 1:            (0, value[1]):             lux &lt;= 0\n     Point 2:     (level[1], value[2]):  0        &lt; lux &lt;= level[1]\n     Point 3:     (level[2], value[3]):  level[2] &lt; lux &lt;= level[3]\n     ...\n     Point N+1: (level[N], value[N+1]):  level[N] &lt; lux\n\n     The control points must be strictly increasing.  Each control point\n     corresponds to an entry in the brightness backlight values arrays.\n     For example, if lux == level[1] (first element of the levels array)\n     then the brightness will be determined by value[2] (second element\n     of the brightness values array).\n\n     Spline interpolation is used to determine the auto-brightness\n     backlight values for lux levels between these control points.\n\n     Must be overridden in platform specific overlays --&gt;\n&lt;integer-array name=\"config_autoBrightnessLevels\"&gt;\n&lt;/integer-array&gt;\n</code></pre></p> <p>\u5fc5\u987boverlays\u8fd9\u4e2a\u914d\u7f6e\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_autobrightnesslcdbacklightvalues","title":"config_autoBrightnessLcdBacklightValues","text":"<p>**backlight\u503c\u6570\u7ec4\uff1a**\u5b83\u63cf\u8ff0lux\u503c\u5bf9\u5e94\u7684backlight\u503c\uff0c\u6574\u5f62\u6570\u7ec4\uff0c\u7528\u4e8e\u5c06L-Sensor\u83b7\u53d6\u7684lux\u503c\u8f6c\u6362\u4e3abacklight\u3002\uff08\u6700\u5927\u503c\u4e0d\u53d7255\u7684\u9650\u5236\uff0c\u4e0e\u201c\u6700\u5927\u4eae\u5ea6\u503c\u201d\u4e00\u81f4\u5373\u53ef\uff09 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of output values for LCD backlight corresponding to the lux values\n     in the config_autoBrightnessLevels array.  This array should have size one greater\n     than the size of the config_autoBrightnessLevels array.\n     The brightness values must be between 0 and 255 and be non-decreasing.\n     This must be overridden in platform specific overlays --&gt;\n&lt;integer-array name=\"config_autoBrightnessLcdBacklightValues\"&gt;\n&lt;/integer-array&gt;\n</code></pre> \u7531\u6b64\u53ef\u77e5\uff0c\u7b80\u5355\u6620\u5c04\u65b9\u6848\u4ec5\u9700\u8981\u5b9a\u4e492\u4e2a\u6570\u7ec4\uff1aconfig_autoBrightnessLevels, config_autoBrightnessLcdBacklightValues\u3002</p> <p>\u5fc5\u987boverlays\u8fd9\u4e2a\u914d\u7f6e\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_autobrightnessdisplayvaluesnits","title":"config_autoBrightnessDisplayValuesNits","text":"<p>\u4ec5\u7269\u7406\u6620\u5c04\u9700\u8981\u5b9a\u4e49 nits\u503c\u6570\u7ec4\uff1a**\u5b83\u63cf\u8ff0lux\u503c\u5bf9\u5e94\u7684\u5c4f\u5e55nits\u503c\uff0c\u901a\u4fd7\u7684\u8bb2\uff0c\u5c31\u662f\u4e0d\u540c\u73af\u5883\u5149\u5f3a\u5ea6\uff08lux\uff09\u4e0b\u6700\u9002\u5e94\u4eba\u773c\u7684\u5c4f\u5e55\u4eae\u5ea6\uff08nits\uff09\uff0c\u8be5\u6570\u7ec4\u503c\u4e00\u822c\u4e0e\u8bbe\u5907\u65e0\u5173\u3002\uff08\u8be5\u6570\u636e\u6700\u521d\u662f\u901a\u8fc7\u82f9\u679c\u624b\u673a\u663e\u793a\u5168\u767d\u56fe\u50cf\u6d4b\u8bd5\u800c\u6765\u7684\uff09 **tip \uff1aconfig_screenBrightnessNits\u548cconfig_screenBrightnessBacklight\u4e24\u4e2a\u6570\u7ec4\u4e5f\u9700\u8981\u5b9a\u4e49\u3002config_autoBrightnessDisplayValuesNits\u4e0econfig_autoBrightnessLcdBacklightValues\u4e92\u65a5\uff0c\u5982\u679c\u5b9a\u4e49\u4e86config_autoBrightnessDisplayValuesNits\uff0c\u5c06\u4e0d\u4f1a\u4f7f\u7528\u7b80\u5355\u6620\u5c04\uff0c\u540c\u65f6config_autoBrightnessLcdBacklightValues\u4e5f\u5931\u6548\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of desired screen brightness in nits corresponding to the lux values\n     in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and\n     config_screenBrightnessMaximumNits, the display brightness is defined as the measured\n     brightness of an all-white image.\n\n     If this is defined then:\n        - config_autoBrightnessLcdBacklightValues should not be defined\n        - config_screenBrightnessNits must be defined\n        - config_screenBrightnessBacklight must be defined\n\n     This array should have size one greater than the size of the config_autoBrightnessLevels\n     array. The brightness values must be non-negative and non-decreasing. This must be\n     overridden in platform specific overlays --&gt;\n&lt;array name=\"config_autoBrightnessDisplayValuesNits\"&gt;\n&lt;/array&gt;\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_screenbrightnessnits","title":"config_screenBrightnessNits","text":"<p>\u4ec5\u7269\u7406\u6620\u5c04\u9700\u8981\u5b9a\u4e49\u3002 **\u5c4f\u5e55nits\u503c\u6570\u7ec4\uff1a**\u5b83\u63cf\u8ff0\u4e0d\u540cbacklight\u5bf9\u5e94\u7684\u5c4f\u5e55\u53d1\u5149\u4eae\u5ea6\uff08nits\uff09\uff0c\u6570\u7ec4\u957f\u5ea6\u4e0econfig_screenBrightnessBacklight\u4e00\u81f4\uff0c\u5176\u503c\u4e0e\u5c4f\u5e55\u786c\u4ef6\u76f8\u5173\uff0c\u9700\u8981\u901a\u8fc7\u7167\u5ea6\u8ba1\u6d4b\u8bd5\u5f97\u5230\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- An array of floats describing the screen brightness in nits corresponding to the backlight\n     values in the config_screenBrightnessBacklight array.  On OLED displays these  values\n     should be measured with an all white image while the display is in the fully on state.\n     Note that this value should *not* reflect the maximum brightness value for any high\n     brightness modes but only the maximum brightness value obtainable in a sustainable manner.\n\n     This array should be equal in size to config_screenBrightnessBacklight --&gt;\n&lt;array name=\"config_screenBrightnessNits\"&gt;\n&lt;/array&gt;\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_screenbrightnessbacklight","title":"config_screenBrightnessBacklight","text":"<p>\u4ec5\u7269\u7406\u6620\u5c04\u9700\u8981\u5b9a\u4e49\u3002 **\u5c4f\u5e55backlight\u503c\u6570\u7ec4\uff1a**\u5b83\u63cf\u8ff0\u5c4f\u5e55\u4ece\u6700\u5c0f\u5230\u6700\u5927\u7684backlight\u503c\uff0c\u6574\u5f62\u6570\u7ec4\uff0c\u5176\u6700\u5927\u503c\u4e0e\u201c\u6700\u5927\u4eae\u5ea6\u503c\u201d\u4e00\u81f4\uff0c\u6570\u7ec4\u957f\u5ea6\u4e0econfig_screenBrightnessNits\u4e00\u81f4\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n &lt;!-- An array describing the screen's backlight values corresponding to the brightness\n     values in the config_screenBrightnessNits array.\n\n     This array should be equal in size to config_screenBrightnessBacklight. --&gt;\n&lt;integer-array name=\"config_screenBrightnessBacklight\"&gt;\n&lt;/integer-array&gt;\n</code></pre> \u7269\u7406\u6620\u5c04\u65b9\u6848\u5b58\u5728\u4e24\u79cd\u5f62\u5f0f\uff1a</p> <ul> <li>\u4f7f\u7528nits-backlight\u7b80\u5355\u7ebf\u6027\u6620\u5c04\uff0c\u9700\u8981\u5b9a\u4e492\u4e2a\u6570\u7ec4\uff1aconfig_autoBrightnessLevels\u3001config_autoBrightnessDisplayValuesNits\u3002</li> <li>\u4f7f\u7528nits-backlight\u590d\u6742\u7ebf\u6027\u6620\u5c04\uff0c\u9700\u8981\u5b9a\u4e494\u4e2a\u6570\u7ec4\uff1aconfig_autoBrightnessLevels\u3001config_autoBrightnessDisplayValuesNits\u3001config_screenBrightnessNits\u3001config_screenBrightnessBacklight\u3002</li> </ul>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_21","title":"\u4eae\u5ea6\u8c03\u8282\u9608\u503c\u6570\u7ec4","text":"","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_ambientthresholdlevels","title":"config_ambientThresholdLevels","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of ambient lux threshold values. This is used for determining hysteresis constraint\n     values by calculating the index to use for lookup and then setting the constraint value\n     to the corresponding value of the array. The new brightening hysteresis constraint value\n     is the n-th element of config_ambientBrighteningThresholds, and the new darkening\n     hysteresis constraint value is the n-th element of config_ambientDarkeningThresholds.\n\n     The (zero-based) index is calculated as follows: (MAX is the largest index of the array)\n     condition                       calculated index\n     value &lt; level[0]                0\n     level[n] &lt;= value &lt; level[n+1]  n+1\n     level[MAX] &lt;= value             MAX+1 --&gt;\n&lt;integer-array name=\"config_ambientThresholdLevels\"&gt;\n&lt;/integer-array&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_ambientbrighteningthresholds","title":"config_ambientBrighteningThresholds","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of hysteresis constraint values for brightening, represented as tenths of a\n     percent. The length of this array is assumed to be one greater than\n     config_ambientThresholdLevels. The brightening threshold is calculated as\n     lux * (1.0f + CONSTRAINT_VALUE). When the current lux is higher than this threshold,\n     the screen brightness is recalculated. See the config_ambientThresholdLevels\n     description for how the constraint value is chosen. --&gt;\n&lt;integer-array name=\"config_ambientBrighteningThresholds\"&gt;\n    &lt;item&gt;100&lt;/item&gt;\n&lt;/integer-array&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#config_ambientdarkeningthresholds","title":"config_ambientDarkeningThresholds","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/res/res/values/config.xml\n\n&lt;!-- Array of hysteresis constraint values for darkening, represented as tenths of a\n     percent. The length of this array is assumed to be one greater than\n     config_ambientThresholdLevels. The darkening threshold is calculated as\n     lux * (1.0f - CONSTRAINT_VALUE). When the current lux is lower than this threshold,\n     the screen brightness is recalculated. See the config_ambientThresholdLevels\n     description for how the constraint value is chosen. --&gt;\n&lt;integer-array name=\"config_ambientDarkeningThresholds\"&gt;\n    &lt;item&gt;200&lt;/item&gt;\n&lt;/integer-array&gt;\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#_22","title":"\u603b\u7ed3","text":"<p>\u70b9\u51fb\u4e0b\u62c9\u4efb\u52a1\u680f\u4e2d\u7684\u4eae\u5ea6\u6ed1\u52a8\u6761\u3002</p>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#lightsservice","title":"LightsService","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/lights/LightsService.java\n1. setLightLocked()\n2. setLightUnchecked()\n3. setLight_native()\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#jni","title":"jni","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp\n4. setLight_native()\n5. hal-&gt;setLight(type, state);\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#hal","title":"hal","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp\n1. hal\u521d\u59cb\u5316\nsp&lt;ILight&gt; hal = ILight::getService();\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/interfaces/light/2.0/ILight.hal\n2. setLight\u7684hal\u5b9a\u4e49\ninterface ILight {\n\n    /**\n     * Set the provided lights to the provided values.\n     *\n     * @param type logical light to set\n     * @param state describes what the light should look like.\n     * @return status result of applying state transformation.\n     */\n    setLight(Type type, LightState state) generates (Status status);\n\n    ...\n\n};\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/interfaces/light/2.0/default/Light.cpp\n3. passthrough\u7684hal\u8c03\u7528\nlight_device_t* getLightDevice(const char* name) {\n    ...\n    int ret = hw_get_module (LIGHTS_HARDWARE_MODULE_ID, &amp;hwModule);\n    ...\n}\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/qcom/display/liblight/lights.c\n4. hal stub\u7684\u5b9e\u73b0\n/*\n * The lights Module\n */\nstruct hw_module_t HAL_MODULE_INFO_SYM = {\n    .tag = HARDWARE_MODULE_TAG,\n    .version_major = 1,\n    .version_minor = 0,\n    .id = LIGHTS_HARDWARE_MODULE_ID,\n    .name = \"lights Module\",\n    .author = \"Google, Inc.\",\n    .methods = &amp;lights_module_methods,\n};\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/interfaces/light/2.0/default/Light.cpp\n5. \u80cc\u5149light_device_t\u7684\u83b7\u53d6\n\nconst static std::map&lt;Type, const char*&gt; kLogicalLights = {\n    {Type::BACKLIGHT,     LIGHT_ID_BACKLIGHT},\n    ...\n};\n\nILight* HIDL_FETCH_ILight(const char* /* name */) {\n    ...\n\n    for(auto const &amp;pair : kLogicalLights) {\n        Type type = pair.first;\n        const char* name = pair.second;\n\n        light_device_t* light = getLightDevice(name);\n\n        ...\n    }\n\n    ...\n}\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/qcom/display/liblight/lights.c\n6. \u6253\u5f00\u9a71\u52a8\nstatic int open_lights(const struct hw_module_t* module, char const* name,\n        struct hw_device_t** device)\n{\n    ...\n\n    if (0 == strcmp(LIGHT_ID_BACKLIGHT, name)) {\n        g_has_persistence_node = !access(PERSISTENCE_FILE, F_OK);\n        //\u6ce8\u610f\u8fd9\u4e2aset_light_backlight\u65b9\u6cd5\n        set_light = set_light_backlight;\n    }\n    ...\n}\n\n\nhttp://aospxref.com/android-12.0.0_r3/xref/hardware/interfaces/light/2.0/default/Light.cpp\n7. \u8c03setLight\u63a5\u53e3\uff08ILight.hal\u5b9a\u4e49\u6b64\u63a5\u53e3\uff09\nReturn&lt;Status&gt; Light::setLight(Type type, const LightState&amp; state)  {\n    ...\n    //\u6b64\u5904set_light\u5bf9\u63a5\u4e0a/hardware/qcom/display/liblight/lights.c\u4e2d\u7684set_light_backlight\n    //\u770b\u7b2c6\u6b65\n    int ret = hwLight-&gt;set_light(hwLight, &amp;legacyState);\n\n    ...\n}\n</code></pre>","tags":["Framework","Service"]},{"location":"android/brightness/automatic-brightness-intro/#syscall","title":"syscall\u5199\u8282\u70b9","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/hardware/qcom/display/liblight/lights.c\n\n// \u80cc\u5149\u8bbe\u7f6e\u8282\u70b9\nchar const*const LCD_FILE2\n        = \"/sys/class/backlight/panel0-backlight/brightness\";\n\n1. \u8bbe\u7f6e\u80cc\u5149\nstatic int\nset_light_backlight(struct light_device_t* dev,\n        struct light_state_t const* state)\n{\n    ...\n\n    if (!err) {\n        if (!access(LCD_FILE, F_OK)) {\n            err = write_int(LCD_FILE, brightness);\n        } else {\n            err = write_int(LCD_FILE2, brightness);\n        }\n    }\n\n    ...\n}\n</code></pre> \u5982\u4e0a\u5c31\u662f\u5e94\u7528\u5c42\u5230\u5199\u8282\u70b9\u7684\u8c03\u7528\u8fc7\u7a0b\u3002\u53ef\u4ee5\u5728adb shell\u4e0b\u76f4\u63a5\u7528echo\u547d\u4ee4\u8bbe\u7f6e\uff1a <pre><code>adb root\nadb shell\necho 1023 &gt; /sys/class/backlight/panel0-backlight/brightness\n</code></pre></p>","tags":["Framework","Service"]},{"location":"android/tombstones/tombstones-intro/","title":"NativeTombstoneManager","text":"","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#nativetombstonemanager","title":"NativeTombstoneManager","text":"","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#_1","title":"\u6982\u8ff0","text":"<p>Android 12 \u65b0\u589e\u7684 system_server \u8fdb\u7a0b\uff08LocalService\uff09\u672c\u5730\u670d\u52a1\uff0c\u7528\u4e8e\u7ba1\u7406 Native tombstones\u3002</p> <p>\u8be5\u670d\u52a1\u5728\u5f00\u673a Systemerver \u521d\u59cb\u5316\u6d41\u7a0b\u542f\u52a8\uff0c\u6dfb\u52a0\u5230 LocalService\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a ServiceThread \u7ebf\u7a0b\u7528\u4e8e\uff08mHandler.post\uff09\u5904\u7406\u672c\u670d\u52a1\u7684\u4e1a\u52a1\u3002</p> <p>NativeTombstoneManager \u7684\u529f\u80fd\u4e3b\u8981\u662f\uff1a</p> <ul> <li> <p>\u76d1\u542c\u00a0<code>/data/tombstones</code>\u00a0\u76ee\u5f55\u6587\u4ef6\u53d8\u52a8\uff0c\u89e3\u6790\u4e3a TombstoneFile \u5bf9\u8c61\u4fdd\u5b58\uff0c\u901a\u77e5 dropbox</p> </li> <li> <p>\u7279\u5b9a tombstones \u6587\u4ef6\u5220\u9664</p> </li> <li> <p>\u7279\u5b9a tombstones \u6587\u4ef6\u68c0\u7d22</p> </li> </ul> <p>\u503c\u5f97\u5173\u6ce8\u7684\u662fAMS\u5bf9\u8be5\u670d\u52a1\u7684\u4f7f\u7528\uff0c\u4e5f\u662f Android 11 \u65b0\u589eAPI\uff1a\u00a0<code>getHistoricalProcessExitReasons()</code></p> <p>\u8f6f\u4ef6\u67b6\u6784\u5982\u56fe\uff1a</p> <p></p> <p>\u56fe\uff1aNativeTombstoneManager \u7c7b\u56fe</p>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#_2","title":"\u542f\u52a8\u6d41\u7a0b","text":"<p>\u56fe\uff1aNativeTombstoneManager \u670d\u52a1\u542f\u52a8\u65f6\u5e8f\u56fe</p> <p>\u670d\u52a1\u6bd4\u8f83\u7b80\u5355\uff0c\u548c\u5176\u4ed6 SystemServer \u542f\u52a8\u7684\u670d\u52a1\u4e00\u6837\uff0c</p> <p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManagerService.java</p> <pre><code>public class NativeTombstoneManagerService extends SystemService {\n    private NativeTombstoneManager mManager;\n\n    @Override\n    public void onStart() {\n        mManager = new NativeTombstoneManager(getContext());\n        //\u4ec5\u6dfb\u52a0\u672c\u5730\u670d\u52a1\uff0c\u6ca1\u6709 Binder\u670d\u52a1\n        LocalServices.addService(NativeTombstoneManager.class, mManager);\n    }\n\n    @Override\n    public void onBootPhase(int phase) {\n        if (phase == SystemService.PHASE_ACTIVITY_MANAGER_READY) {\n            mManager.onSystemReady();\n        }\n    }\n}\n</code></pre> <p>\u672c\u670d\u52a1\u4e5f\u662fSystemService\u5de5\u5177\u7c7b\u7684\u5b50\u7c7b\uff0c\u901a\u8fc7\u91cd\u5199 onStart\u3001onBootPhase \u83b7\u5f97\u4ee3\u7801\u6d41\u7a0b</p> <p>\u5728 onStart \u4e2d\u521d\u59cb\u5316\u771f\u6b63\u7684\u670d\u52a1\u5b9e\u73b0 NativeTombstoneManager\uff0c\u5b9e\u4f8b\u5316\u540e\u6dfb\u52a0\u5230 LocalServices</p> <p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>public final class NativeTombstoneManager {\n        NativeTombstoneManager(Context context) {\n        //\u542f\u52a8 Handler \u7ebf\u7a0b\uff0c\u7528\u4e8e\u540e\u7eed\u5904\u7406\u672c\u670d\u52a1\u7684\u4e1a\u52a1\n        final ServiceThread thread = new ServiceThread(TAG + \":tombstoneWatcher\",\n                THREAD_PRIORITY_BACKGROUND, true /* allowIo */);\n        thread.start();\n        mHandler = thread.getThreadHandler();\n        //\u542f\u52a8\u6587\u4ef6\u76d1\u542c /data/tombstones\n        mWatcher = new TombstoneWatcher();\n        mWatcher.startWatching();\n    }\n\n    void onSystemReady() {\n        registerForUserRemoval();\n        registerForPackageRemoval();\n\n        // \u5f00\u673a\u9636\u6bb5\u5148\u626b\u63cf\u4e00\u6b21 /data/tombstones \u76ee\u5f55\n        mHandler.post(() -&gt; {\n            final File[] tombstoneFiles = TOMBSTONE_DIR.listFiles();\n            for (int i = 0; tombstoneFiles != null &amp;&amp; i &lt; tombstoneFiles.length; i++) {\n                if (tombstoneFiles[i].isFile()) {\n                    handleTombstone(tombstoneFiles[i]);\n</code></pre> <p>\u5f00\u673a\u6d41\u7a0b\u6709\u4e09\u4e2a\u52a8\u4f5c</p> <ul> <li>\u542f\u52a8 Handler \u7ebf\u7a0b\uff0c\u7528\u4e8e\u540e\u7eed\u5904\u7406\u672c\u670d\u52a1\u7684\u4e1a\u52a1</li> <li>TombstoneWatcher\u542f\u52a8\u6587\u4ef6\u76d1\u542c/data/tombstones</li> <li>\u5f00\u673a\u9636\u6bb5\u5148\u626b\u63cf\u4e00\u6b21 /data/tombstones \u76ee\u5f55</li> </ul> <p>\u770b\u4e00\u4e0b handleTombstone</p> <p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>    private void handleTombstone(File path) {\n        final String filename = path.getName();\n        if (!filename.startsWith(\"tombstone_\")) {\n            return;\n        }\n\n        if (filename.endsWith(\".pb\")) {\n            handleProtoTombstone(path);\n            BootReceiver.addTombstoneToDropBox(mContext, path, true);\n        } else {\n            BootReceiver.addTombstoneToDropBox(mContext, path, false);\n</code></pre> <p>\u5982\u679c\u662f\u4ee5pb\u7ed3\u5c3e\u7684\u539f\u578b\u6587\u4ef6\uff0c\u5219 handleProtoTombstone \u65b9\u6cd5\u4e2d\u4e3a\u8be5\u6587\u4ef6\u751f\u6210 TombstoneFile \u5bf9\u8c61\uff0c\u5e76\u6dfb\u52a0\u5230\u6570\u636e\u7ed3\u6784</p> <p><code>private final SparseArray&lt;TombstoneFile&gt; mTombstones;</code></p> <p>\u5e76\u4e14\uff0c\u6bcf\u4e2a\u65b0\u751f\u6210\u7684 tombstone \u6587\u4ef6\u90fd\u4f1a\u540c\u6b65\u7ed9 dropbox</p>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#_3","title":"\u65b0\u6587\u4ef6\u7684\u76d1\u542c","text":"<p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>    class TombstoneWatcher extends FileObserver {\n        TombstoneWatcher() {\n            super(TOMBSTONE_DIR, FileObserver.CREATE | FileObserver.MOVED_TO);\n        }\n\n        @Override\n        public void onEvent(int event, @Nullable String path) {\n            mHandler.post(() -&gt; {\n                handleTombstone(new File(TOMBSTONE_DIR, path));\n            });\n</code></pre> <p>\u5185\u90e8\u7c7b TombstoneWatcher\uff0c\u5f53\u76ee\u5f55 /data/tombstones \u6709\u6587\u4ef6\u751f\u6210\u65f6\uff0c\u56de\u8c03\u5230 onEvent\uff0c\u7136\u540e\u901a\u8fc7 handleTombstone \u65b9\u6cd5\u505a\u5904\u7406</p>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#aciivtymanagergethistoricalprocessexitreasons","title":"AciivtyManager#getHistoricalProcessExitReasons","text":"<p>\u56fe\uff1agetHistoricalProcessExitReasons \u65b9\u6cd5\u65f6\u5e8f\u56fe</p> <p>\u9700\u8981\u6ce8\u610f\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u7684\u5904\u7406 ApplicationExitInfo\u3002</p> <p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>    public void collectTombstones(ArrayList&lt;ApplicationExitInfo&gt; output, int callingUid, int pid,\n            int maxNum) {\n        CompletableFuture&lt;Object&gt; future = new CompletableFuture&lt;&gt;();\n\n        if (!UserHandle.isApp(callingUid)) {\n            return;\n        }\n\n        final int userId = UserHandle.getUserId(callingUid);\n        final int appId = UserHandle.getAppId(callingUid);\n\n        mHandler.post(() -&gt; {\n            boolean appendedTombstones = false;\n\n            synchronized (mLock) {\n                final int tombstonesSize = mTombstones.size();\n\n            tombstoneIter:\n            //\u904d\u5386\u6240\u6709\u5df2\u77e5 tombstoe\uff0c\n            //\u5982\u679c userid \u548c appid \u548c reason \u5339\u914d\n            //\u5219\u8fd4\u56de\u8bf7\u6c42\u7684\u6570\u91cf\u7684 tombstone\n                for (int i = 0; i &lt; tombstonesSize; ++i) {\n                    TombstoneFile tombstone = mTombstones.valueAt(i);\n                    if (tombstone.matches(Optional.of(userId), Optional.of(appId))) {\n                        if (pid != 0 &amp;&amp; tombstone.mPid != pid) {\n                            continue;\n                        }\n                        //reason \u5224\u65ad\n                        // Try to attach to an existing REASON_CRASH_NATIVE.\n                        final int outputSize = output.size();\n                        for (int j = 0; j &lt; outputSize; ++j) {\n                            ApplicationExitInfo exitInfo = output.get(j);\n                            if (tombstone.matches(exitInfo)) {\n                                exitInfo.setNativeTombstoneRetriever(tombstone.getPfdRetriever());\n                                continue tombstoneIter;\n                            }\n                        }\n                        //\u8bf7\u6c42\u6570\u91cf\u5224\u65ad\n                        if (output.size() &lt; maxNum) {\n                            appendedTombstones = true;\n                            output.add(tombstone.toAppExitInfo());\n                        }\n                    }\n                }\n            }\n            //\u5982\u679c\u8d85\u8fc7\u4e00\u4e2a\u5219\u6309\u65f6\u95f4\u6233\u6392\u5e8f\n            if (appendedTombstones) {\n                Collections.sort(output, (lhs, rhs) -&gt; {\n                    // Reports should be ordered with newest reports first.\n                    long diff = rhs.getTimestamp() - lhs.getTimestamp();\n                    if (diff &lt; 0) {\n                        return -1;\n                    } else if (diff == 0) {\n                        return 0;\n                    } else {\n                        return 1;\n                    }\n                });\n            }\n            future.complete(null);\n        });\n\n        try {\n            future.get();\n</code></pre> <p>\u904d\u5386\u6240\u6709\u5df2\u77e5 tombstoe\uff0c\u5982\u679c userid \u548c appid \u548c reason \u5339\u914d\u5219\u8fd4\u56de\u8bf7\u6c42\u7684\u6570\u91cf\u7684 tombstone</p> <p>\u5982\u679c\u6570\u91cf\u8d85\u8fc7\u4e00\u4e2a\u5219\u6309\u65f6\u95f4\u6233\u6392\u5e8f</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f CompletableFuture\uff0c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u53ef\u53c2\u8003\uff1aCompletableFuture\u57fa\u672c\u7528\u6cd5</p>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#tombstone","title":"tombstone \u6587\u4ef6\u7684\u6e05\u7406","text":"<p>\u76ee\u524d\u6709\u4e24\u79cd\u573a\u666f\u4f1a\u6e05\u7406\u6587\u4ef6</p> <ul> <li>\u4e3b\u52a8\u8c03\u7528\u63a5\u53e3\u5220\u9664\uff0cAppExitInfoTracker \u2192 purge()</li> <li>app\u88ab\u5378\u8f7d\u65f6\uff0cregisterForPackageRemoval \u2192 purgePackage() \u2192 purge()</li> </ul>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#clearhistoryprocessexitinfo","title":"clearHistoryProcessExitInfo","text":"<p>frameworks/base/services/core/java/com/android/server/am/AppExitInfoTracker.java</p> <pre><code>    void clearHistoryProcessExitInfo(String packageName, int userId) {\n        NativeTombstoneManager tombstoneService = LocalServices.getService(\n                NativeTombstoneManager.class);\n        Optional&lt;Integer&gt; appId = Optional.empty();\n\n        if (TextUtils.isEmpty(packageName)) {\n            synchronized (mLock) {\n                removeByUserIdLocked(userId);\n            }\n        } else {\n            final int uid = mService.mPackageManagerInt.getPackageUid(packageName,\n                    PackageManager.MATCH_ALL, userId);\n            appId = Optional.of(UserHandle.getAppId(uid));\n            synchronized (mLock) {\n                removePackageLocked(packageName, uid, true, userId);\n            }\n        }\n\n        tombstoneService.purge(Optional.of(userId), appId);\n        schedulePersistProcessExitInfo(true);\n    }\n</code></pre> <p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>     * Remove native tombstones matching a user and/or app.\n    public void purge(Optional&lt;Integer&gt; userId, Optional&lt;Integer&gt; appId) {\n        mHandler.post(() -&gt; {\n            synchronized (mLock) {\n                for (int i = mTombstones.size() - 1; i &gt;= 0; --i) {\n                    TombstoneFile tombstone = mTombstones.valueAt(i);\n                    if (tombstone.matches(userId, appId)) {\n                        tombstone.purge();\n                        mTombstones.removeAt(i);\n----------------------------------------------------------------------\n    static class TombstoneFile {\n        public void purge() {\n            if (!mPurged) {\n                try {\n                    Os.ftruncate(mPfd.getFileDescriptor(), 0);\n                } catch (ErrnoException ex) {\n                    Slog.e(TAG, \"Failed to truncate tombstone\", ex);\n                }\n                mPurged = true;\n</code></pre>","tags":["Android","Binder"]},{"location":"android/tombstones/tombstones-intro/#purgepackage","title":"purgePackage","text":"<p>frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java</p> <pre><code>    private void registerForPackageRemoval() {\n        final IntentFilter filter = new IntentFilter();\n        filter.addAction(Intent.ACTION_PACKAGE_FULLY_REMOVED);\n        filter.addDataScheme(\"package\");\n        mContext.registerReceiverForAllUsers(new BroadcastReceiver() {\n            @Override\n            public void onReceive(Context context, Intent intent) {\n                final int uid = intent.getIntExtra(Intent.EXTRA_UID, UserHandle.USER_NULL);\n                if (uid == UserHandle.USER_NULL) return;\n\n                final boolean allUsers = intent.getBooleanExtra(\n                        Intent.EXTRA_REMOVED_FOR_ALL_USERS, false);\n\n                purgePackage(uid, allUsers);\n            }\n        }, filter, null, mHandler);\n    }\n---------------------------------------------\n    private void purgePackage(int uid, boolean allUsers) {\n        final int appId = UserHandle.getAppId(uid);\n        Optional&lt;Integer&gt; userId;\n        if (allUsers) {\n            userId = Optional.empty();\n        } else {\n            userId = Optional.of(UserHandle.getUserId(uid));\n        }\n        purge(userId, Optional.of(appId));\n    }\n\n    private void purgeUser(int uid) {\n        purge(Optional.of(uid), Optional.empty());\n    }\n</code></pre> <p>f\u670d\u52a1\u542f\u52a8\u65f6 registerForPackageRemoval \u8c03\u7528\uff0c\u5f00\u542f\u5bf9\u5e7f\u64ad\u7684\u76d1\u542c\uff1aACTION_PACKAGE_FULLY_REMOVED</p> <p>\u5f53 App \u5378\u8f7d\u65f6\uff0c\u6b64\u5904\u4e5f\u5220\u9664\u5176\u5bf9\u5e94 uid \u7684 tombstone \u6587\u4ef6</p> <p>\u540c\u8fd9\u4e2a\u5305\u5220\u9664\u7c7b\u4f3c\uff0c\u8fd8\u6709\u7528\u6237\u5220\u9664\u65f6\u4e5f\u4f1a\u5220\u5bf9\u5e94\u7684\u6587\u4ef6\uff1a</p> <pre><code>    private void registerForUserRemoval() {\n        filter.addAction(Intent.ACTION_USER_REMOVED);\n</code></pre>","tags":["Android","Binder"]},{"location":"android/bootanimation/bootanimation-intro/","title":"bootanimation\u7a0b\u5e8f\u7b80\u4ecb","text":"<p>bootanimation\u662f\u5728kernel\u542f\u52a8\u5b8c\u6bd5\u540e\uff0c\u7531init\u7a0b\u5e8f\u6839\u636erc\u6587\u4ef6call\u8d77\u6765\u7684\u7a0b\u5e8f\uff0c\u5176\u4e3b\u8981\u529f\u80fd\u662f\u5728\u542f\u52a8Android\u670d\u52a1\u65f6\uff0c\u5c4f\u5e55\u663e\u793a\u4e00\u4e2a\u5f00\u673a\u52a8\u753b\uff0c\u4ee5\u6b64\u6765\u6539\u5584\u7528\u6237\u4f53\u9a8c\u7684\u4e00\u4e2a\u7a0b\u5e8f\u3002\u672c\u6587\u5206\u6790\u8be5\u7a0b\u5e8f\u4e3b\u8981\u6d41\u7a0b\uff0c\u4ee5\u53ca\u4e2a\u529f\u80fd\u6a21\u5757\u7684\u4ee3\u7801\u5b9e\u73b0\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_1","title":"\u4ee3\u7801\u7ed3\u6784","text":"<p>\uff08\u56fe\u7247\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u4eceAndroid12.0\u7684\u4ee3\u7801\u6ca1\u6709\u770b\u5230\u652f\u6301video\u7684\u90e8\u5206\uff0c\u8bf7\u5ffd\u7565\uff09</p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u7c7b\u90fd\u5df2\u7ecf\u5728\u4e0a\u56fe\u4e2d\u63cf\u8ff0\u3002\u5e94\u7528\u4ee3\u7801\u4f4d\u4e8eframeworks/base/cmds/bootanimation\uff0c\u5404\u4ee3\u7801\u6587\u4ef6\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u6587\u4ef6\u540d \u7b80\u8981\u8bf4\u660e Android.bp \u7f16\u8bd1\u811a\u672c bootanim.rc \u5f00\u673a\u542f\u52a8\u811a\u672c bootanimation_main.cpp \u7a0b\u5e8f\u5165\u53e3 BootAnimation.cpp \u5e94\u7528\u4e3b\u7c7b\uff0c\u529f\u80fd\u4ee3\u7801\u57fa\u672c\u5728\u8be5\u6587\u4ef6\u4e2d\u5b9e\u73b0 BootAnimation.h -- BootAnimationUtil.cpp -- BootAnimationUtil.h -- audioplay.cpp -- audioplay.h --","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#bootanimation","title":"\u521b\u5efaBootAnimation\u5bf9\u8c61","text":"<p>BootAnimation\u7684\u7a0b\u5e8f\u5165\u53e3\u4e3abootanimation_main.cpp\u4e2d\u7684main\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4e2d\u4f1a\u521b\u5efaBootAnimation\u5bf9\u8c61\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/bootanimation_main.cpp\n\nint main()\n{\n    ...\n        bool noBootAnimation = bootAnimationDisabled();\n    if (!noBootAnimation) {\n\n        ...\n\n            // create the boot animation object (may take up to 200ms for 2MB zip)\n            sp&lt;BootAnimation&gt; boot = new BootAnimation(audioplay::createAnimationCallbacks());\n\n        waitForSurfaceFlinger();\n\n        ...\n        }\n    return 0;\n}\n</code></pre> <p>main\u65b9\u6cd5\u4e2d\u521b\u5efaBootAnimation\u5bf9\u8c61\u540e\u4f1a\u5c06\u5176\u8d4b\u503c\u7ed9\u4e00\u4e2asp[BootAnimation]\u5bf9\u8c61\uff0csp\u7c7b\u91cd\u8f7d\u4e86=\u8fd0\u7b97\u7b26\uff0c\u8d4b\u503c\u65f6\u4f1a\u8c03\u7528\u53f3\u503c\u5bf9\u8c61\u7684incStrong()\u65b9\u6cd5\uff0c\u4ee5\u6b64\u6807\u8bb0\u5f53\u524d\u5bf9\u8c61\u6b63\u5728\u4f7f\u7528\u3002\u8d4b\u503c\u7684\u6700\u7ec8\u76ee\u7684\u662f\u5c06BootAnimation\u5bf9\u8c61\u5bf9\u8c61\u6307\u9488\u4fdd\u5b58\u5230sp\u5bf9\u8c61\u7684m_ptr\u6210\u5458\u4e2d\u3002</p> <pre><code>sp[BootAnimation] \u5e94\u8be5\u5199\u6210 sp&lt;BootAnimation&gt; \uff0c\u76ee\u524d\u56e0\u4e3a obsidian \u5bf9markdown \u652f\u6301\u8fd8\u6709\u70b9\u95ee\u9898\u3002\n</code></pre> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nBootAnimation::BootAnimation(sp&lt;Callbacks&gt; callbacks)\n        : Thread(false), mLooper(new Looper(false)), mClockEnabled(true), mTimeIsAccurate(false),\n        mTimeFormat12Hour(false), mTimeCheckThread(nullptr), mCallbacks(callbacks) {\n    mSession = new SurfaceComposerClient();\n\n    std::string powerCtl = android::base::GetProperty(\"sys.powerctl\", \"\");\n    if (powerCtl.empty()) {\n        mShuttingDown = false;\n    } else {\n        mShuttingDown = true;\n    }\n    ALOGD(\"%sAnimationStartTiming start time: %\" PRId64 \"ms\", mShuttingDown ? \"Shutdown\" : \"Boot\",\n            elapsedRealtime());\n}\n</code></pre> <p>BootAnimation\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff1a</p> <ul> <li>mSession\u662fBootAnimation\u7c7b\u7684\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u5b83\u7684\u7c7b\u578b\u4e3aSurfaceComposerClient\uff0c\u662f\u7528\u6765\u548cSurfaceFlinger\u6267\u884cBinder\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002</li> </ul> <p>SurfaceComposerClient\u7c7b\u5185\u90e8\u6709\u4e00\u4e2a\u5b9e\u73b0\u4e86ISurfaceComposerClient\u63a5\u53e3\u7684Binder\u4ee3\u7406\u5bf9\u8c61mClient\uff0c\u8fd9\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\u5f15\u7528\u4e86SurfaceFlinger\u670d\u52a1\uff0cSurfaceComposerClient\u7c7b\u5c31\u662f\u901a\u8fc7\u5b83\u6765\u548cSurfaceFlinger\u670d\u52a1\u901a\u4fe1\u7684\u3002 \u7531\u4e8eBootAnimation\u7c7b\u5f15\u7528\u4e86SurfaceFlinger\u670d\u52a1\uff0c\u56e0\u6b64\uff0c\u5f53SurfaceFlinger\u670d\u52a1\u610f\u5916\u6b7b\u4ea1\u65f6\uff0cBootAnimation\u7c7b\u5c31\u9700\u8981\u5f97\u5230\u901a\u77e5\uff0c\u5e76\u6267\u884cbinderDied\u51fd\u6570\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\n\nvoid BootAnimation::binderDied(const wp&lt;IBinder&gt;&amp;) {\n    // woah, surfaceflinger died!\n    SLOGD(\"SurfaceFlinger died, exiting...\");\n\n    // calling requestExit() is not enough here because the Surface code\n    // might be blocked on a condition variable that will never be updated.\n    kill( getpid(), SIGKILL );\n    requestExit();\n}\n</code></pre> <p>binderDied\u51fd\u6570\u4f1a\u6740\u6b7b\u5f53\u524d\u8fdb\u7a0b\uff0c\u5e76\u9000\u51fa\u3002</p> <ul> <li>\u901a\u8fc7\u8bfb\u53d6\u5c5e\u6027\u201csys.powerctl\u201d\u6765\u786e\u5b9a\u5f53\u524d\u64ad\u653e\u7684\u662f\u5f00\u673a\u52a8\u753b\u8fd8\u662f\u5173\u673a\u52a8\u753b\u3002</li> </ul> <p>\u5bf9\u4e8e\u4e0d\u719f\u6089cpp\u4ee3\u7801\u7684\u540c\u5b66\u770b\u5230\u8fd9\u5c31\u89c9\u5f97\u5f88\u5947\u602a\uff0c\u5728bootanimation_main.cpp\u7684main\u8fd8\u662f\u91cc\u8c03\u7528BootAnimation\u6784\u9020\u51fd\u6570\uff0c\u4e5f\u6ca1\u770b\u5230BootAnimation\u7684\u6784\u9020\u51fd\u6570\u91cc\u7ee7\u7eed\u505a\u4efb\u4f55\u5de5\u4f5c\u554a\uff0c\u90a3\u8fd9\u4e2a\u7a0b\u5e8f\u600e\u4e48\u8dd1\u5462\uff1f  \u9996\u5148\u6211\u4eec\u770b\u4e0bBootAnimation\u7684\u5934\u6587\u4ef6\uff1a</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.h\n\nclass BootAnimation : public Thread, public IBinder::DeathRecipient    //\u7ee7\u627f\u4e86Thread\u7c7b\u548cIBinder::DeathRecipient\u7c7b\n{\n    ...\n\n private:\n    virtual bool        threadLoop();//\u7ebf\u7a0b\u4f53\uff0c\u5982\u679c\u8fd4\u56detrue\uff0c\u4e14requestExit()\u6ca1\u6709\u88ab\u8c03\u7528\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u518d\u6b21\u6267\u884c\uff1b\u5982\u679c\u8fd4\u56defalse\uff0c\u5219threadloop\u4e2d\u7684\u5185\u5bb9\u4ec5\u4ec5\u6267\u884c\u4e00\u6b21\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u9000\u51fa\n    virtual status_t    readyToRun();//\u7ebf\u7a0b\u4f53\u6267\u884c\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\n    virtual void        onFirstRef();//\u5c5e\u4e8e\u5176\u7236\u7c7bRefBase\uff0c\u8be5\u51fd\u6570\u5728\u5f3a\u5f15\u7528sp\u65b0\u589e\u5f15\u7528\u8ba1\u6570\u6642\u8c03\u7528\uff0c\u5c31\u662f\u5f53\u6709sp\u5305\u88c5\u7684\u7c7b\u521d\u59cb\u5316\u7684\u65f6\u5019\u8c03\u7528    \n    virtual void        binderDied(const wp&lt;IBinder&gt;&amp; who);//\u5f53\u5bf9\u8c61\u6b7b\u6389\u6216\u8005\u5176\u4ed6\u60c5\u51b5\u5bfc\u81f4\u8be5Binder\u7ed3\u675f\u65f6\uff0c\u5c31\u4f1a\u56de\u8c03binderDied()\u65b9\u6cd5\n\n    ...\n}\n</code></pre>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#onfirstref","title":"onFirstRef()","text":"<p>BootAnimation\u7c7b\u7ee7\u627f\u4e86Thread\u7c7b\u548cIBinder::DeathRecipient\u7c7b\uff0cBootAnimation\u7c7b\u95f4\u63a5\u5730\u7ee7\u627f\u4e86RefBase\u7c7b\uff0c\u5e76\u4e14\u91cd\u5199\u4e86RefBase\u7c7b\u7684\u6210\u5458\u51fd\u6570onFirstRef\uff0c\u5f53\u4e00\u4e2aBootAnimation\u5bf9\u8c61\u7b2c\u4e00\u6b21\u88ab\u667a\u80fd\u6307\u9488\u5f15\u7528\u65f6\uff0c\u8fd9\u4e2aBootAnimation\u5bf9\u8c61\u7684\u6210\u5458\u51fd\u6570onFirstRef\u5c31\u4f1a\u88ab\u8c03\u7528\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#readytorun","title":"readyToRun()","text":"<p>BootAnimation\u7c7b\u7ee7\u627f\u4e86Thread\u7c7b\uff0c\u5f53BootAnimation\u7c7b\u7684\u6210\u5458\u51fd\u6570onFirstRef\u8c03\u7528\u4e86\u7236\u7c7bThread\u7684\u6210\u5458\u51fd\u6570run\u4e4b\u540e\uff0c\u7cfb\u7edf\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u5728\u7b2c\u4e00\u6b21\u8fd0\u884c\u4e4b\u524d\uff0c\u4f1a\u8c03\u7528BootAnimation\u7c7b\u7684\u6210\u5458\u51fd\u6570readyToRun\u6765\u6267\u884c\u4e00\u4e9bThread\u6267\u884c\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#threadloop","title":"threadLoop()","text":"<p>\u540e\u9762\u518d\u8c03\u7528BootAnimation\u7c7b\u7684\u6210\u5458\u51fd\u6570threadLoop\u6765\u663e\u793a\u5f00\u673a\u753b\u9762,\u6bcf\u4e2a\u7ebf\u7a0b\u7c7b\u90fd\u8981\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u91cc\u5b9a\u4e49thread\u7684\u6267\u884c\u5185\u5bb9\u3002\u8fd9\u4e2a\u51fd\u6570\u5982\u679c\u8fd4\u56detrue\uff0c\u4e14\u6ca1\u6709\u8c03\u7528requestExit()\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u518d\u6b21\u6267\u884c\uff1b\u5982\u679c\u8fd4\u56defalse\uff0c\u5219threadloop\u4e2d\u7684\u5185\u5bb9\u4ec5\u4ec5\u6267\u884c\u4e00\u6b21\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u9000\u51fa\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#androidmovie","title":"android()\u6216\u8005movie()","text":"<p>\u663e\u793a\u5b8c\u6210\u4e4b\u540e\uff0c\u5c31\u4f1a\u9500\u6bc1\u524d\u9762\u6240\u521b\u5efa\u7684EGLContext\u5bf9\u8c61mContext\u3001EGLSurface\u5bf9\u8c61mSurface\uff0c\u4ee5\u53caEGLDisplay\u5bf9\u8c61mDisplay\u7b49\u3002android()\u65b9\u6cd5\u91cc\u4e3b\u8981\u662f\u4f7f\u7528\u65b9\u6cd5\u7ed8\u5236\u5b89\u5353\u5b57\u6837\uff0c\u8fd9\u8fb9\u7684\u9000\u51fa\u4f7f\u7528\u7684\u662fcheckExit(\uff09\uff1b\u4e00\u822c\u4f7f\u7528\u81ea\u5b9a\u4e49\u52a8\u753b\u64ad\u653e\uff0c\u56e0\u6b64\u4e3b\u8981\u770b\u4e00\u4e0bmovie\u65b9\u6cd5\u91cc\u7684\u4e3b\u8981\u8c03\u7528\u65b9\u6cd5\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_2","title":"\u521d\u59cb\u5316\u52a8\u753b\u6587\u4ef6","text":"<p>\u524d\u9762\u8bb2\u5230\u5728sp\u7684\u8d4b\u503c\u8fc7\u7a0b\u4e2d\u4f1a\u8c03\u7528RefBase\u7684incStrong\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5728\u9996\u6b21\u5f15\u7528\u65f6\u8c03\u7528\u5f53\u524d\u7c7b\u7684onFirstRef\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u88abBootAnimation\u7c7b\u91cd\u5199\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4BootAnimation\u7c7b\u95f4\u63a5\u7ee7\u627f\u4e86RefBase\u7c7b\uff0c\u4e14\u4e0a\u9762\u7684main\u51fd\u6570\u521b\u5efaBootAnimation\u5bf9\u8c61\u7684\u65f6\u5019\u4f7f\u7528\u667a\u80fd\u6307\u9488\u5f15\u7528\uff0c\u6240\u4ee5\u6267\u884cBootAnimation\u7c7b\u7684\u6784\u9020\u51fd\u6570\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u4e5f\u4f1a\u6267\u884conFirstRef\u51fd\u6570\uff0c\u4e0b\u9762\u662fonFirstRef\u51fd\u6570\uff1a</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#onfirstref_1","title":"onFirstRef()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nvoid BootAnimation::onFirstRef() {\n    //\u6ce8\u518cSurfaceFlinger\u670d\u52a1\u7684\u6b7b\u4ea1\u63a5\u6536\u901a\u77e5\n    status_t err = mSession-&gt;linkToComposerDeath(this);\n    SLOGE_IF(err, \"linkToComposerDeath failed (%s) \", strerror(-err));\n    if (err == NO_ERROR) {\n        // Load the animation content -- this can be slow (eg 200ms)\n        // called before waitForSurfaceFlinger() in main() to avoid wait\n        ALOGD(\"%sAnimationPreloadTiming start time: %\" PRId64 \"ms\",\n                mShuttingDown ? \"Shutdown\" : \"Boot\", elapsedRealtime());\n        preloadAnimation();\n        ALOGD(\"%sAnimationPreloadStopTiming start time: %\" PRId64 \"ms\",\n                mShuttingDown ? \"Shutdown\" : \"Boot\", elapsedRealtime());\n    }\n}\n</code></pre> <p>onFirstRef\u5148\u6ce8\u518cSurfaceFlinger\u670d\u52a1\u7684\u6b7b\u4ea1\u63a5\u6536\u901a\u77e5\uff0c\u63a5\u7740\u8c03\u7528preloadAnimation\u52a0\u8f7d\u5f00\u673a\u52a8\u753b\u8d44\u6e90\u6587\u4ef6\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#preloadanimation","title":"preloadAnimation()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\n\nbool BootAnimation::preloadAnimation() {\n    findBootAnimationFile();\n    if (!mZipFileName.isEmpty()) {\n        mAnimation = loadAnimation(mZipFileName);\n        return (mAnimation != nullptr);\n    }\n\n    return false;\n}\n</code></pre> <p>\u8c03\u7528findBootAnimationFile\u627e\u5230\u52a8\u753b\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u5316 mZipFileName\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#findbootanimationfile","title":"findBootAnimationFile()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nvoid BootAnimation::findBootAnimationFile() {\n    // If the device has encryption turned on or is in process\n    // of being encrypted we show the encrypted boot animation.\n    char decrypt[PROPERTY_VALUE_MAX];\n    property_get(\"vold.decrypt\", decrypt, \"\");\n\n    bool encryptedAnimation = atoi(decrypt) != 0 ||\n        !strcmp(\"trigger_restart_min_framework\", decrypt);\n\n    if (!mShuttingDown &amp;&amp; encryptedAnimation) {\n        static const std::vector&lt;std::string&gt; encryptedBootFiles = {\n            PRODUCT_ENCRYPTED_BOOTANIMATION_FILE, SYSTEM_ENCRYPTED_BOOTANIMATION_FILE,\n        };\n        if (findBootAnimationFileInternal(encryptedBootFiles)) {\n            return;\n        }\n    }\n\n    const bool playDarkAnim = android::base::GetIntProperty(\"ro.boot.theme\", 0) == 1;\n    //\u5f00\u673a\u52a8\u753b\u6587\u4ef6\n    static const std::vector&lt;std::string&gt; bootFiles = {\n        APEX_BOOTANIMATION_FILE, playDarkAnim ? PRODUCT_BOOTANIMATION_DARK_FILE : PRODUCT_BOOTANIMATION_FILE,\n        OEM_BOOTANIMATION_FILE, SYSTEM_BOOTANIMATION_FILE\n    };\n    //\u5173\u673a\u52a8\u753b\u6587\u4ef6\n    static const std::vector&lt;std::string&gt; shutdownFiles = {\n        PRODUCT_SHUTDOWNANIMATION_FILE, OEM_SHUTDOWNANIMATION_FILE, SYSTEM_SHUTDOWNANIMATION_FILE, \"\"\n    };\n    //\u91cd\u542f\u52a8\u753b\u6587\u4ef6\n    static const std::vector&lt;std::string&gt; userspaceRebootFiles = {\n        PRODUCT_USERSPACE_REBOOT_ANIMATION_FILE, OEM_USERSPACE_REBOOT_ANIMATION_FILE,\n        SYSTEM_USERSPACE_REBOOT_ANIMATION_FILE,\n    };\n\n    //\u5224\u65ad\u662f\u91cd\u542f\u3001\u5173\u673a\u8fd8\u662f\u5f00\u673a\n    if (android::base::GetBoolProperty(\"sys.init.userspace_reboot.in_progress\", false)) {\n        findBootAnimationFileInternal(userspaceRebootFiles);\n    } else if (mShuttingDown) {\n        findBootAnimationFileInternal(shutdownFiles);\n    } else {\n        findBootAnimationFileInternal(bootFiles);\n    }\n}\n</code></pre> <ul> <li>\u9996\u5148\u6839\u636e\u7cfb\u7edf\u5c5e\u6027vold.decrypt\u6765\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u542f\u52a8\u52a0\u5bc6\u6216\u8005\u6b63\u5728\u52a0\u5bc6\u5904\u7406\uff0c\u5982\u679c\u662f\uff0c\u5219\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u964d\u7ea7\u7684\u65b9\u5f0f\uff0c\u53bb\u64ad\u653e\u5982\u4e0b\u4e24\u4e2a\u8def\u5f84\u7684\u52a0\u5bc6\u52a8\u753b\uff1a</li> <li>static const char PRODUCT_ENCRYPTED_BOOTANIMATION_FILE[] = \"/product/media/bootanimation-encrypted.zip\"</li> <li>static const char SYSTEM_ENCRYPTED_BOOTANIMATION_FILE[] = \"/system/media/bootanimation-encrypted.zip\"</li> <li>\u5176\u6b21\u6839\u636e\u7cfb\u7edf\u5c5e\u6027sys.init.userspace_reboot.in_progress\u6765\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u6b63\u5728\u91cd\u542f\uff0c\u5982\u679c\u662f\uff0c\u5219\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u964d\u7ea7\u7684\u65b9\u5f0f\uff0c\u53bb\u64ad\u653e\u5982\u4e0b\u4e09\u4e2a\u8def\u5f84\u7684\u91cd\u542f\u52a8\u753b\uff1a</li> <li>static constexpr const char* PRODUCT_USERSPACE_REBOOT_ANIMATION_FILE = \"/product/media/userspace-reboot.zip\"</li> <li>static constexpr const char* OEM_USERSPACE_REBOOT_ANIMATION_FILE = \"/oem/media/userspace-reboot.zip\"</li> <li>static constexpr const char* SYSTEM_USERSPACE_REBOOT_ANIMATION_FILE = \"/system/media/userspace-reboot.zip\"</li> <li>\u518d\u6b21\u6839\u636eBootanimation\u6784\u9020\u51fd\u6570\u4e2d\u83b7\u53d6\u5230\u7684\u7cfb\u7edf\u5c5e\u6027sys.powerctl\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u6b63\u5728\u5173\u673a\uff0c\u5982\u679c\u662f\uff0c\u5219\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u964d\u7ea7\u7684\u65b9\u5f0f\uff0c\u53bb\u64ad\u653e\u5982\u4e0b\u4e09\u4e2a\u8def\u5f84\u7684\u5173\u673a\u52a8\u753b\uff1a</li> <li>static const char PRODUCT_SHUTDOWNANIMATION_FILE[] = \"/product/media/shutdownanimation.zip\"</li> <li>static const char OEM_SHUTDOWNANIMATION_FILE[] = \"/oem/media/shutdownanimation.zip\"</li> <li>static const char SYSTEM_SHUTDOWNANIMATION_FILE[] = \"/system/media/shutdownanimation.zip\"</li> <li>\u5426\u5219\u4e3a\u5f00\u673a\uff0c\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u964d\u7ea7\u7684\u65b9\u5f0f\uff0c\u53bb\u64ad\u653e\u5982\u4e0b\u4e94\u4e2a\u8def\u5f84\u7684\u5f00\u673a\u52a8\u753b\uff1a</li> <li>static const char APEX_BOOTANIMATION_FILE[] = \"/apex/com.android.bootanimation/etc/bootanimation.zip\" \uff08apex\u5347\u7ea7\u7684\u65b9\u5f0f\u6700\u4f18\u5148\uff09</li> <li>static const char PRODUCT_BOOTANIMATION_DARK_FILE[] = \"/product/media/bootanimation-dark.zip\" \uff08\u6839\u636e\u7cfb\u7edf\u5c5e\u6027ro.boot.theme\u5224\u65ad\u662f\u6697\u9ed1\u4e3b\u9898\u8fd8\u662f\u660e\u4eae\u4e3b\u9898\uff09</li> <li>static const char PRODUCT_BOOTANIMATION_FILE[] = \"/product/media/bootanimation.zip\"</li> <li>static const char OEM_BOOTANIMATION_FILE[] = \"/oem/media/bootanimation.zip\"</li> <li>static const char SYSTEM_BOOTANIMATION_FILE[] = \"/system/media/bootanimation.zip\" <p>\u603b\u7ed3\uff1a\u4f18\u5148\u7ea7\u7684\u987a\u5e8f\u4e00\u822c\u662f product &gt; oem &gt; system</p> </li> </ul>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#findbootanimationfileinternal","title":"findBootAnimationFileInternal()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::findBootAnimationFileInternal(const std::vector&lt;std::string&gt; &amp;files) {\n    for (const std::string&amp; f : files) {\n        if (access(f.c_str(), R_OK) == 0) {\n            mZipFileName = f.c_str();\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u51fa\u6765\u5c31\u662f\u628a\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9mZipFileName\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_3","title":"\u89e3\u6790\u52a8\u753b\u6587\u4ef6","text":"<p>\u5728preloadAnimation()\u521d\u59cb\u5316mZipFileName\u540e\u8c03\u7528loadAnimation(mZipFileName)\u6765\u89e3\u6790\u52a8\u753b\u6587\u4ef6\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#loadanimation","title":"loadAnimation()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nBootAnimation::Animation* BootAnimation::loadAnimation(const String8&amp; fn) {\n    //\u5982\u679c\u5df2\u7ecf\u52a0\u8f7d\uff0c\u5219\u8fd4\u56de\n    if (mLoadedFiles.indexOf(fn) &gt;= 0) {\n        SLOGE(\"File \\\"%s\\\" is already loaded. Cyclic ref is not allowed\",\n            fn.string());\n        return nullptr;\n    }\n\n    //\u6253\u5f00zip\u6587\u4ef6\n    ZipFileRO *zip = ZipFileRO::open(fn);\n    if (zip == nullptr) {\n        SLOGE(\"Failed to open animation zip \\\"%s\\\": %s\",\n            fn.string(), strerror(errno));\n        return nullptr;\n    }\n\n    Animation *animation =  new Animation;\n    animation-&gt;fileName = fn;\n    animation-&gt;zip = zip;\n    animation-&gt;clockFont.map = nullptr;\n    mLoadedFiles.add(animation-&gt;fileName);\n\n    //\u89e3\u6790\u63cf\u8ff0\u6587\u4ef6\"desc.txt\"\n    parseAnimationDesc(*animation);\n    if (!preloadZip(*animation)) {\n        releaseAnimation(animation);\n        return nullptr;\n    }\n\n    mLoadedFiles.remove(fn);\n    return animation;\n}\n</code></pre> <p>\u6253\u5f00zip\u6587\u4ef6\u5e76\u8c03\u7528parseAnimationDesc\u89e3\u6790\u63cf\u8ff0\u6587\u4ef6\"desc.txt\"\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#parseanimationdesc","title":"parseAnimationDesc()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::parseAnimationDesc(Animation&amp; animation)  {\n    String8 desString;\n\n    if (!readFile(animation.zip, \"desc.txt\", desString)) {\n        return false;\n    }\n    char const* s = desString.string();\n\n    // Parse the description file\n    for (;;) {\n        const char* endl = strstr(s, \"\\n\");\n        if (endl == nullptr) break;\n        String8 line(s, endl - s);\n        const char* l = line.string();\n        int fps = 0;\n        int width = 0;\n        int height = 0;\n        int count = 0;\n        int pause = 0;\n        int progress = 0;\n        int framesToFadeCount = 0;\n        char path[ANIM_ENTRY_NAME_MAX];\n        char color[7] = \"000000\"; // default to black if unspecified\n        char clockPos1[TEXT_POS_LEN_MAX + 1] = \"\";\n        char clockPos2[TEXT_POS_LEN_MAX + 1] = \"\";\n        char pathType;\n\n        int nextReadPos;\n\n        int topLineNumbers = sscanf(l, \"%d %d %d %d\", &amp;width, &amp;height, &amp;fps, &amp;progress);\n        if (topLineNumbers == 3 || topLineNumbers == 4) {\n            // SLOGD(\"&gt; w=%d, h=%d, fps=%d, progress=%d\", width, height, fps, progress);\n            animation.width = width;\n            animation.height = height;\n            animation.fps = fps;\n            if (topLineNumbers == 4) {\n              animation.progressEnabled = (progress != 0);\n            } else {\n              animation.progressEnabled = false;\n            }\n        } else if (sscanf(l, \"%c %d %d %\" STRTO(ANIM_PATH_MAX) \"s%n\",\n                          &amp;pathType, &amp;count, &amp;pause, path, &amp;nextReadPos) &gt;= 4) {\n            if (pathType == 'f') {\n                sscanf(l + nextReadPos, \" %d #%6s %16s %16s\", &amp;framesToFadeCount, color, clockPos1,\n                       clockPos2);\n            } else {\n                sscanf(l + nextReadPos, \" #%6s %16s %16s\", color, clockPos1, clockPos2);\n            }\n            // SLOGD(\"&gt; type=%c, count=%d, pause=%d, path=%s, framesToFadeCount=%d, color=%s, \"\n            //       \"clockPos1=%s, clockPos2=%s\",\n            //       pathType, count, pause, path, framesToFadeCount, color, clockPos1, clockPos2);\n            Animation::Part part;\n            part.playUntilComplete = pathType == 'c';\n            part.framesToFadeCount = framesToFadeCount;\n            part.count = count;\n            part.pause = pause;\n            part.path = path;\n            part.audioData = nullptr;\n            part.animation = nullptr;\n            if (!parseColor(color, part.backgroundColor)) {\n                SLOGE(\"&gt; invalid color '#%s'\", color);\n                part.backgroundColor[0] = 0.0f;\n                part.backgroundColor[1] = 0.0f;\n                part.backgroundColor[2] = 0.0f;\n            }\n            parsePosition(clockPos1, clockPos2, &amp;part.clockPosX, &amp;part.clockPosY);\n            animation.parts.add(part);\n        }\n        else if (strcmp(l, \"$SYSTEM\") == 0) {\n            // SLOGD(\"&gt; SYSTEM\");\n            Animation::Part part;\n            part.playUntilComplete = false;\n            part.framesToFadeCount = 0;\n            part.count = 1;\n            part.pause = 0;\n            part.audioData = nullptr;\n            part.animation = loadAnimation(String8(SYSTEM_BOOTANIMATION_FILE));\n            if (part.animation != nullptr)\n                animation.parts.add(part);\n        }\n        s = ++endl;\n    }\n\n    return true;\n}\n</code></pre> <p>\u4e4d\u4e00\u770b\u8fd9\u4e2a\u4ee3\u7801\u5f88\u590d\u6742\uff0c\u5176\u5b9e\u4e3b\u8981\u662f\u901a\u8fc7sscanf\u51fd\u6570\u6309\u7167\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u89e3\u6790\u6bcf\u4e00\u884c\u3002\u5982\u679c\u7b2c\u4e00\u884c\u5305\u542b3\u6216\u80054\u4e2a\u6570\u5b57\u5219\u662f\uff1a\u7528\u6765\u63cf\u8ff0\u5f00\u673a\u52a8\u753b\u5728\u5c4f\u5e55\u663e\u793a\u7684\u5927\u5c0f\u53ca\u901f\u5ea6\u3002\u5426\u5219\u4e3a\u4e00\u4e2a\u64ad\u653e\u7247\u6bb5\uff0c\u64ad\u653e\u7247\u6bb5\u5206\u4e3a\u6807\u8bc6\u7b26\u3001\u5faa\u73af\u7684\u6b21\u6570\u3001\u9636\u6bb5\u5207\u6362\u95f4\u9694\u65f6\u95f4\u3001\u56fe\u7247\u7684\u76ee\u5f55\u3001\u52a8\u753b\u6de1\u51fa\u5e27\u3002</p> <p>\u4e0b\u9762\u6765\u7ed3\u5408\u63cf\u8ff0\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u4e00\u8d77\u5206\u6790\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#desctxt","title":"desc.txt\u63cf\u8ff0\u6587\u4ef6","text":"<p>\u6211\u4eec\u627e\u5230\u4e00\u4e2abootanimation.zip\u7684\u89e3\u538b\uff1a</p> <p><pre><code>\u256d\u2500[solo@10.0.12.7] \u27a4 [/Users/solo/Downloads]\n\u2570\u2500(py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f ll bootanimation\ntotal 8\ndrwx------@   8 solo  staff   256B Jul  1 12:30 .\ndrwx------+  45 solo  staff   1.4K Jul  1 12:13 ..\n-rw-------@   1 solo  staff    75B Jan 14  2021 desc.txt\ndrwxr-xr-x@   3 solo  staff    96B Jul  1 12:13 part0\ndrwxr-xr-x@  36 solo  staff   1.1K Jul  1 12:13 part1\ndrwxr-xr-x@  41 solo  staff   1.3K Jul  1 12:13 part2\ndrwxr-xr-x@ 187 solo  staff   5.8K Jul  1 12:13 part3\ndrwxr-xr-x@ 104 solo  staff   3.3K Jul  1 12:13 part4\n</code></pre> \u5176\"desc.txt\"\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\uff1a <pre><code>512 416 60\nc 1 0 part0\nc 2 15 part1\nc 1 0 part2\nc 1 0 part3\nf 0 0 part4 10\n</code></pre></p> <p>\u7ed3\u5408\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u628adesc.txt\u62c6\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1atopLine\u548c\u975etopLine\u3002</p> <ul> <li>\u5982\u679ctopLine\u5305\u542b3\u6216\u80054\u4e2a\u6570\u5b57\uff0c\u5219\u662f\u7528\u6765\u63cf\u8ff0\u5f00\u673a\u52a8\u753b\u5728\u5c4f\u5e55\u663e\u793a\u7684\u5927\u5c0f\u53ca\u901f\u5ea6\u3002</li> </ul> \u56fe\u7247\u7684\u5bbd \u56fe\u7247\u7684\u9ad8 \u6bcf\u79d2\u663e\u793a\u7684\u5e27\u6570 \u663e\u793a\u767e\u5206\u6bd4\u8fdb\u5ea6 512 416 60 -- <p>\u5177\u4f53\u4e3a\uff1a\u5f00\u673a\u52a8\u753b\u7684\u5bbd\u5ea6\u4e3a512\u4e2a\u50cf\u7d20\uff0c\u9ad8\u5ea6\u4e3a416\u4e2a\u50cf\u7d20\uff0c\u663e\u793a\u9891\u7387\u4e3a\u6bcf\u79d260\u5e27\uff0c\u5373\u6bcf\u5e27\u663e\u793a1/60\u79d2\u3002 Android12.0\u4e2d\u52a0\u5165\u4e86\u201c\u663e\u793a\u767e\u5206\u6bd4\u201d\uff0c\u5c31\u662f\u4ee3\u7801\u4e2d\u7684progressEnabled\u3002</p> <ul> <li>\u5426\u5219\u4e3a\u4e00\u4e2a\u64ad\u653e\u7247\u6bb5</li> </ul> \u6807\u8bc6\u7b26 \u5faa\u73af\u7684\u6b21\u6570 \u9636\u6bb5\u5207\u6362\u95f4\u9694\u65f6\u95f4 \u76f8\u5e94\u56fe\u7247\u7684\u76ee\u5f55 \u52a8\u753b\u6de1\u51fa\u5e27 c 1 0 part0 -- c 2 15 part1 -- f 0 0 part4 10 <ul> <li>\u6807\u8bc6\u7b26\uff1aAndroid5.1\u4e4b\u524d\u53ea\u6709p\uff1bAndroid5.1\u4e2d\u52a0\u5165\u4e86c\uff1bAndroid12.0\u4e2d\u52a0\u5165\u4e86f\u3002</li> <li>\u5faa\u73af\u7684\u6b21\u6570\uff1a\u8868\u793a\u8be5\u7247\u6bb5\u663e\u793a\u7684\u6b21\u6570\uff0c\u5982\u679c\u4e3a\u20180\u2019\uff0c\u8868\u793a\u4f1a\u65e0\u9650\u91cd\u590d\u663e\u793a\u3002</li> <li>\u9636\u6bb5\u5207\u6362\u95f4\u9694\u65f6\u95f4\uff1a\u4e00\u4e2a\u7247\u6bb5\u6216\u4e0e\u4e0b\u4e00\u4e2a\u7247\u6bb5\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\uff1b\u9636\u6bb5\u5207\u6362\u95f4\u9694\u65f6\u95f4 * \uff081/\u6bcf\u79d2\u663e\u793a\u7684\u5e27\u6570\uff09\u3002</li> <li>\u76f8\u5e94\u56fe\u7247\u7684\u76ee\u5f55\uff1abootanimation.zip\u89e3\u6790\u51fa\u6765\u540e\u7684\u6587\u4ef6\u76ee\u5f55\uff0c</li> <li>**\u52a8\u753b\u6de1\u51fa\u5e27\uff1a**Android12.0\u4e2d\u52a0\u5165\u4e86\u52a8\u753b\u6de1\u51fa\u5e27\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u4e2d\u7684framesToFadeCount\uff0c\u5230\u7b2c\u51e0\u5e27\u540e\u52a8\u753b\u5f00\u59cb\u6de1\u51fa\u3002</li> </ul> <p>\u4e3e\u4f8b\uff1a</p> <ul> <li>c 1 0 part0\uff1a\u4ee3\u8868\u8be5\u7247\u6bb5\u663e\u793a1\u6b21\uff0c\u4e0e\u4e0b\u4e00\u4e2a\u7247\u6bb5\u95f4\u96940s\uff0c\u8be5\u7247\u6bb5\u7684\u663e\u793a\u56fe\u7247\u8def\u5f84\u4e3abootanimation.zip/part0\u3002</li> <li>c 2 15 part1\uff1a\u4ee3\u8868\u8be5\u7247\u6bb5\u663e\u793a2\u6b21\uff0c\u4e0e\u4e0b\u4e00\u4e2a\u7247\u6bb5\u95f4\u969415*(1/60)=(\u00bc)s\uff0c\u4e0e\u4e0b\u4e00\u4e2a\u7247\u6bb5\u95f4\u969415*(1/60)=(\u00bc)s\uff0c\u8be5\u7247\u6bb5\u7684\u663e\u793a\u56fe\u7247\u8def\u5f84\u4e3abootanimation.zip/part1\u3002</li> <li>f 0 0 part4 10\uff1a\u4ee3\u8868\u8be5\u7247\u6bb5\u65e0\u9650\u5faa\u73af\u663e\u793a\uff0c\u4e14\u4e24\u6b21\u663e\u793a\u7684\u95f4\u9694\u4e3a0s\uff0c\u8be5\u7247\u6bb5\u7684\u663e\u793a\u56fe\u7247\u8def\u5f84\u4e3abootanimation.zip/part4\uff0c\u5230\u7b2c10\u5e27\u52a8\u753b\u5f00\u59cb\u6de1\u51fa\u3002</li> </ul> <p>\u901a\u8fc7\"desc.txt\"\u6587\u4ef6\u7ed3\u5408\u4ee3\u7801\uff08\u770b\u4e00\u773c\u5c31\u80fd\u77e5\u9053\u7684\uff09\u6211\u4eec\u5927\u6982\u77e5\u9053\u4e86\u5176\u8fd0\u4f5c\u539f\u7406\uff0c\u4f46\u521a\u624d\u6211\u4eec\u662f\u9057\u7559\u51e0\u4e2a\u95ee\u9898\u6ca1\u6709\u9610\u8ff0\u6e05\u695a\uff1a</p> <ul> <li>\u6807\u8bc6\u7b26</li> <li>**\u663e\u793a\u767e\u5206\u6bd4**\u8fdb\u5ea6</li> <li>\u52a8\u753b\u6de1\u51fa\u5e27</li> </ul>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_4","title":"\u6807\u8bc6\u7b26 \u548c \u52a8\u753b\u6de1\u51fa\u5e27","text":"<p>\u5982\u679c\u6807\u8bc6\u7b26\u4e3ac\uff1a</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::parseAnimationDesc(Animation&amp; animation)  {\n    ...\n\n    } else if (sscanf(l, \"%c %d %d %\" STRTO(ANIM_PATH_MAX) \"s%n\",\n                      &amp;pathType, &amp;count, &amp;pause, path, &amp;nextReadPos) &gt;= 4) {\n        if (pathType == 'f') {\n            sscanf(l + nextReadPos, \" %d #%6s %16s %16s\", &amp;framesToFadeCount, color, clockPos1,\n                   clockPos2);\n        } else {\n            sscanf(l + nextReadPos, \" #%6s %16s %16s\", color, clockPos1, clockPos2);\n        }\n        // SLOGD(\"&gt; type=%c, count=%d, pause=%d, path=%s, framesToFadeCount=%d, color=%s, \"\n        //       \"clockPos1=%s, clockPos2=%s\",\n        //       pathType, count, pause, path, framesToFadeCount, color, clockPos1, clockPos2);\n        Animation::Part part;\n        part.playUntilComplete = pathType == 'c';\n        part.framesToFadeCount = framesToFadeCount;\n        ...\n    }\n   ...\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679cpathType\u7b49\u4e8e'c'\uff0cpart.playUntilComplete\u7b49\u4e8etrue\uff0c\u5426\u5219\u4e3afalse\u3002\u63a5\u7740\uff0c\u770b\u4e00\u4e0b\u663e\u793a\u4ee3\u7801\uff1a</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::shouldStopPlayingPart(const Animation::Part&amp; part,\n                                          const int fadedFramesCount,\n                                          const int lastDisplayedProgress) {\n    // stop playing only if it is time to exit and it's a partial part which has been faded out\n    return exitPending() &amp;&amp; !part.playUntilComplete &amp;&amp; fadedFramesCount &gt;= part.framesToFadeCount &amp;&amp;\n        (lastDisplayedProgress == 0 || lastDisplayedProgress == 100);\n}\n\n\n\nbool BootAnimation::playAnimation(const Animation&amp; animation) {\n    ...\n        for (size_t i=0 ; i&lt;pcount ; i++) {\n            ...\n                // process the part not only while the count allows but also if already fading\n                for (int r=0 ; !part.count || r&lt;part.count || fadedFramesCount &gt; 0 ; r++) {\n                    if (shouldStopPlayingPart(part, fadedFramesCount, lastDisplayedProgress)) break;\n\n                    ...\n\n                        for (size_t j=0 ; j&lt;fcount ; j++) {\n                            if (shouldStopPlayingPart(part, fadedFramesCount, lastDisplayedProgress)) break;\n\n                            ...\n                            }\n\n                    ...\n                    }\n        }\n\n    ....\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679cexitPending()\u8fd4\u56de\u503c\u4e3atrue\u4e14part.playUntilComplete=false\uff0c\u5219\u4f1abreak\u3002\u5373\uff1a\u5f53SurfaceFlinger\u670d\u52a1\u8981\u6c42bootanimation\u505c\u6b62\u663e\u793a\u52a8\u753b\u65f6\uff0c\u4ee5\u2018p\u2019\u6807\u8bc6\u7684\u7247\u6bb5\u4f1a\u505c\u6b62\uff0c\u800c\u4ee5'c'\u6807\u8bc6\u7684\u7247\u6bb5\u4f1a\u7ee7\u7eed\u663e\u793a\u3002\u8fd9\u5c31\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u3002 \u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff1a\u91cd\u590d\u5faa\u73af\u663e\u793a\u7684'c'\u6807\u8bc6\u7247\u6bb5\uff0c\u4f1a\u4e0d\u53d7\u4efb\u4f55\u7ea6\u675f\u7684\u4e00\u76f4\u663e\u793a\u4e0b\u53bb\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\u3002\u6240\u4ee5\u5728Android12.0\u53c8\u65b0\u589e\u4e86\u6761\u4ef6\uff1a</p> <pre><code>fadedFramesCount &gt;= part.framesToFadeCount &amp;&amp; (lastDisplayedProgress == 0 || lastDisplayedProgress == 100\n</code></pre> <p>\u5f53\u524d\u64ad\u653e\u7684\u5e27\u5927\u4e8e\u7b49\u4e8e\u63cf\u8ff0\u6587\u4ef6\u91cc\u8bbe\u7f6e\u7684framesToFadeCount\uff0c\u5c31\u505c\u6b62\u52a8\u753b\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_5","title":"\u663e\u793a\u767e\u5206\u6bd4\u8fdb\u5ea6","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::parseAnimationDesc(Animation&amp; animation)  {\n    ...\n    int topLineNumbers = sscanf(l, \"%d %d %d %d\", &amp;width, &amp;height, &amp;fps, &amp;progress);\n    if (topLineNumbers == 3 || topLineNumbers == 4) {\n        ...\n        if (topLineNumbers == 4) {\n          animation.progressEnabled = (progress != 0);\n        } else {\n          animation.progressEnabled = false;\n        }\n    } \n    ...\n}\n</code></pre> <p>\u5982\u679c\u63cf\u8ff0\u6587\u4ef6\u91cc\u7b2c\u4e00\u884c\u6709\u7b2c\u56db\u4e2a\u6570\u5b57\uff0c\u5e76\u4e14\u4e0d\u4e3a0\uff0c\u5219\u663e\u793a\u64ad\u653e\u52a8\u753b\u7684\u65f6\u5019\u663e\u793a\u8fdb\u5ea6\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::playAnimation(const Animation&amp; animation) {\n    ...\n    for (size_t i=0 ; i&lt;pcount ; i++) {\n        ...\n\n        // process the part not only while the count allows but also if already fading\n        for (int r=0 ; !part.count || r&lt;part.count || fadedFramesCount &gt; 0 ; r++) {\n            ...\n\n            // For the last animation, if we have progress indicator from\n            // the system, display it.\n            int currentProgress = android::base::GetIntProperty(PROGRESS_PROP_NAME, 0);\n            bool displayProgress = animation.progressEnabled &amp;&amp;\n                (i == (pcount -1)) &amp;&amp; currentProgress != 0;\n\n            for (size_t j=0 ; j&lt;fcount ; j++) {\n                ...\n\n                if (displayProgress) {\n                    int newProgress = android::base::GetIntProperty(PROGRESS_PROP_NAME, 0);\n                    // In case the new progress jumped suddenly, still show an\n                    // increment of 1.\n                    if (lastDisplayedProgress != 100) {\n                      // Artificially sleep 1/10th a second to slow down the animation.\n                      usleep(100000);\n                      if (lastDisplayedProgress &lt; newProgress) {\n                        lastDisplayedProgress++;\n                      }\n                    }\n                    // Put the progress percentage right below the animation.\n                    int posY = animation.height / 3;\n                    int posX = TEXT_CENTER_VALUE;\n                    drawProgress(lastDisplayedProgress, animation.progressFont, posX, posY);\n                }\n\n                ...\n            }\n\n            ...\n        }\n    }\n\n    ...\n}\n</code></pre> <p>\u4ee3\u7801\u7ec6\u8282\u8fd9\u91cc\u4e0d\u5c55\u5f00\u53d9\u8ff0\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#preloadzip","title":"preloadZip()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::preloadZip(Animation&amp; animation) {\n    // read all the data structures\n    const size_t pcount = animation.parts.size();\n    void *cookie = nullptr;\n    ZipFileRO* zip = animation.zip;\n    if (!zip-&gt;startIteration(&amp;cookie)) {\n        return false;\n    }\n\n    ZipEntryRO entry;\n    char name[ANIM_ENTRY_NAME_MAX];\n    while ((entry = zip-&gt;nextEntry(cookie)) != nullptr) {\n        const int foundEntryName = zip-&gt;getEntryFileName(entry, name, ANIM_ENTRY_NAME_MAX);\n        if (foundEntryName &gt; ANIM_ENTRY_NAME_MAX || foundEntryName == -1) {\n            SLOGE(\"Error fetching entry file name\");\n            continue;\n        }\n\n        const String8 entryName(name);\n        const String8 path(entryName.getPathDir());\n        const String8 leaf(entryName.getPathLeaf());\n        if (leaf.size() &gt; 0) {\n            if (entryName == CLOCK_FONT_ZIP_NAME) {\n                FileMap* map = zip-&gt;createEntryFileMap(entry);\n                if (map) {\n                    animation.clockFont.map = map;\n                }\n                continue;\n            }\n\n            if (entryName == PROGRESS_FONT_ZIP_NAME) {\n                FileMap* map = zip-&gt;createEntryFileMap(entry);\n                if (map) {\n                    animation.progressFont.map = map;\n                }\n                continue;\n            }\n\n            for (size_t j = 0; j &lt; pcount; j++) {\n                if (path == animation.parts[j].path) {\n                    uint16_t method;\n                    // supports only stored png files\n                    if (zip-&gt;getEntryInfo(entry, &amp;method, nullptr, nullptr, nullptr, nullptr, nullptr)) {\n                        if (method == ZipFileRO::kCompressStored) {\n                            FileMap* map = zip-&gt;createEntryFileMap(entry);\n                            if (map) {\n                                Animation::Part&amp; part(animation.parts.editItemAt(j));\n                                if (leaf == \"audio.wav\") {\n                                    // a part may have at most one audio file\n                                    part.audioData = (uint8_t *)map-&gt;getDataPtr();\n                                    part.audioLength = map-&gt;getDataLength();\n                                } else if (leaf == \"trim.txt\") {\n                                    part.trimData.setTo((char const*)map-&gt;getDataPtr(),\n                                                        map-&gt;getDataLength());\n                                } else {\n                                    Animation::Frame frame;\n                                    frame.name = leaf;\n                                    frame.map = map;\n                                    frame.trimWidth = animation.width;\n                                    frame.trimHeight = animation.height;\n                                    frame.trimX = 0;\n                                    frame.trimY = 0;\n                                    part.frames.add(frame);\n                                }\n                            }\n                        } else {\n                            SLOGE(\"bootanimation.zip is compressed; must be only stored\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // If there is trimData present, override the positioning defaults.\n    for (Animation::Part&amp; part : animation.parts) {\n        const char* trimDataStr = part.trimData.string();\n        for (size_t frameIdx = 0; frameIdx &lt; part.frames.size(); frameIdx++) {\n            const char* endl = strstr(trimDataStr, \"\\n\");\n            // No more trimData for this part.\n            if (endl == nullptr) {\n                break;\n            }\n            String8 line(trimDataStr, endl - trimDataStr);\n            const char* lineStr = line.string();\n            trimDataStr = ++endl;\n            int width = 0, height = 0, x = 0, y = 0;\n            if (sscanf(lineStr, \"%dx%d+%d+%d\", &amp;width, &amp;height, &amp;x, &amp;y) == 4) {\n                Animation::Frame&amp; frame(part.frames.editItemAt(frameIdx));\n                frame.trimWidth = width;\n                frame.trimHeight = height;\n                frame.trimX = x;\n                frame.trimY = y;\n            } else {\n                SLOGE(\"Error parsing trim.txt, line: %s\", lineStr);\n                break;\n            }\n        }\n    }\n\n    zip-&gt;endIteration(cookie);\n\n    return true;\n}\n</code></pre> <p>\u89e3\u6790bootanimation.zip\u4e2d\u7684png\u6216\u8005\u97f3\u9891\u6587\u4ef6audio.wav\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#bootanimation_1","title":"\u542f\u52a8BootAnimation\u7ebf\u7a0b","text":"","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#readytorun_1","title":"readyToRun()","text":"<p>\u5728\u524d\u9762\u8bb2\u5230BootAnimation\u5bf9\u8c61\u521b\u5efa\u7684\u65f6\u5019\u8bb2\u5230\u8fc7\uff0c\u7ebf\u7a0b\u7684\u521b\u5efa\u5148readyToRun()\u6765\u6267\u884c\u4e00\u4e9bThread\u6267\u884c\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nstatus_t BootAnimation::readyToRun() {\n    mAssets.addDefaultAssets();\n\n    mDisplayToken = SurfaceComposerClient::getInternalDisplayToken();\n    if (mDisplayToken == nullptr)\n        return NAME_NOT_FOUND;\n\n    DisplayMode displayMode;\n    const status_t error =\n            SurfaceComposerClient::getActiveDisplayMode(mDisplayToken, &amp;displayMode);\n    if (error != NO_ERROR)\n        return error;\n\n    mMaxWidth = android::base::GetIntProperty(\"ro.surface_flinger.max_graphics_width\", 0);\n    mMaxHeight = android::base::GetIntProperty(\"ro.surface_flinger.max_graphics_height\", 0);\n    ui::Size resolution = displayMode.resolution;\n    resolution = limitSurfaceSize(resolution.width, resolution.height);\n    // create the native surface\n    sp&lt;SurfaceControl&gt; control = session()-&gt;createSurface(String8(\"BootAnimation\"),\n            resolution.getWidth(), resolution.getHeight(), PIXEL_FORMAT_RGB_565);\n\n    SurfaceComposerClient::Transaction t;\n\n    // this guest property specifies multi-display IDs to show the boot animation\n    // multiple ids can be set with comma (,) as separator, for example:\n    // setprop persist.boot.animation.displays 19260422155234049,19261083906282754\n    Vector&lt;PhysicalDisplayId&gt; physicalDisplayIds;\n    char displayValue[PROPERTY_VALUE_MAX] = \"\";\n    property_get(DISPLAYS_PROP_NAME, displayValue, \"\");\n    bool isValid = displayValue[0] != '\\0';\n    if (isValid) {\n        char *p = displayValue;\n        while (*p) {\n            if (!isdigit(*p) &amp;&amp; *p != ',') {\n                isValid = false;\n                break;\n            }\n            p ++;\n        }\n        if (!isValid)\n            SLOGE(\"Invalid syntax for the value of system prop: %s\", DISPLAYS_PROP_NAME);\n    }\n    if (isValid) {\n        std::istringstream stream(displayValue);\n        for (PhysicalDisplayId id; stream &gt;&gt; id.value; ) {\n            physicalDisplayIds.add(id);\n            if (stream.peek() == ',')\n                stream.ignore();\n        }\n\n        // In the case of multi-display, boot animation shows on the specified displays\n        // in addition to the primary display\n        auto ids = SurfaceComposerClient::getPhysicalDisplayIds();\n        constexpr uint32_t LAYER_STACK = 0;\n        for (auto id : physicalDisplayIds) {\n            if (std::find(ids.begin(), ids.end(), id) != ids.end()) {\n                sp&lt;IBinder&gt; token = SurfaceComposerClient::getPhysicalDisplayToken(id);\n                if (token != nullptr)\n                    t.setDisplayLayerStack(token, LAYER_STACK);\n            }\n        }\n        t.setLayerStack(control, LAYER_STACK);\n    }\n\n    t.setLayer(control, 0x40000000)\n        .apply();\n\n    sp&lt;Surface&gt; s = control-&gt;getSurface();\n\n    // initialize opengl and egl\n    EGLDisplay display = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n    eglInitialize(display, nullptr, nullptr);\n    EGLConfig config = getEglConfig(display);\n    EGLSurface surface = eglCreateWindowSurface(display, config, s.get(), nullptr);\n    EGLContext context = eglCreateContext(display, config, nullptr, nullptr);\n    EGLint w, h;\n    eglQuerySurface(display, surface, EGL_WIDTH, &amp;w);\n    eglQuerySurface(display, surface, EGL_HEIGHT, &amp;h);\n\n    if (eglMakeCurrent(display, surface, surface, context) == EGL_FALSE)\n        return NO_INIT;\n\n    mDisplay = display;\n    mContext = context;\n    mSurface = surface;\n    mWidth = w;\n    mHeight = h;\n    mFlingerSurfaceControl = control;\n    mFlingerSurface = s;\n    mTargetInset = -1;\n\n    projectSceneToWindow();\n\n    // Register a display event receiver\n    mDisplayEventReceiver = std::make_unique&lt;DisplayEventReceiver&gt;();\n    status_t status = mDisplayEventReceiver-&gt;initCheck();\n    SLOGE_IF(status != NO_ERROR, \"Initialization of DisplayEventReceiver failed with status: %d\",\n            status);\n    mLooper-&gt;addFd(mDisplayEventReceiver-&gt;getFd(), 0, Looper::EVENT_INPUT,\n            new DisplayEventCallback(this), nullptr);\n\n    return NO_ERROR;\n}\n</code></pre> <ul> <li>\u83b7\u53d6\u5230SurfaceComposer</li> <li>\u521b\u5efaSurface</li> <li>\u521d\u59cb\u5316opengl \u548c egl</li> <li>\u76d1\u542cdisplay\u4e8b\u4ef6</li> </ul>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#threadloop_1","title":"threadLoop()","text":"<p>\u8fd9\u90e8\u5206\u53ef\u4ee5\u8bf4\u662f\u771f\u6b63\u7684\u52a8\u753b\u5165\u53e3\uff0cthreadLoop\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u5230\u5177\u4f53\u7684\u52a8\u753b\u5b9e\u73b0\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::threadLoop() {\n    bool result;\n    // We have no bootanimation file, so we use the stock android logo\n    // animation.\n    if (mZipFileName.isEmpty()) {\n        result = android();\n    } else {\n        result = movie();\n    }\n\n    mCallbacks-&gt;shutdown();\n    eglMakeCurrent(mDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n    eglDestroyContext(mDisplay, mContext);\n    eglDestroySurface(mDisplay, mSurface);\n    mFlingerSurface.clear();\n    mFlingerSurfaceControl.clear();\n    eglTerminate(mDisplay);\n    eglReleaseThread();\n    IPCThreadState::self()-&gt;stopProcess();\n    return result;\n}\n</code></pre> <p>\u5982\u679c\u7ebf\u7a0b\u8d77\u6765\u540e\uff0cmZipFileName\u8fd8\u6ca1\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u5219\u64ad\u653e\u201c\u539f\u751f\u52a8\u753b\u201d\uff0c\u5426\u5219\u5c31\u64ad\u653e\u81ea\u5b9a\u4e49\u7684\u52a8\u753b\u3002 \u64ad\u653e\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5904\u7406\u7684\u8d44\u6e90\u91ca\u653e\u4e0e\u6e05\u7406\u5de5\u4f5c\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_6","title":"\u64ad\u653e\u52a8\u753b","text":"","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_7","title":"\u539f\u751f\u52a8\u753b","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::android() {\n    SLOGD(\"%sAnimationShownTiming start time: %\" PRId64 \"ms\", mShuttingDown ? \"Shutdown\" : \"Boot\",\n            elapsedRealtime());\n    initTexture(&amp;mAndroid[0], mAssets, \"images/android-logo-mask.png\");\n    initTexture(&amp;mAndroid[1], mAssets, \"images/android-logo-shine.png\");\n\n    mCallbacks-&gt;init({});\n\n    // clear screen\n    glShadeModel(GL_FLAT);\n    glDisable(GL_DITHER);\n    glDisable(GL_SCISSOR_TEST);\n    glClearColor(0,0,0,1);\n    glClear(GL_COLOR_BUFFER_BIT);\n    eglSwapBuffers(mDisplay, mSurface);\n\n    glEnable(GL_TEXTURE_2D);\n    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);\n\n    // Blend state\n    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);\n\n    const nsecs_t startTime = systemTime();\n    do {\n        processDisplayEvents();\n        const GLint xc = (mWidth  - mAndroid[0].w) / 2;\n        const GLint yc = (mHeight - mAndroid[0].h) / 2;\n        const Rect updateRect(xc, yc, xc + mAndroid[0].w, yc + mAndroid[0].h);\n        glScissor(updateRect.left, mHeight - updateRect.bottom, updateRect.width(),\n                updateRect.height());\n\n        nsecs_t now = systemTime();\n        double time = now - startTime;\n        float t = 4.0f * float(time / us2ns(16667)) / mAndroid[1].w;\n        GLint offset = (1 - (t - floorf(t))) * mAndroid[1].w;\n        GLint x = xc - offset;\n\n        glDisable(GL_SCISSOR_TEST);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glEnable(GL_SCISSOR_TEST);\n        glDisable(GL_BLEND);\n        glBindTexture(GL_TEXTURE_2D, mAndroid[1].name);\n        glDrawTexiOES(x,                 yc, 0, mAndroid[1].w, mAndroid[1].h);\n        glDrawTexiOES(x + mAndroid[1].w, yc, 0, mAndroid[1].w, mAndroid[1].h);\n\n        glEnable(GL_BLEND);\n        glBindTexture(GL_TEXTURE_2D, mAndroid[0].name);\n        glDrawTexiOES(xc, yc, 0, mAndroid[0].w, mAndroid[0].h);\n\n        EGLBoolean res = eglSwapBuffers(mDisplay, mSurface);\n        if (res == EGL_FALSE)\n            break;\n\n        // 12fps: don't animate too fast to preserve CPU\n        const nsecs_t sleepTime = 83333 - ns2us(systemTime() - now);\n        if (sleepTime &gt; 0)\n            usleep(sleepTime);\n\n        checkExit();\n    } while (!exitPending());\n\n    glDeleteTextures(1, &amp;mAndroid[0].name);\n    glDeleteTextures(1, &amp;mAndroid[1].name);\n    return false;\n}\n\nstatus_t BootAnimation::initTexture(Texture* texture, AssetManager&amp; assets,\n        const char* name) {\n    Asset* asset = assets.open(name, Asset::ACCESS_BUFFER);\n    if (asset == nullptr)\n        return NO_INIT;\n\n    AndroidBitmapInfo bitmapInfo;\n    void* pixels = decodeImage(asset-&gt;getBuffer(false), asset-&gt;getLength(), &amp;bitmapInfo);\n    auto pixelDeleter = std::unique_ptr&lt;void, decltype(free)*&gt;{ pixels, free };\n\n    asset-&gt;close();\n    delete asset;\n\n    if (!pixels) {\n        return NO_INIT;\n    }\n\n    const int w = bitmapInfo.width;\n    const int h = bitmapInfo.height;\n\n    GLint crop[4] = { 0, h, w, -h };\n    texture-&gt;w = w;\n    texture-&gt;h = h;\n\n    glGenTextures(1, &amp;texture-&gt;name);\n    glBindTexture(GL_TEXTURE_2D, texture-&gt;name);\n\n    switch (bitmapInfo.format) {\n        case ANDROID_BITMAP_FORMAT_A_8:\n            glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, w, h, 0, GL_ALPHA,\n                    GL_UNSIGNED_BYTE, pixels);\n            break;\n        case ANDROID_BITMAP_FORMAT_RGBA_4444:\n            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA,\n                    GL_UNSIGNED_SHORT_4_4_4_4, pixels);\n            break;\n        case ANDROID_BITMAP_FORMAT_RGBA_8888:\n            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA,\n                    GL_UNSIGNED_BYTE, pixels);\n            break;\n        case ANDROID_BITMAP_FORMAT_RGB_565:\n            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, w, h, 0, GL_RGB,\n                    GL_UNSIGNED_SHORT_5_6_5, pixels);\n            break;\n        default:\n            break;\n    }\n\n    glTexParameteriv(GL_TEXTURE_2D, GL_TEXTURE_CROP_RECT_OES, crop);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n    return NO_ERROR;\n}\n</code></pre> <p>\u539f\u751f\u7684\u5f00\u673a\u52a8\u753b\u4f4d\u4e8eframeworks/base/core/res/assets/images\u76ee\u5f55\u4e0b\uff0c\u7531android-logo-shine.png\u548candroid-logo-mask.png\u4e24\u5f20png\u56fe\u7247\u7ec4\u6210\u3002\u719f\u6089framework-res\u7684\u540c\u5b66\u90fd\u77e5\u9053\u8fd9\u4e24\u5f20\u56fe\u7247\u5176\u5b9e\u662f\u7f16\u8bd1\u5230\u4e86framework-res.apk\u4e2d\u3002initTexture()\u51fd\u6570\u4f1a\u6839\u636e\u8fd9\u4e24\u5f20\u56fe\u7247\u6765\u5206\u522b\u521b\u5efa\u4e24\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u5e76\u5b58\u50a8\u5728Bootanimation\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u6570\u7ec4mAndroid\u4e2d\u3002\u901a\u8fc7\u6df7\u5408\u6e32\u67d3\u8fd9\u4e24\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f00\u673a\u52a8\u753b\uff0c\u8fd9\u662f\u901a\u8fc7\u4e2d\u95f4\u7684while\u5faa\u73af\u8bed\u53e5\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u56fe\u7247android-logo-mask.png\u7528\u4f5c\u52a8\u753b\u524d\u666f\uff0c\u5b83\u662f\u4e00\u4e2a\u9542\u7a7a\u7684\u201cANDROID\u201d\u56fe\u50cf\u3002\u56fe\u7247android-logo-shine.png\u7528\u4f5c\u52a8\u753b\u80cc\u666f\uff0c\u5b83\u7684\u4e2d\u95f4\u5305\u542b\u6709\u4e00\u4e2a\u9ad8\u4eae\u7684\u544845\u5ea6\u89d2\u7684\u6761\u7eb9\u3002\u5728\u6bcf\u4e00\u6b21\u5faa\u73af\u4e2d\uff0c\u56fe\u7247android-logo-shine.png\u88ab\u5212\u5206\u6210\u5de6\u53f3\u4e24\u90e8\u5206\u5185\u5bb9\u6765\u663e\u793a\u3002\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\u7684\u56fe\u50cf\u5bbd\u5ea6\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6b64\u6d88\u5f7c\u957f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u5f97\u56fe\u7247android-logo-shine.png\u4e2d\u95f4\u9ad8\u4eae\u7684\u6761\u7eb9\u597d\u50cf\u5728\u79fb\u52a8\u4e00\u6837\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6bcf\u4e00\u6b21\u5faa\u73af\u4e2d\uff0c\u56fe\u7247android-logo-shine.png\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u6e32\u67d3\uff0c\u800c\u4e14\u5b83\u7684\u4f4d\u7f6e\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\u3002\u7531\u4e8e\u5b83\u662f\u4e00\u4e2a\u9542\u7a7a\u7684\u201cANDROID\u201d\u56fe\u50cf\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684\u9542\u7a7a\u6765\u770b\u5230\u5b83\u80cc\u540e\u7684\u56fe\u7247android-logo-shine.png\u7684\u6761\u7eb9\u4e00\u95ea\u4e00\u95ea\u5730\u5212\u8fc7\u3002</p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_8","title":"\u81ea\u5b9a\u4e49\u52a8\u753b","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::movie() {\n    if (mAnimation == nullptr) {\n        mAnimation = loadAnimation(mZipFileName);\n    }\n\n    if (mAnimation == nullptr)\n        return false;\n\n    // mCallbacks-&gt;init() may get called recursively,\n    // this loop is needed to get the same results\n    for (const Animation::Part&amp; part : mAnimation-&gt;parts) {\n        if (part.animation != nullptr) {\n            mCallbacks-&gt;init(part.animation-&gt;parts);\n        }\n    }\n    mCallbacks-&gt;init(mAnimation-&gt;parts);\n\n    bool anyPartHasClock = false;\n    for (size_t i=0; i &lt; mAnimation-&gt;parts.size(); i++) {\n        if(validClock(mAnimation-&gt;parts[i])) {\n            anyPartHasClock = true;\n            break;\n        }\n    }\n    if (!anyPartHasClock) {\n        mClockEnabled = false;\n    }\n\n    // Check if npot textures are supported\n    mUseNpotTextures = false;\n    String8 gl_extensions;\n    const char* exts = reinterpret_cast&lt;const char*&gt;(glGetString(GL_EXTENSIONS));\n    if (!exts) {\n        glGetError();\n    } else {\n        gl_extensions.setTo(exts);\n        if ((gl_extensions.find(\"GL_ARB_texture_non_power_of_two\") != -1) ||\n            (gl_extensions.find(\"GL_OES_texture_npot\") != -1)) {\n            mUseNpotTextures = true;\n        }\n    }\n\n    // Blend required to draw time on top of animation frames.\n    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n    glShadeModel(GL_FLAT);\n    glDisable(GL_DITHER);\n    glDisable(GL_SCISSOR_TEST);\n    glDisable(GL_BLEND);\n\n    glBindTexture(GL_TEXTURE_2D, 0);\n    glEnable(GL_TEXTURE_2D);\n    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n    bool clockFontInitialized = false;\n    if (mClockEnabled) {\n        clockFontInitialized =\n            (initFont(&amp;mAnimation-&gt;clockFont, CLOCK_FONT_ASSET) == NO_ERROR);\n        mClockEnabled = clockFontInitialized;\n    }\n\n    initFont(&amp;mAnimation-&gt;progressFont, PROGRESS_FONT_ASSET);\n\n    if (mClockEnabled &amp;&amp; !updateIsTimeAccurate()) {\n        mTimeCheckThread = new TimeCheckThread(this);\n        mTimeCheckThread-&gt;run(\"BootAnimation::TimeCheckThread\", PRIORITY_NORMAL);\n    }\n\n    playAnimation(*mAnimation);\n\n    if (mTimeCheckThread != nullptr) {\n        mTimeCheckThread-&gt;requestExit();\n        mTimeCheckThread = nullptr;\n    }\n\n    if (clockFontInitialized) {\n        glDeleteTextures(1, &amp;mAnimation-&gt;clockFont.texture.name);\n    }\n\n    releaseAnimation(mAnimation);\n    mAnimation = nullptr;\n\n    return false;\n}\n</code></pre> <ul> <li>\u5982\u679c\u5728onFirstRef()\u7684\u6d41\u7a0b\u91cc\u8fd8\u6ca1\u6709\u52a0\u8f7d\u597d\u52a8\u753b\uff0c\u5219\u9700\u8981\u8c03\u7528loadAnimation\u52a0\u8f7d\u52a8\u753b\u3002\uff08\u53c2\u8003\u4e4b\u524d\u7684\u6d41\u7a0b\uff09</li> <li>\u8c03\u7528playAnimation()\u64ad\u653e\u52a8\u753b\u3002</li> <li>\u52a8\u753b\u64ad\u653e\u7ed3\u675f\u540e\uff0c\u91ca\u653e\u8d44\u6e90\u3002</li> </ul> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nbool BootAnimation::playAnimation(const Animation&amp; animation) {\n    const size_t pcount = animation.parts.size();\n    nsecs_t frameDuration = s2ns(1) / animation.fps;\n\n    SLOGD(\"%sAnimationShownTiming start time: %\" PRId64 \"ms\", mShuttingDown ? \"Shutdown\" : \"Boot\",\n            elapsedRealtime());\n\n    int fadedFramesCount = 0;\n    int lastDisplayedProgress = 0;\n    for (size_t i=0 ; i&lt;pcount ; i++) {\n        const Animation::Part&amp; part(animation.parts[i]);\n        const size_t fcount = part.frames.size();\n        glBindTexture(GL_TEXTURE_2D, 0);\n\n        // Handle animation package\n        if (part.animation != nullptr) {\n            playAnimation(*part.animation);\n            if (exitPending())\n                break;\n            continue; //to next part\n        }\n\n        // process the part not only while the count allows but also if already fading\n        for (int r=0 ; !part.count || r&lt;part.count || fadedFramesCount &gt; 0 ; r++) {\n            if (shouldStopPlayingPart(part, fadedFramesCount, lastDisplayedProgress)) break;\n\n            mCallbacks-&gt;playPart(i, part, r);\n\n            glClearColor(\n                    part.backgroundColor[0],\n                    part.backgroundColor[1],\n                    part.backgroundColor[2],\n                    1.0f);\n\n            // For the last animation, if we have progress indicator from\n            // the system, display it.\n            int currentProgress = android::base::GetIntProperty(PROGRESS_PROP_NAME, 0);\n            bool displayProgress = animation.progressEnabled &amp;&amp;\n                (i == (pcount -1)) &amp;&amp; currentProgress != 0;\n\n            for (size_t j=0 ; j&lt;fcount ; j++) {\n                if (shouldStopPlayingPart(part, fadedFramesCount, lastDisplayedProgress)) break;\n\n                processDisplayEvents();\n\n                const int animationX = (mWidth - animation.width) / 2;\n                const int animationY = (mHeight - animation.height) / 2;\n\n                const Animation::Frame&amp; frame(part.frames[j]);\n                nsecs_t lastFrame = systemTime();\n\n                if (r &gt; 0) {\n                    glBindTexture(GL_TEXTURE_2D, frame.tid);\n                } else {\n                    if (part.count != 1) {\n                        glGenTextures(1, &amp;frame.tid);\n                        glBindTexture(GL_TEXTURE_2D, frame.tid);\n                        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n                        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n                    }\n                    int w, h;\n                    initTexture(frame.map, &amp;w, &amp;h);\n                }\n\n                const int xc = animationX + frame.trimX;\n                const int yc = animationY + frame.trimY;\n                Region clearReg(Rect(mWidth, mHeight));\n                clearReg.subtractSelf(Rect(xc, yc, xc+frame.trimWidth, yc+frame.trimHeight));\n                if (!clearReg.isEmpty()) {\n                    Region::const_iterator head(clearReg.begin());\n                    Region::const_iterator tail(clearReg.end());\n                    glEnable(GL_SCISSOR_TEST);\n                    while (head != tail) {\n                        const Rect&amp; r2(*head++);\n                        glScissor(r2.left, mHeight - r2.bottom, r2.width(), r2.height());\n                        glClear(GL_COLOR_BUFFER_BIT);\n                    }\n                    glDisable(GL_SCISSOR_TEST);\n                }\n                // specify the y center as ceiling((mHeight - frame.trimHeight) / 2)\n                // which is equivalent to mHeight - (yc + frame.trimHeight)\n                const int frameDrawY = mHeight - (yc + frame.trimHeight);\n                glDrawTexiOES(xc, frameDrawY, 0, frame.trimWidth, frame.trimHeight);\n\n                // if the part hasn't been stopped yet then continue fading if necessary\n                if (exitPending() &amp;&amp; part.hasFadingPhase()) {\n                    fadeFrame(xc, frameDrawY, frame.trimWidth, frame.trimHeight, part,\n                              ++fadedFramesCount);\n                    if (fadedFramesCount &gt;= part.framesToFadeCount) {\n                        fadedFramesCount = MAX_FADED_FRAMES_COUNT; // no more fading\n                    }\n                }\n\n                if (mClockEnabled &amp;&amp; mTimeIsAccurate &amp;&amp; validClock(part)) {\n                    drawClock(animation.clockFont, part.clockPosX, part.clockPosY);\n                }\n\n                if (displayProgress) {\n                    int newProgress = android::base::GetIntProperty(PROGRESS_PROP_NAME, 0);\n                    // In case the new progress jumped suddenly, still show an\n                    // increment of 1.\n                    if (lastDisplayedProgress != 100) {\n                      // Artificially sleep 1/10th a second to slow down the animation.\n                      usleep(100000);\n                      if (lastDisplayedProgress &lt; newProgress) {\n                        lastDisplayedProgress++;\n                      }\n                    }\n                    // Put the progress percentage right below the animation.\n                    int posY = animation.height / 3;\n                    int posX = TEXT_CENTER_VALUE;\n                    drawProgress(lastDisplayedProgress, animation.progressFont, posX, posY);\n                }\n\n                handleViewport(frameDuration);\n\n                eglSwapBuffers(mDisplay, mSurface);\n\n                nsecs_t now = systemTime();\n                nsecs_t delay = frameDuration - (now - lastFrame);\n                //SLOGD(\"%lld, %lld\", ns2ms(now - lastFrame), ns2ms(delay));\n                lastFrame = now;\n\n                if (delay &gt; 0) {\n                    struct timespec spec;\n                    spec.tv_sec  = (now + delay) / 1000000000;\n                    spec.tv_nsec = (now + delay) % 1000000000;\n                    int err;\n                    do {\n                        err = clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &amp;spec, nullptr);\n                    } while (err&lt;0 &amp;&amp; errno == EINTR);\n                }\n\n                checkExit();\n            }\n\n            usleep(part.pause * ns2us(frameDuration));\n\n            if (exitPending() &amp;&amp; !part.count &amp;&amp; mCurrentInset &gt;= mTargetInset &amp;&amp;\n                !part.hasFadingPhase()) {\n                if (lastDisplayedProgress != 0 &amp;&amp; lastDisplayedProgress != 100) {\n                    android::base::SetProperty(PROGRESS_PROP_NAME, \"100\");\n                    continue;\n                }\n                break; // exit the infinite non-fading part when it has been played at least once\n            }\n        }\n    }\n\n    // Free textures created for looping parts now that the animation is done.\n    for (const Animation::Part&amp; part : animation.parts) {\n        if (part.count != 1) {\n            const size_t fcount = part.frames.size();\n            for (size_t j = 0; j &lt; fcount; j++) {\n                const Animation::Frame&amp; frame(part.frames[j]);\n                glDeleteTextures(1, &amp;frame.tid);\n            }\n        }\n    }\n\n    return true;\n}\n</code></pre> <ul> <li>const size_t pcount = animation.parts.size(); \u4e5f\u5c31\u662fdesc.txt\u91cc\u64ad\u653e\u7247\u6bb5\u7684\u6570\u91cf\uff1b\u6240\u4ee5for (size_t i=0 ; i&lt;pcount ; i++) \u5faa\u73af\u662f\u6709\u591a\u5c11\u4e2a\u64ad\u653e\u7247\u6bb5\u5c31\u5faa\u73af\u591a\u5c11\u6b21\u3002</li> <li>\u5728preloadZip()\u51fd\u6570\u91cc\u4f1a\u628a\u6bcf\u4e00\u4e2a\u64ad\u653e\u7247\u6bb5\u5305\u542b\u7684\u5e27\u6570\u5b58\u5728Part.frames\uff0c\u5982\uff1apart.frames.add(frame)\uff1b\u6240\u4ee5for (size_t j=0 ; j&lt;fcount ; j++) \u5faa\u73af\u662f\u5f53\u524d\u64ad\u653e\u6709\u591a\u5c11\u5f20\u56fe\u7247\u5c31\u5faa\u73af\u591a\u5c11\u6b21\u3002</li> <li>\u8c03\u7528shouldStopPlayingPart()\u5224\u65ad\u662f\u5426\u8981\u9000\u51fa\u52a8\u753b\u3002\uff08\u524d\u9762\u804a\u6807\u8bc6\u7b26\u548c\u52a8\u753b\u6de1\u51fa\u5e27\u7684\u65f6\u5019\u6709\u4ecb\u7ecd\uff09</li> <li>\u8c03\u7528initTexture()\u663e\u793a</li> <li>drawClock()\u663e\u793a\u65f6\u95f4</li> <li>drawProgress()\u662f\u5426\u663e\u793a\u8fdb\u5ea6\uff08Android12.0\u65b0\u589e\u529f\u80fd\uff09</li> <li>checkExit()\u68c0\u67e5\u662f\u5426\u9000\u51fa\u52a8\u753b</li> </ul>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_9","title":"\u9000\u51fa\u52a8\u753b","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\nstatic const char EXIT_PROP_NAME[] = \"service.bootanim.exit\";\n\nvoid BootAnimation::checkExit() {\n    // Allow surface flinger to gracefully request shutdown\n    char value[PROPERTY_VALUE_MAX];\n    property_get(EXIT_PROP_NAME, value, \"0\");\n    int exitnow = atoi(value);\n    if (exitnow) {\n        requestExit();\n    }\n}\n</code></pre> <p>\u68c0\u6d4bservice.bootanim.exit\u7684\u503c\uff0c\u5f53\u5c5e\u6027\u503c\u4e3a1\u7684\u65f6\u5019\uff0c\u5f00\u673a\u52a8\u753b\u4f1arequestExit()\uff0c\u4ece\u800c\u7ed3\u675f\u5f00\u673a\u52a8\u753b\u3002\u8fd9\u4e2a\u5c5e\u6027\u503c\u7684\u66f4\u6539\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <p></p>","tags":["Android","bootanimation"]},{"location":"android/bootanimation/bootanimation-intro/#_10","title":"\u603b\u7ed3","text":"<p>BootAnimation.cpp\u65b9\u6cd5\u4e3b\u8981\u4f5c\u7528\u5982\u4e0b:</p> <ul> <li>onFirstRef() : \u5efa\u7acbBootAnimation\u8fdb\u7a0b\u4e0esurfaceFlinger\u8fdb\u7a0b\u7684\u901a\u4fe1\uff0c\u53ca\u52a0\u8f7d\u8d44\u6e90</li> <li>preloadAnimation() : \u52a0\u8f7d\u5f00\u673a\u52a8\u753b\u8d44\u6e90\u6587\u4ef6</li> <li>findBootAnimationFile() : \u4e3b\u8981\u662f\u521d\u59cb\u5316 mZipFileName</li> <li>findBootAnimationFileInternal() : \u5c06mZipFileName\u5b58\u5165\u7d22\u5f15</li> <li>loadAnimation() : \u89e3\u6790\u8d44\u6e90\uff0c\u52a0\u8f7d\u52a8\u753b\u6587\u4ef6\uff0c\u8fd9\u91cc\u7684mZipFileName\u5c31\u662f\u5728readyToRun\u4e2d\u83b7\u53d6\u7684\u52a8\u753b\u6587\u4ef6\u4f4d\u7f6e</li> <li>parseAnimationDesc() : \u89e3\u6790\u8bfb\u53d6desc.txt\u6587\u4ef6\uff0c\u8bbe\u7f6e\u76f8\u5e94animation\u53c2\u6570</li> <li>parseColor() : \u89e3\u6790\u989c\u8272</li> <li>parseTextCoord() : \u89e3\u6790\u6587\u672c\u5750\u6807</li> <li>parsePosition() : \u89e3\u6790\u4f4d\u7f6e</li> <li>readFile() : \u8bfb\u53d6\u6587\u4ef6</li> <li>preloadZip() : \u7528\u4e8e\u56fe\u50cf\u7684\u9884\u52a0\u8f7d\u9636\u6bb5</li> <li>decodeImage() : \u89e3\u6790\u56fe\u50cf\u4fe1\u606f\uff0c\u5e76\u5b58\u50a8</li> <li>readyToRun() : \u5224\u65ad\u5f00\u673a\u52a8\u753b\u7684\u538b\u7f29\u5305\u662f\u5426\u5b58\u5728\uff0c\u4e3b\u8981\u662f\u5bf9opengl\u5de5\u4f5c\u73af\u5883\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316EGL\u73af\u5883\uff0c\u4e3a\u9001\u56fe\u505a\u51c6\u5907\u5de5\u4f5c\uff0c\u505a\u4e00\u4e2a\u52a8\u753b\u64ad\u653e\u7684\u9884\u64cd\u4f5c</li> <li>threadLoop() : \u663e\u793a\u5f00\u673a\u753b\u9762,\u6bcf\u4e2a\u7ebf\u7a0b\u7c7b\u90fd\u8981\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u91cc\u5b9a\u4e49thread\u7684\u6267\u884c\u5185\u5bb9\u3002\u8fd9\u4e2a\u51fd\u6570\u5982\u679c\u8fd4\u56detrue\uff0c\u4e14\u6ca1\u6709\u8c03\u7528requestExit()\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u518d\u6b21\u6267\u884c\uff1b\u5982\u679c\u8fd4\u56defalse\uff0c\u5219threadloop\u4e2d\u7684\u5185\u5bb9\u4ec5\u4ec5\u6267\u884c\u4e00\u6b21\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u9000\u51fa\u3002</li> <li>doThreadLoop() : \u8d85\u65f6\u68c0\u6d4b\u7ebf\u7a0b\u7684\u6267\u884c\u51fd\u6570</li> <li>playAnimation() : \u4f1a\u62ff\u5230 mAnimation\u7684\u56fe\u7247\uff0c\u8fd8\u6709desc.txt\u4e2d\u5b9a\u4e49\u7684\u56fe\u7247\u5206\u8fa8\u7387\uff0c\u5e27\u7387\u7b49\u4fe1\u606f\uff0c\u4f9d\u6b21\u64ad\u653epart0,part1\u4e2d\u56fe\u7247\uff0c\u5408\u6210Surface\uff0c\u7136\u540e\u8c03\u7528eglSwapBuffers(mDisplay, mSurface);\u52a8\u56fe\u7ed9\u663e\u793a\u8bbe\u5907\uff0e</li> <li>movie() : \u81ea\u5b9a\u4e49\u7684\u5f00\u673a\u52a8\u753b</li> <li>getEglConfig() : \u7ed8\u5236\u76ee\u6807framebuffer\u7684\u914d\u7f6e\u5c5e\u6027\u53ca\u663e\u793a\u7a97\u53e3\u5185\u5bb9</li> <li>limitSurfaceSize() : \u8be5\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u5c06width\u548cheight\u9650\u5236\u5728\u8bbe\u5907GPU\u652f\u6301\u7684\u8303\u56f4\u5185</li> <li>resizeSurface() : \u8c03\u6574\u5f00\u673a\u52a8\u753b\u7684surface\u5927\u5c0f</li> <li>releaseAnimation() : \u91ca\u653e\u52a8\u753b\u8d44\u6e90</li> <li>initFont() : \u52a0\u8f7d\u5b57\u4f53\u8d44\u6e90</li> <li>initTexture() : \u52a0\u8f7d\u7cfb\u7edf\u9ed8\u8ba4UI\u8d44\u6e90\uff0c\u901a\u8fc7decodeImage\u6765\u89e3\u7801\u56fe\u7247\uff0c\u5e76\u663e\u793a\u5728SurfaceLayer\u4e4b\u4e0a</li> <li>drawClock() : \u7ed8\u5236\u65f6\u949f\u8fdb\u884c\u5f53\u524d\u65f6\u95f4\u7684\u663e\u793a</li> <li>updateIsTimeAccurate() : \u8bb0\u5f55\u6700\u65b0\u4fee\u6539\u7684\u65f6\u95f4</li> <li>addTimeDirWatch() : \u589e\u52a0\u65f6\u95f4\u76d1\u6d4b</li> <li>handleEvent() : handle\u4e8b\u4ef6\uff0c\u66f4\u65b0UI\u64cd\u4f5c\u4fe1\u606f</li> <li>handleViewport() : \u8d1f\u8d23\u56fe\u8868\u89c6\u56fe\u4e2d\u53ef\u89c1\u7684\u5185\u5bb9</li> <li>processDisplayEvents() : \u5904\u7406\u663e\u793a\u4e8b\u4ef6</li> <li>checkExit() : \u68c0\u6d4b\u5f00\u673a\u52a8\u753b\u662f\u5426\u505c\u6b62</li> <li>binderDied() : \u5f53Binder\u673a\u5236\u7684\u5ba2\u6237\u7aef\u6b7b\u6389\uff0c\u5bfc\u81f4\u4e86\u8be5Binder\u7ed3\u675f\uff0c\u4f1a\u56de\u8c03\u6b64\u65b9\u6cd5(\u6b64\u5904\u4e00\u822c\u6307surfaceflinger\uff09</li> <li>DisplayEventCallback : \u8fdb\u884c\u4e8b\u4ef6\u7684\u5904\u7406\u4ee5\u53ca\u8c03\u7528surfaceComposerClient\u91cc\u7684getPhysicalDisplayToken()\u8fdb\u884c\u7269\u7406\u5c4f\u5e55\u7684\u663e\u793a</li> <li>TimeCheckThread : \u8d85\u65f6\u68c0\u6d4b\u673a\u5236\u7ebf\u7a0b</li> </ul> <p>\u6574\u4e2aBootAnimation\u7a0b\u5e8f\u7684\u6d41\u7a0b\u56fe\u4e0b\u56fe\uff1a</p> <p></p>","tags":["Android","bootanimation"]},{"location":"android/ams/launch-modes/","title":"Activity\u56db\u5927\u542f\u52a8\u6a21\u5f0f","text":"<p>Activity\u6709\u56db\u79cd\u542f\u52a8\u6a21\u5f0f\uff1a</p> <ul> <li> <p>Standard     \u6807\u51c6\u6a21\u5f0f</p> </li> <li> <p>SingleTop     \u6808\u9876\u590d\u7528\u6a21\u5f0f</p> </li> <li> <p>SingleTask     \u6808\u5185\u590d\u7528\u6a21\u5f0f</p> </li> <li> <p>SingleInstance     \u5355\u5b9e\u4f8b\u6a21\u5f0f</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#_1","title":"\u4efb\u52a1\u6808","text":"<p>\u5728\u5206\u522b\u63cf\u8ff0\u56db\u79cd\u542f\u52a8\u6a21\u5f0f\u7684\u7279\u6027\u524d\uff0c\u9700\u5148\u5f15\u51fa\u4e00\u4e2a\u6982\u5ff5\uff1a\u4efb\u52a1\u6808\uff08\u4e5f\u53ef\u4ee5\u53eb\u8fd4\u56de\u6808\uff09\uff0c\u5b83\u662f\u4e00\u79cd\u540e\u5165\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u6bcf\u4e2aActivity\u90fd\u4f9d\u9644\u7740\u4efb\u52a1\u6808\u8fd0\u884c\uff0c\u7cfb\u7edf\u5728\u521b\u5efaActivity\u524d\u4f1a\u5148\u521b\u5efa\u4e00\u4e2aActivityRecord\u5bf9\u8c61\uff0c\u7528\u4e8e\u6620\u5c04\u8be5Activity\uff0c\u5e76\u5c06ActivityRecord\u5bf9\u8c61\u538b\u5165\u4efb\u52a1\u6808\u4e2d\u5e76\u5904\u4e8e\u6808\u9876\uff0c\u7136\u540e\u518d\u901a\u8fc7ActivityRecord\u5bf9\u8c61\u751f\u6210Activity\u5b9e\u4f8b\u3002 \u6bcf\u5f53\u6211\u4eec\u6309\u4e0bBack\u952e\u6216\u8c03\u7528finish()\u65b9\u6cd5\u53bb\u9500\u6bc1\u4e00\u4e2aActivity\u65f6\uff0c\u5904\u4e8e\u6808\u9876\u7684Activity\u5c31\u4f1a\u51fa\u6808\uff0c\u524d\u4e00\u4e2a\u5165\u6808\u7684Activity\u5c31\u4f1a\u91cd\u65b0\u5904\u4e8e\u6808\u9876\u7684\u4f4d\u7f6e\u3002\u7cfb\u7edf\u603b\u4f1a\u663e\u793a\u5904\u4e8e\u6808\u9876\u7684Activity\u7ed9\u7528\u6237\u3002</p> <p>\u4e00\u90e8\u6b63\u5728\u8fd0\u884capp\u7684\u5b89\u5353\u624b\u673a\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u524d\u53f0\u4efb\u52a1\u6808\u548c0\u4e2a\u6216\u591a\u4e2a\u540e\u53f0\u4efb\u52a1\u6808\u3002\u5f53\u524d\u5728\u624b\u673a\u4e0a\u8fd0\u884c\u7684\u7a97\u53e3\uff0c\u4f1a\u6709\u4e00\u4e2a\u524d\u53f0\u7684\u4efb\u52a1\u6808\uff0c\u800c\u5904\u4e8e\u540e\u53f0\u7684\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u4e2a\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u540e\u53f0\u4efb\u52a1\u6808\u3002 \u5f53\u7528\u6237\u5c06\u540e\u53f0\u5e94\u7528\u91cd\u65b0\u5207\u6362\u81f3\u524d\u53f0\u65f6\uff0c\u4e5f\u4f34\u968f\u7740\u5c06\u5f53\u524d\u8fd0\u884c\u7684\u524d\u53f0\u4efb\u52a1\u6808\u79fb\u81f3\u540e\u53f0\uff0c\u5c06\u7cfb\u7edf\u4e0b\u4e00\u79d2\u60f3\u8981\u8fd0\u884c\u7684\u540e\u53f0\u4efb\u52a1\u6808\u5207\u6362\u81f3\u524d\u53f0\u8fd0\u884c\u7684\u8fc7\u7a0b\u3002</p> <p></p> <p>\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u7684\u65b9\u5f0f\u6307\u5b9aActivity\u60f3\u8981\u4f9d\u9644\u7684\u4efb\u52a1\u6808\uff1a</p> <pre><code>&lt;activity  \n    android:name=\"com.rtfsc.demo.MainActivity\"\n    android:taskAffinity=\"com.rtfsc.demo1\"\n&lt;/activity&gt;\n</code></pre> <p>\u901a\u8fc7\u5728AndroidManifest.xml\u6587\u4ef6\u4e2d\u8bbe\u7f6e\uff0c\u7ed9MainActivity\u8bbe\u7f6e\u60f3\u8981\u7684\u4efb\u52a1\u6808\u662f\u540d\u4e3a com.rtfsc.demo1 \u7684\u4efb\u52a1\u6808\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0cActivity\u9ed8\u8ba4\u6240\u9700\u4efb\u52a1\u6808\u7684\u540d\u5b57\u4e3a\u7a0b\u5e8f\u7684\u5305\u540d\uff0c\u5373\u9ed8\u8ba4\u4f1a\u5c06MainActivity\u538b\u5165\u4e0e\u7a0b\u5e8f\u5305\u540d\u76f8\u540c\u7684\u4efb\u52a1\u6808\u3002</p> <p>taskAffinity\u5c5e\u6027\u4e3b\u8981\u4e0e singleTask \u542f\u52a8\u6a21\u5f0f\u6216 allowTaskReparenting \u5c5e\u6027\u914d\u5bf9\u4f7f\u7528\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u6ca1\u6709\u610f\u4e49\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4efb\u52a1\u6808\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff08TaskRecord\uff09\uff0c\u4efb\u52a1\u6808\u4e4b\u95f4\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff0c\u4f46\u5b9e\u9645\u4e0a\u5982\u679c\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u662f\u540c\u4e00\u4e2a\u4efb\u52a1\u6808\u3002\u5728\u540e\u6587\u804a\u5230 SingleInstance \u542f\u52a8\u6a21\u5f0f\u65f6\uff0c\u518d\u4e3e\u4f8b\u8bf4\u660e\uff0c\u8fd9\u91cc\u5148\u7b80\u5355\u63d0\u4e00\u4e0b\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#standard","title":"Standard","text":"<p>\u6807\u51c6\u6a21\u5f0f\uff0c\u8fd9\u662f\u7cfb\u7edf\u9ed8\u8ba4\u7684Activity\u542f\u52a8\u6a21\u5f0f\uff0c\u6bcf\u4e00\u6b21\u542f\u52a8\u4e00\u4e2a\u65b0\u7684Standard\u6a21\u5f0f\u7684Activity\uff0c\u7cfb\u7edf\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Activity\u5b9e\u4f8b\uff0c\u65e0\u8bba\u5b83\u5728\u4efb\u52a1\u6808\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u5b9e\u4f8b\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u8c01\u542f\u52a8\u4e86\u8fd9\u4e2aActivity\uff0c\u90a3\u4e48\u8fd9\u4e2aActivity\u5c31\u8fd0\u884c\u5728\u542f\u52a8\u5b83\u7684\u90a3\u4e2aActivity\u6240\u5728\u7684\u4efb\u52a1\u6808\u4e2d\u3002**\u6bd4\u5982 Activity A \u542f\u52a8\u4e86 Activity B (B \u662f\u6807\u51c6\u6a21\u5f0f)\uff0c\u90a3\u4e48 B \u5c31\u4f1a\u8fdb\u5165 A \u6240\u5728\u7684\u4efb\u52a1\u6808\u4e2d\u3002**\u6bcf\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u5c31\u4f1a\u8d70\u4e00\u904dActivity\u7684\u7ecf\u5178\u751f\u547d\u5468\u671f\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singletop","title":"SingleTop","text":"<p>\u6808\u9876\u590d\u7528\u6a21\u5f0f\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5f53 Activity \u7684\u542f\u52a8\u6a21\u5f0f\u4e3a SingleTop \u65f6\uff0c\u5728\u542f\u52a8 Activity \u65f6\u5982\u679c\u53d1\u73b0\u4efb\u52a1\u6808\u7684\u6808\u9876\u5df2\u7ecf\u662f\u8be5 Activity \u7684\u5b9e\u4f8b\uff0c\u5219\u8ba4\u4e3a\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u8fd9\u4e2a\u5b9e\u4f8b\uff0c\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684Activity\u5b9e\u4f8b\u3002\u6b64\u65f6\uff0cActivity \u7684 onCreate\u3001onStart \u4e0d\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u53e6\u4e00\u4e2a\u65b9\u6cd5 onNewIntent \u4f1a\u88ab\u8c03\uff0c\u8c03\u7528\u5b8c onNewIntent \u540e\uff0c\u7d27\u63a5\u7740\u4f1a\u8c03\u7528 onResume \u65b9\u6cd5\u3002</p> <p>\u5982\u679c\u65b0 Activity \u7684\u5b9e\u4f8b\u5728\u6808\u5185\u5df2\u7ecf\u5b58\u5728\uff0c\u4f46\u4e0d\u4f4d\u4e8e\u6808\u9876\uff0c\u90a3\u4f9d\u7136\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a Activity \u5b9e\u4f8b\uff0c\u5e76\u653e\u5165\u6808\u9876\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u6b64\u65f6\u4efb\u52a1\u6808\u5185\u7684\u5b9e\u4f8b\u987a\u5e8f\u662fABC\uff0cC \u4f4d\u4e8e\u6808\u5e95\u4e14\u662f SingleTop \u6a21\u5f0f\uff0c\u6b64\u65f6\u518d\u6b21\u542f\u52a8\u4e00\u4e2a C\uff0c\u90a3\u4e48\u6b64\u65f6\u6808\u5185\u5b9e\u4f8b\u987a\u5e8f\u4e3aCABC\u3002</p> <p>\u4e0e Standard \u6807\u51c6\u6a21\u5f0f\u4e00\u6837\uff0c\u8c01\u542f\u52a8\u4e86 SingleTop \u6a21\u5f0f\u7684Activity\uff0c\u90a3\u4e48\u8fd9\u4e2aActivity\u5c31\u4f1a\u8fd0\u884c\u5728\u542f\u52a8\u5b83\u7684\u90a3\u4e2aActivity\u6240\u5728\u7684\u4efb\u52a1\u6808\u4e2d\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singletask","title":"SingleTask","text":"<p>\u6808\u5185\u590d\u7528\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e00\u79cd\u5355\u5b9e\u4f8b\u6a21\u5f0f\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u53ea\u8981 Activity \u5728\u4e00\u4e2a\u6808\u4e2d\u5b58\u5728\uff0c\u90a3\u4e48\u591a\u6b21\u542f\u52a8\u6b64 Activity \u90fd\u4e0d\u4f1a\u91cd\u65b0\u521b\u5efa\u5b9e\u4f8b\uff0c\u548c singleTop \u4e00\u6837\uff0c\u590d\u7528\u65f6\u7cfb\u7edf\u4f1a\u56de\u8c03\u5176 onNewIntent \u65b9\u6cd5\u3002</p> <p>\u4e00\u4e2a\u5177\u6709 SingleTask \u6a21\u5f0f\u7684 Activity \u5728\u8bf7\u6c42\u542f\u52a8\u540e\uff0c\u7cfb\u7edf\u4f1a\u5148\u5bfb\u627e\u662f\u5426\u6709\u8be5 Activity \u60f3\u8981\u7684\u4efb\u52a1\u6808\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u7cfb\u7edf\u5219\u4f1a\u5148\u521b\u5efa\u4e00\u4e2a\u8be5 Activity \u60f3\u8981\u7684\u4efb\u52a1\u6808\uff0c\u7136\u540e\u521b\u5efa\u8be5 Activity \u7684\u5b9e\u4f8b\uff0c\u5e76\u653e\u5165\u6808\u9876\u3002</p> <p>\u53cd\u4e4b\uff0c\u5982\u679c\u4e8b\u5148\u5df2\u7ecf\u6709\u4e86\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\u6808\uff0c\u7cfb\u7edf\u5219\u4f1a\u770b\u770b\u8be5\u4efb\u52a1\u6808\u662f\u5426\u5b58\u5728\u8be5 Activity \u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u8be5 Activity \u7684\u5b9e\u4f8b\uff0c\u7cfb\u7edf\u4e5f\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u5e76\u653e\u5165\u6808\u9876\u3002\u5982\u679c\u5df2\u7ecf\u6709\u8be5\u5b9e\u4f8b\uff0c\u7cfb\u7edf\u5219\u4f1a\u628a\u8be5\u5b9e\u4f8b\u8c03\u5230\u6808\u9876\uff0c\u5c06\u5728\u8be5\u5b9e\u4f8b\u4e4b\u4e0a\u7684\u5176\u4ed6 Activity \u51fa\u6808\uff08\u5982\u679c\u6709\uff09\uff0c\u5e76\u8c03\u7528\u8be5\u5b9e\u4f8b\u7684 onNewIntent \u65b9\u6cd5\u3002</p> <p></p> <p>\u56fe\u4e2d\uff0c\u53f3\u8fb9\u7684\u8be6\u7ec6\u8fc7\u7a0b\uff0c\u56e0\u4e3a B \u4f4d\u4e8e\u6808\u9876\u65f6\uff0cA \u6b64\u65f6\u4f4d\u4e8e\u540e\u53f0\uff0c\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\u6240\u4ee5\u5f53\u4ece B \u8df3\u5230 A \u65f6\uff0c\u4f1a\u4f9d\u6b21\u6267\u884c B.onPause()\u3001A.onNewIntent()\u3001A.onRestart()\u3001A.onStart()\u3001A.onResume()\u3001B.onStop()\u3001B.onDestroy()\u3002</p> <ul> <li> <p>\u5982\u679c\u5b9e\u4f8b\u5728\u6808\u9876\u88ab\u590d\u7528     \u81ea\u8eab\u6267\u884c\u7684\u751f\u547d\u5468\u671f\u662f\uff1aonPause()\u3001onNewInetnt()\u3001onResume()\u3002\u4e0e SingleTop \u542f\u52a8\u6a21\u5f0f\u76f8\u540c\u3002</p> </li> <li> <p>\u5982\u679c\u5b9e\u4f8b\u5728\u6808\u5185\u88ab\u590d\u7528     \u81ea\u8eab\u6267\u884c\u7684\u751f\u547d\u5468\u671f\u662f\uff1aonNewIntent()\u3001onRestart()\u3001onStart()\u3001onResume()\u3002\u56e0\u4e3a\u5b9e\u4f8b\u5904\u4e8e\u6808\u5185\uff0c\u4e0d\u5728\u524d\u53f0\uff0cActivity \u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u6240\u4ee5\u4f1a\u6709 onRestart()\uff0conStart() \u8fc7\u7a0b\u3002</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singleinstance","title":"SingleInstance","text":"<p>\u5355\u5b9e\u4f8b\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e00\u79cd\u52a0\u5f3a\u7684SingleTask\u6a21\u5f0f\uff0c\u5b83\u9664\u4e86\u5177\u6709 singleTask \u6a21\u5f0f\u7684\u6240\u6709\u7279\u6027\u5916\uff0c\u8fd8\u52a0\u5f3a\u4e86\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u5177\u6709\u6b64\u6a21\u5f0f\u7684 Activity \u53ea\u80fd\u5355\u72ec\u4f4d\u4e8e\u4e00\u4e2a\u4efb\u52a1\u6808\u4e2d\u3002</p> <p>\u540c\u65f6\uff0cSingleInstance \u6a21\u5f0f\u4e5f\u53ef\u4ee5\u4e0e taskAffinity \u914d\u5bf9\u4f7f\u7528\uff0c\u901a\u8fc7 taskAffinity \u6307\u5b9a Activity \u60f3\u8981\u4f9d\u9644\u7684\u4efb\u52a1\u6808\u540d\u5b57\u3002</p> <p>\u8003\u8651\u4e00\u79cd\u60c5\u51b5\uff0c\u4e24\u4e2aActivity\uff1aA\uff0cB \u90fd\u6307\u5b9a\u4e3a SingleInstance \u542f\u52a8\u6a21\u5f0f\uff0c\u5e76\u540c\u65f6\u6307\u5b9a A\uff0cB \u7684 taskAffinity \u4e3a com.rtfsc.demo1\uff0c\u5373\u4e3a\u5b83\u4eec\u6307\u5b9a\u76f8\u540c\u7684\u4efb\u52a1\u6808\u6808\u540d\u3002\u7ed3\u5408 SingleInstance \u7684\u7279\u6027\uff1a\u5177\u6709\u6b64\u6a21\u5f0f\u7684 Activity \u53ea\u80fd\u5355\u72ec\u4f4d\u4e8e\u4e00\u4e2a\u4efb\u52a1\u6808\u4e2d\u3002\u90a3\u4e48\u8fd9\u4e24\u4e2a A\uff0cB \u6307\u5b9a\u4e86\u76f8\u540c\u4efb\u52a1\u6808\u540d\u5b57\u7684 Activity \uff0c\u540c\u65f6\u6253\u5f00\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u5462\uff0c\u5b83\u4eec\u4f1a\u4e89\u540c\u4e00\u4e2a\u4efb\u52a1\u6808\u5417\uff1f\u5b83\u4eec\u4f1a\u56e0\u4e3a\u4e89\u540c\u4e00\u4e2a\u4efb\u52a1\u6808\u800c\u6740\u6389\u5bf9\u65b9\u4ee5\u7ef4\u62a4\u81ea\u5df1\u7684\u201d\u72ec\u7acb\u5b58\u5728\u201c\u7279\u6027\u5417\uff1f</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\u770b\u770b\uff0c\u8bbe\u7f6e AndroidManifest.xml\uff1a</p> <pre><code>&lt;activity  \n    android:name=\"com.rtfsc.demo.MainActivity\"  \n    android:exported=\"true\"      \n    android:launchMode=\"singleTop\"  \n    android:taskAffinity=\"com.rtfsc.demo1\"&gt;  \n&lt;/activity&gt;  \n\n&lt;activity  \n    android:name=\"com.rtfsc.demo.Main2Activity\"  \n    android:exported=\"true\"  \n    android:launchMode=\"singleTop\"  \n    android:taskAffinity=\"com.rtfsc.demo1\"&gt;  \n&lt;/activity&gt;\n</code></pre> <p>\u5148\u6253\u5f00 MainActivity\uff0c\u518d\u901a\u8fc7 MainActivity \u6253\u5f00 MainActivity2\uff0c\u770b\u770b\u4efb\u52a1\u6808\u7684\u60c5\u51b5\u3002</p> <p>adb shell dumpsys activity</p> <pre><code>        #2 Task=80 type=standard mode=fullscreen override-mode=undefined requested-bounds=[0,0][0,0] bounds=[0,0][1368,3192]\n         #1 ActivityRecord{d02f4e u0 com.rtfsc.demo/.Main2Activity t80} type=standard mode=fullscreen override-mode=undefined requested-bounds=[0,0][0,0] bounds=[0,0][1368,3192]\n          #0 6a1cc8b com.rtfsc.demo/com.rtfsc.demo.Main2Activity type=standard mode=fullscreen override-mode=undefined requested-bounds=[0,0][0,0] bounds=[0,0][1368,3192]\n         #0 ActivityRecord{671bf34 u0 com.rtfsc.demo/.MainActivity t80} type=standard mode=fullscreen override-mode=undefined requested-bounds=[0,0][0,0] bounds=[0,0][1368,3192]\n          #0 b6edafd com.rtfsc.demo/com.rtfsc.demo.MainActivity type=standard mode=fullscreen override-mode=undefined requested-bounds=[0,0][0,0] bounds=[0,0][1368,3192]\n</code></pre> <p>\u53ea\u770b\u4efb\u52a1\u6808\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136 MainActivity \u4e0eMain2Activity \u6709\u76f8\u540c\u7684\u4efb\u52a1\u6808\u540d\uff0c\u4f46\u7cfb\u7edf\u5b9e\u9645\u4e0a\u8fd8\u662f\u4e3a\u5b83\u4eec\u521b\u5efa\u4e86\u4e0d\u540c\u7684\u4efb\u52a1\u6808\u5b9e\u4f8b\uff0c\u5e76\u5206\u522b\u5c06\u5b83\u4eec\u5355\u72ec\u653e\u5230\u5404\u81ea taskAffinity \u6307\u5b9a\u7684\u4efb\u52a1\u6808\u4e2d\uff0c\u4e24\u8005\u4e92\u4e0d\u51b2\u7a81\u3002</p> <p>\u56de\u987e\u4e00\u4e0b\u4e4b\u524d\u4ecb\u7ecd\u4efb\u52a1\u6808\u65f6\u63d0\u5230\u7684\uff1a\u4efb\u52a1\u6808\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff08TaskRecord\uff09\uff0c\u4efb\u52a1\u6808\u4e4b\u95f4\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff0c\u4f46\u5b9e\u9645\u4e0a\u5982\u679c\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e0d\u662f\u540c\u4e00\u4e2a\u4efb\u52a1\u6808\u3002</p> <p>\u6240\u4ee5\uff0c\u4e0a\u9762\u7684\u95ee\u9898\u663e\u7136\u6709\u4e86\u7b54\u6848\uff0c\u90a3\u5c31\u662f\u4e0d\u4f1a\u3002</p> <p>\u8fd9\u91ccdump\u51fa\u6765\u7684\u8ddf\u6211\u73b0\u8c61\u4e2d\u7684\u4e0d\u4e00\u6837\uff0c\u6000\u7591\u53ef\u80fd\u662f\u624b\u673a\u5382\u6539\u4e86\u3002 \u540e\u7eed\u7528aosp rom\u8bd5\u8bd5</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#_2","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li> <p>standard \u6807\u51c6\u6a21\u5f0f     \u9ed8\u8ba4\u7684\u542f\u52a8\u6a21\u5f0f\uff0c\u9002\u7528\u4e8e\u5e94\u7528\u7684\u5927\u591a\u6570\u573a\u666f\u3002</p> </li> <li> <p>singleTop \u6808\u9876\u590d\u7528\u6a21\u5f0f     \u4e3a\u4e86\u6ee1\u8db3\u7279\u5b9a\u529f\u80fd\uff0c\u4e0d\u9700\u8981\u91cd\u590d\u521b\u5efa\u663e\u793a\u7684\u9875\u9762\uff0c\u6bd4\u5982\u767b\u5f55\u9875\u9762\uff0c\u4ece\u901a\u77e5\u680f\u6d88\u606f\u6253\u5f00\u7684\u9875\u9762\u3002</p> </li> <li> <p>singleTask \u6808\u5185\u590d\u7528\u6a21\u5f0f     \u9002\u7528\u4e8e\u91cd\u590d\u521b\u5efa\u6bd4\u8f83\u8017\u6027\u80fd\u7684\u9875\u9762\uff0c\u6bd4\u5982\u4e3b\u9875\u9762\uff0cWebView\u9875\u9762\uff08WebView\u662f\u4e00\u4e2a\u5f88\u8017\u6027\u80fd\u7684\u7ec4\u4ef6\uff09\u3002</p> </li> <li> <p>singleInstance \u5355\u5b9e\u4f8b\u6a21\u5f0f     \u8fd9\u4e2a\u542f\u52a8\u6a21\u5f0f\u6211\u4eec\u4e00\u822c\u7528\u4e0d\u5230\uff0c\u7cfb\u7edf\u7ea7\u5e94\u7528\u4f7f\u7528\u8be5\u6a21\u5f0f\u6bd4\u8f83\u591a\u3002\u6bd4\u5982\u9501\u5c4f\u9875\u9762\uff0c\u6765\u7535\u663e\u793a\u9875\u9762\u7b49\u3002</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#flags","title":"\u542f\u52a8\u6a21\u5f0f\u76f8\u5173\u7684Flags","text":"<p>Activity\u7684\u542f\u52a8\u6a21\u5f0f\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7 AndroidManifest.xml \u6587\u4ef6\u6765\u6307\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728 Intent \u4e2d\u6307\u5b9a FLAGS \u6765\u8bbe\u7f6e Activity \u542f\u52a8\u65f6\u7684\u884c\u4e3a\u3002</p> <pre><code>Intent intent = Intent();\nintent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\nmContext.startActivity(intent);\n</code></pre> <p>Intent \u4e2d\u7684\u6807\u5fd7\u4f4d\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u5c31\u4ecb\u7ecd\u51e0\u4e2a\u4e0e\u542f\u52a8\u6a21\u5f0f\u76f8\u5173\u7684\u5e38\u7528flags\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#flag_activity_single_top","title":"FLAG_ACTIVITY_SINGLE_TOP","text":"<p>\u76f8\u5f53\u4e8e\u7ed9 Activity \u8bbe\u7f6e\u4e86 singleTop \u7684\u542f\u52a8\u6a21\u5f0f\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#flag_activity_new_task","title":"FLAG_ACTIVITY_NEW_TASK","text":"<p>\u7ed9 Intent \u8bbe\u7f6e\u8fd9\u4e2a flag \u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff0c \u5373\u5c06\u542f\u52a8\u7684 Activity \u6240\u60f3\u8981\u4f9d\u9644\u7684\u4efb\u52a1\u6808\u662f\u5426\u5b58\u5728\uff1a</p> <ul> <li>\u5b58\u5728</li> </ul> <p>\u5219\u6309\u8be5 Activity \u5728 AndroidManifest.xml \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u542f\u52a8\u6a21\u5f0f\u8fdb\u884c\u4e0b\u4e00\u6b65\u3002</p> <p>\u82e5\u5728 xml \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u542f\u52a8\u6a21\u5f0f\u4e3a standard\uff0c\u90a3\u4e48\u6bcf\u6b21\u6253\u5f00\u90fd\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a Activity \u5b9e\u4f8b\u3002</p> <p>\u82e5\u5728 xml \u6587\u4ef6\u4e2d\u8bbe\u7f6e singleTask\uff0c\u5219\u4f1a\u5224\u65ad\u4efb\u52a1\u6808\u4e2d\u662f\u5426\u6709\u8be5 Activity \u6765\u51b3\u5b9a\u662f\u5426\u590d\u7528\uff0c\u6709\u7684\u8bdd\u5219\u4f1a\u76f4\u63a5\u590d\u7528\uff0c\u5e76\u8c03\u7528\u5176 onNewIntent() \u65b9\u6cd5\u3002\u82e5\u6ca1\u6709\u5219\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u3002</p> <p>\u5176\u4ed6\u7684\u542f\u52a8\u6a21\u5f0f\u540c\u7406\uff0c\u6309\u7740\u4e0a\u9762\u8ba8\u8bba\u7684\u542f\u52a8\u6a21\u5f0f\u7279\u6027\u6765\u7406\u89e3\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u82e5\u5728 xml \u6587\u4ef6\u4e2d\u6ca1\u6709\u8bbe\u7f6e launchMode\uff0c\u5c31\u6309\u9ed8\u8ba4\u7684 standard \u542f\u52a8\u6a21\u5f0f\u542f\u52a8\uff0c\u6bcf\u6b21\u90fd\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Activity \u5b9e\u4f8b\u3002</p> <ul> <li>\u4e0d\u5b58\u5728</li> </ul> <p>\u5982\u679c\u5f85\u542f\u52a8\u7684 Activity \u8bbe\u7f6e\u4e86 taskAffinity \u503c\uff0c\u5219\u4f1a\u5148\u521b\u5efa\u4e00\u4e2a taskAffinity \u4e3a\u540d\u7684\u4efb\u52a1\u6808\uff0c\u7136\u540e\u6309\u5f85\u542f\u52a8 Activity \u8bbe\u7f6e\u7684\u542f\u52a8\u6a21\u5f0f\u542f\u52a8\u8be5 Activity\u3002 \u82e5\u6ca1\u6709\u8bbe\u7f6e taskAffinity \u5c5e\u6027\uff0c\u5219\u6309\u7a0b\u5e8f\u7684\u5305\u540d\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u6808\uff0c\u540c\u6837\u4ee5 Activity \u8bbe\u7f6e\u7684\u542f\u52a8\u6a21\u5f0f\u542f\u52a8 Activity\u3002</p> <p>\u603b\u7ed3\u5730\u8bf4\uff0cFLAG_ACTIVITY_NEW_TASK \u4f1a\u5e2e Activity \u7ba1\u7406\u5176\u4efb\u52a1\u6808\uff1a\u5982\u679c\u6240\u9700\u4efb\u52a1\u6808\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u5219\u8bbe\u7f6e\u8fd9\u4e2a FLAG \u6807\u5fd7\u4f4d\u4e0d\u4f1a\u6709\u5176\u4ed6\u4efb\u4f55\u6548\u679c\u3002\u5982\u679c\u6240\u9700\u4efb\u52a1\u6808\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u6839\u636e\u6240\u9700\u4efb\u52a1\u6808\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u6808\u3002 \u4efb\u52a1\u6808\u540d\u53ef\u4ee5\u901a\u8fc7 taskAffinity \u5c5e\u6027\u6307\u5b9a\u3002</p> <p>\u5b89\u5353\u4e2d\u6211\u4eec\u7ecf\u5e38\u901a\u8fc7 Context \u5bf9\u8c61\u6765\u542f\u52a8 Activity\uff0c\u5b83\u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u91cc\u9762\u5305\u542b\u4e86\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5404\u79cd\u914d\u7f6e\u4fe1\u606f\u3002\u8fd9\u4e2a\u4e0a\u4e0b\u6587\uff0c\u53ef\u4ee5\u662f\u4e00\u6574\u4e2a\u5e94\u7528\uff08Application\uff09\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u9875\u9762\uff08Activity\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u670d\u52a1\uff08Service\uff09\u3002</p> <p>\u6240\u4ee5\uff0cContext \u8fd9\u4e2a\u5bf9\u8c61\u6709\u4e09\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f Application Context\uff0cService Context\uff0cActivity Context\u3002\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684 context \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528\u6765\u542f\u52a8 Activity\u3002</p> <p>Activity Context \u542f\u52a8 Activity \u5c31\u4e0d\u7528\u8bf4\u4e86\uff0c\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5b83\u3002\u4f46\u662f\u4f60\u8bd5\u8fc7\u7528Application Context \u548c Service Context \u53bb\u542f\u52a8\u4e00\u4e2a Activity \u5417\uff1f</p> <p>\u4e00\u4e9b\u540c\u5b66\u53ef\u80fd\u8bd5\u8fc7\uff0c\u7b2c\u4e00\u6b21\u4f7f\u7528\u9664 Activity Context \u4ee5\u5916\u7684 Context \u5bf9\u8c61\u6765\u542f\u52a8\u9875\u9762\u65f6\uff0c\u90fd\u4f1a\u9047\u4e0a\u4e00\u4e2a\u62a5\u9519:</p> <pre><code>\"Calling startActivities() from outside of an Activity \"\n                    + \" context requires the FLAG_ACTIVITY_NEW_TASK flag on first Intent.\"\n                    + \" Is this really what you want?\"\n</code></pre> <p>\u8fd9\u662f\u56e0\u4e3a\u53ea\u6709 Activity \u624d\u6709\u4efb\u52a1\u6808\u7684\u6982\u5ff5\uff0cApplication \u548c Service \u662f\u6ca1\u6709\u4efb\u52a1\u6808\u7684\u6982\u5ff5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528 Application Context \u6216 Service Context \u53bb\u542f\u52a8\u4e00\u4e2aActivity\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u663e\u793a\u5730\u52a0\u4e0a FLAG_ACTIVITY_NEW_TASK \u8fd9\u4e2a\u6807\u5fd7\u4f4d\uff0c\u7cfb\u7edf\u624d\u4f1a\u7ed9\u8fd9\u4e2a Activity \u521b\u5efa\u4efb\u52a1\u6808\u5e76\u542f\u52a8\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#flag_activity_clear_top","title":"FLAG_ACTIVITY_CLEAR_TOP","text":"<p>\u5982\u679c\u8981\u542f\u52a8\u7684 Activity \u5df2\u7ecf\u5728\u5f53\u524d\u4efb\u52a1\u4e2d\u8fd0\u884c\uff0c\u5219\u4e0d\u4f1a\u542f\u52a8\u8be5 Activity \u7684\u65b0\u5b9e\u4f8b\uff0c\u800c\u662f\u4f1a\u9500\u6bc1\u4f4d\u4e8e\u5b83\u4e4b\u4e0a\u7684\u6240\u6709\u5176\u4ed6 Activity\uff0c\u5e76\u901a\u8fc7 onNewIntent() \u5c06\u6b64 intent \u4f20\u9001\u7ed9\u5b83\u7684\u5df2\u6062\u590d\u5b9e\u4f8b\uff08\u73b0\u5728\u4f4d\u4e8e\u5806\u6808\u9876\u90e8\uff09\u3002</p> <p>\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7ecf\u5e38\u4e0e FLAG_ACTIVITY_NEW_TASK \u7ed3\u5408\u4f7f\u7528\uff0c\u5b83\u4fe9\u7ed3\u5408\u4f7f\u7528\u65f6\u7684\u6548\u679c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u540c\u65f6\u8bbe\u7f6e FLAG_ACTIVITY_NEW_TASK \u548c FLAG_ACTIVITY_CLEAR_TOP \u6807\u5fd7\u4f4d\u65f6\u7684\u6548\u679c\u3002\u6b63\u6240\u8c13\uff0c\u542c\u541b\u4e00\u5e2d\u8bdd\uff0c\u5982\u542c\u4e00\u5e2d\u8bdd\uff0c\u54c8\u54c8\uff0c\u4e0d\u8fc7\u6211\u6ca1\u5728\u5f00\u73a9\u7b11\uff0c\u5b83\u4fe9\u7ed3\u5408\u4f7f\u7528\u7684\u6548\u679c\uff0c\u771f\u7684\u662f\u5982\u4e0a\u6240\u8bf4\u7684\u90a3\u6837\uff01</p> <p>\u4e0d\u8fc7\uff0c\u5982\u679c\u88ab\u542f\u52a8\u7684 Activity \u91c7\u7528 standard \u6a21\u5f0f\u542f\u52a8\uff0c\u90a3\u4e48\u5b83\u8fde\u540c\u5b83\u4e4b\u4e0a\u7684 Activity \u90fd\u8981\u51fa\u6808\uff0c\u7cfb\u7edf\u4f1a\u521b\u5efa\u65b0\u7684 Activity \u5b9e\u4f8b\u5e76\u538b\u5165\u6808\u9876\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#_3","title":"\u603b\u7ed3","text":"","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#standard_1","title":"standard","text":"<ul> <li>\u6b64\u6a21\u5f0f\u4e3aactivity\u7684\u9ed8\u8ba4\u542f\u52a8\u6a21\u5f0f\uff0c\u5373\u5728\u4e0d\u6307\u5b9aactivity\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684activity\u7686\u662f\u5728\u6b64\u6a21\u5f0f\u4e0b\u3002</li> <li>\u5728standard\u6a21\u5f0f\u4e0b\uff0c\u542f\u52a8\u4e00\u4e2a\u65b0\u7684activity\uff0c\u5b83\u5c31\u4f1a\u8fdb\u5165\u4efb\u52a1\u6808\uff0c\u5e76\u5904\u4e8e\u6808\u9876\u7684\u4f4d\u7f6e\u3002</li> <li>\u5982\u56fe\u6240\u793a\uff0c\u6bcf\u5f53\u6709\u65b0\u7684activity\u5efa\u7acb\uff0c\u5b83\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u5e76\u5904\u4e8e\u6808\u9876\u3002</li> <li>\u5165\u6808\u65f6\uff0cActivity01\uff0cActivity02,Activity03\uff0c\u4f9d\u6b21\u5165\u6808\uff1b\u51fa\u6808\u65f6\uff0c\u5904\u4e8e\u6808\u9876\u7684Activity03\u5148\u51fa\u6808\uff0c\u4e4b\u540e\u662fActivity02\uff0c\u6700\u540e\u662fActivity01\u3002</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singletop_1","title":"singleTop","text":"<p>\u6b64\u6a21\u5f0f\u4e0estandard\u7c7b\u4f3c\uff0c</p> <ul> <li> <p>\u533a\u522b\u662f\u542f\u52a8\u4e86\u4e00\u4e2aActivity\u5904\u4e8e\u6808\u9876\u65f6\uff0c\u518d\u6b21\u542f\u52a8\u65f6\uff0c\u4e0d\u518d\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff1b     \u5982\u679c\u542f\u52a8\u7684Activity\u6ca1\u6709\u4f4d\u4e8e\u6808\u9876\u65f6\uff0c\u5219\u5728\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u4f4d\u4e8e\u6808\u9876\u3002</p> </li> <li> <p>\u5982\u56fe\u6240\u793a:\u5f53\u524d\u6808\u9876\u4e3aActivity03\uff0c     \u82e5\u542f\u52a8\u7684\u9875\u9762\u4ecd\u4e3aActivity03\uff0c\u5219\u590d\u7528Activity03\uff1b      \u82e5\u542f\u52a8\u7684\u9875\u9762\u4e3a\u4e0d\u662f\u6808\u9876\u7684Activity02\uff0c\u5219\u65b0\u5efaActivity04\u4f5c\u4e3a\u6808\u9876\u3002</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singletask_1","title":"singleTask","text":"<ul> <li>\u6b64\u6a21\u5f0f\u4e0b\uff0c\u6574\u4e2aActivity\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002</li> <li>\u6bcf\u6b21\u542f\u52a8Activity\u7684\u6a21\u5f0f\u65f6\uff0c\u7cfb\u7edf\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\u8be5\u5b9e\u4f8b\uff0c\u82e5\u5b58\u5728\u8be5\u5b9e\u4f8b\uff0c\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5c06\u8be5Activity\u4e4b\u4e0a\u7684\u6240\u6709Activity\u51fa\u6808\u3002     \u5982\u679c\u6ca1\u6709\uff0c\u5219\u81ea\u52a8\u751f\u6210\u65b0\u7684\u5b9e\u4f8b\u3002</li> <li>\u5982\u56fe\uff1a\u4f9d\u6b21\u5165\u6808Activity01\uff0cActivity02\uff0cActivity03\uff1b\u60f3\u8981\u518d\u6b21\u542f\u52a8Activity02\uff0c\u5219\u590d\u7528Activity02\uff0c\u5e76\u5c06Activity03\u79fb\u9664\u8be5\u6808\u3002</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/launch-modes/#singleinstance_1","title":"singleInstance","text":"<ul> <li>\u6b64\u6a21\u5f0f\u4e0b\uff0cActivity\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5176\u4e2d\uff0c\u6700\u5927\u7684\u4e0d\u540c\u662fActivity\u4f1a\u542f\u52a8i\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u6808\u3002</li> <li>\u82e5\u542f\u52a8\u7684Activity\u4e0d\u5b58\u5728\uff0c\u7cfb\u7edf\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u6808\uff0c\u518d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Activity\u5b9e\u4f8b\uff0c\u5e76\u628a\u8be5Activity\u52a0\u5165\u6808\u9876\uff1b     \u82e5\u542f\u52a8\u7684Activity\u5df2\u7ecf\u5b58\u5728\uff0c\u7cfb\u7edf\u4f1a\u628a\u8be5Activity\u6240\u5728\u7684\u4efb\u52a1\u6808\u8f6c\u5230\u524d\u53f0\uff0c\u4ece\u800c\u4f7f\u8be5Activity\u663e\u73b0\u51fa\u6765\u3002</li> </ul> <p>Activity\u56db\u79cd\u542f\u52a8\u6a21\u5f0f\u8be6\u89e3 activity 4\u79cd\u542f\u52a8\u6a21\u5f0f Activity \u7684\u56db\u79cd\u542f\u52a8\u6a21\u5f0f</p>","tags":["Android","AMS","\u542f\u52a8\u6a21\u5f0f"]},{"location":"android/ams/client_transaction/","title":"Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406","text":"<p>Tip</p> <p>\u57fa\u4e8e android-14.0.0_r45</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#_1","title":"\u80cc\u666f","text":"<p>Activity\u542f\u52a8\u6846\u67b6\u975e\u5e38\u590d\u6742\uff0c\u770b\u4e86\u7f51\u4e0a\u5f88\u591a\u535a\u5ba2\u57fa\u672c\u4e0a\u90fd\u662f\u7528\u4e00\u7bc7\u6587\u7ae0\u8bb2\u5b8cactivity\u7684\u542f\u52a8\u6d41\u7a0b\u3002\u8fd9\u6837\u5f88\u591a\u7ec6\u8282\u5176\u5b9e\u90fd\u6ca1\u8bb2\u5230\uff0c\u800c\u4e14\u7bc7\u5e45\u8fc7\u957f\u5b66\u4e60\u8d77\u6765\u4e5f\u5f88\u5403\u529b\u3002</p> <p>\u5728  Activity\u6846\u67b6 \u7cfb\u5217\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u70b9\u4e00\u70b9\u7684\u62c6\u5206\u8bb2\u89e3\u8ddf Activity\u542f\u52a8\u6709\u4e2a\u7684\u77e5\u8bc6\u70b9\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5148\u4ece\u4e00\u4e2a\u6700\u7b80\u5355\u7684 Activity\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u8bb2\u8d77\uff0c\u4e3a\u540e\u7eed\u7684Activity\u542f\u52a8\u6d41\u7a0b\u6253\u4e0b\u57fa\u7840\u3002</p> <p>\u751f\u547d\u5468\u671f\u7ba1\u7406\u662fgoogle\u5728Android 9\u624d\u5f15\u5165\u7684\u8bbe\u8ba1\uff0c\u5728Android 9\u4e4b\u524d\uff0cactivity \u5b58\u5728\u751f\u547d\u5468\u671f\u7684\u6982\u5ff5\uff0c\u4f46\u5e76\u65e0\u751f\u547d\u5468\u671f\u7ba1\u7406\u8fd9\u4e00\u8bf4\u6cd5\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u751f\u547d\u5468\u671f\u7684\u5207\u6362\u4ee5\u53ca\u76f8\u5173\u4e1a\u52a1\u7684\u7ba1\u7406\uff0cgoogle\u91c7\u7528\u4e86\u4e8b\u52a1\u7684\u601d\u60f3\uff0c\u5c06\u751f\u547d\u5468\u671f\u62bd\u8c61\u4e3a\u5ba2\u6237\u7aef\u4e8b\u52a1\u7684\u4e00\u90e8\u5206\u6765\u7edf\u4e00\u7ba1\u7406\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#_2","title":"\u7c7b\u56fe","text":"<p>\u4e0b\u56fe\u662f\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406\u5b8c\u6574\u7684\u7c7b\u56fe\uff1a</p> plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>75de8252-aa9a-4cd7-8007-cec4289e9fd9</pre> mermaid <pre><code>\nclassDiagram\n\ndirection LR\n\nclass ActivityConfigurationChangeItem\n\nclass ActivityLifecycleItem\n\nclass ActivityRelaunchItem\n\nclass ActivityResultItem\n\nclass ActivityTransactionItem\n\nclass BaseClientRequest {\n\n&lt;&lt;Interface&gt;&gt;\n\n\n\n}\n\nclass ClientTransaction\n\nclass ClientTransactionItem\n\nclass ConfigurationChangeItem\n\nclass DestroyActivityItem\n\nclass EnterPipRequestedItem\n\nclass LaunchActivityItem\n\nclass MoveToDisplayItem\n\nclass NewIntentItem\n\nclass ObjectPoolItem {\n\n&lt;&lt;Interface&gt;&gt;\n\n\n\n}\n\nclass PauseActivityItem\n\nclass PipStateTransactionItem\n\nclass RefreshCallbackItem\n\nclass ResumeActivityItem\n\nclass StartActivityItem\n\nclass StopActivityItem\n\nclass TopResumedActivityChangeItem\n\nclass TransferSplashScreenViewStateItem\n\n\n\nActivityConfigurationChangeItem --&gt; ActivityTransactionItem\n\nActivityLifecycleItem --&gt; ActivityTransactionItem\n\nActivityRelaunchItem --&gt; ActivityTransactionItem\n\nActivityResultItem --&gt; ActivityTransactionItem\n\nActivityTransactionItem --&gt; ClientTransactionItem\n\nBaseClientRequest --&gt; ObjectPoolItem\n\nClientTransaction ..&gt; ObjectPoolItem\n\nClientTransactionItem ..&gt; BaseClientRequest\n\nConfigurationChangeItem --&gt; ClientTransactionItem\n\nDestroyActivityItem --&gt; ActivityLifecycleItem\n\nEnterPipRequestedItem --&gt; ActivityTransactionItem\n\nLaunchActivityItem --&gt; ClientTransactionItem\n\nMoveToDisplayItem --&gt; ActivityTransactionItem\n\nNewIntentItem --&gt; ActivityTransactionItem\n\nPauseActivityItem --&gt; ActivityLifecycleItem\n\nPipStateTransactionItem --&gt; ActivityTransactionItem\n\nRefreshCallbackItem --&gt; ActivityTransactionItem\n\nResumeActivityItem --&gt; ActivityLifecycleItem\n\nStartActivityItem --&gt; ActivityLifecycleItem\n\nStopActivityItem --&gt; ActivityLifecycleItem\n\nTopResumedActivityChangeItem --&gt; ActivityTransactionItem\n\nTransferSplashScreenViewStateItem --&gt; ActivityTransactionItem\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#activitylifecycleitem","title":"ActivityLifecycleItem\u7c7b\u56fe","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>bf17c059-2fd1-4afd-8c62-637a1d5992f4</pre> mermaid <pre><code>classDiagram\n\ndirection LR\n\nclass ActivityLifecycleItem {\n\n+ int ON_CREATE\n\n+ int ON_STOP\n\n+ int ON_PAUSE\n\n+ int PRE_ON_CREATE\n\n+ int UNDEFINED\n\n+ int ON_DESTROY\n\n+ int ON_RESUME\n\n+ int ON_RESTART\n\n+ int ON_START\n\n+ recycle() void\n\n+ getTargetState() int\n\n}\n\nclass ActivityTransactionItem {\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n~ getActivityClientRecord(ClientTransactionHandler, IBinder) ActivityClientRecord\n\n}\n\nclass BaseClientRequest {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n}\n\nclass ClientTransaction {\n\n- IApplicationThread mClient\n\n- IBinder mActivityToken\n\n- ActivityLifecycleItem mLifecycleStateRequest\n\n+ Creator~ClientTransaction~ CREATOR\n\n- List~ClientTransactionItem~ mActivityCallbacks\n\n+ setLifecycleStateRequest(ActivityLifecycleItem) void\n\n+ writeToParcel(Parcel, int) void\n\n+ getLifecycleStateRequest() ActivityLifecycleItem\n\n+ obtain(IApplicationThread, IBinder) ClientTransaction\n\n+ dump(String, PrintWriter) void\n\n+ getClient() IApplicationThread\n\n+ addCallback(ClientTransactionItem) void\n\n+ preExecute(ClientTransactionHandler) void\n\n+ recycle() void\n\n+ getCallbacks() List~ClientTransactionItem~\n\n+ equals(Object) boolean\n\n+ hashCode() int\n\n+ schedule() void\n\n+ getActivityToken() IBinder\n\n+ describeContents() int\n\n}\n\nclass ClientTransactionItem {\n\n~ shouldHaveDefinedPreExecutionState() boolean\n\n+ getPostExecutionState() int\n\n+ describeContents() int\n\n}\n\nclass DestroyActivityItem {\n\n- boolean mFinished\n\n- int mConfigChanges\n\n+ Creator~DestroyActivityItem~ CREATOR\n\n+ equals(Object) boolean\n\n+ toString() String\n\n+ recycle() void\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ obtain(boolean, int) DestroyActivityItem\n\n+ hashCode() int\n\n+ writeToParcel(Parcel, int) void\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ getTargetState() int\n\n}\n\nclass ObjectPoolItem {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ recycle() void\n\n}\n\nclass PauseActivityItem {\n\n+ Creator~PauseActivityItem~ CREATOR\n\n- String TAG\n\n- boolean mFinished\n\n- boolean mUserLeaving\n\n- boolean mDontReport\n\n- boolean mAutoEnteringPip\n\n- int mConfigChanges\n\n+ writeToParcel(Parcel, int) void\n\n+ recycle() void\n\n+ getTargetState() int\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ obtain(boolean, boolean, int, boolean, boolean) PauseActivityItem\n\n+ equals(Object) boolean\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ hashCode() int\n\n+ toString() String\n\n+ obtain() PauseActivityItem\n\n}\n\nclass ResumeActivityItem {\n\n- boolean mUpdateProcState\n\n- boolean mShouldSendCompatFakeFocus\n\n- String TAG\n\n- int mProcState\n\n- boolean mIsForward\n\n+ Creator~ResumeActivityItem~ CREATOR\n\n+ obtain(int, boolean, boolean) ResumeActivityItem\n\n+ toString() String\n\n+ equals(Object) boolean\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ hashCode() int\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ getTargetState() int\n\n+ obtain(boolean, boolean) ResumeActivityItem\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ writeToParcel(Parcel, int) void\n\n+ recycle() void\n\n}\n\nclass StartActivityItem {\n\n- String TAG\n\n- ActivityOptions mActivityOptions\n\n+ Creator~StartActivityItem~ CREATOR\n\n+ recycle() void\n\n+ equals(Object) boolean\n\n+ writeToParcel(Parcel, int) void\n\n+ obtain(ActivityOptions) StartActivityItem\n\n+ toString() String\n\n+ getTargetState() int\n\n+ hashCode() int\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n}\n\nclass StopActivityItem {\n\n- int mConfigChanges\n\n+ Creator~StopActivityItem~ CREATOR\n\n- String TAG\n\n+ equals(Object) boolean\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ writeToParcel(Parcel, int) void\n\n+ getTargetState() int\n\n+ hashCode() int\n\n+ toString() String\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ obtain(int) StopActivityItem\n\n+ recycle() void\n\n}\n\n\n\nActivityLifecycleItem --&gt; ActivityTransactionItem\n\nActivityTransactionItem --&gt; ClientTransactionItem\n\nBaseClientRequest --&gt; ObjectPoolItem\n\nClientTransaction ..&gt; ObjectPoolItem\n\nClientTransactionItem ..&gt; BaseClientRequest\n\nDestroyActivityItem --&gt; ActivityLifecycleItem\n\nPauseActivityItem --&gt; ActivityLifecycleItem\n\nResumeActivityItem --&gt; ActivityLifecycleItem\n\nStartActivityItem --&gt; ActivityLifecycleItem\n\nStopActivityItem --&gt; ActivityLifecycleItem</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#activitytransactionitem","title":"ActivityTransactionItem\u7c7b\u56fe","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>0e2728d1-8fdd-4f81-92be-378536655ad1</pre> mermaid <pre><code>classDiagram\n\ndirection LR\n\nclass ActivityConfigurationChangeItem {\n\n- Configuration mConfiguration\n\n+ Creator~ActivityConfigurationChangeItem~ CREATOR\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ hashCode() int\n\n+ toString() String\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ obtain(Configuration) ActivityConfigurationChangeItem\n\n+ recycle() void\n\n}\n\nclass ActivityLifecycleItem {\n\n+ int ON_CREATE\n\n+ int ON_PAUSE\n\n+ int ON_DESTROY\n\n+ int ON_RESTART\n\n+ int ON_STOP\n\n+ int ON_START\n\n+ int UNDEFINED\n\n+ int PRE_ON_CREATE\n\n+ int ON_RESUME\n\n+ recycle() void\n\n+ getTargetState() int\n\n}\n\nclass ActivityRelaunchItem {\n\n- int mConfigChanges\n\n- List~ReferrerIntent~ mPendingNewIntents\n\n- List~ResultInfo~ mPendingResults\n\n- ActivityClientRecord mActivityClientRecord\n\n- boolean mPreserveWindow\n\n- String TAG\n\n+ Creator~ActivityRelaunchItem~ CREATOR\n\n- MergedConfiguration mConfig\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ recycle() void\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ obtain(List~ResultInfo~, List~ReferrerIntent~, int, MergedConfiguration, boolean) ActivityRelaunchItem\n\n+ hashCode() int\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ toString() String\n\n}\n\nclass ActivityResultItem {\n\n+ long CALL_ACTIVITY_RESULT_BEFORE_RESUME\n\n- List~ResultInfo~ mResultInfoList\n\n+ Creator~ActivityResultItem~ CREATOR\n\n+ obtain(List~ResultInfo~) ActivityResultItem\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ toString() String\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ recycle() void\n\n+ getPostExecutionState() int\n\n+ hashCode() int\n\n}\n\nclass ActivityTransactionItem {\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n~ getActivityClientRecord(ClientTransactionHandler, IBinder) ActivityClientRecord\n\n}\n\nclass BaseClientRequest {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n}\n\nclass ClientTransaction {\n\n- List~ClientTransactionItem~ mActivityCallbacks\n\n- ActivityLifecycleItem mLifecycleStateRequest\n\n- IBinder mActivityToken\n\n- IApplicationThread mClient\n\n+ Creator~ClientTransaction~ CREATOR\n\n+ hashCode() int\n\n+ obtain(IApplicationThread, IBinder) ClientTransaction\n\n+ getLifecycleStateRequest() ActivityLifecycleItem\n\n+ dump(String, PrintWriter) void\n\n+ getActivityToken() IBinder\n\n+ equals(Object) boolean\n\n+ getCallbacks() List~ClientTransactionItem~\n\n+ setLifecycleStateRequest(ActivityLifecycleItem) void\n\n+ preExecute(ClientTransactionHandler) void\n\n+ getClient() IApplicationThread\n\n+ schedule() void\n\n+ writeToParcel(Parcel, int) void\n\n+ describeContents() int\n\n+ recycle() void\n\n+ addCallback(ClientTransactionItem) void\n\n}\n\nclass ClientTransactionItem {\n\n+ describeContents() int\n\n~ shouldHaveDefinedPreExecutionState() boolean\n\n+ getPostExecutionState() int\n\n}\n\nclass EnterPipRequestedItem {\n\n+ Creator~EnterPipRequestedItem~ CREATOR\n\n+ obtain() EnterPipRequestedItem\n\n+ recycle() void\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ equals(Object) boolean\n\n+ toString() String\n\n+ writeToParcel(Parcel, int) void\n\n}\n\nclass MoveToDisplayItem {\n\n- int mTargetDisplayId\n\n- Configuration mConfiguration\n\n+ Creator~MoveToDisplayItem~ CREATOR\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ hashCode() int\n\n+ toString() String\n\n+ obtain(int, Configuration) MoveToDisplayItem\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ recycle() void\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n}\n\nclass NewIntentItem {\n\n- List~ReferrerIntent~ mIntents\n\n- boolean mResume\n\n+ Creator~NewIntentItem~ CREATOR\n\n+ obtain(List~ReferrerIntent~, boolean) NewIntentItem\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ hashCode() int\n\n+ getPostExecutionState() int\n\n+ writeToParcel(Parcel, int) void\n\n+ toString() String\n\n+ equals(Object) boolean\n\n+ recycle() void\n\n}\n\nclass ObjectPoolItem {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ recycle() void\n\n}\n\nclass PipStateTransactionItem {\n\n+ Creator~PipStateTransactionItem~ CREATOR\n\n- PictureInPictureUiState mPipState\n\n+ obtain(PictureInPictureUiState) PipStateTransactionItem\n\n+ recycle() void\n\n+ toString() String\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n}\n\nclass RefreshCallbackItem {\n\n+ Creator~RefreshCallbackItem~ CREATOR\n\n- int mPostExecutionState\n\n+ getPostExecutionState() int\n\n+ writeToParcel(Parcel, int) void\n\n~ shouldHaveDefinedPreExecutionState() boolean\n\n+ recycle() void\n\n+ toString() String\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ equals(Object) boolean\n\n+ hashCode() int\n\n+ obtain(int) RefreshCallbackItem\n\n}\n\nclass TopResumedActivityChangeItem {\n\n- boolean mOnTop\n\n+ Creator~TopResumedActivityChangeItem~ CREATOR\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ toString() String\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ hashCode() int\n\n+ obtain(boolean) TopResumedActivityChangeItem\n\n+ recycle() void\n\n}\n\nclass TransferSplashScreenViewStateItem {\n\n- SplashScreenViewParcelable mSplashScreenViewParcelable\n\n- SurfaceControl mStartingWindowLeash\n\n+ Creator~TransferSplashScreenViewStateItem~ CREATOR\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n+ writeToParcel(Parcel, int) void\n\n+ recycle() void\n\n+ obtain(SplashScreenViewParcelable, SurfaceControl) TransferSplashScreenViewStateItem\n\n}\n\n\n\nActivityConfigurationChangeItem --&gt; ActivityTransactionItem\n\nActivityLifecycleItem --&gt; ActivityTransactionItem\n\nActivityRelaunchItem --&gt; ActivityTransactionItem\n\nActivityResultItem --&gt; ActivityTransactionItem\n\nActivityTransactionItem --&gt; ClientTransactionItem\n\nBaseClientRequest --&gt; ObjectPoolItem\n\nClientTransaction ..&gt; ObjectPoolItem\n\nClientTransactionItem ..&gt; BaseClientRequest\n\nEnterPipRequestedItem --&gt; ActivityTransactionItem\n\nMoveToDisplayItem --&gt; ActivityTransactionItem\n\nNewIntentItem --&gt; ActivityTransactionItem\n\nPipStateTransactionItem --&gt; ActivityTransactionItem\n\nRefreshCallbackItem --&gt; ActivityTransactionItem\n\nTopResumedActivityChangeItem --&gt; ActivityTransactionItem\n\nTransferSplashScreenViewStateItem --&gt; ActivityTransactionItem</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionitem","title":"ClientTransactionItem\u7c7b\u56fe","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>34136965-4658-4a1d-ae3a-a4818ebfb38f</pre> mermaid <pre><code>classDiagram\n\ndirection LR\n\nclass ActivityTransactionItem {\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n~ getActivityClientRecord(ClientTransactionHandler, IBinder) ActivityClientRecord\n\n+ execute(ClientTransactionHandler, ActivityClientRecord, PendingTransactionActions) void\n\n}\n\nclass BaseClientRequest {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n}\n\nclass ClientTransaction {\n\n- IBinder mActivityToken\n\n- IApplicationThread mClient\n\n+ Creator~ClientTransaction~ CREATOR\n\n- List~ClientTransactionItem~ mActivityCallbacks\n\n- ActivityLifecycleItem mLifecycleStateRequest\n\n+ hashCode() int\n\n+ preExecute(ClientTransactionHandler) void\n\n+ getLifecycleStateRequest() ActivityLifecycleItem\n\n+ obtain(IApplicationThread, IBinder) ClientTransaction\n\n+ equals(Object) boolean\n\n+ schedule() void\n\n+ writeToParcel(Parcel, int) void\n\n+ describeContents() int\n\n+ addCallback(ClientTransactionItem) void\n\n+ recycle() void\n\n+ dump(String, PrintWriter) void\n\n+ getCallbacks() List~ClientTransactionItem~\n\n+ getActivityToken() IBinder\n\n+ setLifecycleStateRequest(ActivityLifecycleItem) void\n\n+ getClient() IApplicationThread\n\n}\n\nclass ClientTransactionItem {\n\n+ getPostExecutionState() int\n\n+ describeContents() int\n\n~ shouldHaveDefinedPreExecutionState() boolean\n\n}\n\nclass ConfigurationChangeItem {\n\n- Configuration mConfiguration\n\n- int mDeviceId\n\n+ Creator~ConfigurationChangeItem~ CREATOR\n\n+ recycle() void\n\n+ writeToParcel(Parcel, int) void\n\n+ equals(Object) boolean\n\n+ toString() String\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n+ obtain(Configuration, int) ConfigurationChangeItem\n\n+ hashCode() int\n\n}\n\nclass LaunchActivityItem {\n\n- Configuration mOverrideConfig\n\n+ Creator~LaunchActivityItem~ CREATOR\n\n- List~ResultInfo~ mPendingResults\n\n- int mDeviceId\n\n- Bundle mState\n\n- ActivityOptions mActivityOptions\n\n- boolean mIsForward\n\n- IBinder mAssistToken\n\n- String mReferrer\n\n- IVoiceInteractor mVoiceInteractor\n\n- Configuration mCurConfig\n\n- int mIdent\n\n- IBinder mTaskFragmentToken\n\n- IBinder mShareableActivityToken\n\n- boolean mLaunchedFromBubble\n\n- IActivityClientController mActivityClientController\n\n- ProfilerInfo mProfilerInfo\n\n- Intent mIntent\n\n- ActivityInfo mInfo\n\n- PersistableBundle mPersistentState\n\n- List~ReferrerIntent~ mPendingNewIntents\n\n- int mProcState\n\n- setValues(LaunchActivityItem, Intent, int, ActivityInfo, Configuration, Configuration, int, String, IVoiceInteractor, int, Bundle, PersistableBundle, List~ResultInfo~, List~ReferrerIntent~, ActivityOptions, boolean, ProfilerInfo, IBinder, IActivityClientController, IBinder, boolean, IBinder) void\n\n+ equals(Object) boolean\n\n+ execute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n- areBundlesEqualRoughly(BaseBundle, BaseBundle) boolean\n\n+ hashCode() int\n\n+ obtain(Intent, int, ActivityInfo, Configuration, Configuration, int, String, IVoiceInteractor, int, Bundle, PersistableBundle, List~ResultInfo~, List~ReferrerIntent~, ActivityOptions, boolean, ProfilerInfo, IBinder, IActivityClientController, IBinder, boolean, IBinder) LaunchActivityItem\n\n+ writeToParcel(Parcel, int) void\n\n- activityInfoEqual(ActivityInfo) boolean\n\n+ recycle() void\n\n+ toString() String\n\n+ preExecute(ClientTransactionHandler, IBinder) void\n\n- getRoughBundleHashCode(BaseBundle) int\n\n+ postExecute(ClientTransactionHandler, IBinder, PendingTransactionActions) void\n\n}\n\nclass ObjectPoolItem {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ recycle() void\n\n}\n\n\n\nActivityTransactionItem --&gt; ClientTransactionItem\n\nBaseClientRequest --&gt; ObjectPoolItem\n\nClientTransaction ..&gt; ObjectPoolItem\n\nClientTransactionItem ..&gt; BaseClientRequest\n\nConfigurationChangeItem --&gt; ClientTransactionItem\n\nLaunchActivityItem --&gt; ClientTransactionItem</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#_3","title":"\u5c0f\u7ed3","text":"","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#activitylifecycleitem_1","title":"ActivityLifecycleItem","text":"<p>ActivityLifecycleItem \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8868\u793a\u4e00\u4e2a\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u3002\u5b83\u7684\u5b50\u7c7b\u7528\u4e8e\u5177\u4f53\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\uff0c\u4f8b\u5982 ResumeActivityItem\u3001PauseActivityItem\u3001StopActivityItem \u7b49\u3002</p> <p>\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5728 ClientTransaction \u4e2d\u88ab\u4f7f\u7528\uff0c\u7528\u4e8e\u63cf\u8ff0\u67d0\u4e2a Activity \u751f\u547d\u5468\u671f\u7684\u53d8\u5316\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#activitytransactionitem_1","title":"ActivityTransactionItem","text":"<p>ActivityTransactionItem \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8868\u793a\u4e00\u4e2a Activity \u4e8b\u52a1\u9879\u3002\u8fd9\u7c7b\u4e8b\u52a1\u9879\u53ef\u4ee5\u6d89\u53ca\u5230 Activity \u7684\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u5efa\u3001\u914d\u7f6e\u53d8\u5316\u7b49\u64cd\u4f5c\u3002\u5b83\u662f ClientTransactionItem \u7684\u5b50\u7c7b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionitem_1","title":"ClientTransactionItem","text":"<p>ClientTransactionItem \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8868\u793a\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\uff08\u5e94\u7528\u8fdb\u7a0b\uff09\u5904\u7406\u7684\u4e8b\u52a1\u9879\u3002\u5b83\u662f ClientTransaction \u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u6784\u4ef6\uff0c\u5177\u4f53\u7684\u5b50\u7c7b\u5305\u62ec ActivityLifecycleItem \u548c ActivityTransactionItem\u3002\u8fd9\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u65b9\u6cd5\u6765\u6267\u884c\u548c\u5904\u7406\u4e8b\u52a1\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransaction","title":"ClientTransaction","text":"<p>ClientTransaction \u662f\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u5ba2\u6237\u7aef\uff08\u5e94\u7528\u8fdb\u7a0b\uff09\u4e8b\u52a1\u7684\u7c7b\u3002\u5b83\u5305\u542b\u4e86\u4e00\u7cfb\u5217 ClientTransactionItem\uff0c\u8fd9\u4e9b ClientTransactionItem \u63cf\u8ff0\u4e86\u5e94\u7528\u9700\u8981\u6267\u884c\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u6216\u751f\u547d\u5468\u671f\u53d8\u5316\u3002 </p> <p>ClientTransaction \u7c7b\u901a\u8fc7 Binder \u4f20\u8f93\u5230\u5e94\u7528\u8fdb\u7a0b\u4e2d\u7684 ClientTransactionHandler \u8fdb\u884c\u5904\u7406\u3002</p> <pre><code>/**\n * \u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u6d88\u606f\u7684\u5bb9\u5668\uff0c\u8fd9\u4e9b\u6d88\u606f\u53ef\u80fd\u4f1a\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002\n * \u5305\u62ec\u4e00\u4e2a\u56de\u8c03\u5217\u8868\u548c\u4e00\u4e2a\u6700\u7ec8\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n *\n * @see com.android.server.am.ClientLifecycleManager\n * @see ClientTransactionItem\n * @see ActivityLifecycleItem\n * @hide\n */\npublic class ClientTransaction implements Parcelable, ObjectPoolItem {\n\n    /** \u53d1\u9001\u5230\u5ba2\u6237\u7aef\u7684\u5355\u4e2a\u56de\u8c03\u5217\u8868\u3002 */\n    @UnsupportedAppUsage\n    private List&lt;ClientTransactionItem&gt; mActivityCallbacks;\n\n    /**\n     * \u4e8b\u52a1\u6267\u884c\u540e\u5ba2\u6237\u7aef\u6d3b\u52a8\u5e94\u5904\u4e8e\u7684\u6700\u7ec8\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n     */\n    private ActivityLifecycleItem mLifecycleStateRequest;\n\n    /** \u76ee\u6807\u5ba2\u6237\u7aef\u3002 */\n    private IApplicationThread mClient;\n\n    /** \u76ee\u6807\u5ba2\u6237\u7aef\u6d3b\u52a8\u3002\u5982\u679c\u6574\u4e2a\u4e8b\u52a1\u76ee\u6807\u662f\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u80fd\u4e3a\u7a7a\u3002 */\n    private IBinder mActivityToken;\n\n    /** \n     * \u83b7\u53d6\u4e8b\u52a1\u7684\u76ee\u6807\u5ba2\u6237\u7aef\u3002 \n     * @return \u76ee\u6807\u5ba2\u6237\u7aef\u3002\n     */\n    public IApplicationThread getClient() {\n        return mClient;\n    }\n\n    /**\n     * \u5c06\u6d88\u606f\u6dfb\u52a0\u5230\u56de\u8c03\u5e8f\u5217\u7684\u672b\u5c3e\u3002\n     * @param activityCallback \u53ef\u4ee5\u5305\u542b\u751f\u547d\u5468\u671f\u8bf7\u6c42/\u56de\u8c03\u7684\u5355\u4e2a\u6d88\u606f\u3002\n     */\n    public void addCallback(ClientTransactionItem activityCallback) {\n        if (mActivityCallbacks == null) {\n            mActivityCallbacks = new ArrayList&lt;&gt;();\n        }\n        mActivityCallbacks.add(activityCallback);\n    }\n\n    /** \n     * \u83b7\u53d6\u56de\u8c03\u5217\u8868\u3002 \n     * @return \u56de\u8c03\u5217\u8868\u3002\n     */\n    @Nullable\n    @VisibleForTesting\n    @UnsupportedAppUsage\n    public List&lt;ClientTransactionItem&gt; getCallbacks() {\n        return mActivityCallbacks;\n    }\n\n    /** \n     * \u83b7\u53d6\u76ee\u6807\u6d3b\u52a8\u3002 \n     * @return \u76ee\u6807\u6d3b\u52a8\u6807\u8bc6\u7b26\u3002\n     */\n    @Nullable\n    @UnsupportedAppUsage\n    public IBinder getActivityToken() {\n        return mActivityToken;\n    }\n\n    /** \n     * \u83b7\u53d6\u76ee\u6807\u72b6\u6001\u7684\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002 \n     * @return \u751f\u547d\u5468\u671f\u72b6\u6001\u8bf7\u6c42\u3002\n     */\n    @VisibleForTesting\n    @UnsupportedAppUsage\n    public ActivityLifecycleItem getLifecycleStateRequest() {\n        return mLifecycleStateRequest;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4e8b\u52a1\u6267\u884c\u540e\u5ba2\u6237\u7aef\u5e94\u5904\u4e8e\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n     * @param stateRequest \u7528\u6b63\u786e\u53c2\u6570\u521d\u59cb\u5316\u7684\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002\n     */\n    public void setLifecycleStateRequest(ActivityLifecycleItem stateRequest) {\n        mLifecycleStateRequest = stateRequest;\n    }\n\n    /**\n     * \u5728\u4e8b\u52a1\u8c03\u5ea6\u5230\u5ba2\u6237\u7aef\u65f6\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002\n     * @param clientTransactionHandler \u5728\u5ba2\u6237\u7aef\u6267\u884c\u4e8b\u52a1\u9879\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n     */\n    public void preExecute(ClientTransactionHandler clientTransactionHandler) {\n        if (mActivityCallbacks != null) {\n            final int size = mActivityCallbacks.size();\n            for (int i = 0; i &lt; size; ++i) {\n                mActivityCallbacks.get(i).preExecute(clientTransactionHandler, mActivityToken);\n            }\n        }\n        if (mLifecycleStateRequest != null) {\n            mLifecycleStateRequest.preExecute(clientTransactionHandler, mActivityToken);\n        }\n    }\n\n    /**\n     * \u5728\u521d\u59cb\u5316\u540e\u8c03\u5ea6\u4e8b\u52a1\u3002\u5b83\u5c06\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u6240\u6709\u7684\u4e2a\u522b\u90e8\u5206\u5c06\u6309\u4ee5\u4e0b\u987a\u5e8f\u5e94\u7528\uff1a\n     * 1. \u5ba2\u6237\u7aef\u8c03\u7528 {@link #preExecute(ClientTransactionHandler)}\uff0c\u89e6\u53d1\u5728\u8c03\u5ea6\u4e8b\u52a1\u4e4b\u524d\u9700\u8981\u5b8c\u6210\u7684\u6240\u6709\u5de5\u4f5c\u3002\n     * 2. \u8c03\u5ea6\u4e8b\u52a1\u6d88\u606f\u3002\n     * 3. \u5ba2\u6237\u7aef\u8c03\u7528 {@link TransactionExecutor#execute(ClientTransaction)}\uff0c\u6267\u884c\u6240\u6709\u56de\u8c03\u548c\u5fc5\u8981\u7684\u751f\u547d\u5468\u671f\u8f6c\u6362\u3002\n     * @throws RemoteException \u5982\u679c\u4e8b\u52a1\u65e0\u6cd5\u8c03\u5ea6\u3002\n     */\n    public void schedule() throws RemoteException {\n        mClient.scheduleTransaction(this);\n    }\n\n    private ClientTransaction() {}\n\n    public static ClientTransaction obtain(IApplicationThread client, IBinder activityToken) {\n        // \u4ece\u5bf9\u8c61\u6c60\u4e2d\u83b7\u53d6\u4e00\u4e2a ClientTransaction \u5b9e\u4f8b\n        ClientTransaction instance = ObjectPool.obtain(ClientTransaction.class);\n\n        // \u5982\u679c\u5bf9\u8c61\u6c60\u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u5b9e\u4f8b\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\n        if (instance == null) {\n            instance = new ClientTransaction();\n        }\n\n        // \u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u5c5e\u6027\n        instance.mClient = client;\n        instance.mActivityToken = activityToken;\n\n        // \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\u5b9e\u4f8b\n        return instance;\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u7a0d\u5fae\u89e3\u91ca\u4e86 ClientTransaction \u7c7b\u7684\u4ee3\u7801\uff0c\u901a\u8fc7 IApplicationThread \u4e3b\u8981\u662f\u628a\u4e8b\u52a1\u9879\u5217\u8868\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002 \u770b\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e91\u91cc\u96fe\u91cc\uff0c\u6211\u4eec\u76f4\u63a5\u627e\u4e00\u4e2a\u6848\u4f8b\u6765\u5206\u6790\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#_4","title":"\u4ee3\u7801\u6848\u4f8b","text":"<p>\u4e86\u89e3 Activity \u542f\u52a8\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u4e0d\u7ba1\u662f\u70ed\u542f\u52a8\u8fd8\u662f\u51b7\u542f\u52a8\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7 ActivityTaskSupervisor.realStartActivityLocked() \u6765\u542f\u52a8 activity\u7684\u3002</p> <pre><code>public class ActivityTaskSupervisor implements RecentTasks.Callbacks {  \n    boolean realStartActivityLocked(ActivityRecord r, WindowProcessController proc,  \n            boolean andResume, boolean checkConfig) throws RemoteException {  \n\n        ...  \n\n        // Create activity launch transaction.  \n        final ClientTransaction clientTransaction = ClientTransaction.obtain(  \n                proc.getThread(), r.token);  \n\n        final boolean isTransitionForward = r.isTransitionForward();  \n        final IBinder fragmentToken = r.getTaskFragment().getFragmentToken();  \n\n        final int deviceId = getDeviceIdForDisplayId(r.getDisplayId());  \n        clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),  \n                System.identityHashCode(r), r.info,  \n                // TODO: Have this take the merged configuration instead of separate global  \n                // and override configs.  \n                mergedConfiguration.getGlobalConfiguration(),  \n                mergedConfiguration.getOverrideConfiguration(), deviceId,  \n                r.getFilteredReferrer(r.launchedFromPackage), task.voiceInteractor,  \n                proc.getReportedProcState(), r.getSavedState(), r.getPersistentSavedState(),  \n                results, newIntents, r.takeOptions(), isTransitionForward,  \n                proc.createProfilerInfoIfNeeded(), r.assistToken, activityClientController,  \n                r.shareableActivityToken, r.getLaunchedFromBubble(), fragmentToken));  \n\n        // Set desired final state.  \n        final ActivityLifecycleItem lifecycleItem;  \n        if (andResume) {  \n            lifecycleItem = ResumeActivityItem.obtain(isTransitionForward,  \n                    r.shouldSendCompatFakeFocus());  \n        } else {  \n            lifecycleItem = PauseActivityItem.obtain();  \n        }  \n        clientTransaction.setLifecycleStateRequest(lifecycleItem);  \n\n        // Schedule transaction.  \n        mService.getLifecycleManager().scheduleTransaction(clientTransaction); \n        ...  \n    }  \n}\n</code></pre> <ul> <li>mService</li> </ul> <p>\u662f ActivityTaskManagerService\uff0c\u800c ActivityTaskManagerService \u7684 getLifecycleManager() \u51fd\u6570\u8fd4\u56de\u7684\u662f mLifecycleManager\uff1b\u4e5f\u5c31\u662f ClientLifecycleManager</p> <ul> <li>proc.getThread()</li> </ul> <p>\u8fd9\u4e2a\u662f ActivityThread.attach() \u8c03\u7528 ActivityManagerService.attachApplication() \u4e00\u8def\u4f20\u5230 ProcessRecord \u7684\u6210\u5458\u53d8\u91cf mThread \u91cc\u3002 \u6240\u4ee5\u8fd9\u91cc\u62ff\u5230\u7684\u5176\u5b9e\u5c31\u662f\u5ba2\u6237\u7aef\u7684 ApplicationThread \u4e5f\u5c31\u662f IApplicationThread.Stub\u3002</p> <ul> <li> <p>LaunchActivityItem</p> </li> <li> <p>ResumeActivityItem</p> </li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionobtain","title":"ClientTransaction.obtain()","text":"<pre><code>/**\n * \u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u6d88\u606f\u7684\u5bb9\u5668\uff0c\u8fd9\u4e9b\u6d88\u606f\u53ef\u80fd\u4f1a\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002\n * \u5305\u62ec\u4e00\u4e2a\u56de\u8c03\u5217\u8868\u548c\u4e00\u4e2a\u6700\u7ec8\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n *\n * @see com.android.server.am.ClientLifecycleManager\n * @see ClientTransactionItem\n * @see ActivityLifecycleItem\n * @hide\n */\npublic class ClientTransaction implements Parcelable, ObjectPoolItem {\n\n    /** \u76ee\u6807\u5ba2\u6237\u7aef\u3002 */\n    private IApplicationThread mClient;\n\n    /** \u76ee\u6807\u5ba2\u6237\u7aef\u6d3b\u52a8\u3002\u5982\u679c\u6574\u4e2a\u4e8b\u52a1\u76ee\u6807\u662f\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u80fd\u4e3a\u7a7a\u3002 */\n    private IBinder mActivityToken;\n\n    private ClientTransaction() {}\n\n    public static ClientTransaction obtain(IApplicationThread client, IBinder activityToken) {\n        // \u4ece\u5bf9\u8c61\u6c60\u4e2d\u83b7\u53d6\u4e00\u4e2a ClientTransaction \u5b9e\u4f8b\n        ClientTransaction instance = ObjectPool.obtain(ClientTransaction.class);\n\n        // \u5982\u679c\u5bf9\u8c61\u6c60\u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u5b9e\u4f8b\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\n        if (instance == null) {\n            instance = new ClientTransaction();\n        }\n\n        // \u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u5c5e\u6027\n        instance.mClient = client;\n        instance.mActivityToken = activityToken;\n\n        // \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\u5b9e\u4f8b\n        return instance;\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mClient \u5c31\u662f\u5ba2\u6237\u7aef\u7684 ApplicationThread \u4e5f\u5c31\u662f IApplicationThread.Stub\u3002 </p> <p>mActivityToken \u5c31\u662f\u4f20\u8fdb\u6765\u7684 r.token \uff0cr \u662f ActivityRecord\uff0c\u6240\u4ee5\u662f WindowToken \u91cc\u7684\u6210\u5458\u53d8\u91cf token\u3002</p> <p>\u8fd9\u4e2a r.token \u6211\u4eec\u540e\u9762\u4f1a\u8be6\u7ec6\u89e3\u91ca\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionaddcallback","title":"ClientTransaction.addCallback()","text":"<pre><code>public class ClientTransaction implements Parcelable, ObjectPoolItem {\n\n    /** \u53d1\u9001\u5230\u5ba2\u6237\u7aef\u7684\u5355\u4e2a\u56de\u8c03\u5217\u8868\u3002 */\n    @UnsupportedAppUsage\n    private List&lt;ClientTransactionItem&gt; mActivityCallbacks;\n\n    /**\n     * \u5c06\u6d88\u606f\u6dfb\u52a0\u5230\u56de\u8c03\u5e8f\u5217\u7684\u672b\u5c3e\u3002\n     * @param activityCallback \u53ef\u4ee5\u5305\u542b\u751f\u547d\u5468\u671f\u8bf7\u6c42/\u56de\u8c03\u7684\u5355\u4e2a\u6d88\u606f\u3002\n     */\n    public void addCallback(ClientTransactionItem activityCallback) {\n        if (mActivityCallbacks == null) {\n            mActivityCallbacks = new ArrayList&lt;&gt;();\n        }\n        mActivityCallbacks.add(activityCallback);\n    }\n\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionsetlifecyclestaterequest","title":"ClientTransaction.setLifecycleStateRequest()","text":"<pre><code>public class ClientTransaction implements Parcelable, ObjectPoolItem {\n\n    /**\n     * \u4e8b\u52a1\u6267\u884c\u540e\u5ba2\u6237\u7aef\u6d3b\u52a8\u5e94\u5904\u4e8e\u7684\u6700\u7ec8\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n     */\n    private ActivityLifecycleItem mLifecycleStateRequest;\n\n    /**\n     * \u8bbe\u7f6e\u4e8b\u52a1\u6267\u884c\u540e\u5ba2\u6237\u7aef\u5e94\u5904\u4e8e\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n     * @param stateRequest \u7528\u6b63\u786e\u53c2\u6570\u521d\u59cb\u5316\u7684\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002\n     */\n    public void setLifecycleStateRequest(ActivityLifecycleItem stateRequest) {\n        mLifecycleStateRequest = stateRequest;\n    }\n\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clientlifecyclemanagerscheduletransaction","title":"ClientLifecycleManager.scheduleTransaction()","text":"<pre><code>/**\n * \u80fd\u591f\u5408\u5e76\u591a\u4e2a\u5ba2\u6237\u7aef\u751f\u547d\u5468\u671f\u8fc7\u6e21\u8bf7\u6c42\u548c/\u6216\u56de\u8c03\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5355\u4e2a\u4e8b\u52a1\u6267\u884c\u7684\u7c7b\u3002\n *\n * @see ClientTransaction\n */\nclass ClientLifecycleManager {\n    // TODO(lifecycler): \u5b9e\u73b0\u6784\u5efa\u4e8b\u52a1\u6216\u5168\u5c40\u4e8b\u52a1\u3002\n    // TODO(lifecycler): \u4f7f\u7528\u5bf9\u8c61\u6c60\u6765\u7ba1\u7406\u4e8b\u52a1\u548c\u4e8b\u52a1\u9879\u3002\n\n    /**\n     * \u8c03\u5ea6\u4e00\u4e2a\u4e8b\u52a1\uff0c\u8be5\u4e8b\u52a1\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u56de\u8c03\u548c\u4e00\u4e2a\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002\n     * @param transaction \u4e00\u7cfb\u5217\u5ba2\u6237\u7aef\u4e8b\u52a1\u9879\u3002\n     * @throws RemoteException\n     *\n     * @see ClientTransaction\n     */\n    void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n        // \u83b7\u53d6\u76ee\u6807\u5ba2\u6237\u7aef\n        final IApplicationThread client = transaction.getClient();\n        // \u8c03\u5ea6\u4e8b\u52a1\n        transaction.schedule();\n        // \u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u662f Binder \u7684\u5b9e\u4f8b\uff0c\u5219\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fdc\u7a0b\u8c03\u7528\n        // \u5728\u6b64\u65f6\u53ef\u4ee5\u5b89\u5168\u5730\u56de\u6536\u5bf9\u8c61\u3002\u6240\u6709\u7528\u4e8e\u672c\u5730\u8c03\u7528\u7684\u5bf9\u8c61\u5c06\u5728\u4e8b\u52a1\u5728\n        // ActivityThread \u4e0a\u7684\u5ba2\u6237\u7aef\u6267\u884c\u540e\u56de\u6536\u3002\n        if (!(client instanceof Binder)) {\n            transaction.recycle();\n        }\n    }\n}\n</code></pre> <p>ClientLifecycleManager \u7c7b\u7528\u4e8e\u5904\u7406\u5ba2\u6237\u7aef\u751f\u547d\u5468\u671f\u7684\u591a\u4e2a\u8fc7\u6e21\u8bf7\u6c42\u548c/\u6216\u56de\u8c03\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e8b\u52a1\u6267\u884c\u3002</p> <p>\u901a\u8fc7 transaction.getClient() \u5c31\u83b7\u53d6\u5230\u5ba2\u6237\u7aef\u7684 ApplicationThread \u4e5f\u5c31\u662f IApplicationThread.Stub\u3002 </p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionschedule","title":"ClientTransaction.schedule()","text":"<pre><code>public class ClientTransaction implements Parcelable, ObjectPoolItem {  \n\n    /**  \n     * \u5728\u4e8b\u52a1\u521d\u59cb\u5316\u540e\u8c03\u5ea6\u4e8b\u52a1\u3002\u5b83\u5c06\u88ab\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u6240\u6709\u7684\u90e8\u5206\u5c06\u6309\u4ee5\u4e0b\u987a\u5e8f\u5e94\u7528\uff1a  \n     * 1. \u5ba2\u6237\u7aef\u8c03\u7528 {@link #preExecute(ClientTransactionHandler)}\uff0c\u8fd9\u5c06\u89e6\u53d1\u5728\u5b9e\u9645\u8c03\u5ea6\u4e8b\u52a1\u4e4b\u524d\u9700\u8981\u5b8c\u6210\u7684\u6240\u6709\u5de5\u4f5c\u3002  \n     * 2. \u4e8b\u52a1\u6d88\u606f\u88ab\u8c03\u5ea6\u3002  \n     * 3. \u5ba2\u6237\u7aef\u8c03\u7528 {@link TransactionExecutor#execute(ClientTransaction)}\uff0c\u6267\u884c\u6240\u6709\u56de\u8c03\u548c\u5fc5\u8981\u7684\u751f\u547d\u5468\u671f\u8f6c\u6362\u3002 \n     */  \n    public void schedule() throws RemoteException {  \n        mClient.scheduleTransaction(this);  \n    }  \n\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mClient \u5c31\u662f ApplicationThread\u3002</p> <p>\u8fd9\u91cc\u8fd8\u662f system_server \u8fdb\u7a0b</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#applicationthreadscheduletransaction","title":"ApplicationThread.scheduleTransaction()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    private class ApplicationThread extends IApplicationThread.Stub {  \n        @Override  \n        public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {  \n            ActivityThread.this.scheduleTransaction(transaction);  \n        }  \n    }  \n\n}\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8d70\u5230\u4e86 APP \u8fdb\u7a0b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionhandlerscheduletransaction","title":"ClientTransactionHandler.scheduleTransaction()","text":"<pre><code>public abstract class ClientTransactionHandler {\n\n    /** Prepare and schedule transaction for execution. */\n    void scheduleTransaction(ClientTransaction transaction) {\n        transaction.preExecute(this);\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u4e3b\u7ebf\u4efb\u52a1\u662f\u8ddf handler \u53d1\u9001\u4e00\u6761 EXECUTE_TRANSACTION \u4fe1\u606f\u3002 \u5728\u8fd9\u4e4b\u524d\u8981\u5148\u6267\u884c item \u7684 preExecute() \u51fd\u6570\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#clienttransactionpreexecute","title":"ClientTransaction.preExecute()","text":"<pre><code>public class ClientTransaction implements Parcelable, ObjectPoolItem {  \n    /**\n     * \u5728\u4e8b\u52a1\u8c03\u5ea6\u5230\u5ba2\u6237\u7aef\u65f6\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002\n     * @param clientTransactionHandler \u5728\u5ba2\u6237\u7aef\u6267\u884c\u4e8b\u52a1\u9879\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n     */\n    public void preExecute(ClientTransactionHandler clientTransactionHandler) {\n        if (mActivityCallbacks != null) {\n            final int size = mActivityCallbacks.size();\n            for (int i = 0; i &lt; size; ++i) {\n                mActivityCallbacks.get(i).preExecute(clientTransactionHandler, mActivityToken);\n            }\n        }\n        if (mLifecycleStateRequest != null) {\n            mLifecycleStateRequest.preExecute(clientTransactionHandler, mActivityToken);\n        }\n    }\n\n}\n</code></pre> <p>\u5728\u6211\u4eec\u8fd9\u91cc\u6848\u4f8b\u4e2d\uff0cmActivityCallbacks \u662f LaunchActivityItem \uff1bmLifecycleStateRequest \u662f ResumeActivityItem\u3002</p> <p>\u6240\u4ee5\u8fd9\u91cc\u662f\u5148\u540e\u8c03\u5230\u4e86 LaunchActivityItem.preExecute() \u548c ResumeActivityItem.preExecute()\u3002</p> <p>\u8fd9\u91cc\u53ea\u662f\u652f\u7ebf\u4efb\u52a1\uff0c\u6211\u4eec\u4e0d\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#handlemessageexecute_transaction","title":"handleMessage(EXECUTE_TRANSACTION)","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    private final TransactionExecutor mTransactionExecutor = new TransactionExecutor(this);\n\n    class H extends Handler {\n        public static final int EXECUTE_TRANSACTION = 159;\n\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case EXECUTE_TRANSACTION:\n                    final ClientTransaction transaction = (ClientTransaction) msg.obj;\n                    mTransactionExecutor.execute(transaction);\n                    if (isSystem()) {\n                        // Client transactions inside system process are recycled on the client side\n                        // instead of ClientLifecycleManager to avoid being cleared before this\n                        // message is handled.\n                        transaction.recycle();\n                    }\n                    // TODO(lifecycler): Recycle locally scheduled transactions.\n                    break;\n            }\n        }\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mTransactionExecutor \u5c31\u662f TransactionExecutor\u3002</p> <pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    private final TransactionExecutor mTransactionExecutor = new TransactionExecutor(this);  \n}\n</code></pre> <p>ActivityThread \u7ee7\u627f\u62bd\u8c61\u7c7b ClientTransactionHandler\uff0c\u6211\u4eec\u518d\u63a5\u7740\u770b TransactionExecutor \u6784\u9020\u51fd\u6570\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutor","title":"TransactionExecutor\u6784\u9020\u51fd\u6570","text":"<pre><code>public class TransactionExecutor {  \n\n    private ClientTransactionHandler mTransactionHandler;  \n\n    public TransactionExecutor(ClientTransactionHandler clientTransactionHandler) {  \n        mTransactionHandler = clientTransactionHandler;  \n    }  \n}\n</code></pre> <p>mTransactionHandler \u5176\u5b9e\u5c31\u662f ActivityThread\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorexecute","title":"TransactionExecutor.execute()","text":"<pre><code>/**\n * \u8be5\u7c7b\u8d1f\u8d23\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u7ba1\u7406\u4e8b\u52a1\u6267\u884c\u3002\n */\npublic class TransactionExecutor {\n\n    /**\n     * \u89e3\u6790\u4e8b\u52a1\u3002\n     * \u9996\u5148\uff0c\u6240\u6709\u56de\u8c03\u5c06\u6309\u5b83\u4eec\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u6267\u884c\u3002\u5982\u679c\u56de\u8c03\u9700\u8981\u67d0\u4e2a\u524d\u7f6e\u6216\u540e\u7f6e\u6267\u884c\u72b6\u6001\uff0c\n     * \u5219\u5ba2\u6237\u7aef\u5c06\u76f8\u5e94\u5730\u8fdb\u884c\u8fc7\u6e21\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u5c06\u5faa\u73af\u5230\u6700\u7ec8\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\uff08\u5982\u679c\u6709\u63d0\u4f9b\uff09\u3002\n     * \u5426\u5219\uff0c\u5b83\u5c06\u4fdd\u6301\u5728\u521d\u59cb\u72b6\u6001\u6216\u56de\u8c03\u6240\u9700\u7684\u6700\u540e\u72b6\u6001\u3002\n     */\n    public void execute(ClientTransaction transaction) {\n        ...\n\n        // \u6267\u884c\u56de\u8c03\n        executeCallbacks(transaction);\n\n        // \u6267\u884c\u751f\u547d\u5468\u671f\u72b6\u6001\n        executeLifecycleState(transaction);\n\n        ...\n    }\n\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorexecutecallbacks","title":"TransactionExecutor.executeCallbacks()","text":"<pre><code>public class TransactionExecutor {\n\n    /**\n     * \u904d\u5386\u6240\u6709\u7531\u56de\u8c03\u8bf7\u6c42\u7684\u72b6\u6001\uff0c\u5e76\u5728\u9002\u5f53\u7684\u65f6\u95f4\u6267\u884c\u5b83\u4eec\u3002\n     */\n    @VisibleForTesting\n    public void executeCallbacks(ClientTransaction transaction) {\n        // \u83b7\u53d6\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u56de\u8c03\n        final List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();\n        if (callbacks == null || callbacks.isEmpty()) {\n            // \u5982\u679c\u6ca1\u6709\u56de\u8c03\uff0c\u63d0\u524d\u8fd4\u56de\n            return;\n        }\n        // \u5982\u679c\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u8bb0\u5f55\u89e3\u6790\u56de\u8c03\u7684\u65e5\u5fd7\n        if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"Resolving callbacks in transaction\");\n\n        // \u83b7\u53d6\u4e8b\u52a1\u7684 Activity token\n        final IBinder token = transaction.getActivityToken();\n        // \u83b7\u53d6\u5bf9\u5e94\u7684 ActivityClientRecord\n        ActivityClientRecord r = mTransactionHandler.getActivityClient(token);\n\n        // \u83b7\u53d6\u4e8b\u52a1\u4e2d\u8bf7\u6c42\u7684\u6700\u7ec8\u72b6\u6001\n        final ActivityLifecycleItem finalStateRequest = transaction.getLifecycleStateRequest();\n        final int finalState = finalStateRequest != null ? finalStateRequest.getTargetState()\n                : UNDEFINED;\n\n        // \u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u4e86\u67d0\u79cd\u540e\u7f6e\u6267\u884c\u72b6\u6001\u7684\u56de\u8c03\u7684\u7d22\u5f15\n        final int lastCallbackRequestingState = lastCallbackRequestingState(transaction);\n\n        // \u83b7\u53d6\u56de\u8c03\u7684\u6570\u91cf\n        final int size = callbacks.size();\n        for (int i = 0; i &lt; size; ++i) {\n            final ClientTransactionItem item = callbacks.get(i);\n            if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"Resolving callback: \" + item);\n            final int postExecutionState = item.getPostExecutionState();\n\n            // \u5982\u679c\u56de\u8c03\u9700\u8981\u5b9a\u4e49\u7684\u524d\u7f6e\u6267\u884c\u72b6\u6001\n            if (item.shouldHaveDefinedPreExecutionState()) {\n                final int closestPreExecutionState = mHelper.getClosestPreExecutionState(r,\n                        item.getPostExecutionState());\n                if (closestPreExecutionState != UNDEFINED) {\n                    cycleToPath(r, closestPreExecutionState, transaction);\n                }\n            }\n\n            // \u6267\u884c\u56de\u8c03\n            item.execute(mTransactionHandler, token, mPendingActions);\n            // \u6267\u884c\u56de\u8c03\u540e\u7684\u64cd\u4f5c\n            item.postExecute(mTransactionHandler, token, mPendingActions);\n            if (r == null) {\n                // \u542f\u52a8\u6d3b\u52a8\u8bf7\u6c42\u5c06\u521b\u5efa\u4e00\u4e2a\u6d3b\u52a8\u8bb0\u5f55\n                r = mTransactionHandler.getActivityClient(token);\n            }\n\n            // \u5982\u679c\u56de\u8c03\u6709\u540e\u7f6e\u6267\u884c\u72b6\u6001\u4e14\u6d3b\u52a8\u8bb0\u5f55\u4e0d\u4e3a\u7a7a\n            if (postExecutionState != UNDEFINED &amp;&amp; r != null) {\n                // \u8df3\u8fc7\u6700\u540e\u4e00\u4e2a\u8fc7\u6e21\uff0c\u5e76\u901a\u8fc7\u663e\u5f0f\u72b6\u6001\u8bf7\u6c42\u6267\u884c\u5b83\n                final boolean shouldExcludeLastTransition =\n                        i == lastCallbackRequestingState &amp;&amp; finalState == postExecutionState;\n                cycleToPath(r, postExecutionState, shouldExcludeLastTransition, transaction);\n            }\n        }\n    }\n\n}\n</code></pre> <p>closestPreExecutionState \u548c postExecutionState \u90fd\u662f UNDEFINED\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5173\u5fc3\u9ad8\u4eae\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u4e5f\u5c31\u662f item.execute() \u548c item.postExecute() \u3002</p> <p>\u8fd9\u91cc\u4e3b\u7ebf\u4efb\u52a1\u662f\u8c03\u7528 item \u7684 execute()\uff0c\u652f\u7ebf\u4efb\u52a1\u662f\u8c03\u7528 item \u7684 postExecute() \u3002</p> <p>item \u662f LaunchActivityItem\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#launchactivityitemexecute","title":"LaunchActivityItem.execute()","text":"<pre><code>public class LaunchActivityItem extends ClientTransactionItem {  \n    @Override  \n    public void execute(ClientTransactionHandler client, IBinder token,  \n            PendingTransactionActions pendingActions) {  \n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");  \n        ActivityClientRecord r = new ActivityClientRecord(token, mIntent, mIdent, mInfo,  \n                mOverrideConfig, mReferrer, mVoiceInteractor, mState, mPersistentState,  \n                mPendingResults, mPendingNewIntents, mActivityOptions, mIsForward, mProfilerInfo,  \n                client, mAssistToken, mShareableActivityToken, mLaunchedFromBubble,  \n                mTaskFragmentToken);  \n        client.handleLaunchActivity(r, pendingActions, mDeviceId, null /* customIntent */);  \n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);  \n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 client \u5c31\u662f TransactionExecutor \u6784\u9020\u51fd\u6570\u62ff\u5230\u7684 ActivityThread\u3002</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6700\u7ec8\u8c03\u5230\u4e86 ActivityThread.handleLaunchActivity()\uff0c\u8d70 Activity \u7684 onCreate() \u751f\u547d\u5468\u671f\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#launchactivityitempostexecute","title":"LaunchActivityItem.postExecute()","text":"<pre><code>public class LaunchActivityItem extends ClientTransactionItem {  \n    @Override  \n    public void postExecute(@NonNull ClientTransactionHandler client,  \n            @NonNull PendingTransactionActions pendingActions) {  \n        client.countLaunchingActivities(-1);  \n    }  \n}\n</code></pre> <p>\u8ba1\u6570-1</p> <p>\u5230\u8fd9\u91cc\u6267\u884c\u5b8c\u7b2c\u4e00\u4e2a item \u4e86\uff0c\u6211\u4eec\u56de\u5230 TransactionExecutor.executeTransactionItems() \u4e2d\u7ee7\u7eedfor\u5faa\u73af\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorexecutelifecyclestate","title":"TransactionExecutor.executeLifecycleState()","text":"<p>\u5f53\u524d\u6848\u4f8b\u4e2d\uff0cActivityLifecycleItem \u662f ResumeActivityItem \u3002</p> <pre><code>public class TransactionExecutor {\n\n    /**\n     * \u5982\u679c\u4e8b\u52a1\u8bf7\u6c42\u4e86\u6700\u7ec8\u72b6\u6001\uff0c\u8f6c\u6362\u5230\u8be5\u6700\u7ec8\u72b6\u6001\u3002\n     */\n    private void executeLifecycleState(ClientTransaction transaction) {\n        // \u83b7\u53d6\u4e8b\u52a1\u4e2d\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\n        final ActivityLifecycleItem lifecycleItem = transaction.getLifecycleStateRequest();\n        if (lifecycleItem == null) {\n            // \u5982\u679c\u6ca1\u6709\u751f\u547d\u5468\u671f\u8bf7\u6c42\uff0c\u63d0\u524d\u8fd4\u56de\n            return;\n        }\n\n        // \u83b7\u53d6\u4e8b\u52a1\u7684 Activity token\n        final IBinder token = transaction.getActivityToken();\n        // \u83b7\u53d6\u5bf9\u5e94\u7684 ActivityClientRecord\n        final ActivityClientRecord r = mTransactionHandler.getActivityClient(token);\n\n        // \u5982\u679c\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u8bb0\u5f55\u89e3\u6790\u751f\u547d\u5468\u671f\u72b6\u6001\u7684\u65e5\u5fd7\n        if (DEBUG_RESOLVER) {\n            Slog.d(TAG, tId(transaction) + \"Resolving lifecycle state: \"\n                    + lifecycleItem + \" for activity: \"\n                    + getShortActivityName(token, mTransactionHandler));\n        }\n\n        if (r == null) {\n            // \u5982\u679c\u5ba2\u6237\u7aef\u8bb0\u5f55\u4e0d\u5b58\u5728\uff0c\u5ffd\u7565\u8bf7\u6c42\n            return;\n        }\n\n        // \u8f6c\u6362\u5230\u6700\u7ec8\u8bf7\u6c42\u72b6\u6001\u4e4b\u524d\u7684\u72b6\u6001\n        cycleToPath(r, lifecycleItem.getTargetState(), true /* excludeLastState */, transaction);\n\n        // \u4f7f\u7528\u6b63\u786e\u7684\u53c2\u6570\u6267\u884c\u6700\u7ec8\u7684\u8fc7\u6e21\n        lifecycleItem.execute(mTransactionHandler, token, mPendingActions);\n        lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);\n    }\n\n\n}\n</code></pre> <p>\u8fd9\u91cc\u8ddf TransactionExecutor.executeLifecycleState() \u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4e3b\u7ebf\u4efb\u52a1\u662f\u8c03\u7528 item \u7684 execute()\uff0c\u652f\u7ebf\u4efb\u52a1\u662f\u8c03\u7528 item \u7684 postExecute() \u3002</p> <p>\u4f46\u5728\u8fd9\u4e4b\u524d\u8c03\u7528\u4e86 cycleToPath() \uff0c\u8fd9\u70b9\u5f88\u6709\u610f\u601d\u54c8\u3002</p> <p>\u521a\u624d LaunchActivityItem \u53ea\u662f\u8d70 Activity \u7684 onCreate() \u751f\u547d\u5468\u671f\u3002 \u800c\u8fd9\u91cc ResumeActivityItem \u4ece\u5b57\u9762\u610f\u601d\u663e\u7136\u662f\u8981\u6267\u884c Activity \u7684 onResume() \u751f\u547d\u5468\u671f\u3002\u4f46\u8fd9\u4e24\u8005\u4e4b\u95f4\u8fd8\u7f3a\u5c11\u4e86\u4e00\u4e2a\u751f\u547d\u5468\u671f onStart()\u3002</p> <p>\u6240\u4ee5 cycleToPath() \u7684\u4f5c\u7528\u5c31\u662f\u8ba1\u7b97 Activity \u7684\u751f\u547d\u5468\u671f\u8def\u5f84\uff0c\u5982\u679c\u8981\u8d70\u7684\u8def\u5f84\u8ddf\u73b0\u5728\u7684\u8def\u5f84\u4e2d\u95f4\u8fd8\u6709\uff0c\u5219\u5148\u8865\u9f50\u3002</p> <p>\u7b80\u5355\u70b9\uff0conCreate \u662f\u7b2c\u4e00\u6b65\uff0conStart \u662f\u7b2c\u4e8c\u6b65\uff0conResume \u662f\u7b2c\u4e09\u6b65\uff1b\u73b0\u5728\u53ea\u8d70\u5230\u4e86\u7b2c\u4e00\u6b65\uff0c\u8981\u8d70\u5230\u7b2c\u4e09\u6b65\uff0c\u5fc5\u73b0\u5148\u8d70\u5230\u7b2c\u4e8c\u6b65\uff0c\u624d\u80fd\u4ece\u7b2c\u4e8c\u6b65\u8d70\u5230\u7b2c\u4e09\u6b65\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorcycletopath","title":"TransactionExecutor.cycleToPath()","text":"<pre><code>public class TransactionExecutor {  \n    /**\n     * \u5728\u72b6\u6001\u4e4b\u95f4\u8f6c\u6362\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u53ef\u4ee5\u9009\u62e9\u4e0d\u6267\u884c\u5e8f\u5217\u4e2d\u7684\u6700\u540e\u4e00\u6b65\u3002\n     * \u8fd9\u662f\u5728\u89e3\u6790\u751f\u547d\u5468\u671f\u72b6\u6001\u8bf7\u6c42\u65f6\u4f7f\u7528\u7684\uff0c\u5f53\u6700\u540e\u4e00\u6b65\u9700\u8981\u7528\u4e00\u4e9b\u7279\u5b9a\u7684\u53c2\u6570\u6267\u884c\u65f6\u3002\n     *\n     * @param r \u5f53\u524d\u7684 ActivityClientRecord \u5b9e\u4f8b\u3002\n     * @param finish \u6700\u7ec8\u72b6\u6001\u3002\n     * @param excludeLastState \u662f\u5426\u6392\u9664\u6700\u540e\u7684\u72b6\u6001\u3002\n     * @param transaction \u5f53\u524d\u7684 ClientTransaction \u5b9e\u4f8b\u3002\n     */\n    private void cycleToPath(ActivityClientRecord r, int finish, boolean excludeLastState,\n            ClientTransaction transaction) {\n        // \u83b7\u53d6\u5f53\u524d\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\n        final int start = r.getLifecycleState();\n\n        ...\n\n        // \u83b7\u53d6\u4ece start \u5230 finish \u7684\u751f\u547d\u5468\u671f\u8def\u5f84\uff0c\u53ef\u80fd\u4f1a\u6392\u9664\u6700\u540e\u7684\u72b6\u6001\n        final IntArray path = mHelper.getLifecyclePath(start, finish, excludeLastState);\n\n        // \u6267\u884c\u751f\u547d\u5468\u671f\u5e8f\u5217\n        performLifecycleSequence(r, path, transaction);\n    }\n\n}\n</code></pre> <p>\u56de\u5230\u521a\u624d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u65b9\uff1a</p> <pre><code>cycleToPath(r, lifecycleItem.getTargetState(), true /* excludeLastState */, transaction);\n</code></pre> <ul> <li>r  <p>\u5c31\u662f ActivityThread \u91cc\u7684 ActivityClientRecord\uff0c</p> </li> <li>lifecycleItem.getTargetState()  <p>\u56e0\u4e3a lifecycleItem \u662f ResumeActivityItem\uff0c\u4f7f\u7528\u8fd4\u56de\u7684\u5c31\u662f ON_RESUME\uff0c\u4e5f\u5c31\u662f3\u3002 \u6240\u4ee5\u4f20\u7ed9 cycleToPath() \u51fd\u6570\u7684 finish = 3</p> </li> </ul> <p>\u56de\u5230 cycleToPath() \u51fd\u6570\u91cc\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790 start \u548c path \u662f\u600e\u4e48\u5f97\u5230\u7684\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#activityclientrecordgetlifecyclestate","title":"ActivityClientRecord.getLifecycleState()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    public static final class ActivityClientRecord {\n\n        public int getLifecycleState() {\n            return mLifecycleState;\n        }\n\n        public void setState(@LifecycleState int newLifecycleState) {\n            mLifecycleState = newLifecycleState;\n        }\n    }\n\n}\n</code></pre> <p>\u5728 onCeate() \u6d41\u7a0b\u4e2d\u8bbe\u7f6e\u4e86\u72b6\u6001\u3002</p> <pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n\n        ...\n\n        r.setState(ON_CREATE);\n\n        ...\n\n    }\n\n}\n</code></pre> <p>\u6240\u4ee5 cycleToPath() \u51fd\u6570\u91cc start \u5c31\u662f ON_CREATE\uff0c\u4e5f\u5c31\u662f1</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorhelpergetlifecyclepath","title":"TransactionExecutorHelper.getLifecyclePath()","text":"<pre><code>public class TransactionExecutorHelper {\n\n    /**\n     * \u8ba1\u7b97\u6d3b\u52a8\u5728\u4e3b\u8981\u751f\u547d\u5468\u671f\u72b6\u6001\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u5e76\u7528\u503c\u586b\u5145 {@link #mLifecycleSequence}\uff0c\u8fd9\u4e9b\u503c\u4ece\u521d\u59cb\u72b6\u6001\u540e\u7684\u72b6\u6001\u5f00\u59cb\u3002\n     * &lt;p&gt;\u6ce8\u610f\uff1a\u8fd4\u56de\u503c\u5728\u6b64\u7c7b\u4e2d\u5185\u90e8\u4f7f\u7528\uff0c\u5e76\u4e0d\u662f\u526f\u672c\u3002\u5728\u8c03\u7528\u6b64\u7c7b\u7684\u5176\u4ed6\u65b9\u6cd5\u540e\uff0c\u5176\u5185\u5bb9\u53ef\u80fd\u4f1a\u6539\u53d8\u3002&lt;/p&gt;\n     *\n     * @param start \u521d\u59cb\u72b6\u6001\u3002\n     * @param finish \u6700\u7ec8\u72b6\u6001\u3002\n     * @param excludeLastState \u662f\u5426\u6392\u9664\u6700\u540e\u7684\u72b6\u6001\u3002\n     * @return \u5305\u542b\u751f\u547d\u5468\u671f\u8def\u5f84\u7684 IntArray\u3002\n     * @throws IllegalArgumentException \u5982\u679c\u72b6\u6001\u662f\u672a\u5b9a\u4e49\u7684\u6216\u975e\u6cd5\u7684\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002\n     */\n    @VisibleForTesting\n    public IntArray getLifecyclePath(int start, int finish, boolean excludeLastState) {\n        // \u5982\u679c\u521d\u59cb\u72b6\u6001\u6216\u6700\u7ec8\u72b6\u6001\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n        if (start == UNDEFINED || finish == UNDEFINED) {\n            throw new IllegalArgumentException(\"Can't resolve lifecycle path for undefined state\");\n        }\n        // \u5982\u679c\u72b6\u6001\u662f ON_RESTART\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n        if (start == ON_RESTART || finish == ON_RESTART) {\n            throw new IllegalArgumentException(\"Can't start or finish in intermittent RESTART state\");\n        }\n        // \u5982\u679c\u6700\u7ec8\u72b6\u6001\u662f PRE_ON_CREATE \u4e14\u521d\u59cb\u72b6\u6001\u4e0d\u7b49\u4e8e\u6700\u7ec8\u72b6\u6001\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n        if (finish == PRE_ON_CREATE &amp;&amp; start != finish) {\n            throw new IllegalArgumentException(\"Can only start in pre-onCreate state\");\n        }\n\n        // \u6e05\u7a7a\u751f\u547d\u5468\u671f\u5e8f\u5217\n        mLifecycleSequence.clear();\n\n        // \u5982\u679c\u6700\u7ec8\u72b6\u6001\u5927\u4e8e\u7b49\u4e8e\u521d\u59cb\u72b6\u6001\n        if (finish &gt;= start) {\n            // \u7279\u6b8a\u60c5\u51b5\uff1a\u4ece ON_START \u5230 ON_STOP\uff0c\u4e0d\u9700\u8981\u7ecf\u8fc7 ON_RESUME \u548c ON_PAUSE \u72b6\u6001\u3002\n            if (start == ON_START &amp;&amp; finish == ON_STOP) {\n                mLifecycleSequence.add(ON_STOP);\n            } else {\n                // \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f9d\u6b21\u6dfb\u52a0\u72b6\u6001\u3002\n                for (int i = start + 1; i &lt;= finish; i++) {\n                    mLifecycleSequence.add(i);\n                }\n            }\n        } else { // \u5982\u679c\u6700\u7ec8\u72b6\u6001\u5c0f\u4e8e\u521d\u59cb\u72b6\u6001\uff0c\u4e0d\u80fd\u7b80\u5355\u5730\u9006\u5e8f\u5faa\u73af\n            // \u7279\u6b8a\u60c5\u51b5\uff1a\u4ece ON_PAUSE \u5230 ON_RESUME\uff0c\u76f4\u63a5\u8df3\u5230 ON_RESUME\u3002\n            if (start == ON_PAUSE &amp;&amp; finish == ON_RESUME) {\n                mLifecycleSequence.add(ON_RESUME);\n            } else if (start &lt;= ON_STOP &amp;&amp; finish &gt;= ON_START) {\n                // \u91cd\u65b0\u542f\u52a8\u5e76\u8f6c\u5230\u6240\u9700\u72b6\u6001\u3002\n\n                // \u9996\u5148\u8fdb\u5165\u505c\u6b62\u72b6\u6001\u3002\n                for (int i = start + 1; i &lt;= ON_STOP; i++) {\n                    mLifecycleSequence.add(i);\n                }\n                // \u91cd\u542f\n                mLifecycleSequence.add(ON_RESTART);\n                // \u8f6c\u5230\u6240\u9700\u72b6\u6001\n                for (int i = ON_START; i &lt;= finish; i++) {\n                    mLifecycleSequence.add(i);\n                }\n            } else {\n                // \u91cd\u65b0\u542f\u52a8\u5e76\u8f6c\u5230\u6240\u9700\u72b6\u6001\u3002\n\n                // \u9996\u5148\u8fdb\u5165\u9500\u6bc1\u72b6\u6001\u3002\n                for (int i = start + 1; i &lt;= ON_DESTROY; i++) {\n                    mLifecycleSequence.add(i);\n                }\n                // \u8f6c\u5230\u6240\u9700\u72b6\u6001\n                for (int i = ON_CREATE; i &lt;= finish; i++) {\n                    mLifecycleSequence.add(i);\n                }\n            }\n        }\n\n        // \u5982\u679c\u9700\u8981\u6392\u9664\u6700\u540e\u7684\u72b6\u6001\u8f6c\u6362\uff0c\u5e76\u4e14\u751f\u547d\u5468\u671f\u5e8f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u79fb\u9664\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u3002\n        if (excludeLastState &amp;&amp; mLifecycleSequence.size() != 0) {\n            mLifecycleSequence.remove(mLifecycleSequence.size() - 1);\n        }\n\n        return mLifecycleSequence;\n    }\n}\n</code></pre> <p>\u7ecf\u8fc7\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053 start = 1 \u548c finish = 3 \u3002 \u6240\u4ee5 mLifecycleSequence \u6dfb\u52a0\u4e86 2 \u548c 3\uff0c\u8bf7\u6ce8\u610f\u770b\u4ee3\u7801\u9ad8\u4eae\u90e8\u5206\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#transactionexecutorperformlifecyclesequence","title":"TransactionExecutor.performLifecycleSequence()","text":"<pre><code>public class TransactionExecutor {  \n    /**\n     * \u901a\u8fc7\u9884\u5148\u521d\u59cb\u5316\u7684\u72b6\u6001\u5e8f\u5217\u6765\u8f6c\u6362\u5ba2\u6237\u7aef\u3002\n     *\n     * @param r \u8868\u793a\u6d3b\u52a8\u7684 ActivityClientRecord \u5bf9\u8c61\n     * @param path \u8868\u793a\u751f\u547d\u5468\u671f\u8def\u5f84\u7684 IntArray \u5bf9\u8c61\n     * @param transaction \u8868\u793a\u5f53\u524d\u4e8b\u52a1\u7684 ClientTransaction \u5bf9\u8c61\n     */\n    private void performLifecycleSequence(ActivityClientRecord r, IntArray path,\n            ClientTransaction transaction) {\n        final int size = path.size();\n        for (int i = 0, state; i &lt; size; i++) {\n            state = path.get(i);\n            switch (state) {\n                case ON_CREATE:\n                    mTransactionHandler.handleLaunchActivity(r, mPendingActions,\n                            Context.DEVICE_ID_INVALID, null /* customIntent */);\n                    break;\n                case ON_START:\n                    mTransactionHandler.handleStartActivity(r, mPendingActions,\n                            null /* activityOptions */);\n                    break;\n                case ON_RESUME:\n                    mTransactionHandler.handleResumeActivity(r, false /* finalStateRequest */,\n                            r.isForward, false /* shouldSendCompatFakeFocus */,\n                            \"LIFECYCLER_RESUME_ACTIVITY\");\n                    break;\n                case ON_PAUSE:\n                    mTransactionHandler.handlePauseActivity(r, false /* finished */,\n                            false /* userLeaving */, 0 /* configChanges */,\n                            false /* autoEnteringPip */, mPendingActions,\n                            \"LIFECYCLER_PAUSE_ACTIVITY\");\n                    break;\n                case ON_STOP:\n                    mTransactionHandler.handleStopActivity(r, 0 /* configChanges */,\n                            mPendingActions, false /* finalStateRequest */,\n                            \"LIFECYCLER_STOP_ACTIVITY\");\n                    break;\n                case ON_DESTROY:\n                    mTransactionHandler.handleDestroyActivity(r, false /* finishing */,\n                            0 /* configChanges */, false /* getNonConfigInstance */,\n                            \"performLifecycleSequence. cycling to:\" + path.get(size - 1));\n                    break;\n                case ON_RESTART:\n                    mTransactionHandler.performRestartActivity(r, false /* start */);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected lifecycle state: \" + state);\n            }\n        }\n    }\n\n}\n</code></pre> <p>\u7531\u524d\u9762\u53ef\u77e5\uff0cpath\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u503c\u5206\u522b\u4e3a2\u548c3\uff0c\u4e5f\u5c31\u662f ON_START \u548c ON_RESUME\u3002</p> <ul> <li> <p>ON_START</p> <p>\u8c03\u7684\u662f ClientTransactionHandler.handleStartActivity()\uff0c\u6700\u7ec8\u8c03\u5230\u4e86 ActivityThread.handleStartActivity()\uff0c\u8d70 Activity \u7684 onStart() \u751f\u547d\u5468\u671f\u3002</p> </li> <li> <p>ON_RESUME</p> <p>\u8c03\u7684\u662f ClientTransactionHandler.handleResumeActivity()\uff0c\u6700\u7ec8\u8c03\u5230\u4e86 ActivityThread.handleResumeActivity()\uff0c\u8d70 Activity \u7684 onResume() \u751f\u547d\u5468\u671f\u3002</p> </li> </ul> <p>\u5230\u8fd9\u91cc TransactionExecutor.cycleToPath() \u7684\u4f7f\u547d\u5b8c\u6210\u4e86\uff0c\u7ee7\u7eed\u56de\u5230\u8c03\u7528\u5176\u5730\u65b9\uff0c\u4e5f\u5c31\u662f TransactionExecutor.executeLifecycleState()\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#resumeactivityitemexecute","title":"ResumeActivityItem.execute()","text":"<p>TransactionExecutor.executeLifecycleState() \u8c03\u7528 TransactionExecutor.cycleToPath() \u4e4b\u540e\uff0c\u63a5\u7740\u8c03\u7528</p> <pre><code>lifecycleItem.execute(mTransactionHandler, mPendingActions);  \nlifecycleItem.postExecute(mTransactionHandler, mPendingActions);\n</code></pre> <p>\u6267\u884c\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u3002</p> <p>\u524d\u9762\u6211\u4eec\u63d0\u5230\u8fc7 lifecycleItem \u5c31\u662f ResumeActivityItem\uff0c\u6240\u4ee5\u5148\u770b ResumeActivityItem.execute() \u90fd\u5e72\u4e86\u4ec0\u4e48\u3002</p> <pre><code>@Override  \npublic void execute(@NonNull ClientTransactionHandler client, @NonNull ActivityClientRecord r,  \n        @NonNull PendingTransactionActions pendingActions) {  \n    Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityResume\");  \n    client.handleResumeActivity(r, true /* finalStateRequest */, mIsForward,  \n            mShouldSendCompatFakeFocus, \"RESUME_ACTIVITY\");  \n    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);  \n}\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u6700\u7ec8\u8c03\u5230\u4e86 ActivityThread.handleResumeActivity()\uff0c\u8d70 Activity \u7684 onResume() \u751f\u547d\u5468\u671f\u3002</p> <p>Warning</p> <p>\u524d\u9762\u6267\u884c cycleToPath() \u65f6\u5df2\u7ecf\u8d70\u4e86\u8d70 Activity \u7684 onResume() \u751f\u547d\u5468\u671f\uff0c\u8fd9\u91cc\u518d\u8d70\u4e00\u6b21\u4e0d\u662f\u91cd\u590d\u4e86\u5417\uff1f</p> <p>\u5176\u5b9e\u4e0d\u7136\uff0c\u5728 ActivityThread.handleResumeActivity() \u4e2d\u4f1a\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u6267\u884c\u8fc7\u4e86\uff0c\u5982\u679c\u662f\u5c31\u4e0d\u518d\u6267\u884c\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#resumeactivityitempostexecute","title":"ResumeActivityItem.postExecute()","text":"<pre><code>@Override  \npublic void postExecute(@NonNull ClientTransactionHandler client,  \n        @NonNull PendingTransactionActions pendingActions) {  \n    // TODO(lifecycler): Use interface callback instead of actual implementation.  \n    ActivityClient.getInstance().activityResumed(getActivityToken(),  \n            client.isHandleSplashScreenExit(getActivityToken()));  \n}\n</code></pre> <p>\u5230\u8fd9\u91cc\u57fa\u672c\u4e0a\u5c31\u77e5\u9053\u4e86 system_server \u662f\u5982\u4f55\u901a\u8fc7 server transaction \u6765\u542f\u52a8 Activity \u7684\u5404\u79cd\u751f\u547d\u5468\u671f\u7684\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/client_transaction/#_5","title":"\u603b\u7ed3","text":"<p>\u4eca\u540e\u53ea\u8981\u770b\u5230\u5728 system_server \u8981\u901a\u8fc7 server transaction \u6765\u6267\u884c\u8fd9\u4e9b item\uff0c\u53ef\u4ee5\u4e0d\u7528\u4e00\u70b9\u70b9\u8ddf\u8fdb\u5176\u8c03\u7528\u6d41\u7a0b\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230 ActivityThread\u5bf9\u5e94\u7684 Handle\u65b9\u6cd5 \u548c Perform\u65b9\u6cd5 \u3002</p> <p>\u5173\u4e8e\u6267\u884c Activity \u751f\u547d\u5468\u671f\u7684\u76f8\u5173 item \u5982\u4e0b\uff1a</p> Lifecycle Item Handle\u65b9\u6cd5 Perform\u65b9\u6cd5 ON_CREATE LaunchActivityItem handleLaunchActivity performLaunchActivity ON_START StartActivityItem handleStartActivity \u65e0 ON_RESUME ResumeActivityItem handleResumeActivity performResumeActivity ON_PAUSE PauseActivityItem handlePauseActivity performPauseActivity ON_STOP StopActivityItem handleStopActivity performStopActivityInner ON_DESTROY DestroyActivityItem handleDestroyActivity performDestroyActivity","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/","title":"Activity\u6846\u67b602-ActivityClientRecord","text":"<p>Tip</p> <p>\u57fa\u4e8e android-14.0.0_r45</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#_1","title":"\u80cc\u666f","text":"<p>\u51b7\u542f\u52a8 Activity\u00a0\u5176\u751f\u547d\u5468\u671f \u4f9d\u6b21\u662f\u00a0</p> <ul> <li>onCreate()</li> <li>onStart()</li> <li>onResume()</li> </ul> <p>\u5728\u524d\u9762\u7684 Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u5206\u6790\u4e2d\uff0c\u5728 ActivityThread \u5bf9\u5e94\u7684 Handle\u65b9\u6cd5\u4e2d\u63a5\u53d7\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f ActivityClientRecord \u7c7b\u578b\u3002</p> <p>\u90a3\u8fd9\u4e2a ActivityClientRecord \u662f\u54ea\u91cc\u6765\u7684\u5462\uff0c\u6bcf\u4e00\u4e2a Handle\u65b9\u6cd5\u63a5\u6536\u5230\u7684 ActivityClientRecord \u90fd\u662f\u540c\u4e00\u4e2a\u5417\uff1f</p> <p>\u6211\u4eec\u5148\u770b\u770b ActivityClientRecord \uff0c\u76ee\u524d\u4e0d\u77e5\u9053\u8fd9\u4e2a ActivityClientRecord \u5b58\u5728\u7684\u610f\u4e49\uff0c\u5148\u4e0d\u7ba1\u3002</p> <pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    /**\n     * Activity client record, used for bookkeeping for the real {@link Activity} instance.\n     */\n    public static final class ActivityClientRecord {\n        @UnsupportedAppUsage\n        public IBinder token;\n\n\n        public ActivityClientRecord(IBinder token, Intent intent, int ident,\n                                    ActivityInfo info, Configuration overrideConfig,\n                                    String referrer, IVoiceInteractor voiceInteractor, Bundle state,\n                                    PersistableBundle persistentState, List&lt;ResultInfo&gt; pendingResults,\n                                    List&lt;ReferrerIntent&gt; pendingNewIntents, ActivityOptions activityOptions,\n                                    boolean isForward, ProfilerInfo profilerInfo, ClientTransactionHandler client,\n                                    IBinder assistToken, IBinder shareableActivityToken, boolean launchedFromBubble,\n                                    IBinder taskFragmentToken) {\n            this.token = token;\n\n            ...\n        }\n\n        ...\n    }\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#_2","title":"\u5012\u63a8","text":"<p>\u6839\u636e  Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u53ef\u77e5\uff0c\u5728 ActivityThread \u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2a Handle\u65b9\u6cd5\u63a5\u6536\u5230\u7684 ActivityClientRecord \u90fd\u662f\u4ece\u5bf9\u5e94\u7684 item \u7684 execute() \u5f97\u6765\u7684\u3002</p> <p>\u90a3\u6211\u4eec\u5c31\u5148\u4ece LaunchActivityItem.execute() \u8fd9\u91cc\u5165\u624b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#launchactivityitemexecute","title":"LaunchActivityItem.execute()","text":"<pre><code>public class LaunchActivityItem extends ClientTransactionItem {  \n    @Override  \n    public void execute(ClientTransactionHandler client, IBinder token,  \n            PendingTransactionActions pendingActions) {  \n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");  \n        ActivityClientRecord r = new ActivityClientRecord(token, mIntent, mIdent, mInfo,  \n                mOverrideConfig, mReferrer, mVoiceInteractor, mState, mPersistentState,  \n                mPendingResults, mPendingNewIntents, mActivityOptions, mIsForward, mProfilerInfo,  \n                client, mAssistToken, mShareableActivityToken, mLaunchedFromBubble,  \n                mTaskFragmentToken);  \n        client.handleLaunchActivity(r, pendingActions, mDeviceId, null /* customIntent */);  \n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);  \n    }\n}\n</code></pre> <p>\u8fd9\u91cc new \u4e86\u4e00\u4e2a ActivityClientRecord\uff0c\u5e76\u901a\u8fc7 handleLaunchActivity() \u51fd\u6570\u628a ActivityClientRecord \u4f20\u5230 ActivityThread\u3002</p> <p>\u521b\u5efa ActivityClientRecord \u65f6\uff0c\u4f20\u4e86\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684 IBinder \u5bf9\u8c61 token\u3002 \u6839\u636e  Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u53ef\u77e5\uff0c\u4e2d TransactionExecutor.executeCallbacks() \u4f1a\u901a\u8fc7 ClientTransaction.getActivityToken() \u83b7\u53d6\u5230 token \u3002 \u90a3\u4e48\u8fd9\u4e2a ClientTransaction \u7684\u8fd9\u4e2a mActivityToken \u53c8\u662f\u54ea\u91cc\u6765\u7684\u5462\uff1f\u5148\u7559\u4e00\u4e2a\u7591\u95ee\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitythreadhandlelaunchactivity","title":"ActivityThread.handleLaunchActivity()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    @Override\n    public Activity handleLaunchActivity(ActivityClientRecord r,\n            PendingTransactionActions pendingActions, int deviceId, Intent customIntent) {\n        ...\n\n        final Activity a = performLaunchActivity(r, customIntent);\n\n        ...\n\n        return a;\n    }\n}\n</code></pre> <p>\u6211\u4eec\u4e0d\u6df1\u5165\u5206\u6790\uff0c\u5148\u770b\u4e3b\u6d41\u7a0b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitythreadperformlaunchactivity","title":"ActivityThread.performLaunchActivity()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    @UnsupportedAppUsage  \n    final ArrayMap&lt;IBinder, ActivityClientRecord&gt; mActivities = new ArrayMap&lt;&gt;();  \n\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {   \n\n        ...  \n\n        try {  \n\n            // updatePendingActivityConfiguration() reads from mActivities to update  \n            // ActivityClientRecord which runs in a different thread. Protect modifications to            \n            // mActivities to avoid race.            \n            synchronized (mResourcesManager) {  \n                mActivities.put(r.token, r);  \n            }  \n\n            ...  \n\n            r.setState(ON_CREATE);  \n\n        } catch (SuperNotCalledException e) {  \n            ...  \n        } catch (Exception e) {  \n            ...  \n        }  \n\n        return activity;  \n    }  \n}\n</code></pre> <p>\u628a ActivityClientRecord \u5b58\u5728 mActivities \u8fd9\u4e2a map \u4e2d\uff0ckey \u662f ActivityClientRecord \u7684 token\uff0cvalue \u662f ActivityClientRecord\u3002</p> <p>\u76ee\u524d\u6211\u4eec\u77e5\u9053\u4e86 LaunchActivityItem \u521b\u5efa\u7684 ActivityClientRecord \u662f\u5b58\u5728 ActivityThread \u7684 mActivities \u4e2d\u3002</p> <p>\u90a3\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u53e6\u4e00\u4e2a item \u7684 execute() \u5230\u5e95\u662f\u521b\u5efa\u65b0\u7684 ActivityClientRecord \u8fd8\u662f\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u83b7\u53d6\u5230 ActivityClientRecord \u7684\uff1f</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#resumeactivityitemexecute","title":"ResumeActivityItem.execute()","text":"<pre><code>public class ResumeActivityItem extends ActivityLifecycleItem {\n\n    @Override\n    public void execute(@NonNull ClientTransactionHandler client, @NonNull ActivityClientRecord r,\n            @NonNull PendingTransactionActions pendingActions) {\n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityResume\");\n        client.handleResumeActivity(r, true /* finalStateRequest */, mIsForward,\n                mShouldSendCompatFakeFocus, \"RESUME_ACTIVITY\");\n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u8ddf LaunchActivityItem \u7684 execute() \u65b9\u6cd5\u4e0d\u4e00\u6837\u4e86\u3002\u76f4\u63a5\u4f20\u4e00\u4e2a ActivityClientRecord \u7ed9 ActivityThread \u7684 handleResumeActivity()\u3002</p> <p>\u6211\u4eec\u53ea\u80fd\u53bb\u770b ResumeActivityItem \u7684\u7236\u7c7b\u4e86\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitytransactionitemexecute","title":"ActivityTransactionItem.execute()","text":"<pre><code>public abstract class ActivityTransactionItem extends ClientTransactionItem {  \n\n    @Override  \n    public final void execute(ClientTransactionHandler client, IBinder token,  \n            PendingTransactionActions pendingActions) {  \n        final ActivityClientRecord r = getActivityClientRecord(client, token);  \n\n        execute(client, r, pendingActions);  \n    }  \n\n    /**  \n     * Like {@link #execute(ClientTransactionHandler, IBinder, PendingTransactionActions)},  \n     * but take non-null {@link ActivityClientRecord} as a parameter.  \n     */@VisibleForTesting(visibility = PACKAGE)  \n    public abstract void execute(@NonNull ClientTransactionHandler client,  \n            @NonNull ActivityClientRecord r, PendingTransactionActions pendingActions);  \n\n    /**  \n     * Gets the {@link ActivityClientRecord} instance that corresponds to the provided token.  \n     * @param client Target client handler.  \n     * @param token Target activity token.  \n     * @return The {@link ActivityClientRecord} instance that corresponds to the provided token.  \n     */@NonNull ActivityClientRecord getActivityClientRecord(  \n            @NonNull ClientTransactionHandler client, IBinder token) {  \n        final ActivityClientRecord r = client.getActivityClient(token);  \n        if (r == null) {  \n            throw new IllegalArgumentException(\"Activity client record must not be null to execute \"  \n                    + \"transaction item: \" + this);  \n        }  \n        if (client.getActivity(token) == null) {  \n            throw new IllegalArgumentException(\"Activity must not be null to execute \"  \n                    + \"transaction item: \" + this);  \n        }  \n        return r;  \n    }  \n\n}\n</code></pre> <p>\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 getActivityClientRecord() \u51fd\u6570\uff0c\u901a\u8fc7 token \u83b7\u53d6\u4e86 ActivityClientRecord\u3002</p> <p>ClientTransactionHandler \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u800c ActivityThread \u7ee7\u627f ClientTransactionHandler\u3002</p> <p>\u6240\u4ee5 client.getActivityClient() \u5176\u5b9e\u5c31\u662f ActivityThread.getActivityClient() \u3002</p> <p>\u6839\u636e  Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u53ef\u77e5\uff0c\u4e2d TransactionExecutor.executeLifecycleState() \u4f1a\u901a\u8fc7 ClientTransaction.getActivityToken() \u83b7\u53d6\u5230 token \u3002</p> <p>\u6240\u4ee5\u4e5f\u610f\u5473\u7740\u8ddf LaunchActivityItem.execute() \u83b7\u53d6\u7684 token \u6765\u6e90\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8fd9\u91cc\u7684\u4ee3\u7801\u6bd4 android-14.0.0_r30 \u6e05\u6670\u591a\u4e86\uff0c\u4e4b\u524d android-14.0.0_r30 \u5199\u5f97\u6709\u70b9\u7ed5\u3002 \u867d\u7136\u5230\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u77e5\u9053\u90fd\u662f\u540c\u4e00\u4e2a token \u4e86\uff0c\u4f46\u65e2\u7136\u90fd\u5206\u6790\u4e86\uff0c\u7d22\u6027\u7ee7\u7eed\u5206\u6790\u8fd9\u91cc\u7684 mActivityToken \u662f\u4ec0\u4e48\u5427\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitythreadgetactivityclient","title":"ActivityThread.getActivityClient()","text":"<pre><code>@Override  \npublic ActivityClientRecord getActivityClient(IBinder token) {  \n    return mActivities.get(token);  \n}\n</code></pre> <p>\u770b\u5230\u8fd9\u4e2a\u4ee3\u7801\uff0c\u7ed3\u6848\u4e86\u3002\u57fa\u672c\u4e0a\u53ef\u4ee5\u731c\u6d4b\u5728 LaunchActivityItem \u65f6\u521b\u5efa\u4e00\u4e2a ActivityClientRecord\uff0c\u7136\u540e\u4fdd\u5b58\u5728 ActivityThread \u7684 mActivities \u4e2d\u3002\u540e\u9762\u7684\u751f\u547d\u5468\u671f\u90fd\u662f\u901a\u8fc7 ActivityThread.getActivityClient() \u65b9\u6cd5\u83b7\u53d6\u5230\u8fd9\u4e2a ActivityClientRecord \u3002</p> <p>\u8981\u8ffd\u6eaf mActivityToken \u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u5f97\u56de\u5230  Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u6700\u521d\u7684\u51fd\u6570 ActivityTaskSupervisor.realStartActivityLocked()\uff0c\u56e0\u4e3a LaunchActivityItem \u548c ResumeActivityItem \u662f\u90a3\u4e2a\u65f6\u5019\u88ab\u521b\u5efa\u8d77\u6765\u7684\u3002</p> <p>\u800c ActivityTaskSupervisor.realStartActivityLocked() \u51fd\u6570\u91cc\u7684 r.token\uff0c\u662f\u5728\u521b\u5efa\u4e00\u4e2a ActivityRecord \u7684\u65f6\u5019\u521b\u5efa\u7684\u3002</p> <p>\u8fd9\u4e2a\u7ed3\u8bba\u6211\u4eec\u4e0d\u518d\u63a8\u5bfc\uff0c\u518d\u540e\u7eed\u7684\u6587\u7ae0\u4e2d\u6211\u4eec\u4f1a\u8bb2\u5230\u3002 \u6211\u4eec\u76f4\u63a5\u4ece ActivityStarter.executeRequest() \u5165\u624b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#token","title":"token\u6765\u6e90","text":"","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitystarterexecuterequest","title":"ActivityStarter.executeRequest()","text":"<pre><code>class ActivityStarter {  \n\n    private int executeRequest(Request request) {  \n\n        ...  \n\n        final ActivityRecord r = new ActivityRecord.Builder(mService)  \n                .setCaller(callerApp)  \n                .setLaunchedFromPid(callingPid)  \n                .setLaunchedFromUid(callingUid)  \n                .setLaunchedFromPackage(callingPackage)  \n                .setLaunchedFromFeature(callingFeatureId)  \n                .setIntent(intent)  \n                .setResolvedType(resolvedType)  \n                .setActivityInfo(aInfo)  \n                .setConfiguration(mService.getGlobalConfiguration())  \n                .setResultTo(resultRecord)  \n                .setResultWho(resultWho)  \n                .setRequestCode(requestCode)  \n                .setComponentSpecified(request.componentSpecified)  \n                .setRootVoiceInteraction(voiceSession != null)  \n                .setActivityOptions(checkedOptions)  \n                .setSourceRecord(sourceRecord)  \n                .build();  \n\n        ...  \n\n    }  \n}\n</code></pre> <p>ActivityStarter.executeRequest() \u4f1a\u521b\u5efa\u4e00\u4e2a ActivityRecord\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#new-activityrecord","title":"new ActivityRecord()","text":"<pre><code>final class ActivityRecord extends WindowToken implements WindowManagerService.AppFreezeListener {  \n\n    private ActivityRecord(ActivityTaskManagerService _service, WindowProcessController _caller,  \n                           int _launchedFromPid, int _launchedFromUid, String _launchedFromPackage,  \n                           @Nullable String _launchedFromFeature, Intent _intent, String _resolvedType,  \n                           ActivityInfo aInfo, Configuration _configuration, com.android.server.wm.ActivityRecord _resultTo,  \n                           String _resultWho, int _reqCode, boolean _componentSpecified,  \n                           boolean _rootVoiceInteraction, ActivityTaskSupervisor supervisor,  \n                           ActivityOptions options, com.android.server.wm.ActivityRecord sourceRecord, PersistableBundle persistentState,  \n                           TaskDescription _taskDescription, long _createTime) {  \n        // \u8c03\u7528\u7236\u7c7b WindowToken \u7684\u6784\u9020\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5176\u4e2d\u5305\u62ec\u7a97\u53e3\u7ba1\u7406\u670d\u52a1\u3001Token \u7c7b\u578b\u7b49\u4fe1\u606f\u3002  \n        super(_service.mWindowManager, new Token(), TYPE_APPLICATION, true,  \n                null /* displayContent */, false /* ownerCanManageAppTokens */);  \n\n        // \u5c06\u5f53\u524d ActivityRecord \u7684\u5f31\u5f15\u7528\u8d4b\u503c\u7ed9 token \u7684 mActivityRef\n        ((Token) token).mActivityRef = new WeakReference&lt;&gt;(this);  \n    }  \n\n     private static class Token extends Binder {  \n        // \u4fdd\u5b58 ActivityRecord \u7684\u5f31\u5f15\u7528\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002  \n        @NonNull WeakReference&lt;ActivityRecord&gt; mActivityRef;  \n\n    }  \n\n    static class Builder {  \n        ActivityRecord build() {  \n            if (mConfiguration == null) {  \n                mConfiguration = mAtmService.getConfiguration();  \n            }  \n            return new ActivityRecord(mAtmService, mCallerApp, mLaunchedFromPid,  \n                    mLaunchedFromUid, mLaunchedFromPackage, mLaunchedFromFeature, mIntent,  \n                    mResolvedType, mActivityInfo, mConfiguration, mResultTo, mResultWho,  \n                    mRequestCode, mComponentSpecified, mRootVoiceInteraction,  \n                    mAtmService.mTaskSupervisor, mOptions, mSourceRecord, mPersistentState,  \n                    mTaskDescription, mCreateTime);  \n        }  \n    }  \n}\n</code></pre> <p>\u5f53\u542f\u52a8\u4e00\u4e2a\u65b0\u7684 Activity \u65f6\uff0c\u7cfb\u7edf\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ActivityRecord \u5b9e\u4f8b\u6765\u8868\u793a\u8fd9\u4e2a\u6d3b\u52a8\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\u4efb\u52a1\u6808\u4e2d\u3002 \u800c\u8fd9\u91cc\u6b63\u597d\u662f\u5728 ActivityRecord \u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a Token\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#windowtokentoken","title":"WindowToken.token","text":"<pre><code>class WindowToken extends WindowContainer&lt;WindowState&gt; {  \n\n    /** The actual token */  \n    final IBinder token;  \n\n    protected WindowToken(WindowManagerService service, IBinder _token, int type,  \n                          boolean persistOnEmpty, DisplayContent dc, boolean ownerCanManageAppTokens) {  \n        this(service, _token, type, persistOnEmpty, dc, ownerCanManageAppTokens,  \n                false /* roundedCornerOverlay */, false /* fromClientToken */, null /* options */);  \n    }  \n\n    protected WindowToken(WindowManagerService service, IBinder _token, int type,  \n            boolean persistOnEmpty, DisplayContent dc, boolean ownerCanManageAppTokens,  \n            boolean roundedCornerOverlay, boolean fromClientToken, @Nullable Bundle options) {  \n        super(service);  \n        token = _token;  \n        ...  \n    }  \n}\n</code></pre> <p>\u770b\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u4e86\uff0cActivityRecord \u6784\u9020\u51fd\u6570\u521b\u5efa\u7684 Token \u4fdd\u5b58\u5728 WindowToken \u51fd\u6570\u7684\u6210\u5458 token \u53d8\u91cf\u4e2d\u3002</p> <p>\u4e2d\u95f4\u7684\u4e00\u7cfb\u5217\u6d41\u7a0b\u6211\u4eec\u4e5f\u4e0d\u518d\u5012\u63a8\u4e86\uff0c\u76f4\u63a5\u8df3\u7ea7\u5230 ActivityTaskSupervisor.realStartActivityLocked() \u4e2d\u3002</p> <p>\u540e\u7eed\u6587\u7ae0\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitytasksupervisorrealstartactivitylocked","title":"ActivityTaskSupervisor.realStartActivityLocked()","text":"<pre><code>public class ActivityTaskSupervisor implements RecentTasks.Callbacks {\n\n    boolean realStartActivityLocked(ActivityRecord r, WindowProcessController proc,  \n            boolean andResume, boolean checkConfig) throws RemoteException {  \n\n        ...  \n\n        // Create activity launch transaction.  \n        final ClientTransaction clientTransaction = ClientTransaction.obtain(  \n                proc.getThread(), r.token);  \n\n        final boolean isTransitionForward = r.isTransitionForward();  \n        final IBinder fragmentToken = r.getTaskFragment().getFragmentToken();  \n\n        final int deviceId = getDeviceIdForDisplayId(r.getDisplayId());  \n        clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),  \n                System.identityHashCode(r), r.info,  \n                // TODO: Have this take the merged configuration instead of separate global  \n                // and override configs.  \n                mergedConfiguration.getGlobalConfiguration(),  \n                mergedConfiguration.getOverrideConfiguration(), deviceId,  \n                r.getFilteredReferrer(r.launchedFromPackage), task.voiceInteractor,  \n                proc.getReportedProcState(), r.getSavedState(), r.getPersistentSavedState(),  \n                results, newIntents, r.takeOptions(), isTransitionForward,  \n                proc.createProfilerInfoIfNeeded(), r.assistToken, activityClientController,  \n                r.shareableActivityToken, r.getLaunchedFromBubble(), fragmentToken));  \n\n        // Set desired final state.  \n        final ActivityLifecycleItem lifecycleItem;  \n        if (andResume) {  \n            lifecycleItem = ResumeActivityItem.obtain(isTransitionForward,  \n                    r.shouldSendCompatFakeFocus());  \n        } else {  \n            lifecycleItem = PauseActivityItem.obtain();  \n        }  \n        clientTransaction.setLifecycleStateRequest(lifecycleItem);  \n\n        // Schedule transaction.  \n        mService.getLifecycleManager().scheduleTransaction(clientTransaction);  \n        ...  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc\u7684 r \u5c31\u662f ActivityRecord\uff0c\u6240\u4ee5 r.token \u5c31\u662f WindowToken \u51fd\u6570\u7684\u6210\u5458 token \u53d8\u91cf\u3002</p> <p>\u8fd9\u4e2a\u51fd\u6570\u4e5f\u80fd\u770b\u5230 ClientTransaction.obtain() \u4f20\u7684\u53c2\u6570\u662f r.token \u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#clienttransactionobtain","title":"ClientTransaction.obtain()","text":"<pre><code>/**\n * \u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u6d88\u606f\u7684\u5bb9\u5668\uff0c\u8fd9\u4e9b\u6d88\u606f\u53ef\u80fd\u4f1a\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002\n * \u5305\u62ec\u4e00\u4e2a\u56de\u8c03\u5217\u8868\u548c\u4e00\u4e2a\u6700\u7ec8\u7684\u751f\u547d\u5468\u671f\u72b6\u6001\u3002\n *\n * @see com.android.server.am.ClientLifecycleManager\n * @see ClientTransactionItem\n * @see ActivityLifecycleItem\n * @hide\n */\npublic class ClientTransaction implements Parcelable, ObjectPoolItem {\n\n\n    /** \u76ee\u6807\u5ba2\u6237\u7aef\u6d3b\u52a8\u3002\u5982\u679c\u6574\u4e2a\u4e8b\u52a1\u76ee\u6807\u662f\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u80fd\u4e3a\u7a7a\u3002 */\n    private IBinder mActivityToken;\n\n    public static ClientTransaction obtain(IApplicationThread client, IBinder activityToken) {\n        // \u4ece\u5bf9\u8c61\u6c60\u4e2d\u83b7\u53d6\u4e00\u4e2a ClientTransaction \u5b9e\u4f8b\n        ClientTransaction instance = ObjectPool.obtain(ClientTransaction.class);\n\n        // \u5982\u679c\u5bf9\u8c61\u6c60\u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u5b9e\u4f8b\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\n        if (instance == null) {\n            instance = new ClientTransaction();\n        }\n\n        // \u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u5c5e\u6027\n        instance.mClient = client;\n        instance.mActivityToken = activityToken;\n\n        // \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\u5b9e\u4f8b\n        return instance;\n    }\n\n    /**\n     * \u83b7\u53d6\u76ee\u6807\u6d3b\u52a8\u3002\n     * @return \u76ee\u6807\u6d3b\u52a8\u6807\u8bc6\u7b26\u3002\n     */\n    @Nullable @UnsupportedAppUsage \n    public IBinder getActivityToken() {\n        return mActivityToken;\n    }\n\n}\n</code></pre> <p>mActivityToken \u5c31\u662f\u4f20\u8fdb\u6765\u7684 r.token \uff0c\u4e5f\u5c31\u662f WindowToken \u91cc\u7684\u6210\u5458\u53d8\u91cf token\u3002</p> <p>\u5230\u8fd9\u91cc\u771f\u6b63\u7684\u7ed3\u6848\u4e86\uff0c \u6240\u6709\u7684\u5730\u65b9\u6700\u7ec8\u90fd\u662f\u901a\u8fc7 ClientTransaction.getActivityToken() \u83b7\u53d6\u5230\u7684\u90fd\u662f\u540c\u4e00\u4e2atoken\uff0c\u4e5f\u5c31\u662f ActivityRecord \u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u7684\u90a3\u4e2a Token\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activityrelaunchitem","title":"\u7279\u6b8a\u7684ActivityRelaunchItem","text":"<p>\u867d\u7136 ActivityRelaunchItem \u4e5f\u662f ActivityTransactionItem \u7684\u5b50\u7c7b\uff0c\u4f46 ActivityTransactionItem \u8ddf\u5176\u4ed6\u5b50\u7c7b\u4e0d\u592a\u4e00\u6837\u3002 ActivityRelaunchItem.execute() \u4e2d\u5e76\u4e0d\u662f\u4e00\u76f4\u901a\u8fc7\u7236\u7c7b\u62ff\u5230 ActivityClientRecord \u7684\u3002\u800c\u662f\u901a\u8fc7\u5176 preExecute() \u51fd\u6570\u53bb\u62ff\u5230 ActivityClientRecord\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activityrelaunchitempreexecute","title":"ActivityRelaunchItem.preExecute()","text":"<pre><code>public class ActivityRelaunchItem extends ActivityTransactionItem {\n\n    private ActivityClientRecord mActivityClientRecord;  \n\n    @Override  \n    public void preExecute(@NonNull ClientTransactionHandler client) {  \n        // The local config is already scaled so only apply if this item is from server side.  \n        if (!client.isExecutingLocalTransaction()) {  \n            CompatibilityInfo.applyOverrideScaleIfNeeded(mConfig);  \n        }  \n        mActivityClientRecord = client.prepareRelaunchActivity(getActivityToken(), mPendingResults,  \n                mPendingNewIntents, mConfigChanges, mConfig, mPreserveWindow);  \n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c\u662f\u901a\u8fc7 ActivityThread.prepareRelaunchActivity() \u53bb\u62ff\u5230 ActivityClientRecord\uff0c\u5e76\u4e14\u4f20\u7ed9 prepareRelaunchActivity() \u51fd\u6570\u7684\u662f getActivityToken()\u3002</p> <p>\u4ece\u524d\u9762\u5206\u6790\u77e5\u9053\uff0c\u8fd9\u91cc\u7684 getActivityToken() \u8ddf\u522b\u7684\u5b50\u7c7b\u90fd\u662f\u540c\u4e00\u4e2a IBinder\u7684\uff0c\u4e5f\u5c31\u662f ActivityTransactionItem \u4e2d\u7684 mActivityToken\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activitythreadpreparerelaunchactivity","title":"ActivityThread.prepareRelaunchActivity()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    @Override  \n    public ActivityClientRecord prepareRelaunchActivity(IBinder token,  \n                                                        List&lt;ResultInfo&gt; pendingResults,  \n                                                        List&lt;ReferrerIntent&gt; pendingNewIntents,  \n                                                        int configChanges,  \n                                                        MergedConfiguration config,  \n                                                        boolean preserveWindow) {  \n        // \u521d\u59cb\u5316\u76ee\u6807 ActivityClientRecord        \n        ActivityClientRecord target = null;  \n        // \u6807\u8bc6\u662f\u5426\u9700\u8981\u8c03\u5ea6\u91cd\u65b0\u542f\u52a8\u7684\u6807\u5fd7  \n        boolean scheduleRelaunch = false;  \n\n        synchronized (mResourcesManager) {  \n            // \u904d\u5386\u6b63\u5728\u91cd\u65b0\u542f\u52a8\u7684\u6d3b\u52a8\u5217\u8868  \n            for (int i = 0; i &lt; mRelaunchingActivities.size(); i++) {  \n                ActivityClientRecord r = mRelaunchingActivities.get(i);  \n                // \u68c0\u67e5\u5f53\u524d\u8bb0\u5f55\u7684token\u662f\u5426\u5339\u914d  \n                if (r.token == token) {  \n                    target = r;  \n                    ...  \n                    break;  \n                }  \n            }  \n\n            // \u5982\u679c\u672a\u627e\u5230\u5339\u914d\u7684ActivityClientRecord  \n            if (target == null) {  \n                // \u521b\u5efa\u65b0\u7684ActivityClientRecord  \n                target = new ActivityClientRecord();  \n                target.token = token;  \n                target.pendingResults = pendingResults;  \n                target.pendingIntents = pendingNewIntents;  \n                target.mPreserveWindow = preserveWindow;  \n                // \u5c06\u65b0\u7684\u8bb0\u5f55\u6dfb\u52a0\u5230\u91cd\u65b0\u542f\u52a8\u6d3b\u52a8\u5217\u8868\u4e2d  \n                mRelaunchingActivities.add(target);  \n                scheduleRelaunch = true;  \n            }  \n            // \u66f4\u65b0\u76ee\u6807\u8bb0\u5f55\u7684\u914d\u7f6e  \n            target.createdConfig = config.getGlobalConfiguration();  \n            target.overrideConfig = config.getOverrideConfiguration();  \n            target.pendingConfigChanges |= configChanges;  \n        }  \n\n        // \u8fd4\u56de\u65b0\u7684\u76ee\u6807\u8bb0\u5f55\u5982\u679c\u9700\u8981\u8c03\u5ea6\u91cd\u65b0\u542f\u52a8  \n        return scheduleRelaunch ? target : null;  \n    }  \n\n}\n</code></pre> <ul> <li>\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u7684 ActivityClientRecord\uff0c\u5219\u521b\u5efa\u65b0\u7684 ActivityClientRecord\uff0c\u5e76\u8fd4\u56de\u65b0\u521b\u5efa\u7684 ActivityClientRecord</li> <li>\u5982\u679c\u627e\u5230\u5339\u914d\u7684 ActivityClientRecord\uff0c\u5219\u8fd4\u56de\u7a7a\u3002\u4e5f\u5c31\u662f\u4ece\u4e0d\u9700\u8981 relaunch\u3002</li> </ul> <p>\u6240\u4ee5\u9664\u4e86 LaunchActivityItem \u4f1a\u521b\u5efa\u65b0\u7684 ActivityClientRecord \uff0cActivityRelaunchItem \u4e5f\u6709\u53ef\u80fd\u4f1a\u521b\u5efa\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#activityclientrecord","title":"\u79fb\u9664ActivityClientRecord","text":"<p>\u524d\u9762\u7684\u5206\u6790\u6211\u4eec\u77e5\u9053\u4e86\u5728 ActivityThread.performLaunchActivity() \u4e2d\u628a LaunchActivityItem \u521b\u5efa\u7684 ActivityClientRecord \u6dfb\u52a0\u5230 ActivityThread \u7684\u6210\u5458\u53d8\u91cf mActivities \u4e2d\uff0c\u90a3\u662f\u4ec0\u4e48\u65f6\u5019\u79fb\u9664\u7684\u5462\uff1f</p> <p>\u6839\u636e Activity \u7684\u751f\u547d\u5468\u671f\u731c\u6d4b\uff0c\u5e94\u8be5\u662f\u5728 onDestroy() \u7684\u65f6\u5019\u79fb\u9664\u7684\uff0c\u770b\u4ee3\u7801\u679c\u7136\u5982\u6b64\uff1a</p> <pre><code>public class DestroyActivityItem extends ActivityLifecycleItem {\n\n    @Override  \n    public void execute(@NonNull ClientTransactionHandler client, @NonNull ActivityClientRecord r,  \n            @NonNull PendingTransactionActions pendingActions) {  \n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityDestroy\");  \n        client.handleDestroyActivity(r, mFinished, mConfigChanges,  \n                false /* getNonConfigInstance */, \"DestroyActivityItem\");  \n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);  \n    }\n}\n\npublic final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    @Override  \n    public void handleDestroyActivity(ActivityClientRecord r, boolean finishing, int configChanges,  \n                                      boolean getNonConfigInstance, String reason) {  \n        performDestroyActivity(r, finishing, configChanges, getNonConfigInstance, reason);  \n        ...  \n    }  \n\n    void performDestroyActivity(ActivityClientRecord r, boolean finishing,  \n                                int configChanges, boolean getNonConfigInstance, String reason) {  \n        ...  \n        // updatePendingActivityConfiguration() reads from mActivities to update  \n        // ActivityClientRecord which runs in a different thread. Protect modifications to        // mActivities to avoid race.        synchronized (mResourcesManager) {  \n            mActivities.remove(r.token);  \n        }  \n    }  \n\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_client_record/#_3","title":"\u603b\u7ed3","text":"<p>\u5728 app \u7aef Activity \u548c ActivityClientRecord \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u6bcf\u4e00\u4e2a\u5e94\u7528\u5f00\u53d1\u8005\u5b9e\u73b0\u7684 Activity \u5728\u521b\u5efa\u524d\u90fd\u4f1a\u5728 ActivityThread \u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 ActivityClientRecord \u88ab\u521b\u5efa\u3002</p> <p>\u4e5f\u5c31\u662f\u5148\u5728 LaunchActivityItem.execute() \u4e2d\u521b\u5efa ActivityClientRecord \u3002\u4ee5\u521b\u5efa\u51fa\u6765\u7684ActivityClientRecord \u4e3a\u53c2\u6570\u518d\u8c03\u7528 ActivityThread.handleLaunchActivity() \u3002\u6700\u7ec8\u901a\u8fc7\u7c7b\u540d\u53cd\u5c04\u53bb\u521b\u5efa\u5e94\u7528\u5f00\u53d1\u90fd\u5b9e\u73b0\u7684 Activity\uff0c\u5e76\u8ba9 ActivityClientRecord \u6301\u6709\u6b64 Activity \u7684\u5f15\u7528\u3002\u6700\u540e\u518d\u628a ActivityClientRecord \u5b58\u50a8\u5230 mActivities\uff0c\u8fd9\u6837\u4e00\u4e2a\u6253\u5f00\u7684 Activity \u5728\u5e94\u7528\u5c31\u53ef\u4ee5\u88ab\u957f\u671f\u5f15\u7528\u4e86\u3002\u540e\u7eed\u5176\u4ed6\u751f\u547d\u5468\u671f\u7684\u6d41\u8f6c\uff0c\u90fd\u662f\u901a\u8fc7 token \u67e5\u627e\u5230\u5bf9\u5e94 Activity\uff0c\u518d\u8c03\u7528\u5230\u5177\u4f53\u7684\u751f\u547d\u5468\u671f\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/","title":"Activity\u6846\u67b603-ActivityThread","text":"<p>Tip</p> <p>\u57fa\u4e8e android-14.0.0_r45</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#_1","title":"\u80cc\u666f","text":"<p>\u5728 app \u7684\u51b7\u542f\u52a8\u6d41\u7a0b\u4e2d\uff0cAMS \u4f1a\u901a\u8fc7 startProcess() \u65b9\u6cd5\u4e00\u8def\u8c03\u5230 ProcessList.startProcessLocked() \u65b9\u6cd5\uff0c\u5e76\u8bbe\u7f6e entryPoint \u4e3a ActivityThread\uff1b\u5e76\u901a\u8fc7 socket \u901a\u4fe1\u628a\u6d88\u606f\u53d1\u9001\u7ed9 Zygote \u8fdb\u7a0b\u3002</p> <p>Zygote \u8fdb\u7a0b\u7684 ZygoteServer \u63a5\u5230\u4fe1\u606f\u540e\uff0c\u89e3\u6790\u51fa\u4f20\u8fc7\u6765\u7684 entryPoint \u5e76\u4fdd\u5b58\u5728 Arguments \u7684\u6210\u5458\u53d8\u91cf startClass \u4e2d\uff1b\u6700\u7ec8\u901a\u8fc7\u53cd\u5c04\u7684\u65b9\u5f0f\u53bb\u53cd\u5c04\u5176 main() \u65b9\u6cd5\u3002\u4e5f\u5c31\u662f ActivityThread.main() \u3002</p> <p>\u6240\u4ee5 ActivityThread \u662f app \u8fdb\u7a0b\u7684\u4e3b\u5165\u53e3\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#_2","title":"\u7c7b\u56fe","text":"","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythread","title":"ActivityThread","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>1110a52c-3406-4dd9-9668-0efa6f82f8c2</pre> mermaid <pre><code>classDiagram\n\ndirection BT\n\nclass ActivityClientRecord {\n\n+ ActivityClientRecord()\n\n+ ActivityClientRecord(IBinder)\n\n+ IBinder token\n\n~ Activity activity\n\n- int mLifecycleState\n\n- init() void\n\n+ setState(int) void\n\n+ getLifecycleState() int\n\n}\n\nclass ActivityThread {\n\n+ ActivityThread()\n\n~ H mH\n\n~ Instrumentation mInstrumentation\n\n~ ApplicationThread mAppThread\n\n~ Looper mLooper\n\n~ ArrayMap~IBinder, ActivityClientRecord~ mActivities\n\n- performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean, String) void\n\n- sendMessage(int, Object, int, int, boolean) void\n\n+ handleStartActivity(ActivityClientRecord, PendingTransactionActions, ActivityOptions) void\n\n+ handleLaunchActivity(ActivityClientRecord, PendingTransactionActions, int, Intent) Activity?\n\n+ handleResumeActivity(ActivityClientRecord, boolean, boolean, boolean, String) void\n\n- performPauseActivity(ActivityClientRecord, boolean, String, PendingTransactionActions) Bundle?\n\n+ handlePauseActivity(ActivityClientRecord, boolean, boolean, int, boolean, PendingTransactionActions, String) void\n\n+ handleDestroyActivity(ActivityClientRecord, boolean, int, boolean, String) void\n\n+ performResumeActivity(ActivityClientRecord, boolean, String) boolean\n\n~ performDestroyActivity(ActivityClientRecord, boolean, int, boolean, String) void\n\n+ main(String[]) void\n\n- performLaunchActivity(ActivityClientRecord, Intent) Activity\n\n+ getActivity(IBinder) Activity?\n\n~ sendMessage(int, Object) void\n\n+ handleStopActivity(ActivityClientRecord, int, PendingTransactionActions, boolean, String) void\n\n+ getActivityClient(IBinder) ActivityClientRecord\n\n- attach(boolean, long) void\n\n}\n\nclass ApplicationThread {\n\n+ ApplicationThread()\n\n+ bindApplication(String, ApplicationInfo) void\n\n}\n\nclass ClientTransactionHandler {\n\n+ ClientTransactionHandler()\n\n+ getActivity(IBinder) Activity\n\n+ handleStartActivity(ActivityClientRecord, PendingTransactionActions, ActivityOptions) void\n\n+ handleRelaunchActivity(ActivityClientRecord, PendingTransactionActions) void\n\n+ handleResumeActivity(ActivityClientRecord, boolean, boolean, boolean, String) void\n\n~ sendMessage(int, Object) void\n\n+ getActivityClient(IBinder) ActivityClientRecord\n\n+ handleStopActivity(ActivityClientRecord, int, PendingTransactionActions, boolean, String) void\n\n~ scheduleTransaction(ClientTransaction) void\n\n+ handleDestroyActivity(ActivityClientRecord, boolean, int, boolean, String) void\n\n+ handlePauseActivity(ActivityClientRecord, boolean, boolean, int, boolean, PendingTransactionActions, String) void\n\n+ handleLaunchActivity(ActivityClientRecord, PendingTransactionActions, int, Intent) Activity\n\n}\n\nclass Default {\n\n+ Default()\n\n+ bindApplication(String, ApplicationInfo) void\n\n+ asBinder() IBinder\n\n}\n\nclass H {\n\n+ H()\n\n+ int BIND_APPLICATION\n\n+ handleMessage(Message) void\n\n}\n\nclass IApplicationThread {\n\n&lt;&lt;Interface&gt;&gt;\n\n+ bindApplication(String, ApplicationInfo) void\n\n}\n\nclass Proxy {\n\n~ Proxy(IBinder)\n\n- IBinder mRemote\n\n+ bindApplication(String, ApplicationInfo) void\n\n+ asBinder() IBinder\n\n+ getInterfaceDescriptor() String\n\n}\n\nclass Stub {\n\n+ Stub()\n\n+ String DESCRIPTOR\n\n~ int TRANSACTION_bindApplication\n\n+ getDefaultTransactionName(int) String?\n\n+ asInterface(IBinder) IApplicationThread\n\n+ asBinder() IBinder\n\n+ getTransactionName(int) String\n\n+ onTransact(int, Parcel, Parcel, int) boolean\n\n}\n\n\n\nActivityThread --&gt; ActivityClientRecord\n\nActivityThread --&gt; ClientTransactionHandler\n\nActivityThread --&gt; ApplicationThread\n\nApplicationThread --&gt; Stub\n\nIApplicationThread --&gt; Default\n\nDefault ..&gt; IApplicationThread\n\nActivityThread --&gt; H\n\nProxy ..&gt; IApplicationThread\n\nStub --&gt; Proxy\n\nStub ..&gt; IApplicationThread\n\nIApplicationThread --&gt; Stub</code></pre> <p>ActivityThread \u6709\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6210\u5458\u53d8\u91cf\uff1a</p> <ul> <li> <p>mAppThread</p> <p>\u5176\u7c7b\u578b\u4e3a ApplicationThread</p> </li> <li> <p>mH</p> <p>\u5176\u7c7b\u578b\u4e3a Handler</p> </li> <li> <p>mInstrumentation</p> <p>\u5176\u7c7b\u578b\u4e3a Instrumentation</p> </li> <li> <p>mActivities</p> <p>\u5176\u7c7b\u578b\u4e3a ArrayMap <code>&lt;IBinder, ActivityClientRecord&gt;</code></p> </li> </ul> <p>ActivityThread \u7684\u4e24\u4e2a\u5185\u90e8\u7c7b\uff1a</p> <ul> <li>H(Handler)</li> <li>ApplicationThread</li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#instrumentation","title":"Instrumentation","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>17b96fb7-12e8-4ada-a9bb-6490426023e1</pre> mermaid <pre><code>\nclassDiagram\n\ndirection BT\n\nclass Instrumentation {\n\n- Context mAppContext\n\n- ActivityThread mThread\n\n+ callActivityOnCreate(Activity, Bundle) void\n\n+ callActivityOnStop(Activity) void\n\n+ callActivityOnPause(Activity) void\n\n+ getContext() Context\n\n+ callActivityOnPostCreate(Activity, Bundle, PersistableBundle) void\n\n+ callActivityOnPostCreate(Activity, Bundle) void\n\n+ callApplicationOnCreate(Application) void\n\n+ execStartActivity(Context, IBinder, IBinder, Activity, Intent, int, Bundle) ActivityResult\n\n+ newActivity(ClassLoader, String, Intent) Activity\n\n+ callActivityOnDestroy(Activity) void\n\n+ callActivityOnResume(Activity) void\n\n+ callActivityOnCreate(Activity, Bundle, PersistableBundle) void\n\n+ callActivityOnStart(Activity) void\n\n+ newApplication(Class~?~, Context) Application\n\n+ newApplication(ClassLoader, String, Context) Application\n\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythread_1","title":"ActivityThread\u6838\u5fc3\u4ee3\u7801","text":"<p><pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    @UnsupportedAppUsage  \n    final ApplicationThread mAppThread = new ApplicationThread();  \n\n    @UnsupportedAppUsage  \n    final H mH = new H();  \n\n    /**  \n     * The activities to be truly destroyed (not include relaunch).     */    final ArrayMap&lt;IBinder, ActivityClientRecord&gt; mActivities = new ArrayMap&lt;&gt;();  \n\n    @UnsupportedAppUsage  \n    Instrumentation mInstrumentation;  \n\n    public static final class ActivityClientRecord {  \n        @UnsupportedAppUsage  \n        public IBinder token;  \n\n        @UnsupportedAppUsage  \n        Activity activity;  \n\n        @LifecycleState  \n        private int mLifecycleState = PRE_ON_CREATE;  \n\n        public ActivityClientRecord(IBinder token, Intent intent, int ident,  \n                ActivityInfo info, Configuration overrideConfig,  \n                String referrer, IVoiceInteractor voiceInteractor, Bundle state,  \n                PersistableBundle persistentState, List&lt;ResultInfo&gt; pendingResults,  \n                List&lt;ReferrerIntent&gt; pendingNewIntents, ActivityOptions activityOptions,  \n                boolean isForward, ProfilerInfo profilerInfo, ClientTransactionHandler client,  \n                IBinder assistToken, IBinder shareableActivityToken, boolean launchedFromBubble,  \n                IBinder taskFragmentToken) {  \n            this.token = token;  \n        }  \n\n        public int getLifecycleState() {  \n            return mLifecycleState;  \n        }  \n\n        public void setState(@LifecycleState int newLifecycleState) {  \n            mLifecycleState = newLifecycleState;  \n        }  \n    }  \n\n    private class ApplicationThread extends IApplicationThread.Stub {  \n\n\n        @Override  \n        public final void bindApplication(String processName, ApplicationInfo appInfo,  \n                                          String sdkSandboxClientAppVolumeUuid, String sdkSandboxClientAppPackage,  \n                                          ProviderInfoList providerList, ComponentName instrumentationName,  \n                                          ProfilerInfo profilerInfo, Bundle instrumentationArgs,  \n                                          IInstrumentationWatcher instrumentationWatcher,  \n                                          IUiAutomationConnection instrumentationUiConnection, int debugMode,  \n                                          boolean enableBinderTracking, boolean trackAllocation,  \n                                          boolean isRestrictedBackupMode, boolean persistent, Configuration config,  \n                                          CompatibilityInfo compatInfo, Map services, Bundle coreSettings,  \n                                          String buildSerial, AutofillOptions autofillOptions,  \n                                          ContentCaptureOptions contentCaptureOptions, long[] disabledCompatChanges,  \n                                          SharedMemory serializedSystemFontMap,  \n                                          long startRequestedElapsedTime, long startRequestedUptime) {  \n            sendMessage(H.BIND_APPLICATION, data);  \n        }  \n\n    }  \n\n    class H extends Handler {  \n        public static final int BIND_APPLICATION = 110;  \n\n        public void handleMessage(Message msg) {  \n            switch (msg.what) {  \n                case BIND_APPLICATION:  \n                    AppBindData data = (AppBindData) msg.obj;  \n                    handleBindApplication(data);  \n                    break;  \n            }  \n        }  \n    }  \n\n    @UnsupportedAppUsage  \n    private void handleBindApplication(AppBindData data) {  \n\n    }  \n\n    void sendMessage(int what, Object obj) {  \n        sendMessage(what, obj, 0, 0, false);  \n    }  \n\n    private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) {  \n        Message msg = Message.obtain();  \n        msg.what = what;  \n        msg.obj = obj;  \n        msg.arg1 = arg1;  \n        msg.arg2 = arg2;  \n        if (async) {  \n            msg.setAsynchronous(true);  \n        }  \n        mH.sendMessage(msg);  \n    }  \n\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {  \n    }  \n\n    @Override  \n    public Activity handleLaunchActivity(ActivityClientRecord r,  \n                                         PendingTransactionActions pendingActions, int deviceId, Intent customIntent) {  \n        return null;  \n    }  \n\n    public static void main(String[] args) {  \n    }  \n\n}\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801 ActivityThread \u7c7b\u662f\u6211\u5220\u51cf\u540e\u4fdd\u7559\u6838\u5fc3\u90e8\u5206\uff0c\u65b9\u4fbf\u5206\u6790\u3002\u8fd9\u4e2a\u4ee3\u7801\u6211\u5c31\u4e0d\u518d\u89e3\u91ca\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u4ece\u4e00\u4e2a\u4e00\u4e2a\u6848\u4f8b\u4e2d\u5206\u6790\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadmain","title":"ActivityThread.main()","text":"<pre><code>public static void main(String[] args) {  \n    ...  \n\n    // \u521b\u5efaActivityThread\u5b9e\u4f8b  \n    ActivityThread thread = new ActivityThread();  \n    // \u9644\u52a0\u5230ActivityThread\u5b9e\u4f8b\u5e76\u4f20\u9012startSeq  \n    thread.attach(false, startSeq);  \n\n    ...  \n\n    // \u542f\u52a8Looper\u5faa\u73af\uff0c\u5f00\u59cb\u5904\u7406\u6d88\u606f  \n    Looper.loop();  \n\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");  \n}\n</code></pre> <p>\u8fd9\u91cc\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u521b\u5efa ActivityThread \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5176 attach() \u65b9\u6cd5\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadattach","title":"ActivityThread.attach()","text":"<pre><code>private void attach(boolean system, long startSeq) {  \n    ...  \n\n    if (!system) {  \n        ...  \n        final IActivityManager mgr = ActivityManager.getService();  \n        try {  \n            mgr.attachApplication(mAppThread, startSeq);  \n        } catch (RemoteException ex) {  \n            throw ex.rethrowFromSystemServer();  \n        }  \n        ...  \n    } else {  \n        ...  \n    }  \n\n    ...  \n}\n</code></pre> <p>\u901a\u8fc7 IActivityManager \u8ddf AMS \u8fdb\u884c binder \u901a\u8baf\u3002 \u5176\u4e2d mAppThread \u5c31\u662f ActivityThread \u7684\u5185\u90e8\u7c7b ApplicationThread \u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitymanagerserviceattachapplication","title":"ActivityManagerService.attachApplication()","text":"<pre><code>@Override  \npublic final void attachApplication(IApplicationThread thread, long startSeq) {  \n    if (thread == null) {  \n        throw new SecurityException(\"Invalid application interface\");  \n    }  \n    synchronized (this) {  \n        int callingPid = Binder.getCallingPid();  \n        final int callingUid = Binder.getCallingUid();  \n        final long origId = Binder.clearCallingIdentity();  \n        attachApplicationLocked(thread, callingPid, callingUid, startSeq);  \n        Binder.restoreCallingIdentity(origId);  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc\u7684 thread \u5c31\u662f\u524d\u9762\u4f20\u8fdb\u6765\u7684  mAppThread \uff0c\u4e5f\u5c31\u662f ApplicationThread \u3002\u8fd9\u6837 AMS \u5c31\u62ff\u5230\u4e86\u5ba2\u6237\u7aef\u7684 binder \u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u8ddf\u5ba2\u6237\u7aef\u8fdb\u7a0b ipc \u901a\u8baf\u4e86\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#amsactivitythread","title":"AMS\u4e0eActivityThread\u901a\u8baf","text":"<p>\u524d\u9762\u6211\u4eec\u5206\u6790\u5230\u4e86 AMS \u62ff\u5230\u5ba2\u6237\u7aef\u7684 binder \u5bf9\u8c61\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u6765\u5206\u6790 AMS \u662f\u5982\u4f55\u8c03\u7528\u5230\u5ba2\u6237\u7aef\u7684\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitymanagerserviceattachapplicationlocked","title":"ActivityManagerService.attachApplicationLocked()","text":"<pre><code>private void attachApplicationLocked(@NonNull IApplicationThread thread,  \n        int pid, int callingUid, long startSeq) {  \n    ...  \n    try {  \n        ...  \n        if (app.getIsolatedEntryPoint() != null) {  \n            // This is an isolated process which should just call an entry point instead of  \n            // being bound to an application.            thread.runIsolatedEntryPoint(  \n                    app.getIsolatedEntryPoint(), app.getIsolatedEntryPointArgs());  \n        } else if (instr2 != null) {  \n            thread.bindApplication(processName, appInfo,  \n                    app.sdkSandboxClientAppVolumeUuid, app.sdkSandboxClientAppPackage,  \n                    providerList,  \n                    instr2.mClass,  \n                    profilerInfo, instr2.mArguments,  \n                    instr2.mWatcher,  \n                    instr2.mUiAutomationConnection, testMode,  \n                    mBinderTransactionTrackingEnabled, enableTrackAllocation,  \n                    isRestrictedBackupMode || !normalMode, app.isPersistent(),  \n                    new Configuration(app.getWindowProcessController().getConfiguration()),  \n                    app.getCompat(), getCommonServicesLocked(app.isolated),  \n                    mCoreSettingsObserver.getCoreSettingsLocked(),  \n                    buildSerial, autofillOptions, contentCaptureOptions,  \n                    app.getDisabledCompatChanges(), serializedSystemFontMap,  \n                    app.getStartElapsedTime(), app.getStartUptime());  \n        } else {  \n            thread.bindApplication(processName, appInfo,  \n                    app.sdkSandboxClientAppVolumeUuid, app.sdkSandboxClientAppPackage,  \n                    providerList, null, profilerInfo, null, null, null, testMode,  \n                    mBinderTransactionTrackingEnabled, enableTrackAllocation,  \n                    isRestrictedBackupMode || !normalMode, app.isPersistent(),  \n                    new Configuration(app.getWindowProcessController().getConfiguration()),  \n                    app.getCompat(), getCommonServicesLocked(app.isolated),  \n                    mCoreSettingsObserver.getCoreSettingsLocked(),  \n                    buildSerial, autofillOptions, contentCaptureOptions,  \n                    app.getDisabledCompatChanges(), serializedSystemFontMap,  \n                    app.getStartElapsedTime(), app.getStartUptime());  \n        }  \n        ...  \n    } catch (Exception e) {  \n        ...  \n        return;  \n    }  \n}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u53ea\u9700\u77e5\u9053\uff0c\u8fd9\u6bb5\u7a0b\u5e8f\u4f1a\u8d70\u5230 else \u5373\u53ef\u3002</p> <p>\u56e0\u4e3a ApplicationThread \u7ee7\u627f\u4e86 IApplicationThread.Stub \uff0c\u4f7f\u7528\u8fd9\u91cc\u5c31\u53ef\u4ee5\u901a\u8fc7 binder \u8c03\u7528\u5230 ApplicationThread \u7684 bindApplication() \u65b9\u6cd5\u4e2d\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#applicationthreadbindapplication","title":"ApplicationThread.bindApplication()","text":"<p><pre><code>private class ApplicationThread extends IApplicationThread.Stub {  \n\n\n    @Override  \n    public final void bindApplication(String processName, ApplicationInfo appInfo,  \n                                      String sdkSandboxClientAppVolumeUuid, String sdkSandboxClientAppPackage,  \n                                      ProviderInfoList providerList, ComponentName instrumentationName,  \n                                      ProfilerInfo profilerInfo, Bundle instrumentationArgs,  \n                                      IInstrumentationWatcher instrumentationWatcher,  \n                                      IUiAutomationConnection instrumentationUiConnection, int debugMode,  \n                                      boolean enableBinderTracking, boolean trackAllocation,  \n                                      boolean isRestrictedBackupMode, boolean persistent, Configuration config,  \n                                      CompatibilityInfo compatInfo, Map services, Bundle coreSettings,  \n                                      String buildSerial, AutofillOptions autofillOptions,  \n                                      ContentCaptureOptions contentCaptureOptions, long[] disabledCompatChanges,  \n                                      SharedMemory serializedSystemFontMap,  \n                                      long startRequestedElapsedTime, long startRequestedUptime) {  \n\n        ...  \n\n        sendMessage(ActivityThread.H.BIND_APPLICATION, data);  \n    }  \n\n}\n</code></pre> \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 system_server \u8fdb\u7a0b\u7684 AMS \u901a\u8fc7 binder \u8de8\u8fdb\u7a0b\u8c03\u5230\u4e86  ApplicationThread.bindApplication()\uff0c\u4f46\u6b64\u65f6\u662f\u8fd0\u884c\u4e2d binder \u7ebf\u7a0b\u4e2d\u3002</p> <p>\u6240\u4ee5\u9700\u8981\u5207\u5230\u4e3b\u7ebf\u53bb\u64cd\u4f5c\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#_3","title":"\u4e3b\u7ebf\u7a0b","text":"<p>\u5b50\u7ebf\u7a0b\u5207\u6362\u5230\u4e3b\u7ebf\u7a0b\u7684\u64cd\u4f5c\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u505a\u8fc7 Android \u5f00\u53d1\u7684\u5bf9 Handler \u7684\u4f7f\u7528\u90fd\u4e0d\u964c\u751f\u3002</p> <p>\u524d\u9762\u8bb2\u5230\u7684 ApplicationThread.bindApplication() \uff0c\u6700\u540e\u662f\u901a\u8fc7\u8c03\u7528 sendMessage() \u7ed9 Handler \u53d1\u9001\u4e00\u6761\u6d88\u606f\u3002</p> <pre><code>sendMessage(ActivityThread.H.BIND_APPLICATION, data);  \n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadsendmessage","title":"ActivityThread.sendMessage()","text":"<pre><code>private void sendMessage(int what, Object obj, int arg1, int arg2) {  \n    sendMessage(what, obj, arg1, arg2, false);  \n}  \n\nprivate void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) {  \n    Message msg = Message.obtain();  \n    msg.what = what;  \n    msg.obj = obj;  \n    msg.arg1 = arg1;  \n    msg.arg2 = arg2;  \n    if (async) {  \n        msg.setAsynchronous(true);  \n    }  \n    mH.sendMessage(msg);  \n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mH \u5c31\u662f ActivityThread \u7684\u4e00\u4e2a\u5185\u90e8\u7c7b H(Handler)</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#hhandlemessage","title":"H.handleMessage()","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    @UnsupportedAppUsage  \n    final H mH = new H();  \n\n    class H extends Handler {  \n        public static final int BIND_APPLICATION        = 110;  \n\n        public void handleMessage(Message msg) {  \n            switch (msg.what) {  \n                case BIND_APPLICATION:  \n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");  \n                    AppBindData data = (AppBindData)msg.obj;  \n                    handleBindApplication(data);  \n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);  \n                    break;  \n            }  \n        }  \n    }  \n}\n</code></pre> <p>H \u7c7b\u63a5\u5230\u6d88\u606f\u540e\uff0c\u8c03\u7528 ActivityThread.handleBindApplication()\u3002 \u6240\u4ee5 handleBindApplication() \u65b9\u6cd5\u5c31\u8fd0\u884c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u4e86\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#instrumentation_1","title":"Instrumentation","text":"<p>Instrumentation \u7684\u521d\u59cb\u5316\u5c31\u662f\u5728 ActivityThread.handleBindApplication() \u4e2d\u8fdb\u884c\u7684\u3002</p> <pre><code>private void handleBindApplication(AppBindData data) {  \n\n    ...  \n\n    // Instrumentation info affects the class loader, so load it before  \n    // setting up the app context.    final InstrumentationInfo ii;  \n    if (data.instrumentationName != null) {  \n        ii = prepareInstrumentation(data);  \n    } else {  \n        ii = null;  \n    }  \n\n    ...  \n\n    // Continue loading instrumentation.  \n    if (ii != null) {  \n        initInstrumentation(ii, data, appContext);  \n    } else {  \n        mInstrumentation = new Instrumentation();  \n        mInstrumentation.basicInit(this);  \n    }  \n\n\n    try {  \n        ...  \n\n        // Do this after providers, since instrumentation tests generally start their  \n        // test thread at this point, and we don't want that racing.        try {  \n            mInstrumentation.onCreate(data.instrumentationArgs);  \n        }  \n        catch (Exception e) {  \n            throw new RuntimeException(  \n                \"Exception thrown in onCreate() of \"  \n                + data.instrumentationName + \": \" + e.toString(), e);  \n        }  \n        try {  \n            mInstrumentation.callApplicationOnCreate(app);  \n        } catch (Exception e) {  \n            if (!mInstrumentation.onException(app, e)) {  \n                throw new RuntimeException(  \n                  \"Unable to create application \" + app.getClass().getName()  \n                  + \": \" + e.toString(), e);  \n            }  \n        }  \n    } finally {  \n        ...  \n    }  \n    ...  \n}\n</code></pre> <p>AMS \u8c03\u7528 ApplicationThread.bindApplication() \u4f20\u8fdb\u6765\u7684 ComponentName testName \u662f null \uff0c\u6240\u4ee5\u8fd9\u91cc\u7684 data.instrumentationName \u662f null \u3002</p> <p>\u6240\u6709\u8fd9\u6bb5\u4ee3\u7801\u6700\u7ec8\u662f\u8c03</p> <p><pre><code>mInstrumentation = new Instrumentation();  \nmInstrumentation.basicInit(this);\n</code></pre>  \u521d\u59cb\u5316 Instrumentation\u3002</p> <p>\u524d\u9762\u7684\u7c7b\u56fe\u4e5f\u63d0\u5230\u4e86ActivityThread \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6210\u5458\u53d8\u91cf mInstrumentation\u3002 ActivityThread \u8c03\u7528 Activity \u7684\u751f\u547d\u5468\u671f\u5c31\u662f\u901a\u8fc7 Instrumentation \u505a\u4e2a\u6267\u884c\u7684\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadactivity","title":"ActivityThread\u6267\u884cActivity\u751f\u547d\u5468\u671f","text":"<p>\u5728\u524d\u9762\u7684 Activity\u6846\u67b601-\u5ba2\u6237\u7aef\u4e8b\u52a1\u7ba1\u7406 \u5206\u6790\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u4e86 system_server \u4f1a\u901a\u8fc7ClientTransaction \u8c03\u7528\u5230\u6bcf\u4e2a item \u7684 execute()\uff0c\u4ece\u800c\u8d70\u5230 ActivityThread \u53bb\u6267\u884c Activity \u7684\u751f\u547d\u5468\u671f\u3002</p> <p>\u4e4b\u524d\u6211\u4eec\u53ea\u662f\u4e00\u7b14\u5e26\u8fc7\uff0c\u6ca1\u6709\u53bb\u5206\u6790 ActivityThread \u5982\u4f55\u8c03\u7528 Activity \u7684\u751f\u547d\u5468\u671f\uff0c\u8fd9\u6b21\u6211\u4eec\u5c31\u6765\u5206\u6790\u8fd9\u4e00\u7ec6\u8282\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadhandlelaunchactivity","title":"ActivityThread.handleLaunchActivity()","text":"<pre><code>@Override  \npublic Activity handleLaunchActivity(ActivityThread.ActivityClientRecord r,  \n                                     PendingTransactionActions pendingActions, int deviceId, Intent customIntent) {  \n    ...  \n\n    final Activity a = performLaunchActivity(r, customIntent);  \n\n    ...  \n\n    return a;  \n}\n</code></pre> <p>\u6211\u4eec\u63a5\u7740\u770b performLaunchActivity()\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activitythreadperformlaunchactivity","title":"ActivityThread.performLaunchActivity()","text":"<pre><code>private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {  \n    ActivityInfo aInfo = r.activityInfo;  \n\n    ...  \n\n    ContextImpl appContext = createBaseContextForActivity(r);  \n    Activity activity = null;  \n    try {  \n        java.lang.ClassLoader cl = appContext.getClassLoader();  \n        activity = mInstrumentation.newActivity(  \n                cl, component.getClassName(), r.intent);  \n        ...  \n    } catch (Exception e) {  \n        ...  \n    }  \n\n    try {  \n        Application app = r.packageInfo.makeApplicationInner(false, mInstrumentation);  \n\n        ...  \n\n        synchronized (mResourcesManager) {  \n            mActivities.put(r.token, r);  \n        }  \n\n        if (activity != null) {  \n            ...  \n            if (r.isPersistable()) {  \n                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);  \n            } else {  \n                mInstrumentation.callActivityOnCreate(activity, r.state);  \n            }  \n            ...  \n        }  \n        ...  \n    } catch (SuperNotCalledException e) {  \n        ...  \n    } catch (Exception e) {  \n        ...  \n    }  \n\n    return activity;  \n}\n</code></pre> <p>\u8fd9\u91cc\u53ea\u4fdd\u7559 performLaunchActivity() \u6838\u5fc3\u4ee3\u7801\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u5173\u5fc3 Activity\u3002</p> <p>\u9996\u5148\u662f\u901a\u8fc7 Instrumentation.newActivity() \u53bb\u521b\u5efa\u4e00\u4e2a Activity\uff1b\u5176\u6b21\u518d\u901a\u8fc7 Instrumentation.callActivityOnCreate() \u53bb\u8c03\u7528 Activity \u7684 onCreate() \u65b9\u6cd5\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#instrumentationnewactivity","title":"Instrumentation.newActivity()","text":"<pre><code>public Activity newActivity(ClassLoader cl, String className,  \n                            Intent intent)  \n        throws InstantiationException, IllegalAccessException,  \n        ClassNotFoundException {  \n    // \u83b7\u53d6\u5305\u540d\uff0c\u5982\u679cintent\u548c\u5176\u7ec4\u4ef6\u4e0d\u4e3a\u7a7a\uff0c\u5219\u83b7\u53d6\u7ec4\u4ef6\u7684\u5305\u540d\uff0c\u5426\u5219\u4e3anull\n    String pkg = intent != null &amp;&amp; intent.getComponent() != null  \n            ? intent.getComponent().getPackageName() : null;  \n\n    // \u4f7f\u7528\u5305\u540d\u83b7\u53d6\u5bf9\u5e94\u7684AppComponentFactory\uff0c\u5e76\u901a\u8fc7\u5b83\u6765\u5b9e\u4f8b\u5316Activity\n    return getFactory(pkg).instantiateActivity(cl, className, intent);  \n}  \n\n  private AppComponentFactory getFactory(String pkg) {  \n    // \u5982\u679c\u5305\u540d\u4e3anull\uff0c\u8f93\u51fa\u9519\u8bef\u65e5\u5fd7\uff0c\u5e76\u8fd4\u56de\u9ed8\u8ba4\u7684AppComponentFactory\n    if (pkg == null) {  \n        Log.e(TAG, \"No pkg specified, disabling AppComponentFactory\");  \n        return AppComponentFactory.DEFAULT;  \n    }  \n\n    // \u5982\u679cActivityThread\u672a\u521d\u59cb\u5316\uff0c\u8f93\u51fa\u9519\u8bef\u65e5\u5fd7\uff0c\u5e76\u8fd4\u56de\u9ed8\u8ba4\u7684AppComponentFactory\n    if (mThread == null) {  \n        Log.e(TAG, \"Uninitialized ActivityThread, likely app-created Instrumentation,\"  \n                + \" disabling AppComponentFactory\", new Throwable());  \n        return AppComponentFactory.DEFAULT;  \n    }  \n\n    // \u901a\u8fc7\u5305\u540d\u83b7\u53d6LoadedApk\u5bf9\u8c61\n    LoadedApk apk = mThread.peekPackageInfo(pkg, true);  \n    // \u5982\u679c\u83b7\u53d6\u5230\u7684apk\u4e3anull\uff0c\u83b7\u53d6\u7cfb\u7edf\u4e0a\u4e0b\u6587\u7684PackageInfo\n    if (apk == null) apk = mThread.getSystemContext().mPackageInfo;  \n\n    // \u8fd4\u56deapk\u5bf9\u5e94\u7684AppComponentFactory\n    return apk.getAppFactory();  \n}  \n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#appcomponentfactoryinstantiateactivity","title":"AppComponentFactory.instantiateActivity()","text":"<pre><code>public class AppComponentFactory {  \n    /**\n     * \u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8986\u76d6Activity\u7684\u521b\u5efa\u3002\u8fd9\u53ef\u4ee5\u7528\u4e8e\u6267\u884c\u8bf8\u5982\u4f9d\u8d56\u6ce8\u5165\u6216\u7c7b\u52a0\u8f7d\u5668\n     * \u66f4\u6539\u7b49\u64cd\u4f5c\u3002\n     *\n     * &lt;p&gt;\u6b64\u65b9\u6cd5\u4ec5\u7528\u4e8e\u63d0\u4f9b\u5b9e\u4f8b\u5316\u7684\u94a9\u5b50\u3002\u5b83\u4e0d\u4f1a\u63d0\u4f9b\u5bf9Activity\u5bf9\u8c61\u7684\u63d0\u524d\u8bbf\u95ee\u3002\n     * \u8fd4\u56de\u7684\u5bf9\u8c61\u5c1a\u672a\u521d\u59cb\u5316\u4e3aContext\uff0c\u4e0d\u5e94\u7528\u4e8e\u4e0e\u5176\u4ed6Android API\u4ea4\u4e92\u3002\n     *\n     * @param cl        \u7528\u4e8e\u5b9e\u4f8b\u5316\u7684\u9ed8\u8ba4\u7c7b\u52a0\u8f7d\u5668\u3002\n     * @param className \u8981\u5b9e\u4f8b\u5316\u7684\u7c7b\u540d\u3002\n     * @param intent    \u521b\u5efa\u7c7b\u7684Intent\u3002\n     * @return \u65b0\u521b\u5efa\u7684Activity\u5b9e\u4f8b\u3002\n     * @throws InstantiationException \u5982\u679c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u7c7b\u3002\n     * @throws IllegalAccessException \u5982\u679c\u6ca1\u6709\u6743\u9650\u8bbf\u95ee\u7c7b\u6216\u5176\u7a7a\u6784\u9020\u51fd\u6570\u3002\n     * @throws ClassNotFoundException \u5982\u679c\u627e\u4e0d\u5230\u7c7b\u3002\n     */\n    public @NonNull Activity instantiateActivity(@NonNull ClassLoader cl, @NonNull String className,  \n                                                 @Nullable Intent intent)  \n            throws InstantiationException, IllegalAccessException, ClassNotFoundException {  \n        // \u4f7f\u7528\u6307\u5b9a\u7684\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7c7b\uff0c\u5e76\u521b\u5efa\u8be5\u7c7b\u7684\u65b0\u5b9e\u4f8b\n        return (Activity) cl.loadClass(className).newInstance();  \n    }  \n}\n</code></pre> <p>\u4f7f\u7528\u4f20\u5165\u7684\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u6307\u5b9a\u7684\u7c7b\uff0c\u5e76\u901a\u8fc7\u8c03\u7528 newInstance() \u65b9\u6cd5\u521b\u5efa\u8be5\u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#instrumentationcallactivityoncreate","title":"Instrumentation.callActivityOnCreate()","text":"<pre><code>/**\n * \u8c03\u7528\u4e00\u4e2a\u6d3b\u52a8\uff08Activity\uff09\u7684 {@link Activity#onCreate} \u65b9\u6cd5\u3002\n * \u9ed8\u8ba4\u5b9e\u73b0\u53ea\u662f\u7b80\u5355\u5730\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\n *\n * @param activity \u6b63\u5728\u521b\u5efa\u7684\u6d3b\u52a8\u5b9e\u4f8b\u3002\n * @param icicle \u4e4b\u524d\u51bb\u7ed3\u7684\u72b6\u6001\uff08\u6216\u8005\u4e3a null\uff09\uff0c\u5c06\u4f20\u9012\u7ed9 onCreate() \u65b9\u6cd5\u3002\n */\npublic void callActivityOnCreate(Activity activity, Bundle icicle) {\n    // \u5728\u8c03\u7528\u6d3b\u52a8\u7684 onCreate() \u65b9\u6cd5\u4e4b\u524d\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\n    prePerformCreate(activity);\n\n    // \u8c03\u7528\u6d3b\u52a8\u7684 performCreate() \u65b9\u6cd5\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u6d3b\u52a8\u7684 onCreate() \u65b9\u6cd5\u3002\n    activity.performCreate(icicle);\n\n    // \u5728\u8c03\u7528\u6d3b\u52a8\u7684 onCreate() \u65b9\u6cd5\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\n    postPerformCreate(activity);\n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activityperformcreate","title":"Activity.performCreate()","text":"<pre><code>final void performCreate(Bundle icicle) {  \n    performCreate(icicle, null);  \n}  \n\n@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)  \nfinal void performCreate(Bundle icicle, PersistableBundle persistentState) {  \n    ...  \n    if (persistentState != null) {  \n        onCreate(icicle, persistentState);  \n    } else {  \n        onCreate(icicle);  \n    }  \n    ...  \n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#activityoncreate","title":"Activity.onCreate()","text":"<pre><code>@MainThread  \n@CallSuper  \nprotected void onCreate(@Nullable Bundle savedInstanceState) {  \n\n}  \n\npublic void onCreate(@Nullable Bundle savedInstanceState,  \n        @Nullable PersistableBundle persistentState) {  \n    onCreate(savedInstanceState);  \n}\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_thread/#_4","title":"\u603b\u7ed3","text":"<ul> <li> <p>ActivityThread \u7684\u5185\u90e8\u7c7b ApplicationThread \u662f\u7ee7\u627f IApplicationThread.Stub\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 AMS \u4e0e\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u901a\u9053\u3002</p> </li> <li> <p>ActivityThread \u7684\u5185\u90e8\u7c7b H(Handler) \u4e3b\u8981\u662f\u628a binder \u7ebf\u7a0b\u5207\u5230\u4e3b\u7ebf\u7a0b\u518d\u505a\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002</p> </li> <li> <p>ActivityThread \u7684\u5185\u90e8\u7c7b ActivityClientRecord \u662f app \u7aef Activity \u548c ActivityClientRecord \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u5728 Activity\u6846\u67b602-ActivityClientRecord \u6709\u8be6\u7ec6\u5206\u6790\u3002</p> </li> <li> <p>ActivityThread \u901a\u8fc7\u6210\u5458\u53d8\u91cf mInstrumentation \u6765\u521b\u5efa Activity \u5e76\u8c03\u7528\u5176\u751f\u547d\u5468\u671f\u3002</p> </li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/","title":"Activity\u6846\u67b604-Activity\u548cContext\u7684\u5173\u7cfb","text":"<p>Tip</p> <p>\u57fa\u4e8e android-14.0.0_r45</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#_1","title":"\u80cc\u666f","text":"<p>\u63a5\u89e6\u8fc7 Android \u7684\u540c\u5b66\uff0c\u5bf9 Context \u90fd\u4e0d\u4f1a\u964c\u751f\uff0c\u6709\u5927\u91cf\u7684\u573a\u666f\u90fd\u79bb\u4e0d\u5f00 Context\uff0c\u6bd4\u5982\uff1a</p> <ul> <li>startActivity()</li> <li>getResources()</li> </ul> <p>\u7b49\u7b49\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#_2","title":"\u7c7b\u56fe","text":"plantuml(\u70b9\u51fb\u5c55\u5f00\u8be6\u60c5) <pre>29e83162-514a-427b-8241-7bfc3554da9c</pre> mermaid <pre><code>\nclassDiagram\n\ndirection BT\n\nclass Activity {\n\n+ Activity()\n\n- IBinder mToken\n\n- Instrumentation mInstrumentation\n\n~ ActivityThread mMainThread\n\n- Application mApplication\n\n~ Intent mIntent\n\n+ getActivityToken() IBinder\n\n+ getActivityThread() ActivityThread\n\n~ attach(Context, ActivityThread, Instrumentation, IBinder) void\n\n}\n\nclass Application {\n\n+ Application()\n\n+ onCreate() void\n\n+ onTerminate() void\n\n~ attach(Context) void\n\n}\n\nclass Context {\n\n+ Context()\n\n+ startActivity(Intent) void\n\n+ getMainLooper() Looper\n\n+ startActivity(Intent, Bundle) void\n\n+ getApplicationContext() Context\n\n+ createApplicationContext(ApplicationInfo, int) Context\n\n+ getActivityToken() IBinder\n\n}\n\nclass ContextImpl {\n\n- ContextImpl(ContextImpl, ActivityThread, LoadedApk, ContextParams, String, AttributionSource, String, IBinder, UserHandle, int, ClassLoader, String)\n\n~ ActivityThread mMainThread\n\n- Context mOuterContext\n\n~ createAppContext(ActivityThread, LoadedApk) ContextImpl\n\n+ startActivity(Intent) void\n\n~ getImpl(Context) ContextImpl?\n\n+ createApplicationContext(ApplicationInfo, int) Context\n\n+ startActivity(Intent, Bundle) void\n\n~ createAppContext(ActivityThread, LoadedApk, String) ContextImpl\n\n}\n\nclass ContextThemeWrapper {\n\n+ ContextThemeWrapper(Context, Theme)\n\n+ ContextThemeWrapper()\n\n+ ContextThemeWrapper(Context, int)\n\n- Resources mResources\n\n- int mThemeResource\n\n- Theme mTheme\n\n- initializeTheme() void\n\n# onApplyThemeResource(Theme, int, boolean) void\n\n+ getThemeResId() int\n\n+ setTheme(int) void\n\n+ setTheme(Theme) void\n\n# attachBaseContext(Context) void\n\n+ getTheme() Theme\n\n}\n\nclass ContextWrapper {\n\n+ ContextWrapper(Context)\n\n~ Context mBase\n\n# attachBaseContext(Context) void\n\n+ getBaseContext() Context\n\n+ startActivity(Intent, Bundle) void\n\n+ startActivity(Intent) void\n\n+ createApplicationContext(ApplicationInfo, int) Context\n\n+ getActivityToken() IBinder\n\n+ getApplicationContext() Context\n\n+ getMainLooper() Looper\n\n}\n\n\n\nActivity --&gt; ContextThemeWrapper\n\nApplication --&gt; ContextWrapper\n\nContextImpl --&gt; Context\n\nContextThemeWrapper --&gt; ContextWrapper\n\nContextWrapper --&gt; Context\n</code></pre> <p>Context \u672c\u8eab\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5176\u5b50\u7c7b\u6709 ContextImpl \u548c ContextWrapper \uff1b\u95f4\u63a5\u5b50\u7c7b\u6709 Application \u3001ContextThemeWrapper\u3001Activity\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#application-context","title":"Application Context","text":"<p>Activity Context \u88ab\u4f20\u9012\u5230\u5176\u4ed6\u5b9e\u4f8b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u81ea\u8eab\u88ab\u5f15\u7528\u800c\u53d1\u751f\u6cc4\u6f0f\u3002\u6240\u4ee5\u80fd\u4f7f\u7528 Application Context \u5219\u5c3d\u91cf\u4f7f\u7528 Application Context\uff0c\u9664\u975e\u662f Dialog \u7684 Context \u8fd9\u4e9b\u573a\u666f\u5fc5\u987b\u662f Activity Context\u3002</p> <p>\u6211\u4eec\u5728\u8c08\u53ca OOM \u7684\u65f6\u5019\u7ecf\u5e38\u63d0\u5230\u8fd9\u4e2a\u89c2\u70b9\uff0c\u8fd9\u4e2a\u89c2\u70b9\u662f\u600e\u4e48\u6765\u7684\u6211\u4eec\u5148\u4e0d\u6df1\u7a76\u3002</p> <p>\u4f46\u4ece\u8fd9\u4e2a\u89c2\u70b9\u6211\u4eec\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4e00\u4e2a\u57fa\u672c\u4e8b\u5b9e\uff1aActivity Context \u548c Application Context \u4e0d\u662f\u540c\u4e00\u4e2a Context\uff1b\u4ece\u524d\u9762\u7684\u7c7b\u56fe\u4e5f\u53ef\u4ee5\u770b\u51fa\u7aef\u502a\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activitythreadhandlebindapplication","title":"ActivityThread.handleBindApplication()","text":"<p>\u5728 Activity\u6846\u67b603-ActivityThread \u4e2d\uff0c\u6211\u4eec\u63d0\u5230 ActivityThread \u7684\u6210\u5458\u53d8\u91cf mInstrumentation \u521d\u59cb\u5316\u5c31\u662f\u5728 ActivityThread.handleBindApplication() \u4e2d\u8fdb\u884c\u7684\u3002</p> <p>\u5f53\u65f6\u6211\u4eec\u8d34\u51fa\u6765\u7684\u4ee3\u7801\u53ea\u662f mInstrumentation \u521d\u59cb\u5316\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u5176\u5b9e handleBindApplication() \u65b9\u6cd5\u8fd8\u4f1a\u521d\u59cb\u5316 Application \u4ee5\u53ca Application Context\u3002</p> <pre><code>public final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {\n\n    @UnsupportedAppUsage\n    private void handleBindApplication(AppBindData data) {\n\n        ...\n\n        // \u521b\u5efa LoadedApk\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728 data.info \u4e2d\n        data.info = getPackageInfo(data.appInfo, mCompatibilityInfo, null /* baseLoader */,\n                false /* securityViolation */, true /* includeCode */,\n                false /* registerPackage */, isSdkSandbox);\n\n        ...\n\n        // \u521b\u5efa Instrumentation\n        if (ii != null) {\n            initInstrumentation(ii, data, appContext);\n        } else {\n            mInstrumentation = new Instrumentation();\n            mInstrumentation.basicInit(this);\n        }\n\n        ...\n\n        try {\n            // \u521b\u5efa Application \u3001ContextImpl\n            app = data.info.makeApplicationInner(data.restrictedBackupMode, null);\n\n            // \u5c06 Application \u5b58\u50a8\u5728 mInitialApplication \u4e2d\n            mInitialApplication = app;\n\n            try {\n                // \u8c03\u7528 Application.onCreate() \u65b9\u6cd5\u3002\n                mInstrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {\n                ...\n            }\n\n            ...\n        } finally {\n            ...\n        }\n\n        ...\n    }\n\n}\n</code></pre> <ul> <li>\u521b\u5efa LoadedApk</li> <li>\u521b\u5efa Instrumentation</li> <li>\u521b\u5efa ContextImpl</li> <li>\u521b\u5efa Application</li> <li>\u8c03\u7528 Application.onCreate()</li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#loadedapk","title":"\u521b\u5efa LoadedApk","text":"<pre><code>public final class ActivityThread extends ClientTransactionHandler  \n        implements ActivityThreadInternal {  \n\n    // mPackages \u7684\u6570\u636e\u7c7b\u578b\u4e3a ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt;\n    @GuardedBy(\"mResourcesManager\")  \n    @UnsupportedAppUsage  \n    final ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages = new ArrayMap&lt;&gt;();  \n\n    /**  \n     * @param aInfo=data.appInfo  \n     * @param compatInfo=mCompatibilityInfo  \n     * @param baseLoader=null  \n     * @param securityViolation=false  \n     * @param includeCode=true  \n     * @param registerPackage=false  \n     * @param isSdkSandbox=false[\u4e00\u822c\u90fd\u662ffalse]  \n     * @return  \n     */  \n    private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo,  \n            ClassLoader baseLoader, boolean securityViolation, boolean includeCode,  \n            boolean registerPackage, boolean isSdkSandbox) {  \n    final boolean differentUser = (UserHandle.myUserId() != UserHandle.getUserId(aInfo.uid));  \n    synchronized (mResourcesManager) {  \n        WeakReference&lt;LoadedApk&gt; ref;  \n        if (differentUser || isSdkSandbox) {  \n            // \u4e0d\u652f\u6301\u8de8\u7528\u6237\u548c SDK \u6c99\u7bb1\u7684\u7f13\u5b58  \n            ref = null;  \n        } else if (includeCode) {  \n            ref = mPackages.get(aInfo.packageName);  \n        } else {  \n            ref = mResourcePackages.get(aInfo.packageName);  \n        }  \n\n        LoadedApk packageInfo = ref != null ? ref.get() : null;  \n\n        if (packageInfo != null) {  \n            if (!isLoadedApkResourceDirsUpToDate(packageInfo, aInfo)) {  \n                if (packageInfo.getApplicationInfo().createTimestamp &gt; aInfo.createTimestamp) {  \n                    // \u7f13\u5b58\u7684 LoadedApk \u6bd4\u4f20\u5165\u7684 ApplicationInfo \u66f4\u65b0\uff0c\u4e0d\u66f4\u65b0\u7f13\u5b58\u7248\u672c  \n                    Slog.w(TAG, \"getPackageInfo() called with an older ApplicationInfo \"  \n                            + \"than the cached version for package \" + aInfo.packageName);  \n                } else {  \n                    // \u66f4\u65b0\u7f13\u5b58\u7684 ApplicationInfo                    Slog.v(TAG, \"getPackageInfo() caused update to cached ApplicationInfo \"  \n                            + \"for package \" + aInfo.packageName);  \n                    List&lt;String&gt; oldPaths = new ArrayList&lt;&gt;();  \n                    LoadedApk.makePaths(this, aInfo, oldPaths);  \n                    packageInfo.updateApplicationInfo(aInfo, oldPaths);  \n                }  \n            }  \n            return packageInfo;  \n        }  \n\n        // \u52a0\u8f7d\u65b0\u7684 LoadedApk        ...  \n\n        packageInfo = new LoadedApk(this, aInfo, compatInfo, baseLoader,  \n                securityViolation, includeCode  \n                &amp;&amp; (aInfo.flags &amp; ApplicationInfo.FLAG_HAS_CODE) != 0, registerPackage);  \n\n        if (mSystemThread &amp;&amp; \"android\".equals(aInfo.packageName)) {  \n            packageInfo.installSystemApplicationInfo(aInfo,  \n                    getSystemContext().mPackageInfo.getClassLoader());  \n        }  \n\n        if (differentUser || isSdkSandbox) {  \n            // \u4e0d\u652f\u6301\u8de8\u7528\u6237\u548c SDK \u6c99\u7bb1\u7684\u7f13\u5b58  \n        } else if (includeCode) {  \n            mPackages.put(aInfo.packageName,  \n                    new WeakReference&lt;LoadedApk&gt;(packageInfo));  \n        } else {  \n            mResourcePackages.put(aInfo.packageName,  \n                    new WeakReference&lt;LoadedApk&gt;(packageInfo));  \n        }  \n\n        return packageInfo;  \n    }  \n}\n</code></pre> <ul> <li>mPackages \u7684\u6570\u636e\u7c7b\u578b\u4e3a <code>ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt;</code>\uff0c\u8bb0\u5f55\u7740\u6bcf\u4e00\u4e2a\u5305\u540d\u6240\u5bf9\u5e94\u7684 <code>LoadedApk</code> \u5bf9\u8c61\u7684\u5f31\u5f15\u7528\u3002</li> <li>\u5f53 mPackages \u6ca1\u6709\u627e\u5230\u76f8\u5e94\u7684 LoadedApk \u5bf9\u8c61\uff0c\u5219\u521b\u5efa\u8be5\u5bf9\u8c61\u5e76\u52a0\u5165\u5230mPackages\u3002</li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextimpl","title":"\u521b\u5efa ContextImpl","text":"<p>\u5728 ActivityThread.handleBindApplication() \u4e2d\uff0c\u521b\u5efa LoadedApk \u4e4b\u540e\uff0c\u5c31\u8c03\u7528 LoadedApk.makeApplicationInner() \u521b\u5efa Application\uff0c\u8fd9\u5176\u4e2d\u4e5f\u540c\u65f6\u4f1a\u521b\u5efa ContextImpl \u3002</p> <pre><code>public final class LoadedApk {\n\n    private Application mApplication;\n\n    public Application makeApplicationInner(boolean forceDefaultAppClass,\n                                            Instrumentation instrumentation) {\n        return makeApplicationInner(forceDefaultAppClass, instrumentation,\n                /* allowDuplicateInstances= */ false);\n    }\n\n    /**\n     * \u521b\u5efa\u5e76\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u3002\n     *\n     * @param forceDefaultAppClass \u662f\u5426\u5f3a\u5236\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u3002\n     * @param instrumentation=null\n     * @param allowDuplicateInstances=false \u662f\u5426\u5141\u8bb8\u521b\u5efa\u91cd\u590d\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u3002\n     * @return \u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u3002\n     */\n    private Application makeApplicationInner(boolean forceDefaultAppClass,\n            Instrumentation instrumentation, boolean allowDuplicateInstances) {\n        if (mApplication != null) {\n            return mApplication;\n        }\n        ...\n\n        synchronized (sApplications) {\n            final Application cached = sApplications.get(mPackageName);\n            if (cached != null) {\n                if (!\"android\".equals(mPackageName)) {\n                    ...\n                }\n                if (!allowDuplicateInstances) {\n                    mApplication = cached;\n                    return cached;\n                }\n            }\n        }\n\n        Application app = null;\n\n        final String myProcessName = Process.myProcessName();\n        String appClass = mApplicationInfo.getCustomApplicationClassNameForProcess(\n                myProcessName);\n        if (forceDefaultAppClass || (appClass == null)) {\n            appClass = \"android.app.Application\";\n        }\n\n        try {\n            ...\n\n            // \u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u3002\n            ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, this);\n            ...\n            app = mActivityThread.mInstrumentation.newApplication(\n                    cl, appClass, appContext);\n            appContext.setOuterContext(app);\n        } catch (Exception e) {\n            ...\n        }\n\n        // \u6dfb\u52a0\u5e94\u7528\u7a0b\u5e8f\u5230\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u5217\u8868\u4e2d\u3002\n        mActivityThread.mAllApplications.add(app);\n        // \u5c06 Application \u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cf mApplication\n        mApplication = app;\n        if (!allowDuplicateInstances) {\n            synchronized (sApplications) {\n                sApplications.put(mPackageName, app);\n            }\n        }\n\n        // \u4f20\u8fdb\u6765\u7684 instrumentation \u4e3a\u7a7a\n        if (instrumentation != null) {\n            try {\n                instrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {\n                ...\n            }\n        }\n\n        ...\n\n        return app;\n    }\n}\n</code></pre> <ul> <li>\u901a\u8fc7 ContextImpl.createAppContext() \u521b\u5efa\u4e00\u4e2a ContextImpl\u3002</li> <li>\u518d\u901a\u8fc7 Instrumentation \u53cd\u5c04\u51fa\u4e00\u4e2a <code>android.app.Application</code> \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528 Application.attach() \u4fdd\u5b58 Context\u3002</li> <li>\u521b\u5efa Application \u540e\uff0c\u4f1a\u5c06 Application \u8d4b\u503c\u7ed9 LoadedApk \u7684\u6210\u5458\u53d8\u91cf mApplication \u3010\u8fd9\u70b9\u5f88\u91cd\u8981\uff0c\u540e\u7eed\u4f1a\u7528\u5230\u3011</li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextimplcreateappcontext","title":"ContextImpl.createAppContext()","text":"<pre><code>class ContextImpl extends Context {  \n\n    /**  \n     * \u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff08\u4e0d\u6307\u5b9a\u64cd\u4f5c\u5305\u540d\uff09\u3002  \n     *  \n     * @param mainThread \u4e3b\u7ebf\u7a0b\uff0c\u901a\u5e38\u662f ActivityThread \u5b9e\u4f8b\u3002  \n     * @param packageInfo \u5305\u4fe1\u606f\uff0c\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u8be6\u7ec6\u4fe1\u606f\u3002  \n     * @return \u521b\u5efa\u7684 ContextImpl \u5b9e\u4f8b\u3002  \n     */  \n    @UnsupportedAppUsage  \n    static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo) {  \n        return createAppContext(mainThread, packageInfo, null);  \n    }  \n\n    /**  \n     * \u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff08\u53ef\u4ee5\u6307\u5b9a\u64cd\u4f5c\u5305\u540d\uff09\u3002  \n     *  \n     * @param mainThread \u4e3b\u7ebf\u7a0b\uff0c\u901a\u5e38\u662f ActivityThread \u5b9e\u4f8b\u3002  \n     * @param packageInfo \u5305\u4fe1\u606f\uff0c\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u8be6\u7ec6\u4fe1\u606f\u3002  \n     * @param opPackageName \u64cd\u4f5c\u5305\u540d\uff0c\u53ef\u4ee5\u4e3a null\u3002  \n     * @return \u521b\u5efa\u7684 ContextImpl \u5b9e\u4f8b\u3002  \n     */  \n    static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo,  \n            String opPackageName) {  \n        if (packageInfo == null) throw new IllegalArgumentException(\"packageInfo\");  \n\n        // \u521b\u5efa\u65b0\u7684 ContextImpl \u5b9e\u4f8b\u3002  \n        ContextImpl context = new ContextImpl(null, mainThread, packageInfo,  \n            ContextParams.EMPTY, null, null, null, null, null, 0, null, opPackageName);  \n\n        // \u8bbe\u7f6e\u8d44\u6e90\u3002  \n        context.setResources(packageInfo.getResources());  \n\n        // \u6839\u636e\u4e0a\u4e0b\u6587\u7c7b\u578b\u8bbe\u7f6e\u4e0a\u4e0b\u6587\u7c7b\u578b\u53d8\u91cf\u3002  \n        context.mContextType = isSystemOrSystemUI(context) ? CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI  \n                : CONTEXT_TYPE_NON_UI;  \n\n        return context;  \n    }  \n\n}\n</code></pre> <p>\u5982\u6ce8\u91ca\uff0c\u8fd9\u91cc\u5176\u5b9e\u5f88\u7b80\u5355 \u5c31\u662f\u8c03\u7528 ContextImpl \u7684\u6784\u9020\u51fd\u6570\u53bb\u521b\u5efa\u4e00\u4e2a ContextImpl \u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextimpl_1","title":"ContextImpl \u6784\u9020\u51fd\u6570","text":"<pre><code>class ContextImpl extends Context {  \n\n    @UnsupportedAppUsage  \n    private Context mOuterContext;  \n\n    @UnsupportedAppUsage  \n    final @NonNull ActivityThread mMainThread;  \n    @UnsupportedAppUsage  \n    final @NonNull LoadedApk mPackageInfo;  \n\n    private ContextImpl(@Nullable android.app.ContextImpl container, @NonNull ActivityThread mainThread,  \n                        @NonNull LoadedApk packageInfo, @NonNull ContextParams params,  \n                        @Nullable String attributionTag, @Nullable AttributionSource nextAttributionSource,  \n                        @Nullable String splitName, @Nullable IBinder token, @Nullable UserHandle user,  \n                        int flags, @Nullable ClassLoader classLoader, @Nullable String overrideOpPackageName) {  \n        mOuterContext = this;  \n\n        mMainThread = mainThread;  \n\n        mPackageInfo = packageInfo;  \n\n    }  \n\n}\n</code></pre> <p>\u521b\u5efa ContextImpl \u7684\u65f6\u5019\u628a ActivityThread \u548c LoadedApk \u5206\u522b\u8d4b\u503c\u7ed9\u5176\u6210\u5458\u53d8\u91cf mMainThread \u548c mPackageInfo\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#application","title":"\u521b\u5efa Application","text":"<p>\u521b\u5efa ContextImpl \u4e4b\u540e\uff0c\u518d\u56de\u5230 LoadedApk.makeApplicationInner() \u4e2d\uff0c\u63a5\u7740\u521b\u5efa Application \u3002\u4e3b\u8981\u662f\u901a\u8fc7 Instrumentation \u53cd\u5c04\u51fa\u4e00\u4e2a <code>android.app.Application</code> \u5b9e\u4f8b\u3002</p> <pre><code>app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#instrumentationnewapplication","title":"Instrumentation.newApplication()","text":"<pre><code>public class Instrumentation {  \n\n    /**  \n     * \u6267\u884c\u8fdb\u7a0b\u7684 {@link Application} \u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\u3002\u9ed8\u8ba4\u5b9e\u73b0\u63d0\u4f9b\u4e86\u6b63\u5e38\u7684\u7cfb\u7edf\u884c\u4e3a\u3002  \n     *  \n     * @param cl \u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 ClassLoader\u3002  \n     * @param className \u5b9e\u73b0 Application \u5bf9\u8c61\u7684\u7c7b\u540d\u3002  \n     * @param context \u7528\u4e8e\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u3002  \n     *  \n     * @return \u65b0\u5b9e\u4f8b\u5316\u7684 Application \u5bf9\u8c61\u3002  \n     */  \n    public Application newApplication(ClassLoader cl, String className, Context context)  \n            throws InstantiationException, IllegalAccessException, ClassNotFoundException {  \n        // \u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\u5de5\u5382\u5e76\u5b9e\u4f8b\u5316 Application \u5bf9\u8c61\u3002  \n        Application app = getFactory(context.getPackageName())  \n                .instantiateApplication(cl, className);  \n\n        // \u5c06 context \u52a0\u5230 Application \u5bf9\u8c61\u3002  \n        app.attach(context);  \n\n        // \u8fd4\u56de\u65b0\u5b9e\u4f8b\u5316\u7684 Application \u5bf9\u8c61\u3002  \n        return app;  \n    }  \n\n}\n</code></pre> <p>\u901a\u8fc7 AppComponentFactory \u4ee5\u53ca ClassLoader \u53bb\u53cd\u5c04\u4e00\u4e2a Application \u5bf9\u8c61\uff0c\u5e76\u8c03\u7528 Application.attach() \u8bbe\u7f6e Application \u7684 Context\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#application-context_1","title":"\u8bbe\u7f6e Application Context","text":"","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#applicationattach","title":"Application.attach()","text":"<pre><code>public class Application extends ContextWrapper implements ComponentCallbacks2 {  \n\n    /**  \n     * @hide  \n     */  \n    @UnsupportedAppUsage  \n    /* package */ final void attach(Context context) {  \n        attachBaseContext(context);  \n        mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;  \n    }  \n\n}\n</code></pre> <p>Application \u7ee7\u627f ContextWrapper\uff0c\u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u770b ContextWrapper \u7c7b\u91cc\u7684 attachBaseContext() \u65b9\u6cd5\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextwrapperattachbasecontext","title":"ContextWrapper.attachBaseContext()","text":"<pre><code>public class ContextWrapper extends Context {  \n\n    Context mBase;  \n\n    protected void attachBaseContext(Context base) {  \n        if (mBase != null) {  \n            throw new IllegalStateException(\"Base context already set\");  \n        }  \n        mBase = base;  \n    }  \n\n}\n</code></pre> <p>\u5230\u8fd9\u4e00\u6b65\u5f88\u660e\u663e\u4e86\uff0c\u628a LoadedApk.makeApplicationInner() \u521b\u5efa ContextImpl \u4fdd\u5b58\u5230 Application \u7684\u7236\u7c7b\u6210\u5458\u53d8\u91cf mBase \u4e2d\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#_3","title":"\u603b\u7ed3","text":"<p>\u6211\u518d\u628a Context \u3001ContextImpl \u3001 ContextWrapper \u3001 Application \u6d89\u53ca\u5230\u7684\u90fd\u4e32\u8d77\u6765\uff1a</p> <pre><code>public abstract class Context {  \n    public abstract Context getApplicationContext();  \n}  \n\nclass ContextImpl extends Context {  \n    @Override  \n    public Context getApplicationContext() {  \n        return (mPackageInfo != null) ?  \n                mPackageInfo.getApplication() : mMainThread.getApplication();  \n    }  \n}  \n\npublic class ContextWrapper extends Context {\n\n    Context mBase;  \n\n    // LoadedApk.makeApplicationInner() \u521b\u5efa\u7684 ContextImpl\n    protected void attachBaseContext(Context base) {\n        if (mBase != null) {  \n            throw new IllegalStateException(\"Base context already set\");  \n        }  \n        mBase = base;  \n    }  \n\n    @Override  \n    public Context getApplicationContext() {\n        // \u6240\u4ee5\u8fd9\u91cc\u8c03\u5230\u7684\u5176\u5b9e\u662f ContextImpl.getApplicationContext()\n        return mBase.getApplicationContext();\n    }  \n}  \n\npublic class Application extends ContextWrapper {  \n    // \u4f20 LoadedApk.makeApplicationInner() \u521b\u5efa ContextImpl \u8fdb\u6765\n    final void attach(Context context) {  \n        attachBaseContext(context);  \n    }  \n}\n</code></pre> <p>\u5e73\u65f6\u6211\u4eec getApplicationContext() \u83b7\u53d6 Context\uff0c\u6700\u7ec8\u90fd\u662f\u8d70\u5230 ContextImpl.getApplicationContext()\u3002</p> <p>\u521a\u624d\u6211\u4eec\u5728\u521b\u5efa ContextImpl \u65f6\uff0c\u4e5f\u5c31\u662f\u5728 LoadedApk.makeApplicationInner() \u4e2d\uff0c\u4f1a\u5c06 Application \u8d4b\u503c\u7ed9 LoadedApk \u7684\u6210\u5458\u53d8\u91cf mApplication \u3002</p> <p>ContextImpl \u7684\u6210\u5458\u53d8\u91cf mPackageInfo \u5c31\u662f LoadedApk\uff0c\u6240\u4ee5 mPackageInfo.getApplication() \u5176\u5b9e\u4e5f\u7b49\u540c\u4e8e LoadedApk.getApplication()\uff0c\u4e5f\u5c31\u662f LoadedApk \u7684\u6210\u5458\u53d8\u91cf mApplication \u3002</p> <p>\u6211\u7adf\u7136\u7ed5\u4e86\u4e00\u5927\u5708\u83b7\u53d6\u6211\u81ea\u5df1\uff0c\u5475\u5475\uff01</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activity-context","title":"Activity Context","text":"<p>\u5206\u6790\u5b8c Application \u7684 Context \u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790 Activity Context\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activitythreadperformlaunchactivity","title":"ActivityThread.performLaunchActivity()","text":"<p>\u5728 Activity\u6846\u67b603-ActivityThread \u4e2d\uff0c\u6211\u4eec\u63d0\u5230 Activity \u662f\u5728 ActivityThread.performLaunchActivity() \u4e2d\u88ab\u521b\u5efa\u7684\u3002\u800c\u8fd9\u4e00\u8fc7\u7a0b\u4e5f\u540c\u65f6\u4f1a\u521b\u5efa Activity \u7684 Context \u3002</p> <pre><code>private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {  \n    ActivityInfo aInfo = r.activityInfo;  \n\n    ...  \n\n    ContextImpl appContext = createBaseContextForActivity(r);  \n    Activity activity = null;  \n    try {  \n        java.lang.ClassLoader cl = appContext.getClassLoader();  \n        activity = mInstrumentation.newActivity(  \n                cl, component.getClassName(), r.intent);  \n        ...  \n    } catch (Exception e) {  \n        ...  \n    }  \n\n    try {  \n\n        ...  \n        appContext.setOuterContext(activity);  \n        activity.attach(appContext, this, getInstrumentation(), r.token,  \n                r.ident, app, r.intent, r.activityInfo, title, r.parent,  \n                r.embeddedID, r.lastNonConfigurationInstances, config,  \n                r.referrer, r.voiceInteractor, window, r.activityConfigCallback,  \n                r.assistToken, r.shareableActivityToken);  \n        ...  \n    } catch (SuperNotCalledException e) {  \n        ...  \n    } catch (Exception e) {  \n        ...  \n    }  \n\n    return activity;  \n}\n</code></pre> <ul> <li>\u901a\u8fc7\u8c03\u7528 createBaseContextForActivity() \u521b\u5efa ContextImpl</li> <li>\u901a\u8fc7 Instrumentation \u53cd\u5c04\u4e00\u4e2a Activity</li> <li>\u8c03\u7528 Activity.attach() \u8d4b\u503c\u7ed9 Activity\u6216\u8005\u5176\u7236\u7c7b</li> </ul>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextimpl_2","title":"\u521b\u5efa ContextImpl","text":"","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activitythreadcreatebasecontextforactivity","title":"ActivityThread.createBaseContextForActivity()","text":"<pre><code>private ContextImpl createBaseContextForActivity(ActivityClientRecord r) {\n    // \u83b7\u53d6\u8981\u663e\u793a\u7684\u663e\u793aID\n    final int displayId = ActivityClient.getInstance().getDisplayId(r.token);\n\n    // \u521b\u5efa ContextImpl\n    ContextImpl appContext = ContextImpl.createActivityContext(\n            this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);\n\n    // \u83b7\u53d6\u5168\u5c40\u663e\u793a\u7ba1\u7406\u5668\n    final DisplayManagerGlobal dm = DisplayManagerGlobal.getInstance();\n\n    // \u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\uff0c\u5982\u679c\u6d3b\u52a8\u7684\u5305\u540d\u5305\u542b\u201cdebug.use-second-display\u201d\u7cfb\u7edf\u5c5e\u6027\u7684\u503c\u4f5c\u4e3a\u5b50\u5b57\u7b26\u4e32\uff0c\n    // \u5e76\u4e14\u5b58\u5728\u4e00\u4e2a\u4e8c\u7ea7\u663e\u793a\u5c4f\uff0c\u5219\u5728\u4e8c\u7ea7\u663e\u793a\u5c4f\u4e0a\u663e\u793a\u5176\u5185\u5bb9\u3002\n    String pkgName = SystemProperties.get(\"debug.second-display.pkg\");\n    if (pkgName != null &amp;&amp; !pkgName.isEmpty()\n            &amp;&amp; r.packageInfo.mPackageName.contains(pkgName)) {\n        // \u904d\u5386\u6240\u6709\u7684\u663e\u793aID\n        for (int id : dm.getDisplayIds()) {\n            // \u5982\u679c\u627e\u5230\u4e00\u4e2a\u975e\u9ed8\u8ba4\u663e\u793a\u7684ID\n            if (id != DEFAULT_DISPLAY) {\n                // \u83b7\u53d6\u4e0e\u8be5\u663e\u793aID\u517c\u5bb9\u7684\u663e\u793a\n                Display display = dm.getCompatibleDisplay(id, appContext.getResources());\n                // \u521b\u5efa\u9488\u5bf9\u8be5\u663e\u793a\u7684\u4e0a\u4e0b\u6587\n                appContext = (ContextImpl) appContext.createDisplayContext(display);\n                break;\n            }\n        }\n    }\n    return appContext;\n}\n</code></pre> <p>\u8fd9\u91cc\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u63a5\u7740\u770b ContextImpl.createActivityContext()\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextimplcreateactivitycontext","title":"ContextImpl.createActivityContext()","text":"<pre><code>@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)  \nstatic ContextImpl createActivityContext(ActivityThread mainThread,  \n        LoadedApk packageInfo, ActivityInfo activityInfo, IBinder activityToken, int displayId,  \n        Configuration overrideConfiguration) {  \n    ...  \n\n    // \u521b\u5efa ContextImpl \u5b9e\u4f8b  \n    ContextImpl context = new ContextImpl(null, mainThread, packageInfo, ContextParams.EMPTY,  \n            attributionTag, null, activityInfo.splitName, activityToken, null, 0, classLoader,  \n            null);  \n    ...  \n    return context;  \n}\n</code></pre> <p>\u8ddf\u521a\u624d\u7684 Application Context \u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u90fd\u662f\u521b\u5efa\u4e00\u4e2a ContextImpl \u5b9e\u4f8b\u3002\u6211\u4eec\u4e0d\u518d\u5206\u6790 ContextImpl \u6784\u9020\u51fd\u6570\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activity","title":"\u521b\u5efa Activity","text":"<p>\u56de\u5230 ActivityThread.performLaunchActivity() \u4e2d\uff0cActivity \u662f\u901a\u8fc7 Instrumentation.newActivity() \u88ab\u521b\u5efa\u8d77\u6765\u7684\u3002\u5728 Activity\u6846\u67b603-ActivityThread \u4e5f\u6709\u5206\u6790\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u590d\u8ff0\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activity-context_1","title":"\u8bbe\u7f6e Activity Context","text":"<p>\u8fd8\u662f\u7ee7\u7eed\u56de\u5230 ActivityThread.performLaunchActivity() \u4e2d\uff0c Activity \u521b\u5efa\u5b8c\u6210\u4e4b\u540e\u5c31\u8c03\u7528Activity.attach() \u8bbe\u7f6e Context\u3002</p> <pre><code>activity.attach(appContext, this, getInstrumentation(), r.token,  \n                r.ident, app, r.intent, r.activityInfo, title, r.parent,  \n                r.embeddedID, r.lastNonConfigurationInstances, config,  \n                r.referrer, r.voiceInteractor, window, r.activityConfigCallback,  \n                r.assistToken, r.shareableActivityToken);\n</code></pre>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#activityattach","title":"Activity.attach()","text":"<pre><code>public class Activity extends ContextThemeWrapper  \n\n    @Override  \n    protected void attachBaseContext(Context newBase) {  \n        super.attachBaseContext(newBase);  \n        if (newBase != null) {  \n            newBase.setAutofillClient(getAutofillClient());  \n            newBase.setContentCaptureOptions(getContentCaptureOptions());  \n        }  \n    }  \n\n    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)  \n    final void attach(Context context, ActivityThread aThread,  \n            Instrumentation instr, IBinder token, int ident,  \n            Application application, Intent intent, ActivityInfo info,  \n            CharSequence title, Activity parent, String id,  \n            NonConfigurationInstances lastNonConfigurationInstances,  \n            Configuration config, String referrer, IVoiceInteractor voiceInteractor,  \n            Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,  \n            IBinder shareableActivityToken) {  \n        attachBaseContext(context);  \n        ...  \n    }  \n\n}\n</code></pre> <p>\u8fd9\u91cc\u6ca1\u6709\u770b\u5230\u8d4b\u503c\u7684\u5730\u65b9\uff0c\u8fd8\u662f\u5f97\u770b\u7236\u7c7b ContextThemeWrapper\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextthemewrapperattachbasecontext","title":"ContextThemeWrapper.attachBaseContext()","text":"<pre><code>public class ContextThemeWrapper extends ContextWrapper {\n\n    @Override  \n    protected void attachBaseContext(Context newBase) {  \n        super.attachBaseContext(newBase);  \n    }\n}\n</code></pre> <p>\u7ee7\u7eed\u770b\u7236\u7c7b ContextWrapper \u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#contextwrapperattachbasecontext_1","title":"ContextWrapper.attachBaseContext()","text":"<pre><code>public class ContextWrapper extends Context {  \n\n    Context mBase;  \n\n    protected void attachBaseContext(Context base) {  \n        if (mBase != null) {  \n            throw new IllegalStateException(\"Base context already set\");  \n        }  \n        mBase = base;  \n    }  \n\n}\n</code></pre> <p>\u8fd9\u91cc\u8ddf\u524d\u9762\u7684\u5206\u6790\u5c31\u662f\u4e00\u6837\u7684\u4e86\uff0c\u8fd8\u662f\u628a ActivityThread.createBaseContextForActivity() \u521b\u5efa\u7684 ContextImpl \u8d4b\u503c\u7ed9\u4e86 mBase\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/activity_context/#_4","title":"\u603b\u7ed3","text":"<p>\u6211\u518d\u628a Context \u3001ContextImpl \u3001 ContextWrapper \u3001 Activity \u6d89\u53ca\u5230\u7684\u90fd\u4e32\u8d77\u6765\uff1a</p> <pre><code>public abstract class Context {\n}  \n\nclass ContextImpl extends Context {\n}  \n\npublic class ContextWrapper extends Context {\n\n    Context mBase;  \n\n    // ActivityThread.createBaseContextForActivity() \u521b\u5efa\u7684 ContextImpl\n    protected void attachBaseContext(Context base) {\n        if (mBase != null) {  \n            throw new IllegalStateException(\"Base context already set\");  \n        }  \n        mBase = base;  \n    }  \n\n    public Context getBaseContext() {  \n        return mBase;  \n    }  \n}  \n\npublic class Activity extends ContextThemeWrapper  \n\n    @Override  \n    protected void attachBaseContext(Context newBase) {  \n        super.attachBaseContext(newBase);  \n        if (newBase != null) {  \n            newBase.setAutofillClient(getAutofillClient());  \n            newBase.setContentCaptureOptions(getContentCaptureOptions());  \n        }  \n    }  \n\n    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)  \n    final void attach(Context context, ActivityThread aThread,  \n            Instrumentation instr, IBinder token, int ident,  \n            Application application, Intent intent, ActivityInfo info,  \n            CharSequence title, Activity parent, String id,  \n            NonConfigurationInstances lastNonConfigurationInstances,  \n            Configuration config, String referrer, IVoiceInteractor voiceInteractor,  \n            Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,  \n            IBinder shareableActivityToken) {  \n        attachBaseContext(context);  \n        ...  \n    }  \n\n}\n</code></pre> <p>\u6709\u90e8\u5206\u540c\u5b66\u559c\u6b22\u5728 Activity \u4e2d\u901a\u8fc7 getBaseContext() \u83b7\u53d6\u5230 Context\uff0c\u8fd9\u91cc\u83b7\u53d6\u5230\u7684 Context \u5c31\u662f ActivityThread.createBaseContextForActivity() \u521b\u5efa\u7684 ContextImpl \u3002</p> <p>\u9664\u4e86 Activity \u8ddf Context \u6709\u7740\u5343\u4e1d\u4e07\u7f15\u7684\u5173\u7cfb\u4e4b\u5916\uff0cAndroid\u56db\u5927\u7ec4\u4ef6\u7684\u53e6\u5916\u4e09\u4e2a\u4e5f\u8ddf Context \u6709\u7740\u4e0d\u5f00\u5206\u5272\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u540e\u7eed\u8bb2\u5230\u522b\u7684\u7ec4\u4ef6\u65f6\u518d\u7ee7\u7eed\u5206\u6790\u3002</p>","tags":["Android","AMS","Activity"]},{"location":"android/ams/lifecycle/","title":"Activity\u751f\u547d\u5468\u671f","text":"<p>Activity \u7c7b\u662f Android \u5e94\u7528\u7684\u5173\u952e\u7ec4\u4ef6\uff0cAndroid \u7cfb\u7edf\u4f1a\u901a\u8fc7\u8c03\u7528\u4e0e\u5176\u751f\u547d\u5468\u671f\u7279\u5b9a\u9636\u6bb5\u5bf9\u5e94\u7684\u7279\u5b9a\u56de\u8c03\u65b9\u6cd5\uff0c\u5728 Activity \u5b9e\u4f8b\u4e2d\u542f\u52a8\u4ee3\u7801\u3002</p>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_1","title":"\u6b63\u5e38\u751f\u547d\u5468\u671f","text":"<p>\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u65b0\u5efa\u4e00\u4e2a**Activity A**\u4f1a\u987a\u5e8f\u7ecf\u5386\u5982\u4e0b\u51e0\u4e2a\u751f\u547d\u5468\u671f\uff1a</p> <ul> <li> <p>onCreate     A\u6b63\u5728\u88ab\u521b\u5efa\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9bActivity\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u4f8b\u5982\u5e03\u5c40\u6587\u4ef6\u7684\u52a0\u8f7d\u4e0e\u4e8b\u4ef6\u7684\u7ed1\u5b9a\uff08setContentView\uff0cfindViewById\uff0csetOnClickListener\u7b49\uff09\u3002</p> </li> <li> <p>onStart     A \u6b63\u5728\u88ab\u542f\u52a8\uff0cA \u7531\u4e0d\u53ef\u89c1\u53d8\u4e3a\u53ef\u89c1\u65f6\u8c03\u7528\uff0c\u6b64\u65f6 A \u8fd8\u65e0\u6cd5\u4e0e\u7528\u6237\u4ea4\u4e92\u3002\u6b64\u65f6\u53ef\u4ee5\u505a\u4e00\u4e9b\u6570\u636e\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff08\u5f00\u542f\u7ebf\u7a0b\u53bb\u62c9\u672c\u5730\u6570\u636e\u5e93\u6570\u636e\uff0c\u6216\u4ece\u540e\u53f0\u62c9\u6570\u636e\uff09\u3002</p> </li> <li> <p>onResume     A \u5df2\u7ecf\u53ef\u89c1\uff0c\u5e76\u51fa\u73b0\u5728\u524d\u53f0\uff0c\u8be5Activity\u4f4d\u4e8e\u8fd4\u56de\u6808\u6808\u9876\uff0c\u53ef\u4ee5\u54cd\u5e94\u7528\u6237\u7684\u64cd\u4f5c\uff0c\u5373\u53ef\u4ee5\u4e0e\u7528\u6237\u4ea4\u4e92\u4e86\u3002</p> <p>\u5982\u679c\u6b64\u65f6\u7528\u6237\u62c9\u8d77\u53e6\u4e00\u4e2a**Activity B**, Activity A \u4f1a\u987a\u5e8f\u7ecf\u5386\u5982\u4e0b\u51e0\u4e2a\u751f\u547d\u5468\u671f\uff1a</p> </li> <li> <p>onPause     \u8868\u793a A \u6b63\u5728\u505c\u6b62\uff0c\u51c6\u5907\u4ece\u524d\u53f0\u8fd4\u56de\u81f3\u540e\u53f0\uff0c\u6b64\u65f6\u53ef\u4ee5\u505a\u4e00\u4e9b\u505c\u6b62\u52a8\u753b\uff0c\u6570\u636e\u5b58\u50a8\u7b49\u5de5\u4f5c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728onPause\u751f\u547d\u5468\u671f\u8fdb\u884c\u7684\u5de5\u4f5c\u4e0d\u80fd\u592a\u8017\u65f6\uff0c\u4e0d\u7136\u4f1a\u5f71\u54cd B \u7684\u663e\u793a\u3002\uff08Activity A\u7684onPause\u6267\u884c\u5b8c\u540e\uff0cActivity B\u7684onResume\u624d\u4f1a\u6267\u884c\uff09\u3002</p> </li> <li> <p>onStop     \u5728 A \u5b8c\u5168\u4e0d\u53ef\u89c1\u65f6\u8c03\u7528\uff0c\u7d27\u968f\u7740onPause\u6267\u884c\uff0c\u8868 A \u5373\u5c06\u505c\u6b62\uff0c\u6b64\u65f6 A \u5df2\u7ecf\u4e0d\u5728\u524d\u53f0\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u7a0d\u5fae\u91cd\u91cf\u7ea7\u7684\u56de\u6536\u5de5\u4f5c\uff0c\u4f46\u540c\u6837\u4e0d\u80fd\u592a\u8017\u65f6\uff0c\uff08\u5982\u679c\u6b64\u65f6\u65b0\u6253\u5f00\u7684Activity B\u662f\u5bf9\u8bdd\u6846\u5f0f\u7684Activity\uff0c\u80cc\u666f\u5b58\u5728\u4e00\u5b9a\u533a\u57df\u662f\u900f\u660e\u7684\uff0c\u5219Activity A\u7684onStop\u4e0d\u4f1a\u8c03\u7528\uff09\u3002</p> </li> <li> <p>onDestroy     \u8868\u793a A \u5373\u5c06\u88ab\u9500\u6bc1\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u8d44\u6e90\u7684\u56de\u6536\u3001\u91ca\u653e\u5de5\u4f5c\u3002\u4e00\u822c\u662f\u7ecf\u8fc7\u7528\u6237\u6309\u4e0bback\u952e\u6216\u8005\u7cfb\u7edf\u8d44\u6e90\u7d27\u5f20\u65f6\uff0c\u5c06Activity A\u91ca\u653e\u6389\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5185\u5b58\u65f6\u8c03\u7528\u3002</p> </li> </ul> <p>Activity B\u7ecf\u5386\u4e86onResume\u751f\u547d\u5468\u671f\u540e\u5df2\u7ecf\u663e\u793a\u5728\u524d\u53f0\uff0c\u5982\u679c\u6b64\u65f6\u6309\u4e0bback\u8fd4\u56de\u952e\uff0c\u4ece B \u9875\u9762\u8fd4\u56de\uff0c\u800c A \u8fd8\u505c\u7559\u5728onStop\uff0c\u6ca1\u6709\u7ecf\u8fc7onDestroy\u751f\u547d\u5468\u671f\u7684\u8bdd\uff0cA \u4f1a\u7ecf\u5386\u5982\u4e0b\u51e0\u4e2a\u751f\u547d\u5468\u671f\u540e\u91cd\u65b0\u663e\u793a\uff1a</p> <ul> <li>onRestart: A \u7531onStop\u505c\u6b62\u72b6\u6001\uff0c\u8f6c\u4e3a\u8fd0\u884c\u72b6\u6001\u65f6\u8c03\u7528\uff0c\u8868 A \u6b63\u5728\u88ab\u91cd\u65b0\u542f\u52a8\u3002</li> <li>onStart</li> <li>onResume</li> </ul> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6392\u9664Activity\u9000\u5230\u540e\u53f0\u7684\u60c5\u51b5\uff0cActivity\u4ece\u521b\u5efa\u5230\u9500\u6bc1\uff0c\u603b\u5171\u4f1a\u7ecf\u8fc76\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5206\u522b\u662fonCreate\uff0conStart\uff0conResume\uff0conPause\uff0conStop\uff0conDestroy\u3002\u4ece\u8fd9\u51e0\u4e2a\u751f\u547d\u5468\u671f\u53d1\u751f\u65f6\u7684\u7279\u6027\u6765\u770b\uff0c\u4f1a\u53d1\u73b0onCreate\u4e0eonDestroy\u3001onStart\u4e0eonStop\u3001onResume\u4e0eonPause\u662f\u4e00\u79cd\u76f8\u53cd\u7684\u72b6\u6001\u3002</p> <p>\u5982\u679c\u8be5Activity\u6709\u4e8b\u4ef6\u6216\u670d\u52a1\u9700\u8981\u6ce8\u518c(register)\uff0c\u4e00\u822c\u4f1a\u5728onCreate\u4e2d\u8fdb\u884c\uff0c\u800c\u5bf9\u5e94\u7684\u89e3\u6ce8\u518c\u64cd\u4f5c(unregister)\uff0c\u6700\u597d\u5728\u4e0eonCreate\u5bf9\u5e94\u7684onDestroy\u4e2d\u5b8c\u6210\uff0c\u91ca\u653e\u8d44\u6e90\uff0c\u8fd9\u662f\u4e00\u79cd\u826f\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002</p> <p>\u5c06\u4e0a\u8ff0\u51e0\u4e2a\u751f\u547d\u5468\u671f\u603b\u7ed3\u6210\u4e00\u5f20\u56fe\uff1a</p> <p></p> <p>\u901a\u8fc7\u4e0a\u9762\u7684\u6587\u5b57\u63cf\u8ff0\uff0c\u770b\u8fd9\u4e2a\u56fe\u5e94\u8be5\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\u3002\u672a\u63d0\u5230\u7684\u662f\uff0c\u4e0a\u56fe\u4e2donPause()\u8fd8\u6709\u4e2a\u7bad\u5934\u6307\u5411\u4e86onResume()\uff0c\u8fd9\u662f\u4e00\u79cd\u6781\u7aef\u60c5\u51b5\uff1b\u5373\u8003\u8651\u5f53Activity A \u8df3\u8f6c\u5230Activity B \u7684\u60c5\u51b5\uff0c\u6b64\u65f6 A \u8fd8\u5728\u6267\u884conPause() \uff0c B \u8fd8\u672a\u663e\u793a\u51fa\u6765\u3002\u5feb\u901f\u5730\u4eceB\u56de\u5230A\uff0c\u6b64\u65f6\u4f1a\u76f4\u63a5\u6267\u884c A \u7684onResume()\u800c\u4e0d\u4f1a\u8d70onRestart()\u3002\u4e0d\u8fc7\u4e00\u822c\u5f88\u96be\u590d\u73b0\u8fd9\u79cd\u64cd\u4f5c\uff0c\u5927\u5bb6\u7559\u4e2a\u5fc3\u773c\u5c31\u884c\u3002</p> <p>\u5728\u5c06\u4e0a\u6587\u7684\u7ec6\u8282\u63d0\u70bc\u4e00\u4e0b\uff1a</p> <ul> <li>onStart\u3001onResume\u3001onPause\u3001onStop\u770b\u8d77\u6765\u56de\u8c03\u8c03\u7528\u7684\u65f6\u673a\u5dee\u4e0d\u591a\uff0c\u5b83\u4eec\u4fe9\u533a\u522b\u5728\u54ea\u5462\uff1f</li> </ul> <p>onStart\u548conStop\u662f\u4eceActivity\u662f\u5426\u53ef\u89c1\u7684\u89d2\u5ea6\u6765\u56de\u8c03\u7684\uff0c\u800conResume\u548conPause\u5219\u662f\u4eceActivity\u662f\u5426\u4f4d\u4e8e\u524d\u53f0\u3001\u662f\u5426\u53ef\u4ee5\u4e0e\u7528\u6237\u4ea4\u4e92\u7684\u89d2\u5ea6\u6765\u56de\u8c03\u7684\uff0c\u9664\u4e86\u8fd9\u65b9\u9762\u7684\u5dee\u522b\uff0c\u5728\u65f6\u673a\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u6ca1\u6709\u5176\u4ed6\u660e\u663e\u533a\u522b\u3002</p> <ul> <li>\u4eceActivity A \u8df3\u8f6c\u5230Activity B\uff0c\u662f\u5148\u6267\u884c A \u7684onPause()\uff0c\u8fd8\u662f\u5148\u6267\u884c B \u7684onResume()\u5462\uff1f</li> </ul> <p>\u8fd9\u90e8\u5206\u8bbe\u8ba1Activity\u8df3\u8f6c\u7684\u6e90\u7801\uff0c\u6e90\u7801\u903b\u8f91\u592a\u6df1\u3001\u592a\u590d\u6742\u5c31\u4e0d\u5148\u5728\u57fa\u7840\u7bc7\u8ba8\u8bba\u4e86\uff0c\u5927\u5bb6\u76ee\u524d \u5148\u8bb0\u4f4f\u7ed3\u8bba\u5c31\u597d\uff1aA \u7684onPause()\u4f1a\u5148\u6267\u884c\uff0c\u7136\u540e\u624d\u6267\u884c B \u7684onResume()\uff0c\u8fd9\u4e2a\u7ec6\u8282\u4e5f\u662f\u9762\u8bd5\u4e2d\u53ef\u80fd\u4f1a\u95ee\u5230\u7684\u70b9\u3002</p> <ul> <li>\u5728onPause\u4e2d\u4e0d\u80fd\u8fdb\u884c\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u65b0Activity\u7684\u663e\u793a\uff0c\u7a0d\u5fae\u91cd\u4e00\u70b9\u7684\u64cd\u4f5c\u53ef\u4ee5\u653e\u5728onStop\u4e2d\uff0c\u4f46\u4f9d\u7136\u4e0d\u80fd\u592a\u8017\u65f6\u3002</li> </ul> <p>\u5982\u4f55 Activity A \u542f\u52a8\u4e00\u4e2a\u900f\u660e\u7684 Activity B\uff0c\u4f1a\u7ecf\u5386\u54ea\u4e9b\u751f\u547d\u5468\u671f\u5462\uff1f</p> <p>\u8fd9\u662f\u6211\u9762\u8bd5\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a B \u9875\u9762\u900f\u660e\uff0c \u6240\u4ee5\u8df3\u8f6c\u5230 B \u9875\u9762\u540e\uff0cA \u9875\u9762\u4f9d\u7136\u53ef\u89c1\uff0c\u56e0\u6b64\u5c31\u4e0d\u4f1a\u8c03\u7528 Activity A \u7684 onStop \u65b9\u6cd5\u3002</p> <ul> <li> <p>\u4e00\u822c\u60c5\u51b5\uff0cA/B \u5747\u4e0d\u662f\u900f\u660e\u9875\u9762\uff1a</p> <ul> <li>A \u8df3\u8f6c B \u9875\u9762\u4f1a\u7ecf\u5386\u7684\u751f\u547d\u5468\u671f\uff1aA.onPause() -&gt; B.onCreate() -&gt; B.onStart() -&gt; B.onResume() -&gt; A.onStop\u3002</li> <li>\u4ece B \u9875\u9762\u8fd4\u56de A \u9875\u9762\u7ecf\u5386\u7684\u751f\u547d\u5468\u671f\uff1aB.onPause() -&gt; A.onRestart() -&gt; A.onStart() -&gt; A.onResume() -&gt; B.onStop()\u3002</li> </ul> </li> <li> <p>B\u662f\u900f\u660e\u9875\u9762\u7684\u60c5\u51b5\uff1a</p> <ul> <li>\u5982\u679c B \u662f\u900f\u660e\u7684\uff0cA \u8df3\u8f6c\u5230 B\uff1aA.onPause() -&gt; B.onCreate() -&gt; B.onStart() -&gt; B.onResume()\u3002</li> <li>\u4ece B \u8fd4\u56de A\uff1aB.onPause() -&gt; A.onResume() -&gt; B.onStop()\u3002</li> </ul> </li> </ul>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_2","title":"\u5f02\u5e38\u751f\u547d\u5468\u671f","text":"<p>\u5f02\u5e38\u60c5\u51b5\u5c31\u662f\u9664\u5f00\u7528\u6237\u81ea\u5df1\u4e3b\u52a8\u9000\u51faActivity\u7684\u60c5\u51b5\u3002</p> <p>\u8003\u8651\u4e00\u79cd\u5f02\u5e38\u60c5\u51b5\uff0cActivity C \u6253\u5f00\u4e86Actvity D\u540e\uff0cC\u8fdb\u5165\u4e86\u505c\u6b62\u72b6\u6001\uff08\u8c03\u7528\u4e86onStop()\uff09\uff0c\u6b64\u65f6\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\uff0c\u9700\u8981\u56de\u6536 C\uff08\u8c03\u7528C\u7684onDestroy()\uff09 \uff0c\u5f53\u7528\u6237\u4ece D \u8fd4\u56de\u5230 C\uff0cC \u4f1a\u88ab\u91cd\u65b0\u521b\u5efa\uff08\u8c03\u7528onCreate()\uff09\u3002\u5982\u679c\u539f\u6765 C \u91cc\u8fb9\u6709\u4e34\u65f6\u72b6\u6001\u5b58\u50a8\u7740\uff0c\u6bd4\u5982TextView\u4e2d\u7684\u6587\u5b57\u3002\u90a3\u4e48\u4ece D \u8fd4\u56de C \u65f6\uff0cC\u56e0\u4e3a\u91cd\u65b0\u521b\u5efa\uff0c\u5982\u679cTextView\u672a\u6307\u5b9aID\uff0c\u90a3\u5b83\u539f\u6765\u7684\u6587\u5b57\u5c31\u4f1a\u6d88\u5931\uff0c\u8fd9\u4e00\u5b9a\u7a0b\u5ea6\u5f71\u54cd\u4e86\u7528\u6237\u7684\u4f53\u9a8c\u3002</p> <p>\u56e0\u6b64\u4e3a\u4e86\u4f18\u5316\u7528\u6237\u4f53\u9a8c\uff0cActivity\u63d0\u4f9b\u4e86\u4e00\u4e2aonSaveInstanceState()\u56de\u8c03\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u8bc1\u5f02\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728Activity\u88ab\u56de\u6536\u4e4b\u524d\u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\u3002</p> <p>onSaveInstanceState()\u65b9\u6cd5\u4f1a\u643a\u5e26\u4e00\u4e2abundle\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7bundle\u5bf9\u8c61\uff0c\u5b58\u50a8\u4e00\u4e9b\u7b80\u5355\u7684\u72b6\u6001\u4fe1\u606f\u3002</p> <p>Activity\u91cd\u65b0\u521b\u5efa\u540e\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528onRestoreInstanceState()\uff0c\u5e76\u628aActivity\u9500\u6bc1\u65f6onSaveInstanceState()\u65b9\u6cd5\u6240\u4fdd\u5b58\u7684Bundle\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u540c\u65f6\u4f20\u9012\u7ed9onRestoreInstanceState()\u548conCreate()\u3002</p> <p>\u4f60\u53ef\u4ee5\u9009\u62e9\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4e2d\u4efb\u610f\u4e00\u4e2a\u6765\u6062\u590d\u6570\u636e\uff0c\u4e8c\u8005\u7684\u533a\u522b\u662f\uff1aonRestoreInstanceState\u4e00\u65e6\u88ab\u8c03\u7528\uff0c\u5176bundle\u5bf9\u8c61\u4e00\u5b9a\u662f\u6709\u503c\u7684\uff0c\u800conCreate\u5728\u6b63\u5e38\u542f\u52a8Activity\u7684\u60c5\u51b5\u4e0bbundle\u5bf9\u8c61\u662f\u65e0\u503c\u7684\u3002</p> <pre><code>@Override  \nprotected void onCreate(@Nullable Bundle savedInstanceState) {  \n    super.onCreate(savedInstanceState);    \n}  \n\n@Override  \nprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {  \n    super.onRestoreInstanceState(savedInstanceState);  \n}  \n</code></pre> <p>\u8c03\u7528\u65f6\u673a</p> <p><code>onSaveInstanceState()</code>\u5728<code>onStop()</code>\u4e4b\u524d\u8c03\u7528\uff0c<code>onRestoreInstanceState()</code>\u4f1a\u5728<code>onStart()</code>\u4e4b\u540e\u8c03\u7528\u3002</p> <p></p> <p>\u5f02\u5e38\u60c5\u51b5\u4e0b\uff0cActivity\u6570\u636e\u7684\u5b58\u50a8\u548c\u6062\u590d\u7684\u751f\u547d\u8fc7\u7a0b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5e38\u89c1\u7684\u5f02\u5e38\u60c5\u51b5\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a</p>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_3","title":"\u7cfb\u7edf\u914d\u7f6e\u53d1\u751f\u6539\u53d8\u5f15\u8d77\u751f\u547d\u5468\u671f\u7684\u5f02\u5e38\u53d8\u5316","text":"<p>\u4e3e\u4f8b\uff1a\u5f00\u542f\u624b\u673a\u7684\u81ea\u52a8\u65cb\u8f6c\u540e\uff0c\u5f53Activity\u4ece\u7ad6\u5c4f\u72b6\u6001\u8f6c\u53d8\u4e3a\u6a2a\u5c4f\u65f6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u9500\u6bc1\u539f\u5148\u7684Activity\u5e76\u91cd\u5efa\u3002\u5982\u679c\u4e0d\u505a\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u4e48\u6bcf\u5f53\u7cfb\u7edf\u914d\u7f6e\u6539\u53d8\u65f6\uff0cActivity\u90fd\u4f1a\u9500\u6bc1\u91cd\u5efa\u3002 \u00a0 - \u5f53\u624b\u673a\u4ece\u7ad6\u5c4f\u8f6c\u53d8\u4e3a\u6a2a\u5c4f\u65f6\uff0c\u53ef\u4ee5\u770b\u5230\u539fActivity\u6267\u884c\uff1a onPause -&gt; onSaveInstanceState -&gt; onStop -&gt; onDestroy \uff0c\u8d70\u5b8c\u539fActivity\u7684\u751f\u547d\u5468\u671f\u3002</p> <ul> <li> <p>\u5f53\u539fActivity\u9500\u6bc1\u540e\u53c8\u4f1a\u8fc5\u901f\u7684\u5f00\u542f\u65b0\u7684Activity\u6267\u884c \uff1aonCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume\uff0c \u6700\u7ec8\u65b0\u7684Activity\u663e\u793a\u5728\u7528\u6237\u754c\u9762\u4e0a\u3002</p> </li> <li> <p>onSaveInstanceState \u548c onRestoreInstanceState \u4e24\u4e2a\u65b9\u6cd5\u4ec5\u5728\u751f\u547d\u5468\u671f\u5f02\u5e38\u60c5\u51b5\u4e0b\u6267\u884c\u3002     onSaveInstanceState\u4e3b\u8981\u662f\u5bf9\u5f02\u5e38\u9500\u6bc1\u7684Activity\u8fdb\u884c\u6570\u636e\u4fdd\u5b58\uff0conRestoreInstanceState\u4e3b\u8981\u662f\u5bf9\u5b58\u50a8\u7684\u6570\u636e\u8fdb\u884c\u6062\u590d\uff0c\u6570\u636e\u5b58\u53d6\u90fd\u662f\u901a\u8fc7Bundle\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728Bundle\u4e2d\u9644\u52a0\u4e2a\u4eba\u6570\u636e\u8fdb\u884c\u8bfb\u5199\u3002     \u7ecf\u8fc7\u6d4b\u8bd5onSaveInstanceState\u5728onStop\u524d\u8c03\u7528\uff0conRestoreInstanceState\u5728onStart\u65b9\u6cd5\u540e\u8c03\u7528\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5bf9\u89c6\u56fe\u8fdb\u884c\u4fe1\u606f\u6570\u636e\u7684\u5b58\u53d6\uff0c\u4f8b\u5982\uff1aListView\u7684\u6eda\u52a8\u4f4d\u7f6e\u7b49\u7b49\u3002</p> </li> </ul>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_4","title":"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f","text":"<p>\u4e0d\u540c\u624b\u673a\u8bbe\u5907\u7684\u5206\u8fa8\u7387\u4e0d\u540c\uff0c\u8981\u5c06\u56fe\u7247\u9002\u914d\u4e0d\u540c\u5927\u5c0f\u7684\u624b\u673a\u5c4f\u5e55\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5728drawable-xhdpi\uff0cdrawable-xxhdpi\uff0cdrawable-xxxhdpi\u7b49\u76ee\u5f55\u4e2d\u5b58\u653e\u5bf9\u5e94\u5927\u5c0f\u7684\u56fe\u7247Resource\u6587\u4ef6\u3002 \u5f53App\u542f\u52a8\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6839\u636e\u5f53\u524d\u8bbe\u5907\u7684\u5c4f\u5e55\u60c5\u51b5\u53bb\u52a0\u8f7d\u5408\u9002\u7684Resource\u8d44\u6e90\u3002\u540c\u4e00\u53f0\u8bbe\u5907\u7684\u6a2a\u5c4f\u548c\u7ad6\u5c4f\u65f6\u7684\u5c4f\u5e55\u5927\u5c0f\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5982\u679c\u5f53\u524dActivity\u5904\u4e8e\u7ad6\u5c4f\u72b6\u6001\uff0c\u7a81\u7136\u65cb\u8f6c\u81f3\u6a2a\u5c4f\uff0c\u90a3\u4e48\u6b64\u65f6\u7cfb\u7edf\u7684\u5c4f\u5e55\u914d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8\u3002</p> <p>\u5982\u4f55\u907f\u514d\u8fd9\u79cd\u56e0\u4e3a\u7cfb\u7edf\u914d\u7f6e\u66f4\u6539\u800c\u5bfc\u81f4Activity\u91cd\u5efa\u7684\u5f02\u5e38\u60c5\u51b5\uff1f</p> <p>\u5982\u679capp\u5728\u5e94\u7528\u914d\u7f6e\u53d8\u66f4\u671f\u95f4\u65e0\u9700\u66f4\u65b0\u8d44\u6e90\uff0c\u6211\u4eec\u53ef\u4ee5\u5728AndroidManifest.xml\u6587\u4ef6\u4e2d\u76f8\u5e94\u7684Activity\u58f0\u660e\uff0c\u81ea\u884c\u5904\u7406\u76f8\u5173\u914d\u7f6e\u7684\u53d8\u66f4\uff0c\u4ece\u800c\u963b\u6b62\u7cfb\u7edf\u91cd\u5efaActivity\u3002 \u53ea\u9700\u6307\u5b9a\u76f8\u5173\u7684configChanges\u5c5e\u6027\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5c31\u963b\u6b62\u4e86\u5f53\u5c4f\u5e55\u53d1\u751f\u65cb\u8f6c\u65f6Activity\u7684\u7cfb\u7edf\u81ea\u52a8\u91cd\u5efa\u3002</p> <pre><code>&lt;activity android:name=\".MainActivity\"\n        android:configChanges=\"orientation|screenSize\" /&gt;\n</code></pre> <p>\u5f53configChanges\u4e2d\u6307\u5b9a\u7684\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528Activity\u7684onConfigurationChanged()\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u9700\u8981\u5904\u7406\u914d\u7f6e\u53d8\u66f4\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u624b\u52a8\u5904\u7406\u3002\u4e00\u822c\u6211\u4eec\u5728\u5c4f\u5e55\u65cb\u8f6c\u65f6\uff0c\u5e0c\u671bActivity\u80fd\u4fdd\u6301\u539f\u6837\uff0c\u4e0d\u91cd\u5efa\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u7a7a\u5b9e\u73b0\u8be5\u65b9\u6cd5\u5373\u53ef\u3002</p> <p>\u5f53\u7136\uff0c\u9700\u8981\u81ea\u884c\u5904\u7406\u65f6\uff0c\u6bd4\u5982\u68c0\u67e5\u5f53\u524d\u8bbe\u5907\u7684\u65b9\u5411\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a</p> <pre><code>@Override  \npublic void onConfigurationChanged(@NonNull Configuration newConfig) {  \n    super.onConfigurationChanged(newConfig);  \n\n    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {  \n        //TODO  \n    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {  \n        //TODO  \n    }  \n}\n</code></pre> <p>configChanges\u5c5e\u6027\u53ef\u4ee5\u6307\u5b9a\u5f88\u591a\u5c5e\u6027\uff0c\u5982\u679c\u4f60\u8fd8\u60f3\u6307\u5b9a\u66f4\u591a\u914d\u7f6e\uff0c\u4e0d\u540c\u914d\u7f6e\u95f4\u7528\"|\"\u5206\u9694\uff0c\u6bd4\u5982\u4e0a\u9762\u90a3\u6837\u3002</p> <p>\u90e8\u5206\u5e38\u7528\u7684configChanges\u914d\u7f6e\u9879\u76ee\u5982\u4e0b\uff1a</p> \u9879\u76ee \u63cf\u8ff0 keyboard \u952e\u76d8\u7c7b\u578b\u53d1\u751f\u53d8\u66f4 \u2014 \u4f8b\u5982\uff0c\u7528\u6237\u63d2\u5165\u5916\u7f6e\u952e\u76d8\u3002 keyboardHidden \u952e\u76d8\u65e0\u969c\u788d\u529f\u80fd\u53d1\u751f\u53d8\u66f4 \u2014 \u4f8b\u5982\uff0c\u7528\u6237\u663e\u793a\u786c\u952e\u76d8\u3002 locale \u8bed\u8a00\u533a\u57df\u53d1\u751f\u53d8\u66f4 \u2014 \u7528\u6237\u5df2\u4e3a\u6587\u672c\u9009\u62e9\u65b0\u7684\u663e\u793a\u8bed\u8a00\u3002 orientation \u5c4f\u5e55\u65b9\u5411\u53d1\u751f\u53d8\u66f4 \u2014 \u7528\u6237\u65cb\u8f6c\u8bbe\u5907\u3002 screenLayout \u5c4f\u5e55\u5e03\u5c40\u53d1\u751f\u53d8\u66f4 \u2014 \u4e0d\u540c\u7684\u663e\u793a\u73b0\u53ef\u80fd\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u3002 screenSize \u5f53\u524d\u53ef\u7528\u5c4f\u5e55\u5c3a\u5bf8\u53d1\u751f\u53d8\u66f4\u3002\u8be5\u503c\u8868\u793a\u5f53\u524d\u53ef\u7528\u5c3a\u5bf8\u76f8\u5bf9\u4e8e\u5f53\u524d\u7eb5\u6a2a\u6bd4\u7684\u53d8\u66f4\uff0c\u5f53\u7528\u6237\u5728\u6a2a\u5411\u4e0e\u7eb5\u5411\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u5b83\u4fbf\u4f1a\u53d1\u751f\u53d8\u66f4\u3002","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#activity","title":"\u8d44\u6e90\u5185\u5b58\u4e0d\u8db3\u5bfc\u81f4\u4f4e\u4f18\u5148\u7ea7\u7684Activity\u88ab\u6740\u6b7b","text":"<p>\u8fd9\u79cd\u60c5\u51b5\u5c31\u662f\u6211\u4eec\u5206\u6790\u5f02\u5e38\u60c5\u51b5\u4e0b\u7684\u751f\u547d\u5468\u671f\u65f6\u4e3e\u7684\u4f8b\u5b50\u3002</p> <p>Activity C \u8df3\u8f6c\u81f3Activity D\uff0cC \u5904\u4e8e\u540e\u53f0\uff0c\u5f53\u7cfb\u7edf\u5185\u5b58\u8d44\u6e90\u4e0d\u8db3\u65f6\uff0cC\u7684\u4f18\u5148\u7ea7\u8f83\u4f4e\uff0c\u4f1a\u88ab\u7cfb\u7edf\u9500\u6bc1\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5185\u5b58\uff0c\u7136\u540e\u518d\u4ece D \u56de\u5230 C \uff0cC \u4f1a\u88ab\u91cd\u5efa\uff0c\u8d70\u4e00\u904d\u5f02\u5e38\u65f6\u7684\u6570\u636e\u5b58\u50a8\u548c\u6062\u590d\u7684\u751f\u547d\u8fc7\u7a0b\u3002</p> <p>Activity\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff0c\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e09\u4e2d\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u524d\u53f0Activity\uff0c\u6b63\u5728\u4e0e\u7528\u6237\u4ea4\u4e92\u7684Activity\uff0c\u5176\u4f18\u5148\u7ea7\u6700\u9ad8\u3002</p> </li> <li> <p>\u53ef\u89c1\u4f46\u975e\u524d\u53f0Activity\uff0c\u6bd4\u5982Activity\u4e2d\u5f39\u51fa\u4e86\u4e00\u4e2a\u5bf9\u8bdd\u6846\uff0c\u5bfc\u81f4Activity\u53ef\u89c1\u4f46\u51fa\u4e8e\u540e\u53f0\uff0c\u65e0\u6cd5\u4e0e\u7528\u6237\u76f4\u63a5\u4ea4\u4e92\u3002</p> </li> <li> <p>\u540e\u53f0Activity\uff0c\u5df2\u7ecf\u88ab\u6682\u505c\u7684Activity\uff0c\u6bd4\u5982\u6267\u884c\u4e86onStop\uff0c\u7528\u6237\u770b\u4e0d\u89c1\uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\u3002</p> </li> </ul> <p>\u5f53\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u7cfb\u7edf\u4f1a\u6309\u7167\u4e0a\u8ff0\u4f18\u5148\u7ea7\u7684\u987a\u5e8f\u53bb\u6740\u6b7bActivity\u6240\u5728\u7684\u8fdb\u7a0b\u3002\u5e76\u5728\u540e\u7eed\u901a\u8fc7onSaveInstanceState()\u548conRestoreInstanceState()\u53bb\u5b58\u50a8\u548c\u6062\u590d\u6570\u636e\u3002</p>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_5","title":"\u62d3\u5c55","text":"","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#viewonsaveinstancestateonrestoreinstancestate","title":"View\u4e5f\u6709onSaveInstanceState\u3001onRestoreInstanceState()\u65b9\u6cd5","text":"<p>\u5728\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u7cfb\u7edf\u81ea\u52a8\u4e3a\u6211\u4eec\u505a\u4e86\u4e00\u5b9a\u7684\u6062\u590d\u5de5\u4f5c\u3002\u5f53Activity\u5728\u5f02\u5e38\u60c5\u51b5\u4e0b\u9700\u8981\u91cd\u5efa\u65f6\uff0c\u7cfb\u7edf\u4e3a\u9ed8\u8ba4\u4e3a\u6211\u4eec\u4fdd\u5b58\u5f53\u524dActivity\u7684\u89c6\u56fe\u7ed3\u6784\uff0c\u5e76\u4e14\u5728\u91cd\u542f\u540e\u4e3a\u6211\u4eec\u6062\u590d\u8fd9\u4e9b\u6570\u636e\uff0c\u6bd4\u5982\u6587\u672c\u6846\u4e2d\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\u3001ListView\u6eda\u52a8\u7684\u4f4d\u7f6e\u7b49\u7b49\u3002</p> <pre><code>// TextView \u7684onSaveInstanceState()\u65b9\u6cd5\n@Override\npublic Parcelable onSaveInstanceState() {\n    Parcelable superState = super.onSaveInstanceState();\n\n    // Save state if we are forced to\n    final boolean freezesText = getFreezesText();\n    boolean hasSelection = false;\n    int start = -1;\n    int end = -1;\n\n    if (mText != null) {\n        start = getSelectionStart();\n        end = getSelectionEnd();\n        if (start &gt;= 0 || end &gt;= 0) {\n            // Or save state if there is a selection\n            hasSelection = true;\n        }\n    }\n\n    if (freezesText || hasSelection) {\n        SavedState ss = new SavedState(superState);\n        ...\n        ss.error = getError();\n\n        if (mEditor != null) {\n          // \u5b58\u50a8editor\u72b6\u6001\n            ss.editorState = mEditor.saveInstanceState();\n        }\n        return ss;\n    }\n\n    return superState;\n}\n\n// TextView \u7684onRestoreInstanceState()\u65b9\u6cd5\n@Override\npublic void onRestoreInstanceState(Parcelable state) {\n  if (!(state instanceof SavedState)) {\n    super.onRestoreInstanceState(state);\n    return;\n  }\n\n  SavedState ss = (SavedState) state;\n  super.onRestoreInstanceState(ss.getSuperState());\n\n  // XXX restore buffer type too, as well as lots of other stuff\n  if (ss.text != null) {\n    // \u8c03\u7528setText\uff0c\u6062\u590d\u6570\u636e\n    setText(ss.text);\n  }\n  ...\n}\n</code></pre> <p></p> <p>\u4e0a\u9762\u662fEditText\u7ad6\u5c4f\u548c\u6a2a\u5c4f\u5207\u6362\u65f6\uff0ctext\u6570\u636e\u5b58\u50a8\u548c\u6062\u590d\u6f14\u793a\u7684\u6548\u679c\u3002</p> <p>View\u7684onSaveInstanceState()\u8c03\u7528\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\u9996\u5148Activity\u88ab\u91cd\u5efa\u65f6\uff0c\u4f1a\u8c03\u7528onSaveInstanceState()\u53bb\u4fdd\u5b58\u6570\u636e\uff0c\u7136\u540eActivity\u4f1a\u59d4\u6258Window\u53bb\u4fdd\u5b58\u6570\u636e\uff0c\u63a5\u7740Window\u518d\u59d4\u6258\u4e0e\u5b83\u5173\u8054\u7684\u9876\u5c42\u5bb9\u5668DecorView\u53bb\u4fdd\u5b58\u6570\u636e\uff0c\u6700\u540eDecorView\u518d\u904d\u5386\u5b83\u4e00\u4e2a\u4e2a\u5b50View\u53bb\u4fdd\u5b58\u6570\u636e\u3002</p> <p></p> <p>View\u7684onRestoreInstanceState()\u4e5f\u662f\u7c7b\u4f3c\u7684\u601d\u60f3\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f60\u5e0c\u671bView\u5728\u5f02\u5e38\u9500\u6bc1\u65f6\u80fd\u987a\u5229\u8c03\u7528onSaveInstanceState()\u65b9\u6cd5\uff0c\u4f60\u5fc5\u987b\u5f97\u4e3a\u8be5View\u6307\u5b9a\u4e00\u4e2aid\uff0c\u5426\u5219View\u4e0d\u4f1a\u8d70\u5230onSaveInstanceState()\u6d41\u7a0b\u3002</p> <p>isSaveEnable\u4e5f\u4f1a\u5f71\u54cdonSaveInstanceState()\u7684\u8c03\u7528\uff0c\u8fd9\u4e2a\u503c\u662f\u4e2a\u6807\u5fd7\u4f4d\uff0c\u8868\u793aView\u662f\u5426\u4f1a\u4fdd\u5b58\u5176\u72b6\u6001\u3002\u9ed8\u8ba4\u4e3atrue\uff0c\u5373\uff0c\u9ed8\u8ba4\u4f1a\u4fdd\u5b58\u72b6\u6001\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u60f3View\u4fdd\u5b58\u72b6\u6001\uff0c\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3afalse</p> <pre><code>&lt;EditText\n        android:id=\"@+id/edit_text\"\n        ...\n        android:saveEnabled=\"false\"/&gt;\n</code></pre>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#_6","title":"\u7ad6\u5c4f\u4e0e\u6a2a\u5c4f\u5207\u6362\u65f6\uff0c\u72b6\u6001\u5b58\u50a8\u7684\u66f4\u4f18\u65b9\u6848","text":"<p>\u63a5\u4e0b\u6765\u6211\u5c06\u4e3a\u5927\u5bb6\u4ecb\u7ecdJetpack\u5e93\u7684\u7ec4\u4ef6ViewModel\uff0c\u5b83\u5728\u8bbe\u5907\u7ad6\u5c4f\u4e0e\u6a2a\u5c4f\u5207\u6362\u65f6\u7684\u72b6\u6001\u5b58\u50a8\u548c\u6062\u590d\uff0c\u6bd4\u4f20\u7edf\u7684\u7528onSaveInstanceState()\u3001onRestoreInstanceState()\u65b9\u6cd5\u66f4\u4f18\u3002</p> <p>JetPack\u5e93\u662f\u4e00\u4e2a\u7531\u591a\u4e2a\u5e93\u7ec4\u6210\u7684\u5957\u4ef6\uff0c\u53ef\u5e2e\u52a9\u5f00\u53d1\u8005\u9075\u5faa\u6700\u4f73\u505a\u6cd5\u3001\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u964d\u4f4e\u4ee3\u7801\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u5e76\u8ba9\u4ee3\u7801\u5728\u4e0d\u540cAndroid\u7248\u672c\u7684\u8bbe\u5907\u4e2d\u4fdd\u6301\u4e00\u81f4\u7684\u4f53\u9a8c\u3002fragment\u3001dataBinding\u3001ViewModel\uff0cMVVM\u7b49\u90fd\u662fJetPack\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u5927\u5bb6\u73b0\u5728\u57fa\u672c\u90fdandroidx\u5e93\uff0c\u5728\u8fd9\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u8fd8\u7528\u8fc7android-support-v7\uff0cv28\u5e93\u7b49\u7b49\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709support\u5e93\uff0c\u5c31\u662f\u56e0\u4e3a\u968f\u7740\u5b89\u5353\u7248\u672c\u7684\u8fed\u4ee3\uff0c\u4e00\u4e9b\u65e7\u7684\u63a7\u4ef6\u5728\u65b0\u7684\u5b89\u5353\u7248\u672c\u4e0a\u96be\u4ee5\u517c\u5bb9\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u6301\u4f53\u9a8c\u7684\u4e00\u81f4\u6027\uff0c\u5b89\u5353\u6bcf\u53d1\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u5c31\u4f1a\u6709\u4e00\u4e2asupport\u5e93\u8ddf\u7740\u53d1\u51fa\u6765\u3002</p> <p>\u6700\u540e\u53d1\u5e03\u7684\u662fandroid.support.v28\u7cfb\u5217\u5e93\uff0c\u8fd9\u6837\u7684\u547d\u540d\u683c\u5f0f\uff0c\u968f\u7740\u5b89\u5353\u7248\u672c\u7684\u5347\u7ea7\uff0csupport\u5e93\u8d8a\u6765\u8d8a\u591a\uff0c\u8c37\u6b4c\u4e5f\u610f\u8bc6\u5230\u8fd9\u4e0d\u662f\u4e00\u4e2a\u529e\u6cd5\u3002\u56e0\u6b64\u53d1\u5e03\u4e86\u4e00\u4e2aandroidx\u5e93\u6765\u7edf\u4e00\uff0c\u4ee5\u540e\u53d1\u5e03\u65b0\u7684\u7248\u672c\uff0c\u53ea\u9700\u8981\u5bf9androidx\u5e93\u8fdb\u884c\u5347\u7ea7\u8fed\u4ee3\u5c31\u53ef\u4ee5\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u53d1\u5e03\u65b0\u7684\u5e93\u3002JetPack\u5e93\u662fandroidx\u5e93\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u6240\u4ee5\u56de\u5230\u6b63\u9898\uff0cViewModel\u4e3a\u5565\u66f4\u4f18\uff1f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u4f18\u70b9\uff1a</p> <ul> <li>\u53ef\u4ee5\u5b58\u50a8\u66f4\u590d\u6742\u7684\u4e34\u65f6\u72b6\u6001\u3002</li> </ul> <p>\u524d\u6587\u63d0\u5230\uff0cActivity\u7684onSaveInstanceState()\u4e3b\u8981\u662f\u901a\u8fc7\u5c06\u72b6\u6001\u5b58\u50a8\u5230Bundle\u5bf9\u8c61\u4e2d\uff0cBundle\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u662f\u4e00\u4e2a\u4e2a\u952e\u503c\u5bf9\uff0c\u4e00\u4e2akey\u5bf9\u5e94\u7740\u4e00\u4e2avalue\uff0c\u5b58\u50a8\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5982Int\u3001Float\u3001Boolean\u7b49\u5f88\u65b9\u4fbf\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8981\u5728bundle\u4e2d\u5b58\u50a8\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002</p> <p>\u9996\u5148\u8fd9\u4e2a\u5bf9\u8c61\u9700\u8981\u7ee7\u627fParcelable\u63a5\u53e3\uff0c\u5e76\u5b9e\u73b0\u51e0\u4e2a\u65b9\u6cd5\uff0c\u4f7f\u5bf9\u8c61\u80fd\u591f\u5e8f\u5217\u5316\uff0c\u8fd9\u9700\u8981\u5f00\u53d1\u8005\u7f16\u5199\u4e00\u5b9a\u7684\u4ee3\u7801\u3002</p> <p>\u5176\u6b21\u8981\u4eceBundle\u53d6\u51fa\u5bf9\u8c61\uff0c\u9700\u8981\u7ecf\u8fc7\u53cd\u5e8f\u5217\u5316\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u9700\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u6709\u5f88\u591a\u4e2a\uff0c\u90a3\u4e48\u7528\u6237\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u770b\u5230\u4e4b\u524d\u7684\u72b6\u6001\uff0c\u4e0d\u4ec5\u6d88\u8017\u4e86\u6027\u80fd\uff0c\u5bf9\u5e94\u7528\u7684\u7528\u6237\u4f53\u9a8c\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u3002</p> <p>\u800cViewModel\uff0c\u5b83\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5176\u72b6\u6001\u662f\u5b58\u50a8\u5728\u5185\u5b58\u7684\uff0c\u5b58\u53d6\u590d\u6742\u72b6\u6001\u4e0d\u9700\u8981\u7ecf\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u8fc7\u7a0b\uff0c\u6027\u80fd\u4f1a\u6bd4\u4eceBundle\u9ad8\u5f88\u591a\u3002</p> <ul> <li>\u5c06\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u72b6\u6001\uff0c\u4ea4\u7ed9ViewModel\u7ba1\u7406\uff0c\u53ef\u4ee5\u5206\u62c5Activity\u7684\u5de5\u4f5c\uff0c\u6613\u4e8e\u89e3\u8026\uff0c\u65b9\u4fbf\u540e\u671f\u7684\u7ef4\u62a4\u3002</li> </ul> <p>\u50cfActivity\u548cFragment\u4e4b\u7c7b\u7684\u7ec4\u4ef6\uff0c\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u754c\u9762\u6570\u636e\uff0c\u5bf9\u7528\u6237\u64cd\u4f5c\u505a\u51fa\u54cd\u5e94\uff0c\u8fdb\u800c\u7ed9\u4e88\u7528\u6237UI\u4e0a\u7684\u53cd\u9988\u3002\u6bd4\u5982\u7528\u6237\u6309\u4e0b\u4e86\u4e00\u4e2a\u6309\u94ae\uff0c\u6309\u4e0b\u65f6\u6309\u94ae\u989c\u8272\u53d8\u6df1\u3002</p> <p>\u5982\u679c\u8981\u6c42Activity\u4e5f\u8d1f\u8d23\u4ece\u6570\u636e\u5e93\u6216\u7f51\u7edc\u52a0\u8f7d\u6570\u636e\uff0c\u8fd9\u4e0d\u4ec5\u9700\u8981\u5728Activity\u7ef4\u62a4\u52a0\u8f7d\u6570\u636e\u7684\u4ee3\u7801\uff0c\u4e5f\u9700\u8981\u7ef4\u62a4\u6570\u636e\u52a0\u8f7d\u56de\u6765\u540e\u7684\u4e00\u4e2a\u4e2a\u5f02\u6b65\u7684\u6570\u636e\u52a0\u8f7d\u56de\u8c03\uff0c\u751a\u81f3\u4f60\u8fd8\u5f97\u8003\u8651\u5f53Activity\u9000\u51fa\u65f6\uff0c\u5f02\u6b65\u56de\u8c03\u5bf9\u8c61\u7684\u91ca\u653e\u5de5\u4f5c\uff0c\u8fd9\u4f1a\u4f7fActivity\u7c7b\u8d8a\u53d1\u81a8\u80c0\uff0c\u81c3\u80bf\u3002</p> <p>\u7ed9Activity\u5206\u914d\u8fc7\u591a\u7684\u8d23\u4efb\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5355\u4e2a\u7c7b\u5c1d\u8bd5\u81ea\u5df1\u5904\u7406\u5e94\u7528\u7684\u6240\u6709\u5de5\u4f5c\uff0c\u4f1a\u589e\u52a0\u6d4b\u8bd5\u548c\u7ef4\u62a4\u7684\u96be\u5ea6\u3002\u5c06\u6570\u636e\u52a0\u8f7d\u548c\u56de\u8c03\u7684\u5de5\u4f5c\u4ea4\u7ed9ViewModel\uff0c\u5c06\u6570\u636e\u52a0\u8f7d\u7684\u903b\u8f91\u5de5\u4f5c\u4e0eActivity\u7684UI\u663e\u793a\u5de5\u4f5c\u5206\u79bb\uff0c\u4e0d\u4ec5\u80fd\u8ba9\u903b\u8f91\u66f4\u6e05\u6670\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u907f\u514d\u4e00\u4e2a\u7c7b\u4ee3\u7801\u91cf\u592a\u591a\uff0c\u592a\u81c3\u80bf\uff0c\u96be\u4ee5\u7ef4\u62a4\u3002</p> <p>ViewModel\u7684\u751f\u547d\u5468\u671f</p> <p>ViewModel\u5bf9\u8c61\u5b58\u5728\u7684\u65f6\u95f4\u8303\u56f4\u662f\u83b7\u53d6ViewModel\u65f6\u4f20\u9012\u7ed9 ViewModelProvider\u7684Lifecycle \u3002ViewModel \u5c06\u4e00\u76f4\u7559\u5728\u5185\u5b58\u4e2d\uff0c\u76f4\u5230\u9650\u5b9a\u5176\u5b58\u5728\u65f6\u95f4\u8303\u56f4\u7684 Lifecycle \u6c38\u4e45\u6d88\u5931\u3002</p> <p>\u6bd4\u5982\u4f60\u5728Activity\u4e2d\u901a\u8fc7ViewModelProvider\u83b7\u53d6\u4e86\u4e00\u4e2aViewModel\uff0c\u90a3\u4e48\u8fd9\u4e2alifecycle\u6307\u7684\u5c31\u662fActivity\u7684\u751f\u547d\u5468\u671f\u3002</p> <p></p> <p>\u6211\u4eec\u4e00\u822c\u4f1a\u5728Activity\u6267\u884conCreate()\u65b9\u6cd5\u65f6\u62ff\u5230ViewModel\u5bf9\u8c61\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5728activity\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\u591a\u6b21\u8c03\u7528onCreate()\uff0c\u6bd4\u5982\u5728\u65cb\u8f6c\u8bbe\u5907\u5c4f\u5e55\u65f6\u3002</p> <p>**ViewModel\u5b58\u5728\u7684\u65f6\u95f4\u8303\u56f4\u662f\u5728\u9996\u6b21\u8bf7\u6c42ViewModel\u5bf9\u8c61\u76f4\u5230Activity\u5b8c\u6210\u5e76\u9500\u6bc1\u3002**\u5728\u4e00\u4e2a\u751f\u547d\u5468\u671f\u5185\uff0c\u591a\u6b21\u8bf7\u6c42ViewModel\u5bf9\u8c61\uff0c\u83b7\u53d6\u5230\u7684\u90fd\u662f\u540c\u4e00\u4e2aViewModel\u5bf9\u8c61\u3002</p>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/lifecycle/#viewmodel","title":"ViewModel\u7684\u7b80\u5355\u4f7f\u7528","text":"<p>\u9996\u5148\u8981\u7528ViewModel\uff0c\u9700\u8981\u5f15\u5165\u5b83\u7684\u5e93\u3002</p> <pre><code>// ViewModel and LiveData\nimplementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n</code></pre> <p>\u7b80\u5355\u6f14\u793a\u4e0b\u52a0\u901f\u5668\u7684demo\uff0c\u5e03\u5c40\u6587\u4ef6\u5982\u4e0b\uff1a</p> <pre><code>&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".viwemodel.ViewModelActivity\"&gt;\n\n    &lt;androidx.appcompat.widget.AppCompatTextView\n            android:id=\"@+id/tv_number\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"24sp\"\n            android:textColor=\"#000\"\n            android:gravity=\"center\"\n            android:layout_centerInParent=\"true\"/&gt;\n\n    &lt;androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"46dp\"\n            android:text=\"ADD NUMBER\"\n            android:layout_below=\"@+id/tv_number\"\n            android:layout_marginTop=\"20dp\"/&gt;\n\n&lt;/RelativeLayout&gt;\n</code></pre> <p>\u5e03\u5c40\u6587\u4ef6\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u89e3\u91ca\u4e86\uff0c\u63a5\u4e0b\u6765\u770b\u770b\u903b\u8f91\u4ee3\u7801\uff1a</p> <pre><code>class ViewModelActivity : AppCompatActivity() {\n\n    private lateinit var vNumber: AppCompatTextView\n    private lateinit var mViewModel: UserModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_view_model)\n        val viewModelProvider = ViewModelProvider(this)\n        mViewModel = viewModelProvider.get(UserModel::class.java)\n\n        vNumber = findViewById(R.id.tv_number)\n\n        findViewById&lt;AppCompatButton&gt;(R.id.btn_add).setOnClickListener {\n            mViewModel.count++\n            setCounter()\n        }\n        setCounter()\n    }\n\n    private fun setCounter() {\n        vNumber.text = mViewModel.count.toString()\n    }\n\n}\n</code></pre> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0cactivity\u6ca1\u6709\u6307\u5b9aconfigchanges\u5c5e\u6027\uff0c\u5728\u7ad6\u5c4f\u548c\u6a2a\u5c4f\u5207\u6362\u65f6\uff0cTextView\u7684\u72b6\u6001\u4e5f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002</p> <p>ViewModel\u7684\u4ecb\u7ecd\u5c31\u5230\u8fd9\u91cc\u5566\uff0cViewModel\u8fd8\u6709\u5f88\u591a\u7528\u9014\uff0c\u4f8b\u5982\u5728\u540c\u4e00\u4e2aActivity\u95f4\u7684\u4e24\u4e2aFragment\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u3002\u5982\u679c\u914d\u5408JetPack\u5e93\u7684\u53e6\u4e00\u4e2aLiveData\u4f7f\u7528\uff0c\u5b83\u5c06\u66f4\u52a0\u5f3a\u5927\u3002</p>","tags":["Android","AMS","\u751f\u547d\u5468\u671f"]},{"location":"android/ams/android11-activity-start/","title":"Android11 Activity\u542f\u52a8\u6d41\u7a0b","text":"","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#appactivity","title":"App\u8fdb\u7a0b\u542f\u52a8Activity","text":"","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystartactivity","title":"Activity.startActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Activity.java\n\n@Override\npublic void startActivity(Intent intent) {\n    this.startActivity(intent, null);\n}\n\n@Override\npublic void startActivity(Intent intent, @Nullable Bundle options) {\n    ...\n    if (options != null) {\n        startActivityForResult(intent, -1, options);\n    } else {\n        // Note we want to go through this call for compatibility with\n        // applications that may have overridden the method.\n        startActivityForResult(intent, -1);\n    }\n}\n\n\n@Override\n@UnsupportedAppUsage\npublic void startActivityForResult(String who, Intent intent, int requestCode, @Nullable Bundle options) {\n    ...\n    options = transferSpringboardActivityOptions(options);\n    Instrumentation.ActivityResult ar =\n        mInstrumentation.execStartActivity(\n            this, mMainThread.getApplicationThread(), mToken, who,\n            intent, requestCode, options);\n    if (ar != null) {\n        //\u8fd4\u56de\u7ed3\u679c\n        mMainThread.sendActivityResult(\n            mToken, who, requestCode,\n            ar.getResultCode(), ar.getResultData());\n    }\n    cancelInputsAndStartExitTransition(options);\n}\n</code></pre> <ul> <li>\u8c03\u7528Instrumentation.execStartActivity</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#instrumentationexecstartactivity","title":"Instrumentation.execStartActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Instrumentation.java\n\n@UnsupportedAppUsage\npublic ActivityResult execStartActivity(\n        Context who, IBinder contextThread, IBinder token, Activity target,\n        Intent intent, int requestCode, Bundle options) {\n    IApplicationThread whoThread = (IApplicationThread) contextThread;\n    ...\n    try {\n        intent.migrateExtraStreamToClipData(who);\n        intent.prepareToLeaveProcess(who);\n        int result = ActivityTaskManager.getService().startActivity(whoThread,\n                who.getBasePackageName(), who.getAttributionTag(), intent,\n                intent.resolveTypeIfNeeded(who.getContentResolver()), token,\n                target != null ? target.mEmbeddedID : null, requestCode, 0, null, options);\n        checkStartActivityResult(result, intent);\n    } catch (RemoteException e) {\n        throw new RuntimeException(\"Failure from system\", e);\n    }\n    return null;\n}\n</code></pre> <p>\u8fd9\u8fb9\u90fd\u8fd8\u662fApp\u8fdb\u7a0b\uff0c\u901a\u8fc7binder\u901a\u4fe1\u8c03\u7528ActivityTaskManagerService(ATMS)\u670d\u52a1\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#atms","title":"\u83b7\u53d6ATMS\u670d\u52a1","text":"<p>\u4e0a\u9762\u660e\u660e\u770b\u5230\u7684\u662f\u8c03\u7528ActivityTaskManager.getService().startActivity(\uff09\uff0c\u90a3\u4e3a\u4ec0\u4e48\u5c31\u53ef\u4ee5\u80af\u5b9a\u5c31\u662f\u8c03\u7528ActivityTaskManagerService\u4e86\u5462\uff1f\u8fd9\u91cc\u4e5f\u7b80\u5355\u7684\u8d34\u51fa\u7247\u6bb5\u4ee3\u7801\u4f9b\u5206\u6790\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitytaskmanager","title":"ActivityTaskManager","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityTaskManager.java\n\n /** @hide */\npublic static IActivityTaskManager getService() {\n    return IActivityTaskManagerSingleton.get();\n}\n\n@UnsupportedAppUsage(trackingBug = 129726065)\nprivate static final Singleton&lt;IActivityTaskManager&gt; IActivityTaskManagerSingleton =\n        new Singleton&lt;IActivityTaskManager&gt;() {\n            @Override\n            protected IActivityTaskManager create() {\n                final IBinder b = ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE);\n                return IActivityTaskManager.Stub.asInterface(b);\n            }\n        };\n</code></pre> <ul> <li>\u83b7\u53d6\u8fd9\u4e2a\u670d\u52a1ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE)</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/content/Context.java#3793\n\n/**\n* Use with {@link #getSystemService(String)} to retrieve a\n* {@link android.app.ActivityTaskManager} for interacting with the global system state.\n*\n* @see #getSystemService(String)\n* @see android.app.ActivityTaskManager\n* @hide\n*/\npublic static final String ACTIVITY_TASK_SERVICE = \"activity_task\";\n</code></pre> <ul> <li>AIDL\u63a5\u53e3\u662fIActivityTaskManager\uff0c\u5728aospxref\u4e0a\u662f\u770b\u5230\u662fstartActivity\u6709\u63a5\u53e3\u7684</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitytaskmanagerservice","title":"ActivityTaskManagerService","text":"<pre><code>public class ActivityTaskManagerService extends IActivityTaskManager.Stub {\n\n     public static final class Lifecycle extends SystemService {\n        private final ActivityTaskManagerService mService;\n\n        public Lifecycle(Context context) {\n            super(context);\n            mService = new ActivityTaskManagerService(context);\n        }\n\n        @Override\n        public void onStart() {\n            publishBinderService(Context.ACTIVITY_TASK_SERVICE, mService);\n            mService.start();\n        }\n\n        @Override\n        public void onUnlockUser(int userId) {\n            synchronized (mService.getGlobalLock()) {\n                mService.mStackSupervisor.onUserUnlocked(userId);\n            }\n        }\n\n        @Override\n        public void onCleanupUser(int userId) {\n            synchronized (mService.getGlobalLock()) {\n                mService.mStackSupervisor.mLaunchParamsPersister.onCleanupUser(userId);\n            }\n        }\n\n        public ActivityTaskManagerService getService() {\n            return mService;\n        }\n     }\n}     \n</code></pre> <p>\u5173\u952e\u4ee3\u7801publishBinderService(Context.ACTIVITY_TASK_SERVICE, mService);</p> <p>\u5982\u679c\u719f\u6089\u5b89\u5353\u542f\u52a8\u6d41\u7a0b\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u662f\u5728SystemServer.startBootstrapServices\u542f\u52a8\u670d\u52a1\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#startbootstrapservices","title":"startBootstrapServices()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/java/com/android/server/SystemServer.java#765\n\nprivate void startBootstrapServices(@NonNull TimingsTraceAndSlog t) {\n\n     ...\n\n     // Activity manager runs the show.\n     t.traceBegin(\"StartActivityManager\");\n     // TODO: Might need to move after migration to WM.\n     ActivityTaskManagerService atm = mSystemServiceManager.startService(\n           ActivityTaskManagerService.Lifecycle.class).getService();\n     mActivityManagerService = ActivityManagerService.Lifecycle.startService(\n           mSystemServiceManager, atm);\n     mActivityManagerService.setSystemServiceManager(mSystemServiceManager);\n     mActivityManagerService.setInstaller(installer);\n     mWindowManagerGlobalLock = atm.getGlobalLock();\n     t.traceEnd();\n\n     ...\n}\n</code></pre> <ul> <li>\u542f\u52a8ActivityTaskManagerService\u670d\u52a1</li> </ul> <p>mSystemServiceManager.startService(ActivityTaskManagerService.Lifecycle.class).getService()</p> <ul> <li>\u542f\u52a8ActivityManagerService</li> </ul> <p>ActivityManagerService.Lifecycle.startService(mSystemServiceManager, atm)</p> <pre><code>public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) {\n   try {\n       final String name = serviceClass.getName();\n\n       final T service;\n       try {\n           Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);\n           service = constructor.newInstance(mContext);\n       }\n       ...\n\n       startService(service);\n       return service;\n   } finally {\n       Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);\n   }\n}\n\npublic void startService(@NonNull final SystemService service) {\n   // Register it.\n   mServices.add(service);\n   // Start it.\n   long time = SystemClock.elapsedRealtime();\n   try {\n       service.onStart();\n   } catch (RuntimeException ex) {\n       ...\n   }\n}\n</code></pre> <ul> <li>\u6ce8\u518c</li> </ul> <p>mServices.add(service)</p> <ul> <li>\u542f\u52a8</li> </ul> <p>service.onStart()\u4e5f\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684ActivityTaskManagerService.Lifecycle.onStart()\uff0c\u4e5f\u5c31\u662fpublishBinderService(Context.ACTIVITY_TASK_SERVICE, mService);</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_1","title":"\u6d41\u7a0b","text":"<p>\u6839\u636e\u4e0a\u9762\u7684\u4ee3\u7801\u5206\u6790\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u542f\u52a8Activity\u7684\u521d\u59cb\u9636\u6bb5\u5f88\u7b80\u5355\u3002\u5c31\u662f\u542f\u52a8Activity\u7684\u8fdb\u7a0bA\u4e00\u6b65\u4e00\u6b65\u8c03\u7528SystemServer\u7684ATMS\u670d\u52a1\u63a5\u53e3\u7684\u8fc7\u7a0b\u3002</p> <pre><code>\nsequenceDiagram\nActivity -&gt;&gt; Activity:startActivity\nActivity -&gt;&gt; Activity:startActivityForResult()\nActivity -&gt;&gt; Instrumentation:execStartActivity()\nInstrumentation -&gt;&gt;+ ActivityTaskManager:getService()\nActivityTaskManager -&gt;&gt;+ ServiceManager:getService()\nServiceManager -&gt;&gt;+ BinderInternal:getContextObject()\nBinderInternal -&gt;&gt;- ServiceManager:IServiceManager\nServiceManager -&gt;&gt;- ActivityTaskManager:IBinder\nActivityTaskManager -&gt;&gt;- Instrumentation:IActivityTaskManager\nInstrumentation -&gt;&gt; ActivityTaskManagerService:startActivity()\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#systemserveractivitytaskmanagerservice","title":"SystemServer.ActivityTaskManagerService","text":"","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#atms_1","title":"ATMS","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java#1005\n\n @Override\npublic final int startActivity(IApplicationThread caller, String callingPackage,\n       String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,\n       String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo,\n       Bundle bOptions) {\n   return startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,\n           resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions,\n           UserHandle.getCallingUserId());\n}\n\n@Override\npublic int startActivityAsUser(IApplicationThread caller, String callingPackage,\n       String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,\n       String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo,\n       Bundle bOptions, int userId) {\n   return startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,\n           resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,\n           true /*validateIncomingUser*/);\n}\n\nprivate int startActivityAsUser(IApplicationThread caller, String callingPackage,\n       @Nullable String callingFeatureId, Intent intent, String resolvedType,\n       IBinder resultTo, String resultWho, int requestCode, int startFlags,\n       ProfilerInfo profilerInfo, Bundle bOptions, int userId, boolean validateIncomingUser) {\n   assertPackageMatchesCallingUid(callingPackage);\n   enforceNotIsolatedCaller(\"startActivityAsUser\");\n\n   userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,\n           Binder.getCallingPid(), Binder.getCallingUid(), \"startActivityAsUser\");\n\n   // TODO: Switch to user app stacks here.\n   return getActivityStartController().obtainStarter(intent, \"startActivityAsUser\")\n           .setCaller(caller)//\u8c03\u7528\u65b9\u7684AppThread\u7684IBinder\n           .setCallingPackage(callingPackage)//\u8c03\u7528\u65b9\u7684\u5305\u540d\n           .setCallingFeatureId(callingFeatureId)//\u8c03\u7528\u65b9\u7684FeatureId\n           .setResolvedType(resolvedType)//\u8c03\u7528type\n           .setResultTo(resultTo)//\u8c03\u7528\u65b9\u7684ActivityClientRecord\u7684binder\uff08\u5b9e\u9645\u4e0a\u662fAMS\u7684ActivityRecord\u5bf9\u5e94\u5728App\u7aef\u7684binder\u5bf9\u8c61\uff09\n           .setResultWho(resultWho)//\u8c03\u7528\u65b9\u7684\u6807\u793a\n           .setRequestCode(requestCode)//\u9700\u8981\u8fd4\u56de\u7684requestCode\n           .setStartFlags(startFlags)//\u542f\u52a8\u6807\u5fd7\u4f4d\n           .setProfilerInfo(profilerInfo)//\u542f\u52a8\u65f6\u5e26\u4e0a\u7684\u6743\u9650\u6587\u4ef6\u5bf9\u8c61\n           .setActivityOptions(bOptions)//ActivityOptions\u7684Activity\u7684\u542f\u52a8\u9879\n           .setUserId(userId)//\u662f\u5426\u662f\u540c\u6b65\u6253\u5f00Actvivity \u9ed8\u8ba4\u4e00\u822c\u662ftrue\n           .execute();//\u6267\u884c\u65b9\u6cd5\u3002\n}\n\nActivityStartController getActivityStartController() {\n    return mActivityStartController;\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystarterobtainstarter","title":"ActivityStarter.obtainStarter()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStartController.java#149\n\nActivityStarter obtainStarter(Intent intent, String reason) {\n    return mFactory.obtain().setIntent(intent).setReason(reason);\n}\n</code></pre> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\n/**\n * Controller for interpreting how and then launching an activity.\n *\n * This class collects all the logic for determining how an intent and flags should be turned into\n * an activity and associated task and stack.\n */\nclass ActivityStarter {\n\n    interface Factory {\n        void setController(ActivityStartController controller);\n\n        ActivityStarter obtain();\n\n        void recycle(ActivityStarter starter);\n    }\n\n    static class DefaultFactory implements Factory {\n\n        @Override\n        public void setController(ActivityStartController controller) {\n            mController = controller;\n        }\n\n        @Override\n        public ActivityStarter obtain() {\n            ActivityStarter starter = mStarterPool.acquire();\n\n            if (starter == null) {\n                starter = new ActivityStarter(mController, mService, mSupervisor, mInterceptor);\n            }\n\n            return starter;\n        }\n\n        @Override\n        public void recycle(ActivityStarter starter) {\n            starter.reset(true /* clearRequest*/);\n            mStarterPool.release(starter);\n        }\n    }\n\n    ActivityStarter setIntentGrants(NeededUriGrants intentGrants) {\n        mRequest.intentGrants = intentGrants;\n        return this;\n    }\n\n    ActivityStarter setReason(String reason) {\n        mRequest.reason = reason;\n        return this;\n    }\n\n    ActivityStarter setCaller(IApplicationThread caller) {\n        mRequest.caller = caller;\n        return this;\n    }\n\n    ActivityStarter setResolvedType(String type) {\n        mRequest.resolvedType = type;\n        return this;\n    }\n\n    ActivityStarter setActivityInfo(ActivityInfo info) {\n        mRequest.activityInfo = info;\n        return this;\n    }\n\n    ActivityStarter setResolveInfo(ResolveInfo info) {\n        mRequest.resolveInfo = info;\n        return this;\n    }\n\n    ActivityStarter setVoiceSession(IVoiceInteractionSession voiceSession) {\n        mRequest.voiceSession = voiceSession;\n        return this;\n    }\n\n    ActivityStarter setVoiceInteractor(IVoiceInteractor voiceInteractor) {\n        mRequest.voiceInteractor = voiceInteractor;\n        return this;\n    }\n\n    ActivityStarter setResultTo(IBinder resultTo) {\n        mRequest.resultTo = resultTo;\n        return this;\n    }\n\n    ActivityStarter setResultWho(String resultWho) {\n        mRequest.resultWho = resultWho;\n        return this;\n    }\n\n    ActivityStarter setRequestCode(int requestCode) {\n        mRequest.requestCode = requestCode;\n        return this;\n    }\n\n    ActivityStarter setCallingPid(int pid) {\n        mRequest.callingPid = pid;\n        return this;\n    }\n\n    ActivityStarter setCallingUid(int uid) {\n        mRequest.callingUid = uid;\n        return this;\n    }\n\n    ActivityStarter setCallingPackage(String callingPackage) {\n        mRequest.callingPackage = callingPackage;\n        return this;\n    }\n\n    ActivityStarter setCallingFeatureId(String callingFeatureId) {\n        mRequest.callingFeatureId = callingFeatureId;\n        return this;\n    }\n\n    ActivityStarter setRealCallingPid(int pid) {\n        mRequest.realCallingPid = pid;\n        return this;\n    }\n\n    ActivityStarter setRealCallingUid(int uid) {\n        mRequest.realCallingUid = uid;\n        return this;\n    }\n\n    ActivityStarter setStartFlags(int startFlags) {\n        mRequest.startFlags = startFlags;\n        return this;\n    }\n\n    ActivityStarter setActivityOptions(SafeActivityOptions options) {\n        mRequest.activityOptions = options;\n        return this;\n    }\n\n    ActivityStarter setActivityOptions(Bundle bOptions) {\n        return setActivityOptions(SafeActivityOptions.fromBundle(bOptions));\n    }\n\n    ActivityStarter setIgnoreTargetSecurity(boolean ignoreTargetSecurity) {\n        mRequest.ignoreTargetSecurity = ignoreTargetSecurity;\n        return this;\n    }\n\n    ActivityStarter setFilterCallingUid(int filterCallingUid) {\n        mRequest.filterCallingUid = filterCallingUid;\n        return this;\n    }\n\n    ActivityStarter setComponentSpecified(boolean componentSpecified) {\n        mRequest.componentSpecified = componentSpecified;\n        return this;\n    }\n\n    ActivityStarter setOutActivity(ActivityRecord[] outActivity) {\n        mRequest.outActivity = outActivity;\n        return this;\n    }\n\n    ActivityStarter setInTask(Task inTask) {\n        mRequest.inTask = inTask;\n        return this;\n    }\n\n    ActivityStarter setWaitResult(WaitResult result) {\n        mRequest.waitResult = result;\n        return this;\n    }\n\n    ActivityStarter setProfilerInfo(ProfilerInfo info) {\n        mRequest.profilerInfo = info;\n        return this;\n    }\n\n    ActivityStarter setGlobalConfiguration(Configuration config) {\n        mRequest.globalConfig = config;\n        return this;\n    }\n\n    ActivityStarter setUserId(int userId) {\n        mRequest.userId = userId;\n        return this;\n    }\n\n    ActivityStarter setAllowPendingRemoteAnimationRegistryLookup(boolean allowLookup) {\n        mRequest.allowPendingRemoteAnimationRegistryLookup = allowLookup;\n        return this;\n    }\n\n    ActivityStarter setOriginatingPendingIntent(PendingIntentRecord originatingPendingIntent) {\n        mRequest.originatingPendingIntent = originatingPendingIntent;\n        return this;\n    }\n\n    ActivityStarter setAllowBackgroundActivityStart(boolean allowBackgroundActivityStart) {\n        mRequest.allowBackgroundActivityStart = allowBackgroundActivityStart;\n        return this;\n    }\n\n\n}\n</code></pre> <p>\u867d\u7136\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5efa\u9020\u8005\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f+\u4eab\u5143\u8bbe\u8ba1+\u94fe\u5f0f\u8c03\u7528\u3002\u901a\u8fc7obtainStarter\u628aDefaultFactory\u4ecemStarterPool\u4e2d\u83b7\u53d6\u4e00\u4e2aActivityStarter(\u6c60\u5b50\u4e2d\u6700\u591a\u8bbe\u7f6e3\u4e2a)\uff0c\u63a5\u7740\u901a\u8fc7\u94fe\u5f0f\u8c03\u7528\uff0c\u628a\u542f\u52a8\u65f6\u9700\u8981\u7684\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\u3002</p> <p>\u5f53\u8bbe\u7f6e\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u770b\u770bexecute\u65b9\u6cd5\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystarterexecute","title":"ActivityStarter.execute()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\n\n/**\n* Resolve necessary information according the request parameters provided earlier, and execute\n* the request which begin the journey of starting an activity.\n* @return The starter result.\n*/\nint execute() {\n   try {\n\n       ...\n\n       if (mRequest.activityInfo == null) {\n           mRequest.resolveActivity(mSupervisor);\n       }\n\n       int res;\n       synchronized (mService.mGlobalLock) {\n\n           ...\n\n           res = executeRequest(mRequest);\n\n           Binder.restoreCallingIdentity(origId);\n\n           ...\n\n           // Notify ActivityMetricsLogger that the activity has launched.\n           // ActivityMetricsLogger will then wait for the windows to be drawn and populate\n           // WaitResult.\n           mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,\n                   mLastStartActivityRecord);\n           return getExternalResult(mRequest.waitResult == null ? res\n                   : waitForResult(res, mLastStartActivityRecord));\n       }\n   } finally {\n       onExecutionComplete();\n   }\n}\n\n/**\n * Executing activity start request and starts the journey of starting an activity. Here\n * begins with performing several preliminary checks. The normally activity launch flow will\n * go through {@link #startActivityUnchecked} to {@link #startActivityInner}.\n */\nprivate int executeRequest(Request request) {\n\n    ...\n\n    ActivityInfo aInfo = request.activityInfo;\n    ResolveInfo rInfo = request.resolveInfo;\n    ...\n    String resultWho = request.resultWho;\n    ...\n    Task inTask = request.inTask;\n\n    ...\n\n    ActivityRecord sourceRecord = null;\n    ActivityRecord resultRecord = null;\n    if (resultTo != null) {\n        sourceRecord = mRootWindowContainer.isInAnyStack(resultTo);\n        ...\n        if (sourceRecord != null) {\n            if (requestCode &gt;= 0 &amp;&amp; !sourceRecord.finishing) {\n                resultRecord = sourceRecord;\n            }\n        }\n    }\n\n    ...\n    //\u68c0\u67e5\u542f\u52a8activity\u7684\u6743\u9650\n    boolean abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,\n        requestCode, callingPid, callingUid, callingPackage, callingFeatureId,\n        request.ignoreTargetSecurity, inTask != null, callerApp, resultRecord, resultStack);\n    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,\n            callingPid, resolvedType, aInfo.applicationInfo);\n    abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,\n            callingPackage);\n\n    boolean restrictedBgActivity = false;\n    if (!abort) {\n        try {\n            ...\n            //\u68c0\u67e5\u662f\u5426\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity\n            restrictedBgActivity = shouldAbortBackgroundActivityStart(callingUid,\n                    callingPid, callingPackage, realCallingUid, realCallingPid, callerApp,\n                    request.originatingPendingIntent, request.allowBackgroundActivityStart,\n                    intent);\n        } finally {\n            ...\n        }\n    }\n    ...\n    // \u5982\u679c\u6743\u9650\u9700\u8981\u5ba1\u6838\u624d\u80fd\u8fd0\u884c\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\uff0c\u5219\u542f\u52a8\u5ba1\u6838\n    if (aInfo != null) {\n        //\u83b7\u53d6\u6b64\u5305\u4f7f\u7528\u7684\u67d0\u4e9b\u6743\u9650\u662f\u5426\u9700\u8981\u7528\u6237\u5ba1\u6838\u624d\u80fd\u8fd0\u884c\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\u3002\n        if (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(\n                aInfo.packageName, userId)) {\n            //\u542f\u52a8\u6743\u9650\u5ba1\u6838\n            ...\n            Intent newIntent = new Intent(Intent.ACTION_REVIEW_PERMISSIONS);\n\n            ...\n            intent = newIntent;\n\n            ...\n        }\n    }\n\n    //\u521b\u5efaActivityRecord\u5bf9\u8c61\n    final ActivityRecord r = new ActivityRecord(mService, callerApp, callingPid, callingUid,\n            callingPackage, callingFeatureId, intent, resolvedType, aInfo,\n            mService.getGlobalConfiguration(), resultRecord, resultWho, requestCode,\n            request.componentSpecified, voiceSession != null, mSupervisor, checkedOptions,\n            sourceRecord);\n    mLastStartActivityRecord = r;\n\n    if (r.appTimeTracker == null &amp;&amp; sourceRecord != null) {\n        // If the caller didn't specify an explicit time tracker, we want to continue\n        // tracking under any it has.\n        r.appTimeTracker = sourceRecord.appTimeTracker;\n    }\n\n    final ActivityStack stack = mRootWindowContainer.getTopDisplayFocusedStack();\n\n    // If we are starting an activity that is not from the same uid as the currently resumed\n    // one, check whether app switches are allowed.\n    if (voiceSession == null &amp;&amp; stack != null &amp;&amp; (stack.getResumedActivity() == null\n            || stack.getResumedActivity().info.applicationInfo.uid != realCallingUid)) {\n        if (!mService.checkAppSwitchAllowedLocked(callingPid, callingUid,\n                realCallingPid, realCallingUid, \"Activity start\")) {\n            if (!(restrictedBgActivity &amp;&amp; handleBackgroundActivityAbort(r))) {\n                mController.addPendingActivityLaunch(new PendingActivityLaunch(r,\n                        sourceRecord, startFlags, stack, callerApp, intentGrants));\n            }\n            ActivityOptions.abort(checkedOptions);\n            return ActivityManager.START_SWITCHES_CANCELED;\n        }\n    }\n\n    mService.onStartActivitySetDidAppSwitch();\n    mController.doPendingActivityLaunches(false);\n    //\u8fdb\u5165\u542f\u52a8activity\u7684\u6d41\u7a0b\uff08\u8df3\u8fc7\u68c0\u67e5\uff09\n    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,\n            request.voiceInteractor, startFlags, true /* doResume */, checkedOptions, inTask,\n            restrictedBgActivity, intentGrants);\n\n    if (request.outActivity != null) {\n        request.outActivity[0] = mLastStartActivityRecord;\n    }\n\n    return mLastStartActivityResult;\n}\n</code></pre> <ul> <li>\u8c03\u7528mRequest.resolveActivity(mSupervisor)\u521d\u59cb\u5316request.activityInfo</li> <li>resultTo\u5bf9\u5e94\u7684\u5c31\u662fATMS\u4e2d\u7684setResultTo(resultTo)//\u8c03\u7528\u65b9\u7684ActivityClientRecord\u7684binder\uff08\u5b9e\u9645\u4e0a\u662fAMS\u7684ActivityRecord\u5bf9\u5e94\u5728App\u7aef\u7684binder\u5bf9\u8c61\uff09</li> <li>\u68c0\u67e5\u542f\u52a8activity\u7684\u6743\u9650</li> </ul> <p>shouldAbortBackgroundActivityStart()\u91cc\u9762\u4e3b\u8981\u5904\u7406\u662f\u5426\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity\u7684\u903b\u8f91\uff08\u9ad8\u7248\u672c\u5bf9service\u542f\u52a8activity\u505a\u4e86\u9650\u5236\uff0c\u9632\u6b62\u5e7f\u544a\u6cdb\u6ee5\uff09\uff0c\u4ee5\u4e0b\u60c5\u51b5\u4f1a\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity</p> <ul> <li>\u4e00\u4e9b\u91cd\u8981\u7684UId\u6bd4\u5982System UID\uff0cNFC UID</li> <li>callingUid\u5177\u6709\u53ef\u89c1\u7a97\u53e3\u6216\u662f\u6301\u4e45\u6027\u7cfb\u7edf\u8fdb\u7a0b\uff08\u5373persistent\u7684\u7cfb\u7edf\u8fdb\u7a0b\uff09</li> <li>callingUid\u5177\u6709START_ACTIVITIES_FROM_BACKGROUND\u6743\u9650</li> <li>\u8c03\u7528\u65b9\u7684uid\u4e0e\u6700\u8fd1\u4f7f\u7528\u7684\u7ec4\u4ef6\u5177\u6709\u76f8\u540c\u7684uid</li> <li>callingUid\u662f\u8bbe\u5907\u6240\u6709\u8005\u6216\u8005\u6709\u4f34\u4fa3\u8bbe\u5907</li> <li>callingUid\u5177\u6709SYSTEM_ALERT_WINDOW\u6743\u9650</li> <li>\u8c03\u7528\u8005\u5728\u4efb\u4f55\u524d\u53f0\u4efb\u52a1\u4e2d\u6709\u6d3b\u52a8</li> <li> <p>\u8c03\u7528\u8005\u88ab\u5f53\u524d\u524d\u53f0\u7684 UID \u7ed1\u5b9a</p> </li> <li> <p>new\u4e00\u4e2aActivityRecord\uff0c\u5b83\u5c31\u662f\u8981\u88ab\u542f\u52a8\u7684Activity</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystarterstartactivityunchecked","title":"ActivityStarter.startActivityUnchecked()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n           IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n           int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n           boolean restrictedBgActivity, NeededUriGrants intentGrants) {\n   int result = START_CANCELED;\n   final ActivityStack startedActivityStack;\n   try {\n       mService.deferWindowLayout();\n       ...\n       result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,\n               startFlags, doResume, options, inTask, restrictedBgActivity, intentGrants);\n   } finally {\n       ...\n       startedActivityStack = handleStartResult(r, result);\n       mService.continueWindowLayout();\n   }\n\n   postStartActivityProcessing(r, result, startedActivityStack);\n\n   return result;\n}\n</code></pre> <p>\u5728\u5927\u591a\u6570\u521d\u6b65\u68c0\u67e5\u90fd\u5df2\u5b8c\u6210\u5e76\u4e14\u5df2\u786e\u8ba4\u62e5\u6709\u5fc5\u8981\u7684\u6743\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u59cbActivity</p> <ul> <li>\u5982\u679c\u542f\u52a8\u5931\u8d25\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u786e\u4fdd\u5220\u9664\u542f\u52a8\u6d3b\u52a8\u3002</li> <li>\u5982\u679c\u542f\u52a8\u6210\u529f\uff0c\u8bf7\u786e\u4fdd\u542f\u52a8\u6d3b\u52a8\u7684\u914d\u7f6e\u4e0e\u5f53\u524d\u663e\u793a\u5339\u914d\u3002\u5426\u5219\u6e05\u7406\u4e0d\u76f8\u5173\u7684\u5bb9\u5668\u4ee5\u907f\u514d\u6cc4\u6f0f\u3002</li> </ul> <p>\u7ee7\u7eed\u770bstartActivityInner</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystarterstartactivityinner","title":"ActivityStarter.startActivityInner()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nint startActivityInner(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        boolean restrictedBgActivity, NeededUriGrants intentGrants) {\n    //\u628a\u6574\u4e2a\u53c2\u6570\u8d4b\u503c\u7ed9ActivityStarter\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4ee5\u4f9b\u4e4b\u540e\u6240\u6709\u7684\u6d41\u7a0b\u4f7f\u7528\n    setInitialState(r, options, inTask, doResume, startFlags, sourceRecord, voiceSession,\n            voiceInteractor, restrictedBgActivity);\n\n    computeLaunchingTaskFlags();\n\n    //\u521d\u59cb\u5316mSourceStack\uff0c\u5b83\u662f\u4e00\u4e2aActivityTask\n    computeSourceStack();\n\n    mIntent.setFlags(mLaunchFlags);\n\n    //reusedTask = null\n    final Task reusedTask = getReusableTask();\n\n    ...\n\n    //targetTask\u4e3aActivitA\u7684task\n    final Task targetTask = reusedTask != null ? reusedTask : computeTargetTask();\n    final boolean newTask = targetTask == null;\n    mTargetTask = targetTask;\n\n    //\u521d\u59cb\u5316\u542f\u52a8\u7684\u53c2\u6570\n    computeLaunchParams(r, sourceRecord, targetTask);\n\n    ...\n\n    final ActivityRecord targetTaskTop = newTask\n            ? null : targetTask.getTopNonFinishingActivity();\n    if (targetTaskTop != null) {\n        //\u8bbe\u7f6etargetStack\uff0c\n        startResult = recycleTask(targetTask, targetTaskTop, reusedTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    } else {\n        mAddingToTask = true;\n    }\n\n    ...\n\n    if (newTask) {\n        ...\n    } else if (mAddingToTask) {\n        //\u8981\u542f\u52a8\u7684activity\u52a0\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684task\u91cc\n        addOrReparentStartingActivity(targetTask, \"adding to task\");\n    }\n\n    if (!mAvoidMoveToFront &amp;&amp; mDoResume) {\n        //\u628a\u8981\u542f\u52a8\u7684Activity\u6240\u5728\u7684Task\uff0ctargetTask\uff0c\u8bbe\u7f6e\u5728WindowContainer\u7684\u6700\u4e0a\u5c42\n        mTargetStack.getStack().moveToFront(\"reuseOrNewTask\", targetTask);\n        if (mOptions != null) {\n            if (mOptions.getTaskAlwaysOnTop()) {\n                mTargetStack.setAlwaysOnTop(true);\n            }\n        }\n        ...\n    }\n\n    ...\n\n    //\u901a\u77e5WindowManager\u51c6\u5907App\u5207\u6362\u76f8\u5173\u7684\u5de5\u4f5c\n    mTargetStack.startActivityLocked(mStartActivity,\n            topStack != null ? topStack.getTopNonFinishingActivity() : null, newTask,\n            mKeepCurTransition, mOptions);\n    ...\n\n    if (mDoResume) {\n        final ActivityRecord topTaskActivity =\n                mStartActivity.getTask().topRunningActivityLocked();\n        if (!mTargetStack.isTopActivityFocusable()\n                || (topTaskActivity != null &amp;&amp; topTaskActivity.isTaskOverlay()\n                &amp;&amp; mStartActivity != topTaskActivity)) {\n\n            mTargetStack.ensureActivitiesVisible(null /* starting */,\n                    0 /* configChanges */, !PRESERVE_WINDOWS);\n            mTargetStack.getDisplay().mDisplayContent.executeAppTransition();\n        } else {                \n            if (mTargetStack.isTopActivityFocusable()\n                    &amp;&amp; !mRootWindowContainer.isTopDisplayFocusedStack(mTargetStack)) {\n                mTargetStack.moveToFront(\"startActivityInner\");\n            }\n            //\u83b7\u53d6\u6808\u9876activity\u5e76\u6062\u590d\uff0c\u5373\u5c06\u8bbe\u7f6e\u6210resume\u72b6\u6001\n            mRootWindowContainer.resumeFocusedStacksTopActivities(\n                    mTargetStack, mStartActivity, mOptions);\n        }\n    }\n    mRootWindowContainer.updateUserStack(mStartActivity.mUserId, mTargetStack);\n\n    // Update the recent tasks list immediately when the activity starts\n    mSupervisor.mRecentTasks.add(mStartActivity.getTask());\n    mSupervisor.handleNonResizableTaskIfNeeded(mStartActivity.getTask(),\n            mPreferredWindowingMode, mPreferredTaskDisplayArea, mTargetStack);\n\n    return START_SUCCESS;\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u6bd4\u8f83\u957f\uff0c\u6211\u4eec\u7740\u91cd\u4ece\u4ee5\u4e0b9\u4e2a\u65b9\u9762\u8fdb\u884c\u5206\u6790\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_2","title":"\u4f8b\u5b50","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u5206\u6790\u90fd\u4ee5\u4ee5ActivitA\u542f\u52a8ActivityB\u4e3a\u4f8b\uff0c\u5373\uff1a</p> <p>startActivity(new Intent(ActivityA.this,ActivityB.class))</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#1-setinitialstate","title":"1. setInitialState()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate void setInitialState(ActivityRecord r, ActivityOptions options, Task inTask,\n       boolean doResume, int startFlags, ActivityRecord sourceRecord,\n       IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n       boolean restrictedBgActivity) {\n   reset(false /* clearRequest */);\n\n   mStartActivity = r;\n   mIntent = r.intent;\n   mOptions = options;\n   mCallingUid = r.launchedFromUid;\n   mSourceRecord = sourceRecord;\n   mVoiceSession = voiceSession;\n   mVoiceInteractor = voiceInteractor;\n   mRestrictedBgActivity = restrictedBgActivity;\n\n   mLaunchParams.reset();\n\n   // Preferred display id is the only state we need for now and it could be updated again\n   // after we located a reusable task (which might be resided in another display).\n   mSupervisor.getLaunchParamsController().calculate(inTask, r.info.windowLayout, r,\n           sourceRecord, options, PHASE_DISPLAY, mLaunchParams);\n   mPreferredTaskDisplayArea = mLaunchParams.hasPreferredTaskDisplayArea()\n           ? mLaunchParams.mPreferredTaskDisplayArea\n           : mRootWindowContainer.getDefaultTaskDisplayArea();\n   mPreferredWindowingMode = mLaunchParams.mWindowingMode;\n\n   mLaunchMode = r.launchMode;\n\n   mLaunchFlags = adjustLaunchFlagsToDocumentMode(\n           r, LAUNCH_SINGLE_INSTANCE == mLaunchMode,\n           LAUNCH_SINGLE_TASK == mLaunchMode, mIntent.getFlags());\n   mLaunchTaskBehind = r.mLaunchTaskBehind\n           &amp;&amp; !isLaunchModeOneOf(LAUNCH_SINGLE_TASK, LAUNCH_SINGLE_INSTANCE)\n           &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_DOCUMENT) != 0;\n\n   sendNewTaskResultRequestIfNeeded();\n\n   if ((mLaunchFlags &amp; FLAG_ACTIVITY_NEW_DOCUMENT) != 0 &amp;&amp; r.resultTo == null) {\n       mLaunchFlags |= FLAG_ACTIVITY_NEW_TASK;\n   }\n\n   // If we are actually going to launch in to a new task, there are some cases where\n   // we further want to do multiple task.\n   if ((mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != 0) {\n       if (mLaunchTaskBehind\n               || r.info.documentLaunchMode == DOCUMENT_LAUNCH_ALWAYS) {\n           mLaunchFlags |= FLAG_ACTIVITY_MULTIPLE_TASK;\n       }\n   }\n\n   // We'll invoke onUserLeaving before onPause only if the launching\n   // activity did not explicitly state that this is an automated launch.\n   mSupervisor.mUserLeaving = (mLaunchFlags &amp; FLAG_ACTIVITY_NO_USER_ACTION) == 0;\n   if (DEBUG_USER_LEAVING) Slog.v(TAG_USER_LEAVING,\n           \"startActivity() =&gt; mUserLeaving=\" + mSupervisor.mUserLeaving);\n\n   // If the caller has asked not to resume at this point, we make note\n   // of this in the record so that we can skip it when trying to find\n   // the top running activity.\n   mDoResume = doResume;\n   if (!doResume || !r.okToShowLocked() || mLaunchTaskBehind) {\n       r.delayedResume = true;\n       mDoResume = false;\n   }\n\n   if (mOptions != null) {\n       if (mOptions.getLaunchTaskId() != INVALID_TASK_ID &amp;&amp; mOptions.getTaskOverlay()) {\n           r.setTaskOverlay(true);\n           if (!mOptions.canTaskOverlayResume()) {\n               final Task task = mRootWindowContainer.anyTaskForId(\n                       mOptions.getLaunchTaskId());\n               final ActivityRecord top = task != null\n                       ? task.getTopNonFinishingActivity() : null;\n               if (top != null &amp;&amp; !top.isState(RESUMED)) {\n\n                   // The caller specifies that we'd like to be avoided to be moved to the\n                   // front, so be it!\n                   mDoResume = false;\n                   mAvoidMoveToFront = true;\n               }\n           }\n       } else if (mOptions.getAvoidMoveToFront()) {\n           mDoResume = false;\n           mAvoidMoveToFront = true;\n       }\n   }\n\n   mNotTop = (mLaunchFlags &amp; FLAG_ACTIVITY_PREVIOUS_IS_TOP) != 0 ? sourceRecord : null;\n\n   mInTask = inTask;\n   // In some flows in to this function, we retrieve the task record and hold on to it\n   // without a lock before calling back in to here...  so the task at this point may\n   // not actually be in recents.  Check for that, and if it isn't in recents just\n   // consider it invalid.\n   if (inTask != null &amp;&amp; !inTask.inRecents) {\n       Slog.w(TAG, \"Starting activity in task not in recents: \" + inTask);\n       mInTask = null;\n   }\n\n   mStartFlags = startFlags;\n   // If the onlyIfNeeded flag is set, then we can do this if the activity being launched\n   // is the same as the one making the call...  or, as a special case, if we do not know\n   // the caller then we count the current top activity as the caller.\n   if ((startFlags &amp; START_FLAG_ONLY_IF_NEEDED) != 0) {\n       ActivityRecord checkedCaller = sourceRecord;\n       if (checkedCaller == null) {\n           ActivityStack topFocusedStack = mRootWindowContainer.getTopDisplayFocusedStack();\n           if (topFocusedStack != null) {\n               checkedCaller = topFocusedStack.topRunningNonDelayedActivityLocked(mNotTop);\n           }\n       }\n       if (checkedCaller == null\n               || !checkedCaller.mActivityComponent.equals(r.mActivityComponent)) {\n           // Caller is not the same as launcher, so always needed.\n           mStartFlags &amp;= ~START_FLAG_ONLY_IF_NEEDED;\n       }\n   }\n\n   mNoAnimation = (mLaunchFlags &amp; FLAG_ACTIVITY_NO_ANIMATION) != 0;\n\n   if (mRestrictedBgActivity &amp;&amp; !mService.isBackgroundActivityStartsEnabled()) {\n       mAvoidMoveToFront = true;\n       mDoResume = false;\n   }\n}\n</code></pre> <p>\u628a\u6574\u4e2a\u53c2\u6570\u8d4b\u503c\u7ed9ActivityStarter\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4ee5\u4f9b\u4e4b\u540e\u6240\u6709\u7684\u6d41\u7a0b\u4f7f\u7528\u3002\u8fd8\u6709\u4e00\u4e9b\u6bd4\u5982\u5224\u65adVR\u6a21\u5f0f\u7b49\u7b49\uff0c\u8ddf\u542f\u52a8activity\u5173\u7cfb\u4e0d\u5927\uff0c\u6682\u4e0d\u5c55\u5f00\u9610\u8ff0\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#2-computesourcestack","title":"2. computeSourceStack()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate void computeSourceStack() {\n   if (mSourceRecord == null) {\n       mSourceStack = null;\n       return;\n   }\n   if (!mSourceRecord.finishing) {//\u6807\u8bb01\n       mSourceStack = mSourceRecord.getRootTask();\n       return;\n   }\n\n   ...\n}\n</code></pre> <p>\u903b\u8f91\u5728\u201c\u6807\u8bb01\u201d\u5c31return\u4e86\u3002\u8bf4\u660e\u5f53\u524dActivityB\u7684source Task\u5c31\u662fsourceRecord\u7684task\uff0c\u5373ActivityA\u6240\u5728\u7684task\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#3-getreusabletask","title":"3. getReusableTask","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\n/**\n* Decide whether the new activity should be inserted into an existing task. Returns null\n* if not or an ActivityRecord with the task into which the new activity should be added.\n*/\nprivate Task getReusableTask() {\n   // If a target task is specified, try to reuse that one\n   if (mOptions != null &amp;&amp; mOptions.getLaunchTaskId() != INVALID_TASK_ID) {\n       Task launchTask = mRootWindowContainer.anyTaskForId(mOptions.getLaunchTaskId());\n       if (launchTask != null) {\n           return launchTask;\n       }\n       return null;\n   }\n\n   // We may want to try to place the new activity in to an existing task.  We always\n   // do this if the target activity is singleTask or singleInstance; we will also do\n   // this if NEW_TASK has been requested, and there is not an additional qualifier telling\n   // us to still place it in a new task: multi task, always doc mode, or being asked to\n   // launch this as a new task behind the current one.\n   boolean putIntoExistingTask = ((mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != 0 &amp;&amp;\n           (mLaunchFlags &amp; FLAG_ACTIVITY_MULTIPLE_TASK) == 0)\n           || isLaunchModeOneOf(LAUNCH_SINGLE_INSTANCE, LAUNCH_SINGLE_TASK);\n   // If bring to front is requested, and no result is requested and we have not been given\n   // an explicit task to launch in to, and we can find a task that was started with this\n   // same component, then instead of launching bring that one to the front.\n   putIntoExistingTask &amp;= mInTask == null &amp;&amp; mStartActivity.resultTo == null;\n   ActivityRecord intentActivity = null;\n   if (putIntoExistingTask) {\n       if (LAUNCH_SINGLE_INSTANCE == mLaunchMode) {\n           // There can be one and only one instance of single instance activity in the\n           // history, and it is always in its own unique task, so we do a special search.\n           intentActivity = mRootWindowContainer.findActivity(mIntent, mStartActivity.info,\n                  mStartActivity.isActivityTypeHome());\n       } else if ((mLaunchFlags &amp; FLAG_ACTIVITY_LAUNCH_ADJACENT) != 0) {\n           // For the launch adjacent case we only want to put the activity in an existing\n           // task if the activity already exists in the history.\n           intentActivity = mRootWindowContainer.findActivity(mIntent, mStartActivity.info,\n                   !(LAUNCH_SINGLE_TASK == mLaunchMode));\n       } else {\n           // Otherwise find the best task to put the activity in.\n           intentActivity =\n                   mRootWindowContainer.findTask(mStartActivity, mPreferredTaskDisplayArea);\n       }\n   }\n\n   if (intentActivity != null\n           &amp;&amp; (mStartActivity.isActivityTypeHome() || intentActivity.isActivityTypeHome())\n           &amp;&amp; intentActivity.getDisplayArea() != mPreferredTaskDisplayArea) {\n       // Do not reuse home activity on other display areas.\n       intentActivity = null;\n   }\n\n   return intentActivity != null ? intentActivity.getTask() : null;\n}\n</code></pre> <p>\u4ece\u6ce8\u91ca\u5176\u5b9e\u5c31\u80fd\u770b\u51fa\u6765\u4e86\uff0c\u67e5\u627e\u6808\u4e2d\u662f\u5426\u5df2\u6709\u53ef\u590d\u7528\u7684activity\uff0c\u5982\u679c\u6ca1\u6709\u518d\u770b\u662f\u5426\u6709\u5bf9\u5e94\u5408\u9002\u7684\u6808\u3002\u6839\u636e\u6211\u4eec\u4f8b\u5b50\u4ee3\u7801\u53ef\u77e5\uff0creusedTask\u4e3anull\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#4-computetargettask","title":"4. computeTargetTask","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate Task computeTargetTask() {\n   if (mStartActivity.resultTo == null &amp;&amp; mInTask == null &amp;&amp; !mAddingToTask\n           &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != 0) {\n       // A new task should be created instead of using existing one.\n       return null;\n   } else if (mSourceRecord != null) {//\u6807\u8bb02\n       return mSourceRecord.getTask();\n   } else if (mInTask != null) {\n       return mInTask;\n   } else {\n       final ActivityStack stack = getLaunchStack(mStartActivity, mLaunchFlags,\n               null /* task */, mOptions);\n       final ActivityRecord top = stack.getTopNonFinishingActivity();\n       if (top != null) {\n           return top.getTask();\n       } else {\n           // Remove the stack if no activity in the stack.\n           stack.removeIfPossible();\n       }\n   }\n   return null;\n}\n</code></pre> <p>\u6839\u636e\u524d\u9762\u5206\u6790resultTo\u4e0d\u4e3anull\uff0cmSourceRecord\u4e0d\u4e3aNull\uff0c\u56e0\u6b64\u4f1a\u8d70\u5230\u201c\u6807\u8bb02\u201d\u7684\u903b\u8f91\uff0c\u5373return sourceRecord\u7684task\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd4\u56deActivitA\u7684task. \u5373targetTask\u4e3aActivitA\u7684task\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#5-computelaunchparams","title":"5. computeLaunchParams","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate void computeLaunchParams(ActivityRecord r, ActivityRecord sourceRecord,\n       Task targetTask) {\n   final ActivityStack sourceStack = mSourceStack != null ? mSourceStack\n           : mRootWindowContainer.getTopDisplayFocusedStack();\n   if (sourceStack != null &amp;&amp; sourceStack.inSplitScreenWindowingMode()\n           &amp;&amp; (mOptions == null\n                   || mOptions.getLaunchWindowingMode() == WINDOWING_MODE_UNDEFINED)) {\n       int windowingMode =\n               targetTask != null ? targetTask.getWindowingMode() : WINDOWING_MODE_UNDEFINED;\n       if ((mLaunchFlags &amp; FLAG_ACTIVITY_LAUNCH_ADJACENT) != 0) {\n           if (sourceStack.inSplitScreenPrimaryWindowingMode()) {\n               windowingMode = WINDOWING_MODE_SPLIT_SCREEN_SECONDARY;\n           } else if (sourceStack.inSplitScreenSecondaryWindowingMode()) {\n               windowingMode = WINDOWING_MODE_SPLIT_SCREEN_PRIMARY;\n           }\n       }\n\n       if (mOptions == null) {\n           mOptions = ActivityOptions.makeBasic();\n       }\n       mOptions.setLaunchWindowingMode(windowingMode);\n   }\n   //\u6807\u8bb03\n   mSupervisor.getLaunchParamsController().calculate(targetTask, r.info.windowLayout, r,\n           sourceRecord, mOptions, PHASE_BOUNDS, mLaunchParams);\n   mPreferredTaskDisplayArea = mLaunchParams.hasPreferredTaskDisplayArea()\n           ? mLaunchParams.mPreferredTaskDisplayArea\n           : mRootWindowContainer.getDefaultTaskDisplayArea();\n   mPreferredWindowingMode = mLaunchParams.mWindowingMode;\n}\n</code></pre> <p>\u521d\u59cb\u5316\u542f\u52a8\u7684\u53c2\u6570\uff0c\u4ece\u65b9\u6cd5\u7684\u5185\u5bb9\u770b\u4e3b\u8981\u662f\u5728\u521d\u59cb\u5316mPreferredWindowingMode\uff0c\u5373WindowMode\u3002</p> <ul> <li>mOptions.getLaunchWindowingMode()</li> </ul> <p>\u8fd4\u56deActivityOption\uff0c\u4e5f\u5c31\u662f\u6709\u5173\u4e8ewindow mode\u7684\u8bbe\u7f6e</p> <ul> <li> <p>mSupervisor.getLaunchParamsController().calculate()</p> </li> <li> <p>mSupervisor\u5c31\u662fActivityStackSupervisor</p> </li> <li>getLaunchParamsController()\u8fd4\u56deLaunchParamsController</li> <li>calculate()</li> </ul> <p>\u5b9e\u9645\u4e0a\u83b7\u53d6\u6ce8\u518c\u5728LaunchParamsController\u4e2dLaunchParamsModifier\u8fdb\u884c\u8ba1\u7b97\u5176\u8868\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684\u533a\u57df\u3002\u5b9e\u9645\u4e0a\u6700\u57fa\u7840\u6709\u4e24\u4e2aLaunchParamsModifier\u3002</p> <ul> <li>TaskLaunchParamsModifier</li> </ul> <p>\u771f\u6b63\u63a7\u5236\u7a97\u53e3\u5927\u5c0f\u53d8\u5316(\u4fee\u6539TaskRecord\u7684Rect\u503c\uff0c\u4f4d\u7f6e)</p> <ul> <li>LaunchParams</li> </ul> <p>\u5c06\u5f53\u524d\u7684\u533a\u57df\u5927\u5c0f</p> <p>\u5b9e\u9645\u4e0a\u5728ActivityOptions\u7684setLaunchBounds\u4e2d\u80fd\u591f\u63a7\u5236\u65b0\u5efa\u7684Activity\u7684\u7a97\u4f53\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#6-recycletask","title":"6. recycleTask","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nint recycleTask(Task targetTask, ActivityRecord targetTaskTop, Task reusedTask,\n       NeededUriGrants intentGrants) {\n\n   ...\n\n   setTargetStackIfNeeded(targetTaskTop);\n\n   ...\n\n   if (mAddingToTask) {\n       return START_SUCCESS;\n   }\n\n   ...\n}\n</code></pre> <ul> <li>\u901a\u8fc7\u51fd\u6570setTargetStackIfNeeded\u8bbe\u7f6etargetStack\uff0c</li> <li>return START_SUCCESS \u5373 mAddingToTask\u4e3atrue</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#7-addorreparentstartingactivity","title":"7. addOrReparentStartingActivity","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java\n\nprivate void addOrReparentStartingActivity(Task parent, String reason) {\n   //parent\u4e3a\u4e0a\u9762\u521b\u5efa\u7684TaskRecord\uff0c\u8fd9\u91cc\u7531\u4e8e\u672a\u6307\u5b9ainTask\uff0c\u6240\u4ee5mStartActivity.getTask()\u8fd4\u56denull\n   if (mStartActivity.getTask() == null || mStartActivity.getTask() == parent) {\n       //\u8c03\u7528TaskRecord\u7684addActivityToTop\u51fd\u6570\u5c06\u5f85\u542f\u52a8\u7684Activity\u63d2\u5165\u5230TaskRecord\u4e2d\u7684mActivities\u7684\u9876\u90e8\n       parent.addChild(mStartActivity);\n   } else {\n       mStartActivity.reparent(parent, parent.getChildCount() /* top */, reason);\n   }\n}\n</code></pre> <p>\u8c03\u7528TaskRecord\u7684addActivityToTop\u51fd\u6570\u5c06\u5f85\u542f\u52a8\u7684Activity\u63d2\u5165\u5230TaskRecord\u4e2d\u7684mActivities\u7684\u9876\u90e8\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#8-movetofront","title":"8. moveToFront","text":"<p>\u5728ActivityStarter.startActivityInner</p> <p>\u51fd\u6570\u91cc\u8c03\u7528\u4e86mTargetStack.getStack().moveToFront(\"reuseOrNewTask\", targetTask);</p> <p>mTargetStack\u662fActivityStack</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\nclass ActivityStack extends Task {\n\n}\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/Task.java#2614\nclass Task extends WindowContainer&lt;WindowContainer&gt; {\n     int getRootTaskId() {\n          return getRootTask().mTaskId;\n     }\n}\n</code></pre> <p>\u6240\u4ee5\u771f\u6b63\u8c03\u7528\u7684\u662fActivityStack.moveToFront</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\nvoid moveToFront(String reason) {\n   moveToFront(reason, null);\n}\n\n/**\n* @param reason The reason for moving the stack to the front.\n* @param task If non-null, the task will be moved to the top of the stack.\n* */\nvoid moveToFront(String reason, Task task) {\n   if (!isAttached()) {\n       return;\n   }\n\n   final TaskDisplayArea taskDisplayArea = getDisplayArea();\n\n   ...\n\n   if (isRootTask()) {\n       taskDisplayArea.positionStackAtTop(this, false /* includingParents */, reason);\n   }\n   if (task == null) {\n       task = this;\n   }\n   task.getParent().positionChildAt(POSITION_TOP, task, true /* includingParents */);\n}\n</code></pre> <ul> <li>\u83b7\u5f97\u663e\u793a\u533a\u57dftaskDisplayArea</li> <li>\u628a\u8981\u542f\u52a8\u7684Activity\u6240\u5728\u7684Task\uff0ctargetTask\uff0c\u8bbe\u7f6e\u5728\u663e\u793a\u533a\u57dftaskDisplayArea\u7684\u6700\u4e0a\u5c42</li> <li>task.getParent()\uff0c\u83b7\u5f97\u4e00\u4e2aWindowContainer</li> <li>\u628a\u8981\u542f\u52a8\u7684Activity\u6240\u5728\u7684Task\uff0ctargetTask\uff0c\u8bbe\u7f6e\u5728WindowContainer\u7684\u6700\u4e0a\u5c42</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#9-activitystackstartactivitylocked","title":"9. ActivityStack.startActivityLocked()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\nvoid startActivityLocked(ActivityRecord r, @Nullable ActivityRecord focusedTopActivity,\n       boolean newTask, boolean keepCurTransition, ActivityOptions options) {\n   Task rTask = r.getTask();\n   final boolean allowMoveToFront = options == null || !options.getAvoidMoveToFront();\n   final boolean isOrhasTask = rTask == this || hasChild(rTask);\n   // mLaunchTaskBehind tasks get placed at the back of the task stack.\n   if (!r.mLaunchTaskBehind &amp;&amp; allowMoveToFront &amp;&amp; (!isOrhasTask || newTask)) {\n       // Last activity in task had been removed or ActivityManagerService is reusing task.\n       // Insert or replace.\n       // Might not even be in.\n       positionChildAtTop(rTask);\n   }\n   Task task = null;\n   if (!newTask &amp;&amp; isOrhasTask) {\n       // Starting activity cannot be occluding activity, otherwise starting window could be\n       // remove immediately without transferring to starting activity.\n       final ActivityRecord occludingActivity = getOccludingActivityAbove(r);\n       if (occludingActivity != null) {\n           // Here it is!  Now, if this is not yet visible (occluded by another task) to the\n           // user, then just add it without starting; it will get started when the user\n           // navigates back to it.\n           if (DEBUG_ADD_REMOVE) Slog.i(TAG, \"Adding activity \" + r + \" to task \" + task,\n                   new RuntimeException(\"here\").fillInStackTrace());\n           rTask.positionChildAtTop(r);\n           ActivityOptions.abort(options);\n           return;\n       }\n   }\n\n   // Place a new activity at top of stack, so it is next to interact with the user.\n\n   // If we are not placing the new activity frontmost, we do not want to deliver the\n   // onUserLeaving callback to the actual frontmost activity\n   final Task activityTask = r.getTask();\n   if (task == activityTask &amp;&amp; mChildren.indexOf(task) != (getChildCount() - 1)) {\n       mStackSupervisor.mUserLeaving = false;\n       if (DEBUG_USER_LEAVING) Slog.v(TAG_USER_LEAVING,\n               \"startActivity() behind front, mUserLeaving=false\");\n   }\n\n   task = activityTask;\n\n   // Slot the activity into the history stack and proceed\n   if (DEBUG_ADD_REMOVE) Slog.i(TAG, \"Adding activity \" + r + \" to stack to task \" + task,\n           new RuntimeException(\"here\").fillInStackTrace());\n   task.positionChildAtTop(r);\n\n   // The transition animation and starting window are not needed if {@code allowMoveToFront}\n   // is false, because the activity won't be visible.\n   if ((!isHomeOrRecentsStack() || hasActivity()) &amp;&amp; allowMoveToFront) {\n       final DisplayContent dc = getDisplay().mDisplayContent;\n       if (DEBUG_TRANSITION) Slog.v(TAG_TRANSITION,\n               \"Prepare open transition: starting \" + r);\n       if ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {\n           dc.prepareAppTransition(TRANSIT_NONE, keepCurTransition);\n           mStackSupervisor.mNoAnimActivities.add(r);\n       } else {\n           int transit = TRANSIT_ACTIVITY_OPEN;\n           if (newTask) {\n               if (r.mLaunchTaskBehind) {\n                   transit = TRANSIT_TASK_OPEN_BEHIND;\n               } else if (getDisplay().isSingleTaskInstance()) {\n                   // If a new task is being launched in a single task display, we don't need\n                   // to play normal animation, but need to trigger a callback when an app\n                   // transition is actually handled. So ignore already prepared activity, and\n                   // override it.\n                   transit = TRANSIT_SHOW_SINGLE_TASK_DISPLAY;\n                   keepCurTransition = false;\n               } else {\n                   // If a new task is being launched, then mark the existing top activity as\n                   // supporting picture-in-picture while pausing only if the starting activity\n                   // would not be considered an overlay on top of the current activity\n                   // (eg. not fullscreen, or the assistant)\n                   if (canEnterPipOnTaskSwitch(focusedTopActivity,\n                           null /* toFrontTask */, r, options)) {\n                       focusedTopActivity.supportsEnterPipOnTaskSwitch = true;\n                   }\n                   transit = TRANSIT_TASK_OPEN;\n               }\n           }\n           dc.prepareAppTransition(transit, keepCurTransition);\n           mStackSupervisor.mNoAnimActivities.remove(r);\n       }\n       boolean doShow = true;\n       if (newTask) {\n           // Even though this activity is starting fresh, we still need\n           // to reset it to make sure we apply affinities to move any\n           // existing activities from other tasks in to it.\n           // If the caller has requested that the target task be\n           // reset, then do so.\n           if ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {\n               resetTaskIfNeeded(r, r);\n               doShow = topRunningNonDelayedActivityLocked(null) == r;\n           }\n       } else if (options != null &amp;&amp; options.getAnimationType()\n               == ActivityOptions.ANIM_SCENE_TRANSITION) {\n           doShow = false;\n       }\n       if (r.mLaunchTaskBehind) {\n           // Don't do a starting window for mLaunchTaskBehind. More importantly make sure we\n           // tell WindowManager that r is visible even though it is at the back of the stack.\n           r.setVisibility(true);\n           ensureActivitiesVisible(null, 0, !PRESERVE_WINDOWS);\n           // Go ahead to execute app transition for this activity since the app transition\n           // will not be triggered through the resume channel.\n           getDisplay().mDisplayContent.executeAppTransition();\n       } else if (SHOW_APP_STARTING_PREVIEW &amp;&amp; doShow) {\n           // Figure out if we are transitioning from another activity that is\n           // \"has the same starting icon\" as the next one.  This allows the\n           // window manager to keep the previous window it had previously\n           // created, if it still had one.\n           Task prevTask = r.getTask();\n           ActivityRecord prev = prevTask.topActivityWithStartingWindow();\n           if (prev != null) {\n               // We don't want to reuse the previous starting preview if:\n               // (1) The current activity is in a different task.\n               if (prev.getTask() != prevTask) {\n                   prev = null;\n               }\n               // (2) The current activity is already displayed.\n               else if (prev.nowVisible) {\n                   prev = null;\n               }\n           }\n           r.showStartingWindow(prev, newTask, isTaskSwitch(r, focusedTopActivity));\n       }\n   } else {\n       // If this is the first activity, don't do any fancy animations,\n       // because there is nothing for it to animate on top of.\n       ActivityOptions.abort(options);\n   }\n}\n</code></pre> <p>\u627e\u5230Activity\u6240\u5728\u7684TaskRecord, \u628aActivity\u63d2\u5165TaskRecord\u5408\u9002\u7684\u4f4d\u7f6e\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_3","title":"\u5c0f\u7ed3","text":"<ul> <li>\u786e\u5b9a\u88ab\u542f\u52a8Activity\u7684Task</li> <li>\u786e\u5b9a\u88ab\u542f\u52a8Activity\u7684window mode</li> <li>\u786e\u5b9a\u88ab\u542f\u52a8Activity\u7684targetStack, targetStack\u662f\u4e00\u4e2aActivityStack</li> <li>\u628a\u8981\u542f\u52a8\u7684activity\u52a0\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684task\u91cc</li> <li>\u628a\u8981\u542f\u52a8\u7684Activity\u6240\u5728\u7684Task\u8bbe\u7f6e\u5728\u663e\u793a\u533a\u57df\u548cWindowContainer\u7684\u6700\u4e0a\u5c42</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#rootwindowcontainerresumefocusedstackstopactivities","title":"RootWindowContainer.resumeFocusedStacksTopActivities()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java\n\nboolean resumeFocusedStacksTopActivities(\n        ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) {\n\n    ...\n\n    boolean result = false;\n    if (targetStack != null &amp;&amp; (targetStack.isTopStackInDisplayArea()\n            || getTopDisplayFocusedStack() == targetStack)) {\n        //\u5982\u679c\u5f53\u524d\u7684activitystack\u6b63\u597d\u5904\u4e8e\u5c4f\u5e55\u7684\u9876\u90e8\uff0c\u90a3\u4e48\u76f4\u63a5\u8c03\u7528\u5c06target\u8bbe\u7f6e\u5230\u9876\u90e8\u663e\u793a\n        result = targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);\n    }\n\n    for (int displayNdx = getChildCount() - 1; displayNdx &gt;= 0; --displayNdx) {\n        final DisplayContent display = getChildAt(displayNdx);\n        //\u6807\u8bb0\u662f\u5426\u5df2\u7ecf\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\n        boolean resumedOnDisplay = false;\n        for (int tdaNdx = display.getTaskDisplayAreaCount() - 1; tdaNdx &gt;= 0; --tdaNdx) {\n            final TaskDisplayArea taskDisplayArea = display.getTaskDisplayAreaAt(tdaNdx);\n            for (int sNdx = taskDisplayArea.getStackCount() - 1; sNdx &gt;= 0; --sNdx) {\n                final ActivityStack stack = taskDisplayArea.getStackAt(sNdx);\n                //\u83b7\u53d6\u5230\u5f53\u524dActivityStack\u9876\u90e8\u6b63\u5728\u8fd0\u884c\u7684Activity\n                final ActivityRecord topRunningActivity = stack.topRunningActivity();\n                if (!stack.isFocusableAndVisible() || topRunningActivity == null) {\n                    continue;\n                }\n                if (stack == targetStack) {                    \n                    //\u4e0a\u9762\u5df2\u7ecf\u505a\u8fc7resume\u5904\u7406\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u518d\u505a\u5904\u7406\u4e86\n                    resumedOnDisplay |= result;\n                    continue;\n                }\n                if (taskDisplayArea.isTopStack(stack) &amp;&amp; topRunningActivity.isState(RESUMED)) {\n                    stack.executeAppTransition(targetOptions);\n                } else {\n                    resumedOnDisplay |= topRunningActivity.makeActiveIfNeeded(target);\n                }\n            }\n        }\n         //\u5982\u679c\u4ecd\u7136\u6ca1\u6709\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff0c\u90a3\u4e48\u5c31\u83b7\u53d6\u5230\u5c4f\u5e55\u5f53\u524d\u6301\u6709\u7126\u70b9\u7684ActivityStack\uff0c\u7136\u540e\u5c06activity\u663e\u793a\u5728\u4e0a\u9762\n        if (!resumedOnDisplay) {\n            final ActivityStack focusedStack = display.getFocusedStack();\n            if (focusedStack != null) {\n                result |= focusedStack.resumeTopActivityUncheckedLocked(target, targetOptions);\n            } else if (targetStack == null) {\n                result |= resumeHomeActivity(null /* prev */, \"no-focusable-task\",\n                        display.getDefaultTaskDisplayArea());\n            }\n        }\n    }\n\n    return result;\n}\n</code></pre> <p>\u627e\u5230\u9876\u90e8ActivityStack\uff0c\u5c06activity\u663e\u793a\u5728\u4e0a\u9762\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystackresumetopactivityuncheckedlocked","title":"ActivityStack.resumeTopActivityUncheckedLocked()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\nboolean resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions options) {\n    if (mInResumeTopActivity) {\n        // Don't even start recursing.\n        return false;\n    }\n\n    boolean result = false;\n    try {\n        // Protect against recursion.\n        mInResumeTopActivity = true;\n        result = resumeTopActivityInnerLocked(prev, options);\n        final ActivityRecord next = topRunningActivity(true /* focusableOnly */);\n        if (next == null || !next.canTurnScreenOn()) {\n            checkReadyForSleep();\n        }\n    } finally {\n        mInResumeTopActivity = false;\n    }\n\n    return result;\n}\n</code></pre> <p>\u8fd9\u91cc\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u7ee7\u7eed\u770bresumeTopActivityInnerLocked\u548ctopRunningActivity\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystackresumetopactivityinnerlocked","title":"ActivityStack.resumeTopActivityInnerLocked()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\n@GuardedBy(\"mService\")\nprivate boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) {\n    ...\n    boolean pausing = taskDisplayArea.pauseBackStacks(userLeaving, next);\n    if (mResumedActivity != null) {\n        //\u8c03\u7528acitivity\u7684pause\u65b9\u6cd5\n        pausing |= startPausingLocked(userLeaving, false /* uiSleeping */, next);\n    }\n    ...\n    if (next.attachedToProcess()) {\n        ...    \n        try {        \n            ...\n        } catch (Exception e) {\n            ...\n            mStackSupervisor.startSpecificActivity(next, true, false);\n            return true;\n        }\n        ...\n    } else {\n        ...\n        mStackSupervisor.startSpecificActivity(next, true, true);\n    }\n\n    return true;\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u4ee3\u7801\u4e5f\u5f88\u957f\uff0c\u6211\u4eec\u53ea\u770b\u5173\u5fc3\u7684\u90e8\u5206\u3002</p> <ul> <li>startPausingLocked</li> </ul> <p>\u8c03\u7528AcitivityA\u7684onPause\u65b9\u6cd5</p> <ul> <li>startSpecificActivity</li> </ul> <p>\u8c03\u7528AcitivityB\u7684onCreate\u65b9\u6cd5</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystackstartpausinglocked","title":"ActivityStack.startPausingLocked","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java\n\nfinal boolean startPausingLocked(boolean userLeaving, boolean uiSleeping,\n        ActivityRecord resuming) {\n    ...\n    //\u5f53\u524d\u6b63\u5728\u663e\u793a\u7684Activity\n    ActivityRecord prev = mResumedActivity;\n    ...\n    //\u5f53\u524d\u6b63\u5728\u663e\u793a\u7684Activity\u9700\u8981\u6267\u884c\u6682\u505c\u64cd\u4f5c\u4e86\uff0c\u5c06\u5176\u8d4b\u503c\u7ed9mPausingActivity\u3002\n    mPausingActivity = prev;\n    mLastPausedActivity = prev;\n    mLastNoHistoryActivity = prev.isNoHistory() ? prev : null;\n\n    if (prev.attachedToProcess()) {        \n        try {\n            ...\n            mAtmService.getLifecycleManager().scheduleTransaction(prev.app.getThread(),\n                    prev.appToken, PauseActivityItem.obtain(prev.finishing, userLeaving,\n                            prev.configChangeFlags, pauseImmediately));\n        } catch (Exception e) {\n            ...\n        }\n    } else {\n        ...\n    }\n    ...\n}\n</code></pre> <p>\u91cd\u70b9\u662fmAtmService.getLifecycleManager().scheduleTransaction()\uff0c\u5148\u770b\u770bPauseActivityItem.obtain()\u90fd\u505a\u54ea\u4e9b\u4e8b\u60c5\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#pauseactivityitemobtain","title":"PauseActivityItem.obtain()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/PauseActivityItem.java#76\n\npublic static PauseActivityItem obtain(boolean finished, boolean userLeaving, int configChanges,\n        boolean dontReport) {\n    PauseActivityItem instance = ObjectPool.obtain(PauseActivityItem.class);\n    if (instance == null) {\n        instance = new PauseActivityItem();\n    }\n    instance.mFinished = finished;\n    instance.mUserLeaving = userLeaving;\n    instance.mConfigChanges = configChanges;\n    instance.mDontReport = dontReport;\n\n    return instance;\n}\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ObjectPool.java#27\n\npublic static &lt;T extends ObjectPoolItem&gt; T obtain(Class&lt;T&gt; itemClass) {\n    synchronized (sPoolSync) {\n        @SuppressWarnings(\"unchecked\")\n        final ArrayList&lt;T&gt; itemPool = (ArrayList&lt;T&gt;) sPoolMap.get(itemClass);\n        if (itemPool != null &amp;&amp; !itemPool.isEmpty()) {\n            return itemPool.remove(itemPool.size() - 1);\n        }\n        return null;\n    }\n}\n</code></pre> <p>\u770b\u5230\u8fd9\u6bb5\u4ee3\u7801\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u901a\u8fc7**\u4eab\u5143\u6a21\u5f0f**\u6765\u8fdb\u884c\u5904\u7406\u7684\u3002</p> <p>\u5173\u4e8e\u4eab\u5143\u6a21\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e24\u7bc7\u6587\u6863\u3002</p> <ul> <li>\u7b80\u8bf4\u8bbe\u8ba1\u6a21\u5f0f\u2014\u2014\u4eab\u5143\u6a21\u5f0f</li> <li>\u4eab\u5143\u6a21\u5f0f</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#clientlifecyclemanagerscheduletransaction","title":"ClientLifecycleManager.scheduleTransaction","text":"<p>\u518d\u56de\u5230mAtmService.getLifecycleManager().scheduleTransaction()</p> <ul> <li>mAtmService\u5c31\u662fActivityTaskManagerService</li> <li>getLifecycleManager()\u5c31\u662fClientLifecycleManager</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java#938\n\nClientLifecycleManager getLifecycleManager() {\n    return mLifecycleManager;\n}\n</code></pre> <p>\u6240\u4ee5\u73b0\u5728\u660e\u786e\u4e86mAtmService.getLifecycleManager().scheduleTransaction()\u4e5f\u5c31\u662fClientLifecycleManager.scheduleTransaction\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ClientLifecycleManager.java?fi=ClientLifecycleManager#96\n\nvoid scheduleTransaction(@NonNull IApplicationThread client,\n        @NonNull ClientTransactionItem callback) throws RemoteException {\n    final ClientTransaction clientTransaction = transactionWithCallback(client,\n            null /* activityToken */, callback);\n    scheduleTransaction(clientTransaction);\n}\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java\n\nprivate static ClientTransaction transactionWithCallback(@NonNull IApplicationThread client,\n        IBinder activityToken, @NonNull ClientTransactionItem callback) {\n    final ClientTransaction clientTransaction = ClientTransaction.obtain(client, activityToken);\n    clientTransaction.addCallback(callback);\n    return clientTransaction;\n}\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ClientLifecycleManager.java\n\nvoid scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n    final IApplicationThread client = transaction.getClient();\n    transaction.schedule();\n    if (!(client instanceof Binder)) {\n        // If client is not an instance of Binder - it's a remote call and at this point it is\n        // safe to recycle the object. All objects used for local calls will be recycled after\n        // the transaction is executed on client in ActivityThread.\n        transaction.recycle();\n    }\n}\n</code></pre> <p>ClientLifecycleManager\u6709\u51e0\u4e2ascheduleTransaction\u65b9\u6cd5\uff0c\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\u662f\u4f20\u4e24\u4e2a\u53c2\u6570\u7684\u3002\u4f46\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fClientTransactionItem\u800c\u4e0d\u662f\u4e0a\u6587\u770b\u5230\u7684PauseActivityItem\u3002\u770b\u5b8c\u4ee5\u4e0b\u4ee3\u7801\u5176\u5b9e\u5c31\u4e0d\u96be\u77e5\u9053\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/PauseActivityItem.java\npublic class PauseActivityItem extends ActivityLifecycleItem {\n}\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ActivityLifecycleItem.java\n\npublic abstract class ActivityLifecycleItem extends ClientTransactionItem {\n}\n</code></pre> <p>ClientTransaction\u5b58\u5728\u4e24\u79cd\u4e8b\u52a1\uff1a</p> <ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e8b\u52a1\u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a\u4e8b\u52a1\u6267\u884c\u4ee5\u540e\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5904\u4e8e\u7684\u751f\u547d\u5468\u671f\u72b6\u6001</li> <li>addCallback\uff0c\u589e\u52a0\u5bf9\u5ba2\u6237\u7aef\u7684\u4e8b\u52a1\u7c7b\u578b\u56de\u8c03\uff0c\u5bf9\u5ba2\u6237\u7aef\u4e00\u7cfb\u5217\u7684\u56de\u8c03</li> </ul> <p>\u56de\u5230\u4e3b\u9898\uff0c\u6700\u7ec8\u4e3b\u8981\u662f\u8c03\u5230ClientTransaction\u5bf9\u8c61\u7684**schedule**\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java#135\n\npublic void schedule() throws RemoteException {\n    mClient.scheduleTransaction(this);\n}\n</code></pre> <p>mClient\u662f\u4e00\u4e2aIApplicationThread\uff0c\u8fd8\u8bb0\u5f97\u524d\u9762mAtmService.getLifecycleManager().scheduleTransaction()\u4f20\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fprev.app.getThread()\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u8c03\u7528\u7684\u662fApplicationThread\u7684scheduleTransaction\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\npublic final class ActivityThread extends ClientTransactionHandler {\n\n    final ApplicationThread mAppThread = new ApplicationThread();\n\n    public ApplicationThread getApplicationThread()\n    {\n        return mAppThread;\n    }\n\n    private class ApplicationThread extends IApplicationThread.Stub {\n    }\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_4","title":"\u6d41\u7a0b","text":"<pre><code>\nsequenceDiagram\nInstrumentation -&gt;&gt; ActivityTaskManagerService:startActivity()\nActivityTaskManagerService -&gt;&gt; ActivityTaskManagerService:startActivity()\nActivityTaskManagerService -&gt;&gt; ActivityTaskManagerService:startActivityAsUser()\n    Note over ActivityTaskManagerService : \u8c03\u7528ActivityStarter.obtainStarter()\u8bbe\u7f6e\u53c2\u6570\nActivityTaskManagerService -&gt;&gt; ActivityStarter:execute()\nActivityStarter -&gt;&gt; Request:resolveActivity()\n    Note over Request : \u521d\u59cb\u5316request.activityInfo\nActivityStarter -&gt;&gt; ActivityStarter:executeRequest()\nActivityStarter -&gt;&gt; ActivityStarter:checkStartAnyActivityPermission()\n    Note over ActivityStarter : \u68c0\u67e5\u542f\u52a8activity\u7684\u6743\u9650\nActivityStarter -&gt;&gt; ActivityStarter:shouldAbortBackgroundActivityStart()\n    Note over ActivityStarter : \u68c0\u67e5\u662f\u5426\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity\nActivityStarter -&gt;&gt; ActivityStarter:shouldAbortBackgroundActivityStart()    \nActivityStarter -&gt;&gt; ActivityStarter:startActivityUnchecked()\nActivityStarter -&gt;&gt; ActivityStarter:startActivityInner()\n    Note over ActivityStarter : \u51c6\u5907\u597d\u5806\u6808\uff0c\u4e3a\u542f\u52a8activity\u505a\u6700\u540e\u7684\u51c6\u5907\u3002startActivityInner()\u91cc\u5f88\u591a\u7ec6\u8282\uff0c\u8bf7\u770b\u6e90\u7801\u5206\u6790\u3002\nActivityStarter -&gt;&gt; ActivityStack:startActivityLocked()\nActivityStarter -&gt;&gt; RootWindowContainer:resumeFocusedStacksTopActivities()\nRootWindowContainer -&gt;&gt; ActivityStack:resumeTopActivityUncheckedLocked()\nActivityStack -&gt;&gt; ActivityStack:resumeTopActivityInnerLocked()\nActivityStack -&gt;&gt; ActivityStack:startPausingLocked()\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#appactivitythreadscheduletransaction","title":"App\u8fdb\u7a0bActivityThread.scheduleTransaction()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\npublic final class ActivityThread extends ClientTransactionHandler {\n\n    final ApplicationThread mAppThread = new ApplicationThread();\n\n    public ApplicationThread getApplicationThread()\n    {\n        return mAppThread;\n    }\n\n    private class ApplicationThread extends IApplicationThread.Stub {\n\n        @Override\n        public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n            ActivityThread.this.scheduleTransaction(transaction);\n        }\n    }\n}\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ClientTransactionHandler.java?fi=ClientTransactionHandler#ClientTransactionHandler\n\npublic abstract class ClientTransactionHandler {\n\n    void scheduleTransaction(ClientTransaction transaction) {\n        transaction.preExecute(this);\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\n    }\n\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadhexecute_transaction","title":"ActivityThread.H.EXECUTE_TRANSACTION","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java?fi=EXECUTE_TRANSACTION#2064\n\nprivate final TransactionExecutor mTransactionExecutor = new TransactionExecutor(this);\n\ncase EXECUTE_TRANSACTION:\n    final ClientTransaction transaction = (ClientTransaction) msg.obj;\n    mTransactionExecutor.execute(transaction);\n    if (isSystem()) {\n        // Client transactions inside system process are recycled on the client side\n        // instead of ClientLifecycleManager to avoid being cleared before this\n        // message is handled.\n        transaction.recycle();\n    }\n    // TODO(lifecycler): Recycle locally scheduled transactions.\n    break;\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#transactionexecutorexecute","title":"TransactionExecutor.execute()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java#69\n\npublic void execute(ClientTransaction transaction) {\n    ...\n    //\u5faa\u73af\u904d\u5386\u56de\u8c03\u8bf7\u6c42\u7684\u6240\u6709\u72b6\u6001\uff0c\u5e76\u5728\u9002\u5f53\u7684\u65f6\u95f4\u6267\u884c\u5b83\u4eec\n    executeCallbacks(transaction);\n    //\u6267\u884c\u751f\u547d\u5468\u671f\u7684\u6539\u53d8\n    executeLifecycleState(transaction);\n    ...\n}\n</code></pre> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java\n\nprivate void executeLifecycleState(ClientTransaction transaction) {\n    //\u6839\u636e\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u5f53\u524d\u662fActivityA\n    final ActivityLifecycleItem lifecycleItem = transaction.getLifecycleStateRequest();\n    if (lifecycleItem == null) {\n        // No lifecycle request, return early.\n        return;\n    }\n\n    final IBinder token = transaction.getActivityToken();    \n    ...\n\n    //\u4f7f\u7528\u9002\u5f53\u7684\u53c2\u6570\u6267\u884c\u6700\u540e\u7684\u8f6c\u6362\n    lifecycleItem.execute(mTransactionHandler, token, mPendingActions);\n    lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);\n}\n</code></pre> <ul> <li>lifecycleItem\u5c31\u662f\u524d\u9762\u8bf4\u5230\u7684PauseActivityItem</li> <li>mTransactionHandler\u5c31\u662fActivityThread</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#pauseactivityitemexecute","title":"PauseActivityItem.execute()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/PauseActivityItem.java\n\n@Override\npublic void execute(ClientTransactionHandler client, IBinder token,\n        PendingTransactionActions pendingActions) {\n    ...\n    client.handlePauseActivity(token, mFinished, mUserLeaving, mConfigChanges, pendingActions,\n            \"PAUSE_ACTIVITY_ITEM\");\n    ...\n}\n</code></pre> <p>client\u662fActivityThread\uff0c\u5982\u679c\u6211\u4eec\u4e00\u8def\u5f80\u56de\u770b\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u6b64\u65f6\u8fd8\u662f\u5728App-A\u8fdb\u7a0b\u4e2d\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadhandlepauseactivity","title":"ActivityThread.handlePauseActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\n@Override\npublic void handlePauseActivity(IBinder token, boolean finished, boolean userLeaving,\n        int configChanges, PendingTransactionActions pendingActions, String reason) {\n    //\u83b7\u53d6\u5bf9\u5e94\u7684ActivityClientRecord\u5bf9\u8c61\n    ActivityClientRecord r = mActivities.get(token);\n    if (r != null) {\n        ...\n        //\u6267\u884cpause\u65b9\u6cd5\n        performPauseActivity(r, finished, reason, pendingActions);\n        ...\n    }\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadperformpauseactivity","title":"ActivityThread.performPauseActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\nprivate Bundle performPauseActivity(ActivityClientRecord r, boolean finished, String reason,\n        PendingTransactionActions pendingActions) {\n    ...\n    performPauseActivityIfNeeded(r, reason);\n    ...\n    return shouldSaveState ? r.state : null;\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadperformpauseactivityifneeded","title":"ActivityThread.performPauseActivityIfNeeded()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\nprivate void performPauseActivityIfNeeded(ActivityClientRecord r, String reason) {\n    ...\n    try {\n        ...\n        mInstrumentation.callActivityOnPause(r.activity);\n        ...\n    }\n    ...\n    r.setState(ON_PAUSE);\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#instrumentationcallactivityonpause","title":"Instrumentation.callActivityOnPause()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Instrumentation.java\n\npublic void callActivityOnPause(Activity activity) {\n    activity.performPause();\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activityperformpause","title":"Activity.performPause()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Activity.java\n\nfinal void performPause() {\n    dispatchActivityPrePaused();\n    mDoReportFullyDrawn = false;\n    //\u7ba1\u7406\u7684Fragment\u7684\u5904\u7406\n    mFragments.dispatchPause();\n    mCalled = false;\n    //\u8c03\u7528\u4e86onPause\u751f\u547d\u5468\u671f\u65b9\u6cd5\n    onPause();\n    EventLogTags.writeWmOnPausedCalled(mIdent, getComponentName().getClassName(),\n            \"performPause\");\n    //\u8bbe\u7f6emResumed\u4e3afalse\uff0c\u8868\u793a\u5f53\u524dactivity\u6ca1\u6709\u5c55\u793a            \n    mResumed = false;\n    if (!mCalled &amp;&amp; getApplicationInfo().targetSdkVersion\n            &gt;= android.os.Build.VERSION_CODES.GINGERBREAD) {\n        throw new SuperNotCalledException(\n                \"Activity \" + mComponent.toShortString() +\n                \" did not call through to super.onPause()\");\n    }\n    //\u8c03\u7528\u4e00\u4e9b\u56de\u8c03\u51fd\u6570\n    dispatchActivityPostPaused();\n}\n</code></pre> <p>\u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u539f\u6765\u5728\u6211\u4eec\u9762\u524d\u5c55\u793a\u7684\u90a3\u4e2aActivity\u8c03\u7528\u4e86\u5176**onPause**\u65b9\u6cd5\u3002\u4e4b\u524d\u5728SystemServer\u8fdb\u7a0b\u7684ActivityTaskManagerService\u670d\u52a1\u4e2dActivityStack.resumeTopActivityInnerLocked()\u4e2d\u7684startPausingLocked()\u6d41\u7a0b\u7ec8\u4e8e\u7ed3\u675f\u4e86\uff0c\u4e0b\u6765\u63a5\u7740\u5206\u6790ActivityStack.resumeTopActivityInnerLocked()\u4e2d\u7684startSpecificActivity()\u6d41\u7a0b\uff0c\u4e5f\u5c31\u662fActivity\u521b\u5efa\u7684\u8fc7\u7a0b\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#systemserveratms","title":"SystemServer.ATMS","text":"","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystacksupervisorstartspecificactivity","title":"ActivityStackSupervisor.startSpecificActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java\n\nvoid startSpecificActivity(ActivityRecord r, boolean andResume, boolean checkConfig) {\n    //\u6839\u636euid\u548cpid\uff0c\u83b7\u53d6activity\u5bf9\u5e94\u7684\u8fdb\u884c\u548c\u7ebf\u7a0b\u4fe1\u606f\n    final WindowProcessController wpc =\n            mService.getProcessController(r.processName, r.info.applicationInfo.uid);\n\n    boolean knownToBeDead = false;\n    if (wpc != null &amp;&amp; wpc.hasThread()) {\n        try {\n            realStartActivityLocked(r, wpc, andResume, checkConfig);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception when starting activity \"\n                    + r.intent.getComponent().flattenToShortString(), e);\n        }\n\n        // If a dead object exception was thrown -- fall through to\n        // restart the application.\n        knownToBeDead = true;\n    }\n\n    r.notifyUnknownVisibilityLaunchedForKeyguardTransition();\n\n    //\u5982\u679c\u8fdb\u7a0b\u8fd8\u6ca1\u8d77\u6765\uff0c\u5219\u542f\u52a8\u8fdb\u7a0b\u3002\n    final boolean isTop = andResume &amp;&amp; r.isTopRunningActivity();\n    mService.startProcessAsync(r, knownToBeDead, isTop, isTop ? \"top-activity\" : \"activity\");\n}\n</code></pre> <ul> <li>\u6839\u636euid\u548cpid\uff0c\u83b7\u53d6activity\u5bf9\u5e94\u7684\u8fdb\u884c\u548c\u7ebf\u7a0b\u4fe1\u606f\uff0c\u5982\u679c\u8fdb\u7a0b\u5df2\u7ecf\u8d77\u6765\u5219\u8c03\u7528realStartActivityLocked</li> <li>\u5982\u679c\u8fdb\u7a0b\u6ca1\u8d77\u6765\uff0c\u8d70\u5230AMS\u670d\u52a1\uff0cAMS\u670d\u52a1\u8ddfzygote\u8fdb\u7a0b\u7533\u8bf7\u542f\u52a8\u65b0\u7684APP\u8fdb\u7a0b\u3002\uff08\u8fd9\u6587\u7ae0\u8d8a\u5199\u8d8a\u957f\uff0c\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u540e\u9762\u518d\u627e\u4e2a\u673a\u4f1a\u8865\u5145\u5427\uff09</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitystacksupervisorrealstartactivitylocked","title":"ActivityStackSupervisor.realStartActivityLocked()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java\n\nboolean realStartActivityLocked(ActivityRecord r, WindowProcessController proc,\n        boolean andResume, boolean checkConfig) throws RemoteException {\n    //\u5982\u679c\u8fd8\u6709activity\u6ca1\u6709\u6682\u505c\uff0c\u8fd9\u91cc\u4f1a\u76f4\u63a5\u8fd4\u56defalse\n    if (!mRootWindowContainer.allPausedActivitiesComplete()) {\n        return false;\n    }\n\n    final Task task = r.getTask();\n    final ActivityStack stack = task.getStack();\n    //\u8bbe\u7f6e\u6807\u5fd7\u4f4d\uff0c\u4e0d\u518d\u63a5\u6536\u5176\u4ed6activity\u7684resume\u7684\u64cd\u4f5c\n    beginDeferResume();\n    ...\n    try {\n        ...\n        try {        \n            //\u521b\u5efa\u4e86\u4e00\u4e2aActivity\u4e8b\u52a1\n            //proc\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684activity\u5bf9\u5e94\u7684\u8fdb\u884c\u548c\u7ebf\u7a0b\u4fe1\u606f\n            final ClientTransaction clientTransaction = ClientTransaction.obtain(\n                    proc.getThread(), r.appToken);\n\n            final DisplayContent dc = r.getDisplay().mDisplayContent;\n            //\u589e\u52a0\u4e00\u4e2a\u8981\u6267\u884c\u7684\u4e8b\u52a1LaunchActivityItem\n            clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),\n                    System.identityHashCode(r), r.info,                    \n                    mergedConfiguration.getGlobalConfiguration(),\n                    mergedConfiguration.getOverrideConfiguration(), r.compat,\n                    r.launchedFromPackage, task.voiceInteractor, proc.getReportedProcState(),\n                    r.getSavedState(), r.getPersistentSavedState(), results, newIntents,\n                    dc.isNextTransitionForward(), proc.createProfilerInfoIfNeeded(),\n                    r.assistToken, r.createFixedRotationAdjustmentsIfNeeded()));\n\n            // Set desired final state.\n            final ActivityLifecycleItem lifecycleItem;\n            if (andResume) {\n                lifecycleItem = ResumeActivityItem.obtain(dc.isNextTransitionForward());\n            } else {\n                lifecycleItem = PauseActivityItem.obtain();\n            }\n            //\u8bbe\u7f6e\u5176\u751f\u547d\u5468\u671fLifecycleStateRequest\n            clientTransaction.setLifecycleStateRequest(lifecycleItem);\n\n            //\u6267\u884c\u4e8b\u52a1\u7684\u8c03\u5ea6\n            mService.getLifecycleManager().scheduleTransaction(clientTransaction);\n            ...\n        } catch (RemoteException e) {\n            ...\n        }\n    } finally {\n        endDeferResume();\n        proc.resumeConfigurationDispatch();\n    }\n\n    r.launchFailed = false;\n\n    ...\n    //\u56de\u8c03App\u8fdb\u7a0b\uff0c\u53d1\u8d77\u751f\u547d\u5468\u671f\u65b9\u6cd5\u3002\n    proc.onStartActivity(mService.mTopProcessState, r.info);\n\n    // Launch the new version setup screen if needed.  We do this -after-\n    // launching the initial activity (that is, home), so that it can have\n    // a chance to initialize itself while in the background, making the\n    // switch back to it faster and look better.\n    if (mRootWindowContainer.isTopDisplayFocusedStack(stack)) {\n        mService.getActivityStartController().startSetupActivity();\n    }\n\n    // Update any services we are bound to that might care about whether\n    // their client may have activities.\n    if (r.app != null) {\n        r.app.updateServiceConnectionActivities();\n    }\n\n    return true;\n}\n</code></pre> <ul> <li>\u8bbe\u7f6e\u6807\u5fd7\u4f4d\uff0c\u4e0d\u518d\u63a5\u6536\u5176\u4ed6activity\u7684resume\u7684\u64cd\u4f5c</li> <li>proc\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684activity\u5bf9\u5e94\u7684\u8fdb\u884c\u548c\u7ebf\u7a0b\u4fe1\u606f</li> <li>\u521b\u5efaClientTransaction\u5bf9\u8c61\uff0c\u901a\u8fc7clientTransaction.addCallback\u6dfb\u52a0\u4e00\u4e2aLaunchActivityItem\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7**setLifecycleStateRequest**\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u751f\u547d\u5468\u671f\uff0c\u6700\u540e\u901a\u8fc7**scheduleTransaction**\u6267\u884c\u4e86\u8c03\u5ea6</li> </ul> <p>\u5728\u524d\u9762\u7684**onPause**\u4e2d\uff0c\u6211\u4eec\u68b3\u7406\u4e86\u6574\u4e2a\u8c03\u5ea6\u7684\u6d41\u7a0b\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230**LaunchActivityItem**\u7684**execute**\uff0c\u7136\u540e\u4f1a\u8c03\u7528\u751f\u547d\u5468\u671f\u6240\u5bf9\u5e94\u7684**ResumeActivityItem**\u7684**execute\u3002**</p> <ul> <li> <p>\u6062\u590d\u6807\u5fd7\u4f4d\uff0c\u53ef\u4ee5\u518d\u63a5\u6536\u5176\u4ed6activity\u7684resume\u7684\u64cd\u4f5c</p> </li> <li> <p>\u56de\u8c03App\u8fdb\u7a0b\uff0c\u53d1\u8d77\u751f\u547d\u5468\u671f\u65b9\u6cd5</p> </li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#clientlifecyclemanagerscheduletransaction_1","title":"ClientLifecycleManager.scheduleTransaction","text":"<p>\u91cd\u70b9\u5206\u6790mService.getLifecycleManager().scheduleTransaction(clientTransaction);</p> <ul> <li>mService\u5c31\u662fActivityTaskManagerService</li> <li>getLifecycleManager()\u5c31\u662fClientLifecycleManager</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java#938\n\nClientLifecycleManager getLifecycleManager() {\n    return mLifecycleManager;\n}\n</code></pre> <p>\u6240\u4ee5\u73b0\u5728\u660e\u786e\u4e86mService.getLifecycleManager().scheduleTransaction()\u4e5f\u5c31\u662fClientLifecycleManager.scheduleTransaction\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/wm/ClientLifecycleManager.java\n\nvoid scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n    final IApplicationThread client = transaction.getClient();\n    transaction.schedule();\n    if (!(client instanceof Binder)) {\n        // If client is not an instance of Binder - it's a remote call and at this point it is\n        // safe to recycle the object. All objects used for local calls will be recycled after\n        // the transaction is executed on client in ActivityThread.\n        transaction.recycle();\n    }\n}\n</code></pre> <p>\u6700\u7ec8\u4e3b\u8981\u662f\u8c03\u5230ClientTransaction\u5bf9\u8c61\u7684**schedule**\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java#135\n\npublic void schedule() throws RemoteException {\n    mClient.scheduleTransaction(this);\n}\n</code></pre> <p>mClient\u662f\u4e00\u4e2aIApplicationThread\uff0c\u7a0d\u5fae\u5f80\u56de\u770b\u4e0d\u96be\u77e5\u9053mClient\u5c31\u662f\u8981\u542f\u52a8\u7684Activity\u6240\u5728\u7684\u8fdb\u7a0b\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u8c03\u7528\u7684\u662fApplicationThread\u7684scheduleTransaction\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\npublic final class ActivityThread extends ClientTransactionHandler {\n\n    final ApplicationThread mAppThread = new ApplicationThread();\n\n    public ApplicationThread getApplicationThread()\n    {\n        return mAppThread;\n    }\n\n    private class ApplicationThread extends IApplicationThread.Stub {\n    }\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#appactivitythreadschedule","title":"\u65b0App\u8fdb\u7a0bActivityThread.schedule","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\npublic final class ActivityThread extends ClientTransactionHandler {\n\n    final ApplicationThread mAppThread = new ApplicationThread();\n\n    public ApplicationThread getApplicationThread()\n    {\n        return mAppThread;\n    }\n\n    private class ApplicationThread extends IApplicationThread.Stub {\n\n        @Override\n        public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n            ActivityThread.this.scheduleTransaction(transaction);\n        }\n    }\n}\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ClientTransactionHandler.java?fi=ClientTransactionHandler#ClientTransactionHandler\n\npublic abstract class ClientTransactionHandler {\n\n    void scheduleTransaction(ClientTransaction transaction) {\n        transaction.preExecute(this);\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\n    }\n\n}\n</code></pre> <p>\u8fd9\u4e2a\u65b9\u6cd5\u8c03\u7528\u4e86ActivityThread\u7684scheduleTransaction()\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u5728ActivityThread\u5e76\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5176\u5b9e\u8fd9\u4e2a\u65b9\u6cd5\u5728ActivityThread\u7684\u7236\u7c7bClientTransactionHandler \u4e8b\u52a1\u5904\u7406\u5668\u4e2d\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bClientTransactionHandler\u4e2d\u7684scheduleTransaction\u65b9\u6cd5\u3002\u901a\u8fc7\u8c03\u7528ActivityThread\u7684sendMessage\u65b9\u6cd5\uff0c\u7ed9handler\u7684\u5b50\u7c7bH\u53d1\u4e86\u4e00\u4e2awhat\u4e3a EXECUTE_TRANSACTION obj\u4e3aClientTransaction\u7684\u6d88\u606f\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadhexecute_transaction_1","title":"ActivityThread.H.EXECUTE_TRANSACTION","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java?fi=EXECUTE_TRANSACTION#2064\n\nprivate final TransactionExecutor mTransactionExecutor = new TransactionExecutor(this);\n\ncase EXECUTE_TRANSACTION:\n    final ClientTransaction transaction = (ClientTransaction) msg.obj;\n    mTransactionExecutor.execute(transaction);\n    if (isSystem()) {\n        // Client transactions inside system process are recycled on the client side\n        // instead of ClientLifecycleManager to avoid being cleared before this\n        // message is handled.\n        transaction.recycle();\n    }\n    // TODO(lifecycler): Recycle locally scheduled transactions.\n    break;\n</code></pre> <p>H\u7c7b\u7684handleMessage\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u4e86TransactionExecutor\u4e8b\u52a1\u6267\u884c\u5668\u7684execute()\u65b9\u6cd5\u5e76\u628aClientTransaction \u4f5c\u4e3a\u53c2\u6570\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#transactionexecutorexecute_1","title":"TransactionExecutor.execute()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java#69\n\npublic void execute(ClientTransaction transaction) {\n    ...\n    //\u5faa\u73af\u904d\u5386\u56de\u8c03\u8bf7\u6c42\u7684\u6240\u6709\u72b6\u6001\uff0c\u5e76\u5728\u9002\u5f53\u7684\u65f6\u95f4\u6267\u884c\u5b83\u4eec\n    executeCallbacks(transaction);\n    //\u6267\u884c\u751f\u547d\u5468\u671f\u7684\u6539\u53d8\n    executeLifecycleState(transaction);\n    ...\n}\n</code></pre>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#transactionexecutorexecutecallbacks","title":"TransactionExecutor.executeCallbacks()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java\n\npublic void executeCallbacks(ClientTransaction transaction) {\n    final List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();\n    ...\n\n    final int size = callbacks.size();\n    for (int i = 0; i &lt; size; ++i) {\n        final ClientTransactionItem item = callbacks.get(i);\n        ...\n        item.execute(mTransactionHandler, token, mPendingActions);\n        item.postExecute(mTransactionHandler, token, mPendingActions);\n        ...\n    }\n}\n</code></pre> <p>\u8c03\u7528ClientTransactionItem\u7684execute\u65b9\u6cd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u4e0a\u9762realStartActivityLocked\u4e2d\u63d0\u5230\u7684LaunchActivityItem\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#launchactivityitemexecute","title":"LaunchActivityItem.execute()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/BaseClientRequest.java\n\npublic interface BaseClientRequest extends ObjectPoolItem {\n    void execute(ClientTransactionHandler client, IBinder token,\n            PendingTransactionActions pendingActions);\n}\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/ClientTransactionItem.java\n\npublic abstract class ClientTransactionItem implements BaseClientRequest, Parcelable {\n}\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/servertransaction/LaunchActivityItem.java#48\n\npublic class LaunchActivityItem extends ClientTransactionItem {\n    @Override\n    public void execute(ClientTransactionHandler client, IBinder token,\n            PendingTransactionActions pendingActions) {\n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\n        ActivityClientRecord r = new ActivityClientRecord(token, mIntent, mIdent, mInfo,\n                mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,\n                mPendingResults, mPendingNewIntents, mIsForward,\n                mProfilerInfo, client, mAssistToken, mFixedRotationAdjustments);\n        client.handleLaunchActivity(r, pendingActions, null /* customIntent */);\n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2aclient\u5176\u5b9e\u5c31\u662fActivityThread\u8fd9\u4e2a\u7c7b\uff0cActivityThread\u7ee7\u627f\u81eaClientTransactionHandler\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0bActivityThread\u7684handleLaunchActivity\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadhandlelaunchactivity","title":"ActivityThread.handleLaunchActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\n@Override\npublic Activity handleLaunchActivity(ActivityClientRecord r,\n        PendingTransactionActions pendingActions, Intent customIntent) {    \n    ...\n\n    final Activity a = performLaunchActivity(r, customIntent);\n\n    ...\n\n    return a;\n}\n</code></pre> <p>\u6211\u4eec\u53ea\u5173\u5fc3\u542f\u52a8activity\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u7ee7\u7eed\u770bperformLaunchActivity\u65b9\u6cd5\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activitythreadperformlaunchactivity","title":"ActivityThread.performLaunchActivity()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/ActivityThread.java\n\nprivate Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n    ...\n    ContextImpl appContext = createBaseContextForActivity(r);\n    Activity activity = null;\n    try {\n        java.lang.ClassLoader cl = appContext.getClassLoader();\n        activity = mInstrumentation.newActivity(\n                cl, component.getClassName(), r.intent);\n        StrictMode.incrementExpectedActivityCount(activity.getClass());\n        r.intent.setExtrasClassLoader(cl);\n        r.intent.prepareToEnterProcess();\n        ...\n    } catch (Exception e) {\n        if (!mInstrumentation.onException(activity, e)) {\n            throw new RuntimeException(\n                \"Unable to instantiate activity \" + component\n                + \": \" + e.toString(), e);\n        }\n    }\n\n    try {\n        Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n        ...\n\n        if (activity != null) {\n            ...\n            appContext.getResources().addLoaders(\n                    app.getResources().getLoaders().toArray(new ResourcesLoader[0]));\n\n            appContext.setOuterContext(activity);\n            activity.attach(appContext, this, getInstrumentation(), r.token,\n                    r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                    r.embeddedID, r.lastNonConfigurationInstances, config,\n                    r.referrer, r.voiceInteractor, window, r.configCallback,\n                    r.assistToken);\n            ...\n            if (r.isPersistable()) {\n                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\n            } else {\n                mInstrumentation.callActivityOnCreate(activity, r.state);\n            }\n            ...\n        }\n        ...\n\n    }\n    ...\n\n    return activity;\n}\n</code></pre> <ul> <li>\u521b\u5efaActivity\u5b9e\u4f8b</li> <li>\u8c03\u7528Activity\u7684attach\u65b9\u6cd5\u6765\u7ed1\u5b9aappContent</li> <li>Instrumentation\u7684callActivityOnCreate()\u65b9\u6cd5</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#instrumentationcallactivityoncreate","title":"Instrumentation.callActivityOnCreate()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Instrumentation.java\n\npublic void callActivityOnCreate(Activity activity, Bundle icicle) {\n    prePerformCreate(activity);\n    activity.performCreate(icicle);\n    postPerformCreate(activity);\n}\n</code></pre> <p>\u8c03\u7528\u4e86Activity\u7684performCreate\u65b9\u6cd5\u3002</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#activityperformcreate","title":"Activity.performCreate()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/app/Activity.java\n\n@UnsupportedAppUsage\nfinal void performCreate(Bundle icicle, PersistableBundle persistentState) {\n    ...\n    if (persistentState != null) {\n        onCreate(icicle, persistentState);\n    } else {\n        onCreate(icicle);\n    }\n    ...\n}\n</code></pre> <p>\u56de\u8c03\u5230\u6211\u4eec\u521b\u5efaActivity\u590d\u5199\u7684onCreate\u65b9\u6cd5\u3002\u5230\u8fd9\u91cc\u6574\u4e2aActivity\u7684\u542f\u52a8\u6d41\u7a0b\u4e5f\u5c31\u5206\u6790\u5b8c\u4e86\u3002</p> <p>\u73b0\u5728\u56de\u8fc7\u5934\u6765\u770b\u51faActivity\u7684\u542f\u52a8\u6d41\u7a0b\u8fd8\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u6d89\u53ca\u7684\u7c7b\u4e5f\u6bd4\u8f83\u591a\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u4e5f\u662f\u975e\u5e38\u590d\u6742\u6211\u4eec\u5343\u4e07\u4e0d\u8981\u62a0\u7ec6\u8282\u8981\u4e0d\u7136\u5c31\u4f1a\u8ff7\u5931\u5728\u4ee3\u7801\u7684\u6d77\u6d0b\u4e2d\u65e0\u6cd5\u81ea\u62d4\u3002\u5f53\u7136\u8ddf\u5230\u8fd9\u91cc\u518d\u56de\u8fc7\u5934\u6765\u60f3\u8fd9\u6574\u4e2a\u6d41\u7a0b\uff0c\u624d\u53d1\u73b0\u5176\u5b9e\u6709\u4e00\u4e9b\u5173\u952e\u7684\u6d41\u7a0b\u8fd8\u662f\u6f0f\u6389\u4e86\u3002\u6bd4\u5982\uff1a</p> <ul> <li>\u591aDispalyID\u6216\u8005VR\u6a21\u5f0f</li> <li>AMS\u5982\u4f55\u5411Zygote\u8fdb\u7a0b\u7533\u8bf7\u521b\u5efa\u65b0\u7684APP\u8fdb\u7a0b</li> <li>Launch Mode</li> <li>Activity\u4e0eWindow\u5173\u7cfb</li> <li>\u5f85\u8865\u5145</li> </ul>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_5","title":"\u603b\u7ed3","text":"<p>\u6211\u4eec\u4ece\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u7684\u89d2\u5ea6\u603b\u7ed3activity\u7684\u542f\u52a8\u8fc7\u7a0b\uff1a</p> <ul> <li>APP\u8fdb\u7a0b\u901a\u8fc7Binder IPC\u5411SystemServer\u8fdb\u7a0b\u7684ATMS\u670d\u52a1\u53d1\u8d77startActivity\u8bf7\u6c42</li> <li>SystemServer\u8fdb\u7a0b\u7684ATMS\u670d\u52a1\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u544a\u8bc9AMS\u670d\u52a1\uff0cAMS\u670d\u52a1\u5411zygote\u8fdb\u7a0b\u53d1\u9001\u521b\u5efa\u8fdb\u7a0b\u7684\u8bf7\u6c42</li> <li>Zygote\u8fdb\u7a0bfork\u51fa\u65b0\u7684\u5b50\u8fdb\u7a0b\uff0c\u5373App\u8fdb\u7a0b</li> <li>SystemServer\u8fdb\u7a0b\u5728\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u8fdb\u884c\u4e00\u7cfb\u5217\u51c6\u5907\u5de5\u4f5c\u540e\uff0c\u518d\u901a\u8fc7binder IPC\u5411App\u8fdb\u7a0b\u53d1\u9001scheduleLaunchActivity\u8bf7\u6c42</li> <li>App\u8fdb\u7a0b\u7684binder\u7ebf\u7a0b\uff08ApplicationThread\uff09\u5728\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u901a\u8fc7handler\u5411\u4e3b\u7ebf\u7a0b\u53d1\u9001LAUNCH_ACTIVITY\u6d88\u606f</li> <li>\u4e3b\u7ebf\u7a0b\u5728\u6536\u5230Message\u540e\uff0c\u901a\u8fc7\u53d1\u5c04\u673a\u5236\u521b\u5efa\u76ee\u6807Activity\uff0c\u5e76\u56de\u8c03Activity.onCreate()\u7b49\u65b9\u6cd5</li> </ul> <p></p> <p>\u56fe\u7247\u6765\u6e90\u4e8e\u6b64\u5904</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/android11-activity-start/#_6","title":"\u53c2\u8003","text":"<p>Android10_\u539f\u7406\u673a\u5236\u7cfb\u5217_AMS(ATMS)\u4e4b\u5e94\u7528\u7684\u7b2c\u4e00\u6b21\u542f\u52a8\u7684\u8fc7\u7a0b</p> <p>Android11 Acvitity\u542f\u52a8\u6d41\u7a0b1-ActivityStarter</p> <p>Android 11 Activity\u542f\u52a8\u6d41\u7a0b\u5206\u6790</p> <p>https://blog.csdn.net/to_perfect/article/details/117754718</p> <p>https://blog.csdn.net/caiyu_09/article/details/83505340</p>","tags":["Android","AMS","\u542f\u52a8\u6d41\u7a0b"]},{"location":"android/ams/wm-layout-params/","title":"WindowManager.LayoutParams","text":"<p>Activity \u8bbe\u7f6e WindowManager.LayoutParams \u662f\u5728 ActivityThread.handleResumeActivity() \u91cc\u3002</p> <pre><code>frameworks/base/core/java/android/app/ActivityThread.java\n\n@Override\npublic void handleResumeActivity(ActivityClientRecord r, boolean finalStateRequest,\n        boolean isForward, boolean shouldSendCompatFakeFocus, String reason) {\n    ...\n\n    if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) {\n        r.window = r.activity.getWindow();\n        View decor = r.window.getDecorView();\n        decor.setVisibility(View.INVISIBLE);\n        ViewManager wm = a.getWindowManager();\n        WindowManager.LayoutParams l = r.window.getAttributes();\n        a.mDecor = decor;\n        l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n        l.softInputMode |= forwardBit;\n        if (r.mPreserveWindow) {\n            a.mWindowAdded = true;\n            r.mPreserveWindow = false;\n            // Normally the ViewRoot sets up callbacks with the Activity\n            // in addView-&gt;ViewRootImpl#setView. If we are instead reusing\n            // the decor view we have to notify the view root that the\n            // callbacks may have changed.\n            ViewRootImpl impl = decor.getViewRootImpl();\n            if (impl != null) {\n                impl.notifyChildRebuilt();\n            }\n        }\n        if (a.mVisibleFromClient) {\n            if (!a.mWindowAdded) {\n                a.mWindowAdded = true;\n                wm.addView(decor, l);\n            } else {\n                // The activity will get a callback for this {@link LayoutParams} change\n                // earlier. However, at that time the decor will not be set (this is set\n                // in this method), so no action will be taken. This call ensures the\n                // callback occurs with the decor set.\n                a.onWindowAttributesChanged(l);\n            }\n        }\n\n        // If the window has already been added, but during resume\n        // we started another activity, then don't yet make the\n        // window visible.\n    } else if (!willBeVisible) {\n        if (localLOGV) Slog.v(TAG, \"Launch \" + r + \" mStartedActivity set\");\n        r.hideForNow = true;\n    }\n\n    ...\n}\n</code></pre>","tags":["Android","AMS","LayoutParams"]},{"location":"android/ams/frida-dump-activity-lifecycle/","title":"frida dump activity\u751f\u547d\u5468\u671f","text":"","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#onstart","title":"onStart","text":"","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#system_server","title":"system_server \u8fdb\u7a0b","text":"<pre><code>*** entered com.android.server.wm.ClientLifecycleManager.scheduleTransaction          \n\narg[0]: [object Object]                                                                   \narg[1]: [object Object]\narg[2]: TopResumedActivityChangeItem{onTop=false}                                                       #9df868 [2024-01-10 08:42:03.831] [23066]com.android.server.wm.ClientLifecycleManager.scheduleTransaction([object Object],[object Object],TopResumedActivityChangeItem{onTop=false})\njava.lang.Exception                                                                       \n        at com.android.server.wm.ClientLifecycleManager.scheduleTransaction(Native Method)    \n        at com.android.server.wm.ActivityRecord.scheduleTopResumedActivityChanged(ActivityRecord.java:1517)\n        at com.android.server.wm.ActivityTaskSupervisor.updateTopResumedActivityIfNeeded(ActivityTaskSupervisor.java:2547)\n        at com.android.server.wm.TaskDisplayArea.positionChildTaskAt(TaskDisplayArea.java:432)\n        at com.android.server.wm.TaskDisplayArea.positionChildAt(TaskDisplayArea.java:374)                           \n        at com.android.server.wm.Task.moveToFront(Task.java:4892)                                                    \n        at com.android.server.wm.ActivityRecord.moveFocusableActivityToTop(ActivityRecord.java:3479)           \n        at com.android.server.wm.Task.moveTaskToFront(Task.java:5773)                     \n        at com.android.server.wm.ActivityStarter.setTargetRootTaskIfNeeded(ActivityStarter.java:3410)       \n        at com.android.server.wm.ActivityStarter.recycleTask(ActivityStarter.java:2570)\n        at com.android.server.wm.ActivityStarter.startActivityInner(ActivityStarter.java:2044)\n        at com.android.server.wm.ActivityStarter.startActivityUnchecked(ActivityStarter.java:1773)\n        at com.android.server.wm.ActivityStarter.executeRequest(ActivityStarter.java:1601)                             \n        at com.android.server.wm.ActivityStarter.execute(ActivityStarter.java:960)\n        at com.android.server.wm.ActivityTaskManagerService.startActivityAsUser(ActivityTaskManagerService.java:1351)\n        at com.android.server.wm.ActivityTaskManagerService.startActivityAsUser(ActivityTaskManagerService.java:1275)\n        at com.android.server.wm.ActivityTaskManagerService.startActivity(ActivityTaskManagerService.java:1250)\n        at android.app.IActivityTaskManager$Stub.onTransact(IActivityTaskManager.java:929)\n        at com.android.server.wm.ActivityTaskManagerService.onTransact(ActivityTaskManagerService.java:5634)\n        at android.os.Binder.execTransactInternal(Binder.java:1339)\n        at android.os.Binder.execTransact(Binder.java:1275)\n\n#9df868 [2024-01-10 08:42:03.836] [23066]com.android.server.wm.ClientLifecycleManager.scheduleTransaction ==&gt; undefined\n\n*** exiting com.android.server.wm.ClientLifecycleManager.scheduleTransaction\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#app","title":"app \u8fdb\u7a0b","text":"<pre><code>*** entered android.app.Activity.onStart\n#7ef989 [2024-01-10 08:53:32.727] [23627]android.app.Activity.onStart()\njava.lang.Exception\n        at android.app.Activity.onStart(Native Method)\n        at androidx.fragment.app.FragmentActivity.onStart(SourceFile:2)\n        at android.app.Instrumentation.callActivityOnStart(Instrumentation.java:1588)\n        at android.app.Activity.performStart(Activity.java:8680)\n        at android.app.ActivityThread.handleStartActivity(ActivityThread.java:4034)\n        at android.app.servertransaction.TransactionExecutor.performLifecycleSequence(TransactionExecutor.java:229)\n        at android.app.servertransaction.TransactionExecutor.cycleToPath(TransactionExecutor.java:209)\n        at android.app.servertransaction.TransactionExecutor.executeLifecycleState(TransactionExecutor.java:181)\n        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:99)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2599)\n        at android.os.Handler.dispatchMessage(Handler.java:106)\n        at android.os.Looper.loopOnce(Looper.java:205)\n        at android.os.Looper.loop(Looper.java:294)\n        at android.app.ActivityThread.main(ActivityThread.java:8564)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:977)\n\n#7ef989 [2024-01-10 08:53:32.731] [23627]android.app.Activity.onStart ==&gt; undefined\n\n*** exiting android.app.Activity.onStart\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#onresume","title":"onResume","text":"","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#system_server_1","title":"system_server \u8fdb\u7a0b","text":"<pre><code>*** entered com.android.server.wm.ClientLifecycleManager.scheduleTransaction\n\narg[0]: [object Object]\narg[1]: [object Object]\narg[2]: TopResumedActivityChangeItem{onTop=true}\n#558d98 [2024-01-10 08:42:03.864] [20529]com.android.server.wm.ClientLifecycleManager.scheduleTransaction([object Object],[object Object],TopResumedActivityChangeItem{onTop=true})\njava.lang.Exception\n        at com.android.server.wm.ClientLifecycleManager.scheduleTransaction(Native Method)\n        at com.android.server.wm.ActivityRecord.scheduleTopResumedActivityChanged(ActivityRecord.java:1517)\n        at com.android.server.wm.ActivityTaskSupervisor.scheduleTopResumedActivityStateIfNeeded(ActivityTaskSupervisor.java:2578)\n        at com.android.server.wm.ActivityTaskSupervisor.updateTopResumedActivityIfNeeded(ActivityTaskSupervisor.java:2570)\n        at com.android.server.wm.TaskFragment.setResumedActivity(TaskFragment.java:548)\n        at com.android.server.wm.TaskFragment.onActivityStateChanged(TaskFragment.java:844)\n        at com.android.server.wm.ActivityRecord.setState(ActivityRecord.java:5931)\n        at com.android.server.wm.TaskFragment.resumeTopActivity(TaskFragment.java:1469)\n        at com.android.server.wm.Task.resumeTopActivityInnerLocked(Task.java:5223)\n        at com.android.server.wm.Task.resumeTopActivityUncheckedLocked(Task.java:5155)\n        at com.android.server.wm.RootWindowContainer.resumeFocusedTasksTopActivities(RootWindowContainer.java:2465)\n        at com.android.server.wm.RootWindowContainer.resumeFocusedTasksTopActivities(RootWindowContainer.java:2451)\n        at com.android.server.wm.TaskFragment.completePause(TaskFragment.java:1877)\n        at com.android.server.wm.ActivityRecord.activityPaused(ActivityRecord.java:6601)\n        at com.android.server.wm.ActivityClientController.activityPaused(ActivityClientController.java:222)\n        at android.app.IActivityClientController$Stub.onTransact(IActivityClientController.java:663)\n        at com.android.server.wm.ActivityClientController.onTransact(ActivityClientController.java:159)\n        at android.os.Binder.execTransactInternal(Binder.java:1339)\n        at android.os.Binder.execTransact(Binder.java:1275)\n\n#558d98 [2024-01-10 08:42:03.865] [20529]com.android.server.wm.ClientLifecycleManager.scheduleTransaction ==&gt; undefined\n\n*** exiting com.android.server.wm.ClientLifecycleManager.scheduleTransaction\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#app_1","title":"app \u8fdb\u7a0b","text":"<pre><code>*** entered android.app.Activity.onResume\njava.lang.Exception\n        at android.app.Activity.onResume(Native Method)\n        at androidx.fragment.app.FragmentActivity.onResume(SourceFile:2)\n        at flyme.support.v7.app.AppCompatActivity.onResume(SourceFile:1)\n        at com.meizu.logreport.v2.ui.activity.LogreportV2MainActivity.onResume(SourceFile:1)\n        at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1609)\n        at android.app.Activity.performResume(Activity.java:8795)\n        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:5234)\n        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:5277)\n        at android.app.servertransaction.ResumeActivityItem.execute(ResumeActivityItem.java:57)\n        at android.app.servertransaction.ActivityTransactionItem.execute(ActivityTransactionItem.java:45)\n        at android.app.servertransaction.TransactionExecutor.executeLifecycleState(TransactionExecutor.java:184)\n        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:99)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2599)\n        at android.os.Handler.dispatchMessage(Handler.java:106)\n        at android.os.Looper.loopOnce(Looper.java:205)\n        at android.os.Looper.loop(Looper.java:294)\n        at android.app.ActivityThread.main(ActivityThread.java:8564)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:977)\n\n#659959 [2024-01-10 08:24:42.015] [23627]android.app.Activity.onResume ==&gt; undefined\n\n*** exiting android.app.Activity.onResume\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#onpause","title":"onPause","text":"","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#system_server_2","title":"system_server \u8fdb\u7a0b","text":"<pre><code>*** entered com.android.server.wm.ClientLifecycleManager.scheduleTransaction                                              \n\narg[0]: [object Object]                                                                    \narg[1]: [object Object]                                                           \narg[2]: PauseActivityItem{finished=false,userLeaving=true,configChanges=0,dontReport=false,autoEnteringPip=false}\n#8df595 [2024-01-10 08:42:03.847] [23066]com.android.server.wm.ClientLifecycleManager.scheduleTransaction([object Object],[object Object],PauseActivityItem{finished=false,userLeaving=true,configChanges=0,dontReport=false,autoEnteringPip=false})\njava.lang.Exception                                                                   \n        at com.android.server.wm.ClientLifecycleManager.scheduleTransaction(Native Method)                         \n        at com.android.server.wm.TaskFragment.schedulePauseActivity(TaskFragment.java:1807)                        \n        at com.android.server.wm.TaskFragment.startPausing(TaskFragment.java:1745) \n        at com.android.server.wm.TaskFragment.startPausing(TaskFragment.java:1625)      \n        at com.android.server.wm.TaskDisplayArea.lambda$pauseBackTasks$5(TaskDisplayArea.java:1331)        \n        at com.android.server.wm.TaskDisplayArea$$ExternalSyntheticLambda11.accept(Unknown Source:6)\n        at com.android.server.wm.TaskFragment.forAllLeafTaskFragments(TaskFragment.java:1984)          \n        at com.android.server.wm.TaskDisplayArea.lambda$pauseBackTasks$6(TaskDisplayArea.java:1328)\n        at com.android.server.wm.TaskDisplayArea.$r8$lambda$FlQviUgsmrYxxHmk-YxKCIGWOPY(Unknown Source:0)\n        at com.android.server.wm.TaskDisplayArea$$ExternalSyntheticLambda4.accept(Unknown Source:8)\n        at com.android.server.wm.Task.forAllLeafTasks(Task.java:3256)                                                  \n        at com.android.server.wm.Task.forAllLeafTasks(Task.java:3244)\n        at com.android.server.wm.WindowContainer.forAllLeafTasks(WindowContainer.java:2135)\n        at com.android.server.wm.TaskDisplayArea.pauseBackTasks(TaskDisplayArea.java:1314)\n        at com.android.server.wm.TaskFragment.resumeTopActivity(TaskFragment.java:1281)\n        at com.android.server.wm.Task.resumeTopActivityInnerLocked(Task.java:5223)\n        at com.android.server.wm.Task.resumeTopActivityUncheckedLocked(Task.java:5155)\n        at com.android.server.wm.RootWindowContainer.resumeFocusedTasksTopActivities(RootWindowContainer.java:2465)                                                \n        at com.android.server.wm.ActivityStarter.resumeTargetRootTaskIfNeeded(ActivityStarter.java:3473)\n        at com.android.server.wm.ActivityStarter.recycleTask(ActivityStarter.java:2617)   \n        at com.android.server.wm.ActivityStarter.startActivityInner(ActivityStarter.java:2044)\n        at com.android.server.wm.ActivityStarter.startActivityUnchecked(ActivityStarter.java:1773)\n        at com.android.server.wm.ActivityStarter.executeRequest(ActivityStarter.java:1601)\n        at com.android.server.wm.ActivityStarter.execute(ActivityStarter.java:960)\n        at com.android.server.wm.ActivityTaskManagerService.startActivityAsUser(ActivityTaskManagerService.java:1351)\n        at com.android.server.wm.ActivityTaskManagerService.startActivityAsUser(ActivityTaskManagerService.java:1275)\n        at com.android.server.wm.ActivityTaskManagerService.startActivity(ActivityTaskManagerService.java:1250)\n        at android.app.IActivityTaskManager$Stub.onTransact(IActivityTaskManager.java:929)\n        at com.android.server.wm.ActivityTaskManagerService.onTransact(ActivityTaskManagerService.java:5634)\n        at android.os.Binder.execTransactInternal(Binder.java:1339)\n        at android.os.Binder.execTransact(Binder.java:1275)\n\n#8df595 [2024-01-10 08:42:03.848] [23066]com.android.server.wm.ClientLifecycleManager.scheduleTransaction ==&gt; undefined\n\n*** exiting com.android.server.wm.ClientLifecycleManager.scheduleTransaction\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/ams/frida-dump-activity-lifecycle/#app_2","title":"app \u8fdb\u7a0b","text":"<pre><code>*** entered android.app.Activity.onPause\n#dfe9e6 [2024-01-10 08:36:46.353] [23627]android.app.Activity.onPause()\njava.lang.Exception\n        at android.app.Activity.onPause(Native Method)\n        at androidx.fragment.app.FragmentActivity.onPause(SourceFile:1)\n        at android.app.Activity.performPause(Activity.java:8842)\n        at android.app.Instrumentation.callActivityOnPause(Instrumentation.java:1665)\n        at android.app.ActivityThread.performPauseActivityIfNeeded(ActivityThread.java:5535)\n        at android.app.ActivityThread.performPauseActivity(ActivityThread.java:5496)\n        at android.app.ActivityThread.handlePauseActivity(ActivityThread.java:5447)\n        at android.app.servertransaction.PauseActivityItem.execute(PauseActivityItem.java:48)\n        at android.app.servertransaction.ActivityTransactionItem.execute(ActivityTransactionItem.java:45)\n        at android.app.servertransaction.TransactionExecutor.executeLifecycleState(TransactionExecutor.java:184)\n        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:99)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2599)\n        at android.os.Handler.dispatchMessage(Handler.java:106)\n        at android.os.Looper.loopOnce(Looper.java:205)\n        at android.os.Looper.loop(Looper.java:294)\n        at android.app.ActivityThread.main(ActivityThread.java:8564)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:977)\n\n#dfe9e6 [2024-01-10 08:36:46.354] [23627]android.app.Activity.onPause ==&gt; undefined\n\n*** exiting android.app.Activity.onPause\n</code></pre>","tags":["Android","AMS","frida"]},{"location":"android/broadcast/intro/","title":"Broadcast\u6982\u8ff0","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_1","title":"\u7b80\u4ecb","text":"<p>Broadcast(\u5e7f\u64ad)\u662fAndroid\u56db\u5927\u7ec4\u4ef6\u4e4b\u4e00\uff0c\u5728\u56db\u5927\u7ec4\u4ef6\u7684\u53e6\u5916\u4e24\u4e2a\u7ec4\u4ef6Activity\u548cService\u62e5\u6709\u53d1\u9001\u548c\u63a5\u6536\u5e7f\u64ad\u7684\u80fd\u529b\u3002Android\u662f\u5728Binder\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u7684\uff0c\u5185\u90e8\u57fa\u4e8e\u6d88\u606f\u53d1\u5e03\u548c\u8ba2\u9605\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\uff0c\u5e7f\u64ad\u53d1\u9001\u8005\u8d1f\u8d23\u53d1\u9001\u6d88\u606f\uff0c\u5e7f\u64ad\u63a5\u6536\u8005\u9700\u8981\u5148\u8ba2\u9605\u6d88\u606f\uff0c\u7136\u540e\u624d\u80fd\u6536\u5230\u6d88\u606f\u3002Binder\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e0eBroadcast\u7684\u533a\u522b\u5728\u4e8e\uff1a</p> <ul> <li>Binder</li> </ul> <p>\u5ba2\u6237\u7aef\u9700\u8981\u5148\u77e5\u9053\u670d\u52a1\u7aef\u7684\u5b58\u5728\uff0c\u5e76\u83b7\u53d6\u5230\u5b83\u7684\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff1b</p> <ul> <li>Broadcast</li> </ul> <p>\u5e7f\u64ad\u53d1\u9001\u8005\u5b9e\u73b0\u4e0d\u9700\u8981\u77e5\u9053\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u5b58\u5728\uff0c\u8fd9\u6837\u53ef\u4ee5\u964d\u4f4e\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u8026\u5408\u5ea6\u3002\u63d0\u9ad8\u7cfb\u7edf\u7684\u53ef\u6269\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#broadcast","title":"Broadcast\u5206\u7c7b","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_2","title":"\u6ce8\u518c\u65b9\u5f0f","text":"<ul> <li>\u9759\u6001\u6ce8\u518c</li> </ul> <p>android manifest\u6587\u4ef6\u6ce8\u518c\uff0c\u5e38\u9a7b\u5e7f\u64ad\u3002</p> <ul> <li>\u52a8\u6001\u6ce8\u518c</li> </ul> <p>\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u8c03\u7528Context.registerReceiver\u8bb2BroadcastReceiver\u6ce8\u518c\u5230AMS\u4e2d\uff0c\u6240\u4ee5\u8981\u6c42\u7a0b\u5e8f\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u8fdb\u884c\uff0c\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_3","title":"\u53d1\u9001\u65b9\u5f0f","text":"<p>\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\uff0c\u4e00\u5f8b\u6309\u7167\u4e32\u884c\u5e7f\u64ad\u5904\u7406\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u8bbe\u8ba1\u5230\u62c9\u8d77\u591a\u4e2a\u8fdb\u7a0b\u7b49\uff0c\u4e32\u884c\u5e7f\u64ad\u624d\u6709\u8d85\u65f6\u5904\u7406\u3002</p> <ul> <li>\u6709\u5e8f\u5e7f\u64ad</li> </ul> <p>\u53d1\u9001\u7684\u5e7f\u64ad\u88ab\u63a5\u6536\u8005\u6709\u5e8f\u7684\u63a5\u6536\uff0c\u6839\u636e\u63a5\u6536\u5bf9\u8c61\u7684\u4f18\u5148\u7ea7\uff08Priority\u5c5e\u6027\u7684\u503c\u51b3\u5b9a\uff0c\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1bPriority\u5c5e\u6027\u76f8\u540c\u65f6\uff0c\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u4f18\u5148\u4e8e\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\uff09\u6765\u51b3\u5b9a\u63a5\u53d7\u987a\u5e8f\u3002\u6709\u5e8f\u5e7f\u64ad\u53ef\u4ee5\u5bf9\u5e7f\u64ad\u8fdb\u884c\u62e6\u622a\uff0c\u8fd9\u6837\u4e4b\u540e\u7684\u63a5\u6536\u8005\u5c31\u63a5\u53d7\u4e0d\u5230\u5e7f\u64ad\u4e86\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5e7f\u64ad\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\u3002</p> <ul> <li>\u65e0\u5e8f\u5e7f\u64ad</li> </ul> <p>\u9ed8\u8ba4\u65e0\u5e8f\uff1b\u5e76\u884c\u5206\u53d1\uff1b\u4e0d\u53ef\u4ee5\u88ab\u62e6\u622a\u3001\u7ec8\u6b62\u3001\u4fee\u6539\uff1b\u65e0\u4f18\u5148\u7ea7\u95ee\u9898\uff1b\u4f20\u9012\u6570\u636e\u7528intent.putExtra\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_4","title":"\u5904\u7406\u7c7b\u578b","text":"<p>AMS\u4e2d\u524d\u53f0\u5e7f\u64ad\u548c\u540e\u53f0\u5e7f\u64ad\u5206\u522b\u6709\u4e00\u4e2a\u5e7f\u64ad\u961f\u5217\uff0c\u4e92\u4e0d\u5e72\u6270\u3002</p> <ul> <li>\u524d\u53f0\u5e7f\u64ad</li> </ul> <p>\u53d1\u9001\u65f6\u6dfb\u52a0Intent.FLAG_RECEIVER_FOREGROUND\uff0c\u8d85\u65f6\u65f6\u95f410s</p> <ul> <li>\u540e\u53f0\u5e7f\u64ad</li> </ul> <p>\u9ed8\u8ba4\u540e\u53f0\uff0c\u8d85\u65f6\u65f6\u95f460s</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_5","title":"\u63a5\u6536\u8005","text":"<ul> <li>\u663e\u793a\u5e7f\u64ad</li> </ul> <p>\u6307\u5b9a\u63a5\u6536\u65b9\u7684class\u7c7b\u578b</p> <ul> <li>\u9690\u5f0f\u5e7f\u64ad</li> </ul> <p>\u53ea\u6307\u5b9aaction\uff0curi\u7b49, android 8.0\u5f00\u59cb\u9650\u5236\u4e86\u9690\u5f0f\u5e7f\u64ad\u7684\u63a5\u6536</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_6","title":"\u4e3b\u8981\u6e90\u7801","text":"<pre><code>frameworks/base/services/core/java/com/android/server/am/\n\u251c\u2500\u2500 ActivityManagerService.java\n\u251c\u2500\u2500 BroadcastConstants.java\n\u251c\u2500\u2500 BroadcastDispatcher.java\n\u251c\u2500\u2500 BroadcastFilter.java\n\u251c\u2500\u2500 BroadcastQueue.java\n\u251c\u2500\u2500 BroadcastRecord.java\n\u251c\u2500\u2500 BroadcastStats.java\n\u251c\u2500\u2500 ProcessRecord.java\n\u2514\u2500\u2500 ReceiverList.java\n\n\nframeworks/base/core/java/android/content/\n\u251c\u2500\u2500 BroadcastReceiver.java\n\u2514\u2500\u2500 IntentFilter.java\n\n\nframeworks/base/services/core/java/com/android/server/pm\n\u251c\u2500\u2500 PackageManagerService.java\n\u251c\u2500\u2500 parsing\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 PackageParser2.java\n\u2514\u2500\u2500 pkg\n    \u2514\u2500\u2500 parsing\n        \u251c\u2500\u2500 ParsingPackageImpl.java\n        \u2514\u2500\u2500 ParsingPackageUtils.java\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_7","title":"\u6570\u636e\u7ed3\u6784","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#broadcastrecord","title":"BroadcastRecord","text":"<pre><code>final class BroadcastRecord extends Binder {\n    final Intent intent;    // the original intent that generated us\n    final ComponentName targetComp; // original component name set on the intent\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u8fdb\u7a0b\n    final ProcessRecord callerApp; // process that sent this\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u5305\u540d\n    final String callerPackage; // who sent this\n    final @Nullable String callerFeatureId; // which feature in the package sent this\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u7684pid\n    final int callingPid;   // the pid of who sent this\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u7684uid\n    final int callingUid;   // the uid of who sent this\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u662f\u5426\u662fInstant App\n    final boolean callerInstantApp; // caller is an Instant App?\n    //\u662f\u5426\u6709\u5e8f\u5e7f\u64ad\n    final boolean ordered;  // serialize the send to receivers?\n    //\u662f\u5426\u7c98\u6027\u5e7f\u64ad\n    final boolean sticky;   // originated from existing sticky data?\n    final boolean initialSticky; // initial broadcast from register to sticky?\n    final int userId;       // user id this broadcast was for\n    final String resolvedType; // the resolved data type\n    //\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u8981\u6c42\u7684\u6743\u9650\n    final String[] requiredPermissions; // permissions the caller has required\n    final String[] excludedPermissions; // permissions to exclude\n    final String[] excludedPackages; // packages to exclude\n    final int appOp;        // an app op that is associated with this broadcast\n    final BroadcastOptions options; // BroadcastOptions supplied by caller\n    //\u5e7f\u64ad\u63a5\u6536\u5668\uff0c\u5305\u62ec\u52a8\u6001\u6ce8\u518c(BroadcastFilter)\u548c\u9759\u6001\u6ce8\u518c(ResolveInfo)\uff1b\n    final List receivers;   // contains BroadcastFilter and ResolveInfo\n    final int[] delivery;   // delivery state of each receiver\n    final long[] duration;   // duration a receiver took to process broadcast\n    IIntentReceiver resultTo; // who receives final result if non-null\n    boolean deferred;\n    int splitCount;         // refcount for result callback, when split\n    int splitToken;         // identifier for cross-BroadcastRecord refcount\n    long enqueueTime;       // uptimeMillis when the broadcast was enqueued\n    long enqueueRealTime;   // elapsedRealtime when the broadcast was enqueued\n    //\u5e7f\u64ad\u5165\u961f\u5217\u65f6\u95f4\u70b9\n    long enqueueClockTime;  // the clock time the broadcast was enqueued\n    //\u5e7f\u64ad\u5206\u53d1\u65f6\u95f4\u70b9\n    long dispatchTime;      // when dispatch started on this set of receivers\n    long dispatchRealTime;  // elapsedRealtime when the broadcast was dispatched\n    long dispatchClockTime; // the clock time the dispatch started\n    //\u5f53\u524dreceiver\u5f00\u59cb\u5904\u7406\u65f6\u95f4\u70b9\n    long receiverTime;      // when current receiver started for timeouts.\n    //\u5e7f\u64ad\u5904\u7406\u5b8c\u6210\u65f6\u95f4\u70b9\n    long finishTime;        // when we finished the current receiver.\n    boolean timeoutExempt;  // true if this broadcast is not subject to receiver timeouts\n    int resultCode;         // current result code value.\n    String resultData;      // current result data value.\n    Bundle resultExtras;    // current result extra data values.\n    boolean resultAbort;    // current result abortBroadcast value.\n    int nextReceiver;       // next receiver to be executed.\n    //\u6570\u636e\u7c7b\u578b\u4e3aIBinder\uff0c\u4fdd\u5b58\u7684\u5e7f\u64ad\u6240\u5728\u8fdb\u7a0b\u7684ApplicationThread\u5bf9\u8c61\u7684\u4ee3\u7406\u7aef\n    IBinder receiver;       // who is currently running, null if none.\n    int state;\n    int anrCount;           // has this broadcast record hit any ANRs?\n    int manifestCount;      // number of manifest receivers dispatched.\n    int manifestSkipCount;  // number of manifest receivers skipped.\n    BroadcastQueue queue;   // the outbound queue handling this broadcast\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_8","title":"\u5e7f\u64ad\u5217\u8868","text":"<pre><code>public final class BroadcastQueue {\n\n    //\u4fdd\u5b58\u4e86\u5c06\u8981\u53d1\u9001\u7684 \u65e0\u5e8f\u5e7f\u64ad\n    final ArrayList&lt;BroadcastRecord&gt; mParallelBroadcasts = new ArrayList&lt;&gt;();\n\n    //\u6709\u5e8f Dispatcher\n    final BroadcastDispatcher mDispatcher;\n}\n\npublic class BroadcastDispatcher {\n\n    //\u4fdd\u5b58\u4e86\u5c06\u8981\u53d1\u9001\u7684 \u6709\u5e8f\u5e7f\u64ad\n    private final ArrayList&lt;BroadcastRecord&gt; mOrderedBroadcasts = new ArrayList&lt;&gt;();\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_9","title":"\u9759\u6001\u5e7f\u64ad","text":"<pre><code>public class PackageManagerService implements PackageSender, TestUtilityService {\n\n    //PackageManagerService\u6210\u5458\u53d8\u91cfmComponentResolver\u5c31\u662f\u901a\u8fc7ParsingPackageImpl.receivers\u62ff\u5230\u6240\u6709\u5b89\u88c5\u5e94\u7528\u7684receiver\n    final ComponentResolver mComponentResolver;\n\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_10","title":"\u52a8\u6001\u5e7f\u64ad","text":"<pre><code>public class ActivityManagerService extends IActivityManager.Stub\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {\n\n    //\u4fdd\u5b58\u4e86\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\uff0c\u4ee5\u5e94\u7528\u8fdb\u7a0b\u4e2d\u7684IIntentReceiver\u7684binder\u4ee3\u7406\u7aef\u4e3akey, \u4fdd\u5b58\u4e86\u8be5Receiver\u5bf9\u5e94\u7684\u6240\u6709IntentFilter\uff0c\u662f\u4e00\u4e2a\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u4e00\u4e2aBroadcastReceiver\u5bf9\u5e94\u591a\u4e2aintentFilter\u3002\n    final HashMap&lt;IBinder, ReceiverList&gt; mRegisteredReceivers = new HashMap&lt;&gt;();\n\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_11","title":"\u5e7f\u64ad\u961f\u5217","text":"<pre><code>public class ActivityManagerService extends IActivityManager.Stub\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {\n\n    final BroadcastQueue mFgBroadcastQueue;\n    final BroadcastQueue mBgBroadcastQueue;\n    final BroadcastQueue mBgOffloadBroadcastQueue;\n    final BroadcastQueue mFgOffloadBroadcastQueue;\n\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_12","title":"\u4f7f\u7528","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_13","title":"\u6ce8\u518c","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_14","title":"\u9759\u6001","text":"<pre><code>&lt;receiver\n    android:name=\".TestBroadcastReceiver\"\n    android:exported=\"true\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.BOOT_COMPLETED\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt;\n</code></pre> <pre><code>public class BootCompletedReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n       if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {\n            //\u63a5\u6536\u5230\u5f00\u673a\u5e7f\u64ad\n        }\n    }\n}\n</code></pre> <ul> <li>android:permission     \u5982\u679c\u8bbe\u7f6e\uff0c\u5177\u6709\u76f8\u5e94\u6743\u9650\u7684\u5e7f\u64ad\u53d1\u9001\u65b9\u53d1\u9001\u7684\u5e7f\u64ad\u624d\u80fd\u88ab\u6b64broadcastReceiver\u6240\u63a5\u6536</li> <li>android:priority=\"999\"</li> </ul> <p>Priority\u5c5e\u6027\u7684\u503c\u51b3\u5b9a\uff0c\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1bPriority\u5c5e\u6027\u76f8\u540c\u65f6\uff0c\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u4f18\u5148\u4e8e\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_15","title":"\u52a8\u6001","text":"<pre><code>IntentFilter filter = new IntentFilter();\nfilter.addAction(Intent.ACTION_SCREEN_ON);\nfilter.addAction(Intent.ACTION_SCREEN_OFF);\nScreenBroadcastReceiver receiver = new ScreenBroadcastReceiver();\nmContext.registerReceiver(receiver, filter);\n\nprivate class ScreenBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n        if (Intent.ACTION_SCREEN_ON.equals(action)) {\n            //TODO\n        } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {\n            //TODO\n        }\n    }\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_16","title":"\u53d1\u9001","text":"<pre><code>Intent intent = new Intent();\nintent.setAction(\"action...\");\nmContext.sendBroadcast(intent);\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#faq","title":"FAQ","text":"<ul> <li>\"W BroadcastQueue: Background execution not allowed: receiving\"</li> </ul> <p>\u4e0d\u80fd\u542f\u52a8\u540e\u53f0\u8fdb\u7a0b</p> <ul> <li>\"W BroadcastQueue: Permission Denial: broadcasting\"</li> </ul> <p>\u6ce8\u518c\u8005 \u7533\u8bf7\u6743\u9650</p> <p>\u53d1\u9001\u8005 \u672a\u8bbe\u7f6e\u6743\u9650</p> <ul> <li>\"W BroadcastQueue: Permission Denial: receiving\"</li> </ul> <p>\u6ce8\u518c\u8005 \u672a\u7533\u8bf7\u6743\u9650</p> <p>\u53d1\u9001\u8005 \u8bbe\u7f6e\u6743\u9650</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_17","title":"\u9759\u6001\u5e7f\u64ad\u6ce8\u518c\u6d41\u7a0b","text":"<p>AndroidManifest\u9759\u6001\u6ce8\u518c\u7684\u5b89\u88c5\u8fc7\u7a0b\u662f\u5728PMS\u5904\u7406\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u7701\u7565PMS\u542f\u52a8\u8fc7\u7a0b\u3001\u5904\u7406\u5b89\u88c5\u8bf7\u6c42\u8fc7\u7a0b\u7b49\uff0c\u76f4\u63a5\u4ece\u89e3\u6790\u5305\u7684\u4fe1\u606f\u5f00\u59cb\u5206\u6790\u3002</p> <pre><code>ParsingPackageUtils.java\n\n public ParseResult&lt;ParsingPackage&gt; parsePackage(ParseInput input, File packageFile, int flags,\n        List&lt;File&gt; frameworkSplits) {\n    if (((flags &amp; PARSE_FRAMEWORK_RES_SPLITS) != 0)\n            &amp;&amp; frameworkSplits.size() &gt; 0\n            &amp;&amp; packageFile.getAbsolutePath().endsWith(\"/framework-res.apk\")) {\n        return parseClusterPackage(input, packageFile, frameworkSplits, flags);\n    } else if (packageFile.isDirectory()) {\n        return parseClusterPackage(input, packageFile, /* frameworkSplits= */null, flags);\n    } else {\n        return parseMonolithicPackage(input, packageFile, flags);\n    }\n}\n</code></pre> <p>\u5f53\u524d\u6d41\u7a0b\u662f\u8d70\u5230parseClusterPackage</p> <pre><code>ParsingPackageUtils.java\n\nprivate ParseResult&lt;ParsingPackage&gt; parseClusterPackage(ParseInput input, File packageDir,\n        List&lt;File&gt; frameworkSplits, int flags) {\n\n    ...\n\n    final ParseResult&lt;PackageLite&gt; liteResult =\n            ApkLiteParseUtils.parseClusterPackageLite(input, packageDir, frameworkSplits,\n                    liteParseFlags);\n\n    ...\n\n\n    try {\n        final File baseApk = new File(lite.getBaseApkPath());\n        final ParseResult&lt;ParsingPackage&gt; result = parseBaseApk(input, baseApk,\n                lite.getPath(), assetLoader, flags);\n        ...\n    }\n\n    ...\n}\n</code></pre> <p>\u8c03\u7528ApkLiteParseUtils.parseClusterPackageLite\u5f97\u5230\u5305\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u3002</p> <pre><code>PackageLite.java\n\npublic class PackageLite {\n    //apk\u5305\u540d\n    private final @NonNull String mPackageName;\n    //apk\u76ee\u5f55\n    private final @NonNull String mPath;\n    //apk\u8def\u5f84\n    private final @NonNull String mBaseApkPath;\n\n    ...\n\n    /** Major and minor version number of this package */\n    private final int mVersionCodeMajor;\n    private final int mVersionCode;\n    private final int mTargetSdk;\n\n}\n</code></pre> <p>\u8c03\u7528parseBaseApk\u89e3\u6790BaseApk\u3002</p> <pre><code>ParsingPackageUtils.java\n\nprivate ParseResult&lt;ParsingPackage&gt; parseBaseApk(ParseInput input, File apkFile,\n        String codePath, SplitAssetLoader assetLoader, int flags) {\n    ...\n\n    //\u521b\u5efa\u89e3\u6790\u5668parser\uff0c\u6765\u89e3\u6790ANDROID_MANIFEST_FILENAME = \"AndroidManifest.xml\"\n    try (XmlResourceParser parser = assets.openXmlResourceParser(cookie,\n            ANDROID_MANIFEST_FILENAME)) {\n        final Resources res = new Resources(assets, mDisplayMetrics, null);\n\n        //\u4f20\u5165\u89e3\u6790\u5668parser\uff0c\u89e3\u6790BaseApk\n        ParseResult&lt;ParsingPackage&gt; result = parseBaseApk(input, apkPath, codePath, res,\n                parser, flags);\n        ...\n    }\n    ...\n}\n</code></pre> <p>\u521b\u5efaAndroidManifest.xml\u89e3\u6790\u5668XmlResourceParser\uff0c\u5e76\u8c03\u7528parseBaseApk\u4f20\u5165\u89e3\u6790\u5668parser\uff0c\u89e3\u6790BaseApk\u3002</p> <pre><code>ParsingPackageUtils.java\n\n/**\n * Parse the manifest of a &lt;em&gt;base APK&lt;/em&gt;. When adding new features you need to consider\n * whether they should be supported by split APKs and child packages.\n *\n * @param apkPath The package apk file path\n * @param res     The resources from which to resolve values\n * @param parser  The manifest parser\n * @param flags   Flags how to parse\n * @return Parsed package or null on error.\n */\nprivate ParseResult&lt;ParsingPackage&gt; parseBaseApk(ParseInput input, String apkPath,\n        String codePath, Resources res, XmlResourceParser parser, int flags)\n        throws XmlPullParserException, IOException {\n    ...\n\n    final TypedArray manifestArray = res.obtainAttributes(parser, R.styleable.AndroidManifest);\n    try {\n        ...\n        final ParseResult&lt;ParsingPackage&gt; result =\n                parseBaseApkTags(input, pkg, manifestArray, res, parser, flags);\n        ...\n    }\n    ...\n}\n</code></pre> <p>\u8c03\u7528parseBaseApkTags\u89e3\u6790manifest\u4e2d\u7684\u5404\u7c7bTAG\u3002</p> <pre><code>private ParseResult&lt;ParsingPackage&gt; parseBaseApkTags(ParseInput input, ParsingPackage pkg,\n        TypedArray sa, Resources res, XmlResourceParser parser, int flags)\n        throws XmlPullParserException, IOException {\n    ...\n    while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n            &amp;&amp; (type != XmlPullParser.END_TAG\n            || parser.getDepth() &gt; depth)) {\n        ...\n\n        // &lt;application&gt; has special logic, so it's handled outside the general method\n        if (TAG_APPLICATION.equals(tagName)) {\n            if (foundApp) {\n                ...\n            } else {\n                foundApp = true;\n                result = parseBaseApplication(input, pkg, res, parser, flags);\n            }\n        }\n        ...\n    }\n\n    ...\n\n    return input.success(pkg);\n}\n</code></pre> <p>TAG_APPLICATION = \"application\"\u65f6\uff0c\u5219\u8c03\u7528parseBaseApplication\u8fdb\u884capplication\u7684\u5185\u5bb9\u89e3\u6790\u3002</p> <pre><code>private ParseResult&lt;ParsingPackage&gt; parseBaseApplication(ParseInput input,\n        ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags)\n        throws XmlPullParserException, IOException {\n    ...\n    while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n            &amp;&amp; (type != XmlPullParser.END_TAG\n            || parser.getDepth() &gt; depth)) {\n\n        ...\n\n        boolean isActivity = false;\n        switch (tagName) {\n            case \"activity\":\n                isActivity = true;\n                // fall-through\n            case \"receiver\":\n                ParseResult&lt;ParsedActivity&gt; activityResult =\n                        ParsedActivityUtils.parseActivityOrReceiver(mSeparateProcesses, pkg,\n                                res, parser, flags, sUseRoundIcon, null /*defaultSplitName*/,\n                                input);\n\n                if (activityResult.isSuccess()) {\n                    ParsedActivity activity = activityResult.getResult();\n                    if (isActivity) {\n                        hasActivityOrder |= (activity.getOrder() != 0);\n                        pkg.addActivity(activity);\n                    } else {\n                        hasReceiverOrder |= (activity.getOrder() != 0);\n                        pkg.addReceiver(activity);\n                    }\n                }\n\n                result = activityResult;\n                break;\n            case \"service\":\n                ...\n            case \"provider\":\n                ...\n            case \"activity-alias\":\n                ...\n            case \"apex-system-service\":\n                ...\n        }\n\n        ...\n    }\n\n    ...\n\n    if (hasReceiverOrder) {\n        pkg.sortReceivers();\n    }\n\n    ...\n\n}\n</code></pre> <ul> <li>\u8fd9\u91cc\u53d1\u73b0\u8fdb\u5165activity\u8fd9\u4e2acase\u6ca1\u6709break\uff0c\u8fd9\u610f\u5473\u7740activity\u548creceiver\u7684\u89e3\u6790\u662f\u4e00\u6837\u7684\uff0c\u5b83\u4eec\u6bd4\u8f83\u7c7b\u4f3c\uff1b\u4ece\u8c03\u7528\u51fd\u6570\u540d\u5b57parseActivityOrReceiver\u4e5f\u53ef\u4ee5\u770b\u51fa\u3002</li> <li>ParsedActivityUtils.parseActivityOrReceiver-&gt;ParsedActivityUtils.parseActivityOrAlias\u4e2d\u6bcf\u4e00\u4e2a\"intent-filter\"\u4f1a\u5bf9\u5e94\u4e00\u4e2aParsedIntentInfo\u3002</li> <li>pkg.addReceiver(activity) \u5c06\u8be5ParsedActivity activity(receiver)\u653e\u5165ParsingPackageImpl\u7684receivers\u3002</li> <li>hasReceiverOrder \u6309\u7167android:order\u8fdb\u884c\u6392\u5e8f\uff0corder\u8d8a\u5927\u7684receiver\u653e\u5728receivers\u5217\u8868\u7684\u524d\u9762\u3002</li> </ul> <pre><code>ParsingPackageImpl.java\n\npublic ParsingPackageImpl addReceiver(ParsedActivity parsedReceiver) {\n    this.receivers = CollectionUtils.add(this.receivers, parsedReceiver);\n    addMimeGroupsFromComponent(parsedReceiver);\n    return this;\n}\n</code></pre> <p>\u5728\u540e\u7eed\u7684PMS\u6d41\u7a0b\u91cc\uff08InstallPackageHelper.installPackagesLI() -&gt; InstallPackageHelper.commitPackagesLocked() -&gt; InstallPackageHelper.commitReconciledScanResultLocked() -&gt; InstallPackageHelper.commitPackageSettings() -&gt; ComponentResolver.addAllComponents() -&gt; ComponentResolver.addReceiversLocked() \uff09</p> <p>PackageManagerService\u6210\u5458\u53d8\u91cfmComponentResolver\u5c31\u662f\u901a\u8fc7ParsingPackageImpl.receivers\u62ff\u5230\u6240\u6709\u5b89\u88c5\u5e94\u7528\u7684receiver\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_18","title":"\u603b\u7ed3","text":"<ul> <li>AndroidManifest.xml\u4e2d\u7684receiver\u89e3\u6790\u6210ParsedActivity, \u5b58\u653e\u5728PackageImpl\u7684receivers(PackageImpl\u7236\u7c7b\u662fParsingPackageImpl\u800c\u4e14\u5b9e\u73b0\u4e86AndroidPackage\u63a5\u53e3)\u3002</li> <li>receivers\u6700\u7ec8\u4f1a\u5b58\u653e\u5728mComponentResolver(PMS)\u7684mReceivers\u4e2d\uff0cmReceivers\u5305\u542b\u4e86\u6240\u6709\u5b89\u88c5\u5e94\u7528\u7684receiver\u3002</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_19","title":"\u52a8\u6001\u5e7f\u64ad\u6ce8\u518c\u6d41\u7a0b","text":"<p>\u5728\u524d\u9762\u4f7f\u7528\u4ecb\u7ecd\u5230\u4e86\u52a8\u6001\u6ce8\u518c\u8c03\u7528Context.registerReceiver\u8fdb\u884c\u6ce8\u518c\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimpl","title":"ContextImpl","text":"<p>\u5e73\u65f6\u6211\u4eec\u5728activity\u4e2d\u7ecf\u5e38\u8c03\u7528Context.startActivity()\u3001Context.startService()\u3001\u3001Context.bindService()\u3001Context.registerReceiver()\u3001Context.sendBroadcast()\u7b49\u7b49\uff0c\u4f46\u6211\u4eec\u4f7f\u7528Android Studio\u70b9\u8fdb\u53bb\u4e4b\u540e\u53d1\u73b0Context\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u3002\u6709Android\u7ecf\u9a8c\u7684\u540c\u5b66\u90fd\u77e5\u9053\u5176\u5b9e\u662f\u8c03\u5230\u4e86ContextImpl\u3002\u90a3ContextImpl\u600e\u4e48\u8ddfContext\u5173\u8054\u8d77\u6765\u7684\u5462\uff1f</p> <p>\u542f\u52a8\u5e94\u7528\u65f6\u53d1\u51fa\u7684LaunchActivityItem\u4f1a\u6267\u884cactivity\u751f\u547d\u5468\u671f\u7684\u5185\u5bb9\uff0c\u5728ActivityThread.java\u7684performLaunchActivity\u51fd\u6570\u91cc\u3002</p> <pre><code>ActivityThread.java\n\nprivate Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n    ...\n\n    ContextImpl appContext = createBaseContextForActivity(r);\n    ...\n\n    try {\n        ...\n\n        appContext.setOuterContext(activity);\n        activity.attach(appContext, this, getInstrumentation(), r.token,\n                r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                r.embeddedID, r.lastNonConfigurationInstances, config,\n                r.referrer, r.voiceInteractor, window, r.activityConfigCallback,\n                r.assistToken, r.shareableActivityToken);\n\n        ...\n\n    } \n\n    ...\n\n    return activity;\n}\n\nprivate ContextImpl createBaseContextForActivity(ActivityClientRecord r) {\n    final int displayId = ActivityClient.getInstance().getDisplayId(r.token);\n    ContextImpl appContext = ContextImpl.createActivityContext(\n            this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);\n\n    ...\n\n    return appContext;\n}\n</code></pre> <ul> <li>\u8c03\u7528createBaseContextForActivity\u521b\u5efaContextImpl\u3002</li> </ul> <pre><code>ContextImpl.java\n\nstatic ContextImpl createActivityContext(ActivityThread mainThread,\n        LoadedApk packageInfo, ActivityInfo activityInfo, IBinder activityToken, int displayId,\n        Configuration overrideConfiguration) {\n    ...\n    ContextImpl context = new ContextImpl(null, mainThread, packageInfo, ContextParams.EMPTY,\n            attributionTag, null, activityInfo.splitName, activityToken, null, 0, classLoader,\n            null);\n    ...\n    return context;\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimplregisterreceiver","title":"ContextImpl.registerReceiver","text":"<pre><code>ContextImpl.java\n\n@Override\npublic Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n    return registerReceiver(receiver, filter, null, null);\n}\n\n@Override\npublic Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,\n        int flags) {\n    return registerReceiver(receiver, filter, null, null, flags);\n}\n\n@Override\npublic Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,\n        String broadcastPermission, Handler scheduler) {\n    return registerReceiverInternal(receiver, getUserId(),\n            filter, broadcastPermission, scheduler, getOuterContext(), 0);\n}\n\n@Override\npublic Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,\n        String broadcastPermission, Handler scheduler, int flags) {\n    return registerReceiverInternal(receiver, getUserId(),\n            filter, broadcastPermission, scheduler, getOuterContext(), flags);\n}\n\n@Override\npublic Intent registerReceiverForAllUsers(BroadcastReceiver receiver,\n        IntentFilter filter, String broadcastPermission, Handler scheduler) {\n    return registerReceiverAsUser(receiver, UserHandle.ALL,\n            filter, broadcastPermission, scheduler);\n}\n\n@Override\npublic Intent registerReceiverForAllUsers(BroadcastReceiver receiver,\n        IntentFilter filter, String broadcastPermission, Handler scheduler, int flags) {\n    return registerReceiverAsUser(receiver, UserHandle.ALL,\n            filter, broadcastPermission, scheduler, flags);\n}\n\n@Override\npublic Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user,\n        IntentFilter filter, String broadcastPermission, Handler scheduler) {\n    return registerReceiverInternal(receiver, user.getIdentifier(),\n            filter, broadcastPermission, scheduler, getOuterContext(), 0);\n}\n\n@Override\npublic Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user,\n        IntentFilter filter, String broadcastPermission, Handler scheduler, int flags) {\n    return registerReceiverInternal(receiver, user.getIdentifier(),\n            filter, broadcastPermission, scheduler, getOuterContext(), flags);\n}\n</code></pre> <p>\u5e73\u65f6\u6211\u4eec\u6ce8\u518c\u5e7f\u64ad\u8c03\u7528\u6700\u591a\u7684\u5c31\u662fregisterReceiver(BroadcastReceiver receiver, IntentFilter filter)</p> <ul> <li>\u5c06\u5e7f\u64ad\u6743\u9650broadcastPermission\u8bbe\u7f6e\u6210null</li> <li>scheduler\u8c03\u5ea6\u52a8\u6001\u5e7f\u64ad\u7684\u7ebf\u7a0b\u8bbe\u7f6e\u6210null</li> </ul> <p>\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\u6ce8\u518c\u5e7f\u64ad\u6709\u5f88\u591a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6307\u5b9a\u6743\u9650\u3001\u7528\u6237ID\u3001Handler\u3001flags\u7b49\uff0c\u65e0\u8bba\u4f60\u8c03\u7684\u662f\u54ea\u4e2a\u63a5\u53e3\uff0c\u6700\u7ec8\u90fd\u662f\u8c03\u5230\u4e86registerReceiverInternal\u65b9\u6cd5\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimplregisterreceiverinternal","title":"ContextImpl.registerReceiverInternal","text":"<pre><code>ContextImpl.java\n\nprivate Intent registerReceiverInternal(BroadcastReceiver receiver, int userId,\n        IntentFilter filter, String broadcastPermission,\n        Handler scheduler, Context context, int flags) {\n    IIntentReceiver rd = null;\n    if (receiver != null) {\n        if (mPackageInfo != null &amp;&amp; context != null) {\n            if (scheduler == null) {\n                scheduler = mMainThread.getHandler();\n            }\n            rd = mPackageInfo.getReceiverDispatcher(\n                receiver, context, scheduler,\n                mMainThread.getInstrumentation(), true);\n        } else {\n            if (scheduler == null) {\n                scheduler = mMainThread.getHandler();\n            }\n            rd = new LoadedApk.ReceiverDispatcher(\n                    receiver, context, scheduler, null, true).getIIntentReceiver();\n        }\n    }\n    try {\n        ActivityThread thread = ActivityThread.currentActivityThread();\n        Instrumentation instrumentation = thread.getInstrumentation();\n        if (instrumentation.isInstrumenting()\n                &amp;&amp; ((flags &amp; Context.RECEIVER_NOT_EXPORTED) == 0)) {\n            flags = flags | Context.RECEIVER_EXPORTED;\n        }\n        final Intent intent = ActivityManager.getService().registerReceiverWithFeature(\n                mMainThread.getApplicationThread(), mBasePackageName, getAttributionTag(),\n                AppOpsManager.toReceiverId(receiver), rd, filter, broadcastPermission, userId,\n                flags);\n        if (intent != null) {\n            intent.setExtrasClassLoader(getClassLoader());\n            // TODO: determine at registration time if caller is\n            // protecting themselves with signature permission\n            intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent),\n                    getAttributionSource());\n        }\n        return intent;\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n</code></pre> <p>\u770b\u5230\u8fd9\u91cc\u5c31\u8ff7\u60d1\u4e86\uff0c\u4e3a\u4ec0\u4e48receiver\u4e3a\u7a7a\u7684\u65f6\u5019\u4e0d\u76f4\u63a5\u629b\u5f02\u5e38\uff1f\u96be\u9053\u8fd8\u53ef\u4ee5\u4e3a\u7a7a\uff1f\u5e26\u7740\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0d\u77e5\u9053\u540e\u9762\u5728\u4f55\u5904\u80fd\u627e\u5230\u7b54\u6848\u3002</p> <ul> <li>\u4f20\u5165\u7684\u5e7f\u64ad\u8c03\u5ea6\u5668scheduler\u662fnull\uff0c\u90a3\u5c31\u76f4\u63a5\u4f7f\u7528\u4e3b\u7ebf\u7a0bActivityThread\u7684handler(mH)\u4f5c\u4e3a\u8c03\u5ea6\u5668\uff1b</li> <li>\u4ecemPackageInfo\u4e2d\u53d6\u5f97IIntentReceiver\uff0c\u5e76\u5c06\u8be5receiver\u653e\u5165LoadedApk mPackageInfo\u7684mReceivers\u4e2d</li> <li>\u8c03\u7528\u7684\u662fAMS\u7684registerReceiverWithFeature</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#loadedapkgetreceiverdispatcher","title":"LoadedApk.getReceiverDispatcher()","text":"<pre><code>LoadedApk.java\n\npublic IIntentReceiver getReceiverDispatcher(BroadcastReceiver r,\n        Context context, Handler handler,\n        Instrumentation instrumentation, boolean registered) {\n    synchronized (mReceivers) {\n        LoadedApk.ReceiverDispatcher rd = null;\n        ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt; map = null;\n        if (registered) {\n            map = mReceivers.get(context);\n            if (map != null) {\n                rd = map.get(r);\n            }\n        }\n        if (rd == null) {\n            rd = new ReceiverDispatcher(r, context, handler,\n                    instrumentation, registered);\n            if (registered) {\n                if (map == null) {\n                    map = new ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;();\n                    mReceivers.put(context, map);\n                }\n                map.put(r, rd);\n            }\n        } else {\n            rd.validate(context, handler);\n        }\n        rd.mForgotten = false;\n        return rd.getIIntentReceiver();\n    }\n}\n\nReceiverDispatcher(BroadcastReceiver receiver, Context context,\n        Handler activityThread, Instrumentation instrumentation,\n        boolean registered) {\n    if (activityThread == null) {\n        throw new NullPointerException(\"Handler must not be null\");\n    }\n\n    mIIntentReceiver = new InnerReceiver(this, !registered);\n    mReceiver = receiver;\n    mContext = context;\n    mActivityThread = activityThread;\n    mInstrumentation = instrumentation;\n    mRegistered = registered;\n    mLocation = new IntentReceiverLeaked(null);\n    mLocation.fillInStackTrace();\n}\n\nIIntentReceiver getIIntentReceiver() {\n    return mIIntentReceiver;\n}\n</code></pre> <ul> <li>\u4ecemReceivers\u53d6\u51fa\u5bf9\u4e8e\u8be5context\u7684ReceiverDispatcher(map)</li> <li>\u4ecemap\u53d6\u51fa\u5bf9\u4e8e\u8be5BroadcastReceiver\u7684ReceiverDispatcher</li> <li>\u5982\u679c\u6ca1\u6709BroadcastReceiver\u5bf9\u5e94\u7684ReceiverDispatcher\uff0c\u6839\u636eBroadcastReceiver r\u65b0\u5efa\u4e00\u4e2aReceiverDispatcher\uff0c\u5e76\u5b58\u5230mReceivers\u4e2d\u3002</li> </ul> <p>\u4e00\u4e2aBroadcastReceiver\u5bf9\u5e94\u4e00\u4e2aReceiverDispatcher</p> <p>\u9000\u51fa\u8fdb\u7a0b\u7684\u65f6\u5019\u4f1a\u7528\u5230mReceivers</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#amsregisterreceiverwithfeature","title":"AMS.registerReceiverWithFeature","text":"<pre><code>public Intent registerReceiverWithFeature(IApplicationThread caller, String callerPackage,\n        String callerFeatureId, String receiverId, IIntentReceiver receiver,\n        IntentFilter filter, String permission, int userId, int flags) {\n    // Allow Sandbox process to register only unexported receivers.\n    if ((flags &amp; Context.RECEIVER_NOT_EXPORTED) != 0) {\n        enforceNotIsolatedCaller(\"registerReceiver\");\n    } else if (mSdkSandboxSettings.isBroadcastReceiverRestrictionsEnforced()) {\n        enforceNotIsolatedOrSdkSandboxCaller(\"registerReceiver\");\n    }\n    ArrayList&lt;Intent&gt; stickyIntents = null;\n    ProcessRecord callerApp = null;\n    final boolean visibleToInstantApps\n            = (flags &amp; Context.RECEIVER_VISIBLE_TO_INSTANT_APPS) != 0;\n\n    int callingUid;\n    int callingPid;\n    boolean instantApp;\n    synchronized(this) {\n        if (caller != null) {\n            callerApp = getRecordForAppLOSP(caller);\n            if (callerApp == null) {\n                throw new SecurityException(\n                        \"Unable to find app for caller \" + caller\n                        + \" (pid=\" + Binder.getCallingPid()\n                        + \") when registering receiver \" + receiver);\n            }\n            if (callerApp.info.uid != SYSTEM_UID\n                    &amp;&amp; !callerApp.getPkgList().containsKey(callerPackage)\n                    &amp;&amp; !\"android\".equals(callerPackage)) {\n                throw new SecurityException(\"Given caller package \" + callerPackage\n                        + \" is not running in process \" + callerApp);\n            }\n            callingUid = callerApp.info.uid;\n            callingPid = callerApp.getPid();\n        } else {\n            callerPackage = null;\n            callingUid = Binder.getCallingUid();\n            callingPid = Binder.getCallingPid();\n        }\n\n        instantApp = isInstantApp(callerApp, callerPackage, callingUid);\n        userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true,\n                ALLOW_FULL_ONLY, \"registerReceiver\", callerPackage);\n\n        Iterator&lt;String&gt; actions = filter.actionsIterator();\n        if (actions == null) {\n            ArrayList&lt;String&gt; noAction = new ArrayList&lt;String&gt;(1);\n            noAction.add(null);\n            actions = noAction.iterator();\n        }\n        boolean onlyProtectedBroadcasts = true;\n\n        // Collect stickies of users and check if broadcast is only registered for protected\n        // broadcasts\n        int[] userIds = { UserHandle.USER_ALL, UserHandle.getUserId(callingUid) };\n        while (actions.hasNext()) {\n            String action = actions.next();\n            for (int id : userIds) {\n                ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(id);\n                if (stickies != null) {\n                    ArrayList&lt;Intent&gt; intents = stickies.get(action);\n                    if (intents != null) {\n                        if (stickyIntents == null) {\n                            stickyIntents = new ArrayList&lt;Intent&gt;();\n                        }\n                        stickyIntents.addAll(intents);\n                    }\n                }\n            }\n            if (onlyProtectedBroadcasts) {\n                try {\n                    onlyProtectedBroadcasts &amp;=\n                            AppGlobals.getPackageManager().isProtectedBroadcast(action);\n                } catch (RemoteException e) {\n                    onlyProtectedBroadcasts = false;\n                    Slog.w(TAG, \"Remote exception\", e);\n                }\n            }\n        }\n\n        // If the change is enabled, but neither exported or not exported is set, we need to log\n        // an error so the consumer can know to explicitly set the value for their flag.\n        // If the caller is registering for a sticky broadcast with a null receiver, we won't\n        // require a flag\n        final boolean explicitExportStateDefined =\n                (flags &amp; (Context.RECEIVER_EXPORTED | Context.RECEIVER_NOT_EXPORTED)) != 0;\n        if (((flags &amp; Context.RECEIVER_EXPORTED) != 0) &amp;&amp; (\n                (flags &amp; Context.RECEIVER_NOT_EXPORTED) != 0)) {\n            throw new IllegalArgumentException(\n                    \"Receiver can't specify both RECEIVER_EXPORTED and RECEIVER_NOT_EXPORTED\"\n                            + \"flag\");\n        }\n\n        // Don't enforce the flag check if we're EITHER registering for only protected\n        // broadcasts, or the receiver is null (a sticky broadcast). Sticky broadcasts should\n        // not be used generally, so we will be marking them as exported by default\n        final boolean requireExplicitFlagForDynamicReceivers = CompatChanges.isChangeEnabled(\n                DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED, callingUid);\n        if (!onlyProtectedBroadcasts) {\n            if (receiver == null &amp;&amp; !explicitExportStateDefined) {\n                // sticky broadcast, no flag specified (flag isn't required)\n                flags |= Context.RECEIVER_EXPORTED;\n            } else if (requireExplicitFlagForDynamicReceivers &amp;&amp; !explicitExportStateDefined) {\n                throw new SecurityException(\n                        callerPackage + \": One of RECEIVER_EXPORTED or \"\n                                + \"RECEIVER_NOT_EXPORTED should be specified when a receiver \"\n                                + \"isn't being registered exclusively for system broadcasts\");\n                // Assume default behavior-- flag check is not enforced\n            } else if (!requireExplicitFlagForDynamicReceivers &amp;&amp; (\n                    (flags &amp; Context.RECEIVER_NOT_EXPORTED) == 0)) {\n                // Change is not enabled, assume exported unless otherwise specified.\n                flags |= Context.RECEIVER_EXPORTED;\n            }\n        } else if ((flags &amp; Context.RECEIVER_NOT_EXPORTED) == 0) {\n            flags |= Context.RECEIVER_EXPORTED;\n        }\n    }\n\n    // Dynamic receivers are exported by default for versions prior to T\n    final boolean exported = (flags &amp; Context.RECEIVER_EXPORTED) != 0;\n\n    ArrayList&lt;Intent&gt; allSticky = null;\n    if (stickyIntents != null) {\n        final ContentResolver resolver = mContext.getContentResolver();\n        // Look for any matching sticky broadcasts...\n        for (int i = 0, N = stickyIntents.size(); i &lt; N; i++) {\n            Intent intent = stickyIntents.get(i);\n            // Don't provided intents that aren't available to instant apps.\n            if (instantApp &amp;&amp;\n                    (intent.getFlags() &amp; Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS) == 0) {\n                continue;\n            }\n            // If intent has scheme \"content\", it will need to access\n            // provider that needs to lock mProviderMap in ActivityThread\n            // and also it may need to wait application response, so we\n            // cannot lock ActivityManagerService here.\n            if (filter.match(resolver, intent, true, TAG) &gt;= 0) {\n                if (allSticky == null) {\n                    allSticky = new ArrayList&lt;Intent&gt;();\n                }\n                allSticky.add(intent);\n            }\n        }\n    }\n\n    // The first sticky in the list is returned directly back to the client.\n    Intent sticky = allSticky != null ? allSticky.get(0) : null;\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Register receiver \" + filter + \": \" + sticky);\n    if (receiver == null) {\n        return sticky;\n    }\n\n    // SafetyNet logging for b/177931370. If any process other than system_server tries to\n    // listen to this broadcast action, then log it.\n    if (callingPid != Process.myPid()) {\n        if (filter.hasAction(\"com.android.server.net.action.SNOOZE_WARNING\")\n                || filter.hasAction(\"com.android.server.net.action.SNOOZE_RAPID\")) {\n            EventLog.writeEvent(0x534e4554, \"177931370\", callingUid, \"\");\n        }\n    }\n\n    synchronized (this) {\n        IApplicationThread thread;\n        if (callerApp != null &amp;&amp; ((thread = callerApp.getThread()) == null\n                || thread.asBinder() != caller.asBinder())) {\n            // Original caller already died\n            return null;\n        }\n        ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());\n        if (rl == null) {\n            rl = new ReceiverList(this, callerApp, callingPid, callingUid,\n                    userId, receiver);\n            if (rl.app != null) {\n                final int totalReceiversForApp = rl.app.mReceivers.numberOfReceivers();\n                if (totalReceiversForApp &gt;= MAX_RECEIVERS_ALLOWED_PER_APP) {\n                    throw new IllegalStateException(\"Too many receivers, total of \"\n                            + totalReceiversForApp + \", registered for pid: \"\n                            + rl.pid + \", callerPackage: \" + callerPackage);\n                }\n                rl.app.mReceivers.addReceiver(rl);\n            } else {\n                try {\n                    receiver.asBinder().linkToDeath(rl, 0);\n                } catch (RemoteException e) {\n                    return sticky;\n                }\n                rl.linkedToDeath = true;\n            }\n            mRegisteredReceivers.put(receiver.asBinder(), rl);\n        } else if (rl.uid != callingUid) {\n            throw new IllegalArgumentException(\n                    \"Receiver requested to register for uid \" + callingUid\n                    + \" was previously registered for uid \" + rl.uid\n                    + \" callerPackage is \" + callerPackage);\n        } else if (rl.pid != callingPid) {\n            throw new IllegalArgumentException(\n                    \"Receiver requested to register for pid \" + callingPid\n                    + \" was previously registered for pid \" + rl.pid\n                    + \" callerPackage is \" + callerPackage);\n        } else if (rl.userId != userId) {\n            throw new IllegalArgumentException(\n                    \"Receiver requested to register for user \" + userId\n                    + \" was previously registered for user \" + rl.userId\n                    + \" callerPackage is \" + callerPackage);\n        }\n        BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage, callerFeatureId,\n                receiverId, permission, callingUid, userId, instantApp, visibleToInstantApps,\n                exported);\n        if (rl.containsFilter(filter)) {\n            Slog.w(TAG, \"Receiver with filter \" + filter\n                    + \" already registered for pid \" + rl.pid\n                    + \", callerPackage is \" + callerPackage);\n        } else {\n            rl.add(bf);\n            if (!bf.debugCheck()) {\n                Slog.w(TAG, \"==&gt; For Dynamic broadcast\");\n            }\n            mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), bf);\n        }\n\n        // Enqueue broadcasts for all existing stickies that match\n        // this filter.\n        if (allSticky != null) {\n            ArrayList receivers = new ArrayList();\n            receivers.add(bf);\n\n            final int stickyCount = allSticky.size();\n            for (int i = 0; i &lt; stickyCount; i++) {\n                Intent intent = allSticky.get(i);\n                BroadcastQueue queue = broadcastQueueForIntent(intent);\n                BroadcastRecord r = new BroadcastRecord(queue, intent, null,\n                        null, null, -1, -1, false, null, null, null, null, OP_NONE, null,\n                        receivers, null, 0, null, null, false, true, true, -1, false, null,\n                        false /* only PRE_BOOT_COMPLETED should be exempt, no stickies */);\n                queue.enqueueParallelBroadcastLocked(r);\n                queue.scheduleBroadcastsLocked();\n            }\n        }\n\n        return sticky;\n    }\n}\n</code></pre> <p>\u4e0a\u9762\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u4e0b\u9762\u6211\u4eec\u4ece\u51e0\u4e2a\u65b9\u9762\u6765\u5206\u6790\uff1a</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_20","title":"\u5165\u53c2","text":"<pre><code>public Intent registerReceiverWithFeature(IApplicationThread caller, String callerPackage,\n        String callerFeatureId, String receiverId, IIntentReceiver receiver,\n        IntentFilter filter, String permission, int userId, int flags)\n</code></pre> <ul> <li>IApplicationThread caller = mMainThread.getApplicationThread(); //\u5e94\u7528\u7684ApplicationThread</li> <li>String callerPackage = mBasePackageName; //\u662f\u8c03\u7528\u8005\u7684\u5305\u540d</li> <li>IIntentReceiver receiver = rd; //\u5c31\u662fLoadedApk.ReceiverDispatcher\u7528\u6237\u63a5\u53d7\u5e7f\u64ad\u7684\u5730\u65b9</li> <li>IntentFilter filter = filter; //\u662f\u610f\u56fe\u8fc7\u6ee4\u5668</li> <li>String permission = broadcastPermission; //\u662f\u53d1\u9001\u8fd9\u4e2a\u5e7f\u64ad\u9700\u8981\u7684\u6743\u9650\uff0c\u4e00\u822c\u4e0d\u8bbe\u7f6e\uff0c</li> <li>int userId = userId; //\u7528\u6237ID</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_21","title":"\u5224\u65ad\u6743\u9650","text":"<pre><code>// Allow Sandbox process to register only unexported receivers.\nif ((flags &amp; Context.RECEIVER_NOT_EXPORTED) != 0) {\n    enforceNotIsolatedCaller(\"registerReceiver\");\n} else if (mSdkSandboxSettings.isBroadcastReceiverRestrictionsEnforced()) {\n    enforceNotIsolatedOrSdkSandboxCaller(\"registerReceiver\");\n}\n</code></pre> <p>Isolated\u3001Sandbox \u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6ce8\u518c\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_22","title":"\u521d\u59cb\u5316","text":"<pre><code>int callingUid;\nint callingPid;\nboolean instantApp;\nsynchronized(this) {\n    if (caller != null) {\n        callerApp = getRecordForAppLOSP(caller);\n        if (callerApp == null) {\n            throw new SecurityException(\n                    \"Unable to find app for caller \" + caller\n                    + \" (pid=\" + Binder.getCallingPid()\n                    + \") when registering receiver \" + receiver);\n        }\n        if (callerApp.info.uid != SYSTEM_UID\n                &amp;&amp; !callerApp.getPkgList().containsKey(callerPackage)\n                &amp;&amp; !\"android\".equals(callerPackage)) {\n            throw new SecurityException(\"Given caller package \" + callerPackage\n                    + \" is not running in process \" + callerApp);\n        }\n        callingUid = callerApp.info.uid;\n        callingPid = callerApp.getPid();\n    } else {\n        callerPackage = null;\n        callingUid = Binder.getCallingUid();\n        callingPid = Binder.getCallingPid();\n    }\n\n    instantApp = isInstantApp(callerApp, callerPackage, callingUid);\n    userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true,\n            ALLOW_FULL_ONLY, \"registerReceiver\", callerPackage);\n    ...\n}\n</code></pre> <ul> <li>\u901a\u8fc7getRecordForAppLOSP\u83b7\u53d6callerApp\uff0c\u5c31\u53ef\u4ee5\u6839\u636ecallerApp\u83b7\u53d6\u5230\u8c03\u7528\u8005\u7684uid\u3001pid\u4fe1\u606f</li> <li>\u5224\u65ad\u662f\u4e0d\u662finstant app</li> <li>\u5982\u679c\u662fcallingUid\u3001userId\u540c\u4e00\u4e2a\u7528\u6237\u7ec4\uff0c\u5219\u76f4\u63a5\u8fd4\u56deuserId\u3002</li> </ul> <p>Android Instant App \u8fd9\u662f\u4e00\u79cd\u7528\u6237\u65e0\u9700\u5b89\u88c5\u5373\u53ef\u8fd0\u884c Android \u5e94\u7528\u7684\u5168\u65b0\u65b9\u5f0f\uff1a\u57fa\u672c\u601d\u8def\u662f\u6709\u4e00\u4e2a\u7a7a\u58f3APK+\u4e00\u4e2a\u5e72\u6d3b\u7684APK\uff0c\u7a7a\u58f3APK classloader\u5e72\u6d3b\u7684APK\u3002</p> <p>\u6240\u4ee5\u5e72\u6d3b\u7684APK\u4e0d\u9700\u8981\u4e8b\u5148\u5b89\u88c5\u5e94\u7528\uff0c\u5f00\u53d1\u8005\u5c31\u9700\u8981\u5c06\u7a7a\u58f3APK\u505a\u597d\u4e0b\u8f7d\u4e1a\u52a1\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\u91cd\u65b0\u52a0\u8f7ddex\u5373\u53ef\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#action","title":"\u83b7\u53d6action","text":"<pre><code>//\u904d\u5386IntentFilter\u4e2d\u5305\u542b\u7684\u6240\u6709action\nIterator&lt;String&gt; actions = filter.actionsIterator();\nif (actions == null) {\n    //\u5982\u679c\u6ca1\u6709action\uff0c\u5219\u653e\u5165\u4e00\u4e2anull\u7684noAction\u5230actions\u4e2d\uff0c\u786e\u4fddactions\u4e0d\u4e3anull\n    ArrayList&lt;String&gt; noAction = new ArrayList&lt;String&gt;(1);\n    noAction.add(null);\n    actions = noAction.iterator();\n}\nboolean onlyProtectedBroadcasts = true;\n\n// Collect stickies of users and check if broadcast is only registered for protected\n// broadcasts\nint[] userIds = { UserHandle.USER_ALL, UserHandle.getUserId(callingUid) };\n//\u904d\u5386\u6240\u6709\u7684action\nwhile (actions.hasNext()) {\n    String action = actions.next();\n    for (int id : userIds) {\n        //\u904d\u5386mStickyBroadcasts\u5df2\u7ecf\u53d1\u9001\u4e86\u7684\u7c98\u6027\u5e7f\u64ad\u5217\u8868stickies\n        ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(id);\n        if (stickies != null) {\n            //\u83b7\u53d6\u8fd9\u4e2a\u52a8\u6001\u6ce8\u518c\u63a5\u53d7\u8005action\u7684\u7c98\u6027\u5e7f\u64ad\n            ArrayList&lt;Intent&gt; intents = stickies.get(action);\n            //\u5982\u679c\u7cfb\u7edf\u53d1\u9001\u8fc7\u8fd9\u4e2aaction\u7684\u7c98\u6027\u5e7f\u64ad\n            if (intents != null) {\n                if (stickyIntents == null) {\n                    stickyIntents = new ArrayList&lt;Intent&gt;();\n                }\n                //\u5219\u5c06\u7c98\u6027\u5e7f\u64adintents\u5168\u90e8\u653e\u5165stickyIntents\n                stickyIntents.addAll(intents);\n            }\n        }\n    }\n    if (onlyProtectedBroadcasts) {\n        try {\n            onlyProtectedBroadcasts &amp;=\n                    AppGlobals.getPackageManager().isProtectedBroadcast(action);\n        } catch (RemoteException e) {\n            onlyProtectedBroadcasts = false;\n            Slog.w(TAG, \"Remote exception\", e);\n        }\n    }\n}\n\nArrayList&lt;Intent&gt; allSticky = null;\n//\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u53d1\u9001\u8fc7\u8fd9\u4e2aaction\u7684\u7c98\u6027\u5e7f\u64ad\uff0c\u5219stickyIntents\u4e0d\u4e3anull\uff0c\u5426\u5219\u4e3anull\nif (stickyIntents != null) {\n    final ContentResolver resolver = mContext.getContentResolver();\n    // Look for any matching sticky broadcasts...\n    //\u904d\u5386\u7c98\u6027\u5e7f\u64ad\u7684Intent\uff1astickyIntents\n    for (int i = 0, N = stickyIntents.size(); i &lt; N; i++) {\n        Intent intent = stickyIntents.get(i);\n        // Don't provided intents that aren't available to instant apps.\n        //\u5982\u679c\u662finstantApp\uff0c\u800c\u4e14\u6ca1\u6709\u5355\u72ec\u8bbe\u7f6e\u63a5\u53d7\u7c98\u6027\u5e7f\u64adFLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS\n        //\u5219\u9ed8\u8ba4\u662f\u5904\u7406\u7c98\u6027\u5e7f\u64ad\u7684\n        if (instantApp &amp;&amp;\n                (intent.getFlags() &amp; Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS) == 0) {\n            continue;\n        }\n        // If intent has scheme \"content\", it will need to access\n        // provider that needs to lock mProviderMap in ActivityThread\n        // and also it may need to wait application response, so we\n        // cannot lock ActivityManagerService here.\n        //\u5339\u914d\u4e00\u4e0b\u6ce8\u518c\u5e7f\u64ad\u7684filter\uff0c\u662f\u5426\u548cintent\u4e00\u81f4\uff0c\u5982\u679c\u5927\u4e8e0\u5219\u8868\u793a\u5339\u914d\u6210\u529f\n        if (filter.match(resolver, intent, true, TAG) &gt;= 0) {\n            if (allSticky == null) {\n                allSticky = new ArrayList&lt;Intent&gt;();\n            }\n            //\u5982\u679c\u5339\u914d\u6210\u529f\u5219\u5c06\u8be5\u7c98\u6027\u5e7f\u64adintent\u4fdd\u5b58\u5728allSticky\n            allSticky.add(intent);\n        }\n    }\n}\n</code></pre> <ul> <li>\u904d\u5386IntentFilter\u4e2d\u5305\u542b\u7684\u6240\u6709action</li> <li>\u904d\u5386\u6240\u6709\u7684action\uff0c\u5c06\u7c98\u6027\u5e7f\u64adintents\u5168\u90e8\u653e\u5165stickyIntents</li> <li>\u904d\u5386\u7c98\u6027\u5e7f\u64ad\u7684stickyIntents\uff0c\u5339\u914d\u4e00\u4e0b\u6ce8\u518c\u5e7f\u64ad\u7684filter\uff0c\u662f\u5426\u548cintent\u4e00\u81f4</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#receiver","title":"receiver\u4e3a\u7a7a","text":"<pre><code>// The first sticky in the list is returned directly back to the client.\n//\u53d6\u5f97\u5339\u914d\u6210\u529f\u540e\u7684\u7b2c\u4e00\u4e2a\u7c98\u6027\u5e7f\u64adsticky\nIntent sticky = allSticky != null ? allSticky.get(0) : null;\nif (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Register receiver \" + filter + \": \" + sticky);\n// \u5224\u65adreceiver\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u76f4\u63a5\u8fd4\u56de\u627e\u5230\u7684\u5bf9\u5e94Sticky Intent\u3002\nif (receiver == null) {\n    return sticky;\n}\n\n// SafetyNet logging for b/177931370. If any process other than system_server tries to\n// listen to this broadcast action, then log it.\nif (callingPid != Process.myPid()) {\n    if (filter.hasAction(\"com.android.server.net.action.SNOOZE_WARNING\")\n            || filter.hasAction(\"com.android.server.net.action.SNOOZE_RAPID\")) {\n        EventLog.writeEvent(0x534e4554, \"177931370\", callingUid, \"\");\n    }\n}\n</code></pre> <p>\u5982\u679creceiver\u4e3a\u7a7a\u5219\u76f4\u63a5\u8fd4\u56de\u627e\u5230\u7684\u5bf9\u5e94Sticky Intent\u3002\u60f3\u8d77\u6765\u524d\u9762ContextImpl.registerReceiverInternal\u63d0\u5230receiver\u4e3a\u7a7a\u7684\u95ee\u9898\u4e86\u5427\u3002</p> <p>\u6b63\u5e38\u60c5\u51b5\u4e0breceiver\u662f\u4e0d\u4e3a\u7a7a\u7684\uff0c\u4f46\u662f\u6709\u65f6\u5019\u4e3a\u4e86\u83b7\u53d6\u7c98\u6027\u5e7f\u64ad\u7684\u4e00\u4e9b\u4fe1\u606f\uff08\u6bd4\u5982\u7535\u6c60\u4fe1\u606f\uff09\uff0c\u53ef\u4ee5\u5c06receiver\u8bbe\u4e3a\u7a7a\uff0c\u53ea\u4e3a\u4e86\u4ece\u8fd4\u56de\u7684Sticky Intent\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u4fe1\u606f\u3002</p> <p>\u8fd9\u65f6\u7684\u6ce8\u518c\u5e7f\u64ad\u53ef\u4ee5\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u79cd\u5f62\u5f0f\u53ea\u80fd\u5728\u6ce8\u518c\u7684\u65f6\u5019\u83b7\u5f97\u4e00\u6b21\u4fe1\u606f\uff0c\u800c\u4e0d\u4f1a\u6709\u540e\u7eed\u7684\u7ee7\u7eed\u76d1\u542c\u3002</p> <pre><code>mBatteryBroadcast = mContext.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#receiver_1","title":"\u4fdd\u5b58receiver","text":"<pre><code>synchronized (this) {\n    //\u53d6\u5f97callerApp\u7684IApplicationThread\u5e94\u7528\u7ebf\u7a0b\n    IApplicationThread thread;\n    if (callerApp != null &amp;&amp; ((thread = callerApp.getThread()) == null\n            || thread.asBinder() != caller.asBinder())) {\n        // Original caller already died\n        //\u5982\u679ccallerApp\u6ca1\u6709IApplicationThread(\u6216\u8005caller\u548ccallerApp\u7684IApplicationThread\u4e0d\u4e00\u81f4)\uff0c\n        // \u5219\u4ee3\u8868\u8fdb\u7a0b\u4e4b\u524d\u5df2\u7ecf\u6b7b\u6389\u4e86\n        return null;\n    }\n    ///\u83b7\u53d6\u8fd9\u4e2a\u63a5\u53d7\u8005receiver\uff0c\u662f\u5426\u5df2\u7ecf\u4fdd\u5b58\u5728AMS\u7684mRegisteredReceivers\u52a8\u6001\u6ce8\u518c\u8005\u5217\u8868\u91cc\u9762\n    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());\n    if (rl == null) {//\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u8fc7(\u6ca1\u6709\u5728mRegisteredReceivers\u4e2d)\n        //\u6784\u5efa\u4e00\u4e2aReceiverList\uff1a\u4f20\u5165\u53c2\u6570\u662f: AMS, callerApp, callingPid, callingUid, userId, receiver(\u63a5\u53d7\u8005)\n        rl = new ReceiverList(this, callerApp, callingPid, callingUid,\n                userId, receiver);\n        if (rl.app != null) {//\u5982\u679ccallerApp\u4e0d\u4e3anull\uff0c\u83b7\u53d6\u4e00\u4e0b\u5f53\u524dmReceivers\n            final int totalReceiversForApp = rl.app.mReceivers.numberOfReceivers();\n            if (totalReceiversForApp &gt;= MAX_RECEIVERS_ALLOWED_PER_APP) {//\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a1000\u4e2a\u63a5\u53d7\u8005(\u52a8\u6001)\n                throw new IllegalStateException(\"Too many receivers, total of \"\n                        + totalReceiversForApp + \", registered for pid: \"\n                        + rl.pid + \", callerPackage: \" + callerPackage);\n            }\n            //\u5c06ReceiverList rl\u6dfb\u52a0\u5230mReceivers(ProcessReceiverRecord.java)\u4e2d(\u6709\u70b9\u5faa\u73af\u7684\u611f\u89c9)\n            rl.app.mReceivers.addReceiver(rl);\n        } else {\n            try {\n                receiver.asBinder().linkToDeath(rl, 0);\n            } catch (RemoteException e) {\n                return sticky;\n            }\n            rl.linkedToDeath = true;\n        }\n        //mRegisteredReceivers\u4fdd\u5b58\u4e86\u6240\u6709\u7684\u52a8\u6001\u6ce8\u518c\u7684receiver\n        mRegisteredReceivers.put(receiver.asBinder(), rl);\n    } else if (rl.uid != callingUid) {\n        throw new IllegalArgumentException(\n                \"Receiver requested to register for uid \" + callingUid\n                + \" was previously registered for uid \" + rl.uid\n                + \" callerPackage is \" + callerPackage);\n    } else if (rl.pid != callingPid) {\n        throw new IllegalArgumentException(\n                \"Receiver requested to register for pid \" + callingPid\n                + \" was previously registered for pid \" + rl.pid\n                + \" callerPackage is \" + callerPackage);\n    } else if (rl.userId != userId) {\n        throw new IllegalArgumentException(\n                \"Receiver requested to register for user \" + userId\n                + \" was previously registered for user \" + rl.userId\n                + \" callerPackage is \" + callerPackage);\n    }\n    // ReceiverList rl\u63a5\u6536\u5217\u8868 (ReceiverList extends ArrayList&lt;BroadcastFilter&gt;),\u5b83\u7684\u5143\u7d20\u662fBroadcastFilter bf\n    // BroadcastFilter bf\u5e7f\u64ad\u8fc7\u6ee4\u5668\n    // \u4e0a\u9762\u53ea\u662f\u628a\u5e7f\u64ad\u63a5\u6536\u7740receiver\u7684\u4e00\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728ReceiverList rl\u4e2d\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u628a\u5b83\u548cfilter\u5173\u8054\u8d77\u6765\uff0c\n    // \u8fd9\u91cc\u5c31\u521b\u5efa\u4e00\u4e2aBroadcastFilter(bf)\u6765\u628a\u5e7f\u64ad\u63a5\u6536\u5668\u5217\u8868rl\u548cfilter\u5173\u8054\u8d77\u6765\n    BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage, callerFeatureId,\n            receiverId, permission, callingUid, userId, instantApp, visibleToInstantApps,\n            exported);\n    if (rl.containsFilter(filter)) {//\u5982\u679cReceiverList rl\u5df2\u7ecf\u5305\u542b\u8fd9\u4e2afilter\uff0c\u5219\u4e0d\u518d\u52a0\u5165\n        Slog.w(TAG, \"Receiver with filter \" + filter\n                + \" already registered for pid \" + rl.pid\n                + \", callerPackage is \" + callerPackage);\n    } else {//\u5982\u679cReceiverList rl\u4e4b\u524d\u6ca1\u6dfb\u52a0\u8fc7BroadcastFilter(bf)\uff0c\u5219\u52a0\u5165\u63a5\u6536\u5217\u8868\u4e2d\n        rl.add(bf);\n        if (!bf.debugCheck()) {\n            Slog.w(TAG, \"==&gt; For Dynamic broadcast\");\n        }\n        //\u540c\u65f6\u6dfb\u52a0bf\u5230mReceiverResolver\u4e2d\u53bb\n        //\u8be5\u53d8\u91cf\u7528\u4e8e\u5728broadcastIntentLocked\u5206\u53d1\u5e7f\u64ad\u7684\u65f6\u5019, \u67e5\u8be2\u7b26\u5408\u6761\u4ef6\u7684\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\n        mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), bf);\n    }\n    ...\n}\n</code></pre> <ul> <li>\u5224\u65ad\u5e94\u7528\u662f\u5426\u6b7b\u6389</li> <li>mRegisteredReceivers.put(receiver.asBinder(), rl);\u4fdd\u5b58\u6240\u6709\u7684\u52a8\u6001\u6ce8\u518c\u7684receiver</li> <li>mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), bf);</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_23","title":"\u7c98\u6027\u5e7f\u64ad","text":"<pre><code>// Enqueue broadcasts for all existing stickies that match\n// this filter.\nif (allSticky != null) {//\u5e7f\u64ad\u63a5\u53d7\u8005\u6ce8\u518c\u7684\u5e7f\u64ad\u7684\u662f\u7c98\u6027\u5e7f\u64ad\n    //BroadcastFilter bf\u624d\u662f\u5b9e\u9645\u7684\u63a5\u53d7\u8005\uff0c\u63a5\u53d7\u8005receivers\u53ea\u6709\u4e00\u4e2aBroadcastFilter bf\uff0c\n    //\u4e5f\u5c31\u662f\u5355\u53d1\u7ed9BroadcastFilter bf\n    ArrayList receivers = new ArrayList();\n    receivers.add(bf);\n\n    final int stickyCount = allSticky.size();\n    //\u904d\u5386\u5339\u914d\u6210\u529f\u7684\u7c98\u6027\u5e7f\u64ad\u5217\u8868allSticky\n    for (int i = 0; i &lt; stickyCount; i++) {\n        Intent intent = allSticky.get(i);\n        //\u53d6\u51faintent\u5bf9\u5e94\u7684\u5e7f\u64ad\u961f\u5217\n        BroadcastQueue queue = broadcastQueueForIntent(intent);\n        BroadcastRecord r = new BroadcastRecord(queue, intent, null,\n                null, null, -1, -1, false, null, null, null, null, OP_NONE, null,\n                receivers, null, 0, null, null, false, true, true, -1, false, null,\n                false /* only PRE_BOOT_COMPLETED should be exempt, no stickies */);\n        //\u7c98\u6027\u5e7f\u64ad\u63a5\u53d7\u8005\u6ce8\u518c\u540e, \u5c31\u653e\u5165mParallelBroadcasts\u4e2d\n        queue.enqueueParallelBroadcastLocked(r);\n        //\u8fd9\u91cc\u4f1a\u9a6c\u4e0a\u5904\u7406\u521a\u624d\u7684\u5e73\u884c\u5e7f\u64ad\u961f\u5217,\u4e5f\u5c31\u662f\u8fbe\u5230\u6ce8\u518c\u4e86\u4e4b\u540e\u9a6c\u4e0a\u6267\u884c\u7684\u6548\u679c\n        queue.scheduleBroadcastsLocked();\n    }\n}\n\nreturn sticky;\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_24","title":"\u603b\u7ed3","text":"<ul> <li>\u5e7f\u64ad\u5206\u53d1\u901a\u8fc7LoadedApk.ReceiverDispatcher.getIIntentReceiver\u83b7\u5f97\u7684IIntentReceiver\u5bf9\u8c61\u6765\u5b9e\u73b0\u7684</li> <li>\u52a8\u6001\u5e7f\u64ad\u6ce8\u518c\u5176\u5b9e\u6700\u7ec8\u6784\u5efa\u7684\u662fBroadcastFilter bf\uff0c\u5e76\u653e\u5165mReceiverResolver\u4e2d\u53bb</li> <li>\u7c98\u6027\u5e7f\u64ad\u6ce8\u518c\u7684\u65f6\u5019\u5c31\u4f1a\u6536\u5230\u4e4b\u524d\u5df2\u7ecf\u53d1\u9001\u7684\u7c98\u6027\u5e7f\u64ad</li> <li>\u7c98\u6027\u5e7f\u64ad\u6ce8\u518c\u53ef\u4ee5\u4e0d\u4f20\u5165IIntentReceiver receiver\uff0c\u800c\u83b7\u53d6\u4e00\u6b21\u4fe1\u606f</li> <li>\u5e7f\u64ad\u5904\u7406\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u8bbe\u5b9a\u5e7f\u64ad\u5904\u7406\u7684Handler\uff0c\u9ed8\u8ba4\u5728ActivityThread\u7684\u4e3b\u7ebf\u7a0b(mH)\u4e2d\u6267\u884c\uff0c\u4e3b\u7ebf\u7a0b\u5361\u4f4f\u4f1a\u5bfc\u81f4\u5e7f\u64ad\u5904\u7406\u7684\u5ef6\u8fdf(\u8d85\u65f6\u53d1\u751f\u5e7f\u64adanr)\u3002</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_25","title":"\u601d\u8003","text":"<p>\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u6ca1\u6709\u5728\u8fdb\u7a0b\u63a8\u51fa\u65f6\u89e3\u6ce8\u518c\uff0c\u7ecf\u5e38\u4f1a\u770b\u5230\u5982\u4e0blog\uff1a</p> <pre><code>*** has leaked IntentReceiver *** that was originally registered here. Are you missing a call to unregisterReceiver()\n</code></pre> <p>Android\u662f\u600e\u4e48\u5224\u65ad\u5173\u95ed\u7684\u8fdb\u7a0b\u6ca1\u6709\u89e3\u6ce8\u518c\u7684\uff1f\u6211\u4eec\u4ece\u5728activity\u9000\u51fa\u6d41\u7a0b\u5206\u6790\uff1a</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitymanagerservicehandledestroyactivity","title":"ActivityManagerService.handleDestroyActivity","text":"<pre><code>ActivityManagerService.java\npublic void handleDestroyActivity(ActivityClientRecord r, boolean finishing, int configChanges,\n            boolean getNonConfigInstance, String reason) {\n    ...\n    Context c = r.activity.getBaseContext();\n    if (c instanceof ContextImpl) {\n        ((ContextImpl) c).scheduleFinalCleanup(r.activity.getClass().getName(), \"Activity\");\n    }\n    ...\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimplschedulefinalcleanup","title":"ContextImpl.scheduleFinalCleanup","text":"<pre><code>ContextImpl.java\n@UnsupportedAppUsage\nfinal void scheduleFinalCleanup(String who, String what) {\n    mMainThread.scheduleContextCleanup(this, who, what);\n}\n</code></pre> <p>\u8fd9\u91cc\u7684mMainThread\u5c31\u662fActivityThread</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitythreadschedulecontextcleanup","title":"ActivityThread.scheduleContextCleanup","text":"<pre><code>ActivityThread.java\nfinal void scheduleContextCleanup(ContextImpl context, String who,\n        String what) {\n    ContextCleanupInfo cci = new ContextCleanupInfo();\n    cci.context = context;\n    cci.who = who;\n    cci.what = what;\n    sendMessage(H.CLEAN_UP_CONTEXT, cci);\n}\n\nclass H extends Handler {\n    public void handleMessage(Message msg) {\n        switch (msg.what) {\n            case CLEAN_UP_CONTEXT:\n                ContextCleanupInfo cci = (ContextCleanupInfo)msg.obj;\n                cci.context.performFinalCleanup(cci.who, cci.what);\n                break;\n        }\n    }\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimplperformfinalcleanup","title":"ContextImpl.performFinalCleanup","text":"<pre><code>ContextImpl.java\nfinal void performFinalCleanup(String who, String what) {\n    //Log.i(TAG, \"Cleanup up context: \" + this);\n    mPackageInfo.removeContextRegistrations(getOuterContext(), who, what);\n    if (mContextType == CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI\n            &amp;&amp; mToken instanceof WindowTokenClient) {\n        mMainThread.onSystemUiContextCleanup(this);\n    }\n}\n</code></pre> <p>mPackageInfo\u5c31\u662fLoadedApk\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#loadedapkremovecontextregistrations","title":"LoadedApk.removeContextRegistrations","text":"<pre><code>LoadedApk.java\n\npublic void removeContextRegistrations(Context context,\n        String who, String what) {\n    final boolean reportRegistrationLeaks = StrictMode.vmRegistrationLeaksEnabled();\n    synchronized (mReceivers) {\n        //\u4ecemReceivers\u79fb\u9664\u6389\u5e76\u8fd4\u56deArrayMap&lt;BroadcastReceiver, ReceiverDispatcher&gt;\n        ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt; rmap =\n                mReceivers.remove(context);\n        if (rmap != null) {//rmap\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8868\u793a\u8fdb\u7a0b\u9000\u51fa\u65f6\u6ca1\u6709\u89e3\u6ce8\u518c\n            for (int i = 0; i &lt; rmap.size(); i++) {\n                LoadedApk.ReceiverDispatcher rd = rmap.valueAt(i);\n                IntentReceiverLeaked leak = new IntentReceiverLeaked(\n                        what + \" \" + who + \" has leaked IntentReceiver \"\n                        + rd.getIntentReceiver() + \" that was \" +\n                        \"originally registered here. Are you missing a \" +\n                        \"call to unregisterReceiver()?\");\n                leak.setStackTrace(rd.getLocation().getStackTrace());\n                Slog.e(ActivityThread.TAG, leak.getMessage(), leak);\n                if (reportRegistrationLeaks) {\n                    StrictMode.onIntentReceiverLeaked(leak);\n                }\n                try {\n                    //\u8c03\u7528AMS\u89e3\u6ce8\u518c\n                    ActivityManager.getService().unregisterReceiver(\n                            rd.getIIntentReceiver());\n                } catch (RemoteException e) {\n                    throw e.rethrowFromSystemServer();\n                }\n            }\n        }\n        mUnregisteredReceivers.remove(context);\n    }\n\n    ...\n}\n</code></pre> <ul> <li>mReceivers\u5728\u524d\u9762\u52a8\u6001\u6ce8\u518c\u6d41\u7a0bLoadedApk.getReceiverDispatcher()\u4e2d</li> <li>\u5224\u65ad\u662f\u5426\u89e3\u6ce8\u518c\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4ecemReceivers\u79fb\u9664\u5e76\u8c03\u7528AMS\u89e3\u6ce8\u518c</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitymanagerserviceunregisterreceiver","title":"ActivityManagerService.unregisterReceiver","text":"<pre><code>public void unregisterReceiver(IIntentReceiver receiver) {\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Unregister receiver: \" + receiver);\n\n    final long origId = Binder.clearCallingIdentity();\n    try {\n        boolean doTrim = false;\n\n        synchronized(this) {\n            ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());\n            if (rl != null) {\n                final BroadcastRecord r = rl.curBroadcast;\n                if (r != null &amp;&amp; r == r.queue.getMatchingOrderedReceiver(r)) {\n                    final boolean doNext = r.queue.finishReceiverLocked(\n                            r, r.resultCode, r.resultData, r.resultExtras,\n                            r.resultAbort, false);\n                    if (doNext) {\n                        doTrim = true;\n                        r.queue.processNextBroadcastLocked(/* frommsg */ false,\n                                /* skipOomAdj */ true);\n                    }\n                }\n\n                if (rl.app != null) {\n                    rl.app.mReceivers.removeReceiver(rl);\n                }\n                removeReceiverLocked(rl);\n                if (rl.linkedToDeath) {\n                    rl.linkedToDeath = false;\n                    rl.receiver.asBinder().unlinkToDeath(rl, 0);\n                }\n            }\n\n            // If we actually concluded any broadcasts, we might now be able\n            // to trim the recipients' apps from our working set\n            if (doTrim) {\n                trimApplicationsLocked(false, OomAdjuster.OOM_ADJ_REASON_FINISH_RECEIVER);\n                return;\n            }\n        }\n\n    } finally {\n        Binder.restoreCallingIdentity(origId);\n    }\n}\n\nvoid removeReceiverLocked(ReceiverList rl) {\n    mRegisteredReceivers.remove(rl.receiver.asBinder());\n    for (int i = rl.size() - 1; i &gt;= 0; i--) {\n        mReceiverResolver.removeFilter(rl.get(i));\n    }\n}\n</code></pre> <p>\u524d\u9762\u63d0\u5230\u8fc7AMS\u628a\u6240\u6709\u52a8\u6001\u6ce8\u518c\u7684receiver\u4fdd\u5b58\u5230mRegisteredReceivers\uff0c\u6240\u4ee5\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u79fb\u9664\u6389\u5c31\u53ef\u4ee5\u4e86\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_26","title":"\u53d1\u9001\u5e7f\u64ad\u6d41\u7a0b","text":"<p>\u53d1\u9001\u5e7f\u64ad\u662f\u5728Activity\u6216Service\u4e2d\u8c03\u7528sendBroadcast()\u65b9\u6cd5\uff0c\u800cActivity\u6216Service\u90fd\u95f4\u63a5\u7ee7\u627f\u4e8eContext\u62bd\u8c61\u7c7b\uff0c\u771f\u6b63\u5e72\u6d3b\u662f\u4ea4\u7ed9ContextImpl\u7c7b\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#contextimplsendbroadcast","title":"ContextImpl.sendBroadcast","text":"<pre><code>ContextImpl.java\n\n@Override\npublic void sendBroadcast(Intent intent) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, null, null /*excludedPermissions=*/,\n                null, AppOpsManager.OP_NONE, null, false, false, getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcast(Intent intent, String receiverPermission) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    String[] receiverPermissions = receiverPermission == null ? null\n            : new String[] {receiverPermission};\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null, AppOpsManager.OP_NONE, null, false, false,\n                getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null, AppOpsManager.OP_NONE, null, false, false,\n                getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions,\n        Bundle options) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null /*excludedPackages*/,\n                AppOpsManager.OP_NONE, options, false, false, getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user,\n        String[] receiverPermissions) {\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null, AppOpsManager.OP_NONE, null, false, false,\n                user.getIdentifier());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions,\n        String[] excludedPermissions, String[] excludedPackages) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions, excludedPermissions,\n                excludedPackages, AppOpsManager.OP_NONE, null, false, false, getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcast(Intent intent, String receiverPermission, Bundle options) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    String[] receiverPermissions = receiverPermission == null ? null\n            : new String[] {receiverPermission};\n    String[] excludedPermissions = null;\n    if (options != null) {\n        String[] receiverPermissionsBundle = options.getStringArray(\n                BroadcastOptions.KEY_REQUIRE_ALL_OF_PERMISSIONS);\n        if (receiverPermissionsBundle != null) {\n            receiverPermissions = receiverPermissionsBundle;\n        }\n        excludedPermissions = options.getStringArray(\n                BroadcastOptions.KEY_REQUIRE_NONE_OF_PERMISSIONS);\n    }\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                excludedPermissions, null, AppOpsManager.OP_NONE, options, false, false,\n                getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendBroadcast(Intent intent, String receiverPermission, int appOp) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    String[] receiverPermissions = receiverPermission == null ? null\n            : new String[] {receiverPermission};\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null, appOp, null, false, false, getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendOrderedBroadcast(Intent intent, String receiverPermission) {\n    warnIfCallingFromSystemProcess();\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    String[] receiverPermissions = receiverPermission == null ? null\n            : new String[] {receiverPermission};\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                null, Activity.RESULT_OK, null, null, receiverPermissions,\n                null /*excludedPermissions=*/, null, AppOpsManager.OP_NONE, null, true, false,\n                getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n\n@Override\npublic void sendOrderedBroadcast(Intent intent,\n        String receiverPermission, BroadcastReceiver resultReceiver,\n        Handler scheduler, int initialCode, String initialData,\n        Bundle initialExtras) {\n    sendOrderedBroadcast(intent, receiverPermission, AppOpsManager.OP_NONE,\n            resultReceiver, scheduler, initialCode, initialData, initialExtras, null);\n}\n\n@Override\npublic void sendOrderedBroadcast(Intent intent,\n        String receiverPermission, Bundle options, BroadcastReceiver resultReceiver,\n        Handler scheduler, int initialCode, String initialData,\n        Bundle initialExtras) {\n    sendOrderedBroadcast(intent, receiverPermission, AppOpsManager.OP_NONE,\n            resultReceiver, scheduler, initialCode, initialData, initialExtras, options);\n}\n\n@Override\npublic void sendOrderedBroadcast(Intent intent,\n        String receiverPermission, int appOp, BroadcastReceiver resultReceiver,\n        Handler scheduler, int initialCode, String initialData,\n        Bundle initialExtras) {\n    sendOrderedBroadcast(intent, receiverPermission, appOp,\n            resultReceiver, scheduler, initialCode, initialData, initialExtras, null);\n}\n\nvoid sendOrderedBroadcast(Intent intent,\n        String receiverPermission, int appOp, BroadcastReceiver resultReceiver,\n        Handler scheduler, int initialCode, String initialData,\n        Bundle initialExtras, Bundle options) {\n    warnIfCallingFromSystemProcess();\n    IIntentReceiver rd = null;\n    if (resultReceiver != null) {\n        if (mPackageInfo != null) {\n            if (scheduler == null) {\n                scheduler = mMainThread.getHandler();\n            }\n            rd = mPackageInfo.getReceiverDispatcher(\n                resultReceiver, getOuterContext(), scheduler,\n                mMainThread.getInstrumentation(), false);\n        } else {\n            if (scheduler == null) {\n                scheduler = mMainThread.getHandler();\n            }\n            rd = new LoadedApk.ReceiverDispatcher(\n                    resultReceiver, getOuterContext(), scheduler, null, false).getIIntentReceiver();\n        }\n    }\n    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n    String[] receiverPermissions = receiverPermission == null ? null\n            : new String[] {receiverPermission};\n    try {\n        intent.prepareToLeaveProcess(this);\n        ActivityManager.getService().broadcastIntentWithFeature(\n                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,\n                rd, initialCode, initialData, initialExtras, receiverPermissions,\n                null /*excludedPermissions=*/, null, appOp, options, true, false, getUserId());\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n</code></pre> <p>\u4eceContextImpl.java\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u51fa\u6765\uff0c\u53d1\u9001\u5e7f\u64ad\u7684\u51fd\u6570\u5f88\u591a\uff1a</p> <ul> <li>\u666e\u901a\u7684\u5e7f\u64ad</li> </ul> <p>sendBroadcast()\u6216\u8005sendBroadcastAsUser()\uff0c\u9ed8\u8ba4\u662f\u5f53\u524duserId\uff0c\u5e26\u6709\u201cAsUser\u201d\u7684\u662f\u53d1\u9001\u7ed9\u7279\u5b9a\u7684user\u3002</p> <ul> <li>\u5e26\u6743\u9650\u7684\u5e7f\u64ad</li> </ul> <p>endBroadcastMultiplePermissions()\u6216\u8005sendBroadcastAsUserMultiplePermissions()\u3002</p> <ul> <li>\u6709\u5e8f\u7684\u5e7f\u64ad</li> </ul> <p>sendOrderedBroadcast()\u6216\u8005sendOrderedBroadcastAsUser()\uff0c\u53d1\u9001\u6709\u5e8f\u5e7f\u64ad\u662f\u4e00\u4e2a\u63a5\u6536\u5b8c\u6210\u4e0b\u4e00\u4e2a\u624d\u80fd\u63a5\u6536\uff0c\u63a5\u6536\u8005\u4e00\u4e2a\u4e2a\u6309\u987a\u5e8f\u63a5\u6536\u3002</p> <ul> <li>\u7c98\u6027\u5e7f\u64ad</li> </ul> <p>sendStickyBroadcast()\u6216\u8005sendStickyBroadcastAsUser()\u6216\u8005\uff0c\u7c98\u6027\u5e7f\u64ad\u662f\u6ce8\u518c\u8005\u6ce8\u518c\u4e86\u5c31\u9a6c\u4e0a\u80fd\u6536\u5230\u8be5\u7c7b\u578b(\u4e4b\u524d\u5df2\u7ecf\u53d1\u9001\u7684\u7c98\u6027\u5e7f\u64ad)\u7684\u5e7f\u64ad\uff0c\u63a5\u6536\u8005\u7684\u6ce8\u518c\u4e0d\u9700\u8981\u5728\u53d1\u9001\u8005\u7684\u524d\u9762\u3002</p> <ul> <li>\u7c98\u6027\u6709\u5e8f\u5e7f\u64ad</li> </ul> <p>sendStickyOrderedBroadcast()\u6216\u8005sendStickyOrderedBroadcastAsUser()\u3002</p> <p>\u8fd9\u4e9b\u63a5\u53e3\u6700\u7ec8\u90fd\u662f\u8c03\u7528\u5230\u4e86AMS\u7684broadcastIntentWithFeature()\u51fd\u6570\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#amsbroadcastintentwithfeature","title":"AMS.broadcastIntentWithFeature","text":"<pre><code>@Override\npublic final int broadcastIntentWithFeature(IApplicationThread caller, String callingFeatureId,\n        Intent intent, String resolvedType, IIntentReceiver resultTo,\n        int resultCode, String resultData, Bundle resultExtras,\n        String[] requiredPermissions, String[] excludedPermissions,\n        String[] excludedPackages, int appOp, Bundle bOptions,\n        boolean serialized, boolean sticky, int userId) {\n    enforceNotIsolatedCaller(\"broadcastIntent\");\n    synchronized(this) {\n        intent = verifyBroadcastLocked(intent);\n\n        final ProcessRecord callerApp = getRecordForAppLOSP(caller);\n        final int callingPid = Binder.getCallingPid();\n        final int callingUid = Binder.getCallingUid();\n\n        final long origId = Binder.clearCallingIdentity();\n        try {\n            return broadcastIntentLocked(callerApp,\n                    callerApp != null ? callerApp.info.packageName : null, callingFeatureId,\n                    intent, resolvedType, resultTo, resultCode, resultData, resultExtras,\n                    requiredPermissions, excludedPermissions, excludedPackages, appOp, bOptions,\n                    serialized, sticky, callingPid, callingUid, callingUid, callingPid, userId);\n        } finally {\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n}\n</code></pre> <p>\u901a\u8fc7getRecordForAppLOSP\u83b7\u53d6callerApp\uff0c\u5c31\u53ef\u4ee5\u6839\u636ecallerApp\u83b7\u53d6\u5230\u8c03\u7528\u8005\u7684packageName\u3001uid\u3001pid\u7b49\u4fe1\u606f\uff0c\u63a5\u7740\u8c03\u7528broadcastIntentLocked()\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#amsbroadcastintentlocked","title":"AMS.broadcastIntentLocked","text":"<pre><code> final int broadcastIntentLocked(ProcessRecord callerApp,\n        String callerPackage, String callerFeatureId, Intent intent, String resolvedType,\n        IIntentReceiver resultTo, int resultCode, String resultData,\n        Bundle resultExtras, String[] requiredPermissions, String[] excludedPermissions,\n        String[] excludedPackages, int appOp, Bundle bOptions, boolean ordered,\n        boolean sticky, int callingPid,\n        int callingUid, int realCallingUid, int realCallingPid, int userId) {\n    return broadcastIntentLocked(callerApp, callerPackage, callerFeatureId, intent,\n            resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions,\n            excludedPermissions, excludedPackages, appOp, bOptions, ordered, sticky, callingPid,\n            callingUid, realCallingUid, realCallingPid, userId,\n            false /* allowBackgroundActivityStarts */,\n            null /* tokenNeededForBackgroundActivityStarts */, null /* broadcastAllowList */);\n}\n\n@GuardedBy(\"this\")\nfinal int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage,\n        @Nullable String callerFeatureId, Intent intent, String resolvedType,\n        IIntentReceiver resultTo, int resultCode, String resultData,\n        Bundle resultExtras, String[] requiredPermissions,\n        String[] excludedPermissions, String[] excludedPackages, int appOp, Bundle bOptions,\n        boolean ordered, boolean sticky, int callingPid, int callingUid,\n        int realCallingUid, int realCallingPid, int userId,\n        boolean allowBackgroundActivityStarts,\n        @Nullable IBinder backgroundActivityStartsToken,\n        @Nullable int[] broadcastAllowList) {\n    intent = new Intent(intent);\n\n    final boolean callerInstantApp = isInstantApp(callerApp, callerPackage, callingUid);\n    // Instant Apps cannot use FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS\n    if (callerInstantApp) {\n        intent.setFlags(intent.getFlags() &amp; ~Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS);\n    }\n\n    if (userId == UserHandle.USER_ALL &amp;&amp; broadcastAllowList != null) {\n            Slog.e(TAG, \"broadcastAllowList only applies when sending to individual users. \"\n                    + \"Assuming restrictive whitelist.\");\n            broadcastAllowList = new int[]{};\n    }\n\n    // By default broadcasts do not go to stopped apps.\n    intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);\n\n    // If we have not finished booting, don't allow this to launch new processes.\n    if (!mProcessesReady &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) {\n        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n    }\n\n    if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n            (sticky ? \"Broadcast sticky: \": \"Broadcast: \") + intent\n            + \" ordered=\" + ordered + \" userid=\" + userId);\n    if ((resultTo != null) &amp;&amp; !ordered) {\n        Slog.w(TAG, \"Broadcast \" + intent + \" not ordered but result callback requested!\");\n    }\n\n    userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true,\n            ALLOW_NON_FULL, \"broadcast\", callerPackage);\n\n    // Make sure that the user who is receiving this broadcast or its parent is running.\n    // If not, we will just skip it. Make an exception for shutdown broadcasts, upgrade steps.\n    if (userId != UserHandle.USER_ALL &amp;&amp; !mUserController.isUserOrItsParentRunning(userId)) {\n        if ((callingUid != SYSTEM_UID\n                || (intent.getFlags() &amp; Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0)\n                &amp;&amp; !Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {\n            Slog.w(TAG, \"Skipping broadcast of \" + intent\n                    + \": user \" + userId + \" and its parent (if any) are stopped\");\n            return ActivityManager.BROADCAST_FAILED_USER_STOPPED;\n        }\n    }\n\n    final String action = intent.getAction();\n    BroadcastOptions brOptions = null;\n    if (bOptions != null) {\n        brOptions = new BroadcastOptions(bOptions);\n        if (brOptions.getTemporaryAppAllowlistDuration() &gt; 0) {\n            // See if the caller is allowed to do this.  Note we are checking against\n            // the actual real caller (not whoever provided the operation as say a\n            // PendingIntent), because that who is actually supplied the arguments.\n            if (checkComponentPermission(CHANGE_DEVICE_IDLE_TEMP_WHITELIST,\n                    realCallingPid, realCallingUid, -1, true)\n                    != PackageManager.PERMISSION_GRANTED\n                    &amp;&amp; checkComponentPermission(START_ACTIVITIES_FROM_BACKGROUND,\n                    realCallingPid, realCallingUid, -1, true)\n                    != PackageManager.PERMISSION_GRANTED\n                    &amp;&amp; checkComponentPermission(START_FOREGROUND_SERVICES_FROM_BACKGROUND,\n                    realCallingPid, realCallingUid, -1, true)\n                    != PackageManager.PERMISSION_GRANTED) {\n                String msg = \"Permission Denial: \" + intent.getAction()\n                        + \" broadcast from \" + callerPackage + \" (pid=\" + callingPid\n                        + \", uid=\" + callingUid + \")\"\n                        + \" requires \"\n                        + CHANGE_DEVICE_IDLE_TEMP_WHITELIST + \" or \"\n                        + START_ACTIVITIES_FROM_BACKGROUND + \" or \"\n                        + START_FOREGROUND_SERVICES_FROM_BACKGROUND;\n                Slog.w(TAG, msg);\n                throw new SecurityException(msg);\n            }\n        }\n        if (brOptions.isDontSendToRestrictedApps()\n                &amp;&amp; !isUidActiveLOSP(callingUid)\n                &amp;&amp; isBackgroundRestrictedNoCheck(callingUid, callerPackage)) {\n            Slog.i(TAG, \"Not sending broadcast \" + action + \" - app \" + callerPackage\n                    + \" has background restrictions\");\n            return ActivityManager.START_CANCELED;\n        }\n        if (brOptions.allowsBackgroundActivityStarts()) {\n            // See if the caller is allowed to do this.  Note we are checking against\n            // the actual real caller (not whoever provided the operation as say a\n            // PendingIntent), because that who is actually supplied the arguments.\n            if (checkComponentPermission(\n                    android.Manifest.permission.START_ACTIVITIES_FROM_BACKGROUND,\n                    realCallingPid, realCallingUid, -1, true)\n                    != PackageManager.PERMISSION_GRANTED) {\n                String msg = \"Permission Denial: \" + intent.getAction()\n                        + \" broadcast from \" + callerPackage + \" (pid=\" + callingPid\n                        + \", uid=\" + callingUid + \")\"\n                        + \" requires \"\n                        + android.Manifest.permission.START_ACTIVITIES_FROM_BACKGROUND;\n                Slog.w(TAG, msg);\n                throw new SecurityException(msg);\n            } else {\n                allowBackgroundActivityStarts = true;\n                // We set the token to null since if it wasn't for it we'd allow anyway here\n                backgroundActivityStartsToken = null;\n            }\n        }\n\n        if (brOptions.getIdForResponseEvent() &gt; 0) {\n            enforcePermission(android.Manifest.permission.ACCESS_BROADCAST_RESPONSE_STATS,\n                    callingPid, callingUid, \"recordResponseEventWhileInBackground\");\n        }\n    }\n\n    // Verify that protected broadcasts are only being sent by system code,\n    // and that system code is only sending protected broadcasts.\n    final boolean isProtectedBroadcast;\n    try {\n        isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);\n    } catch (RemoteException e) {\n        Slog.w(TAG, \"Remote exception\", e);\n        return ActivityManager.BROADCAST_SUCCESS;\n    }\n\n    final boolean isCallerSystem;\n    switch (UserHandle.getAppId(callingUid)) {\n        case ROOT_UID:\n        case SYSTEM_UID:\n        case PHONE_UID:\n        case BLUETOOTH_UID:\n        case NFC_UID:\n        case SE_UID:\n        case NETWORK_STACK_UID:\n            isCallerSystem = true;\n            break;\n        default:\n            isCallerSystem = (callerApp != null) &amp;&amp; callerApp.isPersistent();\n            break;\n    }\n\n    // First line security check before anything else: stop non-system apps from\n    // sending protected broadcasts.\n    if (!isCallerSystem) {\n        if (isProtectedBroadcast) {\n            String msg = \"Permission Denial: not allowed to send broadcast \"\n                    + action + \" from pid=\"\n                    + callingPid + \", uid=\" + callingUid;\n            Slog.w(TAG, msg);\n            throw new SecurityException(msg);\n\n        } else if (AppWidgetManager.ACTION_APPWIDGET_CONFIGURE.equals(action)\n                || AppWidgetManager.ACTION_APPWIDGET_UPDATE.equals(action)) {\n            // Special case for compatibility: we don't want apps to send this,\n            // but historically it has not been protected and apps may be using it\n            // to poke their own app widget.  So, instead of making it protected,\n            // just limit it to the caller.\n            if (callerPackage == null) {\n                String msg = \"Permission Denial: not allowed to send broadcast \"\n                        + action + \" from unknown caller.\";\n                Slog.w(TAG, msg);\n                throw new SecurityException(msg);\n            } else if (intent.getComponent() != null) {\n                // They are good enough to send to an explicit component...  verify\n                // it is being sent to the calling app.\n                if (!intent.getComponent().getPackageName().equals(\n                        callerPackage)) {\n                    String msg = \"Permission Denial: not allowed to send broadcast \"\n                            + action + \" to \"\n                            + intent.getComponent().getPackageName() + \" from \"\n                            + callerPackage;\n                    Slog.w(TAG, msg);\n                    throw new SecurityException(msg);\n                }\n            } else {\n                // Limit broadcast to their own package.\n                intent.setPackage(callerPackage);\n            }\n        }\n    }\n\n    boolean timeoutExempt = false;\n\n    if (action != null) {\n        if (getBackgroundLaunchBroadcasts().contains(action)) {\n            if (DEBUG_BACKGROUND_CHECK) {\n                Slog.i(TAG, \"Broadcast action \" + action + \" forcing include-background\");\n            }\n            intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);\n        }\n\n        if (Process.isSdkSandboxUid(realCallingUid)) {\n            SdkSandboxManagerLocal sdkSandboxManagerLocal = LocalManagerRegistry.getManager(\n                    SdkSandboxManagerLocal.class);\n            if (sdkSandboxManagerLocal == null) {\n                throw new IllegalStateException(\"SdkSandboxManagerLocal not found when sending\"\n                        + \" a broadcast from an SDK sandbox uid.\");\n            }\n            sdkSandboxManagerLocal.enforceAllowedToSendBroadcast(intent);\n        }\n\n        switch (action) {\n            case Intent.ACTION_MEDIA_SCANNER_SCAN_FILE:\n                UserManagerInternal umInternal = LocalServices.getService(\n                        UserManagerInternal.class);\n                UserInfo userInfo = umInternal.getUserInfo(userId);\n                if (userInfo != null &amp;&amp; userInfo.isCloneProfile()) {\n                    userId = umInternal.getProfileParentId(userId);\n                }\n                break;\n            case Intent.ACTION_UID_REMOVED:\n            case Intent.ACTION_PACKAGE_REMOVED:\n            case Intent.ACTION_PACKAGE_CHANGED:\n            case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:\n            case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:\n            case Intent.ACTION_PACKAGES_SUSPENDED:\n            case Intent.ACTION_PACKAGES_UNSUSPENDED:\n                // Handle special intents: if this broadcast is from the package\n                // manager about a package being removed, we need to remove all of\n                // its activities from the history stack.\n                if (checkComponentPermission(\n                        android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,\n                        callingPid, callingUid, -1, true)\n                        != PackageManager.PERMISSION_GRANTED) {\n                    String msg = \"Permission Denial: \" + intent.getAction()\n                            + \" broadcast from \" + callerPackage + \" (pid=\" + callingPid\n                            + \", uid=\" + callingUid + \")\"\n                            + \" requires \"\n                            + android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;\n                    Slog.w(TAG, msg);\n                    throw new SecurityException(msg);\n                }\n                switch (action) {\n                    case Intent.ACTION_UID_REMOVED:\n                        final int uid = getUidFromIntent(intent);\n                        if (uid &gt;= 0) {\n                            mBatteryStatsService.removeUid(uid);\n                            if (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) {\n                                mAppOpsService.resetAllModes(UserHandle.getUserId(uid),\n                                        intent.getStringExtra(Intent.EXTRA_PACKAGE_NAME));\n                            } else {\n                                mAppOpsService.uidRemoved(uid);\n                            }\n                        }\n                        break;\n                    case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:\n                        // If resources are unavailable just force stop all those packages\n                        // and flush the attribute cache as well.\n                        String list[] =\n                                intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);\n                        if (list != null &amp;&amp; list.length &gt; 0) {\n                            for (int i = 0; i &lt; list.length; i++) {\n                                forceStopPackageLocked(list[i], -1, false, true, true,\n                                        false, false, userId, \"storage unmount\");\n                            }\n                            mAtmInternal.cleanupRecentTasksForUser(UserHandle.USER_ALL);\n                            sendPackageBroadcastLocked(\n                                    ApplicationThreadConstants.EXTERNAL_STORAGE_UNAVAILABLE,\n                                    list, userId);\n                        }\n                        break;\n                    case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:\n                        mAtmInternal.cleanupRecentTasksForUser(UserHandle.USER_ALL);\n                        break;\n                    case Intent.ACTION_PACKAGE_REMOVED:\n                    case Intent.ACTION_PACKAGE_CHANGED:\n                        Uri data = intent.getData();\n                        String ssp;\n                        if (data != null &amp;&amp; (ssp=data.getSchemeSpecificPart()) != null) {\n                            boolean removed = Intent.ACTION_PACKAGE_REMOVED.equals(action);\n                            final boolean replacing =\n                                    intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);\n                            final boolean killProcess =\n                                    !intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP, false);\n                            final boolean fullUninstall = removed &amp;&amp; !replacing;\n                            if (removed) {\n                                if (killProcess) {\n                                    forceStopPackageLocked(ssp, UserHandle.getAppId(\n                                            intent.getIntExtra(Intent.EXTRA_UID, -1)),\n                                            false, true, true, false, fullUninstall, userId,\n                                            removed ? \"pkg removed\" : \"pkg changed\");\n                                    getPackageManagerInternal()\n                                            .onPackageProcessKilledForUninstall(ssp);\n                                } else {\n                                    // Kill any app zygotes always, since they can't fork new\n                                    // processes with references to the old code\n                                    forceStopAppZygoteLocked(ssp, UserHandle.getAppId(\n                                            intent.getIntExtra(Intent.EXTRA_UID, -1)),\n                                            userId);\n                                }\n                                final int cmd = killProcess\n                                        ? ApplicationThreadConstants.PACKAGE_REMOVED\n                                        : ApplicationThreadConstants.PACKAGE_REMOVED_DONT_KILL;\n                                sendPackageBroadcastLocked(cmd,\n                                        new String[] {ssp}, userId);\n                                if (fullUninstall) {\n                                    mAppOpsService.packageRemoved(\n                                            intent.getIntExtra(Intent.EXTRA_UID, -1), ssp);\n\n                                    // Remove all permissions granted from/to this package\n                                    mUgmInternal.removeUriPermissionsForPackage(ssp, userId,\n                                            true, false);\n\n                                    mAtmInternal.removeRecentTasksByPackageName(ssp, userId);\n\n                                    mServices.forceStopPackageLocked(ssp, userId);\n                                    mAtmInternal.onPackageUninstalled(ssp, userId);\n                                    mBatteryStatsService.notePackageUninstalled(ssp);\n                                }\n                            } else {\n                                if (killProcess) {\n                                    final int extraUid = intent.getIntExtra(Intent.EXTRA_UID,\n                                            -1);\n                                    synchronized (mProcLock) {\n                                        mProcessList.killPackageProcessesLSP(ssp,\n                                                UserHandle.getAppId(extraUid),\n                                                userId, ProcessList.INVALID_ADJ,\n                                                ApplicationExitInfo.REASON_USER_REQUESTED,\n                                                ApplicationExitInfo.SUBREASON_PACKAGE_UPDATE,\n                                                \"change \" + ssp);\n                                    }\n                                }\n                                cleanupDisabledPackageComponentsLocked(ssp, userId,\n                                        intent.getStringArrayExtra(\n                                                Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST));\n                                mServices.schedulePendingServiceStartLocked(ssp, userId);\n                            }\n                        }\n                        break;\n                    case Intent.ACTION_PACKAGES_SUSPENDED:\n                    case Intent.ACTION_PACKAGES_UNSUSPENDED:\n                        final boolean suspended = Intent.ACTION_PACKAGES_SUSPENDED.equals(\n                                intent.getAction());\n                        final String[] packageNames = intent.getStringArrayExtra(\n                                Intent.EXTRA_CHANGED_PACKAGE_LIST);\n                        final int userIdExtra = intent.getIntExtra(\n                                Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);\n\n                        mAtmInternal.onPackagesSuspendedChanged(packageNames, suspended,\n                                userIdExtra);\n                        break;\n                }\n                break;\n            case Intent.ACTION_PACKAGE_REPLACED:\n            {\n                final Uri data = intent.getData();\n                final String ssp;\n                if (data != null &amp;&amp; (ssp = data.getSchemeSpecificPart()) != null) {\n                    ApplicationInfo aInfo = null;\n                    try {\n                        aInfo = AppGlobals.getPackageManager()\n                                .getApplicationInfo(ssp, STOCK_PM_FLAGS, userId);\n                    } catch (RemoteException ignore) {}\n                    if (aInfo == null) {\n                        Slog.w(TAG, \"Dropping ACTION_PACKAGE_REPLACED for non-existent pkg:\"\n                                + \" ssp=\" + ssp + \" data=\" + data);\n                        return ActivityManager.BROADCAST_SUCCESS;\n                    }\n                    updateAssociationForApp(aInfo);\n                    mAtmInternal.onPackageReplaced(aInfo);\n                    mServices.updateServiceApplicationInfoLocked(aInfo);\n                    sendPackageBroadcastLocked(ApplicationThreadConstants.PACKAGE_REPLACED,\n                            new String[] {ssp}, userId);\n                }\n                break;\n            }\n            case Intent.ACTION_PACKAGE_ADDED:\n            {\n                // Special case for adding a package: by default turn on compatibility mode.\n                Uri data = intent.getData();\n                String ssp;\n                if (data != null &amp;&amp; (ssp = data.getSchemeSpecificPart()) != null) {\n                    final boolean replacing =\n                            intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);\n                    mAtmInternal.onPackageAdded(ssp, replacing);\n\n                    try {\n                        ApplicationInfo ai = AppGlobals.getPackageManager().\n                                getApplicationInfo(ssp, STOCK_PM_FLAGS, 0);\n                        mBatteryStatsService.notePackageInstalled(ssp,\n                                ai != null ? ai.longVersionCode : 0);\n                    } catch (RemoteException e) {\n                    }\n                }\n                break;\n            }\n            case Intent.ACTION_PACKAGE_DATA_CLEARED:\n            {\n                Uri data = intent.getData();\n                String ssp;\n                if (data != null &amp;&amp; (ssp = data.getSchemeSpecificPart()) != null) {\n                    mAtmInternal.onPackageDataCleared(ssp, userId);\n                }\n                break;\n            }\n            case Intent.ACTION_TIMEZONE_CHANGED:\n                // If this is the time zone changed action, queue up a message that will reset\n                // the timezone of all currently running processes. This message will get\n                // queued up before the broadcast happens.\n                mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);\n                break;\n            case Intent.ACTION_TIME_CHANGED:\n                // EXTRA_TIME_PREF_24_HOUR_FORMAT is optional so we must distinguish between\n                // the tri-state value it may contain and \"unknown\".\n                // For convenience we re-use the Intent extra values.\n                final int NO_EXTRA_VALUE_FOUND = -1;\n                final int timeFormatPreferenceMsgValue = intent.getIntExtra(\n                        Intent.EXTRA_TIME_PREF_24_HOUR_FORMAT,\n                        NO_EXTRA_VALUE_FOUND /* defaultValue */);\n                // Only send a message if the time preference is available.\n                if (timeFormatPreferenceMsgValue != NO_EXTRA_VALUE_FOUND) {\n                    Message updateTimePreferenceMsg =\n                            mHandler.obtainMessage(UPDATE_TIME_PREFERENCE_MSG,\n                                    timeFormatPreferenceMsgValue, 0);\n                    mHandler.sendMessage(updateTimePreferenceMsg);\n                }\n                mBatteryStatsService.noteCurrentTimeChanged();\n                break;\n            case ConnectivityManager.ACTION_CLEAR_DNS_CACHE:\n                mHandler.sendEmptyMessage(CLEAR_DNS_CACHE_MSG);\n                break;\n            case Proxy.PROXY_CHANGE_ACTION:\n                mHandler.sendMessage(mHandler.obtainMessage(UPDATE_HTTP_PROXY_MSG));\n                break;\n            case android.hardware.Camera.ACTION_NEW_PICTURE:\n            case android.hardware.Camera.ACTION_NEW_VIDEO:\n                // In N we just turned these off; in O we are turing them back on partly,\n                // only for registered receivers.  This will still address the main problem\n                // (a spam of apps waking up when a picture is taken putting significant\n                // memory pressure on the system at a bad point), while still allowing apps\n                // that are already actively running to know about this happening.\n                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n                break;\n            case android.security.KeyChain.ACTION_TRUST_STORE_CHANGED:\n                mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);\n                break;\n            case \"com.android.launcher.action.INSTALL_SHORTCUT\":\n                // As of O, we no longer support this broadcasts, even for pre-O apps.\n                // Apps should now be using ShortcutManager.pinRequestShortcut().\n                Log.w(TAG, \"Broadcast \" + action\n                        + \" no longer supported. It will not be delivered.\");\n                return ActivityManager.BROADCAST_SUCCESS;\n            case Intent.ACTION_PRE_BOOT_COMPLETED:\n                timeoutExempt = true;\n                break;\n            case Intent.ACTION_CLOSE_SYSTEM_DIALOGS:\n                if (!mAtmInternal.checkCanCloseSystemDialogs(callingPid, callingUid,\n                        callerPackage)) {\n                    // Returning success seems to be the pattern here\n                    return ActivityManager.BROADCAST_SUCCESS;\n                }\n                break;\n        }\n\n        if (Intent.ACTION_PACKAGE_ADDED.equals(action) ||\n                Intent.ACTION_PACKAGE_REMOVED.equals(action) ||\n                Intent.ACTION_PACKAGE_REPLACED.equals(action)) {\n            final int uid = getUidFromIntent(intent);\n            if (uid != -1) {\n                final UidRecord uidRec = mProcessList.getUidRecordLOSP(uid);\n                if (uidRec != null) {\n                    uidRec.updateHasInternetPermission();\n                }\n            }\n        }\n    }\n\n    // Add to the sticky list if requested.\n    if (sticky) {\n        if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,\n                callingPid, callingUid)\n                != PackageManager.PERMISSION_GRANTED) {\n            String msg = \"Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=\"\n                    + callingPid + \", uid=\" + callingUid\n                    + \" requires \" + android.Manifest.permission.BROADCAST_STICKY;\n            Slog.w(TAG, msg);\n            throw new SecurityException(msg);\n        }\n        if (requiredPermissions != null &amp;&amp; requiredPermissions.length &gt; 0) {\n            Slog.w(TAG, \"Can't broadcast sticky intent \" + intent\n                    + \" and enforce permissions \" + Arrays.toString(requiredPermissions));\n            return ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;\n        }\n        if (intent.getComponent() != null) {\n            throw new SecurityException(\n                    \"Sticky broadcasts can't target a specific component\");\n        }\n        // We use userId directly here, since the \"all\" target is maintained\n        // as a separate set of sticky broadcasts.\n        if (userId != UserHandle.USER_ALL) {\n            // But first, if this is not a broadcast to all users, then\n            // make sure it doesn't conflict with an existing broadcast to\n            // all users.\n            ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(\n                    UserHandle.USER_ALL);\n            if (stickies != null) {\n                ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());\n                if (list != null) {\n                    int N = list.size();\n                    int i;\n                    for (i=0; i&lt;N; i++) {\n                        if (intent.filterEquals(list.get(i))) {\n                            throw new IllegalArgumentException(\n                                    \"Sticky broadcast \" + intent + \" for user \"\n                                    + userId + \" conflicts with existing global broadcast\");\n                        }\n                    }\n                }\n            }\n        }\n        ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(userId);\n        if (stickies == null) {\n            stickies = new ArrayMap&lt;&gt;();\n            mStickyBroadcasts.put(userId, stickies);\n        }\n        ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());\n        if (list == null) {\n            list = new ArrayList&lt;&gt;();\n            stickies.put(intent.getAction(), list);\n        }\n        final int stickiesCount = list.size();\n        int i;\n        for (i = 0; i &lt; stickiesCount; i++) {\n            if (intent.filterEquals(list.get(i))) {\n                // This sticky already exists, replace it.\n                list.set(i, new Intent(intent));\n                break;\n            }\n        }\n        if (i &gt;= stickiesCount) {\n            list.add(new Intent(intent));\n        }\n    }\n\n    int[] users;\n    if (userId == UserHandle.USER_ALL) {\n        // Caller wants broadcast to go to all started users.\n        users = mUserController.getStartedUserArray();\n    } else {\n        // Caller wants broadcast to go to one specific user.\n        users = new int[] {userId};\n    }\n\n    // Figure out who all will receive this broadcast.\n    List receivers = null;\n    List&lt;BroadcastFilter&gt; registeredReceivers = null;\n    // Need to resolve the intent to interested receivers...\n    if ((intent.getFlags() &amp; Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n        receivers = collectReceiverComponents(\n                intent, resolvedType, callingUid, users, broadcastAllowList);\n    }\n    if (intent.getComponent() == null) {\n        final PackageDataSnapshot snapshot = getPackageManagerInternal().snapshot();\n        if (userId == UserHandle.USER_ALL &amp;&amp; callingUid == SHELL_UID) {\n            // Query one target user at a time, excluding shell-restricted users\n            for (int i = 0; i &lt; users.length; i++) {\n                if (mUserController.hasUserRestriction(\n                        UserManager.DISALLOW_DEBUGGING_FEATURES, users[i])) {\n                    continue;\n                }\n                List&lt;BroadcastFilter&gt; registeredReceiversForUser =\n                        mReceiverResolver.queryIntent(snapshot, intent,\n                                resolvedType, false /*defaultOnly*/, users[i]);\n                if (registeredReceivers == null) {\n                    registeredReceivers = registeredReceiversForUser;\n                } else if (registeredReceiversForUser != null) {\n                    registeredReceivers.addAll(registeredReceiversForUser);\n                }\n            }\n        } else {\n            registeredReceivers = mReceiverResolver.queryIntent(snapshot, intent,\n                    resolvedType, false /*defaultOnly*/, userId);\n        }\n    }\n\n    final boolean replacePending =\n            (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REPLACE_PENDING) != 0;\n\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing broadcast: \" + intent.getAction()\n            + \" replacePending=\" + replacePending);\n    if (registeredReceivers != null &amp;&amp; broadcastAllowList != null) {\n        // if a uid whitelist was provided, remove anything in the application space that wasn't\n        // in it.\n        for (int i = registeredReceivers.size() - 1; i &gt;= 0; i--) {\n            final int owningAppId = UserHandle.getAppId(registeredReceivers.get(i).owningUid);\n            if (owningAppId &gt;= Process.FIRST_APPLICATION_UID\n                    &amp;&amp; Arrays.binarySearch(broadcastAllowList, owningAppId) &lt; 0) {\n                registeredReceivers.remove(i);\n            }\n        }\n    }\n\n    int NR = registeredReceivers != null ? registeredReceivers.size() : 0;\n    if (!ordered &amp;&amp; NR &gt; 0) {\n        // If we are not serializing this broadcast, then send the\n        // registered receivers separately so they don't wait for the\n        // components to be launched.\n        if (isCallerSystem) {\n            checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid,\n                    isProtectedBroadcast, registeredReceivers);\n        }\n        final BroadcastQueue queue = broadcastQueueForIntent(intent);\n        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage,\n                callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,\n                requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,\n                registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered,\n                sticky, false, userId, allowBackgroundActivityStarts,\n                backgroundActivityStartsToken, timeoutExempt);\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing parallel broadcast \" + r);\n        final boolean replaced = replacePending\n                &amp;&amp; (queue.replaceParallelBroadcastLocked(r) != null);\n        // Note: We assume resultTo is null for non-ordered broadcasts.\n        if (!replaced) {\n            queue.enqueueParallelBroadcastLocked(r);\n            queue.scheduleBroadcastsLocked();\n        }\n        registeredReceivers = null;\n        NR = 0;\n    }\n\n    // Merge into one list.\n    int ir = 0;\n    if (receivers != null) {\n        // A special case for PACKAGE_ADDED: do not allow the package\n        // being added to see this broadcast.  This prevents them from\n        // using this as a back door to get run as soon as they are\n        // installed.  Maybe in the future we want to have a special install\n        // broadcast or such for apps, but we'd like to deliberately make\n        // this decision.\n        String skipPackages[] = null;\n        if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())\n                || Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())\n                || Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {\n            Uri data = intent.getData();\n            if (data != null) {\n                String pkgName = data.getSchemeSpecificPart();\n                if (pkgName != null) {\n                    skipPackages = new String[] { pkgName };\n                }\n            }\n        } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) {\n            skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);\n        }\n        if (skipPackages != null &amp;&amp; (skipPackages.length &gt; 0)) {\n            for (String skipPackage : skipPackages) {\n                if (skipPackage != null) {\n                    int NT = receivers.size();\n                    for (int it=0; it&lt;NT; it++) {\n                        ResolveInfo curt = (ResolveInfo)receivers.get(it);\n                        if (curt.activityInfo.packageName.equals(skipPackage)) {\n                            receivers.remove(it);\n                            it--;\n                            NT--;\n                        }\n                    }\n                }\n            }\n        }\n\n        int NT = receivers != null ? receivers.size() : 0;\n        int it = 0;\n        ResolveInfo curt = null;\n        BroadcastFilter curr = null;\n        while (it &lt; NT &amp;&amp; ir &lt; NR) {\n            if (curt == null) {\n                curt = (ResolveInfo)receivers.get(it);\n            }\n            if (curr == null) {\n                curr = registeredReceivers.get(ir);\n            }\n            if (curr.getPriority() &gt;= curt.priority) {\n                // Insert this broadcast record into the final list.\n                receivers.add(it, curr);\n                ir++;\n                curr = null;\n                it++;\n                NT++;\n            } else {\n                // Skip to the next ResolveInfo in the final list.\n                it++;\n                curt = null;\n            }\n        }\n    }\n    while (ir &lt; NR) {\n        if (receivers == null) {\n            receivers = new ArrayList();\n        }\n        receivers.add(registeredReceivers.get(ir));\n        ir++;\n    }\n\n    if (isCallerSystem) {\n        checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid,\n                isProtectedBroadcast, receivers);\n    }\n\n    if ((receivers != null &amp;&amp; receivers.size() &gt; 0)\n            || resultTo != null) {\n        BroadcastQueue queue = broadcastQueueForIntent(intent);\n        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage,\n                callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,\n                requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,\n                receivers, resultTo, resultCode, resultData, resultExtras,\n                ordered, sticky, false, userId, allowBackgroundActivityStarts,\n                backgroundActivityStartsToken, timeoutExempt);\n\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing ordered broadcast \" + r);\n\n        final BroadcastRecord oldRecord =\n                replacePending ? queue.replaceOrderedBroadcastLocked(r) : null;\n        if (oldRecord != null) {\n            // Replaced, fire the result-to receiver.\n            if (oldRecord.resultTo != null) {\n                final BroadcastQueue oldQueue = broadcastQueueForIntent(oldRecord.intent);\n                try {\n                    oldQueue.performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo,\n                            oldRecord.intent,\n                            Activity.RESULT_CANCELED, null, null,\n                            false, false, oldRecord.userId, oldRecord.callingUid, callingUid);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failure [\"\n                            + queue.mQueueName + \"] sending broadcast result of \"\n                            + intent, e);\n\n                }\n            }\n        } else {\n            queue.enqueueOrderedBroadcastLocked(r);\n            queue.scheduleBroadcastsLocked();\n        }\n    } else {\n        // There was nobody interested in the broadcast, but we still want to record\n        // that it happened.\n        if (intent.getComponent() == null &amp;&amp; intent.getPackage() == null\n                &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n            // This was an implicit broadcast... let's record it for posterity.\n            addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);\n        }\n    }\n\n    return ActivityManager.BROADCAST_SUCCESS;\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u4ee3\u7801\u975e\u5e38\u591a\uff0c\u4e0b\u9762\u6211\u4eec\u4ece\u51e0\u4e2a\u65b9\u9762\u6765\u5206\u6790\uff1a</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#instant-app","title":"instant app","text":"<pre><code>final boolean callerInstantApp = isInstantApp(callerApp, callerPackage, callingUid);\n// Instant Apps cannot use FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS\nif (callerInstantApp) {\n    // \u5982\u679ccaller\u662finstant app\uff0c\u5219\u4e0d\u80fd\u4f7f\u7528FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS\n    // \u5373instant app\u4e0d\u80fd\u53d1\u9001\u7ed9instant app\u53ef\u89c1\u7684\u5e7f\u64ad\n    intent.setFlags(intent.getFlags() &amp; ~Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS);\n}\n</code></pre> <p>instant app\u4e0d\u80fd\u53d1\u9001\u7ed9instant app\u53ef\u89c1\u7684\u5e7f\u64ad\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#stop","title":"\u4e0d\u53d1\u9001\u7ed9stop\u5e94\u7528","text":"<pre><code>// By default broadcasts do not go to stopped apps.\n//\u9ed8\u8ba4\u5e7f\u64ad\u662f\u4e0d\u53d1\u9001\u7ed9stop\u7684\u5e94\u7528\u7684\uff0c\u7c7b\u4f3c\u4e8e\u5b89\u88c5\u540e\u8fdb\u7a0b\u4ece\u672a\u542f\u52a8\u8fc7\uff0c\u6216\u8005\u7ed9\u5f3a\u884c\u505c\u6b62\u7684\u5e94\u7528\uff0c\n//\u662f\u65e0\u6cd5\u901a\u8fc7\u63a5\u6536\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u6765\u542f\u52a8\u7684(\u5177\u4f53\u5728IntentResolver.java\u7684buildResolveList\u4f1a\u4f7f\u7528)\nintent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_27","title":"\u5f00\u673a\u672a\u5b8c\u6210","text":"<pre><code>// If we have not finished booting, don't allow this to launch new processes.\n//mProcessesReady\u5728systemReady\u7684\u65f6\u5019\u4f1a\u8bbe\u7f6e\u4e3atrue\n//\u5728\u7cfb\u7edf\u6ca1\u6709\u542f\u52a8\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u800c\u4e14\u5e7f\u64ad\u53d1\u9001\u6ca1\u6709\u5e26FLAG_RECEIVER_BOOT_UPGRADE\u7684flag\nif (!mProcessesReady &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) {\n    //\u5219\u9ed8\u8ba4\u53ea\u80fd\u53d1\u9001\u5230\u52a8\u6001\u6ce8\u518c\u7684\u63a5\u6536\u8005\u4e2d\uff0c\u9759\u6001\u6ce8\u518c\u7684\u5168\u90e8\u65e0\u6cd5\u63a5\u6536\n    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n}\n</code></pre> <p>\u5982\u679c\u5f00\u673a\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u4e14\u6ca1\u6709\u5e26\u5347\u7ea7\u72b6\u6001\u53ef\u63a5\u53d7\u7684flag\uff08FLAG_RECEIVER_BOOT_UPGRADE\uff09\uff0c\u5219\u9ed8\u8ba4\u53ea\u80fd\u53d1\u9001\u5230\u52a8\u6001\u6ce8\u518c\u7684\u63a5\u6536\u8005\u4e2d\uff0c\u9759\u6001\u6ce8\u518c\u7684\u5168\u90e8\u65e0\u6cd5\u63a5\u6536\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#user","title":"user\u6821\u9a8c","text":"<pre><code>// \u83b7\u53d6\u5f53\u524d\u53d1\u9001\u5e7f\u64ad\u5e94\u7528\u6240\u5728\u7528\u6237\u7684userId\nuserId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true,\n        ALLOW_NON_FULL, \"broadcast\", callerPackage);\n\n// Make sure that the user who is receiving this broadcast or its parent is running.\n// If not, we will just skip it. Make an exception for shutdown broadcasts, upgrade steps.\n//\u5982\u679cuserId\u4e0d\u662f\u53d1\u9001\u5230\u6240\u6709\u7528\u6237USER_ALL(-1)\uff0c\u800c\u4e14\u5f53\u524duserId\u548c\u5b83\u7684\u7236\u4eb2userId\u90fd\u6ca1\u6709\u5728\u8fd0\u884c\nif (userId != UserHandle.USER_ALL &amp;&amp; !mUserController.isUserOrItsParentRunning(userId)) {\n    //\u5982\u679c\u8c03\u7528\u8005\u4e0d\u662f\u7cfb\u7edf\u6216\u8005\u6ca1\u6709\u8bbe\u7f6eFLAG_RECEIVER_BOOT_UPGRADE\uff0c\u800c\u4e14\u4e0d\u662f\u5173\u673a\u5e7f\u64ad\uff0c\n    //\u5219\u8df3\u8fc7\u672c\u6b21\u5e7f\u64ad\u53d1\u9001\uff0c\u4e0d\u5141\u8bb8stop\u7684userId\u53d1\u9001\u5e7f\u64ad\uff0c\u539f\u56e0\u662fuser\u5df2\u7ecfstop\u4e86\n    if ((callingUid != SYSTEM_UID\n            || (intent.getFlags() &amp; Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0)\n            &amp;&amp; !Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {\n        Slog.w(TAG, \"Skipping broadcast of \" + intent\n                + \": user \" + userId + \" and its parent (if any) are stopped\");\n        return ActivityManager.BROADCAST_FAILED_USER_STOPPED;\n    }\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_28","title":"\u68c0\u67e5\u6743\u9650","text":"<pre><code>//\u83b7\u53d6action\nfinal String action = intent.getAction();\nBroadcastOptions brOptions = null;\n//\u662f\u5426\u6709\u4f20\u5165BroadcastOptions\u7684Bundle\uff0c\u5f00\u673a\u5e7f\u64ad\u6709\u4f20\u5165bOptions\uff0c\u4eae\u5c4f\u5e55\u5e7f\u64ad\u6ca1\u6709bOptions\nif (bOptions != null) {\n    //\u5c06Bundle\u8f6c\u6362\u6210BroadcastOptions brOptions\n    brOptions = new BroadcastOptions(bOptions);\n    if (brOptions.getTemporaryAppAllowlistDuration() &gt; 0) {\n        // See if the caller is allowed to do this.  Note we are checking against\n        // the actual real caller (not whoever provided the operation as say a\n        // PendingIntent), because that who is actually supplied the arguments.\n\n        // \u68c0\u67e5\u4e00\u4e0brealCallingPid/realCallingUid\u662f\u5426\u62e5\u6709CHANGE_DEVICE_IDLE_TEMP_WHITELIST(\u4fee\u6539\u4e34\u65f6\u767d\u540d\u5355)\u3001\n        // START_ACTIVITIES_FROM_BACKGROUND(\u540e\u53f0\u542f\u52a8activity)\u3001\n        // START_FOREGROUND_SERVICES_FROM_BACKGROUND(\u540e\u53f0\u542f\u52a8\u524d\u53f0\u670d\u52a1)\u7684\u6743\u9650\uff0c\n        // \u5982\u679c\u4e00\u4e2a\u90fd\u6ca1\u6709\uff0c\u5219\u4e0d\u5141\u8bb8\u53d1\u9001\u8be5\u5e7f\u64ad\uff0c\u5e76\u629b\u51fa\u5b89\u5168\u5f02\u5e38\n        // (\u5728\u90e8\u5206\u60c5\u51b5\u4e0bcallingPid/callingUid\u8c03\u7528\u8be5\u53d1\u9001\u5e7f\u64ad\u7684\u8c03\u7528\u8005\uff0c\u4e8erealCallingPid/realCallingUid\u771f\u5b9e\u8c03\u7528\u8005\u4e0d\u662f\u4e00\u6837\u7684)\n        if (checkComponentPermission(CHANGE_DEVICE_IDLE_TEMP_WHITELIST,\n                realCallingPid, realCallingUid, -1, true)\n                != PackageManager.PERMISSION_GRANTED\n                &amp;&amp; checkComponentPermission(START_ACTIVITIES_FROM_BACKGROUND,\n                realCallingPid, realCallingUid, -1, true)\n                != PackageManager.PERMISSION_GRANTED\n                &amp;&amp; checkComponentPermission(START_FOREGROUND_SERVICES_FROM_BACKGROUND,\n                realCallingPid, realCallingUid, -1, true)\n                != PackageManager.PERMISSION_GRANTED) {\n            String msg = \"Permission Denial: \" + intent.getAction()\n                    + \" broadcast from \" + callerPackage + \" (pid=\" + callingPid\n                    + \", uid=\" + callingUid + \")\"\n                    + \" requires \"\n                    + CHANGE_DEVICE_IDLE_TEMP_WHITELIST + \" or \"\n                    + START_ACTIVITIES_FROM_BACKGROUND + \" or \"\n                    + START_FOREGROUND_SERVICES_FROM_BACKGROUND;\n            Slog.w(TAG, msg);\n            throw new SecurityException(msg);\n        }\n    }\n    //\u5982\u679c\u5e26\u6709mDontSendToRestrictedApps\u4e0d\u53d1\u9001\u7ed9\u53d7\u9650\u5236\u7684app\n    // callingUid\u4e0d\u5728mActiveUids\u4e2d\uff0c\u800c\u4e14callingUid/callerPackage\u540e\u53f0\u9650\u5236\u64cd\u4f5c\n    // \u5219\u7531\u4e8e\u201cbackground restrictions\u201d\u4e0d\u5141\u8bb8\u53d1\u9001\u5e7f\u64ad\n    if (brOptions.isDontSendToRestrictedApps()\n            &amp;&amp; !isUidActiveLOSP(callingUid)\n            &amp;&amp; isBackgroundRestrictedNoCheck(callingUid, callerPackage)) {\n        Slog.i(TAG, \"Not sending broadcast \" + action + \" - app \" + callerPackage\n                + \" has background restrictions\");\n        return ActivityManager.START_CANCELED;\n    }\n    //\u662f\u5426\u5141\u8bb8mAllowBackgroundActivityStarts\u540e\u53f0\u542f\u52a8activity\n    if (brOptions.allowsBackgroundActivityStarts()) {\n        // See if the caller is allowed to do this.  Note we are checking against\n        // the actual real caller (not whoever provided the operation as say a\n        // PendingIntent), because that who is actually supplied the arguments.\n        //\u5982\u679c\u6ca1\u6709START_ACTIVITIES_FROM_BACKGROUND\u5219\u629b\u51fa\u6743\u9650\u5f02\u5e38\n        if (checkComponentPermission(\n                android.Manifest.permission.START_ACTIVITIES_FROM_BACKGROUND,\n                realCallingPid, realCallingUid, -1, true)\n                != PackageManager.PERMISSION_GRANTED) {\n            String msg = \"Permission Denial: \" + intent.getAction()\n                    + \" broadcast from \" + callerPackage + \" (pid=\" + callingPid\n                    + \", uid=\" + callingUid + \")\"\n                    + \" requires \"\n                    + android.Manifest.permission.START_ACTIVITIES_FROM_BACKGROUND;\n            Slog.w(TAG, msg);\n            throw new SecurityException(msg);\n        } else {//\u5c06allowBackgroundActivityStarts\u8bbe\u7f6e\u6210true\uff0c\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity\n            allowBackgroundActivityStarts = true;\n            // We set the token to null since if it wasn't for it we'd allow anyway here\n            backgroundActivityStartsToken = null;\n        }\n    }\n\n    if (brOptions.getIdForResponseEvent() &gt; 0) {\n        enforcePermission(android.Manifest.permission.ACCESS_BROADCAST_RESPONSE_STATS,\n                callingPid, callingUid, \"recordResponseEventWhileInBackground\");\n    }\n}\n</code></pre> <p>bOptions\u662fBundle\uff0cbrOptions\u662f\u901a\u8fc7bOptions\u8f6c\u6362\u7684\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u53d1\u5e7f\u64ad\u90fd\u4e0d\u5e26Bundle\u7684\u3002</p> <ul> <li>\u68c0\u67e5caller\u662f\u5426\u6709\u6539\u53d8deviceidle\u540d\u5355\u7684\u6743\u9650\uff0c\u5982\u679c\u6ca1\u6709\u540e\u53f0\u542f\u52a8activity\u3001\u540e\u53f0\u542f\u52a8\u524d\u53f0\u670d\u52a1\uff0c\u5219\u4e0d\u5141\u8bb8\u53d1\u9001\u8be5\u5e7f\u64ad\uff0c\u5e76\u629b\u51fa\u5b89\u5168\u5f02\u5e38\u3002</li> <li>\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u53d1\u9001\u7ed9\u53d7\u9650\u5236\u7684app</li> <li>\u901a\u8fc7BroadcastOptions\u7684mAllowBackgroundActivityStarts\u6210\u5458\u7f16\u8bd1\u68c0\u67e5\u662f\u5426\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_29","title":"\u4fdd\u62a4\u5e7f\u64ad","text":"<pre><code>// Verify that protected broadcasts are only being sent by system code,\n// and that system code is only sending protected broadcasts.\nfinal boolean isProtectedBroadcast;\ntry {\n    //http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/core/res/AndroidManifest.xml\n    //\u5e26\u6709\u201cprotected-broadcast\u201d\u7684\u5e7f\u64ad\n    isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);\n} catch (RemoteException e) {\n    Slog.w(TAG, \"Remote exception\", e);\n    return ActivityManager.BROADCAST_SUCCESS;\n}\n\nfinal boolean isCallerSystem;\nswitch (UserHandle.getAppId(callingUid)) {\n    case ROOT_UID:\n    case SYSTEM_UID:\n    case PHONE_UID:\n    case BLUETOOTH_UID:\n    case NFC_UID:\n    case SE_UID:\n    case NETWORK_STACK_UID:\n        isCallerSystem = true;\n        break;\n    default:\n        isCallerSystem = (callerApp != null) &amp;&amp; callerApp.isPersistent();\n        break;\n}\n\n// First line security check before anything else: stop non-system apps from\n// sending protected broadcasts.\nif (!isCallerSystem) {\n    if (isProtectedBroadcast) {//\u4e0d\u662f\u7cfb\u7edf\u4e0d\u80fd\u53d1\u9001\u4fdd\u62a4\u5e7f\u64ad\n        String msg = \"Permission Denial: not allowed to send broadcast \"\n                + action + \" from pid=\"\n                + callingPid + \", uid=\" + callingUid;\n        Slog.w(TAG, msg);\n        throw new SecurityException(msg);\n\n    } else if (AppWidgetManager.ACTION_APPWIDGET_CONFIGURE.equals(action)\n            || AppWidgetManager.ACTION_APPWIDGET_UPDATE.equals(action)) {\n        //\u5982\u679c\u662fwidget\u914d\u7f6e(ACTION_APPWIDGET_CONFIGURE)\u548c\u66f4\u65b0(ACTION_APPWIDGET_UPDATE)\n        //\u5219\u8c03\u7528callerPackage\u4e0d\u80fd\u662f\u7a7a\n        // Special case for compatibility: we don't want apps to send this,\n        // but historically it has not been protected and apps may be using it\n        // to poke their own app widget.  So, instead of making it protected,\n        // just limit it to the caller.\n        if (callerPackage == null) {\n            String msg = \"Permission Denial: not allowed to send broadcast \"\n                    + action + \" from unknown caller.\";\n            Slog.w(TAG, msg);\n            throw new SecurityException(msg);\n        } else if (intent.getComponent() != null) {\n            // They are good enough to send to an explicit component...  verify\n            // it is being sent to the calling app.\n            if (!intent.getComponent().getPackageName().equals(\n                    callerPackage)) {//\u8fd9\u79cd\u60c5\u51b5\u53ea\u80fd\u81ea\u5df1\u53d1\u9001\u7ed9\u81ea\u5df1\uff0c\u4e0d\u7136\u629b\u51fa\u6743\u9650\u5f02\u5e38\n                String msg = \"Permission Denial: not allowed to send broadcast \"\n                        + action + \" to \"\n                        + intent.getComponent().getPackageName() + \" from \"\n                        + callerPackage;\n                Slog.w(TAG, msg);\n                throw new SecurityException(msg);\n            }\n        } else {\n            // Limit broadcast to their own package.\n            //\u8fd9\u7c7b\u5e7f\u64ad\u53ea\u80fd\u53d1\u7ed9\u5b83\u81ea\u5df1\uff0c\u7528\u4e8e\u81ea\u8eabwidget\u7684\u66f4\u65b0\n            intent.setPackage(callerPackage);\n        }\n    }\n}\n</code></pre> <ul> <li>\u68c0\u67e5\u662f\u5426\u662f\u4fdd\u62a4\u5e7f\u64ad\uff0c\u62ff\u5f53\u524d\u9700\u8981\u53d1\u7684 action \u53bb\u67e5 frameworks/base/core/res/AndroidManifest.xml\u5e26\u6709\u201cprotected-broadcast\u201d\u7684action\u662f\u5426\u4e00\u6837\u3002</li> <li>root\u7528\u6237\u3001\u7cfb\u7edf\u3001phone\u3001\u84dd\u7259\u3001nfc\u3001\u5b89\u5168\u3001\u7f51\u7edc\u7b49\u76f8\u5173\u8c03\u7528\u5219\u88ab\u8ba4\u4e3a\u662f\u7cfb\u7edf\uff0c\u8fd8\u6709\u5c31\u662f\u5426\u5e38\u9a7b\u8fdb\u7a0b\u3002</li> <li>protectBroadcast\u53ea\u80fd\u7531\u7cfb\u7edf\u53d1\u9001\u3002</li> <li>\u5982\u679c\u662fwidget\u914d\u7f6e(ACTION_APPWIDGET_CONFIGURE)\u548c\u66f4\u65b0(ACTION_APPWIDGET_UPDATE)\uff0c\u53ea\u80fd\u53d1\u7ed9\u5b83\u81ea\u5df1\uff0c\u7528\u4e8e\u81ea\u8eabwidget\u7684\u66f4\u65b0\u3002</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#background","title":"\u5e7f\u64ad\u80fd\u5426\u53d1\u7ed9background\u8fdb\u7a0b","text":"<pre><code>boolean timeoutExempt = false;\n\nif (action != null) {\n    //\u67e5\u770b\u662f\u5426background\u7684\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\u63a5\u6536\u8be5\u5e7f\u64ad\uff0c\u5177\u4f53\u5217\u8868\u5728SystemConfig.java\u7684mAllowImplicitBroadcasts\n    //\u8fd9\u4e2a\u5217\u8868\u662f\u626b\u63cf**/etc/sysconfig/*.xml(\u5982system/etc/sysconfig/framework-sysconfig.xml)\n    //\u5e26\u6709\u201c&lt;allow-implicit-broadcast\u201d\u7684\u5e7f\u64ad\n    if (getBackgroundLaunchBroadcasts().contains(action)) {\n        if (DEBUG_BACKGROUND_CHECK) {\n            Slog.i(TAG, \"Broadcast action \" + action + \" forcing include-background\");\n        }\n        intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);\n    }\n\n    if (Process.isSdkSandboxUid(realCallingUid)) {\n        SdkSandboxManagerLocal sdkSandboxManagerLocal = LocalManagerRegistry.getManager(\n                SdkSandboxManagerLocal.class);\n        if (sdkSandboxManagerLocal == null) {\n            throw new IllegalStateException(\"SdkSandboxManagerLocal not found when sending\"\n                    + \" a broadcast from an SDK sandbox uid.\");\n        }\n        sdkSandboxManagerLocal.enforceAllowedToSendBroadcast(intent);\n    }\n\n\n    switch (action) {\n        ...\n        //\u4e3b\u8981\u662f\u9488\u5bf9package\u76f8\u5173\u7684\u5e7f\u64ad\u505a\u4e86\u7279\u6b8a\u5904\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u7f57\u5217\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u7ffb\u770b\u6e90\u7801\n    }\n\n    ...\n}\n</code></pre> <ul> <li>\u5224\u65ad\u540e\u53f0\u5e94\u7528\u662f\u5426\u88ab\u5141\u8bb8\u63a5\u6536\u6539\u5e7f\u64ad\uff0c\u4e5f\u5c31\u662fSystemConfig.java\u7684mAllowImplicitBroadcasts\uff0c\u5177\u4f53\u662f\u626b\u63cf **/etc/sysconfig/*.xml(\u5982system/etc/sysconfig/framework-sysconfig.xml)\u5e26\u6709\u201c&lt;allow-implicit-broadcast\u201d\u7684\u5e7f\u64ad\u3002</li> <li>\u5bf9\u67d0\u4e9b\u7684action\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_30","title":"\u5904\u7406\u7c98\u6027\u5e7f\u64ad","text":"<pre><code>// Add to the sticky list if requested.\nif (sticky) {\n    //Sticky\u5e7f\u64ad\u9700\u8981\u5728manifest\u4e2d\u58f0\u660eBROADCAST_STICKY\u6743\u9650\n    if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,\n            callingPid, callingUid)\n            != PackageManager.PERMISSION_GRANTED) {\n        String msg = \"Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=\"\n                + callingPid + \", uid=\" + callingUid\n                + \" requires \" + android.Manifest.permission.BROADCAST_STICKY;\n        Slog.w(TAG, msg);\n        throw new SecurityException(msg);\n    }\n    //Sticky\u5e7f\u64ad\u4e0d\u80fd\u6709\u6743\u9650\u8981\u6c42\n    if (requiredPermissions != null &amp;&amp; requiredPermissions.length &gt; 0) {\n        Slog.w(TAG, \"Can't broadcast sticky intent \" + intent\n                + \" and enforce permissions \" + Arrays.toString(requiredPermissions));\n        return ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;\n    }\n    //\u7c98\u6027\u5e7f\u64ad\u4e0d\u80fd\u6307\u5b9a\u53d1\u9001\u5230\u76f8\u5173\u7ec4\u4ef6\uff0c\u5426\u5219\u53d1\u51fa\u5b89\u5168\u5f02\u5e38\n    if (intent.getComponent() != null) {\n        throw new SecurityException(\n                \"Sticky broadcasts can't target a specific component\");\n    }\n    // We use userId directly here, since the \"all\" target is maintained\n    // as a separate set of sticky broadcasts.\n    if (userId != UserHandle.USER_ALL) {\n        // But first, if this is not a broadcast to all users, then\n        // make sure it doesn't conflict with an existing broadcast to\n        // all users.\n        // \u6821\u9a8c\u5bf9\u4e8e\u5f53\u524d\u7684\u8fd9\u4e2a\u5bf9\u5355\u4e2auser\u7684\u5e7f\u64ad \u548c\u73b0\u6709\u7684\u9488\u5bf9\u6240\u6709user\u7684\u5e7f\u64ad\u4e0d\u51b2\u7a81\n        // \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2asticky\u5e7f\u64ad\u4e0d\u80fd\u540c\u65f6\u9488\u5bf9\u5355\u4e2auser\u53c8\u9488\u5bf9user_all\n        ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(\n                UserHandle.USER_ALL);\n        if (stickies != null) {\n            ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());\n            if (list != null) {\n                int N = list.size();\n                int i;\n                for (i=0; i&lt;N; i++) {\n                    if (intent.filterEquals(list.get(i))) {\n                        throw new IllegalArgumentException(\n                                \"Sticky broadcast \" + intent + \" for user \"\n                                + userId + \" conflicts with existing global broadcast\");\n                    }\n                }\n            }\n        }\n    }\n    // \u5c06Sticky\u5e7f\u64ad\u653e\u5165mStickyBroadcasts\n    ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(userId);\n    if (stickies == null) {\n        stickies = new ArrayMap&lt;&gt;();\n        mStickyBroadcasts.put(userId, stickies);\n    }\n    ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());\n    if (list == null) {\n        list = new ArrayList&lt;&gt;();\n        stickies.put(intent.getAction(), list);\n    }\n    final int stickiesCount = list.size();\n    int i;\n    for (i = 0; i &lt; stickiesCount; i++) {\n        if (intent.filterEquals(list.get(i))) {\n            // This sticky already exists, replace it.\n            // \u5982\u679c\u80fd\u627e\u5230\u5bf9\u5e94\u7684sticky\u5e7f\u64ad\uff0c\u5219\u8fdb\u884c\u66ff\u6362\n            // \u56e0\u4e3asticky\u5e7f\u64ad\u662f\u5728\u6ce8\u518c\u8005\u4e00\u6ce8\u518c\u5c31\u628a\u6700\u8fd1\u7684u\u4e00\u4e2a\u53d1\u51fa\u53bb\u4e86\n            // \u6240\u4ee5\u5bf9\u4e8e\u540c\u4e00\u4e2asticky\u5e7f\u64ad\u9700\u8981\u8bb0\u5f55\u4e0b\uff0c\u5982\u679c\u6709\u91cd\u590d\uff0c\u5219\u66ff\u6362\n            list.set(i, new Intent(intent));\n            break;\n        }\n    }\n    //\u5982\u679c\u4e0a\u9762\u4e2d\u9014\u66ff\u6362\u8fc7list\u7684intent\uff0c\u5219i &lt; stickiesCount\n    //\u800ci &gt;= stickiesCount\u5219\u4ee3\u8868\u6ca1\u6709\u66ff\u6362\u8fc7\n    if (i &gt;= stickiesCount) {\n        list.add(new Intent(intent));\n    }\n}\n</code></pre> <ul> <li>Sticky\u5e7f\u64ad\u9700\u8981\u5728manifest\u4e2d\u58f0\u660eBROADCAST_STICKY\u6743\u9650</li> <li>Sticky\u5e7f\u64ad\u4e0d\u80fd\u6709\u6743\u9650\u8981\u6c42</li> <li>Sticky\u5e7f\u64ad\u4e0d\u80fd\u6307\u5b9a\u53d1\u9001\u5230\u76f8\u5173\u7ec4\u4ef6\uff0c\u5426\u5219\u53d1\u51fa\u5b89\u5168\u5f02\u5e38</li> <li>Sticky\u5e7f\u64ad\u4e0d\u80fd\u540c\u65f6\u9488\u5bf9\u5355\u4e2auser\u53c8\u9488\u5bf9user_all</li> <li>\u5c06Sticky\u5e7f\u64ad\u653e\u5165mStickyBroadcasts</li> </ul> <p>\u5c06\u7c98\u6027\u5e7f\u64ad\u6dfb\u52a0\u5230AMS\u7684mStickyBroadcasts(key\u662f\u7528\u6237\u7ec4\uff0cvalue\u662f\u7c98\u6027\u5e7f\u64ad\u5217\u8868stickies)\u4e2d\uff0c\u5355\u4e2a\u7528\u6237\u7ec4\u7684\u7c98\u6027\u5e7f\u64ad\u5217\u8868stickies(key\u662faction\uff0cvalue\u662fintent)\uff0c\u540e\u9762\u52a8\u6001\u6ce8\u518c\u7684\u63a5\u6536\u8005\u5c31\u53ef\u4ee5\u5728\u6ce8\u518c\u7684\u65f6\u5019\u5c31\u63a5\u6536\u8fd9\u7c7b\u7c98\u6027\u5e7f\u64ad\uff0c \u56e0\u4e3a\u7cfb\u7edf\u6709\u4fdd\u5b58\u8fd9\u7c7b\u5e7f\u64ad\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_31","title":"\u7b5b\u9009\u51fa\u9759\u6001\u5e7f\u64ad\u63a5\u53d7\u8005","text":"<pre><code>int[] users;\nif (userId == UserHandle.USER_ALL) {// \u53d1\u9001\u5e7f\u64ad\u7ed9\u5168\u90e8\u7528\u6237\n    // Caller wants broadcast to go to all started users.\n    // \u83b7\u53d6\u6240\u6709\u5df2\u542f\u52a8\u7528\u6237\u7684\u5217\u8868\n    users = mUserController.getStartedUserArray();\n} else {// \u53d1\u9001\u5e7f\u64ad\u7ed9\u6307\u5b9a\u7528\u6237\n    // Caller wants broadcast to go to one specific user.\n    users = new int[] {userId};\n}\n\n// Figure out who all will receive this broadcast.\n// \u9759\u6001\u5e7f\u64ad\u63a5\u53d7\u8005\u6216\u8005order\u7684\u52a8\u6001\u5e7f\u64ad\u63a5\u53d7\u8005\u7684\u5217\u8868\nList receivers = null;\n// \u52a8\u6001\u5e7f\u64ad\u63a5\u53d7\u8005\u5217\u8868\nList&lt;BroadcastFilter&gt; registeredReceivers = null;\n// Need to resolve the intent to interested receivers...\nif ((intent.getFlags() &amp; Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n    //\u8fd9\u91cc\u5c31\u662f\u67e5\u8be2\u9759\u6001\u5e7f\u64ad\u7684\u5730\u65b9\uff0c\u901a\u8fc7PMS\u7684mComponentResolver\u67e5\u8be2\u5f97\u5230\u8be5intent\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u53d7\u8005\n    //\u540c\u65f6\u4f20\u5165broadcastAllowList\u8fc7\u6ee4\u662f\u5426\u5141\u8bb8\u63a5\u53d7\u8005\u63a5\u6536\n    receivers = collectReceiverComponents(\n            intent, resolvedType, callingUid, users, broadcastAllowList);\n}\n</code></pre> <ul> <li>\u53d8\u91cfreceivers\u4e3a\u9759\u6001\u5e7f\u64ad\u63a5\u53d7\u8005</li> <li>collectReceiverComponents()\uff0cPMS\u7684mComponentResolver\u67e5\u8be2\u5f97\u5230\u8be5intent\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u53d7\u8005</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#collectreceivercomponents","title":"collectReceiverComponents()","text":"<pre><code>private List&lt;ResolveInfo&gt; collectReceiverComponents(Intent intent, String resolvedType,\n        int callingUid, int[] users, int[] broadcastAllowList) {\n    // TODO: come back and remove this assumption to triage all broadcasts\n    int pmFlags = STOCK_PM_FLAGS | MATCH_DEBUG_TRIAGED_MISSING;\n\n    List&lt;ResolveInfo&gt; receivers = null;\n    HashSet&lt;ComponentName&gt; singleUserReceivers = null;\n    boolean scannedFirstReceivers = false;\n    for (int user : users) {\n        // Skip users that have Shell restrictions\n        //\u5982\u679c\u8c03\u7528\u8005\u662fshell\uff0c\u800c\u4e14\u8be5user\u4e0d\u5141\u8bb8shell\u8c03\u8bd5\uff0c\u5219\u8df3\u8fc7\n        if (callingUid == SHELL_UID\n                &amp;&amp; mUserController.hasUserRestriction(\n                UserManager.DISALLOW_DEBUGGING_FEATURES, user)) {\n            continue;\n        }\n        //\u9759\u6001\u5e7f\u64ad\u901a\u8fc7PMS\u53bb\u67e5\u8be2\u63a5\u6536\u8005\n        List&lt;ResolveInfo&gt; newReceivers = mPackageManagerInt.queryIntentReceivers(\n                intent, resolvedType, pmFlags, callingUid, user, true /* forSend */);\n        if (user != UserHandle.USER_SYSTEM &amp;&amp; newReceivers != null) {\n            // If this is not the system user, we need to check for\n            // any receivers that should be filtered out.\n            for (int i = 0; i &lt; newReceivers.size(); i++) {\n                ResolveInfo ri = newReceivers.get(i);\n                //\u5982\u679c\u53d6\u51fa\u6765\u7684ResolveInfo\u5305\u542b\u4e86\u53ea\u5141\u8bb8\u7cfb\u7edf\u63a5\u6536\u7684flag(FLAG_SYSTEM_USER_ONLY)\uff0c\n                //\u5219\u4ece\u7b5b\u9009\u51fa\u6765\u7684\u5217\u8868\u4e2d\u79fb\u9664\u8fd9\u4e2a\u63a5\u6536\u8005\n                if ((ri.activityInfo.flags &amp; ActivityInfo.FLAG_SYSTEM_USER_ONLY) != 0) {\n                    newReceivers.remove(i);\n                    i--;\n                }\n            }\n        }\n        // Replace the alias receivers with their targets.\n        if (newReceivers != null) {\n            for (int i = newReceivers.size() - 1; i &gt;= 0; i--) {\n                final ResolveInfo ri = newReceivers.get(i);\n                final Resolution&lt;ResolveInfo&gt; resolution =\n                        mComponentAliasResolver.resolveReceiver(intent, ri, resolvedType,\n                                pmFlags, user, callingUid, true /* forSend */);\n                if (resolution == null) {\n                    // It was an alias, but the target was not found.\n                    newReceivers.remove(i);\n                    continue;\n                }\n                if (resolution.isAlias()) {\n                    newReceivers.set(i, resolution.getTarget());\n                }\n            }\n        }\n\n        //\u5982\u679c\u5230\u76ee\u524d\u4e3a\u6b62newReceivers(ResolveInfo\u5217\u8868)\u4e3anull\u6216\u8005\u7a7a\u7684\n        if (newReceivers != null &amp;&amp; newReceivers.size() == 0) {\n            newReceivers = null;\n        }\n\n        if (receivers == null) {\n            //\u5982\u679creceivers(\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c)\u4e3anull\uff0c\u5219\u5148\u5c06newReceivers\u8d4b\u503c\u7ed9receivers\n            receivers = newReceivers;\n        } else if (newReceivers != null) {\n            // We need to concatenate the additional receivers\n            // found with what we have do far.  This would be easy,\n            // but we also need to de-dup any receivers that are\n            // singleUser.\n            //scannedFirstReceivers\u9ed8\u8ba4\u662ffasle\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u8dd1\u5230\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u8fdb\u6765\uff0c\u53ea\u8fdb\u6765\u4e00\u6b21\n            //receivers\u6b64\u65f6\u5df2\u7ecf\u8d4b\u503c\u8fc7\u4e00\u6b21\uff0c\u8fd9\u91cc\u662fusers\u7b2c\u4e8c\u6b21\u548c\u4ee5\u4e0a\u5faa\u73af\u624d\u53ef\u80fd\u4f1a\u8fdb\u6765\n            if (!scannedFirstReceivers) {\n                // Collect any single user receivers we had already retrieved.\n                scannedFirstReceivers = true;\n                // \u904d\u5386\u4e4b\u524d\u7684receivers(\u8fd9\u91ccreceivers\u6ca1\u6709\u5224\u7a7a\u903b\u8f91\uff0c\u53ea\u770b\u8fd9\u6bb5\u903b\u8f91\u4e0d\u592a\u4e25\u8c28\uff0c\n                // \u6ca1\u6709\u51fa\u9519\u662f\u7531\u4e8enewReceivers\u6709\u5224\u7a7a)\n                for (int i = 0; i &lt; receivers.size(); i++) {\n                    ResolveInfo ri = receivers.get(i);\n                     //\u5982\u679c\u63a5\u6536\u8005\u5305\u542bFLAG_SINGLE_USER\u7684flag\n                    if ((ri.activityInfo.flags&amp;ActivityInfo.FLAG_SINGLE_USER) != 0) {\n                        ComponentName cn = new ComponentName(\n                                ri.activityInfo.packageName, ri.activityInfo.name);\n                        if (singleUserReceivers == null) {\n                            singleUserReceivers = new HashSet&lt;ComponentName&gt;();\n                        }\n                        //\u5219\u628a\u8fd9\u7c7b\u7ec4\u4ef6add\u5230singleUserReceivers\u4e2d\n                        singleUserReceivers.add(cn);\n                    }\n                }\n            }\n            // Add the new results to the existing results, tracking\n            // and de-dupping single user receivers.\n            // \u904d\u5386\u65b0\u7684users\u4e2d\u83b7\u53d6\u7684newReceivers\n            for (int i = 0; i &lt; newReceivers.size(); i++) {\n                ResolveInfo ri = newReceivers.get(i);\n                //\u5982\u679c\u4e5f\u662f\u5e26\u6709FLAG_SINGLE_USER\u7684flag\uff0c\u53ea\u53d1\u9001\u7ed9\u5355\u4e2auser\n                if ((ri.activityInfo.flags &amp; ActivityInfo.FLAG_SINGLE_USER) != 0) {\n                    ComponentName cn = new ComponentName(\n                            ri.activityInfo.packageName, ri.activityInfo.name);\n                    if (singleUserReceivers == null) {\n                        singleUserReceivers = new HashSet&lt;ComponentName&gt;();\n                    }\n                    //\u5982\u679c\u4e4b\u524d\u8fd8\u6ca1\u6709\u6dfb\u52a0\u8fc7\uff0c\u624d\u8fdb\u884creceivers\u6dfb\u52a0\n                    if (!singleUserReceivers.contains(cn)) {\n                        //\u800c\u4e14\u5c06\u5355\u4e2a\u7528\u6237\u63a5\u53d7\u8005ComponentName cn\u6dfb\u52a0\u5230ComponentName\u4e2d\n                        singleUserReceivers.add(cn);\n                        receivers.add(ri);\n                    }\n                } else {\n                    //\u5176\u5b83\u60c5\u51b5\u5219\u76f4\u63a5\u52a0\u5165\u8be5\u63a5\u6536\u8005\u5230receivers\n                    receivers.add(ri);\n                }\n            }\n        }\n    }\n    //\u5982\u679c\u5e26\u6709broadcastAllowList\uff0c\u5141\u8bb8\u63a5\u6536\u8be5\u5e7f\u64aduid\u7684\u5217\u8868\n    if (receivers != null &amp;&amp; broadcastAllowList != null) {\n        for (int i = receivers.size() - 1; i &gt;= 0; i--) {\n            final int receiverAppId = UserHandle.getAppId(\n                    receivers.get(i).activityInfo.applicationInfo.uid);\n            //\u63a5\u53d7\u8005\u7684uid\u5982\u679c\u662fapp\u8fdb\u7a0b\uff0c\u800c\u4e14\u4e0d\u5728\u5141\u8bb8\u63a5\u6536\u8be5\u5e7f\u64aduid\u7684\u5217\u8868\uff0c\u5219\u79fb\u9664\u67e5\u8be2\u5230\u7684\u63a5\u6536\u8005\n            if (receiverAppId &gt;= Process.FIRST_APPLICATION_UID\n                    &amp;&amp; Arrays.binarySearch(broadcastAllowList, receiverAppId) &lt; 0) {\n                receivers.remove(i);\n            }\n        }\n    }\n    return receivers;\n}   \n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#packagemanagerservicequeryintentreceivers","title":"PackageManagerService.queryIntentReceivers","text":"<pre><code>PackageManagerService.java\n\npublic @NonNull ParceledListSlice&lt;ResolveInfo&gt; queryIntentReceivers(@NonNull Computer snapshot,\n        Intent intent, String resolvedType, @PackageManager.ResolveInfoFlagsBits long flags,\n        @UserIdInt int userId) {\n    return new ParceledListSlice&lt;&gt;(mResolveIntentHelper.queryIntentReceiversInternal(\n            snapshot, intent, resolvedType, flags, userId, Binder.getCallingUid()));\n}\n</code></pre> <p>\u8fdb\u5165PMS\u7684\u903b\u8f91\u5c31\u4e0d\u5728\u8be6\u7ec6\u9610\u8ff0\uff0c\u6700\u7ec8\u83b7\u53d6\u4e4b\u524d\u5728\u9759\u6001\u5e7f\u64ad\u6ce8\u518c\u65f6\u5b58\u5728PMS\u7684\u6210\u5458\u53d8\u91cfmComponentResolver\uff0c\u4ece\u800c\u62ff\u5230\u9759\u6001\u6ce8\u518c\u5e7f\u64ad\u7684receivers\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_32","title":"\u7b5b\u9009\u51fa\u52a8\u6001\u5e7f\u64ad\u63a5\u6536\u8005","text":"<pre><code>if (intent.getComponent() == null) {\n    final PackageDataSnapshot snapshot = getPackageManagerInternal().snapshot();\n    if (userId == UserHandle.USER_ALL &amp;&amp; callingUid == SHELL_UID) {\n        // Query one target user at a time, excluding shell-restricted users\n        //\u5bf9\u4e8eshell\u53d1\u9001\u7684user_all\u7684\u5e7f\u64ad\n        for (int i = 0; i &lt; users.length; i++) {\n            if (mUserController.hasUserRestriction(\n                    UserManager.DISALLOW_DEBUGGING_FEATURES, users[i])) {\n                continue;\n            }\n            List&lt;BroadcastFilter&gt; registeredReceiversForUser =\n                    mReceiverResolver.queryIntent(snapshot, intent,\n                            resolvedType, false /*defaultOnly*/, users[i]);\n            if (registeredReceivers == null) {\n                registeredReceivers = registeredReceiversForUser;\n            } else if (registeredReceiversForUser != null) {\n                registeredReceivers.addAll(registeredReceiversForUser);\n            }\n        }\n    } else {\n        //\u4e00\u822c\u60c5\u51b5\u6211\u4eec\u8d70\u7684\u8fd9\u91cc\uff0c\u76f4\u63a5\u4ecemReceiverResolver\u67e5\u8be2\u52a8\u6001\u63a5\u53d7\u8005\u8d4b\u503c\u7ed9registeredReceivers\n        registeredReceivers = mReceiverResolver.queryIntent(snapshot, intent,\n                resolvedType, false /*defaultOnly*/, userId);\n    }\n}\n</code></pre> <p>mReceiverResolver\u67e5\u8be2\u52a8\u6001\u63a5\u53d7\u8005\u8d4b\u503c\u7ed9registeredReceivers\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_33","title":"\u65e0\u5e8f\u5e7f\u64ad","text":"<p>\u5982\u679c\u6ca1\u6709\u8bbe\u7f6eordered\u6309\u987a\u5e8f\uff0c\u5219\u9488\u5bf9\u52a8\u6001\u6ce8\u518c\u7c7b\u578b\u7684\u5e7f\u64ad\u4f1a\u4e00\u6b21\u6027\u5168\u90e8\u53d1\u9001\u51fa\u53bb\u3002</p> <pre><code>// \u5982\u679c\u5e26\u6709FLAG_RECEIVER_REPLACE_PENDING\n// \u8868\u793a\u5982\u679c\u8fd9\u4e2a\u5e7f\u64ad\u8fd8\u6ca1\u6709\u6d3e\u53d1\uff0c\u5219\u66ff\u6362\u6389\u4e4b\u524d\u7684\u5e7f\u64ad\nfinal boolean replacePending =\n        (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REPLACE_PENDING) != 0;\n\nif (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing broadcast: \" + intent.getAction()\n        + \" replacePending=\" + replacePending);\n// \u52a8\u6001\u6ce8\u518c\u67e5\u8be2\u7684\u65f6\u5019\u6ca1\u6709\u4f20\u5165broadcastAllowList(\u5141\u8bb8\u63a5\u6536\u7684uid\u5217\u8868)\n// \u6b64\u5904\u4f1a\u6839\u636ebroadcastAllowList(\u4e0d\u4e3anull\u624d\u4f1a\u8fc7\u6ee4)\u6765\u8fdb\u884c\u52a8\u6001\u6ce8\u518c\u63a5\u6536\u8005\u7684\u8fc7\u6ee4\nif (registeredReceivers != null &amp;&amp; broadcastAllowList != null) {\n    // if a uid whitelist was provided, remove anything in the application space that wasn't\n    // in it.\n    for (int i = registeredReceivers.size() - 1; i &gt;= 0; i--) {\n        final int owningAppId = UserHandle.getAppId(registeredReceivers.get(i).owningUid);\n        if (owningAppId &gt;= Process.FIRST_APPLICATION_UID\n                &amp;&amp; Arrays.binarySearch(broadcastAllowList, owningAppId) &lt; 0) {\n            registeredReceivers.remove(i);\n        }\n    }\n}\n// \u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u4e2a\u6570\nint NR = registeredReceivers != null ? registeredReceivers.size() : 0;\n// \u5148\u5904\u7406\u52a8\u6001\u6ce8\u518c\u63a5\u6536\u8005\u7684\u903b\u8f91\uff0c\u5982\u679c\u8be5\u5e7f\u64ad\u662f\u975eordered(\u4e5f\u5c31\u662f\u65e0\u5e8f\u5e7f\u64ad)\uff0c\u5219\u8fdb\u5165\u91cc\u9762\nif (!ordered &amp;&amp; NR &gt; 0) {\n    // If we are not serializing this broadcast, then send the\n    // registered receivers separately so they don't wait for the\n    // components to be launched.\n    if (isCallerSystem) {\n        // \u5bf9\u4e8e\u7cfb\u7edf\u53d1\u9001\u7684\u5e7f\u64ad\u8fdb\u884c\u6821\u9a8c\n        checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid,\n                isProtectedBroadcast, registeredReceivers);\n    }\n    //\u6839\u636eintent\u67e5\u627e\u5bf9\u5e94\u7684\u5e7f\u64ad\u961f\u5217\n    final BroadcastQueue queue = broadcastQueueForIntent(intent);\n    //\u521b\u5efaBroadcastRecord\u5bf9\u8c61\u5e76\u5c06\u5f53\u524d\u6240\u6709\u901a\u8fc7\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u4f20\u8fdb\u53bb\n    BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage,\n            callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,\n            requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,\n            registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered,\n            sticky, false, userId, allowBackgroundActivityStarts,\n            backgroundActivityStartsToken, timeoutExempt);\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing parallel broadcast \" + r);\n    // \u5728BroadcastQueue\u4e2d\u7b49\u5f85\u53d1\u9001\u5e7f\u64ad\u4e2d\u641c\u7d22\u662f\u5426\u6709\u76f8\u540c\u7684BroadcastRecord\u5e76\u4e14\u662f\u5426\u66ff\u6362\n    final boolean replaced = replacePending\n            &amp;&amp; (queue.replaceParallelBroadcastLocked(r) != null);\n    // Note: We assume resultTo is null for non-ordered broadcasts.\n    if (!replaced) {\n        // \u5982\u679c\u4e0d\u9700\u8981\u66ff\u6362\u5219\u63d2\u5165\u5230BroadcastQueue\u4e2d\n        // \u4e5f\u5c31\u662f\u8bf4\u52a8\u6001\u5e7f\u64ad\u63a5\u6536\u8005\u90fd\u653e\u5728\u4e86BroadcastQueue\u7684mParallelBroadcasts\u4e2d\n        queue.enqueueParallelBroadcastLocked(r);\n        //\u5e76\u63a8\u52a8\u4e00\u6b21\u5e7f\u64ad\u53d1\u9001\n        queue.scheduleBroadcastsLocked();\n    }\n    //\u6e05\u7a7a\u52a8\u6001\u63a5\u6536\u8005\uff0c\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86\n    registeredReceivers = null;\n    NR = 0;\n}\n</code></pre> <ul> <li>\u6839\u636eintent\u67e5\u627e\u5bf9\u5e94\u7684\u5e7f\u64ad\u961f\u5217</li> <li>\u521b\u5efaBroadcastRecord\u5bf9\u8c61\u5e76\u5c06\u5f53\u524d\u6240\u6709\u901a\u8fc7\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u4f20\u8fdb\u53bb</li> <li>\u8c03\u7528enqueueParallelBroadcastLocked()\uff0c\u5c06\u52a8\u6001\u5e7f\u64ad\u63a5\u6536\u8005\u653e\u5728\u4e86BroadcastQueue\u7684mParallelBroadcasts\u4e2d</li> <li>\u8c03\u7528scheduleBroadcastsLocked()\u53d1\u9001\u5e7f\u64ad</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_34","title":"\u6709\u5e8f\u5e7f\u64ad","text":"<p>\u5982\u679c\u8bf4\u3010\u52a8\u6001\u6ce8\u518c\u4e14\u63a5\u53d7\u65e0\u5e8f\u5e7f\u64ad\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u3011\u662f\u5e76\u884c\u64cd\u4f5c\uff0c\u90a3\u4e48\u3010\u52a8\u6001\u6ce8\u518c\u63a5\u53d7\u6709\u5e8f\u5e7f\u64ad\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u3011\u548c\u3010\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u3011\u63a5\u53d7\u5e7f\u64ad\u7684\u6700\u5927\u7279\u70b9\u5c31\u662f\u4e32\u884c</p> <p>\u5982\u679c\u662f\u6709\u5e8f\u5e7f\u64ad\uff0c\u52a8\u6001\u63a5\u6536\u8005\u548c\u9759\u6001\u7684\u63a5\u6536\u8005\u5408\u5e76\u5230\u4e00\u4e2a\u961f\u5217\u91cc\u9762\u8fdb\u884c\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4order\u5e7f\u64ad\u4e0b\uff0c\u6240\u6709\u7684\u63a5\u6536\u8005\uff08\u9759\u6001\u548c\u52a8\u6001\uff09\u5904\u7406\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff08\u540e\u9762\u4f1a\u5206\u6790\u5230\uff0c\u90fd\u662f\u4e32\u884c\u5316\u5904\u7406\u7684\uff09\u3002</p> <p>\u8fd8\u6709\u5c31\u662f\u5bf9\u4e8e\u9759\u6001\u6ce8\u518c\u7684\u63a5\u6536\u8005\u800c\u8a00\uff0c\u59cb\u7ec8\u662f\u548corder\u5e7f\u64ad\u7684\u5904\u7406\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u9759\u6001\u7684\u63a5\u6536\u8005\u53ea\u6709order\u6a21\u5f0f\uff08\u4e32\u884c\u5316\u63a5\u6536\uff09\u3002\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u548c\u4e00\u4e2a\u9759\u6001\u6ce8\u518c\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u4f18\u5148\u7ea7\u76f8\u540c\uff0c\u90a3\u4e48\u52a8\u6001\u6ce8\u518c\u7684\u76ee\u6807\u63a5\u6536\u8005\u4f1a\u6392\u5728\u9759\u6001\u6ce8\u518c\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u524d\u9762\uff0c\u5373\u52a8\u6001\u6ce8\u518c\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u4f1a\u4f18\u5148\u4e8e\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u63a5\u53d7\u6709\u5e8f\u5e7f\u64ad\u3002</p> <ul> <li>\u65e0\u5e8f ---&gt; registeredReceivers</li> </ul> <p>\u52a8\u6001\u6ce8\u518c + \u65e0\u5e8f ---&gt; registeredReceivers</p> <ul> <li> <p>\u6709\u5e8f ---&gt; receivers</p> </li> <li> <p>\u52a8\u6001\u6ce8\u518c + \u6709\u5e8f</p> </li> <li>\u9759\u6001\u6ce8\u518c( \u6709\u5e8f + \u65e0\u5e8f )</li> </ul> <pre><code>// Merge into one list.\nint ir = 0;\n//\u5904\u7406\u9759\u6001\u63a5\u6536\u8005\nif (receivers != null) {\n    // A special case for PACKAGE_ADDED: do not allow the package\n    // being added to see this broadcast.  This prevents them from\n    // using this as a back door to get run as soon as they are\n    // installed.  Maybe in the future we want to have a special install\n    // broadcast or such for apps, but we'd like to deliberately make\n    // this decision.\n    String skipPackages[] = null;\n    //\u9488\u5bf9ACTION_PACKAGE_ADDED/ACTION_PACKAGE_RESTARTED/ACTION_PACKAGE_DATA_CLEARED\n    //\u8fd9\u7c7b\u5e7f\u64ad\u4e0d\u5141\u8bb8\u88ab\u5b89\u88c5\u7684package\u63a5\u6536(\u81ea\u5df1\u63a5\u6536\u81ea\u5df1\u5b89\u88c5\u7684\u5e7f\u64ad\u4e0d\u5141\u8bb8)\uff0c\u9632\u6b62\u81ea\u542f\n    if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())\n            || Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())\n            || Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {\n        Uri data = intent.getData();\n        if (data != null) {\n            String pkgName = data.getSchemeSpecificPart();\n            if (pkgName != null) {\n                skipPackages = new String[] { pkgName };\n            }\n        }\n    } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) {\n        skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);\n    }\n    //\u5c06\u8df3\u8fc7\u7684packageName\u4ecereceivers\u4e2d\u79fb\u9664\n    if (skipPackages != null &amp;&amp; (skipPackages.length &gt; 0)) {\n        for (String skipPackage : skipPackages) {\n            if (skipPackage != null) {\n                int NT = receivers.size();\n                for (int it=0; it&lt;NT; it++) {\n                    ResolveInfo curt = (ResolveInfo)receivers.get(it);\n                    if (curt.activityInfo.packageName.equals(skipPackage)) {\n                        receivers.remove(it);\n                        it--;\n                        NT--;\n                    }\n                }\n            }\n        }\n    }\n\n    //NT\u662f\u9759\u6001\u63a5\u6536\u8005\u7684\u4e2a\u6570\uff0cNR\u662f\u52a8\u6001\u63a5\u6536\u8005\u7684\u4e2a\u6570\n    int NT = receivers != null ? receivers.size() : 0;\n    int it = 0;\n    ResolveInfo curt = null;//\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\n    BroadcastFilter curr = null;//\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\n    while (it &lt; NT &amp;&amp; ir &lt; NR) {//\u5f00\u59cb\u628a\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868registeredReceivers\u548c\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868receivers\u5408\u5e76\u6210\u4e00\u4e2a\u5217\u8868\n        if (curt == null) {\n            //\u83b7\u53d6\u9759\u6001\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868\u7b2cit\u4e2a\n            curt = (ResolveInfo)receivers.get(it);\n        }\n        if (curr == null) {\n            //\u83b7\u53d6\u52a8\u6001\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868\u7b2cir\u4e2a\n            curr = registeredReceivers.get(ir);\n        }\n        if (curr.getPriority() &gt;= curt.priority) {//\u5982\u679c\u52a8\u6001\u6ce8\u518c\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u7b49\u4e8e\u9759\u6001\u6ce8\u518c\u7684\n            // Insert this broadcast record into the final list.\n            //\u628a\u52a8\u6001\u6ce8\u518c\u5e7f\u64ad\u8005\u63d2\u5165\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868\u4e2d\u5bf9\u5e94\u6761\u76ee\u7684\u524d\u65b9\n            receivers.add(it, curr);\n            ir++;\n            curr = null;\n            it++;\n            NT++;\n        } else {\n            // Skip to the next ResolveInfo in the final list.\n            it++;\n            curt = null;\n        }\n    }\n}\nwhile (ir &lt; NR) {//\u5c06\u4e24\u4e2a\u5217\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u8fd9\u6837\u9759\u6001\u6ce8\u518c\u5e7f\u64ad\u63a5\u6536\u8005receivers\u5217\u8868\u5c31\u5305\u542b\u4e86\u6240\u6709\u7684\u5e7f\u64ad\u63a5\u6536\u8005(\u65e0\u5e8f\u5e7f\u64ad\u548c\u6709\u5e8f\u5e7f\u64ad)\n    if (receivers == null) {\n        receivers = new ArrayList();\n    }\n    receivers.add(registeredReceivers.get(ir));\n    ir++;\n}\n\nif (isCallerSystem) {//isCallerSystem\u662f\u5426\u7cfb\u7edf\u8c03\u7528\u53d1\u9001\u5e7f\u64ad\n    //\u67e5\u770b\u4e00\u4e0b\u53d1\u9001\u7684\u662f\u5426\u4fdd\u62a4\u7684\u5e7f\u64ad\n    checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid,\n            isProtectedBroadcast, receivers);\n}\n\nif ((receivers != null &amp;&amp; receivers.size() &gt; 0)\n        || resultTo != null) {\n    // \u6839\u636eintent\u67e5\u627e\u5bf9\u5e94\u7684\u5e7f\u64ad\u961f\u5217\n    BroadcastQueue queue = broadcastQueueForIntent(intent);\n    // \u521b\u5efaBroadcastRecord\u5bf9\u8c61\u5e76\u5c06\u5408\u5e76\u8fc7\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868receivers\u4f20\u8fdb\u53bb\n    BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage,\n            callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,\n            requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,\n            receivers, resultTo, resultCode, resultData, resultExtras,\n            ordered, sticky, false, userId, allowBackgroundActivityStarts,\n            backgroundActivityStartsToken, timeoutExempt);\n\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing ordered broadcast \" + r);\n\n    final BroadcastRecord oldRecord =\n            replacePending ? queue.replaceOrderedBroadcastLocked(r) : null;\n    if (oldRecord != null) {\n        // Replaced, fire the result-to receiver.\n        if (oldRecord.resultTo != null) {\n            final BroadcastQueue oldQueue = broadcastQueueForIntent(oldRecord.intent);\n            try {\n                oldQueue.performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo,\n                        oldRecord.intent,\n                        Activity.RESULT_CANCELED, null, null,\n                        false, false, oldRecord.userId, oldRecord.callingUid, callingUid);\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Failure [\"\n                        + queue.mQueueName + \"] sending broadcast result of \"\n                        + intent, e);\n\n            }\n        }\n    } else {\n        //\u65e0\u5e8f\u5e7f\u64ad+\u6709\u5e8f\u5e7f\u64ad\u5408\u5e76\u4e4b\u540e\u653e\u5728\u4e86BroadcastQueue\u7684mOrderedBroadcasts\u4e2d\n        queue.enqueueOrderedBroadcastLocked(r);\n        //\u5e76\u63a8\u52a8\u4e00\u6b21\u5e7f\u64ad\u53d1\u9001\n        queue.scheduleBroadcastsLocked();\n    }\n} else {\n    // There was nobody interested in the broadcast, but we still want to record\n    // that it happened.\n    if (intent.getComponent() == null &amp;&amp; intent.getPackage() == null\n            &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n        // This was an implicit broadcast... let's record it for posterity.\n        addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);\n    }\n}\n\nreturn ActivityManager.BROADCAST_SUCCESS;\n</code></pre> <ul> <li>\u5bf9\u7279\u6b8a\u7684\u5e7f\u64ad\uff0c\u9700\u8981\u8df3\u8fc7</li> </ul> <p>\u5982ACTION_PACKAGE_ADDED(\u5b89\u88c5)/ACTION_PACKAGE_RESTARTED(\u91cd\u65b0)/ACTION_PACKAGE_DATA_CLEARED(\u6e05\u9664)\uff0c\u4e0d\u5141\u8bb8\u88ab\u5b89\u88c5\u7684package\u63a5\u6536\uff0c\u9632\u6b62\u81ea\u542f\u3002</p> <ul> <li>\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868registeredReceivers\u548c\u9759\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868receivers\u5408\u5e76\u6210\u4e00\u4e2a\u5217\u8868</li> <li>\u6839\u636eintent\u67e5\u627e\u5bf9\u5e94\u7684\u5e7f\u64ad\u961f\u5217</li> <li>\u521b\u5efaBroadcastRecord\u5bf9\u8c61\u5e76\u5c06\u5408\u5e76\u8fc7\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5217\u8868receivers\u4f20\u8fdb\u53bb</li> <li>\u8c03\u7528enqueueOrderedBroadcastLocked\uff0c\u5c06\u65e0\u5e8f\u5e7f\u64ad+\u6709\u5e8f\u5e7f\u64ad\u5408\u5e76\u4e4b\u540e\u653e\u5728\u4e86BroadcastQueue\u7684mOrderedBroadcasts\u4e2d</li> <li>\u8c03\u7528scheduleBroadcastsLocked()\u53d1\u9001\u5e7f\u64ad</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_35","title":"\u603b\u7ed3","text":"<p>\u8fd9\u6bb5\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u4ed4\u7ec6\u634b\u4e00\u904d\u5176\u4e2d\u7684\u5927\u81f4\u6d41\u7a0b\u5176\u5b9e\u4e5f\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u7684\u3002</p> <ul> <li>\u505a\u4e00\u4e9b\u68c0\u67e5\u548c\u5224\u65ad</li> </ul> <p>\u5982userid\u6821\u9a8c\u3001\u662f\u5426\u5141\u8bb8\u540e\u53f0\u542f\u52a8activity\u3001\u6539\u53d8deviceidle\u540d\u5355\uff0c\u8fdb\u884c\u6743\u9650\u6821\u9a8c\u3001protectBroadcast\u7684caller\u6821\u9a8c\u7b49\u7b49</p> <ul> <li>\u7279\u6b8aaction\u5e7f\u64ad\u7279\u6b8a\u5904\u7406</li> <li>sticky\u5e7f\u64ad\u5904\u7406</li> <li>\u52a8\u6001\u6ce8\u518c\u7684\u5e76\u884c\u5e7f\u64ad\u5904\u7406\u5165\u961f</li> <li>\u9759\u6001\u6ce8\u518c\u5e7f\u64ad\u4ee5\u53ca\u52a8\u6001\u6ce8\u518c\u6709\u5e8f\u5e7f\u64ad\u6839\u636e\u4f18\u5148\u7ea7\u6392\u5e8f\u540e\u5165\u961f</li> <li>\u5f00\u59cb\u8c03\u5ea6</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#ams","title":"AMS\u521b\u5efa\u5e7f\u64ad\u961f\u5217","text":"<p>\u524d\u9762\u8bb2\u7684\u662f\u8fc7\u6ee4\u63a5\u6536\u8005\uff0c\u7136\u540e\u5c06\u4fe1\u606f\u653e\u5165\u5e7f\u64ad\u961f\u5217\u4e2d\uff0c\u90a3\u4e48\u5e7f\u64ad\u961f\u5217\u662f\u5982\u4f55\u5904\u7406\u8fd9\u7c7b\u4fe1\u606f\u7684\u5462\uff1f\u5e7f\u64ad\u961f\u5217\u53c8\u662f\u5728\u54ea\u91cc\u521b\u5efa\u7684\u5462\uff1f</p> <pre><code>public class ActivityManagerService extends IActivityManager.Stub\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {\n\n    final BroadcastQueue mFgBroadcastQueue;\n    final BroadcastQueue mBgBroadcastQueue;\n    final BroadcastQueue mBgOffloadBroadcastQueue;\n    final BroadcastQueue mFgOffloadBroadcastQueue;\n    // Convenient for easy iteration over the queues. Foreground is first\n    // so that dispatch of foreground broadcasts gets precedence.\n    final BroadcastQueue[] mBroadcastQueues = new BroadcastQueue[4];\n\n    public ActivityManagerService(Context systemContext, ActivityTaskManagerService atm) {\n        ...\n\n        // Broadcast policy parameters\n        final BroadcastConstants foreConstants = new BroadcastConstants(\n                Settings.Global.BROADCAST_FG_CONSTANTS);\n        //\u524d\u53f0\u5e7f\u64ad\u8d85\u65f6\u65f6\u95f4\u662f10s\n        foreConstants.TIMEOUT = BROADCAST_FG_TIMEOUT;\n\n        final BroadcastConstants backConstants = new BroadcastConstants(\n                Settings.Global.BROADCAST_BG_CONSTANTS);\n        //\u540e\u53f0\u5e7f\u64ad\u8d85\u65f6\u65f6\u95f4\u662f60s\n        backConstants.TIMEOUT = BROADCAST_BG_TIMEOUT;\n\n        final BroadcastConstants offloadConstants = new BroadcastConstants(\n                Settings.Global.BROADCAST_OFFLOAD_CONSTANTS);\n        offloadConstants.TIMEOUT = BROADCAST_BG_TIMEOUT;\n        // by default, no \"slow\" policy in this queue\n        //\u6ca1\u6709SLOW_TIME\uff0c\u4e0d\u4f7f\u7528\u5ef6\u8fdf\u7b56\u7565\u5e7f\u64ad\n        offloadConstants.SLOW_TIME = Integer.MAX_VALUE;\n\n        //\u9ed8\u8ba4\u4f7f\u7528Offload\u7684\u5e7f\u64ad\u7684\n        mEnableOffloadQueue = SystemProperties.getBoolean(\n                \"persist.device_config.activity_manager_native_boot.offload_queue_enabled\", true);\n\n        //\u8fd9\u91cc\u7684mHandler\u662fAMS\u7684MainHandler\uff0c\u4f18\u5148\u7ea7\u662fTHREAD_PRIORITY_FOREGROUND\u524d\u53f0\n        mFgBroadcastQueue = new BroadcastQueue(this, mHandler,\n                \"foreground\", foreConstants, false);\n        mBgBroadcastQueue = new BroadcastQueue(this, mHandler,\n                \"background\", backConstants, true);\n        mBgOffloadBroadcastQueue = new BroadcastQueue(this, mHandler,\n                \"offload_bg\", offloadConstants, true);\n        mFgOffloadBroadcastQueue = new BroadcastQueue(this, mHandler,\n                \"offload_fg\", foreConstants, true);\n        mBroadcastQueues[0] = mFgBroadcastQueue;\n        mBroadcastQueues[1] = mBgBroadcastQueue;\n        mBroadcastQueues[2] = mBgOffloadBroadcastQueue;\n        mBroadcastQueues[3] = mFgOffloadBroadcastQueue;\n\n        ...\n    }\n\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_36","title":"\u5e7f\u64ad\u63a5\u6536\u8005\u5165\u961f\u5217","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#enqueueparallelbroadcastlocked","title":"enqueueParallelBroadcastLocked","text":"<pre><code>BroadcastQueue.java\n\nfinal ArrayList&lt;BroadcastRecord&gt; mParallelBroadcasts = new ArrayList&lt;&gt;();\n\npublic void enqueueParallelBroadcastLocked(BroadcastRecord r) {\n    r.enqueueClockTime = System.currentTimeMillis();\n    r.enqueueTime = SystemClock.uptimeMillis();\n    r.enqueueRealTime = SystemClock.elapsedRealtime();\n    mParallelBroadcasts.add(r);\n    enqueueBroadcastHelper(r);\n}\n</code></pre> <p>\u5168\u90e8\u4e22\u5165\u5e7f\u64ad\u961f\u5217BroadcastQueue\u7684mParallelBroadcasts\u4e2d\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#enqueueorderedbroadcastlocked","title":"enqueueOrderedBroadcastLocked","text":"<pre><code>BroadcastQueue.java\n\nfinal BroadcastDispatcher mDispatcher;\n\npublic void enqueueOrderedBroadcastLocked(BroadcastRecord r) {\n    r.enqueueClockTime = System.currentTimeMillis();\n    r.enqueueTime = SystemClock.uptimeMillis();\n    r.enqueueRealTime = SystemClock.elapsedRealtime();\n    mDispatcher.enqueueOrderedBroadcastLocked(r);\n    enqueueBroadcastHelper(r);\n}\n</code></pre> <pre><code>BroadcastDispatcher.java\n\nprivate final ArrayList&lt;BroadcastRecord&gt; mOrderedBroadcasts = new ArrayList&lt;&gt;();\n\nvoid enqueueOrderedBroadcastLocked(BroadcastRecord r) {\n    if (r.receivers == null || r.receivers.isEmpty()) {\n        mOrderedBroadcasts.add(r);\n        return;\n    }\n\n    if (Intent.ACTION_LOCKED_BOOT_COMPLETED.equals(r.intent.getAction())) {\n        // Create one BroadcastRecord for each UID that can be deferred.\n        final SparseArray&lt;BroadcastRecord&gt; deferred =\n                r.splitDeferredBootCompletedBroadcastLocked(mQueue.mService.mInternal,\n                        mQueue.mService.mConstants.mDeferBootCompletedBroadcast);\n        getDeferredPerUser(r.userId).enqueueBootCompletedBroadcasts(\n                Intent.ACTION_LOCKED_BOOT_COMPLETED, deferred);\n        if (!r.receivers.isEmpty()) {\n            // The non-deferred receivers.\n            mOrderedBroadcasts.add(r);\n            return;\n        }\n    } else if (Intent.ACTION_BOOT_COMPLETED.equals(r.intent.getAction())) {\n        // Create one BroadcastRecord for each UID that can be deferred.\n        final SparseArray&lt;BroadcastRecord&gt; deferred =\n                r.splitDeferredBootCompletedBroadcastLocked(mQueue.mService.mInternal,\n                        mQueue.mService.mConstants.mDeferBootCompletedBroadcast);\n        getDeferredPerUser(r.userId).enqueueBootCompletedBroadcasts(\n                Intent.ACTION_BOOT_COMPLETED, deferred);\n        if (!r.receivers.isEmpty()) {\n            // The non-deferred receivers.\n            mOrderedBroadcasts.add(r);\n            return;\n        }\n    } else {\n        mOrderedBroadcasts.add(r);\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u591a\u4e86\u4e00\u4e2a\u4e2d\u8f6cmDispatcher(BroadcastDispatcher)\uff0c\u653e\u5165\u7684\u5176\u5b9e\u662fBroadcastDispatcher\u7684mOrderedBroadcasts\u4e2d\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_37","title":"\u5e7f\u64ad\u961f\u5217\u5206\u53d1","text":"<pre><code>BroadcastQueue.java\n\npublic void scheduleBroadcastsLocked() {\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Schedule broadcasts [\"\n            + mQueueName + \"]: current=\"\n            + mBroadcastsScheduled);\n\n    // \u5982\u679ctrue\u8bf4\u660e\u6d88\u606f\u961f\u5217\u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a\u7c7b\u578b\u4e3aBROADCAST_INTENT_MSG\u7684\u6d88\u606f\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u56e0\u4e3a\u8be5\u6d88\u606f\u5728\u6267\u884c\u5b8c\u6bd5\u4f1a\u81ea\u52a8\u8c03\u7528\u4e0b\u4e00\u6761\u6d88\u606f\n    // AMS\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2aBROADCAST_INTENT_MSG\u6d88\u606f\u7c7b\n    // \u6765\u8c03\u5ea6\u4fdd\u5b58\u5728\u65e0\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mParallelBroadcasts\u548c\u6709\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mOrderedBroadcasts\u4e2d\u7684\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\u7684\n    if (mBroadcastsScheduled) {\n        return;\n    }\n    // \u867d\u7136\u8fd9\u91cc\u53ea\u53d1\u9001\u4e86\u53d1\u9001\u5e7f\u64ad\u7684\u6d88\u606f\uff0c\u4f46\u662f\u8fd9\u4e00\u6b65\u6267\u884c\u5b8c\u4e4b\u540e\u5c31\u5df2\u7ecf\u6807\u8bb0\u5e7f\u64ad\u53d1\u9001\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u51fa\u5e7f\u64ad\u53d1\u9001\u548c\u63a5\n    // \u53d7\u662f\u5f02\u6b65\u7684\uff0c\u5373\u5e7f\u64ad\u53d1\u9001\u8005\u5c06\u4e00\u4e2a\u5e7f\u64ad\u53d1\u9001\u7ed9AMS\u540e\uff0c\u4e0d\u4f1a\u7b49\u5f85AMS\u5c06\u8fd9\u4e2a\u5e7f\u64ad\u8f6c\u53d1\u7ed9\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\n    mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, this));\n    mBroadcastsScheduled = true;\n}\n\nprivate final class BroadcastHandler extends Handler {\n    public BroadcastHandler(Looper looper) {\n        super(looper, null, true);\n    }\n\n    @Override\n    public void handleMessage(Message msg) {\n        switch (msg.what) {\n            case BROADCAST_INTENT_MSG: {\n                if (DEBUG_BROADCAST) Slog.v(\n                        TAG_BROADCAST, \"Received BROADCAST_INTENT_MSG [\"\n                        + mQueueName + \"]\");\n                //\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u4e2a\u5e7f\u64ad\n                processNextBroadcast(true);\n            } break;\n            case BROADCAST_TIMEOUT_MSG: {\n                synchronized (mService) {\n                    broadcastTimeoutLocked(true);\n                }\n            } break;\n        }\n    }\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_38","title":"\u5904\u7406\u5206\u53d1\u4e0b\u4e00\u4e2a\u5e7f\u64ad","text":"<pre><code>BroadcastQueue.java\n\nprivate void processNextBroadcast(boolean fromMsg) {\n    synchronized (mService) {\n        processNextBroadcastLocked(fromMsg, false);\n    }\n}\n\nfinal void processNextBroadcastLocked(boolean fromMsg, boolean skipOomAdj) {\n    BroadcastRecord r;\n\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"processNextBroadcast [\"\n            + mQueueName + \"]: \"\n            + mParallelBroadcasts.size() + \" parallel broadcasts; \"\n            + mDispatcher.describeStateLocked());\n\n    mService.updateCpuStats();\n\n    if (fromMsg) {\n        mBroadcastsScheduled = false;\n    }\n\n    // First, deliver any non-serialized broadcasts right away.\n    while (mParallelBroadcasts.size() &gt; 0) {\n        r = mParallelBroadcasts.remove(0);\n        r.dispatchTime = SystemClock.uptimeMillis();\n        r.dispatchRealTime = SystemClock.elapsedRealtime();\n        r.dispatchClockTime = System.currentTimeMillis();\n\n        if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n                System.identityHashCode(r));\n            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n                System.identityHashCode(r));\n        }\n\n        final int N = r.receivers.size();\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Processing parallel broadcast [\"\n                + mQueueName + \"] \" + r);\n        for (int i=0; i&lt;N; i++) {\n            Object target = r.receivers.get(i);\n            if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                    \"Delivering non-ordered on [\" + mQueueName + \"] to registered \"\n                    + target + \": \" + r);\n            deliverToRegisteredReceiverLocked(r,\n                    (BroadcastFilter) target, false, i);\n        }\n        addBroadcastToHistoryLocked(r);\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Done with parallel broadcast [\"\n                + mQueueName + \"] \" + r);\n    }\n\n    // Now take care of the next serialized one...\n\n    // If we are waiting for a process to come up to handle the next\n    // broadcast, then do nothing at this point.  Just in case, we\n    // check that the process we're waiting for still exists.\n    if (mPendingBroadcast != null) {\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n                \"processNextBroadcast [\" + mQueueName + \"]: waiting for \"\n                + mPendingBroadcast.curApp);\n\n        boolean isDead;\n        if (mPendingBroadcast.curApp.getPid() &gt; 0) {\n            synchronized (mService.mPidsSelfLocked) {\n                ProcessRecord proc = mService.mPidsSelfLocked.get(\n                        mPendingBroadcast.curApp.getPid());\n                isDead = proc == null || proc.mErrorState.isCrashing();\n            }\n        } else {\n            final ProcessRecord proc = mService.mProcessList.getProcessNamesLOSP().get(\n                    mPendingBroadcast.curApp.processName, mPendingBroadcast.curApp.uid);\n            isDead = proc == null || !proc.isPendingStart();\n        }\n        if (!isDead) {\n            // It's still alive, so keep waiting\n            return;\n        } else {\n            Slog.w(TAG, \"pending app  [\"\n                    + mQueueName + \"]\" + mPendingBroadcast.curApp\n                    + \" died before responding to broadcast\");\n            mPendingBroadcast.state = BroadcastRecord.IDLE;\n            mPendingBroadcast.nextReceiver = mPendingBroadcastRecvIndex;\n            mPendingBroadcast = null;\n        }\n    }\n\n    boolean looped = false;\n\n    do {\n        final long now = SystemClock.uptimeMillis();\n        r = mDispatcher.getNextBroadcastLocked(now);\n\n        if (r == null) {\n            // No more broadcasts are deliverable right now, so all done!\n            mDispatcher.scheduleDeferralCheckLocked(false);\n            synchronized (mService.mAppProfiler.mProfilerLock) {\n                mService.mAppProfiler.scheduleAppGcsLPf();\n            }\n            if (looped &amp;&amp; !skipOomAdj) {\n                // If we had finished the last ordered broadcast, then\n                // make sure all processes have correct oom and sched\n                // adjustments.\n                mService.updateOomAdjPendingTargetsLocked(\n                        OomAdjuster.OOM_ADJ_REASON_START_RECEIVER);\n            }\n\n            // when we have no more ordered broadcast on this queue, stop logging\n            if (mService.mUserController.mBootCompleted &amp;&amp; mLogLatencyMetrics) {\n                mLogLatencyMetrics = false;\n            }\n\n            return;\n        }\n\n        boolean forceReceive = false;\n\n        // Ensure that even if something goes awry with the timeout\n        // detection, we catch \"hung\" broadcasts here, discard them,\n        // and continue to make progress.\n        //\n        // This is only done if the system is ready so that early-stage receivers\n        // don't get executed with timeouts; and of course other timeout-\n        // exempt broadcasts are ignored.\n        int numReceivers = (r.receivers != null) ? r.receivers.size() : 0;\n        if (mService.mProcessesReady &amp;&amp; !r.timeoutExempt &amp;&amp; r.dispatchTime &gt; 0) {\n            if ((numReceivers &gt; 0) &amp;&amp;\n                    (now &gt; r.dispatchTime + (2 * mConstants.TIMEOUT * numReceivers))) {\n                Slog.w(TAG, \"Hung broadcast [\"\n                        + mQueueName + \"] discarded after timeout failure:\"\n                        + \" now=\" + now\n                        + \" dispatchTime=\" + r.dispatchTime\n                        + \" startTime=\" + r.receiverTime\n                        + \" intent=\" + r.intent\n                        + \" numReceivers=\" + numReceivers\n                        + \" nextReceiver=\" + r.nextReceiver\n                        + \" state=\" + r.state);\n                broadcastTimeoutLocked(false); // forcibly finish this broadcast\n                forceReceive = true;\n                r.state = BroadcastRecord.IDLE;\n            }\n        }\n\n        if (r.state != BroadcastRecord.IDLE) {\n            if (DEBUG_BROADCAST) Slog.d(TAG_BROADCAST,\n                    \"processNextBroadcast(\"\n                    + mQueueName + \") called when not idle (state=\"\n                    + r.state + \")\");\n            return;\n        }\n\n        // Is the current broadcast is done for any reason?\n        if (r.receivers == null || r.nextReceiver &gt;= numReceivers\n                || r.resultAbort || forceReceive) {\n            // Send the final result if requested\n            if (r.resultTo != null) {\n                boolean sendResult = true;\n\n                // if this was part of a split/deferral complex, update the refcount and only\n                // send the completion when we clear all of them\n                if (r.splitToken != 0) {\n                    int newCount = mSplitRefcounts.get(r.splitToken) - 1;\n                    if (newCount == 0) {\n                        // done!  clear out this record's bookkeeping and deliver\n                        if (DEBUG_BROADCAST_DEFERRAL) {\n                            Slog.i(TAG_BROADCAST,\n                                    \"Sending broadcast completion for split token \"\n                                    + r.splitToken + \" : \" + r.intent.getAction());\n                        }\n                        mSplitRefcounts.delete(r.splitToken);\n                    } else {\n                        // still have some split broadcast records in flight; update refcount\n                        // and hold off on the callback\n                        if (DEBUG_BROADCAST_DEFERRAL) {\n                            Slog.i(TAG_BROADCAST,\n                                    \"Result refcount now \" + newCount + \" for split token \"\n                                    + r.splitToken + \" : \" + r.intent.getAction()\n                                    + \" - not sending completion yet\");\n                        }\n                        sendResult = false;\n                        mSplitRefcounts.put(r.splitToken, newCount);\n                    }\n                }\n                if (sendResult) {\n                    if (r.callerApp != null) {\n                        mService.mOomAdjuster.mCachedAppOptimizer.unfreezeTemporarily(\n                                r.callerApp);\n                    }\n                    try {\n                        if (DEBUG_BROADCAST) {\n                            Slog.i(TAG_BROADCAST, \"Finishing broadcast [\" + mQueueName + \"] \"\n                                    + r.intent.getAction() + \" app=\" + r.callerApp);\n                        }\n                        performReceiveLocked(r.callerApp, r.resultTo,\n                                new Intent(r.intent), r.resultCode,\n                                r.resultData, r.resultExtras, false, false, r.userId,\n                                r.callingUid, r.callingUid);\n                        logBootCompletedBroadcastCompletionLatencyIfPossible(r);\n                        // Set this to null so that the reference\n                        // (local and remote) isn't kept in the mBroadcastHistory.\n                        r.resultTo = null;\n                    } catch (RemoteException e) {\n                        r.resultTo = null;\n                        Slog.w(TAG, \"Failure [\"\n                                + mQueueName + \"] sending broadcast result of \"\n                                + r.intent, e);\n                    }\n                }\n            }\n\n            if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Cancelling BROADCAST_TIMEOUT_MSG\");\n            cancelBroadcastTimeoutLocked();\n\n            if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n                    \"Finished with ordered broadcast \" + r);\n\n            // ... and on to the next...\n            addBroadcastToHistoryLocked(r);\n            if (r.intent.getComponent() == null &amp;&amp; r.intent.getPackage() == null\n                    &amp;&amp; (r.intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n                // This was an implicit broadcast... let's record it for posterity.\n                mService.addBroadcastStatLocked(r.intent.getAction(), r.callerPackage,\n                        r.manifestCount, r.manifestSkipCount, r.finishTime-r.dispatchTime);\n            }\n            mDispatcher.retireBroadcastLocked(r);\n            r = null;\n            looped = true;\n            continue;\n        }\n\n        // Check whether the next receiver is under deferral policy, and handle that\n        // accordingly.  If the current broadcast was already part of deferred-delivery\n        // tracking, we know that it must now be deliverable as-is without re-deferral.\n        if (!r.deferred) {\n            final int receiverUid = r.getReceiverUid(r.receivers.get(r.nextReceiver));\n            if (mDispatcher.isDeferringLocked(receiverUid)) {\n                if (DEBUG_BROADCAST_DEFERRAL) {\n                    Slog.i(TAG_BROADCAST, \"Next receiver in \" + r + \" uid \" + receiverUid\n                            + \" at \" + r.nextReceiver + \" is under deferral\");\n                }\n                // If this is the only (remaining) receiver in the broadcast, \"splitting\"\n                // doesn't make sense -- just defer it as-is and retire it as the\n                // currently active outgoing broadcast.\n                BroadcastRecord defer;\n                if (r.nextReceiver + 1 == numReceivers) {\n                    if (DEBUG_BROADCAST_DEFERRAL) {\n                        Slog.i(TAG_BROADCAST, \"Sole receiver of \" + r\n                                + \" is under deferral; setting aside and proceeding\");\n                    }\n                    defer = r;\n                    mDispatcher.retireBroadcastLocked(r);\n                } else {\n                    // Nontrivial case; split out 'uid's receivers to a new broadcast record\n                    // and defer that, then loop and pick up continuing delivery of the current\n                    // record (now absent those receivers).\n\n                    // The split operation is guaranteed to match at least at 'nextReceiver'\n                    defer = r.splitRecipientsLocked(receiverUid, r.nextReceiver);\n                    if (DEBUG_BROADCAST_DEFERRAL) {\n                        Slog.i(TAG_BROADCAST, \"Post split:\");\n                        Slog.i(TAG_BROADCAST, \"Original broadcast receivers:\");\n                        for (int i = 0; i &lt; r.receivers.size(); i++) {\n                            Slog.i(TAG_BROADCAST, \"  \" + r.receivers.get(i));\n                        }\n                        Slog.i(TAG_BROADCAST, \"Split receivers:\");\n                        for (int i = 0; i &lt; defer.receivers.size(); i++) {\n                            Slog.i(TAG_BROADCAST, \"  \" + defer.receivers.get(i));\n                        }\n                    }\n                    // Track completion refcount as well if relevant\n                    if (r.resultTo != null) {\n                        int token = r.splitToken;\n                        if (token == 0) {\n                            // first split of this record; refcount for 'r' and 'deferred'\n                            r.splitToken = defer.splitToken = nextSplitTokenLocked();\n                            mSplitRefcounts.put(r.splitToken, 2);\n                            if (DEBUG_BROADCAST_DEFERRAL) {\n                                Slog.i(TAG_BROADCAST,\n                                        \"Broadcast needs split refcount; using new token \"\n                                        + r.splitToken);\n                            }\n                        } else {\n                            // new split from an already-refcounted situation; increment count\n                            final int curCount = mSplitRefcounts.get(token);\n                            if (DEBUG_BROADCAST_DEFERRAL) {\n                                if (curCount == 0) {\n                                    Slog.wtf(TAG_BROADCAST,\n                                            \"Split refcount is zero with token for \" + r);\n                                }\n                            }\n                            mSplitRefcounts.put(token, curCount + 1);\n                            if (DEBUG_BROADCAST_DEFERRAL) {\n                                Slog.i(TAG_BROADCAST, \"New split count for token \" + token\n                                        + \" is \" + (curCount + 1));\n                            }\n                        }\n                    }\n                }\n                mDispatcher.addDeferredBroadcast(receiverUid, defer);\n                r = null;\n                looped = true;\n                continue;\n            }\n        }\n    } while (r == null);\n\n    // Get the next receiver...\n    int recIdx = r.nextReceiver++;\n\n    // Keep track of when this receiver started, and make sure there\n    // is a timeout message pending to kill it if need be.\n    r.receiverTime = SystemClock.uptimeMillis();\n    if (recIdx == 0) {\n        r.dispatchTime = r.receiverTime;\n        r.dispatchRealTime = SystemClock.elapsedRealtime();\n        r.dispatchClockTime = System.currentTimeMillis();\n\n        if (mLogLatencyMetrics) {\n            FrameworkStatsLog.write(\n                    FrameworkStatsLog.BROADCAST_DISPATCH_LATENCY_REPORTED,\n                    r.dispatchClockTime - r.enqueueClockTime);\n        }\n\n        if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n                System.identityHashCode(r));\n            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n                System.identityHashCode(r));\n        }\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Processing ordered broadcast [\"\n                + mQueueName + \"] \" + r);\n    }\n    if (! mPendingBroadcastTimeoutMessage) {\n        long timeoutTime = r.receiverTime + mConstants.TIMEOUT;\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST,\n                \"Submitting BROADCAST_TIMEOUT_MSG [\"\n                + mQueueName + \"] for \" + r + \" at \" + timeoutTime);\n        setBroadcastTimeoutLocked(timeoutTime);\n    }\n\n    final BroadcastOptions brOptions = r.options;\n    final Object nextReceiver = r.receivers.get(recIdx);\n\n    if (nextReceiver instanceof BroadcastFilter) {\n        // Simple case: this is a registered receiver who gets\n        // a direct call.\n        BroadcastFilter filter = (BroadcastFilter)nextReceiver;\n        if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                \"Delivering ordered [\"\n                + mQueueName + \"] to registered \"\n                + filter + \": \" + r);\n        deliverToRegisteredReceiverLocked(r, filter, r.ordered, recIdx);\n        if (r.receiver == null || !r.ordered) {\n            // The receiver has already finished, so schedule to\n            // process the next one.\n            if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Quick finishing [\"\n                    + mQueueName + \"]: ordered=\"\n                    + r.ordered + \" receiver=\" + r.receiver);\n            r.state = BroadcastRecord.IDLE;\n            scheduleBroadcastsLocked();\n        } else {\n            if (filter.receiverList != null) {\n                maybeAddAllowBackgroundActivityStartsToken(filter.receiverList.app, r);\n                // r is guaranteed ordered at this point, so we know finishReceiverLocked()\n                // will get a callback and handle the activity start token lifecycle.\n            }\n        }\n        return;\n    }\n\n    // Hard case: need to instantiate the receiver, possibly\n    // starting its application process to host it.\n\n    ResolveInfo info =\n        (ResolveInfo)nextReceiver;\n    ComponentName component = new ComponentName(\n            info.activityInfo.applicationInfo.packageName,\n            info.activityInfo.name);\n\n    boolean skip = false;\n    if (brOptions != null &amp;&amp;\n            (info.activityInfo.applicationInfo.targetSdkVersion\n                    &lt; brOptions.getMinManifestReceiverApiLevel() ||\n            info.activityInfo.applicationInfo.targetSdkVersion\n                    &gt; brOptions.getMaxManifestReceiverApiLevel())) {\n        Slog.w(TAG, \"Target SDK mismatch: receiver \" + info.activityInfo\n                + \" targets \" + info.activityInfo.applicationInfo.targetSdkVersion\n                + \" but delivery restricted to [\"\n                + brOptions.getMinManifestReceiverApiLevel() + \", \"\n                + brOptions.getMaxManifestReceiverApiLevel()\n                + \"] broadcasting \" + broadcastDescription(r, component));\n        skip = true;\n    }\n    if (brOptions != null &amp;&amp;\n            !brOptions.testRequireCompatChange(info.activityInfo.applicationInfo.uid)) {\n        Slog.w(TAG, \"Compat change filtered: broadcasting \" + broadcastDescription(r, component)\n                + \" to uid \" + info.activityInfo.applicationInfo.uid + \" due to compat change \"\n                + r.options.getRequireCompatChangeId());\n        skip = true;\n    }\n    if (!skip &amp;&amp; !mService.validateAssociationAllowedLocked(r.callerPackage, r.callingUid,\n            component.getPackageName(), info.activityInfo.applicationInfo.uid)) {\n        Slog.w(TAG, \"Association not allowed: broadcasting \"\n                + broadcastDescription(r, component));\n        skip = true;\n    }\n    if (!skip) {\n        skip = !mService.mIntentFirewall.checkBroadcast(r.intent, r.callingUid,\n                r.callingPid, r.resolvedType, info.activityInfo.applicationInfo.uid);\n        if (skip) {\n            Slog.w(TAG, \"Firewall blocked: broadcasting \"\n                    + broadcastDescription(r, component));\n        }\n    }\n    int perm = mService.checkComponentPermission(info.activityInfo.permission,\n            r.callingPid, r.callingUid, info.activityInfo.applicationInfo.uid,\n            info.activityInfo.exported);\n    if (!skip &amp;&amp; perm != PackageManager.PERMISSION_GRANTED) {\n        if (!info.activityInfo.exported) {\n            Slog.w(TAG, \"Permission Denial: broadcasting \"\n                    + broadcastDescription(r, component)\n                    + \" is not exported from uid \" + info.activityInfo.applicationInfo.uid);\n        } else {\n            Slog.w(TAG, \"Permission Denial: broadcasting \"\n                    + broadcastDescription(r, component)\n                    + \" requires \" + info.activityInfo.permission);\n        }\n        skip = true;\n    } else if (!skip &amp;&amp; info.activityInfo.permission != null) {\n        final int opCode = AppOpsManager.permissionToOpCode(info.activityInfo.permission);\n        if (opCode != AppOpsManager.OP_NONE &amp;&amp; mService.getAppOpsManager().noteOpNoThrow(opCode,\n                r.callingUid, r.callerPackage, r.callerFeatureId,\n                \"Broadcast delivered to \" + info.activityInfo.name)\n                != AppOpsManager.MODE_ALLOWED) {\n            Slog.w(TAG, \"Appop Denial: broadcasting \"\n                    + broadcastDescription(r, component)\n                    + \" requires appop \" + AppOpsManager.permissionToOp(\n                            info.activityInfo.permission));\n            skip = true;\n        }\n    }\n\n    boolean isSingleton = false;\n    try {\n        isSingleton = mService.isSingleton(info.activityInfo.processName,\n                info.activityInfo.applicationInfo,\n                info.activityInfo.name, info.activityInfo.flags);\n    } catch (SecurityException e) {\n        Slog.w(TAG, e.getMessage());\n        skip = true;\n    }\n    if ((info.activityInfo.flags&amp;ActivityInfo.FLAG_SINGLE_USER) != 0) {\n        if (ActivityManager.checkUidPermission(\n                android.Manifest.permission.INTERACT_ACROSS_USERS,\n                info.activityInfo.applicationInfo.uid)\n                        != PackageManager.PERMISSION_GRANTED) {\n            Slog.w(TAG, \"Permission Denial: Receiver \" + component.flattenToShortString()\n                    + \" requests FLAG_SINGLE_USER, but app does not hold \"\n                    + android.Manifest.permission.INTERACT_ACROSS_USERS);\n            skip = true;\n        }\n    }\n    if (!skip &amp;&amp; info.activityInfo.applicationInfo.isInstantApp()\n            &amp;&amp; r.callingUid != info.activityInfo.applicationInfo.uid) {\n        Slog.w(TAG, \"Instant App Denial: receiving \"\n                + r.intent\n                + \" to \" + component.flattenToShortString()\n                + \" due to sender \" + r.callerPackage\n                + \" (uid \" + r.callingUid + \")\"\n                + \" Instant Apps do not support manifest receivers\");\n        skip = true;\n    }\n    if (!skip &amp;&amp; r.callerInstantApp\n            &amp;&amp; (info.activityInfo.flags &amp; ActivityInfo.FLAG_VISIBLE_TO_INSTANT_APP) == 0\n            &amp;&amp; r.callingUid != info.activityInfo.applicationInfo.uid) {\n        Slog.w(TAG, \"Instant App Denial: receiving \"\n                + r.intent\n                + \" to \" + component.flattenToShortString()\n                + \" requires receiver have visibleToInstantApps set\"\n                + \" due to sender \" + r.callerPackage\n                + \" (uid \" + r.callingUid + \")\");\n        skip = true;\n    }\n    if (r.curApp != null &amp;&amp; r.curApp.mErrorState.isCrashing()) {\n        // If the target process is crashing, just skip it.\n        Slog.w(TAG, \"Skipping deliver ordered [\" + mQueueName + \"] \" + r\n                + \" to \" + r.curApp + \": process crashing\");\n        skip = true;\n    }\n    if (!skip) {\n        boolean isAvailable = false;\n        try {\n            isAvailable = AppGlobals.getPackageManager().isPackageAvailable(\n                    info.activityInfo.packageName,\n                    UserHandle.getUserId(info.activityInfo.applicationInfo.uid));\n        } catch (Exception e) {\n            // all such failures mean we skip this receiver\n            Slog.w(TAG, \"Exception getting recipient info for \"\n                    + info.activityInfo.packageName, e);\n        }\n        if (!isAvailable) {\n            Slog.w(TAG_BROADCAST,\n                    \"Skipping delivery to \" + info.activityInfo.packageName + \" / \"\n                    + info.activityInfo.applicationInfo.uid\n                    + \" : package no longer available\");\n            skip = true;\n        }\n    }\n\n    // If permissions need a review before any of the app components can run, we drop\n    // the broadcast and if the calling app is in the foreground and the broadcast is\n    // explicit we launch the review UI passing it a pending intent to send the skipped\n    // broadcast.\n    if (!skip) {\n        if (!requestStartTargetPermissionsReviewIfNeededLocked(r,\n                info.activityInfo.packageName, UserHandle.getUserId(\n                        info.activityInfo.applicationInfo.uid))) {\n            Slog.w(TAG_BROADCAST,\n                    \"Skipping delivery: permission review required for \"\n                            + broadcastDescription(r, component));\n            skip = true;\n        }\n    }\n\n    // This is safe to do even if we are skipping the broadcast, and we need\n    // this information now to evaluate whether it is going to be allowed to run.\n    final int receiverUid = info.activityInfo.applicationInfo.uid;\n    // If it's a singleton, it needs to be the same app or a special app\n    if (r.callingUid != Process.SYSTEM_UID &amp;&amp; isSingleton\n            &amp;&amp; mService.isValidSingletonCall(r.callingUid, receiverUid)) {\n        info.activityInfo = mService.getActivityInfoForUser(info.activityInfo, 0);\n    }\n    String targetProcess = info.activityInfo.processName;\n    ProcessRecord app = mService.getProcessRecordLocked(targetProcess,\n            info.activityInfo.applicationInfo.uid);\n\n    if (!skip) {\n        final int allowed = mService.getAppStartModeLOSP(\n                info.activityInfo.applicationInfo.uid, info.activityInfo.packageName,\n                info.activityInfo.applicationInfo.targetSdkVersion, -1, true, false, false);\n        if (allowed != ActivityManager.APP_START_MODE_NORMAL) {\n            // We won't allow this receiver to be launched if the app has been\n            // completely disabled from launches, or it was not explicitly sent\n            // to it and the app is in a state that should not receive it\n            // (depending on how getAppStartModeLOSP has determined that).\n            if (allowed == ActivityManager.APP_START_MODE_DISABLED) {\n                Slog.w(TAG, \"Background execution disabled: receiving \"\n                        + r.intent + \" to \"\n                        + component.flattenToShortString());\n                skip = true;\n            } else if (((r.intent.getFlags()&amp;Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0)\n                    || (r.intent.getComponent() == null\n                        &amp;&amp; r.intent.getPackage() == null\n                        &amp;&amp; ((r.intent.getFlags()\n                                &amp; Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0)\n                        &amp;&amp; !isSignaturePerm(r.requiredPermissions))) {\n                mService.addBackgroundCheckViolationLocked(r.intent.getAction(),\n                        component.getPackageName());\n                Slog.w(TAG, \"Background execution not allowed: receiving \"\n                        + r.intent + \" to \"\n                        + component.flattenToShortString());\n                skip = true;\n            }\n        }\n    }\n\n    if (!skip &amp;&amp; !Intent.ACTION_SHUTDOWN.equals(r.intent.getAction())\n            &amp;&amp; !mService.mUserController\n            .isUserRunning(UserHandle.getUserId(info.activityInfo.applicationInfo.uid),\n                    0 /* flags */)) {\n        skip = true;\n        Slog.w(TAG,\n                \"Skipping delivery to \" + info.activityInfo.packageName + \" / \"\n                        + info.activityInfo.applicationInfo.uid + \" : user is not running\");\n    }\n\n    if (!skip &amp;&amp; r.excludedPermissions != null &amp;&amp; r.excludedPermissions.length &gt; 0) {\n        for (int i = 0; i &lt; r.excludedPermissions.length; i++) {\n            String excludedPermission = r.excludedPermissions[i];\n            try {\n                perm = AppGlobals.getPackageManager()\n                    .checkPermission(excludedPermission,\n                            info.activityInfo.applicationInfo.packageName,\n                            UserHandle\n                            .getUserId(info.activityInfo.applicationInfo.uid));\n            } catch (RemoteException e) {\n                perm = PackageManager.PERMISSION_DENIED;\n            }\n\n            int appOp = AppOpsManager.permissionToOpCode(excludedPermission);\n            if (appOp != AppOpsManager.OP_NONE) {\n                // When there is an app op associated with the permission,\n                // skip when both the permission and the app op are\n                // granted.\n                if ((perm == PackageManager.PERMISSION_GRANTED) &amp;&amp; (\n                            mService.getAppOpsManager().checkOpNoThrow(appOp,\n                            info.activityInfo.applicationInfo.uid,\n                            info.activityInfo.packageName)\n                        == AppOpsManager.MODE_ALLOWED)) {\n                    skip = true;\n                    break;\n                }\n            } else {\n                // When there is no app op associated with the permission,\n                // skip when permission is granted.\n                if (perm == PackageManager.PERMISSION_GRANTED) {\n                    skip = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Check that the receiver does *not* belong to any of the excluded packages\n    if (!skip &amp;&amp; r.excludedPackages != null &amp;&amp; r.excludedPackages.length &gt; 0) {\n        if (ArrayUtils.contains(r.excludedPackages, component.getPackageName())) {\n            Slog.w(TAG, \"Skipping delivery of excluded package \"\n                    + r.intent + \" to \"\n                    + component.flattenToShortString()\n                    + \" excludes package \" + component.getPackageName()\n                    + \" due to sender \" + r.callerPackage\n                    + \" (uid \" + r.callingUid + \")\");\n            skip = true;\n        }\n    }\n\n    if (!skip &amp;&amp; info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID &amp;&amp;\n            r.requiredPermissions != null &amp;&amp; r.requiredPermissions.length &gt; 0) {\n        for (int i = 0; i &lt; r.requiredPermissions.length; i++) {\n            String requiredPermission = r.requiredPermissions[i];\n            try {\n                perm = AppGlobals.getPackageManager().\n                        checkPermission(requiredPermission,\n                                info.activityInfo.applicationInfo.packageName,\n                                UserHandle\n                                .getUserId(info.activityInfo.applicationInfo.uid));\n            } catch (RemoteException e) {\n                perm = PackageManager.PERMISSION_DENIED;\n            }\n            if (perm != PackageManager.PERMISSION_GRANTED) {\n                Slog.w(TAG, \"Permission Denial: receiving \"\n                        + r.intent + \" to \"\n                        + component.flattenToShortString()\n                        + \" requires \" + requiredPermission\n                        + \" due to sender \" + r.callerPackage\n                        + \" (uid \" + r.callingUid + \")\");\n                skip = true;\n                break;\n            }\n            int appOp = AppOpsManager.permissionToOpCode(requiredPermission);\n            if (appOp != AppOpsManager.OP_NONE &amp;&amp; appOp != r.appOp) {\n                if (!noteOpForManifestReceiver(appOp, r, info, component)) {\n                    skip = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (!skip &amp;&amp; r.appOp != AppOpsManager.OP_NONE) {\n        if (!noteOpForManifestReceiver(r.appOp, r, info, component)) {\n            skip = true;\n        }\n    }\n\n    if (skip) {\n        if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                \"Skipping delivery of ordered [\" + mQueueName + \"] \"\n                + r + \" for reason described above\");\n        r.delivery[recIdx] = BroadcastRecord.DELIVERY_SKIPPED;\n        r.receiver = null;\n        r.curFilter = null;\n        r.state = BroadcastRecord.IDLE;\n        r.manifestSkipCount++;\n        scheduleBroadcastsLocked();\n        return;\n    }\n    r.manifestCount++;\n\n    r.delivery[recIdx] = BroadcastRecord.DELIVERY_DELIVERED;\n    r.state = BroadcastRecord.APP_RECEIVE;\n    r.curComponent = component;\n    r.curReceiver = info.activityInfo;\n    if (DEBUG_MU &amp;&amp; r.callingUid &gt; UserHandle.PER_USER_RANGE) {\n        Slog.v(TAG_MU, \"Updated broadcast record activity info for secondary user, \"\n                + info.activityInfo + \", callingUid = \" + r.callingUid + \", uid = \"\n                + receiverUid);\n    }\n    final boolean isActivityCapable =\n            (brOptions != null &amp;&amp; brOptions.getTemporaryAppAllowlistDuration() &gt; 0);\n    maybeScheduleTempAllowlistLocked(receiverUid, r, brOptions);\n\n    // Report that a component is used for explicit broadcasts.\n    if (r.intent.getComponent() != null &amp;&amp; r.curComponent != null\n            &amp;&amp; !TextUtils.equals(r.curComponent.getPackageName(), r.callerPackage)) {\n        mService.mUsageStatsService.reportEvent(\n                r.curComponent.getPackageName(), r.userId, Event.APP_COMPONENT_USED);\n    }\n\n    // Broadcast is being executed, its package can't be stopped.\n    try {\n        AppGlobals.getPackageManager().setPackageStoppedState(\n                r.curComponent.getPackageName(), false, r.userId);\n    } catch (RemoteException e) {\n    } catch (IllegalArgumentException e) {\n        Slog.w(TAG, \"Failed trying to unstop package \"\n                + r.curComponent.getPackageName() + \": \" + e);\n    }\n\n    // Is this receiver's application already running?\n    if (app != null &amp;&amp; app.getThread() != null &amp;&amp; !app.isKilled()) {\n        try {\n            app.addPackage(info.activityInfo.packageName,\n                    info.activityInfo.applicationInfo.longVersionCode, mService.mProcessStats);\n            maybeAddAllowBackgroundActivityStartsToken(app, r);\n            processCurBroadcastLocked(r, app,\n                    BROADCAST_DELIVERY_EVENT_REPORTED__RECEIVER_TYPE__MANIFEST,\n                    BROADCAST_DELIVERY_EVENT_REPORTED__PROC_START_TYPE__PROCESS_START_TYPE_WARM);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception when sending broadcast to \"\n                  + r.curComponent, e);\n        } catch (RuntimeException e) {\n            Slog.wtf(TAG, \"Failed sending broadcast to \"\n                    + r.curComponent + \" with \" + r.intent, e);\n            // If some unexpected exception happened, just skip\n            // this broadcast.  At this point we are not in the call\n            // from a client, so throwing an exception out from here\n            // will crash the entire system instead of just whoever\n            // sent the broadcast.\n            logBroadcastReceiverDiscardLocked(r);\n            finishReceiverLocked(r, r.resultCode, r.resultData,\n                    r.resultExtras, r.resultAbort, false);\n            scheduleBroadcastsLocked();\n            // We need to reset the state if we failed to start the receiver.\n            r.state = BroadcastRecord.IDLE;\n            return;\n        }\n\n        // If a dead object exception was thrown -- fall through to\n        // restart the application.\n    }\n\n    // Not running -- get it started, to be executed when the app comes up.\n    if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n            \"Need to start app [\"\n            + mQueueName + \"] \" + targetProcess + \" for broadcast \" + r);\n    r.curApp = mService.startProcessLocked(targetProcess,\n            info.activityInfo.applicationInfo, true,\n            r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,\n            new HostingRecord(HostingRecord.HOSTING_TYPE_BROADCAST, r.curComponent,\n                    r.intent.getAction()),\n            isActivityCapable ? ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE : ZYGOTE_POLICY_FLAG_EMPTY,\n            (r.intent.getFlags() &amp; Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0, false);\n    if (r.curApp == null) {\n        // Ah, this recipient is unavailable.  Finish it if necessary,\n        // and mark the broadcast record as ready for the next.\n        Slog.w(TAG, \"Unable to launch app \"\n                + info.activityInfo.applicationInfo.packageName + \"/\"\n                + receiverUid + \" for broadcast \"\n                + r.intent + \": process is bad\");\n        logBroadcastReceiverDiscardLocked(r);\n        finishReceiverLocked(r, r.resultCode, r.resultData,\n                r.resultExtras, r.resultAbort, false);\n        scheduleBroadcastsLocked();\n        r.state = BroadcastRecord.IDLE;\n        return;\n    }\n\n    maybeAddAllowBackgroundActivityStartsToken(r.curApp, r);\n    mPendingBroadcast = r;\n    mPendingBroadcastRecvIndex = recIdx;\n}\n</code></pre> <p>processNextBroadcastLocked()\u51fd\u6570\u662f\u5e7f\u64ad\u53d1\u9001\u7684\u6838\u5fc3\u5185\u5bb9\uff0c\u4ee3\u7801\u975e\u5e38\u591a\uff0c\u4e0b\u9762\u6211\u4eec\u4ece\u51e0\u4e2a\u65b9\u9762\u6765\u5206\u6790\uff1a</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_39","title":"\u65e0\u5e8f\u5e7f\u64ad","text":"<pre><code>BroadcastRecord r;//BroadcastRecord\u5e7f\u64ad\u7684\u8bb0\u5f55\u8005\uff0c\u9700\u8981\u5206\u53d1\u7684\u5e7f\u64ad\n\nif (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"processNextBroadcast [\"\n        + mQueueName + \"]: \"\n        + mParallelBroadcasts.size() + \" parallel broadcasts; \"\n        + mDispatcher.describeStateLocked());\n\nmService.updateCpuStats();\n\nif (fromMsg) {// \u5426\u662f\u6765\u81eahandleMessage\u7684BROADCAST_INTENT_MSG\u7c7b\u578b\u6d88\u606f\n    // \u524d\u9762\u8bf4\u5230\uff0c\u5982\u679c\u6d88\u606f\u961f\u5217\u91cc\u9762\u6709BROADCAST_INTENT_MSG\u6d88\u606f\uff0c\u8be5\u6807\u8bb0\u4e3atrue\uff0c\u963b\u6b62\u65b0\u7684\u6d88\u606f\u52a0\u5165\u961f\u5217\uff0c\n    // \u8fd9\u91cc\u5f00\u59cb\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\u7684\u65f6\u5019\uff0c\u5c06mBroadcastsScheduled\u53d8\u91cf\u8bbe\u7f6e\u4e3afalse\uff0c\u5f00\u59cb\u5141\u8bb8\u65b0\u7684\u6d88\u606f\u52a0\u5165\u3002\n    mBroadcastsScheduled = false;\n}\n\n// First, deliver any non-serialized broadcasts right away.\n// \u65e0\u5e8f\u5e7f\u64ad\u4e4b\u95f4\u4e0d\u5b58\u5728\u76f8\u4e92\u7b49\u5f85\uff0c\u8fd9\u91cc\u5904\u7406\u7684\u662f\u4fdd\u5b58\u5728\u65e0\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mParallelBroadcasts\u4e2d\u7684\u5e7f\u64ad\u53d1\u9001\u4efb\u52a1\uff0c\n// \u5373\u628a\u4fdd\u5b58\u5728\u65e0\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mParallelBroadcasts\u4e2d\u7684\u5e7f\u64ad\u53d1\u9001\u7ed9\u5b83\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\nwhile (mParallelBroadcasts.size() &gt; 0) {\n    // \u9996\u5148\u83b7\u53d6\u4fdd\u5b58\u65e0\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mParallelBroadcasts\u4e2d\u7684\u6bcf\u4e00\u4e2aBroadcastRecord\u5bf9\u8c61\n    r = mParallelBroadcasts.remove(0);\n    r.dispatchTime = SystemClock.uptimeMillis();//\u8bbe\u7f6eBroadcastRecord r\u5e7f\u64ad\u5206\u53d1\u65f6\u95f4dispatchTime\n    r.dispatchRealTime = SystemClock.elapsedRealtime();\n    r.dispatchClockTime = System.currentTimeMillis();//System.currentTimeMillis()\u83b7\u53d6\u7684\u662f\u7cfb\u7edf\u65f6\u949f\u7684\u65f6\u95f4\uff0c\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u8fd9\u4e2a\u65f6\u95f4\u4f1a\u53d8\u5316\n\n    if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n        Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n            createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n            System.identityHashCode(r));\n        Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n            createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n            System.identityHashCode(r));\n    }\n\n    //\u83b7\u53d6BroadcastRecord\u4e2d\u7684\u6240\u6709\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u6570\u91cf\n    final int N = r.receivers.size();\n    if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Processing parallel broadcast [\"\n            + mQueueName + \"] \" + r);\n    for (int i=0; i&lt;N; i++) {//\u904d\u5386\u6784\u5efa BroadcastRecord \u7684\u6240\u6709receivers\n        Object target = r.receivers.get(i);\n        if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                \"Delivering non-ordered on [\" + mQueueName + \"] to registered \"\n                + target + \": \" + r);\n        // \u8c03\u7528deliverToRegisteredReceiverLocked\u5411\u6240\u6709\u7684receivers\u53d1\u9001\u5e7f\u64ad\n        // \u5c06\u5b83\u6240\u63cf\u8ff0\u7684\u6bcf\u4e00\u4e2a\u65e0\u5e8f\u5e7f\u64ad\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u5f02\u6b65\u5904\u7406\u5e7f\u64ad\n        // \u901a\u8fc7deliverToRegisteredReceiverLocked\u8c03\u7528ActivityThread.scheduleRegisteredReceiver\u5904\u7406\u5e7f\u64ad\n        deliverToRegisteredReceiverLocked(r,\n                (BroadcastFilter) target, false, i);\n    }\n    addBroadcastToHistoryLocked(r);\n    if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Done with parallel broadcast [\"\n            + mQueueName + \"] \" + r);\n}\n</code></pre> <p>\u65e0\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005\u4e0d\u9700\u8981\u7b49\u5f85\uff0c\u6240\u4ee5\u76f4\u63a5for\u5faa\u73af\u6267\u884c\uff0c\u8c03\u7528deliverToRegisteredReceiverLocked\u65b9\u6cd5\u53d1\u9001\u5e7f\u64ad\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#delivertoregisteredreceiverlocked","title":"deliverToRegisteredReceiverLocked","text":"<pre><code>//\u6267\u884c\u52a8\u6001\u6ce8\u518c\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u53d1\u9001\u63a5\u53d7\u8fc7\u7a0b\nprivate void deliverToRegisteredReceiverLocked(BroadcastRecord r,\n        BroadcastFilter filter, boolean ordered, int index) {\n    // \u6807\u8bb0\u662f\u5426\u8981\u8df3\u8fc7\u8be5\u5e7f\u64ad\u63a5\u6536\u8005\n    boolean skip = false;\n\n    //skip\u7684\u573a\u666f\n    ...\n\n    // \u68c0\u67e5\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u6743\u9650\n    // Check that the sender has permission to send to this receiver\n    if (filter.requiredPermission != null) {\n        int perm = mService.checkComponentPermission(filter.requiredPermission,\n                r.callingPid, r.callingUid, -1, true);\n        if (perm != PackageManager.PERMISSION_GRANTED) {\n            Slog.w(TAG, \"Permission Denial: broadcasting \"\n                    + r.intent.toString()\n                    + \" from \" + r.callerPackage + \" (pid=\"\n                    + r.callingPid + \", uid=\" + r.callingUid + \")\"\n                    + \" requires \" + filter.requiredPermission\n                    + \" due to registered receiver \" + filter);\n            skip = true;\n        } else {\n            final int opCode = AppOpsManager.permissionToOpCode(filter.requiredPermission);\n            if (opCode != AppOpsManager.OP_NONE\n                    &amp;&amp; mService.getAppOpsManager().noteOpNoThrow(opCode, r.callingUid,\n                    r.callerPackage, r.callerFeatureId, \"Broadcast sent to protected receiver\")\n                    != AppOpsManager.MODE_ALLOWED) {\n                Slog.w(TAG, \"Appop Denial: broadcasting \"\n                        + r.intent.toString()\n                        + \" from \" + r.callerPackage + \" (pid=\"\n                        + r.callingPid + \", uid=\" + r.callingUid + \")\"\n                        + \" requires appop \" + AppOpsManager.permissionToOp(\n                                filter.requiredPermission)\n                        + \" due to registered receiver \" + filter);\n                skip = true;\n            }\n        }\n    }\n\n    // \u5982\u679c\u8981\u8df3\u8fc7\uff0c\u5219\u8bbe\u7f6e\u8be5\u5e7f\u64ad\u7ed3\u675f\n    if (!skip &amp;&amp; (filter.receiverList.app == null || filter.receiverList.app.isKilled()\n            || filter.receiverList.app.mErrorState.isCrashing())) {\n        Slog.w(TAG, \"Skipping deliver [\" + mQueueName + \"] \" + r\n                + \" to \" + filter.receiverList + \": process gone or crashing\");\n        skip = true;\n    }\n\n    //Instant Apps skip\u7684\u573a\u666f\n    ...\n\n    // \u68c0\u67e5\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u6743\u9650\n    // Check that the receiver has the required permission(s) to receive this broadcast.\n    if (!skip &amp;&amp; r.requiredPermissions != null &amp;&amp; r.requiredPermissions.length &gt; 0) {\n        for (int i = 0; i &lt; r.requiredPermissions.length; i++) {\n            String requiredPermission = r.requiredPermissions[i];\n            int perm = mService.checkComponentPermission(requiredPermission,\n                    filter.receiverList.pid, filter.receiverList.uid, -1, true);\n            if (perm != PackageManager.PERMISSION_GRANTED) {\n                Slog.w(TAG, \"Permission Denial: receiving \"\n                        + r.intent.toString()\n                        + \" to \" + filter.receiverList.app\n                        + \" (pid=\" + filter.receiverList.pid\n                        + \", uid=\" + filter.receiverList.uid + \")\"\n                        + \" requires \" + requiredPermission\n                        + \" due to sender \" + r.callerPackage\n                        + \" (uid \" + r.callingUid + \")\");\n                skip = true;\n                break;\n            }\n            int appOp = AppOpsManager.permissionToOpCode(requiredPermission);\n            if (appOp != AppOpsManager.OP_NONE &amp;&amp; appOp != r.appOp\n                    &amp;&amp; mService.getAppOpsManager().noteOpNoThrow(appOp,\n                    filter.receiverList.uid, filter.packageName, filter.featureId,\n                    \"Broadcast delivered to registered receiver \" + filter.receiverId)\n                    != AppOpsManager.MODE_ALLOWED) {\n                Slog.w(TAG, \"Appop Denial: receiving \"\n                        + r.intent.toString()\n                        + \" to \" + filter.receiverList.app\n                        + \" (pid=\" + filter.receiverList.pid\n                        + \", uid=\" + filter.receiverList.uid + \")\"\n                        + \" requires appop \" + AppOpsManager.permissionToOp(\n                        requiredPermission)\n                        + \" due to sender \" + r.callerPackage\n                        + \" (uid \" + r.callingUid + \")\");\n                skip = true;\n                break;\n            }\n        }\n    }\n    if (!skip &amp;&amp; (r.requiredPermissions == null || r.requiredPermissions.length == 0)) {\n        int perm = mService.checkComponentPermission(null,\n                filter.receiverList.pid, filter.receiverList.uid, -1, true);\n        if (perm != PackageManager.PERMISSION_GRANTED) {\n            Slog.w(TAG, \"Permission Denial: security check failed when receiving \"\n                    + r.intent.toString()\n                    + \" to \" + filter.receiverList.app\n                    + \" (pid=\" + filter.receiverList.pid\n                    + \", uid=\" + filter.receiverList.uid + \")\"\n                    + \" due to sender \" + r.callerPackage\n                    + \" (uid \" + r.callingUid + \")\");\n            skip = true;\n        }\n    }\n\n    //permissions to exclude\n    //packages to exclude\n    //\u68c0\u67e5\n    ...\n\n\n    //\u5982\u679c\u8981\u8df3\u8fc7\uff0c\u5219\u8bbe\u7f6e\u8be5\u5e7f\u64ad\u7ed3\u675f\n    if (skip) {\n        r.delivery[index] = BroadcastRecord.DELIVERY_SKIPPED;\n        return;\n    }\n\n    // If permissions need a review before any of the app components can run, we drop\n    // the broadcast and if the calling app is in the foreground and the broadcast is\n    // explicit we launch the review UI passing it a pending intent to send the skipped\n    // broadcast.\n    if (!requestStartTargetPermissionsReviewIfNeededLocked(r, filter.packageName,\n            filter.owningUserId)) {\n        r.delivery[index] = BroadcastRecord.DELIVERY_SKIPPED;\n        return;\n    }\n\n    r.delivery[index] = BroadcastRecord.DELIVERY_DELIVERED;\n\n    // If this is not being sent as an ordered broadcast, then we\n    // don't want to touch the fields that keep track of the current\n    // state of ordered broadcasts.\n    //order\u5e7f\u64ad\uff0c\u6240\u6709\u7684\u63a5\u6536\u8005\u9700\u8981\u4f9d\u6b21\u4ee5\u4e00\u79cd\u540c\u6b65\u7684\u65b9\u5f0f\u53d1\u9001\u5e7f\u64ad\uff0c\n    //\u53ef\u4ee5\u770b\u5230order\u5e7f\u64ad\u5728BroadcastRecord\u4fdd\u5b58\u4e86\u51e0\u4e2a\u72b6\u6001\n    if (ordered) {\n        // IBinder\u7c7b\u578b\uff0c\u4ee3\u8868\u5f53\u524d\u7684\u63a5\u6536\u8005\n        r.receiver = filter.receiverList.receiver.asBinder();\n        // \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684BroadcastFilter\uff0c\u548c\u4e0a\u9762\u7684receiver\u662f\u5bf9\u5e94\u597d\u7684\n        r.curFilter = filter;\n        filter.receiverList.curBroadcast = r;\n        r.state = BroadcastRecord.CALL_IN_RECEIVE;\n        if (filter.receiverList.app != null) {\n            // Bump hosting application to no longer be in background\n            // scheduling class.  Note that we can't do that if there\n            // isn't an app...  but we can only be in that case for\n            // things that directly call the IActivityManager API, which\n            // are already core system stuff so don't matter for this.\n            r.curApp = filter.receiverList.app;\n            filter.receiverList.app.mReceivers.addCurReceiver(r);\n            mService.enqueueOomAdjTargetLocked(r.curApp);\n            mService.updateOomAdjPendingTargetsLocked(\n                    OomAdjuster.OOM_ADJ_REASON_START_RECEIVER);\n        }\n    } else if (filter.receiverList.app != null) {\n        mService.mOomAdjuster.mCachedAppOptimizer.unfreezeTemporarily(filter.receiverList.app);\n    }\n\n    try {\n        if (DEBUG_BROADCAST_LIGHT) Slog.i(TAG_BROADCAST,\n                \"Delivering to \" + filter + \" : \" + r);\n        if (filter.receiverList.app != null &amp;&amp; filter.receiverList.app.isInFullBackup()) {\n            // Skip delivery if full backup in progress\n            // If it's an ordered broadcast, we need to continue to the next receiver.\n            if (ordered) {\n                // \u5982\u679c\u6b63\u5728\u5907\u4efd\u6216\u8005\u6062\u590d\u5907\u4efd\u8df3\u8fc7\uff0c\n                // \u5982\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u5e7f\u64ad\uff0c\u5219\u6267\u884c\u4e0b\u4e00\u4e2a\u5e7f\u64ad\n                skipReceiverLocked(r);\n            }\n        } else {\n            r.receiverTime = SystemClock.uptimeMillis();\n            maybeAddAllowBackgroundActivityStartsToken(filter.receiverList.app, r);\n            maybeScheduleTempAllowlistLocked(filter.owningUid, r, r.options);\n            maybeReportBroadcastDispatchedEventLocked(r, filter.owningUid);\n            //\u5982\u679c\u4e0d\u9700\u8981\u8fdb\u884c\u6743\u9650\u68c0\u67e5\u6216\u8005\u901a\u8fc7\u6743\u9650\u68c0\u67e5\uff0c\u8c03\u7528performReceiveLocked\u53d1\u9001\u5e7f\u64ad\n            performReceiveLocked(filter.receiverList.app, filter.receiverList.receiver,\n                    new Intent(r.intent), r.resultCode, r.resultData,\n                    r.resultExtras, r.ordered, r.initialSticky, r.userId,\n                    filter.receiverList.uid, r.callingUid);\n            // parallel broadcasts are fire-and-forget, not bookended by a call to\n            // finishReceiverLocked(), so we manage their activity-start token here\n            if (filter.receiverList.app != null\n                    &amp;&amp; r.allowBackgroundActivityStarts &amp;&amp; !r.ordered) {\n                postActivityStartTokenRemoval(filter.receiverList.app, r);\n            }\n        }\n        if (ordered) {\n            r.state = BroadcastRecord.CALL_DONE_RECEIVE;\n        }\n    } catch (RemoteException e) {\n        Slog.w(TAG, \"Failure sending broadcast \" + r.intent, e);\n        // Clean up ProcessRecord state related to this broadcast attempt\n        if (filter.receiverList.app != null) {\n            filter.receiverList.app.removeAllowBackgroundActivityStartsToken(r);\n            if (ordered) {\n                filter.receiverList.app.mReceivers.removeCurReceiver(r);\n                // Something wrong, its oom adj could be downgraded, but not in a hurry.\n                mService.enqueueOomAdjTargetLocked(r.curApp);\n            }\n        }\n        // And BroadcastRecord state related to ordered delivery, if appropriate\n        if (ordered) {\n            r.receiver = null;\n            r.curFilter = null;\n            filter.receiverList.curBroadcast = null;\n        }\n    }\n}\n</code></pre> <p>\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u4e3b\u8981\u505a\u4e86\u6743\u9650\u6821\u9a8c\uff0c\u7136\u540e\u6d3e\u53d1\u3002</p> <ul> <li>\u8df3\u8fc7skip\u7684\u573a\u666f</li> <li>\u68c0\u67e5\u5e7f\u64ad\u53d1\u9001\u8005\u7684\u6743\u9650</li> </ul> <pre><code>//\u6ce8\u518c\u8005 \u7533\u8bf7\u6743\u9650\n//\u53d1\u9001\u8005 \u672a\u8bbe\u7f6e\u6743\u9650\n11-11 03:24:54.935  2596  2938 W BroadcastQueue: Permission Denial: broadcasting Intent { act=android.intent.action.extfwk.test flg=0x10 } from com.android.extfwk (pid=11568, uid=10205) requires android.permission.extfwk.test due to registered receiver BroadcastFilter{4a03f68 1000/u0 ReceiverList{c0d228b 11361 com.android.systemui/1000/u0 remote:ccee05a}}\n</code></pre> <ul> <li>\u68c0\u67e5\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u6743\u9650</li> </ul> <pre><code>//\u6ce8\u518c\u8005 \u672a\u7533\u8bf7\u6743\u9650\n//\u53d1\u9001\u8005 \u8bbe\u7f6e\u6743\u9650\n11-11 03:29:34.723  2596  2938 W BroadcastQueue: Permission Denial: receiving Intent { act=android.intent.action.extfwk.test flg=0x10 } to ProcessRecord{2501df2 12153:com.android.extfwk/u0a205} (pid=12153, uid=10205) requires android.permission.extfwk.test due to sender com.android.bctest (uid 1000)\n</code></pre> <ul> <li>\u8c03\u7528performReceiveLocked()\u6d3e\u53d1</li> </ul> <p>\u68c0\u67e5\u6743\u9650\u7684\u8c03\u7528\u6d41\u7a0b\uff1a</p> <pre><code>mService.checkComponentPermission(), mService\u662fActivityManagerService\n---&gt; ActivityManagerService.checkComponentPermission()\n    ---&gt; ActivityManager.checkComponentPermission()\n        ---&gt; AppGlobals.getPackageManager().checkUidPermission()\n            ---&gt; PackageManagerService.checkUidPermission() , \n                    IPackageManagerImpl iPackageManager = m.new IPackageManagerImpl();\n                    ServiceManager.addService(\"package\", iPackageManager);\n\n                    public class IPackageManagerImpl extends IPackageManagerBase {}\n\n                    IPackageManagerBase.checkUidPermission ---&gt;  snapshot().checkUidPermission(permName, uid);\n                        ---&gt; ComputerEngine.checkUidPermission()\n                            ---&gt; PermissionManager.checkUidPermission()\n                                ---&gt; PermissionManagerService.checkUidPermission()\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#performreceivelocked","title":"performReceiveLocked","text":"<pre><code>void performReceiveLocked(ProcessRecord app, IIntentReceiver receiver,\n        Intent intent, int resultCode, String data, Bundle extras,\n        boolean ordered, boolean sticky, int sendingUser,\n        int receiverUid, int callingUid) throws RemoteException {\n    // Send the intent to the receiver asynchronously using one-way binder calls.\n    if (app != null) {\n        final IApplicationThread thread = app.getThread();\n        if (thread != null) {// \u56e0\u4e3a\u662f\u52a8\u6001\u6ce8\u518c\u5e7f\u64ad\uff0c\u6240\u4ee5\u4e0d\u4e3a\u7a7a\n            // If we have an app thread, do the call through that so it is\n            // correctly ordered with other one-way calls.\n            try {\n                // \u8c03\u7528ApplicationThread\u5bf9\u8c61\u7684Binder\u4ee3\u7406\u5bf9\u8c61\u7684\u51fd\u6570\u6765\u5411\u5b83\u53d1\u9001\u5e7f\u64ad\n                // ActivityThread.java\u7684scheduleRegisteredReceiver(\u8fd9\u91cc\u5df2\u7ecf\u662fapp\u7ebf\u7a0b\u4e86)\n                thread.scheduleRegisteredReceiver(receiver, intent, resultCode,\n                        data, extras, ordered, sticky, sendingUser,\n                        app.mState.getReportedProcState());\n            // TODO: Uncomment this when (b/28322359) is fixed and we aren't getting\n            // DeadObjectException when the process isn't actually dead.\n            //} catch (DeadObjectException ex) {\n            // Failed to call into the process.  It's dying so just let it die and move on.\n            //    throw ex;\n            } catch (RemoteException ex) {\n                // Failed to call into the process. It's either dying or wedged. Kill it gently.\n                synchronized (mService) {\n                    Slog.w(TAG, \"Can't deliver broadcast to \" + app.processName\n                            + \" (pid \" + app.getPid() + \"). Crashing it.\");\n                    app.scheduleCrashLocked(\"can't deliver broadcast\",\n                            CannotDeliverBroadcastException.TYPE_ID, /* extras=*/ null);\n                }\n                throw ex;\n            }\n        } else {\n            // Application has died. Receiver doesn't exist.\n            throw new RemoteException(\"app.thread must not be null\");\n        }\n    } else {\n        // \u76f4\u63a5\u8c03\u7528\u4e0e\u5b83\u5173\u8054\u7684\u4e00\u4e2aInnerReceiver\u5bf9\u8c61\u7684Binder\u4ee3\u7406\u5bf9\u8c61\u7684\u6210\u5458\u51fd\u6570performReceive\u6765\u5411\u5b83\u53d1\u9001\u5e7f\u64ad\n        receiver.performReceive(intent, resultCode, data, extras, ordered,\n                sticky, sendingUser);\n    }\n    FrameworkStatsLog.write(BROADCAST_DELIVERY_EVENT_REPORTED,\n            receiverUid == -1 ? Process.SYSTEM_UID : receiverUid,\n            callingUid == -1 ? Process.SYSTEM_UID : callingUid,\n            ActivityManagerService.getShortAction(intent.getAction()),\n            BROADCAST_DELIVERY_EVENT_REPORTED__RECEIVER_TYPE__RUNTIME,\n            BROADCAST_DELIVERY_EVENT_REPORTED__PROC_START_TYPE__PROCESS_START_TYPE_WARM);\n}\n</code></pre> <p>\u5f53\u4e00\u4e2aActivity\u6216\u8005\u4e00\u4e2aService\u5c06\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\u6ce8\u518c\u5230AMS\u4e2d\u65f6\uff0c\u5b83\u6240\u5728\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u4f1a\u5148\u5c06\u8fd9\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\u5c01\u88c5\u6210\u4e00\u4e2a\u7c7b\u578b\u4e3aInnerReceiver\u7684Binder\u672c\u5730\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u6ce8\u518c\u5230AMS\u4e2d\u3002\u56e0\u6b64\u5f53AMS\u8981\u5c06\u4e00\u4e2a\u5e7f\u64ad\u53d1\u7ed9\u4e00\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5c06\u8fd9\u4e2a\u5e7f\u64ad\u8f6c\u53d1\u7ed9\u5c01\u88c5\u4e86\u8fd9\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u4e00\u4e2aInnerReceiver\u5bf9\u8c61\u6765\u5904\u7406\u3002</p> <p>AMS\u5411\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u5e7f\u64ad\u65f6\uff0c\u91c7\u7528\u7684\u662f\u5f02\u6b65\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\u3002\u524d\u9762\u63d0\u5230\uff0c\u53d1\u9001\u7ed9\u4e00\u4e2aBinder\u5b9e\u4f53\u5bf9\u8c61\u7684\u6240\u6709\u5f02\u6b65\u4e8b\u7269\u90fd\u662f\u4fdd\u5b58\u5728\u4e00\u4e2a\u5f02\u6b65\u4e8b\u7269\u961f\u5217\u4e2d\u7684\u3002\u7531\u4e8e\u4fdd\u5b58\u5728\u4e00\u4e2a\u5f02\u6b65\u4e8b\u7269\u961f\u5217\u4e2d\u7684\u5f02\u6b65\u4e8b\u7269\u5728\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u4f1a\u5f97\u5230\u5904\u7406\uff0c\u5373\u53ea\u6709\u961f\u5217\u5934\u90e8\u7684\u5f02\u6b65\u4e8b\u7269\u624d\u4f1a\u5f97\u5230\u5904\u7406\uff0c\u56e0\u6b64AMS\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u53d1\u9001\u7ed9\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u5e7f\u64ad\u90fd\u662f\u6309\u7167\u8fd9\u4e2a\u53d1\u9001\u987a\u5e8f\u6765\u4e32\u884c\u7684\u88ab\u63a5\u53d7\u548c\u5904\u7406\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitythreadscheduleregisteredreceiver","title":"ActivityThread.scheduleRegisteredReceiver","text":"<pre><code>// This function exists to make sure all receiver dispatching is\n// correctly ordered, since these are one-way calls and the binder driver\n// applies transaction ordering per object for such calls.\npublic void scheduleRegisteredReceiver(IIntentReceiver receiver, Intent intent,\n        int resultCode, String dataStr, Bundle extras, boolean ordered,\n        boolean sticky, int sendingUser, int processState) throws RemoteException {\n    updateProcessState(processState, false);\n    receiver.performReceive(intent, resultCode, dataStr, extras, ordered,\n            sticky, sendingUser);\n}\n</code></pre> <p>\u5904\u7406\u975e\u4e32\u884c\u5316\u52a8\u6001\u5e7f\u64ad\uff0c\u975e\u4e32\u5316ordered\u662ffalse\uff0c\u8fd9\u91cc\u7684receiver\u5bf9\u5e94\u7684\u662fLoadedApk.ReceiverDispatcher.InnerReceiver\u5bf9\u8c61\u3002\u4ece\u51fd\u6570\u91cc\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u548c\u7b2c\u4e0a\u6b65\u7684else\u5206\u652f\u4e00\u6837\uff0c\u6700\u7ec8\u8fd8\u662f\u6267\u884creceiver.performReceive\u65b9\u6cd5\u6765\u53d1\u9001\u5e7f\u64ad\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#innerreceiverperformreceive","title":"InnerReceiver.performReceive","text":"<pre><code>public final class LoadedApk {\n    static final class ReceiverDispatcher {\n\n        final static class InnerReceiver extends IIntentReceiver.Stub {\n            final WeakReference&lt;LoadedApk.ReceiverDispatcher&gt; mDispatcher;\n\n\n            @Override\n            public void performReceive(Intent intent, int resultCode, String data,\n                    Bundle extras, boolean ordered, boolean sticky, int sendingUser) {\n                final LoadedApk.ReceiverDispatcher rd;\n                if (intent == null) {\n                    Log.wtf(TAG, \"Null intent received\");\n                    rd = null;\n                } else {\n                    //\u83b7\u53d6rd\u7684\u5b9e\u4f8b\u5bf9\u8c61\n                    rd = mDispatcher.get();\n                }\n                if (ActivityThread.DEBUG_BROADCAST) {\n                    int seq = intent.getIntExtra(\"seq\", -1);\n                    Slog.i(ActivityThread.TAG, \"Receiving broadcast \" + intent.getAction()\n                            + \" seq=\" + seq + \" to \" + (rd != null ? rd.mReceiver : null));\n                }\n                if (rd != null) {\n                    //\u5b58\u5728\u5e7f\u64ad\uff0crd \u4e0d\u4e3a\u7a7a\uff0c\u8c03\u7528LoadedApk.ReceiverDispatcher\u5bf9\u8c61\u7684performReceive\u65b9\u6cd5\n                    rd.performReceive(intent, resultCode, data, extras,\n                            ordered, sticky, sendingUser);\n                } else {\n                    // The activity manager dispatched a broadcast to a registered\n                    // receiver in this process, but before it could be delivered the\n                    // receiver was unregistered.  Acknowledge the broadcast on its\n                    // behalf so that the system's broadcast sequence can continue.\n                    if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                            \"Finishing broadcast to unregistered receiver\");\n                    IActivityManager mgr = ActivityManager.getService();\n                    try {\n                        if (extras != null) {\n                            extras.setAllowFds(false);\n                        }\n                        //\u4e0d\u5b58\u5728\u5e7f\u64ad\uff0crd\u4e3a\u7a7a\uff0c\u8c03\u7528activityManagerService\u5bf9\u8c61\u7684finishReceiver\u7ed3\u675f\u5e7f\u64ad\u7684\u53d1\u9001\u63a5\u53d7\u8fc7\u7a0b\n                        mgr.finishReceiver(this, resultCode, data, extras, false, intent.getFlags());\n                    } catch (RemoteException e) {\n                        throw e.rethrowFromSystemServer();\n                    }\n                }\n            }\n        }\n\n    }\n}\n</code></pre> <p>LoadedApk.ReceiverDispatcher\u5bf9\u8c61\u5c01\u88c5\u4e86\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u5982\u679c\u8be5\u5e7f\u64ad\u63a5\u6536\u8005\u6ce8\u518c\u4e86\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u5c31\u4f1a\u5b58\u5728\uff0c\u8fd9\u91cc\u5c31\u4f1a\u8c03\u7528LodedApk.ReceiverDispatcher.performReceive\uff0c\u5426\u5219\u5c31\u4f1a\u8c03\u7528AMS.finishReceiver\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u770b\u5b58\u5728\u5e7f\u64ad\u7684\u60c5\u51b5\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#receiverdispatcherperformreceive","title":"ReceiverDispatcher.performReceive","text":"<pre><code>public final class LoadedApk {\n    static final class ReceiverDispatcher {\n\n\n        public void performReceive(Intent intent, int resultCode, String data,\n                Bundle extras, boolean ordered, boolean sticky, int sendingUser) {\n            // \u9996\u5148\u5c06\u53c2\u6570Intent\u6240\u63cf\u8ff0\u7684\u4e00\u4e2a\u5e7f\u64ad\u5c01\u88c5\u6210\u4e00\u4e2aArgs\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8fd9\u4e2aArgs\u5bf9\u8c61\u5c01\u88c5\u6210\u4e00\u4e2a\u6d88\u606f\u5bf9\u8c61\uff0c\n            // \u7136\u540e\u5c06\u8fd9\u4e2a\u6d88\u606f\u5bf9\u8c61\u53d1\u9001\u5230\u5e94\u7528\u7a0b\u5e8f\u4e3b\u7ebf\u7a0b\u7684\u6d88\u606f\u961f\u5217\u4e2d\u3002\n            final Args args = new Args(intent, resultCode, data, extras, ordered,\n                    sticky, sendingUser);\n            if (intent == null) {\n                Log.wtf(TAG, \"Null intent received\");\n            } else {\n                if (ActivityThread.DEBUG_BROADCAST) {\n                    int seq = intent.getIntExtra(\"seq\", -1);\n                    Slog.i(ActivityThread.TAG, \"Enqueueing broadcast \" + intent.getAction()\n                            + \" seq=\" + seq + \" to \" + mReceiver);\n                }\n            }\n            // \u5c06args\u5bf9\u8c61post\u5230\u4e3b\u7ebf\u7a0b\u7684\u6d88\u606f\u961f\u5217\u91cc\u9762\uff0c\u4f5c\u4e3a\u4e00\u4e2aRunnable\u8c03\u5ea6\u800c\u4e0d\u662f\u5728handleMessage\u4e2d\u5904\u7406\uff0c\n            // \u56e0\u6b64\u8fd9\u91cc\u4e0d\u4e45\u540e\u4f1a\u8c03\u7528Args.run\u51fd\u6570\n            if (intent == null || !mActivityThread.post(args.getRunnable())) {\n                if (mRegistered &amp;&amp; ordered) {\n                    IActivityManager mgr = ActivityManager.getService();\n                    if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                            \"Finishing sync broadcast to \" + mReceiver);\n                    args.sendFinished(mgr);\n                }\n            }\n        }\n\n    }\n}\n</code></pre> <p>\u521d\u59cb\u5316\u4e86\u4e00\u4e2aArgs\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5b9e\u73b0\u4e86Runnable\u63a5\u53e3\uff0c\u5728if\u8bed\u53e5\u4e2d\u8c03\u7528post\u65b9\u6cd5\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528Args\u4e2d\u7684run\u65b9\u6cd5\u3002</p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u7684\u91cd\u70b9\u5728\u4e8emActivityThread.post(args.getRunnable())\uff0c\u4e0d\u8981\u88abmActivityThread\u7684\u540d\u5b57\u8ff7\u60d1\uff0c\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2aHandler\uff0c\u6b63\u662f\u5728\u5e7f\u64ad\u52a8\u6001\u6ce8\u518c\u7684\u65f6\u5019\u8bbe\u7f6e\u7684\u90a3\u4e2ahandler\u901a\u8fc7\u8fd9\u4e2apost\uff0c\u5207\u6362\u4e86\u7ebf\u7a0b\uff0c\u5f00\u59cb\u6267\u884creceiver\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#argsrun","title":"Args.run","text":"<pre><code>static final class ReceiverDispatcher {\n\n    final class Args extends BroadcastReceiver.PendingResult {\n        private Intent mCurIntent;\n        private final boolean mOrdered;\n        private boolean mDispatched;\n        private boolean mRunCalled;\n\n        public Args(Intent intent, int resultCode, String resultData, Bundle resultExtras,\n                boolean ordered, boolean sticky, int sendingUser) {\n            super(resultCode, resultData, resultExtras,\n                    mRegistered ? TYPE_REGISTERED : TYPE_UNREGISTERED, ordered,\n                    sticky, mIIntentReceiver.asBinder(), sendingUser, intent.getFlags());\n            mCurIntent = intent;\n            mOrdered = ordered;\n        }\n\n        public final Runnable getRunnable() {\n            return () -&gt; {\n                //mReceiver\u6307\u5411\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\n                final BroadcastReceiver receiver = mReceiver;\n                final boolean ordered = mOrdered;\n\n                if (ActivityThread.DEBUG_BROADCAST) {\n                    int seq = mCurIntent.getIntExtra(\"seq\", -1);\n                    Slog.i(ActivityThread.TAG, \"Dispatching broadcast \" + mCurIntent.getAction()\n                            + \" seq=\" + seq + \" to \" + mReceiver);\n                    Slog.i(ActivityThread.TAG, \"  mRegistered=\" + mRegistered\n                            + \" mOrderedHint=\" + ordered);\n                }\n\n                final IActivityManager mgr = ActivityManager.getService();\n                final Intent intent = mCurIntent;\n                if (intent == null) {\n                    Log.wtf(TAG, \"Null intent being dispatched, mDispatched=\" + mDispatched\n                            + (mRunCalled ? \", run() has already been called\" : \"\"));\n                }\n\n                mCurIntent = null;\n                mDispatched = true;\n                mRunCalled = true;\n                if (receiver == null || intent == null || mForgotten) {\n                    if (mRegistered &amp;&amp; ordered) {\n                        if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                                \"Finishing null broadcast to \" + mReceiver);\n                        //receiver\u4e3a\u7a7a\u76f4\u63a5\u53d1\u9001finish\n                        sendFinished(mgr);\n                    }\n                    return;\n                }\n\n                if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                            \"broadcastReceiveReg: \" + intent.getAction());\n                }\n\n                try {\n                    //\u8fd9\u91cc\u5904\u7406\u7684\u662f\u52a8\u6001\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u9ed8\u8ba4\u8ba4\u4e3a\u63a5\u6536\u8005BroadcastReceiver\u5df2\u7ecf\u5b58\u5728\n                    ClassLoader cl = mReceiver.getClass().getClassLoader();\n                    intent.setExtrasClassLoader(cl);\n                    // TODO: determine at registration time if caller is\n                    // protecting themselves with signature permission\n                    intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent),\n                            mContext.getAttributionSource());\n                    setExtrasClassLoader(cl);\n                    receiver.setPendingResult(this);\n                    // \u7ec8\u4e8e\u770b\u5230\u4e86\u719f\u6089\u7684onReceive\u56de\u8c03\u4e86\n                    receiver.onReceive(mContext, intent);\n                } catch (Exception e) {\n                    if (mRegistered &amp;&amp; ordered) {//\u68c0\u67e5\u5f53\u524d\u5e7f\u64ad\u662f\u5426\u662f\u6709\u5e8f\u5e7f\u64ad\uff0c\u5e76\u4e14\u5e7f\u64ad\u63a5\u6536\u8005\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u5230AMS\u4e2d\n                        if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                                \"Finishing failed broadcast to \" + mReceiver);\n                        //\u901a\u77e5AMS\uff0c\u5b83\u524d\u9762\u8f6c\u53d1\u8fc7\u6765\u7684\u6709\u5e8f\u5e7f\u64ad\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\uff0c\u8fd9\u65f6AMS\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5c06\u8fd9\u4e2a\u6709\u5e8f\u5e7f\u64ad\u8f6c\u53d1\u7ed9\u4e0b\u4e00\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u4e86\n                        sendFinished(mgr);\n                    }\n                    if (mInstrumentation == null ||\n                            !mInstrumentation.onException(mReceiver, e)) {\n                        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                        throw new RuntimeException(\n                                \"Error receiving broadcast \" + intent\n                                        + \" in \" + mReceiver, e);\n                    }\n                }\n\n                //\u53ea\u6709\u6709\u5e8f\u5e7f\u64ad\u624d\u4f1a\u6267\u884c\u6b64\u6b65\u9aa4\n                if (receiver.getPendingResult() != null) {\n                    finish();\n                }\n                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n            };\n        }\n    }\n\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\u8c03\u7528BroadcastReceiver.onReceive\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u4f1a\u6267\u884c\u5b8c\u4e00\u6b21\u65e0\u5e8f\u5e7f\u64ad\u7684\u53d1\u9001\u63a5\u53d7\u8fc7\u7a0b\u3002</p> <p>\u5982\u679c\u662f\u6709\u5e8f\u5e7f\u64ad\u5219\u8fd8\u9700\u8981\u53d1\u9001finish\u3002  </p> <p>LodedApk.ReceiverDispatcher.performReceive\u51fd\u6570\u4e2d\uff0c\u5982\u679c\u5e7f\u64ad\u4e0d\u5b58\u5728\u5c31\u4f1a\u8c03\u7528AMS.finishReceiver\u65b9\u6cd5\uff0c\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u770bAMS.finishReceiver()\u6d41\u7a0b\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#amsfinishreceiver","title":"AMS.finishReceiver()","text":"<pre><code>public void finishReceiver(IBinder who, int resultCode, String resultData,\n            Bundle resultExtras, boolean resultAbort, int flags) {\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Finish receiver: \" + who);\n\n    // Refuse possible leaked file descriptors\n    if (resultExtras != null &amp;&amp; resultExtras.hasFileDescriptors()) {\n        throw new IllegalArgumentException(\"File descriptors passed in Bundle\");\n    }\n\n    final long origId = Binder.clearCallingIdentity();\n    try {\n        boolean doNext = false;\n        BroadcastRecord r;\n        BroadcastQueue queue;\n\n        // \u9996\u5148\u8fa8\u522b\u51fa\u5f53\u524dreceiver\u6240\u5728\u7684BroadcastRecord\u5c5e\u4e8e\u524d\u53f0\u5e7f\u64ad\u8fd8\u662f\u540e\u53f0\u5e7f\u64ad\uff0c\u7136\u540e\u5728\u5bf9\u5e94\u7684\n        // BroadcastQueue\u4e2d\u627e\u51fa\u5bf9\u5e94\u7684BroadcastRecord\uff0c\u91cc\u9762\u7684finishReceiverLocked\u51fd\u6570\u5728\u524d\u9762\u4ecb\u7ecd\u8fc7\uff0c\n        // \u4e3b\u8981\u662f\u91cd\u65b0\u8bbe\u7f6eBroadcastRecord\u91cc\u9762\u4e00\u4e9b\u72b6\u6001\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8eBroadcastRecord\u5c06\u5e7f\u64ad\u53d1\u9001\u7ed9\u4e0b\u4e00\u4e2a\n        // \u63a5\u6536\u8005\u3002\u5c24\u5176\u7684\uff0c\u5982\u679c\u524d\u9762\u7684mAbortBroadcast\u8bbe\u7f6e\u4e3atrue\uff0c\u90a3\u4e48BroadcastRecord\u7684\u6210\u5458resultAbort\n        // \u4f1a\u8bbe\u7f6e\u6210true\n        synchronized(this) {\n            if (isOnFgOffloadQueue(flags)) {\n                queue = mFgOffloadBroadcastQueue;\n            } else if (isOnBgOffloadQueue(flags)) {\n                queue = mBgOffloadBroadcastQueue;\n            } else {\n                queue = (flags &amp; Intent.FLAG_RECEIVER_FOREGROUND) != 0\n                        ? mFgBroadcastQueue : mBgBroadcastQueue;\n            }\n\n            r = queue.getMatchingOrderedReceiver(who);\n            if (r != null) {\n                //\u7ed3\u675f\u5f53\u524d\u6b63\u5728\u53d1\u9001\u7684\u5e7f\u64ad\n                doNext = r.queue.finishReceiverLocked(r, resultCode,\n                    resultData, resultExtras, resultAbort, true);\n            }\n            if (doNext) {\n                //\u7acb\u9a6c\u8c03\u5ea6\u4e00\u6b21\u53d1\u9001\u5e7f\u64ad\uff0c\u53d1\u9001\u4e0b\u4e00\u6b21\u5e7f\u64ad\uff0c\u4f46\u662fprocessNextBroadcast\u662f\u4e00\u4e2a\u540c\u6b65\u51fd\u6570\uff0c\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\n                r.queue.processNextBroadcastLocked(/*fromMsg=*/ false, /*skipOomAdj=*/ true);\n            }\n            // updateOomAdjLocked() will be done here\n            trimApplicationsLocked(false, OomAdjuster.OOM_ADJ_REASON_FINISH_RECEIVER);\n        }\n\n    } finally {\n        Binder.restoreCallingIdentity(origId);\n    }\n}\n</code></pre> <p>\u5982\u679c\u53d1\u9001\u5e7f\u64ad\u65f6\u63a5\u6536\u8005\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u8981\u5b8c\u6210\u8be5\u6b21\u5e7f\u64ad\uff0c\u5e76\u4e14\u5224\u65ad\u662f\u5426\u6267\u884c\u53d1\u9001\u7ed9\u4e0b\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u5982\u679c\u9700\u8981\u53d1\u9001\u7ed9\u4e0b\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\u8981\u518d\u6b21\u8c03\u7528BroadcastQueue.processNextBroadcast\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u53c8\u56de\u5230\u4e86\u524d\u9762\u7684\u6b65\u9aa4\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_40","title":"\u6709\u5e8f\u5e7f\u64ad","text":"<p>BroadcastQueue.processNextBroadcast\u65b9\u6cd5\u4e2d\uff0c\u8be5\u65b9\u6cd5\u5728\u6267\u884c\u5b8c\u65e0\u5e8f\u5e7f\u64ad\u540e\u5f00\u59cb\u6267\u884c\u6709\u5e8f\u5e7f\u64ad\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#pending-broadcast","title":"\u5904\u7406Pending Broadcast","text":"<pre><code>// Now take care of the next serialized one...\n\n// If we are waiting for a process to come up to handle the next\n// broadcast, then do nothing at this point.  Just in case, we\n// check that the process we're waiting for still exists.\n// mPendingBroadcast\u5bf9\u8c61\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u6b63\u5728\u7b49\u5f85\u9759\u6001\u6ce8\u518c\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u542f\u52a8\u8d77\u6765\u7684\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\u7684\nif (mPendingBroadcast != null) {\n    if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n            \"processNextBroadcast [\" + mQueueName + \"]: waiting for \"\n            + mPendingBroadcast.curApp);\n\n    boolean isDead;\n    //\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u8fdb\u7a0b\u7684pid\n    if (mPendingBroadcast.curApp.getPid() &gt; 0) {\n        synchronized (mService.mPidsSelfLocked) {\n            //\u5982\u679c\u5b58\u5728pid\uff0c\u5219\u4ecemPidsSelfLocked\u4e2d\u83b7\u53d6\u8fd9\u4e2a\u8fdb\u7a0b\u7684ProcessRecord proc\n            ProcessRecord proc = mService.mPidsSelfLocked.get(\n                    mPendingBroadcast.curApp.getPid());\n            //\u5982\u679cproc\u5b58\u5728\uff0c\u800c\u4e14\u6ca1\u6709\u53d1\u751fcrash\uff0c\u5219isDead = false\n            isDead = proc == null || proc.mErrorState.isCrashing();\n        }\n    } else {\n        //\u8fdb\u7a0b\u7684pid\u4e0d\u5b58\u5728\uff0c\u5219\u4ecemProcessList\u901a\u8fc7\u540d\u5b57\u83b7\u53d6\u8be5\u8fdb\u7a0b\u7684ProcessRecord proc\n        final ProcessRecord proc = mService.mProcessList.getProcessNamesLOSP().get(\n                mPendingBroadcast.curApp.processName, mPendingBroadcast.curApp.uid);\n        //\u5982\u679cproc\u5b58\u5728\uff0c\u800c\u4e14\u8be5\u8fdb\u7a0b\u6b63\u5728\u542f\u52a8\u4e2disPendingStart\uff0c\u5219isDead = false\n        isDead = proc == null || !proc.isPendingStart();\n    }\n    if (!isDead) {\n        // It's still alive, so keep waiting\n        // \u5982\u679c\u5e94\u7528\u5df2\u7ecf\u542f\u52a8\uff0c\u4f1a\u8c03\u7528AMS\u7684\u51fd\u6570\u6765\u5904\u7406\u9759\u6001\u5e7f\u64ad\uff0c\u8fd9\u91cc\u76f4\u63a5return\n        return;\n    } else {\n        //\u5982\u679capp\u6b7b\u6389\u4e86\n        Slog.w(TAG, \"pending app  [\"\n                + mQueueName + \"]\" + mPendingBroadcast.curApp\n                + \" died before responding to broadcast\");\n        mPendingBroadcast.state = BroadcastRecord.IDLE;\n        //\u4e0b\u4e00\u6b21\u5904\u7406\u8fd9\u4e2aBroadcastRecord\u7684nextReceiver\u8fd8\u662f\u8fd9\u4e2arecIdx\n        mPendingBroadcast.nextReceiver = mPendingBroadcastRecvIndex;\n        //app\u6b7b\u6389\u4e86\u6e05\u9664mPendingBroadcast = null, \u8df3\u8fc7\u8fd9\u4e2amPendingBroadcast\n        mPendingBroadcast = null;\n    }\n}\n</code></pre> <p>\u5904\u7406\u4fdd\u5b58\u5728\u6709\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mPendingBroadcast\u4e2d\u7684\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\u3002\u4ece\u524d\u9762\u53ef\u77e5\uff0c\u6709\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mOrderedBroadcast\u63cf\u8ff0\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u6709\u53ef\u80fd\u662f\u9759\u6001\u6ce8\u518c\u7684\uff0c\u800c\u8fd9\u4e9b\u9759\u6001\u6ce8\u518c\u7684\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u53ef\u80fd\u8fd8\u6ca1\u6709\u542f\u52a8\u8d77\u6765\uff0c\u56e0\u6b64AMS\u5c06\u4e00\u4e2a\u5e7f\u64ad\u53d1\u9001\u7ed9\u5b83\u4eec\u5904\u7406\u65f6\uff0c\u9996\u5148\u5c06\u5b83\u4eec\u542f\u52a8\u8d77\u6765\u3002\u4e8b\u5b9e\u4e0a\uff0cAMS\u53ea\u9700\u8981\u5c06\u4ed6\u4eec\u6240\u8fd0\u884c\u5728\u7684\u8fdb\u7a0b\u542f\u52a8\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5f53\u8fd9\u4e9b\u8fdb\u7a0b\u63a5\u6536\u5230AMS\u53d1\u9001\u7684\u5e7f\u64ad\u540e\uff0c\u5c31\u4f1a\u4e3b\u52a8\u5c06\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u542f\u52a8\u8d77\u6765\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_41","title":"\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5e7f\u64ad","text":"<pre><code>boolean looped = false;\n\ndo {//\u8fd9\u91cc\u7684do-while\u53ea\u4f1a\u4ecemOrderedBroadcasts\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2aBroadcastRecord\u8fdb\u884c\u540e\u7eed\u7684\u5904\u7406\n    final long now = SystemClock.uptimeMillis();\n    //\u4ece mOrderedBroadcasts \u6709\u5e8f\u5e7f\u64ad\u961f\u5217\uff0c\u4f9d\u6b21\u53d6\u51fa\u6765\n    r = mDispatcher.getNextBroadcastLocked(now);\n\n    if (r == null) {\n        // No more broadcasts are deliverable right now, so all done!\n        // \u8c03\u5ea6\u961f\u5217mOrderedBroadcasts\u4e2d\u7684\u5e7f\u64ad\u5df2\u7ecf\u5168\u90e8\u5904\u7406\u5b8c\u6210\n        mDispatcher.scheduleDeferralCheckLocked(false);\n        synchronized (mService.mAppProfiler.mProfilerLock) {\n            //AMS\u5c06\u6240\u6709\u6302\u8d77\u7684gc\u8fdb\u7a0bmProcessesToGc\u8fdb\u884c\u6309\u987a\u5e8f\u7684gc\n            mService.mAppProfiler.scheduleAppGcsLPf();\n        }\n        if (looped &amp;&amp; !skipOomAdj) {\n            // If we had finished the last ordered broadcast, then\n            // make sure all processes have correct oom and sched\n            // adjustments.\n            //adj\u8c03\u6574\n            mService.updateOomAdjPendingTargetsLocked(\n                    OomAdjuster.OOM_ADJ_REASON_START_RECEIVER);\n        }\n\n        // when we have no more ordered broadcast on this queue, stop logging\n        if (mService.mUserController.mBootCompleted &amp;&amp; mLogLatencyMetrics) {\n            mLogLatencyMetrics = false;\n        }\n\n        //\u7ed3\u675f\u672c\u6b21processNextBroadcastLocked\n        return;\n    }\n\n    // \u662f\u5426\u9700\u8981\u5f3a\u5236\u7ed3\u675frecevie\n    boolean forceReceive = false;\n\n    // Ensure that even if something goes awry with the timeout\n    // detection, we catch \"hung\" broadcasts here, discard them,\n    // and continue to make progress.\n    //\n    // This is only done if the system is ready so that early-stage receivers\n    // don't get executed with timeouts; and of course other timeout-\n    // exempt broadcasts are ignored.\n    // \u63a5\u6536\u8005\u7684\u4e2a\u6570\n    int numReceivers = (r.receivers != null) ? r.receivers.size() : 0;\n    // 1. systemReady\u4e4b\u540emService.mProcessesReady = true\n    // 2. timeoutExempt\u53ea\u6709ACTION_PRE_BOOT_COMPLETED\u624d\u4f1a\u8bbe\u7f6e\u4e3atrue\n    // 3. r.dispatchTime\u662f\u5f00\u59cb\u5206\u53d1\u8be5BroadcastRecord r\u7684\u65f6\u95f4\n    if (mService.mProcessesReady &amp;&amp; !r.timeoutExempt &amp;&amp; r.dispatchTime &gt; 0) {\n        // 1. \u63a5\u6536\u8005\u7684\u4e2a\u6570 &gt; 0\n        // 2. \u5f53\u524d\u65f6\u95f4now &gt; r.dispatchTime + (2 * mConstants.TIMEOUT(10s/60s) * numReceivers)\n        if ((numReceivers &gt; 0) &amp;&amp;\n                (now &gt; r.dispatchTime + (2 * mConstants.TIMEOUT * numReceivers))) {\n            Slog.w(TAG, \"Hung broadcast [\"\n                    + mQueueName + \"] discarded after timeout failure:\"\n                    + \" now=\" + now\n                    + \" dispatchTime=\" + r.dispatchTime\n                    + \" startTime=\" + r.receiverTime\n                    + \" intent=\" + r.intent\n                    + \" numReceivers=\" + numReceivers\n                    + \" nextReceiver=\" + r.nextReceiver\n                    + \" state=\" + r.state);\n            //\u51fa\u73b0\u8d85\u65f6\uff0c\u5f3a\u5236\u7ed3\u675f\n            broadcastTimeoutLocked(false); // forcibly finish this broadcast\n            //\u91cd\u7f6e\u53c2\u6570\uff0c\u7ee7\u7eed\u5904\u7406\u6709\u5e8f\u5e7f\u64ad\u8c03\u5ea6\u961f\u5217mOrderedBroadcasts\u7684\u4e0b\u4e00\u4e2a\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\n            forceReceive = true;\n            r.state = BroadcastRecord.IDLE;\n        }\n    }\n\n    if (r.state != BroadcastRecord.IDLE) {\n        if (DEBUG_BROADCAST) Slog.d(TAG_BROADCAST,\n                \"processNextBroadcast(\"\n                + mQueueName + \") called when not idle (state=\"\n                + r.state + \")\");\n        return;\n    }\n\n    // Is the current broadcast is done for any reason?\n    // r.resultAbort\u8868\u793a\u5e7f\u64ad\u5df2\u7ecf\u5411\u6240\u6709\u7684receiver\u53d1\u9001\u7ed3\u675f\u6216\u8005\u4e2d\u9014\u88ab\u53d6\u6d88, \u5982\u679cr.resultAbort\u4e3atrue\uff0c\u4f1a\u505c\u6b62\u5904\u7406\u5f53\u524d\u6b63\u5728\u53d1\u9001\u7684BroadcastRecord\uff0c\u8fd9\u6837\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\u7684\u63a5\u6536\u8005\u4e5f\u5c31\u6536\u4e0d\u5230\u8fd9\u4e2a\u5e7f\u64ad\u4e86\n    // forceReceive\u68c0\u67e5BroadcastRecord\u5bf9\u8c61r\u6240\u63cf\u8ff0\u7684\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\u662f\u5426\u5df2\u7ecf\u5904\u7406\u5b8c\u6210\uff0c\u6216\u8005\u662f\u5426\u5df2\u7ecf\u88ab\u5f3a\u5236\u7ed3\u675f\u4e86\u3002\n    if (r.receivers == null || r.nextReceiver &gt;= numReceivers\n            || r.resultAbort || forceReceive) {\n        // Send the final result if requested\n        if (r.resultTo != null) {//\u662f\u5426\u6709resultTo\uff0c\u5982\u679c\u6709\u5c06\u7ed3\u679c\u56de\u4f20resultTo\n            boolean sendResult = true;\n\n            // if this was part of a split/deferral complex, update the refcount and only\n            // send the completion when we clear all of them\n            if (r.splitToken != 0) {\n                int newCount = mSplitRefcounts.get(r.splitToken) - 1;\n                if (newCount == 0) {\n                    // done!  clear out this record's bookkeeping and deliver\n                    if (DEBUG_BROADCAST_DEFERRAL) {\n                        Slog.i(TAG_BROADCAST,\n                                \"Sending broadcast completion for split token \"\n                                + r.splitToken + \" : \" + r.intent.getAction());\n                    }\n                    mSplitRefcounts.delete(r.splitToken);\n                } else {\n                    // still have some split broadcast records in flight; update refcount\n                    // and hold off on the callback\n                    if (DEBUG_BROADCAST_DEFERRAL) {\n                        Slog.i(TAG_BROADCAST,\n                                \"Result refcount now \" + newCount + \" for split token \"\n                                + r.splitToken + \" : \" + r.intent.getAction()\n                                + \" - not sending completion yet\");\n                    }\n                    sendResult = false;\n                    mSplitRefcounts.put(r.splitToken, newCount);\n                }\n            }\n            if (sendResult) {\n                if (r.callerApp != null) {\n                    mService.mOomAdjuster.mCachedAppOptimizer.unfreezeTemporarily(\n                            r.callerApp);\n                }\n                try {\n                    if (DEBUG_BROADCAST) {\n                        Slog.i(TAG_BROADCAST, \"Finishing broadcast [\" + mQueueName + \"] \"\n                                + r.intent.getAction() + \" app=\" + r.callerApp);\n                    }\n                    //\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9app\n                    performReceiveLocked(r.callerApp, r.resultTo,\n                            new Intent(r.intent), r.resultCode,\n                            r.resultData, r.resultExtras, false, false, r.userId,\n                            r.callingUid, r.callingUid);\n                    logBootCompletedBroadcastCompletionLatencyIfPossible(r);\n                    // Set this to null so that the reference\n                    // (local and remote) isn't kept in the mBroadcastHistory.\n                    r.resultTo = null;\n                } catch (RemoteException e) {\n                    r.resultTo = null;\n                    Slog.w(TAG, \"Failure [\"\n                            + mQueueName + \"] sending broadcast result of \"\n                            + r.intent, e);\n                }\n            }\n        }\n\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Cancelling BROADCAST_TIMEOUT_MSG\");\n        //\u53d6\u6d88\u5e7f\u64ad\u8d85\u65f6\n        cancelBroadcastTimeoutLocked();\n\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n                \"Finished with ordered broadcast \" + r);\n\n        // ... and on to the next...\n        //\u6dfb\u52a0\u5230\u5e7f\u64ad\u5386\u53f2\u4e2d\u53bb\uff0c\u4ee3\u8868\u5b8c\u6210\u4e86\n        addBroadcastToHistoryLocked(r);\n        if (r.intent.getComponent() == null &amp;&amp; r.intent.getPackage() == null\n                &amp;&amp; (r.intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n            // This was an implicit broadcast... let's record it for posterity.\n            mService.addBroadcastStatLocked(r.intent.getAction(), r.callerPackage,\n                    r.manifestCount, r.manifestSkipCount, r.finishTime-r.dispatchTime);\n        }\n        //\u5b8c\u6210odered\u7684\u5e7f\u64ad\u540e\uff0c\u5728retireBroadcastLocked\u4e2d\u8bbe\u7f6emCurrentBroadcast = null(\u4e00\u822c\u5728r == mCurrentBroadcast\u65f6)\n        mDispatcher.retireBroadcastLocked(r);\n        r = null;\n        looped = true;\n        continue;\n    }\n\n    // Check whether the next receiver is under deferral policy, and handle that\n    // accordingly.  If the current broadcast was already part of deferred-delivery\n    // tracking, we know that it must now be deliverable as-is without re-deferral.\n    // \u5982\u679c\u8fd9\u4e2a\u5e7f\u64ad\u6ca1\u6709\u8fdb\u884c\u5ef6\u8fdf\uff0c\u5219\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u9700\u8981\u5ef6\u8fdf\n    if (!r.deferred) {\n        // \u83b7\u53d6\u4e0b\u4e00\u4e2anextReceiver\u7684uid\n        final int receiverUid = r.getReceiverUid(r.receivers.get(r.nextReceiver));\n        if (mDispatcher.isDeferringLocked(receiverUid)) {\n            if (DEBUG_BROADCAST_DEFERRAL) {\n                Slog.i(TAG_BROADCAST, \"Next receiver in \" + r + \" uid \" + receiverUid\n                        + \" at \" + r.nextReceiver + \" is under deferral\");\n            }\n            // If this is the only (remaining) receiver in the broadcast, \"splitting\"\n            // doesn't make sense -- just defer it as-is and retire it as the\n            // currently active outgoing broadcast.\n            BroadcastRecord defer;\n            // \u4e0b\u4e00\u4e2aReceiver\u5c06\u5ef6\u8fdf\uff0c\u518d\u4e0b\u4e00\u4e2aReceiver\u5df2\u7ecf\u6ca1\u6709\u4e86\n            if (r.nextReceiver + 1 == numReceivers) {\n                if (DEBUG_BROADCAST_DEFERRAL) {\n                    Slog.i(TAG_BROADCAST, \"Sole receiver of \" + r\n                            + \" is under deferral; setting aside and proceeding\");\n                }\n                defer = r;\n                // \u4e0b\u4e00\u4e2aReceiver\u5c06\u5ef6\u8fdf\uff0c\u518d\u4e0b\u4e00\u4e2aReceiver\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\n                // \u5219\u5728retireBroadcastLocked\u4e2d\u8bbe\u7f6emCurrentBroadcast = null(\u4e00\u822c\u5728r == mCurrentBroadcast\u65f6)\n                mDispatcher.retireBroadcastLocked(r);\n            } else {\n                ...\n            }\n            //\u5c06defer\u6dfb\u52a0\u5230\u5ef6\u8fdf\u5e7f\u64ad\u4e2d\uff0c\u6309\u7167uid\u653e\u5165\n            mDispatcher.addDeferredBroadcast(receiverUid, defer);\n            r = null;\n            looped = true;\n            continue;\n        }\n    }\n} while (r == null);\n</code></pre> <ul> <li> <p>\u5e7f\u64ad\u5df2\u7ecf\u5168\u90e8\u5904\u7406\u5b8c\u6210</p> </li> <li> <p>AMS\u5c06\u6240\u6709\u6302\u8d77\u7684gc\u8fdb\u7a0bmProcessesToGc\u8fdb\u884c\u6309\u987a\u5e8f\u7684gc</p> </li> <li> <p>adj\u8c03\u6574</p> </li> <li> <p>\u5e7f\u64ad\u672a\u5904\u7406\u5b8c</p> </li> <li> <p>\u83b7\u53d6\u63a5\u6536\u8005\u7684\u4e2a\u6570</p> </li> <li> <p>\u5224\u65adANR</p> </li> <li> <p>\u63a5\u6536\u8005\u7684\u4e2a\u6570 &gt; 0</p> </li> <li>now &gt; r.dispatchTime + (2 * mConstants.TIMEOUT(10s/60s) * numReceivers)</li> </ul> <p>now = \u5f53\u524d\u65f6\u95f4</p> <p>r.dispatchTime = \u5f00\u59cb\u5206\u53d1\u8be5BroadcastRecord r\u7684\u65f6\u95f4</p> <p>mConstants.TIMEOUT = 10s/60s</p> <p>numReceivers = \u63a5\u6536\u8005\u7684\u4e2a\u6570</p> <p>\u8c03\u7528broadcastTimeoutLocked\u51fd\u6570\u6765\u5f3a\u5236\u7ed3\u675f\u8fd9\u4e2a\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\uff0c</p> <ul> <li> <p>\u5982\u679c\u5df2\u7ecf\u5b8c\u6210\u4e86\u5e7f\u64ad\u53d1\u9001\uff0c\u800c\u4e14\u53d1\u9001\u65f6\u6709\u8bbe\u7f6eIIntentReceiver resultTo(\u7ed3\u679c\u8fd4\u56de\u7684\u5730\u65b9)\uff0c\u5219\u8c03\u7528performReceiveLocked\uff0c\u8fd4\u56de\u7ed3\u679c\u7ed9\u5230resultTo</p> </li> <li> <p>\u5982\u679c\u5df2\u7ecf\u5b8c\u6210\u4e86\u5e7f\u64ad\u53d1\u9001\uff0c\u5219\u53d6\u6d88\u8be5order\u7684\u8d85\u65f6\u8bbe\u5b9a\uff0c\u8f93\u51fa\u201cFinished with ordered broadcast\u201d\u7c7b\u4f3c\u65e5\u5fd7</p> </li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_42","title":"\u5904\u7406\u4e0b\u4e00\u4e2a\u63a5\u6536\u8005","text":"<pre><code>// Get the next receiver...\n//\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5c06\u8981\u5904\u7406\u7684\u5e7f\u64ad\u63a5\u6536\u8005\u5728\u5176\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\nint recIdx = r.nextReceiver++;\n\n// Keep track of when this receiver started, and make sure there\n// is a timeout message pending to kill it if need be.\n//\u8bbe\u7f6ereceiver\u63a5\u53d7\u65f6\u95f4receiverTime(\u5f53\u524d\u65f6\u95f4)\nr.receiverTime = SystemClock.uptimeMillis();\nif (recIdx == 0) {// \u8868\u793a\u7b2c\u4e00\u4e2a\u5f00\u59cb\u5904\u7406\u7684\u63a5\u6536\u8005\uff0c\u4e5f\u5c31\u662fBroadcastRecord\u5bf9\u8c61r\u6240\u63cf\u8ff0\u7684\u5e7f\u64ad\u4efb\u52a1\u521a\u88ab\u5904\u7406\n    r.dispatchTime = r.receiverTime;\n    // \u63a5\u6536\u8005\u5f00\u59cb\u5904\u7406\u7684\u65f6\u95f4\u6233\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u63a5\u6536\u8005\u5f00\u59cb\u5904\u7406\u4e86\uff0c\u8981\u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4\u6765\u8ba1\u7b97\u662f\u5426\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\n    // \u4e5f\u5c31\u662f\u8bf4\u8fd9\u662fBroadcastRecord\u4e2d\u7b2c\u4e00\u4e2a\u63a5\u6536\u8005\u5f00\u59cb\u88ab\u5904\u7406\u7684\u65f6\u95f4\u6233\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762BroadcastRecord\n    // \u8d85\u65f6\u7684\u8d77\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u8d85\u65f6\u6bd4\u8f83\u7684\u65f6\u5019\u7528\u7684\u5c31\u662fr.dispatchTime\n    r.dispatchRealTime = SystemClock.elapsedRealtime();\n    //\u8bbe\u7f6e\u5206\u53d1\u7684\u7cfb\u7edf\u65f6\u95f4(\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u8fd9\u4e2a\u65f6\u95f4\u4f1a\u53d8\u5316)\n    r.dispatchClockTime = System.currentTimeMillis();\n\n    if (mLogLatencyMetrics) {//\u8f93\u51fa\u65e5\u5fd7\u5230FrameworkStatsLog\u4e2d\n        FrameworkStatsLog.write(\n                FrameworkStatsLog.BROADCAST_DISPATCH_LATENCY_REPORTED,\n                r.dispatchClockTime - r.enqueueClockTime);\n    }\n\n    //trace\u76f8\u5173\n    if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n        Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n            createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n            System.identityHashCode(r));\n        Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n            createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n            System.identityHashCode(r));\n    }\n    //\u8f93\u51fa\u5f00\u59cb\u53d1\u9001order\u7684\u5e7f\u64ad\n    if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST, \"Processing ordered broadcast [\"\n            + mQueueName + \"] \" + r);\n}\n//\u5982\u679c\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u6b64\u5904\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\nif (! mPendingBroadcastTimeoutMessage) {\n    //\u8bbe\u7f6e\u8d85\u65f6\uff0c\u4f20\u5165\u53c2\u6570\u662fr.receiverTime + mTimeoutPeriod\uff0c\u4e5f\u5c31\u662f\u5f00\u59cb\u65f6\u95f4\u52a0\u4e0a\u8d85\u65f6\u65f6\u95f4\n    //mTimeoutPeriod\uff0cmTimeoutPeriod\u521d\u59cb\u5316\u662f\u5728BroadcastQueue\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f20\u5165\u7684\uff0c\n    //\u4e5f\u5c31\u662f\u5728AMS\uff08AMS\u6784\u9020\u51fd\u6570\u4e2d\uff09\u4e2d\u521d\u59cb\u5316mFgBroadcastQueue\u548cmBgBroadcastQueue\u65f6\u4f20\u5165\u7684\n    //BROADCAST_FG_TIMEOUT = 10 * 1000\u548cBROADCAST_BG_TIMEOUT = 60 * 1000\uff0c\n    //\u8fd9\u91cc\u5f00\u59cb\u57cb\u4e86ANR\u7684\u96f7\n    long timeoutTime = r.receiverTime + mConstants.TIMEOUT;\n    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST,\n            \"Submitting BROADCAST_TIMEOUT_MSG [\"\n            + mQueueName + \"] for \" + r + \" at \" + timeoutTime);\n    setBroadcastTimeoutLocked(timeoutTime);\n}\n</code></pre> <ul> <li>\u7b2c\u4e00\u4e2a\u63a5\u6536\u8005\u4f1a\u8bbe\u7f6er.dispatchTime\u5e7f\u64ad\u5206\u53d1\u65f6\u95f4(SystemClock.uptimeMillis\u5f53\u524d\u65f6\u95f4\uff0c\u4e0d\u53d7\u7cfb\u7edf\u65f6\u95f4\u4fee\u6539\u5f71\u54cd)\u3001r.dispatchClockTime\u5206\u53d1\u7684\u7cfb\u7edf\u65f6\u95f4(System.currentTimeMillis\uff0c\u8be5\u65f6\u95f4\u4f1a\u968f\u7cfb\u7edf\u65f6\u95f4\u53d8\u5316\u800c\u53d8\u5316)</li> <li>\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4setBroadcastTimeoutLocked(\u524d\u53f0\u662f10s\u8d85\u65f6\uff0c\u540e\u53f0\u662f60s\u8d85\u65f6\uff0c\u9488\u5bf9\u662f\u5355\u4e2a\u6ce8\u518c\u8005\u7684\u65f6\u95f4)\uff0c\u6bcf\u4e2a\u6709\u5e8f\u7684\u63a5\u53d7\u8005\uff0c\u90fd\u662f\u4ece\u53d6\u51fa\u5f00\u59cb\u7b97\u65f6\u95f4r.receiverTime = SystemClock.uptimeMillis();</li> <li>\u5f00\u59cb\u5904\u7406\u65f6\u8f93\u51fa\u5982\uff1a\"Processing ordered broadcast\"\u7c7b\u4f3c\u7684\u65e5\u5fd7</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_43","title":"\u53d1\u9001\u5e7f\u64ad","text":"<p>\u4e0a\u9762\u5206\u6790\u7684\u65f6\u5019\u5bf9\u4e8eBroadcastRecord.receivers\u91cc\u9762\u5305\u542b\u4e24\u79cdreceiver\u63a5\u6536\u8005\uff1aorder\u5e7f\u64ad\u4e0b\u7684\u52a8\u6001\u6ce8\u518c\u63a5\u6536\u8005\u548c\u9759\u6001\u63a5\u6536\u8005\uff0c\u8fd9\u4e24\u79cdreceiver\u5904\u7406\u7684\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5bf9\u4e8eorder\u5e7f\u64ad\u4e0b\u7684\u52a8\u6001\u6ce8\u518creceiver\u800c\u8a00\uff0c\u63a5\u6536\u8005\u8fdb\u7a0b\u4e00\u5b9a\u662f\u5df2\u7ecf\u542f\u52a8\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u9759\u6001\u63a5\u6536\u8005receiver\u800c\u8a00\uff0c\u5f53\u524d\u7684receiver\u8fdb\u7a0b\u53ef\u80fd\u8fd8\u6ca1\u6709\u542f\u52a8\uff0c\u56e0\u6b64\u52a8\u6001\u548c\u9759\u6001\u7684receiver\u5904\u7406\u7684\u903b\u8f91\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u5206\u5f00\u5904\u7406\uff0c\u800c\u9759\u6001\u63a5\u6536\u8005\u53c8\u5206\u4e3a\u8fdb\u7a0b\u5df2\u7ecf\u542f\u52a8\u548c\u5c1a\u672a\u542f\u52a8\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>\u6240\u4ee5\u53d1\u9001\u5e7f\u64ad\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u5206\u6210\u4e09\u4e2a\u5c0f\u70b9\u6765\u5206\u6790\uff1a\u52a8\u6001\u6ce8\u518c\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005\u3001\u8fdb\u7a0b\u5df2\u7ecf\u542f\u52a8\u7684\u9759\u6001\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005\u3001\u8fdb\u7a0b\u8fd8\u672a\u542f\u52a8\u7684\u9759\u6001\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_44","title":"\u52a8\u6001\u6ce8\u518c\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005","text":"<pre><code>final BroadcastOptions brOptions = r.options;\n//\u83b7\u53d6\u4e0b\u4e00\u4e2a\u63a5\u53d7\u8005\nfinal Object nextReceiver = r.receivers.get(recIdx);\n\n// \u5982\u679c\u5f53\u524dnextReceiver\u662f\u4e00\u4e2aBroadcastFilter\u7c7b\u578b\uff0c\u8bf4\u660e\u662f\u4e00\u4e2a\u52a8\u6001\u6ce8\u518c\u63a5\u6536\u8005\uff0c\u4e0d\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b,\n// \u76f4\u63a5\u8c03\u7528deliverToRegisteredReceiverLocked\u51fd\u6570\u53d1\u9001\u5e7f\u64ad\nif (nextReceiver instanceof BroadcastFilter) {\n    // Simple case: this is a registered receiver who gets\n    // a direct call.\n    BroadcastFilter filter = (BroadcastFilter)nextReceiver;\n    if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n            \"Delivering ordered [\"\n            + mQueueName + \"] to registered \"\n            + filter + \": \" + r);\n    // \u8c03\u7528deliverToRegisteredReceiverLocked\u5411\u6240\u6709\u7684receivers\u53d1\u9001\u5e7f\u64ad\n    // \u5c06\u5b83\u6240\u63cf\u8ff0\u7684\u6bcf\u4e00\u4e2a\u65e0\u5e8f\u5e7f\u64ad\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u5f02\u6b65\u5904\u7406\u5e7f\u64ad\n    // \u901a\u8fc7deliverToRegisteredReceiverLocked\u8c03\u7528ActivityThread.scheduleRegisteredReceiver\u5904\u7406\u5e7f\u64ad\n    deliverToRegisteredReceiverLocked(r, filter, r.ordered, recIdx);\n    //\u5982\u679cr.receiver == null(\u6ca1\u6709\u6b63\u5728\u6267\u884c\u7684\u5e7f\u64ad)\n    //\u6216\u8005\u8be5\u5e7f\u64ad\u662f\u975eorder\uff08\u65e0\u5e8f\uff09\u7684\n    if (r.receiver == null || !r.ordered) {\n        // The receiver has already finished, so schedule to\n        // process the next one.\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Quick finishing [\"\n                + mQueueName + \"]: ordered=\"\n                + r.ordered + \" receiver=\" + r.receiver);\n        // \u8bbe\u7f6eIDLE\u72b6\u6001\uff0c\u8868\u793aAMS\u4e0d\u9700\u8981\u7b49\u5f85\u5b83\u7684\u524d\u4e00\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\u5b8c\u6210\u4e00\u4e2a\u5e7f\u64ad\u5c31\u53ef\u4ee5\u5c06\u8be5\u5e7f\u64ad\n        // \u7ee7\u7eed\u53d1\u9001\u7ed9\u5b83\u7684\u4e0b\u4e00\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\n        r.state = BroadcastRecord.IDLE;\n        // \u8c03\u7528scheduleBroadcastsLocked\u51fd\u6570\u5c31\u662f\u4e3a\u4e86\u5c06\u4e00\u4e2a\u5e7f\u64ad\u7ee7\u7eed\u53d1\u9001\u7ed9BroadcastRecord\u5bf9\u8c61r\u6240\u63cf\u8ff0\u7684\u5e7f\u64ad\u8f6c\u53d1\u4efb\u52a1\u7684\n        // \u4e0b\u4e00\u4e2a\u76ee\u6807\u5e7f\u64ad\u63a5\u6536\u8005\u5904\u7406\u7684\n        scheduleBroadcastsLocked();\n    } else {\n        if (filter.receiverList != null) {\n            maybeAddAllowBackgroundActivityStartsToken(filter.receiverList.app, r);\n            // r is guaranteed ordered at this point, so we know finishReceiverLocked()\n            // will get a callback and handle the activity start token lifecycle.\n        }\n    }\n    //\u76f4\u63a5\u8fd4\u56de\uff0c\u4ee3\u8868\u672c\u6b21\u5b8c\u6210\uff0c\u4e00\u6b21\u5904\u7406\u4e00\u4e2a\u5e7f\u64ad\u4e2d\u7684nextReceiver\n    return;\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_45","title":"\u8fdb\u7a0b\u5df2\u7ecf\u542f\u52a8\u7684\u9759\u6001\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005","text":"<p>\u53d1\u9001\u7ed9\u9759\u6001\u6709\u5e8f\u5e7f\u64ad\u4e4b\u524d\u5148\u505a\u4e00\u4e9b\u8df3\u8fc7\u7684\u903b\u8f91\u5904\u7406\u3002</p> <pre><code>// Hard case: need to instantiate the receiver, possibly\n// starting its application process to host it.\n\n//\u5982\u679c\u4e0a\u9762if\u6ca1\u6709\u8fdb\u884c\u62e6\u622a\uff0c\u8bf4\u660e\u4e0d\u662f\u5e7f\u64ad\u63a5\u6536\u8005\u52a8\u6001\u6ce8\u518c\u7684\uff0c\u800c\u5e94\u8be5\u662f\u9759\u6001\u6ce8\u518c\u7684\uff0c\u6b64\u65f6\u8fdb\u7a0b\u53ef\u80fd\u6ca1\u6709\u542f\u52a8\nResolveInfo info =\n    (ResolveInfo)nextReceiver;\nComponentName component = new ComponentName(\n        info.activityInfo.applicationInfo.packageName,\n        info.activityInfo.name);\n\n//\u9759\u6001\u6ce8\u518c\u8005\u8df3\u8fc7\u7684\u903b\u8f91\uff0c\u8df3\u8fc7\u7684\u903b\u8f91\u8f83\u591a\n\nboolean skip = false;\n\n//sdk\u7684\u4e00\u4e9b\u5224\u65ad\nif (brOptions != null &amp;&amp;\n        (info.activityInfo.applicationInfo.targetSdkVersion\n                &lt; brOptions.getMinManifestReceiverApiLevel() ||\n        info.activityInfo.applicationInfo.targetSdkVersion\n                &gt; brOptions.getMaxManifestReceiverApiLevel())) {\n    Slog.w(TAG, \"Target SDK mismatch: receiver \" + info.activityInfo\n            + \" targets \" + info.activityInfo.applicationInfo.targetSdkVersion\n            + \" but delivery restricted to [\"\n            + brOptions.getMinManifestReceiverApiLevel() + \", \"\n            + brOptions.getMaxManifestReceiverApiLevel()\n            + \"] broadcasting \" + broadcastDescription(r, component));\n    skip = true;\n}\nif (brOptions != null &amp;&amp;\n        !brOptions.testRequireCompatChange(info.activityInfo.applicationInfo.uid)) {\n    Slog.w(TAG, \"Compat change filtered: broadcasting \" + broadcastDescription(r, component)\n            + \" to uid \" + info.activityInfo.applicationInfo.uid + \" due to compat change \"\n            + r.options.getRequireCompatChangeId());\n    skip = true;\n}\n//\u67e5\u770b\u53d1\u9001\u8005\u7684uid\u548c\u63a5\u53d7\u8005\u7684uid\u662f\u5426\u4e00\u6837\uff0c\u6216\u8005\u662f\u5426\u7cfb\u7edfuid\uff0c\u786e\u5b9a\u4e00\u4e9b\u662f\u5426\u4e24\u8005\u6709\u8bbe\u5b9a\u5173\u8054\u5173\u7cfb\nif (!skip &amp;&amp; !mService.validateAssociationAllowedLocked(r.callerPackage, r.callingUid,\n        component.getPackageName(), info.activityInfo.applicationInfo.uid)) {\n    Slog.w(TAG, \"Association not allowed: broadcasting \"\n            + broadcastDescription(r, component));\n    skip = true;\n}\n\nif (!skip) {\n    //\u770b\u4e00\u4e0bintent\u9632\u706b\u5899mIntentFirewall\u662f\u5426\u6709block\u8be5\u53d1\u9001\u884c\u4e3a\n    skip = !mService.mIntentFirewall.checkBroadcast(r.intent, r.callingUid,\n            r.callingPid, r.resolvedType, info.activityInfo.applicationInfo.uid);\n    if (skip) {\n        Slog.w(TAG, \"Firewall blocked: broadcasting \"\n                + broadcastDescription(r, component));\n    }\n}\n//\u6743\u9650\u76f8\u5173\u7684\u7684\u68c0\u67e5\nint perm = mService.checkComponentPermission(info.activityInfo.permission,\n        r.callingPid, r.callingUid, info.activityInfo.applicationInfo.uid,\n        info.activityInfo.exported);\nif (!skip &amp;&amp; perm != PackageManager.PERMISSION_GRANTED) {\n    if (!info.activityInfo.exported) {\n        Slog.w(TAG, \"Permission Denial: broadcasting \"\n                + broadcastDescription(r, component)\n                + \" is not exported from uid \" + info.activityInfo.applicationInfo.uid);\n    } else {\n        Slog.w(TAG, \"Permission Denial: broadcasting \"\n                + broadcastDescription(r, component)\n                + \" requires \" + info.activityInfo.permission);\n    }\n    skip = true;\n} else if (!skip &amp;&amp; info.activityInfo.permission != null) {\n    final int opCode = AppOpsManager.permissionToOpCode(info.activityInfo.permission);\n    if (opCode != AppOpsManager.OP_NONE &amp;&amp; mService.getAppOpsManager().noteOpNoThrow(opCode,\n            r.callingUid, r.callerPackage, r.callerFeatureId,\n            \"Broadcast delivered to \" + info.activityInfo.name)\n            != AppOpsManager.MODE_ALLOWED) {\n        Slog.w(TAG, \"Appop Denial: broadcasting \"\n                + broadcastDescription(r, component)\n                + \" requires appop \" + AppOpsManager.permissionToOp(\n                        info.activityInfo.permission));\n        skip = true;\n    }\n}\n\nboolean isSingleton = false;\ntry {\n    isSingleton = mService.isSingleton(info.activityInfo.processName,\n            info.activityInfo.applicationInfo,\n            info.activityInfo.name, info.activityInfo.flags);\n} catch (SecurityException e) {\n    Slog.w(TAG, e.getMessage());\n    skip = true;\n}\nif ((info.activityInfo.flags&amp;ActivityInfo.FLAG_SINGLE_USER) != 0) {\n    if (ActivityManager.checkUidPermission(\n            android.Manifest.permission.INTERACT_ACROSS_USERS,\n            info.activityInfo.applicationInfo.uid)\n                    != PackageManager.PERMISSION_GRANTED) {\n        Slog.w(TAG, \"Permission Denial: Receiver \" + component.flattenToShortString()\n                + \" requests FLAG_SINGLE_USER, but app does not hold \"\n                + android.Manifest.permission.INTERACT_ACROSS_USERS);\n        skip = true;\n    }\n}\nif (!skip &amp;&amp; info.activityInfo.applicationInfo.isInstantApp()\n        &amp;&amp; r.callingUid != info.activityInfo.applicationInfo.uid) {\n    Slog.w(TAG, \"Instant App Denial: receiving \"\n            + r.intent\n            + \" to \" + component.flattenToShortString()\n            + \" due to sender \" + r.callerPackage\n            + \" (uid \" + r.callingUid + \")\"\n            + \" Instant Apps do not support manifest receivers\");\n    skip = true;\n}\nif (!skip &amp;&amp; r.callerInstantApp\n        &amp;&amp; (info.activityInfo.flags &amp; ActivityInfo.FLAG_VISIBLE_TO_INSTANT_APP) == 0\n        &amp;&amp; r.callingUid != info.activityInfo.applicationInfo.uid) {\n    Slog.w(TAG, \"Instant App Denial: receiving \"\n            + r.intent\n            + \" to \" + component.flattenToShortString()\n            + \" requires receiver have visibleToInstantApps set\"\n            + \" due to sender \" + r.callerPackage\n            + \" (uid \" + r.callingUid + \")\");\n    skip = true;\n}\n//crash\u7684app\u5219\u76f4\u63a5\u8df3\u8fc7\nif (r.curApp != null &amp;&amp; r.curApp.mErrorState.isCrashing()) {\n    // If the target process is crashing, just skip it.\n    Slog.w(TAG, \"Skipping deliver ordered [\" + mQueueName + \"] \" + r\n            + \" to \" + r.curApp + \": process crashing\");\n    skip = true;\n}\nif (!skip) {\n    boolean isAvailable = false;\n    try {\n        isAvailable = AppGlobals.getPackageManager().isPackageAvailable(\n                info.activityInfo.packageName,\n                UserHandle.getUserId(info.activityInfo.applicationInfo.uid));\n    } catch (Exception e) {\n        // all such failures mean we skip this receiver\n        Slog.w(TAG, \"Exception getting recipient info for \"\n                + info.activityInfo.packageName, e);\n    }\n    if (!isAvailable) {\n        Slog.w(TAG_BROADCAST,\n                \"Skipping delivery to \" + info.activityInfo.packageName + \" / \"\n                + info.activityInfo.applicationInfo.uid\n                + \" : package no longer available\");\n        skip = true;\n    }\n}\n\n// If permissions need a review before any of the app components can run, we drop\n// the broadcast and if the calling app is in the foreground and the broadcast is\n// explicit we launch the review UI passing it a pending intent to send the skipped\n// broadcast.\nif (!skip) {\n    //\u5224\u65ad\u662f\u5426\u9700\u8981\u6743\u9650\u6765\u542f\u52a8\uff0c\u5982\u679c\u9700\u8981\u5219\u8df3\u8fc7(\u5982\u679c\u8c03\u7528\u8005\u662f\u524d\u53f0\uff0c\u800c\u4e14\u53d1\u9001\u5230\u7279\u5b9a\u7ec4\u4ef6\uff0c\u5219\u542f\u52a8\u6743\u9650\u7533\u8bf7\u7684ui\u754c\u9762)\n    if (!requestStartTargetPermissionsReviewIfNeededLocked(r,\n            info.activityInfo.packageName, UserHandle.getUserId(\n                    info.activityInfo.applicationInfo.uid))) {\n        Slog.w(TAG_BROADCAST,\n                \"Skipping delivery: permission review required for \"\n                        + broadcastDescription(r, component));\n        skip = true;\n    }\n}\n\n// This is safe to do even if we are skipping the broadcast, and we need\n// this information now to evaluate whether it is going to be allowed to run.\n//\u63a5\u6536\u8005\u7684uid\nfinal int receiverUid = info.activityInfo.applicationInfo.uid;\n// If it's a singleton, it needs to be the same app or a special app\nif (r.callingUid != Process.SYSTEM_UID &amp;&amp; isSingleton\n        &amp;&amp; mService.isValidSingletonCall(r.callingUid, receiverUid)) {\n    info.activityInfo = mService.getActivityInfoForUser(info.activityInfo, 0);\n}\n//\u63a5\u53d7\u8005\u7684\u8fdb\u7a0b\u540d\u5b57\nString targetProcess = info.activityInfo.processName;\n//\u63a5\u53d7\u8005\u7684\u8fdb\u7a0bProcessRecord app\uff0c\u8fd9\u4e2a\u53ef\u80fd\u4e3anull\uff0c\u4e5f\u5c31\u662f\u8fdb\u7a0b\u672a\u542f\u52a8\nProcessRecord app = mService.getProcessRecordLocked(targetProcess,\n        info.activityInfo.applicationInfo.uid);\n\nif (!skip) {\n    final int allowed = mService.getAppStartModeLOSP(\n            info.activityInfo.applicationInfo.uid, info.activityInfo.packageName,\n            info.activityInfo.applicationInfo.targetSdkVersion, -1, true, false, false);\n    if (allowed != ActivityManager.APP_START_MODE_NORMAL) {\n        // We won't allow this receiver to be launched if the app has been\n        // completely disabled from launches, or it was not explicitly sent\n        // to it and the app is in a state that should not receive it\n        // (depending on how getAppStartModeLOSP has determined that).\n        if (allowed == ActivityManager.APP_START_MODE_DISABLED) {\n            Slog.w(TAG, \"Background execution disabled: receiving \"\n                    + r.intent + \" to \"\n                    + component.flattenToShortString());\n            skip = true;\n        //1. \u5982\u679cflag\u8bbe\u7f6e\u4e86FLAG_RECEIVER_EXCLUDE_BACKGROUND\u5219\u65e0\u6cd5\u8ba9\u540e\u53f0\u63a5\u6536\n        //2. \u6216\u8005getComponent/getPackage\u90fd\u4e3anull\uff0c\u800c\u4e14\u6ca1\u6709\u8bbe\u7f6eFLAG_RECEIVER_INCLUDE_BACKGROUND\uff0c\u800c\u4e14\u6ca1\u6709requiredPermissions\n        //3. \u5982ACTION_BOOT_COMPLETED\u662f\u6709\u8bbe\u7f6eFLAG_RECEIVER_INCLUDE_BACKGROUND\uff0c\u6240\u4ee5\u9759\u6001\u5e7f\u64ad\u65e0\u9700\u6743\u9650\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a5\u6536\n\n        //\u8fd9\u6bb5\u4ee3\u7801\u662f\u5728AMS.broadcastIntentLocked\n        //if (getBackgroundLaunchBroadcasts().contains(action)) {\n        //      if (DEBUG_BACKGROUND_CHECK) {\n        //          Slog.i(TAG, \"Broadcast action \" + action + \" forcing include-background\");\n        //      }\n        //      intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);\n        //}\n\n        } else if (((r.intent.getFlags()&amp;Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0)\n                || (r.intent.getComponent() == null\n                    &amp;&amp; r.intent.getPackage() == null\n                    &amp;&amp; ((r.intent.getFlags()\n                            &amp; Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0)\n                    &amp;&amp; !isSignaturePerm(r.requiredPermissions))) {\n            mService.addBackgroundCheckViolationLocked(r.intent.getAction(),\n                    component.getPackageName());\n            Slog.w(TAG, \"Background execution not allowed: receiving \"\n                    + r.intent + \" to \"\n                    + component.flattenToShortString());\n            skip = true;\n        }\n    }\n}\n\nif (!skip &amp;&amp; !Intent.ACTION_SHUTDOWN.equals(r.intent.getAction())\n        &amp;&amp; !mService.mUserController\n        .isUserRunning(UserHandle.getUserId(info.activityInfo.applicationInfo.uid),\n                0 /* flags */)) {\n    skip = true;\n    Slog.w(TAG,\n            \"Skipping delivery to \" + info.activityInfo.packageName + \" / \"\n                    + info.activityInfo.applicationInfo.uid + \" : user is not running\");\n}\n\n//\u5904\u7406\u4e0d\u5305\u542b\u7684\u6743\u9650excludedPermissions\nif (!skip &amp;&amp; r.excludedPermissions != null &amp;&amp; r.excludedPermissions.length &gt; 0) {\n    for (int i = 0; i &lt; r.excludedPermissions.length; i++) {\n        String excludedPermission = r.excludedPermissions[i];\n        try {\n            perm = AppGlobals.getPackageManager()\n                .checkPermission(excludedPermission,\n                        info.activityInfo.applicationInfo.packageName,\n                        UserHandle\n                        .getUserId(info.activityInfo.applicationInfo.uid));\n        } catch (RemoteException e) {\n            perm = PackageManager.PERMISSION_DENIED;\n        }\n\n        int appOp = AppOpsManager.permissionToOpCode(excludedPermission);\n        if (appOp != AppOpsManager.OP_NONE) {\n            // When there is an app op associated with the permission,\n            // skip when both the permission and the app op are\n            // granted.\n            if ((perm == PackageManager.PERMISSION_GRANTED) &amp;&amp; (\n                        mService.getAppOpsManager().checkOpNoThrow(appOp,\n                        info.activityInfo.applicationInfo.uid,\n                        info.activityInfo.packageName)\n                    == AppOpsManager.MODE_ALLOWED)) {\n                skip = true;\n                break;\n            }\n        } else {\n            // When there is no app op associated with the permission,\n            // skip when permission is granted.\n            if (perm == PackageManager.PERMISSION_GRANTED) {\n                skip = true;\n                break;\n            }\n        }\n    }\n}\n\n// Check that the receiver does *not* belong to any of the excluded packages\nif (!skip &amp;&amp; r.excludedPackages != null &amp;&amp; r.excludedPackages.length &gt; 0) {\n    if (ArrayUtils.contains(r.excludedPackages, component.getPackageName())) {\n        Slog.w(TAG, \"Skipping delivery of excluded package \"\n                + r.intent + \" to \"\n                + component.flattenToShortString()\n                + \" excludes package \" + component.getPackageName()\n                + \" due to sender \" + r.callerPackage\n                + \" (uid \" + r.callingUid + \")\");\n        skip = true;\n    }\n}\n\n//\u5904\u7406\u9700\u8981\u5305\u542b\u7684\u6743\u9650requiredPermission\nif (!skip &amp;&amp; info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID &amp;&amp;\n        r.requiredPermissions != null &amp;&amp; r.requiredPermissions.length &gt; 0) {\n    for (int i = 0; i &lt; r.requiredPermissions.length; i++) {\n        String requiredPermission = r.requiredPermissions[i];\n        try {\n            perm = AppGlobals.getPackageManager().\n                    checkPermission(requiredPermission,\n                            info.activityInfo.applicationInfo.packageName,\n                            UserHandle\n                            .getUserId(info.activityInfo.applicationInfo.uid));\n        } catch (RemoteException e) {\n            perm = PackageManager.PERMISSION_DENIED;\n        }\n        if (perm != PackageManager.PERMISSION_GRANTED) {\n            Slog.w(TAG, \"Permission Denial: receiving \"\n                    + r.intent + \" to \"\n                    + component.flattenToShortString()\n                    + \" requires \" + requiredPermission\n                    + \" due to sender \" + r.callerPackage\n                    + \" (uid \" + r.callingUid + \")\");\n            skip = true;\n            break;\n        }\n        int appOp = AppOpsManager.permissionToOpCode(requiredPermission);\n        if (appOp != AppOpsManager.OP_NONE &amp;&amp; appOp != r.appOp) {\n            if (!noteOpForManifestReceiver(appOp, r, info, component)) {\n                skip = true;\n                break;\n            }\n        }\n    }\n}\nif (!skip &amp;&amp; r.appOp != AppOpsManager.OP_NONE) {\n    if (!noteOpForManifestReceiver(r.appOp, r, info, component)) {\n        skip = true;\n    }\n}\n\n//\u4e0a\u9762\u90fd\u662f\u5404\u7c7b\u5224\u65ad\u662f\u5426\u9700\u8981\u8df3\u8fc7\u7684\u903b\u8f91skip\n//\u5982\u679c\u8df3\u8fc7\uff0c\u76f4\u63a5\u6062\u590d\u521d\u59cb\u72b6\u6001\uff0c\u5f00\u59cb\u4e0b\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\u7684\u5904\u7406\nif (skip) {\n    if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n            \"Skipping delivery of ordered [\" + mQueueName + \"] \"\n            + r + \" for reason described above\");\n    //\u5982\u679c\u9700\u8981\u8df3\u8fc7\uff0c\u6807\u5b9a\u5f53\u524dr.delivery[recIdx]\u4e3askipped\n    r.delivery[recIdx] = BroadcastRecord.DELIVERY_SKIPPED;\n    //\u8df3\u8fc7\u7684\u65f6\u5019\u6e05\u7a7ar.receiver = null\n    r.receiver = null;\n    r.curFilter = null;\n    r.state = BroadcastRecord.IDLE;\n    //\u9759\u6001\u5e7f\u64ad\u8df3\u8fc7++\n    r.manifestSkipCount++;\n    //\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u5206\u53d1\n    scheduleBroadcastsLocked();\n    return;\n}\n</code></pre> <p>\u8fd9\u91cc\u9664\u4e86\u6709\u5224\u65adsdk\u3001\u5224\u65ad\u6743\u9650\u7b49\u7ec6\u8282\uff0c\u8fd8\u6709\u4e00\u4e2a\u6211\u4eec\u7ecf\u5e38\u9047\u5230\u7684\u95ee\u9898\uff1a\u201cBackground execution not allowed: \u201d\uff0c\u5728\u524d\u9762\u7684\u201c\u5e7f\u64ad\u80fd\u5426\u53d1\u7ed9background\u8fdb\u7a0b\u201d\u5c0f\u8282\u8bb2\u5230\u4e86\u8fd9\u4e2a\u7ec6\u8282\u3002</p> <p>\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u53d1\u9001\u7ed9\u8fdb\u7a0b\u5df2\u7ecf\u542f\u52a8\u7684\u9759\u6001\u5e7f\u64ad\u63a5\u53d7\u8005\u3002</p> <pre><code>//\u9759\u6001\u5e7f\u64adCount\u6267\u884c++\nr.manifestCount++;\n\n//\u6807\u5b9a\u5f53\u524dr.delivery[recIdx]\u4e3a\u5206\u53d1DELIVERED\nr.delivery[recIdx] = BroadcastRecord.DELIVERY_DELIVERED;\n//\u72b6\u6001\u4fee\u6539\u6210app\u63a5\u6536APP_RECEIVE\uff0c\u540e\u9762\u8be5receive finishReceiver\u8fd4\u56de\u7684\u65f6\u5019APP_RECEIVE\u6216BroadcastRecord.CALL_DONE_RECEIVE\u624d\u4f1a\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\nr.state = BroadcastRecord.APP_RECEIVE;\n//\u5f53\u524d\u63a5\u6536\u7ec4\u4ef6curComponent\nr.curComponent = component;\n//\u5f53\u524d\u7684receiver\nr.curReceiver = info.activityInfo;\nif (DEBUG_MU &amp;&amp; r.callingUid &gt; UserHandle.PER_USER_RANGE) {\n    Slog.v(TAG_MU, \"Updated broadcast record activity info for secondary user, \"\n            + info.activityInfo + \", callingUid = \" + r.callingUid + \", uid = \"\n            + receiverUid);\n}\nfinal boolean isActivityCapable =\n        (brOptions != null &amp;&amp; brOptions.getTemporaryAppAllowlistDuration() &gt; 0);\nmaybeScheduleTempAllowlistLocked(receiverUid, r, brOptions);\n\n// Report that a component is used for explicit broadcasts.\nif (r.intent.getComponent() != null &amp;&amp; r.curComponent != null\n        &amp;&amp; !TextUtils.equals(r.curComponent.getPackageName(), r.callerPackage)) {\n    mService.mUsageStatsService.reportEvent(\n            r.curComponent.getPackageName(), r.userId, Event.APP_COMPONENT_USED);\n}\n\n// Broadcast is being executed, its package can't be stopped.\ntry {\n    //\u8bbe\u7f6e\u5305\u7684stop\u72b6\u6001\u662ffalse(\u9700\u8981\u542f\u52a8\u6539\u5e94\u7528\u4e86\uff0c\u5305\u4e0d\u518d\u662fstop\u4e86)\n    AppGlobals.getPackageManager().setPackageStoppedState(\n            r.curComponent.getPackageName(), false, r.userId);\n} catch (RemoteException e) {\n} catch (IllegalArgumentException e) {\n    Slog.w(TAG, \"Failed trying to unstop package \"\n            + r.curComponent.getPackageName() + \": \" + e);\n}\n\n// Is this receiver's application already running?\n//\u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u5df2\u7ecf\u8fd0\u884c\uff0c\u5219\u76f4\u63a5\u53d1\u7ed9\u8be5\u8fdb\u7a0b\uff0c\u7136\u540e\u8fd4\u56de\nif (app != null &amp;&amp; app.getThread() != null &amp;&amp; !app.isKilled()) {\n    try {\n        app.addPackage(info.activityInfo.packageName,\n                info.activityInfo.applicationInfo.longVersionCode, mService.mProcessStats);\n        maybeAddAllowBackgroundActivityStartsToken(app, r);\n        // app\u8fdb\u7a0b\u5b58\u5728\uff0c\u901a\u8fc7processCurBroadcastLocked -&gt; ActivityThread.scheduleReceiver -&gt; receiver.onReceive\u5904\u7406\u5f53\u524d\u5e7f\u64ad\n        processCurBroadcastLocked(r, app,\n                BROADCAST_DELIVERY_EVENT_REPORTED__RECEIVER_TYPE__MANIFEST,\n                BROADCAST_DELIVERY_EVENT_REPORTED__PROC_START_TYPE__PROCESS_START_TYPE_WARM);\n        //order\u5e7f\u64ad\u662f\u4e00\u79cd\u540c\u6b65\u5904\u7406\u65b9\u5f0f\uff0c\u56e0\u6b64\u5904\u7406\u5b8c\u53ef\u4ee5\u76f4\u63a5return\n        return;\n    } catch (RemoteException e) {\n        Slog.w(TAG, \"Exception when sending broadcast to \"\n              + r.curComponent, e);\n    } catch (RuntimeException e) {\n        Slog.wtf(TAG, \"Failed sending broadcast to \"\n                + r.curComponent + \" with \" + r.intent, e);\n        // If some unexpected exception happened, just skip\n        // this broadcast.  At this point we are not in the call\n        // from a client, so throwing an exception out from here\n        // will crash the entire system instead of just whoever\n        // sent the broadcast.\n        logBroadcastReceiverDiscardLocked(r);\n        finishReceiverLocked(r, r.resultCode, r.resultData,\n                r.resultExtras, r.resultAbort, false);\n        scheduleBroadcastsLocked();\n        // We need to reset the state if we failed to start the receiver.\n        r.state = BroadcastRecord.IDLE;\n        return;\n    }\n\n    // If a dead object exception was thrown -- fall through to\n    // restart the application.\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#processcurbroadcastlocked","title":"# processCurBroadcastLocked","text":"<pre><code>private final void processCurBroadcastLocked(BroadcastRecord r,\n        ProcessRecord app, int receiverType, int processTemperature) throws RemoteException {\n    if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n            \"Process cur broadcast \" + r + \" for app \" + app);\n    final IApplicationThread thread = app.getThread();\n    if (thread == null) {\n        throw new RemoteException();\n    }\n    if (app.isInFullBackup()) {\n        skipReceiverLocked(r);\n        return;\n    }\n\n    //processCurBroadcastLocked\u7684\u65f6\u5019\uff0c\u4f1a\u6709r.receiver\u7684\u8bbe\u7f6e\n    r.receiver = thread.asBinder();\n    r.curApp = app;\n    final ProcessReceiverRecord prr = app.mReceivers;\n    prr.addCurReceiver(r);\n    app.mState.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_RECEIVER);\n    // Don't bump its LRU position if it's in the background restricted.\n    if (mService.mInternal.getRestrictionLevel(app.info.packageName, app.userId)\n            &lt; RESTRICTION_LEVEL_RESTRICTED_BUCKET) {\n        mService.updateLruProcessLocked(app, false, null);\n    }\n    // Make sure the oom adj score is updated before delivering the broadcast.\n    // Force an update, even if there are other pending requests, overall it still saves time,\n    // because time(updateOomAdj(N apps)) &lt;= N * time(updateOomAdj(1 app)).\n    mService.enqueueOomAdjTargetLocked(app);\n    mService.updateOomAdjPendingTargetsLocked(OomAdjuster.OOM_ADJ_REASON_START_RECEIVER);\n\n    // Tell the application to launch this receiver.\n    maybeReportBroadcastDispatchedEventLocked(r, r.curReceiver.applicationInfo.uid);\n    //r.curComponent\u662f\u53d1\u9001\u7ed9\u9759\u6001\u63a5\u6536\u8005\u7684\u65f6\u5019\u8bbe\u7f6e\u7684\u7ec4\u4ef6\u540d\u5b57\n    r.intent.setComponent(r.curComponent);\n\n    boolean started = false;\n    try {\n        if (DEBUG_BROADCAST_LIGHT) Slog.v(TAG_BROADCAST,\n                \"Delivering to component \" + r.curComponent\n                + \": \" + r);\n        mService.notifyPackageUse(r.intent.getComponent().getPackageName(),\n                                  PackageManager.NOTIFY_PACKAGE_USE_BROADCAST_RECEIVER);\n        //\u53d1\u9001\u7ed9app\u4e3b\u7ebf\u7a0b\u7684scheduleReceiver\n        thread.scheduleReceiver(new Intent(r.intent), r.curReceiver,\n                mService.compatibilityInfoForPackage(r.curReceiver.applicationInfo),\n                r.resultCode, r.resultData, r.resultExtras, r.ordered, r.userId,\n                app.mState.getReportedProcState());\n        if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                \"Process cur broadcast \" + r + \" DELIVERED for app \" + app);\n        started = true;\n        FrameworkStatsLog.write(BROADCAST_DELIVERY_EVENT_REPORTED, app.uid,\n                r.callingUid == -1 ? Process.SYSTEM_UID : r.callingUid,\n                ActivityManagerService.getShortAction(r.intent.getAction()),\n                receiverType, processTemperature);\n    } finally {\n        if (!started) {\n            if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                    \"Process cur broadcast \" + r + \": NOT STARTED!\");\n            r.receiver = null;\n            r.curApp = null;\n            prr.removeCurReceiver(r);\n        }\n    }\n\n    // if something bad happens here, launch the app and try again\n    if (app.isKilled()) {\n        throw new RemoteException(\"app gets killed during broadcasting\");\n    }\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitythreadschedulereceiver","title":"# ActivityThread.scheduleReceiver","text":"<pre><code>public final void scheduleReceiver(Intent intent, ActivityInfo info,\n        CompatibilityInfo compatInfo, int resultCode, String data, Bundle extras,\n        boolean sync, int sendingUser, int processState) {\n    updateProcessState(processState, false);\n    ReceiverData r = new ReceiverData(intent, resultCode, data, extras,\n            sync, false, mAppThread.asBinder(), sendingUser);\n    r.info = info;\n    r.compatInfo = compatInfo;\n    sendMessage(H.RECEIVER, r);\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#activitythreadhandlereceiver","title":"# ActivityThread.handleReceiver","text":"<pre><code>private void handleReceiver(ReceiverData data) {\n    // If we are getting ready to gc after going to the background, well\n    // we are back active so skip it.\n    unscheduleGcIdler();\n    // 1\uff09 \u521b\u5efaBroadcastReceiver\u5bf9\u8c61\n    // \u8fd9\u91cc\u5904\u7406\u7684\u662f\u9759\u6001\u5e7f\u64ad\u63a5\u6536\u8005\uff0c\u9ed8\u8ba4\u8ba4\u4e3a\u63a5\u6536\u8005BroadcastReceiver\u5bf9\u8c61\u4e0d\u5b58\u5728\n    // \u6bcf\u6b21\u63a5\u53d7\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684BroadcastReceiver\u5bf9\u8c61\n    String component = data.intent.getComponent().getClassName();\n\n    LoadedApk packageInfo = getPackageInfoNoCheck(\n            data.info.applicationInfo, data.compatInfo);\n\n    IActivityManager mgr = ActivityManager.getService();\n\n    Application app;\n    BroadcastReceiver receiver;\n    ContextImpl context;\n    try {\n        // \u9996\u5148\u4eceAMS\u4f20\u9012\u7684intent\u4e2d\u83b7\u53d6\u5f53\u524d\u5904\u7406\u8be5\u5e7f\u64ad\u7684\u7ec4\u4ef6\u540d\u79f0\uff0c\u7136\u540e\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u4e00\u4e2aBroadcastReceiver\n        // \u5bf9\u8c61\uff0c\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u9759\u6001\u5e7f\u64ad\u5904\u7406\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684BroadcastReceiver\u5bf9\u8c61\uff1b\n        // \u521b\u5efaApplication\u5bf9\u8c61\uff0c\u5982\u679c\u8fdb\u7a0b\u5df2\u7ecf\u542f\u52a8\uff0cApplication\u5bf9\u8c61\u5df2\u7ecf\u521b\u5efa\n        app = packageInfo.makeApplicationInner(false, mInstrumentation);\n        context = (ContextImpl) app.getBaseContext();\n        if (data.info.splitName != null) {\n            context = (ContextImpl) context.createContextForSplit(data.info.splitName);\n        }\n        if (data.info.attributionTags != null &amp;&amp; data.info.attributionTags.length &gt; 0) {\n            final String attributionTag = data.info.attributionTags[0];\n            context = (ContextImpl) context.createAttributionContext(attributionTag);\n        }\n        java.lang.ClassLoader cl = context.getClassLoader();\n        data.intent.setExtrasClassLoader(cl);\n        data.intent.prepareToEnterProcess(\n                isProtectedComponent(data.info) || isProtectedBroadcast(data.intent),\n                context.getAttributionSource());\n        data.setExtrasClassLoader(cl);\n        receiver = packageInfo.getAppFactory()\n                .instantiateReceiver(cl, data.info.name, data.intent);\n    } catch (Exception e) {\n        if (DEBUG_BROADCAST) Slog.i(TAG,\n                \"Finishing failed broadcast to \" + data.intent.getComponent());\n        data.sendFinished(mgr);\n        throw new RuntimeException(\n            \"Unable to instantiate receiver \" + component\n            + \": \" + e.toString(), e);\n    }\n\n    try {\n        if (localLOGV) Slog.v(\n            TAG, \"Performing receive of \" + data.intent\n            + \": app=\" + app\n            + \", appName=\" + app.getPackageName()\n            + \", pkg=\" + packageInfo.getPackageName()\n            + \", comp=\" + data.intent.getComponent().toShortString()\n            + \", dir=\" + packageInfo.getAppDir());\n\n        sCurrentBroadcastIntent.set(data.intent);\n        //\u8fd9\u91cc\u8fd8\u8c03\u7528\u4e86setPendingResult\u65b9\u6cd5\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770bBroadcastReceiver.goAsync\u65b9\u6cd5\u3002\n        receiver.setPendingResult(data);\n        //\u7ec8\u4e8e\u770b\u5230\u4e86\u719f\u6089\u7684onReceive\u56de\u8c03\u4e86\n        receiver.onReceive(context.getReceiverRestrictedContext(),\n                data.intent);\n    } catch (Exception e) {\n        if (DEBUG_BROADCAST) Slog.i(TAG,\n                \"Finishing failed broadcast to \" + data.intent.getComponent());\n        data.sendFinished(mgr);\n        if (!mInstrumentation.onException(receiver, e)) {\n            throw new RuntimeException(\n                \"Unable to start receiver \" + component\n                + \": \" + e.toString(), e);\n        }\n    } finally {\n        sCurrentBroadcastIntent.set(null);\n    }\n    //\u5411AMS\u53d1\u9001\u5904\u7406\u7ed3\u675f\u6d88\u606f\n    if (receiver.getPendingResult() != null) {\n        data.finish();\n    }\n}\n</code></pre> <p>handleReceiver\u4e3b\u8981\u5305\u62ec\u4e09\u6b65\uff1a</p> <ul> <li>\u521b\u5efaBroadcastReceiver\u5bf9\u8c61</li> <li>\u6267\u884conReceive\u51fd\u6570</li> <li>\u5411AMS\u53d1\u9001\u5904\u7406\u7ed3\u675f\u6d88\u606f</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_46","title":"\u8fdb\u7a0b\u8fd8\u672a\u542f\u52a8\u7684\u9759\u6001\u6709\u5e8f\u5e7f\u64ad\u63a5\u6536\u8005","text":"<pre><code>// Not running -- get it started, to be executed when the app comes up.\nif (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n        \"Need to start app [\"\n        + mQueueName + \"] \" + targetProcess + \" for broadcast \" + r);\n//\u542f\u52a8\u8fdb\u7a0b ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE (\u5ef6\u8fdf\u654f\u611f\u7684)\u6807\u7b7e\u7528\u4e8e\u786e\u5b9afork\u8fdb\u7a0b\u65f6\u662f\u5426\u9700\u8981\u4f7f\u7528usap\nr.curApp = mService.startProcessLocked(targetProcess,\n        info.activityInfo.applicationInfo, true,\n        r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,\n        new HostingRecord(HostingRecord.HOSTING_TYPE_BROADCAST, r.curComponent,\n                r.intent.getAction()),\n        isActivityCapable ? ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE : ZYGOTE_POLICY_FLAG_EMPTY,\n        (r.intent.getFlags() &amp; Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0, false);\nif (r.curApp == null) {\n    // Ah, this recipient is unavailable.  Finish it if necessary,\n    // and mark the broadcast record as ready for the next.\n    Slog.w(TAG, \"Unable to launch app \"\n            + info.activityInfo.applicationInfo.packageName + \"/\"\n            + receiverUid + \" for broadcast \"\n            + r.intent + \": process is bad\");\n    //\u5f53\u65e0\u6cd5\u542f\u52a8app\u7684\u65f6\u5019\uff0c\u5b8c\u6210\u8fd9\u4e2a\u5e7f\u64adBroadcastRecord r\u7684\u5206\u53d1finishReceiverLocked\n    logBroadcastReceiverDiscardLocked(r);\n    finishReceiverLocked(r, r.resultCode, r.resultData,\n            r.resultExtras, r.resultAbort, false);\n    scheduleBroadcastsLocked();\n    r.state = BroadcastRecord.IDLE;\n    return;\n}\n\nmaybeAddAllowBackgroundActivityStartsToken(r.curApp, r);\n// Need to start app \u9700\u8981\u5148\u542f\u52a8\u8be5\u8fdb\u7a0b\u4f1a\u8bbe\u7f6emPendingBroadcast = r;\n//\u542f\u52a8\u8fdb\u7a0b\u540e\u4f1a\u8c03\u7528attachApplicationLocked(AMS)\u3001bindApplication(IApplicationThread)\n//attachApplicationLocked(AMS)-&gt; sendPendingBroadcastsLocked \u4f1a\u5904\u7406mPendingBroadcast\nmPendingBroadcast = r;\n//mPendingBroadcastRecvIndex\u662f\u5f53\u524d\u9700\u8981\u5904\u7406recevie\u7684recIdx\nmPendingBroadcastRecvIndex = recIdx;\n</code></pre> <p>\u9759\u6001\u63a5\u6536\u8005\u8fdb\u7a0b\u5c1a\u672a\u542f\u52a8\uff0c\u8c03\u7528AMS\u7684startProcessLocked\u51fd\u6570\u542f\u52a8\u8be5\u63a5\u6536\u8005\u8fdb\u7a0b\uff0c\u5e76\u5c06\u5f53\u524d\u6b63\u5728\u7b49\u5f85\u8fdb\u7a0b\u542f\u52a8\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_47","title":"# \u8fdb\u7a0b\u521b\u5efa\u6d41\u7a0b","text":"<pre><code>ActivityThread.main -&gt; ActivityThread.attach -&gt; AMS.attachApplication -&gt; AMS.attachApplicationLocked -&gt; ActivityThread.bindApplication\n-&gt; AMS.sendPendingBroadcastsLocked -&gt; BroadcastQueue.sendPendingBroadcastsLocked -&gt; BroadcastQueue.processCurBroadcastLocked -&gt; ActivityThread.scheduleReceiver -&gt; ActivityThread.handleReceiver -&gt; BroadcastReceiver.onReceive(\u89e6\u53d1\u5e7f\u64ad\u63a5\u6536\u8005\u7684onReceive\u65b9\u6cd5)\n-&gt; ReceiverData.finishReceiver -&gt; AMS.finishReceiver\n</code></pre> <p>\u8fdb\u7a0b\u7684\u521b\u5efa\u6d41\u7a0b\u4e0d\u662f\u672c\u4e3b\u9898\u7684\u91cd\u70b9\uff0cAPP\u542f\u52a8\u540e\u4f1a\u8c03\u7528ActivityManagerService\u7684sendPendingBroadcastsLocked\u65b9\u6cd5\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#amssendpendingbroadcastslocked","title":"# AMS.sendPendingBroadcastsLocked","text":"<pre><code>// The app just attached; send any pending broadcasts that it should receive\nboolean sendPendingBroadcastsLocked(ProcessRecord app) {\n    boolean didSomething = false;\n    for (BroadcastQueue queue : mBroadcastQueues) {\n        didSomething |= queue.sendPendingBroadcastsLocked(app);\n    }\n    return didSomething;\n}\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#broadcastqueuesendpendingbroadcastslocked","title":"BroadcastQueue.sendPendingBroadcastsLocked","text":"<pre><code>public boolean sendPendingBroadcastsLocked(ProcessRecord app) {\n        boolean didSomething = false;\n        final BroadcastRecord br = mPendingBroadcast;\n        if (br != null &amp;&amp; br.curApp.getPid() &gt; 0 &amp;&amp; br.curApp.getPid() == app.getPid()) {\n            if (br.curApp != app) {\n                Slog.e(TAG, \"App mismatch when sending pending broadcast to \"\n                        + app.processName + \", intended target is \" + br.curApp.processName);\n                return false;\n            }\n            try {\n                mPendingBroadcast = null;\n                processCurBroadcastLocked(br, app,\n                        BROADCAST_DELIVERY_EVENT_REPORTED__RECEIVER_TYPE__MANIFEST,\n                        BROADCAST_DELIVERY_EVENT_REPORTED__PROC_START_TYPE__PROCESS_START_TYPE_COLD);\n                didSomething = true;\n            } catch (Exception e) {\n                Slog.w(TAG, \"Exception in new application when starting receiver \"\n                        + br.curComponent.flattenToShortString(), e);\n                logBroadcastReceiverDiscardLocked(br);\n                finishReceiverLocked(br, br.resultCode, br.resultData,\n                        br.resultExtras, br.resultAbort, false);\n                scheduleBroadcastsLocked();\n                // We need to reset the state if we failed to start the receiver.\n                br.state = BroadcastRecord.IDLE;\n                throw new RuntimeException(e.getMessage());\n            }\n        }\n        return didSomething;\n    }\n</code></pre> <p>\u53c8\u770b\u5230\u719f\u6089\u7684\u4ee3\u7801\u4e86\uff0c\u8c03\u7528processCurBroadcastLocked\u51fd\u6570\u8fdb\u884c\u5904\u7406\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_48","title":"\u6269\u5c55","text":"","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#_49","title":"\u547d\u4ee4","text":"<ul> <li> <p>dumpsys activity broadcasts</p> </li> <li> <p>Registered Receivers: \u5217\u51fa\u6240\u6709\u5df2\u6ce8\u518c\u7684receivers\u5217\u8868</p> </li> </ul> <pre><code>Registered Receivers:\n  * ReceiverList{e27a9e9 7522 com.iflytek.inputmethod.miui/10267/u0 remote:2779270}\n    app=7522:com.iflytek.inputmethod.miui/u0a267 pid=7522 uid=10267 user=0\n    Filter #0: BroadcastFilter{fde866e}\n      Action: \"android.intent.action.CLOSE_SYSTEM_DIALOGS\"\n  * ReceiverList{92b6fe2 7522 com.iflytek.inputmethod.miui/10267/u0 remote:a140ad}\n    app=7522:com.iflytek.inputmethod.miui/u0a267 pid=7522 uid=10267 user=0\n    Filter #0: BroadcastFilter{e61af73}\n      Action: \"android.net.conn.CONNECTIVITY_CHANGE\"\n</code></pre> <ul> <li>Receiver Resolver Table: receiver\u7684\u89e3\u6790\u8868</li> </ul> <pre><code>Receiver Resolver Table:\n    android.intent.action.CLOSE_SYSTEM_DIALOGS:\n      BroadcastFilter{139a975 1000/u0 ReceiverList{252e8ac 1836 system/1000/u0 local:f0f565f}}\n      BroadcastFilter{a385100 1000/u0 ReceiverList{a9b83 1836 system/1000/u0 local:9134232}}\n      BroadcastFilter{1da9d23 1000/u-1 ReceiverList{e41c652 1836 system/1000/u-1 local:aba2add}}\n      BroadcastFilter{431578f 1000/u0 ReceiverList{7a676ee 3687 com.android.systemui/1000/u0 remote:64f0c69}}\n      BroadcastFilter{ed9a812 1000/u0 ReceiverList{6a17b9d 3687 com.android.systemui/1000/u0 remote:11b8a74}}\n      BroadcastFilter{c50990f 1000/u-1 ReceiverList{29bce6e 3687 com.android.systemui/1000/u-1 remote:bed11e9}}\n      BroadcastFilter{a6b8070 1000/u0 ReceiverList{8b822b3 3687 com.android.systemui/1000/u0 remote:252a822}}\n      BroadcastFilter{fde866e 10267/u0 ReceiverList{e27a9e9 7522 com.iflytek.inputmethod.miui/10267/u0 remote:2779270}}\n      BroadcastFilter{55a4b6d 1000/u0 ReceiverList{4197784 7416 com.miui.securitycenter.remote/1000/u0 remote:19df997}}\n      BroadcastFilter{3e759c8 1000/u0 ReceiverList{7b0aa6b 7416 com.miui.securitycenter.remote/1000/u0 remote:2ee1bba}}\n      BroadcastFilter{56d5f61 1000/u0 ReceiverList{24552c8 7416 com.miui.securitycenter.remote/1000/u0 remote:756e76b}}\n      BroadcastFilter{3407249 10296/u0 ReceiverList{28ec050 13759 com.journeyOS.edge/10296/u0 remote:322f613}}\n      BroadcastFilter{582dd19 10155/u0 ReceiverList{f1fd460 3412 com.miui.systemAdSolution/10155/u0 remote:55a9063}}\n      BroadcastFilter{65b4041 10164/u0 ReceiverList{f6cab28 25413 com.miui.voiceassist/10164/u0 remote:35ce54b}}\n      BroadcastFilter{2848708 10164/u0 ReceiverList{77d44ab 25413 com.miui.voiceassist/10164/u0 remote:87fb6fa}}\n      BroadcastFilter{f601940 10270/u0 ReceiverList{3cf5cc3 32227 com.tencent.mm:appbrand2/10270/u0 remote:a594072}}\n      BroadcastFilter{b1ce8e 10171/u0 ReceiverList{3d87e89 23970 com.xiaomi.market/10171/u0 remote:c0a5590}}\n</code></pre> <ul> <li>Historical broadcasts [foreground]: \u524d\u53f0\u5e7f\u64ad\u5386\u53f2\u8bb0\u5f55</li> </ul> <pre><code>Historical broadcasts [foreground]:\n  Historical Broadcast foreground #1:// \u524d\u53f0\u5e7f\u64ad\u961f\u5217\u7b2c\u4e00\u6761\u5e7f\u64ad\n    BroadcastRecord{12fbe7c u-1 android.hardware.usb.action.USB_STATE} to user -1 //-1\u4ee3\u8868user_all\n    Intent { act=android.hardware.usb.action.USB_STATE flg=0x31000010 (has extras) }//flag\n      extras: Bundle[{host_connected=false, connected=true, unlocked=false, adb=true, configured=true}]\n    caller=android 1836:system/1000 pid=1836 uid=1000//\u53d1\u9001\u5e7f\u64adapp\u7684\u4fe1\u606f\n    enqueueClockTime=2022-11-17 15:44:28.352 dispatchClockTime=2022-11-17 15:44:28.681\n    dispatchTime=-2m56s517ms (+329ms since enq) finishTime=-2m56s506ms (+11ms since disp)// \u5206\u53d1\u7528\u65f6 \u3001 \u7ed3\u675f\u65f6\u95f4 \n    resultTo=null resultCode=0 resultData=null// \u4e00\u822cresultCode\u4e3a0\u4e14resultTo\u4e3anull\u4e14\u65e0ordered\u4e3afalse\u8868\u793a\u9759\u6001\u6ce8\u518c\u7684\u65e0\u5e8f\u5e7f\u64ad\n    resultAbort=false ordered=false sticky=true initialSticky=false\n    nextReceiver=2 receiver=null\n    Deliver +5ms #0: (manifest)//\u6d3e\u53d1\u7ed9\u9759\u6001\u6ce8\u518c\u7684receiver\n      priority=0 preferredOrder=0 match=0x108000 specificIndex=-1 isDefault=false\n      ActivityInfo:\n        name=com.android.mtp.MtpReceiver\n        packageName=com.android.mtp\n        processName=android.process.media\n        enabled=true exported=true directBootAware=false\n        resizeMode=RESIZE_MODE_RESIZEABLE\n    Deliver +6ms #1: (manifest)\n      priority=0 preferredOrder=0 match=0x108000 specificIndex=-1 isDefault=false//\u4f18\u5148\u7ea7\u9ed8\u8ba4\u4e3a0\n      ActivityInfo:// receiver\u7684\u4fe1\u606f\n        name=com.android.settings.connecteddevice.usb.UsbModeChooserReceiver\n        packageName=com.android.settings\n        enabled=true exported=true directBootAware=true\n        resizeMode=RESIZE_MODE_RESIZEABLE\n</code></pre> <p>\u8fd9\u91cc\u6ca1\u770b\u5230\u201crequiredPermissions\u201d\uff0c\u5982\u679c\u9700\u8981\u6743\u9650\uff0c\u8fd8\u5e94\u8be5\u6709\u5982\u4e0b\u5173\u952e\u4fe1\u606f</p> <pre><code>requiredPermissions=[android.permission.READ_NETWORK_USAGE_HISTORY]  appOp=-1\n</code></pre> <p>\u4e0b\u9762\u518d\u4e3e\u4f8b\u6709\u5e8f\u5e7f\u64ad\u7684\u4f8b\u5b50\uff1a</p> <pre><code>Historical Broadcast background #12: //\u540e\u53f0\u5e7f\u64ad\u961f\u5217\u7b2c12\u6761\n    BroadcastRecord{23a1e41 u-1 android.intent.action.BATTERY_CHANGED} to user -1 // -1\u4ee3\u8868user_all\n    Intent { act=android.intent.action.BATTERY_CHANGED flg=0x60000010 (has extras) } // intent\u4fe1\u606f\n      extras: Bundle[{technology=Li-poly, icon-small=17303618, max_charging_voltage=5000000, health=2, max_charging_current=3000000, status=2, plugged=1, present=true, seq=1622, charge_counter=3692780, level=91, scale=100, temperature=260, voltage=4433, invalid_charger=0, battery_low=false}]\n    caller=null null pid=1836 uid=1000 // \u53d1\u9001\u5e7f\u64adapp\u7684\u4fe1\u606f\n    enqueueClockTime=2022-11-17 15:44:50.357 dispatchClockTime=2022-11-17 15:44:50.357 // \u5165\u961f\u65f6\u95f4\u548c\u5206\u53d1\u65f6\u95f4\n    dispatchTime=-2m34s878ms (0 since enq) finishTime=-2m34s859ms (+19ms since disp)  // \u5206\u53d1\u7528\u65f6 \u3001\u7ed3\u675f\u65f6\u95f4\n    resultAbort=false ordered=false sticky=true initialSticky=false\n    // \u5206\u53d1\u6bcf\u4e00\u4e2areceiver\u7684\u5206\u53d1\u4fe1\u606f\u4ee5\u53ca\u72b6\u6001\n    // Deliver\u4ee3\u8868\u5f53\u524dreceiver\u5df2\u5206\u53d1\u5230\n    Deliver 0 #0: BroadcastFilter{702009b 1000/u0 ReceiverList{d32caa 3687 com.android.systemui/1000/u0 remote:ca25395}}\n    Deliver 0 #1: BroadcastFilter{f3f7b8a 1000/u0 ReceiverList{9a511f5 4320 com.miui.aod/1000/u0 remote:220a32c}}\n    Deliver 0 #2: BroadcastFilter{8e36b22 1000/u0 ReceiverList{91b20ed 4580 com.miui.aod:settings/1000/u0 remote:caa3304}}\n    Deliver 0 #3: BroadcastFilter{690c74b 1000/u0 ReceiverList{9bb201a 1836 system/1000/u0 local:88d2ec5}}\n    Deliver 0 #4: BroadcastFilter{9cd95f1 1000/u0 ReceiverList{c610998 1836 system/1000/u0 local:166f77b}}\n    Deliver 0 #5: BroadcastFilter{6bc6320 1000/u0 ReceiverList{5e92223 9024 com.miui.powerkeeper/1000/u0 remote:9133f52}}\n    Deliver 0 #6: BroadcastFilter{9d3ab0e 1000/u0 ReceiverList{c1dfd09 1836 system/1000/u0 local:514be10}}\n    Deliver 0 #7: BroadcastFilter{281fba8 1000/u0 ReceiverList{82b27cb 1836 system/1000/u0 local:eb8b29a}}\n    Deliver 0 #8: BroadcastFilter{750ef2a 1000/u0 ReceiverList{c4b9015 1836 system/1000/u0 local:8b7c5cc}}\n    Deliver 0 #9: BroadcastFilter{c620732 1000/u0 ReceiverList{ae1633d 1836 system/1000/u0 local:a91cc94}}\n    Deliver 0 #10: BroadcastFilter{f7e5ddf 1000/u0 ReceiverList{1a5647e 1836 system/1000/u0 local:905f639}}\n    Deliver 0 #11: BroadcastFilter{6dd8a95 1000/u0 ReceiverList{bc31a4c 1836 system/1000/u0 local:280ca7f}}\n    Deliver 0 #12: BroadcastFilter{d7c746e 1000/u0 ReceiverList{4f08fe9 1836 system/1000/u0 local:dc5070}}\n    Deliver 0 #13: BroadcastFilter{3bdf32 6110/u0 ReceiverList{11b9b3d 3644 com.xiaomi.finddevice/6110/u0 remote:8f1e494}}\n    Deliver 0 #14: BroadcastFilter{ac1e890 1000/u0 ReceiverList{b849753 3687 com.android.systemui/1000/u0 remote:3ab8b42}}\n    Deliver 0 #15: BroadcastFilter{6cf0a78 1002/u0 ReceiverList{b7aefdb 3409 com.android.bluetooth/1002/u0 remote:d6950ea}}\n    Deliver 0 #16: BroadcastFilter{bed2aee 1000/u0 ReceiverList{1701069 1836 system/1000/u0 local:69f82f0}}\n    Deliver 0 #17: BroadcastFilter{f0507fa 1000/u0 ReceiverList{7704a25 1836 system/1000/u0 local:a91de1c}}\n    Deliver 0 #18: BroadcastFilter{45519d1 1001/u0 ReceiverList{6c6b0f8 6950 com.miui.dmregservice/1001/u0 remote:87205b}}\n    Deliver 0 #19: BroadcastFilter{acde4fa 1000/u0 ReceiverList{58e7b25 7416 com.miui.securitycenter.remote/1000/u0 remote:c76331c}}\n    Deliver 0 #20: BroadcastFilter{20bc9b4 1000/u0 ReceiverList{85a7687 7416 com.miui.securitycenter.remote/1000/u0 remote:c8556c6}}\n    Deliver 0 #21: BroadcastFilter{8d7795 1000/u0 ReceiverList{1ba9b4c 7416 com.miui.securitycenter.remote/1000/u0 remote:991af7f}}\n    Deliver 0 #22: BroadcastFilter{80f07e4 1000/u0 ReceiverList{2680f77 7416 com.miui.securitycenter.remote/1000/u0 remote:4b6fd76}}\n    Deliver 0 #23: BroadcastFilter{5db9849 1000/u0 ReceiverList{ba6be50 7416 com.miui.securitycenter.remote/1000/u0 remote:dc42c13}}\n    Deliver 0 #24: BroadcastFilter{26eca43 1000/u0 ReceiverList{a43f3f2 9052 com.xiaomi.joyose/1000/u0 remote:180afd}}\n    Deliver 0 #25: BroadcastFilter{e790cbf 1000/u0 ReceiverList{8f402de 9024 com.miui.powerkeeper/1000/u0 remote:9cc9219}}\n    Deliver 0 #26: BroadcastFilter{bab5a56 10211/u0 ReceiverList{297cf8a 3663 com.qualcomm.qti.devicestatisticsservice/10211/u0 remote:49a35f5}}\n    Deliver 0 #27: BroadcastFilter{310764e 10153/u0 ReceiverList{eded49 7119 com.miui.voicetrigger/10153/u0 remote:ae94750}}\n    Deliver 0 #28: BroadcastFilter{6a5eb64 1000/u0 ReceiverList{e4650f7 9024 com.miui.powerkeeper/1000/u0 remote:f0754f6}}\n    Deliver 0 #29: BroadcastFilter{e22ec6d 10153/u0 ReceiverList{bfc84 7119 com.miui.voicetrigger/10153/u0 remote:5637297}}\n    Deliver 0 #30: BroadcastFilter{4a9f7f3 1000/u0 ReceiverList{2bd8a62 6974 com.miui.daemon/1000/u0 remote:c19352d}}\n    Deliver 0 #31: BroadcastFilter{dec3de6 10296/u0 ReceiverList{6b43441 13759 com.journeyOS.edge/10296/u0 remote:e80ef28}}\n    Deliver 0 #32: BroadcastFilter{a48a509 10296/u0 ReceiverList{c210610 14610 com.journeyOS.edge:push/10296/u0 remote:79fbad3}}\n    Deliver 0 #33: BroadcastFilter{6065083 10137/u0 ReceiverList{188ab32 16861 com.xiaomi.metoknlp/10137/u0 remote:fac173d}}\n    Deliver 0 #34: BroadcastFilter{1175a18 10270/u0 ReceiverList{5ba39fb 27689 com.tencent.mm:push/10270/u0 remote:28cef8a}}\n    Deliver 0 #35: BroadcastFilter{b1b3a5 10270/u0 ReceiverList{ab8fd9c 28651 com.tencent.mm/10270/u0 remote:5fde90f}}\n    Deliver 0 #36: BroadcastFilter{1bfe54a 10194/u0 ReceiverList{3220ab5 3621 org.codeaurora.ims/10194/u0 remote:b8706ec}}\n    Deliver 0 #37: BroadcastFilter{66951a6 10296/u0 ReceiverList{6ee3f01 850 com.journeyOS.edge:core/10296/u0 remote:2056ce8}}\n    Deliver 0 #38: BroadcastFilter{582dd19 10155/u0 ReceiverList{f1fd460 3412 com.miui.systemAdSolution/10155/u0 remote:55a9063}}\n    Deliver 0 #39: BroadcastFilter{7dbc345 10270/u0 ReceiverList{54907bc 32227 com.tencent.mm:appbrand2/10270/u0 remote:b3d47af}}\n    Deliver 0 #40: BroadcastFilter{c7ceb97 10291/u0 ReceiverList{8233616 4230 com.android.chrome/10291/u0 remote:ee82f31}}\n    Deliver 0 #41: BroadcastFilter{d29701e 1000/u0 ReceiverList{16a6c59 3687 com.android.systemui/1000/u0 remote:73b18a0}}\n    Deliver 0 #42: BroadcastFilter{b2b2dad 10171/u0 ReceiverList{f737ac4 23970 com.xiaomi.market/10171/u0 remote:65d01d7}}\n</code></pre> <p>\u5982\u679c\u6709\u6743\u9650\u8981\u6c42\uff0c\u8fd8\u8ddf\u4e0a\u9762\u7684\u65e0\u5e8f\u5e7f\u64ad\u4e00\u6837\uff1b\u800c\u4e14\u5982\u679c\u63a5\u53d7\u8005\u6ca1\u6709\u6743\u9650\uff0c\u8fd8\u6709\u63d0\u793a\u6d3e\u53d1\u4e0d\u6210\u529f\uff1a</p> <pre><code>Skipped 0 xxxxxxxxxx\n</code></pre> <ul> <li>Historical broadcasts summary [foreground]: \u524d\u53f0\u5e7f\u64ad\u5386\u53f2\u8bb0\u5f55\u7b80\u8981</li> </ul> <pre><code>  Historical broadcasts summary [background]:\n  #0: act=com.android.server.action.NETWORK_STATS_UPDATED flg=0x40000010\n    0 dispatch +1ms finish\n    enq=2022-11-17 15:47:08.580 disp=2022-11-17 15:47:08.580 fin=2022-11-17 15:47:08.581 //\u5165\u961f\u65f6\u95f4\u3001\u6d3e\u53d1\u65f6\u95f4\u3001\u7ed3\u675f\u65f6\u95f4\n</code></pre> <ul> <li>Historical broadcasts [background]\uff1a\u540e\u53f0\u5e7f\u64ad\u5386\u53f2\u8bb0\u5f55</li> <li> <p>Historical broadcasts summary [background]: \u540e\u53f0\u5e7f\u64ad\u5386\u53f2\u8bb0\u5f55\u7b80\u8981</p> </li> <li> <p>dumpsys activity broadcast-stats</p> </li> </ul> <pre><code>android.intent.action.USER_PRESENT:\n  Number received: 0, skipped: 559// \u5206\u53d10\u6b21\uff0c\u8df3\u8fc7559\u6b21\n  Total dispatch time: +740ms, max: +59ms // \u603b\u5206\u53d1\u7528\u65f6\uff0c\u548c\u6700\u5927\u5206\u53d1\u7528\u65f6\n  Package com.android.systemui: 107 times\n  Bg Check Violation com.journeyOS.edge: 107 times\n  Bg Check Violation com.miui.voiceassist: 107 times\n  Bg Check Violation ctrip.android.view: 107 times\n  Bg Check Violation com.taobao.idlefish: 107 times\n  Bg Check Violation com.android.chrome: 14 times\n  Bg Check Violation cn.gov.tax.its: 107 times\n  Bg Check Violation com.homelink.android: 10 times\n</code></pre>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#flag","title":"flag","text":"<ul> <li>FLAG_RECEIVER_REGISTERED_ONLY</li> </ul> <p>\u8868\u793a\u5f53\u524d\u5e7f\u64ad\u53ea\u5141\u8bb8\u52a8\u6001\u6ce8\u518c\u7684receiver\u63a5\u6536\uff0c\u907f\u514d\u907f\u514d\u4e00\u4e9b\u7cfb\u7edf\u5e7f\u64ad\uff08\u5982TIME_TICK\u7b49\uff09\u62c9\u8d77\u9759\u6001\u6ce8\u518c\u7684app\u8fdb\u7a0b\u3002</p> <ul> <li>FLAG_RECEIVER_REPLACE_PENDING</li> </ul> <p>\u5982\u679c\u5e7f\u64ad\u961f\u5217\u4e2d\u5b58\u5728\u6ca1\u6709\u88ab\u5904\u7406\u7684\u76f8\u540c\u5e7f\u64ad\uff0c\u5219\u76f4\u63a5\u66ff\u6362\u6389\u4e4b\u524d\u7684\u5e7f\u64ad\uff0c\u65e0\u5e8f\u518d\u5165\u961f\u5206\u53d1</p> <ul> <li>FLAG_RECEIVER_FOREGROUND</li> </ul> <p>\u53d1\u9001\u5e7f\u64ad\u65f6\u6dfb\u52a0\u8fd9\u4e2aflag\uff0c\u5e7f\u64ad\u5c06\u4f1a\u88ab\u6dfb\u52a0\u5230\u524d\u53f0\u5e7f\u64ad\u961f\u5217\u4e2d\u3002</p>","tags":["Android","Broadcast"]},{"location":"android/broadcast/intro/#reference","title":"Reference","text":"<ul> <li>https://blog.csdn.net/xiaoyantan/article/details/120000708</li> <li>https://blog.csdn.net/qijingwang/article/details/122199832</li> <li>https://www.cnblogs.com/linghu-java/articles/10307915.html</li> </ul>","tags":["Android","Broadcast"]},{"location":"android/selinux/intro/","title":"Android SELinux\u4ecb\u7ecd","text":"","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_1","title":"\u524d\u8a00","text":"<p>\u81eaAndroid L\u5f00\u59cb\uff0cAndroid\u5168\u9762\u542f\u7528\u4e86SELinux\u3002\u672c\u6587\u65e8\u5728\u4ecb\u7ecdSELinux\u80cc\u540e\u7684\u4e00\u4e9b\u7ec6\u8282\uff0cAndroid\u7684\u5b9e\u73b0\uff0c\u6b64\u5916\u8fd8\u6709\u521b\u5efa\uff0c\u62d3\u5c55\uff0c\u5220\u9664\u89c4\u5219\u7684\u4e0d\u540c\u9009\u9879\u3002 \u672c\u6587\u4f1a\u4ece\u8bed\u6cd5\u3001Android SE\u6d41\u7a0b\u7b49\u8be6\u7ec6\u4ecb\u7ecdSELinux\u76f8\u5173\u77e5\u8bc6\u3002\u5982\u679c\u8bfb\u8005\u4e0d\u611f\u5174\u8da3\uff0c\u53ea\u60f3\u5feb\u901f\u7684\u89e3\u51b3\u67d0\u4e2a\u8fdb\u7a0b\u7f3a\u5c11SELinux\u5bfc\u81f4\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u201c\u4e07\u80fd\u516c\u5f0f\u201d\u8fd9\u4e00\u8282\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_2","title":"\u7b80\u4ecb","text":"<p>SElinux\u662flinux\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u4e2aMAC\uff08mandatory access control\uff09\u5b50\u7cfb\u7edf\u3002MAC\u4e0d\u540c\u4e8e\u6811\u679d\u7684DAC\uff08 discretionary access control\uff09\u7cfb\u7edf\uff0c\u5b83\u901a\u8fc7\u6388\u6743\u4e2d\u5fc3\u6765\u51b3\u5b9a\u662f\u5426\u6709\u8d44\u683c\u8bbf\u95ee\u76ee\u6807\u8d44\u6e90\u3002 SElinux\u5df2\u7ecf\u5728LSM\uff08Linux Security Module\uff09\u6846\u67b6\u4e2d\u5b9e\u73b0\uff0c\u5b83\u4f1a\u8bc6\u522b\u5404\u79cd\u5185\u6838\u7ec4\u4ef6\uff0c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u654f\u611f\u64cd\u4f5c\u3002\u5f53\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u65f6\uff0c\u4f1a\u901a\u8fc7\u8c03\u7528\u4e00\u4e2ahook\u51fd\u6570\u6765\u786e\u5b9a\u5f53\u524d\u64cd\u4f5c\u662f\u5426\u88ab\u5408\u6cd5\u3002hook\u51fd\u6570\u7531SELinux\u5b9e\u73b0\uff0cSELinux\u57fa\u4e8e\u81ea\u5df1\u7684\u89c4\u5219\u6570\u636e\u6765\u786e\u5b9a\u5f53\u524d\u64cd\u4f5c\u7684\u5408\u6cd5\u6027\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_3","title":"\u5de5\u4f5c\u6a21\u5f0f","text":"<ul> <li>permissive\uff1a\u6240\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u64cd\u4f5c\u90fd\u88ab\u5141\u8bb8\uff08\u5373\u6ca1\u6709MAC\uff09\uff0c\u4f46\u662f\u5982\u679c\u6709\u8fdd\u53cd\u6743\u9650\u7684\u8bdd\uff0c\u4f1a\u8bb0\u5f55\u65e5\u5fd7\u3002</li> <li>enforcing\uff1a\u6240\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u5bf9\u5176\u8fdb\u884c\u6743\u9650\u68c0\u67e5\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_4","title":"\u5de5\u4f5c\u539f\u7406","text":"<p>SELinux \u7684\u5de5\u4f5c\u7406\u5ff5\u662f\u7528\u6807\u7b7e**\uff08labels\uff09\u6765\u5339\u914d\u5404\u79cd\u64cd\u4f5c\u548c\u5404\u79cd\u89c4\u5219\u3002SELinuxz\u4e2d\uff0cSocket\uff0c\u6587\u4ef6\u4ee5\u53ca\u8fdb\u7a0b\u90fd\u4f1a\u88ab\u6253\u4e0a\u6807\u7b7e\uff0c\u7136\u540e\u57fa\u4e8e\u7528\u6237\u5bf9\u5404\u79cd\u6807\u7b7e\u5b9a\u4e49\u7684\u8bbf\u95ee\u89c4\u5219\u6765\u505a\u51fa\u5224\u65ad\u3002 SELinux\u4e2d\uff0c\u6807\u7b7e\u7684\u683c\u5f0f\u4e3a\uff1a**user:role:type:mls_level\u3002\u5176\u4e2d\uff0ctype\u6bb5\u6700\u4e3a\u5e38\u7528\u3002 SELinux\u4e2d\uff0c\u89c4\u5219**\uff08rules\uff09\u7684\u683c\u5f0f\u4e3a\uff1a**allow domains types:classes permissions;\u3002\u5176\u4e2d\uff1a</p> <ul> <li>Domain\uff1a\u4e00\u4e2a\u6216\u4e00\u7ec4\u8fdb\u7a0b\u7684\u6807\u7b7e\uff0c\u7406\u89e3\u4e3a\u8fdb\u7a0b\u6807\u7b7e\u4e2d\u7684 type \u90e8\u5206\u3002</li> <li>Type\uff1a\u4e00\u4e2a\u6216\u4e00\u7ec4\u5bf9\u8c61\u7684\u6807\u7b7e\uff0c\u7406\u89e3\u4e3a\u975e\u8fdb\u7a0b\u5bf9\u8c61\u6807\u7b7e\u4e2d\u7684 type \u90e8\u5206\u3002</li> <li>Class\uff1a\u8868\u793a\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u7406\u89e3\uff1a\u591a\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6253\u4e0a\u76f8\u540c\u7684\u6807\u7b7e\uff0c\u610f\u5473\u7740\u6587\u4ef6\uff0c\u6587\u4ef6\u5939\uff0csokcet\u7b49\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u4ef6\u90fd\u53ef\u80fd\u6253\u4e0a\u76f8\u540c\u6807\u7b7e\uff0c\u6240\u4ee5\u9700\u8981class\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u3002</li> <li>Permission\uff1a\u8868\u793a\u8fdb\u7a0b\u5bf9\u5bf9\u8c61\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u6bd4\u5982 read\uff0cwrite\u7b49\u3002</li> </ul> <p>\u793a\u4f8b\uff1aallow appdomain app_data_file:file rw_file_perms;</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#android","title":"Android\u5b9e\u73b0","text":"<p>Android\u7684\u5b89\u5168\u6a21\u578b\u662f\u5efa\u7acb\u5728\u5e94\u7528\u6c99\u76d2\u7684\u6982\u5ff5\u4e0a\u7684\uff0cAndroid4.3\u4e4b\u524d\uff0cAndroid\u901a\u8fc7\u7ed9\u4e0d\u540c\u5e94\u7528\u5206\u914d\u4e0d\u540cuid\u6765\u5efa\u7acb\u6c99\u76d2\u73af\u5883\uff0c4.3\u4e4b\u540e\uff0cAndroid\u5f15\u5165\u4e86SELinux\u673a\u5236\uff0c\u4e3a\u6c99\u76d2\u589e\u52a0\u4e86\u65b0\u7684\u8fb9\u754c\u3002SEAndroid\u91c7\u7528\u9ed8\u8ba4\u62d2\u7edd\u7684\u7b56\u7565\uff0c\u5373\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u8fdb\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u4efb\u4f55\u5bf9\u8c61\uff0c\u6240\u6709\u7684\u8bbf\u95ee\u9700\u8981\u88ab\u660e\u786e\u5b9a\u4e49\uff0c\u4ee5\u6b64\u589e\u5f3aAndroid\u7684\u5b89\u5168\u6027\u3002\u8fd9\u610f\u5473\u7740\u4e00\u4e2a\u7b56\u7565\u6587\u4ef6\u4f1a\u5305\u542b\u5927\u91cf\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u89c4\u5219\uff08rules\uff09\uff0c\u7c7b\u578b\uff08types\uff09\uff0c\u7c7b\u522b\uff08classes\uff09\uff0c\u6743\u9650\uff08permissions\uff09\u7b49\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_5","title":"\u5dee\u5f02","text":"<p>\u4e0e\u6807\u51c6SELinux\u7684\u5dee\u5f02\u4e3b\u8981\u662f\uff1aAndroid\u9488\u5bf9\u5176\u5e73\u53f0\u7279\u6027\uff0c\u589e\u52a0\u4e86BInder IPC\u673a\u5236\u7684\u76f8\u5173SE\u7b56\u7565\uff0c\u4ee5\u6b64\u6765\u63a7\u5236Binder\u901a\u4fe1\u7b56\u7565\u3002\u76f8\u5173patch\u5982\u4e0b\uff1a</p> <ul> <li>https://android.googlesource.com/kernel/common/+/c76b9f83</li> </ul> <p>Android\u7b80\u5316SE\u6807\u7b7e\u7684\u4f7f\u7528\uff0c\u5b9e\u9645\u4e0a\uff0cAndroid\u53ea\u7528\u4e86\u5176\u4e2d\u4e24\u4e2a\u90e8\u5206\uff1arole \u548c type\uff0c\u53e6\u5916\u4e24\u4e2a\u90e8\u5206\u4f9d\u7136\u5b58\u5728\uff0c\u4e0d\u8fc7\u88ab\u5199\u6b7b\u6210 <code>u:role:type:s0</code>\u3002<code>role</code>\u90e8\u5206\u6709\u4e24\u4e2a\u53d6\u503c\u5206\u522b\u4e3a\uff1a</p> <ul> <li>r \uff1adomains (processes)</li> <li>object_r \uff1a\u5bf9\u8c61 objects.</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#se","title":"SE\u76f8\u5173\u6587\u4ef6","text":"<ul> <li>***.te**\uff1aSE\u89c4\u5219\u5b9a\u4e49\u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u4e2d\u5b9a\u4e49\u57df\uff08domain\uff09\u53ca\u5176\u6807\u7b7e\uff08label\uff09\u3002\u65b0\u589e\u7684<code>te</code>\u6587\u4ef6\u4f1a\u4e0e\u7cfb\u7edf\u6240\u6709\u7684 <code>te</code> \u6587\u4ef6\u6574\u5408\u6210\u4e00\u4e2a\u5355\u72ec\u7684 SE \u5185\u6838\u89c4\u5219\u6587\u4ef6\u3002</li> <li>BoardConfig.mk\uff1a\u5f15\u5165\u989d\u5916\u5b58\u653eSE\u89c4\u5219\u5b9a\u4e49\u76ee\u5f55\u7684mk\u6587\u4ef6\u3002SE\u89c4\u5219\u6587\u4ef6\u53ef\u4ee5\u5b58\u653e\u5230\u4efb\u610f\u76ee\u5f55\u4e0b\uff0c\u4f46\u9700\u8981\u5728 <code>[BoardConfig.mk](http://boardconfig.mk/)</code> \u4e2d\u5f15\u5165\u5bf9\u5e94\u76ee\u5f55\u65b9\u53ef\u751f\u6548\u3002</li> <li>file_contexts\uff1a\u7cfb\u7edf\u4e2d\u5404\u6587\u4ef6\u8d34\u6807\u7b7e\u5904\u3002\u7528\u4e8e\u4e3a\u6587\u4ef6\u5206\u914d\u6807\u7b7e\uff0c\u88ab\u5404\u79cd\u7528\u6237\u7a7a\u95f4\u7684\u7ec4\u4ef6\u4f7f\u7528\u3002\u5f53\u521b\u5efa\u65b0\u7684 <code>te</code> \u6587\u4ef6\u6765\u5b9a\u4e49\u65b0\u7c7b\u578b\u65f6\uff0c\u9700\u8981\u4fee\u6539\uff08\u6216\u65b0\u5efa\uff09<code>file_contexts</code> \u6587\u4ef6\u4f7f\u65b0\u5efa\u7684\u7c7b\u578b\u5f97\u4ee5\u751f\u6548\u3002\u4fee\u6539 <code>file_contexts</code> \u540e\u9700\u8981\u91cd\u7f16ROM\u4f7f\u4e4b\u751f\u6548\u3002</li> <li>genfs_contexts\uff1a \u7cfb\u7edf\u4e2d\u5404\u79cd\u7279\u6b8a\u6587\u4ef6\uff08\u4f8b\u5982\uff0c<code>proc</code> \u6216 <code>vfat</code>\uff09\u8d34\u6807\u7b7e\u5904\u3002\u8be5\u914d\u7f6e\u4f1a\u4f5c\u4e3a\u5185\u6838SE\u89c4\u5219\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u52a0\u8f7d\u3002</li> <li>property_contexts\uff1a Android \u7cfb\u7edf\u5c5e\u6027\u8d34\u6807\u7b7e\u5904\u3002\u4ee5\u6b64\u63a7\u5236\u8fdb\u7a0b\u5bf9\u5c5e\u6027\u7684\u8bbf\u95ee\u3002\u5728\u542f\u52a8\u671f\u95f4\uff0c<code>init</code> \u8fdb\u7a0b\u4f1a\u8bfb\u53d6\u6b64\u914d\u7f6e\u3002</li> <li>service_contexts\uff1a Android Binder \u670d\u52a1\u8d34\u6807\u7b7e\u5904\u3002\u4ee5\u6b64\u63a7\u5236\u8fdb\u7a0b\u6dfb\u52a0\uff08register\uff09\u548c\u67e5\u627e\uff08lookup\uff09Binder \u5f15\u7528\u3002\u5728\u542f\u52a8\u671f\u95f4\uff0c<code>servicemanager</code> \u8fdb\u7a0b\u4f1a\u8bfb\u53d6\u6b64\u914d\u7f6e\u3002</li> <li>seapp_contexts\uff1a \u5e94\u7528\u8fdb\u7a0b\u548c <code>/data/data</code> \u76ee\u5f55\u8d34\u6807\u7b7e\u5904\u3002\u5728\u6bcf\u6b21\u5e94\u7528\u542f\u52a8\u65f6\uff0c<code>zygote</code> \u8fdb\u7a0b\u636e\u6b64\u786e\u5b9a\u5e94\u7528\u7684SE\u6807\u7b7e\uff1b<code>installd</code> \u636e\u6b64\u786e\u5b9a <code>/data/data</code> \u7684SE\u6807\u7b7e\u3002</li> <li>mac_permissions.xml\uff1a\u6839\u636e\u5e94\u7528\u7b7e\u540d\u548c\u5e94\u7528\u8f6f\u4ef6\u5305\u540d\u79f0\uff08optionally\uff09\u4e3a\u5e94\u7528\u5206\u914d <code>seinfo</code> \u6807\u8bb0\u3002<code>seapp_contexts</code> \u6587\u4ef6\u4f1a\u6839\u636e <code>seinfo</code> \u6807\u8bb0\u4e3a\u5e94\u7528\u5206\u914d\u7279\u5b9a\u6807\u7b7e\u3002\u5728\u542f\u52a8\u671f\u95f4\uff0c<code>system_server</code> \u4f1a\u8bfb\u53d6\u6b64\u914d\u7f6e\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_6","title":"\u8bed\u6cd5","text":"<p>SE\u76f8\u5173\u7684\u8bed\u6cd5\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u7c7b\uff1a</p> <ul> <li>Policy Configuration Statements</li> <li>Default Rules</li> <li>User Statements</li> <li>Role Statements</li> <li>Type Statements</li> <li>Bounds Rules</li> <li>Access Vector Rules</li> <li>Extended Permission Access Vector Rules</li> <li>Object Class and Permission Statements</li> <li>Conditional Policy Statements</li> <li>Constraint Statements</li> <li>MLS Statements</li> <li>Security ID (SID) Statement</li> <li>File System Labeling Statements</li> <li>Network Labeling Statements</li> <li>Modular Policy Support Statements</li> <li>XEN Statements</li> </ul> <p>\u672c\u6587\u53ea\u5217\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u8bed\u6cd5\uff0c\u5176\u4ed6\u8bed\u6cd5\u81ea\u67e5\u4e0a\u8ff0\u8fde\u63a5\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#type-statements","title":"Type Statements","text":"","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#type","title":"type","text":"<p>\u5728\u4f7f\u7528\u7c7b\u578b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528type\u8bed\u53e5\u660e\u786e\u5730\u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u6807\u8bc6\u7b26\uff0cSELinux\u6ca1\u6709\u9884\u5b9a\u4e49\u7c7b\u578b\uff0c\u6211\u4eec\u5fc5\u987b\u81ea\u884c\u58f0\u660e\uff0c\u58f0\u660e\u4e86\u7c7b\u578b\u540e\u5c31\u53ef\u4ee5\u5728\u5b89\u5168\u4e0a\u4e0b\u6587\u3001TE\u89c4\u5219\u548c\u5176\u5b83\u7b56\u7565\u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e86\u3002</p> <pre><code>## type \u7c7b\u578b\u540d\u79f0 [alias \u522b\u540d\u96c6] [,\u5c5e\u6027\u96c6];\n## \u522b\u540d\u96c6\uff1a\u5373\u5f02\u540d\u540c\u610f\u3002\u5982\u679c\u6307\u5b9a\u7684\u4e0d\u6b62\u4e00\u4e2a\u522b\u540d\u6807\u8bc6\u7b26\uff0c\u8981\u5728\u4e00\u5bf9\u5927\u62ec\u53f7\u4e2d\u7528\u7a7a\u683c\u5c06\u5404\u4e2a\u522b\u540d\u533a\u522b\u5f00\u6765\uff0c\u5982\uff1aalias {aliasa_t aliasb_t}\u3002\n## \u5c5e\u6027\u96c6\uff1a\u8d4b\u4e88\u8be5type\u5b9a\u4e49\u7684\u5c5e\u6027\u4e4b\u4e2d\u3002\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u9884\u5148\u58f0\u660e\u7684\u5c5e\u6027\u6807\u8bc6\u7b26\uff0c\u5982\u679c\u540c\u65f6\u6307\u5b9a\u591a\u4e2a\u5c5e\u6027\u6807\u8bc6\u7b26\uff0c\u5c5e\u6027\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u8fdb\u884c\u5206\u9694\uff0c\u5982\uff1atype bin_t, file_type, exec_type;\n\ntype type_id [alias alias_id] [, attribute_id];\n## type            The type keyword.\n## type_id         The type identifier.\n## alias           Optional alias keyword that signifies alternate identifiers for the type_id that are declared in the alias_id list.\n## alias_id        One or more alias identifiers that have been previously declared by the [typealias](https://selinuxproject.org/page/TypeStatements#typealias) statement.\n##                 Multiple entries consist of a space separated list enclosed in braces ({}).\n## attribute_id    One or more optional attribute identifiers that have been previously declared by the [attribute](https://selinuxproject.org/page/TypeStatements#attribute)\n##                 statement. Multiple entries consist of a comma (,) separated list, also note the lead comma.\n</code></pre> <p>\u4f8b\u5b50:</p> <pre><code>## Using the type statement to declare a type of shell_exec_t,\n## where exec_t is used to identify a file as an executable type.\ntype shell_exec_t;\n</code></pre> <pre><code>## Using the type statement to declare a type of\n## ssh_server_packet_t that also associates it to two previously\n## declared attributes packet_type and server_packet_type.\n\nattribute packet_type;        ## declare attribute 1\nattribute server_packet_type; ## declare attribute 2\n\n## Associate the type identifier with the two attributes:\n\ntype ssh_server_packet_t, packet_type, server_packet_type;\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#attribute","title":"attribute","text":"<p>\u7531\u4e8eSELinux\u7684\u9ed8\u8ba4\u7684\u89c4\u5219\u662f\u62d2\u7edd\u6240\u6709\u7684\u8bbf\u95ee\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u4e2a\u8bbf\u95ee\u90fd\u9700\u8981\u6709\u4e00\u4e2a\u89c4\u5219\u5b9a\u4e49\u4e0e\u4e4b\u5339\u914d\u3002Android\u4e2d\u7684type\u597d\u51e0\u767e\uff0c\u9010\u4e2a\u5b9a\u4e49\u8017\u65f6\u5de8\u5927\uff0c\u6240\u4ee5\u5f15\u5165\u5c5e\u6027\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5c5e\u6027\u8d4b\u4e88\u591a\u4e2atype\uff0c\u4ee5\u6b64\u8fbe\u5230\u6279\u91cf\u5b9a\u4e49\u89c4\u5219\u7684\u76ee\u7684\u3002 <pre><code>## attribute \u5c5e\u6027\u540d\u79f0;\nattribute attribute_id;\n## attribute       The attribute keyword.\n## attribute_id    The attribute identifier.\n</code></pre></p> <p>\u4f8b\u5b50:</p> <pre><code>## Using the attribute statement to declare attributes domain,\n## daemon, file_type and non_security_file_type:\n\nattribute domain;\nattribute daemon;\nattribute file_type;\nattribute non_security_file_type;\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#access-vector-rules","title":"Access Vector Rules","text":"<p>The common format of the Access Vector Rule is:</p> <pre><code>rule_name source_type target_type : class perm_set;\n## rule_name                The applicable allow, dontaudit, auditallow, and neverallow rule keyword.\n#\n## source_type/target_type  One or more source / target type, typealias or attribute identifiers. Multiple entries consist of\n##                          a space separated list enclosed in braces ({}). Entries can be excluded from the list by using the\n##                          negative operator (-).The target_type can have the self keyword instead of type, typealias or attribute\n##                          identifiers. This means that the target_type is the same as the source_type.The neverallow rule also\n##                          supports the wildcard operator (*) to specify that all types are to be included and the complement operator (~)\n##                          to specify all types are to be included except those explicitly listed.\n#\n## class                    One or more object classes. Multiple entries consist of a space separated list enclosed in braces ({}).\n#\n## perm_set                 The access permissions the source is allowed to access for the target object (also known as the Acess Vector).\n##                          Multiple entries consist of a space separated list enclosed in braces ({}).The optional wildcard operator (*)\n##                          specifies that all permissions for the object class can be used.The complement operator (~) is used to specify\n##                          all permissions except those explicitly listed (although the compiler issues a warning if the dontaudit rule has '~').\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#allow","title":"allow","text":"<p>allow\u89c4\u5219\u68c0\u67e5\u5b9a\u4e49\u8fdb\u7a0b\u662f\u5426\u6709\u6743\u8bbf\u95ee\u67d0\u4e2a\u7cfb\u7edf\u8d44\u6e90\u3002</p> <pre><code>## Using the allow rule to show that initrc_t is allowed access\n## to files of type acct_exec_t that have the getattr, read and\n## execute file permissions:\n\nallow initrc_t acct_exec_t:file { getattr read execute };\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#neverallow","title":"neverallow","text":"<p>\u8be5\u89c4\u5219\u6307\u5b9a\u5373\u4f7f\u8be5\u64cd\u4f5c\u5148\u524d\u5df2\u88ab\u5141\u8bb8\uff0c\u4e5f\u4e0d\u80fd\u4e3a\u8be5\u64cd\u4f5c\u751f\u6210\u5141\u8bb8\u89c4\u5219\u3002 neverallow\u8bed\u53e5\u662f\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5176\u4e2dcheckpolicy\u6216checkmodule [1]\u7f16\u8bd1\u5668\u68c0\u67e5\u7b56\u7565\u6e90\u4e2d\u662f\u5426\u5df2\u751f\u6210\u4efb\u4f55\u5141\u8bb8\u89c4\u5219\uff0c\u5982\u679c\u662f\uff0c\u5b83\u5c06\u53d1\u51fa\u8b66\u544a\u5e76\u505c\u6b62\u3002</p> <pre><code>## Using the neverallow rule to state that no allow rule may ever\n## grant any file read access to type shadow_t except those\n## associated with the can_read_shadow_passwords attribute:\n\nneverallow ~can_read_shadow_passwords shadow_t:file read;\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#android-se","title":"Android SE\u6d41\u7a0b","text":"","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#se_1","title":"SE\u52a0\u8f7d\u6d41\u7a0b","text":"","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#first_stage_mainmain","title":"first_stage_main.main()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/first_stage_main.cpp\n\n#include \"first_stage_init.h\"\n\nint main(int argc, char** argv) {\n    return android::init::FirstStageMain(argc, argv);\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#first_stage_initfirststagemain","title":"first_stage_init.FirstStageMain()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/first_stage_init.cpp\n\nint FirstStageMain(int argc, char** argv) {\n    ...\n\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"selinux_setup\", nullptr};\n    ...\n    execv(path, const_cast&lt;char**&gt;(args));\n\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#mainmain","title":"main.main()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/main.cpp\n\nint main(int argc, char** argv) {\n    ...\n\n    if (argc &gt; 1) {\n        ...\n\n        if (!strcmp(argv[1], \"selinux_setup\")) {\n            return SetupSelinux(argv);\n        }\n\n        ...\n    }\n\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinuxsetupselinux","title":"selinux.SetupSelinux()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\n// The SELinux setup process is carefully orchestrated around snapuserd. Policy\n// must be loaded off dynamic partitions, and during an OTA, those partitions\n// cannot be read without snapuserd. But, with kernel-privileged snapuserd\n// running, loading the policy will immediately trigger audits.\n//\n// We use a five-step process to address this:\n//  (1) Read the policy into a string, with snapuserd running.\n//  (2) Rewrite the snapshot device-mapper tables, to generate new dm-user\n//      devices and to flush I/O.\n//  (3) Kill snapuserd, which no longer has any dm-user devices to attach to.\n//  (4) Load the sepolicy and issue critical restorecons in /dev, carefully\n//      avoiding anything that would read from /system.\n//  (5) Re-launch snapuserd and attach it to the dm-user devices from step (2).\n//\n// After this sequence, it is safe to enable enforcing mode and continue booting.\nint SetupSelinux(char** argv) {\n    ...\n\n    // Read the policy before potentially killing snapuserd.\n    std::string policy;\n    ReadPolicy(&amp;policy);\n\n    ...\n\n    LoadSelinuxPolicy(policy);\n\n    if (snapuserd_helper) {\n        // Before enforcing, finish the pending snapuserd transition.\n        snapuserd_helper-&gt;FinishTransition();\n        snapuserd_helper = nullptr;\n    }\n\n    SelinuxSetEnforcement();\n\n    ...\n\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"second_stage\", nullptr};\n    execv(path, const_cast&lt;char**&gt;(args));\n\n    // execv() only returns if an error happened, in which case we\n    // panic and never return from this function.\n    PLOG(FATAL) &lt;&lt; \"execv(\\\"\" &lt;&lt; path &lt;&lt; \"\\\") failed\";\n\n    return 1;\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinuxreadpolicy","title":"selinux.ReadPolicy()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\nvoid ReadPolicy(std::string* policy) {\n    PolicyFile policy_file;\n\n    //IsSplitPolicyDevice()\u4e3atrue\n    bool ok = IsSplitPolicyDevice() ? OpenSplitPolicy(&amp;policy_file)\n                                    : OpenMonolithicPolicy(&amp;policy_file);\n    if (!ok) {\n        LOG(FATAL) &lt;&lt; \"Unable to open SELinux policy\";\n    }\n\n    if (!android::base::ReadFdToString(policy_file.fd, policy)) {\n        PLOG(FATAL) &lt;&lt; \"Failed to read policy file: \" &lt;&lt; policy_file.path;\n    }\n}\n\nconstexpr const char plat_policy_cil_file[] = \"/system/etc/selinux/plat_sepolicy.cil\";\n\nbool IsSplitPolicyDevice() {\n    return access(plat_policy_cil_file, R_OK) != -1;\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinuxopensplitpolicy","title":"selinux.OpenSplitPolicy()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\nbool OpenSplitPolicy(PolicyFile* policy_file) {\n    ...\n\n    if (!use_userdebug_policy) {\n        if (auto res = FindPrecompiledSplitPolicy(); res.ok()) {\n            unique_fd fd(open(res-&gt;c_str(), O_RDONLY | O_CLOEXEC | O_BINARY));\n            if (fd != -1) {\n                policy_file-&gt;fd = std::move(fd);\n                policy_file-&gt;path = std::move(*res);\n                return true;\n            }\n        } else {\n            LOG(INFO) &lt;&lt; res.error();\n        }\n    }\n\n    ...\n\n    // Determine which mapping file to include\n    // Determine which mapping file to include\n    std::string vend_plat_vers;\n    if (!GetVendorMappingVersion(&amp;vend_plat_vers)) {\n        return false;\n    }\n    std::string plat_mapping_file(\"/system/etc/selinux/mapping/\" + vend_plat_vers + \".cil\");\n\n    std::string plat_compat_cil_file(\"/system/etc/selinux/mapping/\" + vend_plat_vers +\n                                     \".compat.cil\");\n    if (access(plat_compat_cil_file.c_str(), F_OK) == -1) {\n        plat_compat_cil_file.clear();\n    }\n\n    std::string system_ext_policy_cil_file(\"/system_ext/etc/selinux/system_ext_sepolicy.cil\");\n    if (access(system_ext_policy_cil_file.c_str(), F_OK) == -1) {\n        system_ext_policy_cil_file.clear();\n    }\n\n    std::string system_ext_mapping_file(\"/system_ext/etc/selinux/mapping/\" + vend_plat_vers +\n                                        \".cil\");\n    if (access(system_ext_mapping_file.c_str(), F_OK) == -1) {\n        system_ext_mapping_file.clear();\n    }\n\n    std::string system_ext_compat_cil_file(\"/system_ext/etc/selinux/mapping/\" + vend_plat_vers +\n                                           \".compat.cil\");\n    if (access(system_ext_compat_cil_file.c_str(), F_OK) == -1) {\n        system_ext_compat_cil_file.clear();\n    }\n\n    std::string product_policy_cil_file(\"/product/etc/selinux/product_sepolicy.cil\");\n    if (access(product_policy_cil_file.c_str(), F_OK) == -1) {\n        product_policy_cil_file.clear();\n    }\n\n    std::string product_mapping_file(\"/product/etc/selinux/mapping/\" + vend_plat_vers + \".cil\");\n    if (access(product_mapping_file.c_str(), F_OK) == -1) {\n        product_mapping_file.clear();\n    }\n\n    // vendor_sepolicy.cil and plat_pub_versioned.cil are the new design to replace\n    // nonplat_sepolicy.cil.\n    std::string plat_pub_versioned_cil_file(\"/vendor/etc/selinux/plat_pub_versioned.cil\");\n    std::string vendor_policy_cil_file(\"/vendor/etc/selinux/vendor_sepolicy.cil\");\n\n    if (access(vendor_policy_cil_file.c_str(), F_OK) == -1) {\n        // For backward compatibility.\n        // TODO: remove this after no device is using nonplat_sepolicy.cil.\n        vendor_policy_cil_file = \"/vendor/etc/selinux/nonplat_sepolicy.cil\";\n        plat_pub_versioned_cil_file.clear();\n    } else if (access(plat_pub_versioned_cil_file.c_str(), F_OK) == -1) {\n        LOG(ERROR) &lt;&lt; \"Missing \" &lt;&lt; plat_pub_versioned_cil_file;\n        return false;\n    }\n\n    // odm_sepolicy.cil is default but optional.\n    std::string odm_policy_cil_file(\"/odm/etc/selinux/odm_sepolicy.cil\");\n    if (access(odm_policy_cil_file.c_str(), F_OK) == -1) {\n        odm_policy_cil_file.clear();\n    }\n    const std::string version_as_string = std::to_string(SEPOLICY_VERSION);\n\n    // clang-format off\n    std::vector&lt;const char*&gt; compile_args {\n        \"/system/bin/secilc\",\n        use_userdebug_policy ? kDebugRamdiskSEPolicy: plat_policy_cil_file,\n        \"-m\", \"-M\", \"true\", \"-G\", \"-N\",\n        \"-c\", version_as_string.c_str(),\n        plat_mapping_file.c_str(),\n        \"-o\", compiled_sepolicy,\n        // We don't care about file_contexts output by the compiler\n        \"-f\", \"/sys/fs/selinux/null\",  // /dev/null is not yet available\n    };\n    // clang-format on\n\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinuxfindprecompiledsplitpolicy","title":"selinux.FindPrecompiledSplitPolicy()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\nResult&lt;std::string&gt; FindPrecompiledSplitPolicy() {\n    std::string precompiled_sepolicy;\n    // If there is an odm partition, precompiled_sepolicy will be in\n    // odm/etc/selinux. Otherwise it will be in vendor/etc/selinux.\n    static constexpr const char vendor_precompiled_sepolicy[] =\n        \"/vendor/etc/selinux/precompiled_sepolicy\";\n    static constexpr const char odm_precompiled_sepolicy[] =\n        \"/odm/etc/selinux/precompiled_sepolicy\";\n    if (access(odm_precompiled_sepolicy, R_OK) == 0) {\n        precompiled_sepolicy = odm_precompiled_sepolicy;\n    } else if (access(vendor_precompiled_sepolicy, R_OK) == 0) {\n        precompiled_sepolicy = vendor_precompiled_sepolicy;\n    } else {\n        return ErrnoError() &lt;&lt; \"No precompiled sepolicy at \" &lt;&lt; vendor_precompiled_sepolicy;\n    }\n\n   ...\n}\n</code></pre> <ul> <li>\u67e5\u770b\u4ee5\u4e0b\u4e24\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u90a3\u5c31\u5c1d\u8bd5\u52a0\u8f7d\uff0c\u5982\u679c\u52a0\u8f7d\u6210\u529f\u5219\u4e0d\u4f1a\u518d\u53bb\u7f16\u8bd1\u52a0\u8f7dcil\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1\u751f\u6210\u7684cil\u6587\u4ef6\u88abpush\u5230\u624b\u673a\u540e\u4e0d\u80fd\u751f\u6548\u3002</li> <li>\"/vendor/etc/selinux/precompiled_sepolicy\"</li> <li> <p>\"/odm/etc/selinux/precompiled_sepolicy\"</p> </li> <li> <p>\u5bf9cil\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1</p> </li> </ul> <p>\u6536\u96c6\u5e73\u53f0\u4e0a\u5982\u4e0bcil\u6587\u4ef6\uff0c\u7136\u540e\u8c03\u7528/system/bin/secilc\u7a0b\u5e8f\u5bf9.cil\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff1a</p> <pre><code>/system/etc/selinux/plat_sepolicy.cil\n/system/etc/selinux/mapping/*.cil\n\n/system_ext/etc/selinux/plat_sepolicy.cil\n/system_ext/etc/selinux/mapping/*.cil\n\n/product/etc/selinux/product_sepolicy.cil\n/product/etc/selinux/mapping/*.cil\n\n/vendor/etc/selinux/vendor_sepolicy.cil\n/vendor/etc/selinux/plat_pub_versioned.cil\n/vendor/etc/selinux/nonplat_sepolicy.cil\n\n/odm/etc/selinux/odm_sepolicy.cil\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinuxselinuxsetenforcement","title":"selinux.SelinuxSetEnforcement()","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\nvoid SelinuxSetEnforcement() {\n    bool kernel_enforcing = (security_getenforce() == 1);\n    bool is_enforcing = IsEnforcing();\n    if (kernel_enforcing != is_enforcing) {\n        if (security_setenforce(is_enforcing)) {\n            PLOG(FATAL) &lt;&lt; \"security_setenforce(\" &lt;&lt; (is_enforcing ? \"true\" : \"false\")\n                        &lt;&lt; \") failed\";\n        }\n    }\n\n    if (auto result = WriteFile(\"/sys/fs/selinux/checkreqprot\", \"0\"); !result.ok()) {\n        LOG(FATAL) &lt;&lt; \"Unable to write to /sys/fs/selinux/checkreqprot: \" &lt;&lt; result.error();\n    }\n}\n</code></pre> <p>\u8bbe\u7f6e\u662f\u5426\u542f\u7528selinux\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_7","title":"\u603b\u7ed3","text":"<p>se\u7684\u521d\u59cb\u5316\u662f\u5728init\u4e2d\u6267\u884c\u7684\uff0c\u5927\u6982\u6d41\u7a0b\u4e3a\uff1a</p> <ul> <li>\u5224\u65ad\u662f\u5426\u6709 <code>precompiled_sepolicy</code> \u7684\u6587\u4ef6\uff0c\u5982\u679c\u6709\u5219\u76f4\u63a5\u52a0\u8f7d\u540e\u9000\u51fa\uff1b</li> <li>\u5982\u679c\u6ca1\u6709\u9884\u7f16\u8bd1\uff0c\u90a3\u4e48\u6536\u96c6\u6307\u5b9a\u7684 <code>cil</code> \u6587\u4ef6\uff0c\u5e76\u7528 <code>/system/bin/secilc</code> \u7a0b\u5e8f\u8fdb\u884c\u5b9e\u65f6\u7f16\u8bd1\uff1b</li> <li>\u6700\u540e\u52a0\u8f7d\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\uff0c\u5b8c\u6210SE\u7684\u521d\u59cb\u5316\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#pid","title":"\u8bbe\u7f6e\u5e94\u7528pid\u6d41\u7a0b","text":"<p>\u5e94\u7528\u8fdb\u7a0b\u662f\u901a\u8fc7Zygote\u8fdb\u7a0bfork\u51fa\u6765\u7684\uff0c\u5728SpecializeCommon()\u4e2d\uff0c\u901a\u8fc7\u8c03\u7528seLinux_android_setcontext()\u51fd\u6570\u6765\u8bbe\u7f6e\u5e94\u7528\u8fdb\u7a0b\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\u6839\u636e\u8fdb\u7a0b\u7684\u7528\u6237\u540d\u548cseinfo\u5728seapp_contexts\u8868\u4e2d\u8fdb\u884c\u67e5\u627e\u5bf9\u5e94\u7684\u9879\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u628a\u627e\u5230\u7684domain\u8bbe\u7f6e\u5230\u5b89\u5168\u4e0a\u4e0b\u6587\u4e2d\u5c31\u5b8c\u6210\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\uff1a</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#forkandspecialize","title":"forkAndSpecialize","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/java/com/android/internal/os/Zygote.java\n\nstatic int forkAndSpecialize(int uid, int gid, int[] gids, int runtimeFlags,\n                             int[][] rlimits, int mountExternal, String seInfo, String niceName, int[] fdsToClose,\n                             int[] fdsToIgnore, boolean startChildZygote, String instructionSet, String appDataDir,\n                             boolean isTopApp, String[] pkgDataInfoList, String[] allowlistedDataInfoList,\n                             boolean bindMountAppDataDirs, boolean bindMountAppStorageDirs) {\n    ZygoteHooks.preFork();\n\n    int pid = nativeForkAndSpecialize(\n        uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,\n        fdsToIgnore, startChildZygote, instructionSet, appDataDir, isTopApp,\n        pkgDataInfoList, allowlistedDataInfoList, bindMountAppDataDirs,\n        bindMountAppStorageDirs);\n    ...\n}\n</code></pre> <p>\u901a\u8fc7jni\u8c03\u7528\u8c03\u5230\u4e86nativeForkAndSpecialize\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#nativeforkandspecialize","title":"nativeForkAndSpecialize","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp\n\nstatic jint com_android_internal_os_Zygote_nativeForkAndSpecialize(\n    JNIEnv* env, jclass, jint uid, jint gid, jintArray gids, jint runtime_flags,\n    jobjectArray rlimits, jint mount_external, jstring se_info, jstring nice_name,\n    jintArray managed_fds_to_close, jintArray managed_fds_to_ignore, jboolean is_child_zygote,\n    jstring instruction_set, jstring app_data_dir, jboolean is_top_app,\n    jobjectArray pkg_data_info_list, jobjectArray allowlisted_data_info_list,\n    jboolean mount_data_dirs, jboolean mount_storage_dirs) {\n    ...\n\n        if (pid == 0) {\n            SpecializeCommon(env, uid, gid, gids, runtime_flags, rlimits, capabilities, capabilities,\n                             mount_external, se_info, nice_name, false, is_child_zygote == JNI_TRUE,\n                             instruction_set, app_data_dir, is_top_app == JNI_TRUE, pkg_data_info_list,\n                             allowlisted_data_info_list, mount_data_dirs == JNI_TRUE,\n                             mount_storage_dirs == JNI_TRUE);\n        }\n    return pid;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5728com_android_internal_os_Zygote_nativeForkAndSpecialize\u4e3b\u8981\u662f\u8c03\u7528\u4e86SpecializeCommon\u6765\u8bbe\u7f6e\u8fdb\u7a0b\u5b89\u5168\u4e0a\u4e0b\u6587\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#specializecommon","title":"SpecializeCommon","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp\n\n// Utility routine to specialize a zygote child process.\nstatic void SpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray gids, jint runtime_flags,\n                             jobjectArray rlimits, jlong permitted_capabilities,\n                             jlong effective_capabilities, jint mount_external,\n                             jstring managed_se_info, jstring managed_nice_name,\n                             bool is_system_server, bool is_child_zygote,\n                             jstring managed_instruction_set, jstring managed_app_data_dir,\n                             bool is_top_app, jobjectArray pkg_data_info_list,\n                             jobjectArray allowlisted_data_info_list, bool mount_data_dirs,\n                             bool mount_storage_dirs) {\n    ...\n\n    if (selinux_android_setcontext(uid, is_system_server, se_info_ptr, nice_name_ptr) == -1) {\n        fail_fn(CREATE_ERROR(\"selinux_android_setcontext(%d, %d, \\\"%s\\\", \\\"%s\\\") failed\", uid,\n                             is_system_server, se_info_ptr, nice_name_ptr));\n    }\n\n    ...\n}\n</code></pre> <p>\u8c03\u7528selinux_android_setcontext\uff0c\u5e76\u4f20\u7ed9seinfo\u548c\u5305\u540d\uff0c\u4e0b\u9762\u6765\u91cd\u70b9\u5206\u6790\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinux_android_setcontext","title":"selinux_android_setcontext","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/android/android_platform.c#1027\n\nint selinux_android_setcontext(uid_t uid,\n                   bool isSystemServer,\n                   const char *seinfo,\n                   const char *pkgname)\n{\n    char *orig_ctx_str = NULL, *ctx_str;\n    context_t ctx = NULL;\n    int rc = -1;\n\n    if (is_selinux_enabled() &lt;= 0)\n        return 0;\n\n    //\u5f97\u5230\u5f53\u524d\u8fdb\u7a0b\u4eceZygote\u8fdb\u7a0b\u7ee7\u627f\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\n    rc = getcon(&amp;ctx_str);\n    if (rc)\n        goto err;\n\n    //\u4ee5ctx_str\u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\n    ctx = context_new(ctx_str);\n    orig_ctx_str = ctx_str;\n    if (!ctx)\n        goto oom;\n\n    //\u5728SEAPP_DOMAIN\u4e2d\u67e5\u627e\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\n    rc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx);\n    if (rc == -1)\n        goto err;\n    else if (rc == -2)\n        goto oom;\n\n    ctx_str = context_str(ctx);\n    if (!ctx_str)\n        goto oom;\n\n    //\u68c0\u67e5\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\n    rc = security_check_context(ctx_str);\n    if (rc &lt; 0)\n        goto err;\n\n    //\u5982\u679c\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u548c\u539f\u6765\u7684\u4e0d\u540c\n    if (strcmp(ctx_str, orig_ctx_str)) {\n        //\u4e3a\u5f53\u524d\u8fdb\u7a0b\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\n        rc = selinux_android_setcon(ctx_str);\n        if (rc &lt; 0)\n            goto err;\n    }\n\n    rc = 0;\nout:\n    freecon(orig_ctx_str);\n    context_free(ctx);\n    avc_netlink_close();\n    return rc;\nerr:\n    if (isSystemServer)\n        selinux_log(SELINUX_ERROR,\n                \"%s:  Error setting context for system server: %s\\n\",\n                __FUNCTION__, strerror(errno));\n    else\n        selinux_log(SELINUX_ERROR,\n                \"%s:  Error setting context for app with uid %d, seinfo %s: %s\\n\",\n                __FUNCTION__, uid, seinfo, strerror(errno));\n\n    rc = -1;\n    goto out;\noom:\n    selinux_log(SELINUX_ERROR, \"%s:  Out of memory\\n\", __FUNCTION__);\n    rc = -1;\n    goto out;\n}\n</code></pre> <ul> <li>\u5f97\u5230\u5f53\u524d\u8fdb\u7a0b\u4eceZygote\u8fdb\u7a0b\u7ee7\u627f\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\uff1b</li> <li>\u4ee5ctx_str\u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\uff1b</li> <li>\u5728SEAPP_DOMAIN\u4e2d\u67e5\u627e\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\uff08\u91cd\u70b9\u5206\u6790\uff09\uff1b</li> <li>\u68c0\u67e5\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\uff1b</li> <li>\u5982\u679c\u65b0\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u548c\u539f\u6765\u7684\u4e0d\u540c\uff0c\u4e3a\u5f53\u524d\u8fdb\u7a0b\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#seapp_context_lookup","title":"seapp_context_lookup","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/android/android_platform.c\n\nstatic int seapp_context_lookup(enum seapp_kind kind,\n                uid_t uid,\n                bool isSystemServer,\n                const char *seinfo,\n                const char *pkgname,\n                const char *path,\n                context_t ctx)\n{\n    struct passwd *pwd;\n    bool isOwner;\n    const char *username = NULL;\n    struct seapp_context *cur = NULL;\n    int i;\n    uid_t userid;\n    uid_t appid;\n    bool isPrivApp = false;\n    bool isEphemeralApp = false;\n    int32_t targetSdkVersion = 0;\n    bool fromRunAs = false;\n    char parsedseinfo[BUFSIZ];\n\n    //\u521d\u59cb\u5316 seapp_context\n    selinux_android_seapp_context_init();\n\n    if (seinfo) {\n        if (seinfo_parse(parsedseinfo, seinfo, BUFSIZ))\n            goto err;\n        isPrivApp = strstr(seinfo, PRIVILEGED_APP_STR) ? true : false;\n        isEphemeralApp = strstr(seinfo, EPHEMERAL_APP_STR) ? true : false;\n        fromRunAs = strstr(seinfo, FROM_RUNAS_STR) ? true : false;\n        targetSdkVersion = get_app_targetSdkVersion(seinfo);\n        if (targetSdkVersion &lt; 0) {\n            selinux_log(SELINUX_ERROR,\n                    \"%s:  Invalid targetSdkVersion passed for app with uid %d, seinfo %s, name %s\\n\",\n                    __FUNCTION__, uid, seinfo, pkgname);\n            goto err;\n        }\n        seinfo = parsedseinfo;\n    }\n\n    userid = uid / AID_USER;\n    isOwner = (userid == 0);\n    appid = uid % AID_USER;\n    if (appid &lt; AID_APP) {//\u901a\u8fc7uid\u83b7\u53d6\u8fdb\u7a0b\u540d\n            /*\n             * This code is Android specific, bionic guarantees that\n             * calls to non-reentrant getpwuid() are thread safe.\n             */\n#ifndef __BIONIC__\n#warning \"This code assumes that getpwuid is thread safe, only true with Bionic!\"\n#endif\n        pwd = getpwuid(appid);\n        if (!pwd)\n            goto err;\n\n        username = pwd-&gt;pw_name;\n\n    } else if (appid &lt; AID_ISOLATED_START) {//\u5982\u679c\u8fdb\u7a0b\u53f7\u5c0f\u4e8eAID_ISOLATED_START\uff0c\u8bf4\u660e\u662f\u666e\u901a\u8fdb\u7a0b\uff0c\u8bbe\u7f6e\u7528\u6237\u540d\u4e3a\"_app\"\n        username = \"_app\";\n        appid -= AID_APP;\n    } else {//\u6c99\u7bb1\u8fdb\u7a0b\n        username = \"_isolated\";\n        appid -= AID_ISOLATED_START;\n    }\n\n    if (appid &gt;= CAT_MAPPING_MAX_ID || userid &gt;= CAT_MAPPING_MAX_ID)\n        goto err;\n\n    for (i = 0; i &lt; nspec; i++) {//\u5728seapp_contexts\u8868\u4e2d\u8fdb\u884c\u67e5\u627e\n        cur = seapp_contexts[i];\n\n        if (cur-&gt;isSystemServer != isSystemServer)//\u5982\u679c\u662fsystemserver\u8fdb\u7a0b\u4e0d\u505a\u5904\u7406\n            continue;\n\n        if (cur-&gt;isEphemeralAppSet &amp;&amp; cur-&gt;isEphemeralApp != isEphemeralApp)\n            continue;\n\n        if (cur-&gt;isOwnerSet &amp;&amp; cur-&gt;isOwner != isOwner)\n            continue;\n\n        if (cur-&gt;user.str) {//\u5148\u6bd4\u8f83\u6587\u4ef6\u4e2d\u7684user\u9879\u548c\u8fdb\u7a0b\u7684username\n            if (cur-&gt;user.is_prefix) {\n                if (strncasecmp(username, cur-&gt;user.str, cur-&gt;user.len-1))\n                    continue;\n            } else {\n                if (strcasecmp(username, cur-&gt;user.str))\n                    continue;\n            }\n        }\n\n        if (cur-&gt;seinfo) {//\u5148\u6bd4\u8f83\u4e24\u8005\u7684seinfo\u662f\u5426\u76f8\u540c\n            if (!seinfo || strcasecmp(seinfo, cur-&gt;seinfo))\n                continue;\n        }\n\n        if (cur-&gt;name.str) {//seapp_contexts\u4e2d\u6ca1\u6709\u54ea\u884c\u5b9a\u4e49\u4e86name\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u7528\u6bd4\u8f83\n            if(!pkgname)\n                continue;\n\n            if (cur-&gt;name.is_prefix) {\n                if (strncasecmp(pkgname, cur-&gt;name.str, cur-&gt;name.len-1))\n                    continue;\n            } else {\n                if (strcasecmp(pkgname, cur-&gt;name.str))\n                    continue;\n            }\n        }\n\n        if (cur-&gt;isPrivAppSet &amp;&amp; cur-&gt;isPrivApp != isPrivApp)//\u662f\u5426\u662fpriv-app\n            continue;\n\n        if (cur-&gt;minTargetSdkVersion &gt; targetSdkVersion)\n            continue;\n\n        if (cur-&gt;fromRunAs != fromRunAs)\n            continue;\n\n        if (cur-&gt;path.str) {\n            if (!path)\n                continue;\n\n            if (cur-&gt;path.is_prefix) {\n                if (strncmp(path, cur-&gt;path.str, cur-&gt;path.len-1))\n                    continue;\n            } else {\n                if (strcmp(path, cur-&gt;path.str))\n                    continue;\n            }\n        }\n\n        if (kind == SEAPP_TYPE &amp;&amp; !cur-&gt;type)//\u53c2\u6570kind\u7b49\u4e8eSEAPP_DOMAIN\n            continue;\n        else if (kind == SEAPP_DOMAIN &amp;&amp; !cur-&gt;domain)//\u8df3\u8fc7\u6587\u4ef6\u4e2d\u6ca1\u6709domain\u7684\u9879\n            continue;\n\n        if (kind == SEAPP_TYPE) {\n            if (context_type_set(ctx, cur-&gt;type))\n                goto oom;\n        } else if (kind == SEAPP_DOMAIN) {\n            if (context_type_set(ctx, cur-&gt;domain))//\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u7684\u57df\n                goto oom;\n        }\n\n        if (cur-&gt;levelFrom != LEVELFROM_NONE) {\n            int res = set_range_from_level(ctx, cur-&gt;levelFrom, userid, appid);\n            if (res != 0) {\n                return res;\n            }\n        } else if (cur-&gt;level) {\n            if (context_range_set(ctx, cur-&gt;level))\n                goto oom;\n        }\n\n        break;\n    }\n\n    if (kind == SEAPP_DOMAIN &amp;&amp; i == nspec) {\n        /*\n         * No match.\n         * Fail to prevent staying in the zygote's context.\n         */\n        selinux_log(SELINUX_ERROR,\n                \"%s:  No match for app with uid %d, seinfo %s, name %s\\n\",\n                __FUNCTION__, uid, seinfo, pkgname);\n\n        if (security_getenforce() == 1)\n            goto err;\n    }\n\n    return 0;\nerr:\n    return -1;\noom:\n    return -2;\n}\n</code></pre> <ul> <li>\u521d\u59cb\u5316seapp_context\uff08\u91cd\u70b9\u5206\u6790\uff09\uff1b</li> <li>\u901a\u8fc7uid\u83b7\u53d6\u8fdb\u7a0b\u540d\uff1b</li> <li>\u5982\u679c\u8fdb\u7a0b\u53f7\u5c0f\u4e8eAID_APP\uff0c\u5219\u901a\u8fc7uid\u83b7\u53d6\u8fdb\u7a0b\u540d\uff1b</li> <li>\u5982\u679c\u8fdb\u7a0b\u53f7\u5c0f\u4e8eAID_ISOLATED_START\uff0c\u8bf4\u660e\u662f\u666e\u901a\u8fdb\u7a0b\uff0c\u8bbe\u7f6e\u7528\u6237\u540d\u4e3a\"_app\"\uff1b</li> <li>\u5426\u5219\u4e3a\u6c99\u7bb1\u8fdb\u7a0b\u3002</li> <li>\u5728seapp_contexts\u8868\u4e2d\u8fdb\u884c\u67e5\u627e\uff1b</li> <li>\u6bd4\u8f83\u6587\u4ef6\u4e2d\u7684user\u9879\u548c\u8fdb\u7a0b\u7684username\uff1b</li> <li>\u6bd4\u8f83\u4e24\u8005\u7684seinfo\u662f\u5426\u76f8\u540c\uff1b</li> <li>seapp_contexts\u4e2d\u6ca1\u6709\u54ea\u884c\u5b9a\u4e49\u4e86name\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u7528\u6bd4\u8f83\uff1b</li> <li>\u662f\u5426\u662fpriv-app\uff1b</li> <li>\u6700\u5c0f\u7684TargetSdk\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684TargetSdk\u3002</li> <li>\u53c2\u6570kind\u7b49\u4e8eSEAPP_DOMAIN\uff1b</li> <li>\u8df3\u8fc7\u6587\u4ef6\u4e2d\u6ca1\u6709domain\u7684\u9879\uff1b</li> <li>\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u7684\u57df\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinux_android_seapp_context_init","title":"selinux_android_seapp_context_init","text":"<p><pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/android/android_platform.c\n\nvoid selinux_android_seapp_context_init(void) {\n    __selinux_once(once, seapp_context_init);\n}\n</code></pre> \u4eceselinux_internal.h\u53ef\u4ee5\u770b\u5230__selinux_once\u662f\u4e00\u4e2a\u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u5c31\u5f88\u7b80\u5355\u4e86\uff1a\u8bf7\u6ce8\u610f\u201c\u53c2\u65702\u201d\u3002 <pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/selinux_internal.h#122\n\n/* Call handler iff the first call.  */\n#define __selinux_once(ONCE_CONTROL, INIT_FUNCTION) \\\n    do {                        \\\n        if (pthread_once != NULL)       \\\n            pthread_once (&amp;(ONCE_CONTROL), (INIT_FUNCTION));  \\\n        else if ((ONCE_CONTROL) == PTHREAD_ONCE_INIT) {       \\\n            INIT_FUNCTION ();       \\\n            (ONCE_CONTROL) = 2;     \\\n        }                   \\\n    } while (0)\n</code></pre></p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#seapp_context_init","title":"seapp_context_init","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/selinux_internal.h#122\n\nstatic void seapp_context_init(void)\n{\n        selinux_android_seapp_context_reload();\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#selinux_android_seapp_context_reload","title":"selinux_android_seapp_context_reload","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/external/selinux/libselinux/src/android/android_platform.c\n\nint selinux_android_seapp_context_reload(void)\n{\n    FILE *fp = NULL;\n    char line_buf[BUFSIZ];\n    char *token;\n    unsigned lineno;\n    struct seapp_context *cur;\n    char *p, *name = NULL, *value = NULL, *saveptr;\n    size_t i, len, files_len = 0;\n    int ret;\n    const char* seapp_contexts_files[MAX_FILE_CONTEXT_SIZE];\n    for (i = 0; i &lt; ARRAY_SIZE(seapp_contexts_plat); i++) {\n        if (access(seapp_contexts_plat[i], R_OK) != -1) {\n            seapp_contexts_files[files_len++] = seapp_contexts_plat[i];\n            break;\n        }\n    }\n    for (i = 0; i &lt; ARRAY_SIZE(seapp_contexts_system_ext); i++) {\n        if (access(seapp_contexts_system_ext[i], R_OK) != -1) {\n            seapp_contexts_files[files_len++] = seapp_contexts_system_ext[i];\n            break;\n        }\n    }\n    for (i = 0; i &lt; ARRAY_SIZE(seapp_contexts_product); i++) {\n        if (access(seapp_contexts_product[i], R_OK) != -1) {\n            seapp_contexts_files[files_len++] = seapp_contexts_product[i];\n            break;\n        }\n    }\n    for (i = 0; i &lt; ARRAY_SIZE(seapp_contexts_vendor); i++) {\n        if (access(seapp_contexts_vendor[i], R_OK) != -1) {\n            seapp_contexts_files[files_len++] = seapp_contexts_vendor[i];\n            break;\n        }\n    }\n    for (i = 0; i &lt; ARRAY_SIZE(seapp_contexts_odm); i++) {\n        if (access(seapp_contexts_odm[i], R_OK) != -1) {\n            seapp_contexts_files[files_len++] = seapp_contexts_odm[i];\n            break;\n        }\n    }\n\n    free_seapp_contexts();\n\n    nspec = 0;\n    for (i = 0; i &lt; files_len; i++) {\n        fp = fopen(seapp_contexts_files[i], \"re\");\n        if (!fp) {\n            selinux_log(SELINUX_ERROR, \"%s:  could not open seapp_contexts file: %s\",\n                    __FUNCTION__, seapp_contexts_files[i]);\n            return -1;\n        }\n        while (fgets(line_buf, sizeof line_buf - 1, fp)) {\n            p = line_buf;\n            while (isspace(*p))\n                p++;\n            if (*p == '#' || *p == 0)\n                continue;\n            nspec++;\n        }\n        fclose(fp);\n    }\n\n    seapp_contexts = (struct seapp_context **) calloc(nspec, sizeof(struct seapp_context *));\n    if (!seapp_contexts)\n        goto oom;\n\n    nspec = 0;\n    for (i = 0; i &lt; files_len; i++) {\n        lineno = 1;\n        fp = fopen(seapp_contexts_files[i], \"re\");\n        if (!fp) {\n            selinux_log(SELINUX_ERROR, \"%s:  could not open seapp_contexts file: %s\",\n                    __FUNCTION__, seapp_contexts_files[i]);\n            free_seapp_contexts();\n            return -1;\n        }\n        while (fgets(line_buf, sizeof line_buf - 1, fp)) {\n            len = strlen(line_buf);\n            if (len == 0) {\n                // line contains a NUL byte as its first entry\n                goto err;\n            }\n            if (line_buf[len - 1] == '\\n')\n                line_buf[len - 1] = 0;\n            p = line_buf;\n            while (isspace(*p))\n                p++;\n            if (*p == '#' || *p == 0)\n                continue;\n\n            cur = (struct seapp_context *) calloc(1, sizeof(struct seapp_context));\n            if (!cur)\n                goto oom;\n\n            token = strtok_r(p, \" \\t\", &amp;saveptr);\n            if (!token) {\n                free_seapp_context(cur);\n                goto err;\n            }\n\n            while (1) {\n                name = token;\n                value = strchr(name, '=');\n                if (!value) {\n                    free_seapp_context(cur);\n                    goto err;\n                }\n                *value++ = 0;\n\n                if (!strcasecmp(name, \"isSystemServer\")) {\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;isSystemServer = true;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;isSystemServer = false;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"isEphemeralApp\")) {\n                    cur-&gt;isEphemeralAppSet = true;\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;isEphemeralApp = true;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;isEphemeralApp = false;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"isOwner\")) {\n                    cur-&gt;isOwnerSet = true;\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;isOwner = true;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;isOwner = false;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"user\")) {\n                    if (cur-&gt;user.str) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;user.str = strdup(value);\n                    if (!cur-&gt;user.str) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                    cur-&gt;user.len = strlen(cur-&gt;user.str);\n                    if (cur-&gt;user.str[cur-&gt;user.len-1] == '*')\n                        cur-&gt;user.is_prefix = 1;\n                } else if (!strcasecmp(name, \"seinfo\")) {\n                    if (cur-&gt;seinfo) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;seinfo = strdup(value);\n                    if (!cur-&gt;seinfo) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                    if (strstr(value, \":\")) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"name\")) {\n                    if (cur-&gt;name.str) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;name.str = strdup(value);\n                    if (!cur-&gt;name.str) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                    cur-&gt;name.len = strlen(cur-&gt;name.str);\n                    if (cur-&gt;name.str[cur-&gt;name.len-1] == '*')\n                        cur-&gt;name.is_prefix = 1;\n                } else if (!strcasecmp(name, \"domain\")) {\n                    if (cur-&gt;domain) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;domain = strdup(value);\n                    if (!cur-&gt;domain) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                } else if (!strcasecmp(name, \"type\")) {\n                    if (cur-&gt;type) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;type = strdup(value);\n                    if (!cur-&gt;type) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                } else if (!strcasecmp(name, \"levelFromUid\")) {\n                    if (cur-&gt;levelFrom) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;levelFrom = LEVELFROM_APP;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;levelFrom = LEVELFROM_NONE;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"levelFrom\")) {\n                    if (cur-&gt;levelFrom) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    if (!strcasecmp(value, \"none\"))\n                        cur-&gt;levelFrom = LEVELFROM_NONE;\n                    else if (!strcasecmp(value, \"app\"))\n                        cur-&gt;levelFrom = LEVELFROM_APP;\n                    else if (!strcasecmp(value, \"user\"))\n                        cur-&gt;levelFrom = LEVELFROM_USER;\n                    else if (!strcasecmp(value, \"all\"))\n                        cur-&gt;levelFrom = LEVELFROM_ALL;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"level\")) {\n                    if (cur-&gt;level) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;level = strdup(value);\n                    if (!cur-&gt;level) {\n                        free_seapp_context(cur);\n                        goto oom;\n                    }\n                } else if (!strcasecmp(name, \"path\")) {\n                    if (cur-&gt;path.str) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                    cur-&gt;path.str = strdup(value);\n                    if (!cur-&gt;path.str) {\n                        free_seapp_context(cur);\n                    goto oom;\n                    }\n                    cur-&gt;path.len = strlen(cur-&gt;path.str);\n                    if (cur-&gt;path.str[cur-&gt;path.len-1] == '*')\n                        cur-&gt;path.is_prefix = 1;\n                } else if (!strcasecmp(name, \"isPrivApp\")) {\n                    cur-&gt;isPrivAppSet = true;\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;isPrivApp = true;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;isPrivApp = false;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"minTargetSdkVersion\")) {\n                    cur-&gt;minTargetSdkVersion = get_minTargetSdkVersion(value);\n                    if (cur-&gt;minTargetSdkVersion &lt; 0) {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else if (!strcasecmp(name, \"fromRunAs\")) {\n                    if (!strcasecmp(value, \"true\"))\n                        cur-&gt;fromRunAs = true;\n                    else if (!strcasecmp(value, \"false\"))\n                        cur-&gt;fromRunAs = false;\n                    else {\n                        free_seapp_context(cur);\n                        goto err;\n                    }\n                } else {\n                    free_seapp_context(cur);\n                    goto err;\n                }\n\n                token = strtok_r(NULL, \" \\t\", &amp;saveptr);\n                if (!token)\n                    break;\n            }\n\n            if (!cur-&gt;isPrivApp &amp;&amp; cur-&gt;name.str &amp;&amp;\n                (!cur-&gt;seinfo || !strcmp(cur-&gt;seinfo, \"default\"))) {\n                selinux_log(SELINUX_ERROR, \"%s:  No specific seinfo value specified with name=\\\"%s\\\", on line %u:  insecure configuration!\\n\",\n                        seapp_contexts_files[i], cur-&gt;name.str, lineno);\n                free_seapp_context(cur);\n                goto err;\n            }\n\n            seapp_contexts[nspec] = cur;\n            nspec++;\n            lineno++;\n        }\n        fclose(fp);\n        fp = NULL;\n    }\n\n    qsort(seapp_contexts, nspec, sizeof(struct seapp_context *),\n          seapp_context_cmp);\n\n    if (seapp_contexts_dup)\n        goto err_no_log;\n\n#if DEBUG\n    {\n        int i;\n        for (i = 0; i &lt; nspec; i++) {\n            cur = seapp_contexts[i];\n            selinux_log(SELINUX_INFO, \"%s:  isSystemServer=%s  isEphemeralApp=%s isOwner=%s user=%s seinfo=%s \"\n                    \"name=%s path=%s isPrivApp=%s minTargetSdkVersion=%d fromRunAs=%s -&gt; domain=%s type=%s level=%s levelFrom=%s\",\n                __FUNCTION__,\n                cur-&gt;isSystemServer ? \"true\" : \"false\",\n                cur-&gt;isEphemeralAppSet ? (cur-&gt;isEphemeralApp ? \"true\" : \"false\") : \"null\",\n                cur-&gt;isOwnerSet ? (cur-&gt;isOwner ? \"true\" : \"false\") : \"null\",\n                cur-&gt;user.str,\n                cur-&gt;seinfo, cur-&gt;name.str, cur-&gt;path.str,\n                cur-&gt;isPrivAppSet ? (cur-&gt;isPrivApp ? \"true\" : \"false\") : \"null\",\n                cur-&gt;minTargetSdkVersion,\n                cur-&gt;fromRunAs ? \"true\" : \"false\",\n                cur-&gt;domain, cur-&gt;type, cur-&gt;level,\n                levelFromName[cur-&gt;levelFrom]);\n        }\n    }\n#endif\n\n    ret = 0;\n\nout:\n    if (fp) {\n        fclose(fp);\n    }\n    return ret;\n\nerr:\n    selinux_log(SELINUX_ERROR, \"%s:  Invalid entry on line %u\\n\",\n            seapp_contexts_files[i], lineno);\nerr_no_log:\n    free_seapp_contexts();\n    ret = -1;\n    goto out;\noom:\n    selinux_log(SELINUX_ERROR,\n            \"%s:  Out of memory\\n\", __FUNCTION__);\n    free_seapp_contexts();\n    ret = -1;\n    goto out;\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u4ee3\u7801\u5f88\u957f\uff0c\u4e5f\u5f88\u590d\u6742\u3002\u56e0\u4e3a\u8fd9\u6d41\u7a0b\u662f\u52a0\u8f7dse\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5173\u5fc3\u76f8\u5173\u4ee3\u7801\uff0c\u4e5f\u5c31\u662f\u4ece\u4ee5\u4e0b\u6570\u7ec4\u4e2d\u6536\u96c6\u6587\u4ef6\u5e76\u6c47\u603b\u5230seapp_contexts_files\u6570\u7ec4\uff0c\u6700\u540e\u901a\u8fc7fopen\u6253\u5f00\u5e76\u4f5c\u76f8\u5e94\u7684\u5904\u7406\u3002</p> <ul> <li>seapp_contexts_plat</li> <li>\"/system/etc/selinux/plat_seapp_contexts\"</li> <li>\"/plat_seapp_contexts\"</li> <li>seapp_contexts_system_ext</li> <li>\"/system_ext/etc/selinux/system_ext_seapp_contexts\"</li> <li>\"/system_ext_seapp_contexts\"</li> <li>seapp_contexts_product</li> <li>\"/product/etc/selinux/product_seapp_contexts\"</li> <li>\"/product_seapp_contexts\"</li> <li>seapp_contexts_vendor</li> <li>\"/vendor/etc/selinux/vendor_seapp_contexts\"</li> <li>\"/vendor_seapp_contexts\"</li> <li>\"/vendor/etc/selinux/nonplat_seapp_contexts\"</li> <li>\"/nonplat_seapp_contexts\" </li> <li>seapp_contexts_odm</li> <li>\"/odm/etc/selinux/odm_seapp_contexts\",</li> <li>\"/odm_seapp_contexts\"</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_8","title":"\u7591\u95ee","text":"<p>\u53ef\u4ee5\u770b\u5230\uff0c<code>seinfo</code> \u662f\u8d2f\u7a7fJava\u5230Native\u7684\u4e00\u4e2a\u91cd\u8981\u7ebf\u7d22\uff0cNative\u7684seinfo\u662f\u4ece\u4e00\u5806\u7684 <code>xxx_seapp_contests</code> \u4e2d\u83b7\u53d6\u7684\uff0c\u90a3Java\u5c42\u7684<code>seinfo</code>\u662f\u6765\u81ea\u4f55\u5904\u5462\uff1f</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#java-seinfo","title":"Java seinfo","text":"<p>\u5728PackageManagerService\u626b\u63cfapk\u6587\u4ef6\u65f6\u8d4b\u503c\u7ed9\u5404\u4e2aapplicationInfo\u5bf9\u8c61\u7684\uff1a</p> <ul> <li>PMS\u5728\u626b\u63cfapk\u65f6\u5c06seinfo\u8d4b\u503c\u7ed9pkg\u4fe1\u606f\u5bf9\u8c61\uff0c\u5176seinfo\u901a\u8fc7\u8c03\u7528 <code>SELinuxMMAC.getSeinfo()</code> \u83b7\u53d6\u3002</li> <li>SELinuxMMAC\u4e2d\u7684seinfo\u662f\u5728PMS\u521d\u59cb\u5316\u65f6\u4ece\u5404\u79cd <code>/etc/selinux/???_mac_permissions.xml</code> \u6587\u4ef6\u4e2d\u83b7\u53d6\u7684\u3002</li> </ul> <p>java\u90e8\u5206\u7684\u6211\u4eec\u5c31\u4e0d\u505a\u8be6\u7ec6\u5206\u6790\uff0c\u53ea\u5217\u51fa\u8c03\u7528\u6d41\u7a0b\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#processinstallrequestsasync","title":"processInstallRequestsAsync","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n// Queue up an async operation since the package installation may take a little while.\nprivate void processInstallRequestsAsync(boolean success,\n                                         List&lt;InstallRequest&gt; installRequests) {\n    ...\n        synchronized (mInstallLock) {\n        installPackagesTracedLI(apkInstallRequests);\n    }\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#installpackagestracedli","title":"installPackagesTracedLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n@GuardedBy(\"mInstallLock\")\nprivate void installPackagesTracedLI(List&lt;InstallRequest&gt; requests) {\n    try {\n        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, \"installPackages\");\n        installPackagesLI(requests);\n    } finally {\n        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);\n    }\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#installpackagesli","title":"installPackagesLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n/**\n * Installs one or more packages atomically. This operation is broken up into four phases:\n * &lt;ul&gt;\n *     &lt;li&gt;&lt;b&gt;Prepare&lt;/b&gt;\n *         &lt;br/&gt;Analyzes any current install state, parses the package and does initial\n *         validation on it.&lt;/li&gt;\n *     &lt;li&gt;&lt;b&gt;Scan&lt;/b&gt;\n *         &lt;br/&gt;Interrogates the parsed packages given the context collected in prepare.&lt;/li&gt;\n *     &lt;li&gt;&lt;b&gt;Reconcile&lt;/b&gt;\n *         &lt;br/&gt;Validates scanned packages in the context of each other and the current system\n *         state to ensure that the install will be successful.\n *     &lt;li&gt;&lt;b&gt;Commit&lt;/b&gt;\n *         &lt;br/&gt;Commits all scanned packages and updates system state. This is the only place\n *         that system state may be modified in the install flow and all predictable errors\n *         must be determined before this phase.&lt;/li&gt;\n * &lt;/ul&gt;\n *\n * Failure at any phase will result in a full failure to install all packages.\n */\n@GuardedBy(\"mInstallLock\")\nprivate void installPackagesLI(List&lt;InstallRequest&gt; requests) {\n    ...\n    final ScanResult result = scanPackageTracedLI(\n        prepareResult.packageToScan, prepareResult.parseFlags,\n        prepareResult.scanFlags, System.currentTimeMillis(),\n        request.args.user, request.args.abiOverride);\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#scanpackagetracedli","title":"scanPackageTracedLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n/**\n *  Traces a package scan.\n *  @see #scanPackageLI(File, int, int, long, UserHandle)\n */\n@GuardedBy({\"mInstallLock\", \"mLock\"})\nprivate AndroidPackage scanPackageTracedLI(File scanFile, final int parseFlags,\n        int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {\n    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, \"scanPackage [\" + scanFile.toString() + \"]\");\n    try {\n        return scanPackageLI(scanFile, parseFlags, scanFlags, currentTime, user);\n    } finally {\n        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);\n    }\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#scanpackageli","title":"scanPackageLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n/**\n *  Scans a package and returns the newly parsed package.\n *  Returns {@code null} in case of errors and the error code is stored in mLastScanError\n */\n@GuardedBy({\"mInstallLock\", \"mLock\"})\nprivate AndroidPackage scanPackageLI(File scanFile, int parseFlags, int scanFlags,\n        long currentTime, UserHandle user) throws PackageManagerException {\n    ...\n\n    return addForInitLI(parsedPackage, parseFlags, scanFlags, currentTime, user);\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#addforinitli","title":"addForInitLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n/**\n * Adds a new package to the internal data structures during platform initialization.\n * &lt;p&gt;After adding, the package is known to the system and available for querying.\n * &lt;p&gt;For packages located on the device ROM [eg. packages located in /system, /vendor,\n * etc...], additional checks are performed. Basic verification [such as ensuring\n * matching signatures, checking version codes, etc...] occurs if the package is\n * identical to a previously known package. If the package fails a signature check,\n * the version installed on /data will be removed. If the version of the new package\n * is less than or equal than the version on /data, it will be ignored.\n * &lt;p&gt;Regardless of the package location, the results are applied to the internal\n * structures and the package is made available to the rest of the system.\n * &lt;p&gt;NOTE: The return value should be removed. It's the passed in package object.\n */\n@GuardedBy({\"mInstallLock\", \"mLock\"})\nprivate AndroidPackage addForInitLI(ParsedPackage parsedPackage,\n        @ParseFlags int parseFlags, @ScanFlags int scanFlags, long currentTime,\n        @Nullable UserHandle user)\n                throws PackageManagerException {\n    ...\n    synchronized (mLock) {\n        ...\n        final ScanResult scanResult = scanPackageOnlyLI(request, mInjector, mFactoryTest, -1L);\n        ...\n    }\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#scanpackageonlyli","title":"scanPackageOnlyLI","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java\n\n/**\n * Just scans the package without any side effects.\n * &lt;p&gt;Not entirely true at the moment. There is still one side effect -- this\n * method potentially modifies a live {@link PackageSetting} object representing\n * the package being scanned. This will be resolved in the future.\n *\n * @param injector injector for acquiring dependencies\n * @param request Information about the package to be scanned\n * @param isUnderFactoryTest Whether or not the device is under factory test\n * @param currentTime The current time, in millis\n * @return The results of the scan\n */\n@GuardedBy(\"mInstallLock\")\n@VisibleForTesting\n@NonNull\nstatic ScanResult scanPackageOnlyLI(@NonNull ScanRequest request,\n        Injector injector,\n        boolean isUnderFactoryTest, long currentTime)\n        throws PackageManagerException {\n    ...\n\n    parsedPackage\n            .setSeInfo(SELinuxMMAC.getSeInfo(parsedPackage, sharedUserSetting,\n                    injector.getCompatibility()))\n            .setSeInfoUser(SELinuxUtil.assignSeinfoUser(pkgSetting.readUserState(\n                    userId == UserHandle.USER_ALL ? UserHandle.USER_SYSTEM : userId)));\n\n    ...\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#getseinfo","title":"getSeInfo","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java\n\n/**\n     * Selects a security label to a package based on input parameters and the seinfo tag taken\n     * from a matched policy. All signature based policy stanzas are consulted and, if no match\n     * is found, the default seinfo label of 'default' is used. The security label is attached to\n     * the ApplicationInfo instance of the package.\n     *\n     * @param pkg               object representing the package to be labeled.\n     * @param sharedUserSetting if the app shares a sharedUserId, then this has the shared setting.\n     * @param compatibility     the PlatformCompat service to ask about state of compat changes.\n     * @return String representing the resulting seinfo.\n     */\npublic static String getSeInfo(AndroidPackage pkg, SharedUserSetting sharedUserSetting,\n                               PlatformCompat compatibility) {\n    final int targetSdkVersion = getTargetSdkVersionForSeInfo(pkg, sharedUserSetting,\n                                                              compatibility);\n    // TODO(b/71593002): isPrivileged for sharedUser and appInfo should never be out of sync.\n    // They currently can be if the sharedUser apps are signed with the platform key.\n    final boolean isPrivileged = (sharedUserSetting != null)\n        ? sharedUserSetting.isPrivileged() | pkg.isPrivileged() : pkg.isPrivileged();\n    return getSeInfo(pkg, isPrivileged, targetSdkVersion);\n}\n\n/**\n * Selects a security label to a package based on input parameters and the seinfo tag taken\n * from a matched policy. All signature based policy stanzas are consulted and, if no match\n * is found, the default seinfo label of 'default' is used. The security label is attached to\n * the ApplicationInfo instance of the package.\n *\n * @param pkg object representing the package to be labeled.\n * @param isPrivileged boolean.\n * @param targetSdkVersion int. If this pkg runs as a sharedUser, targetSdkVersion is the\n *        greater of: lowest targetSdk for all pkgs in the sharedUser, or\n *        MINIMUM_TARGETSDKVERSION.\n * @return String representing the resulting seinfo.\n */\npublic static String getSeInfo(AndroidPackage pkg, boolean isPrivileged,\n        int targetSdkVersion) {\n    String seInfo = null;\n    synchronized (sPolicies) {\n        if (!sPolicyRead) {\n            if (DEBUG_POLICY) {\n                Slog.d(TAG, \"Policy not read\");\n            }\n        } else {\n            for (Policy policy : sPolicies) {\n                seInfo = policy.getMatchedSeInfo(pkg);\n                if (seInfo != null) {\n                    break;\n                }\n            }\n        }\n    }\n\n    if (seInfo == null) {\n        seInfo = DEFAULT_SEINFO;\n    }\n\n    if (isPrivileged) {\n        seInfo += PRIVILEGED_APP_STR;\n    }\n\n    seInfo += TARGETSDKVERSION_STR + targetSdkVersion;\n\n    if (DEBUG_POLICY_INSTALL) {\n        Slog.i(TAG, \"package (\" + pkg.getPackageName() + \") labeled with \"\n                + \"seinfo=\" + seInfo);\n    }\n    return seInfo;\n}\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#xxx_mac_permissionsxml","title":"xxx_mac_permissions.xml","text":"<pre><code>http://aospxref.com/android-12.0.0_r3/xref/frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java\n\n// Only initialize sMacPermissions once.\nstatic {\n    // Platform mac permissions.\n    sMacPermissions.add(new File(\n        Environment.getRootDirectory(), \"/etc/selinux/plat_mac_permissions.xml\"));\n\n    // SystemExt mac permissions (optional).\n    final File systemExtMacPermission = new File(\n            Environment.getSystemExtDirectory(), \"/etc/selinux/system_ext_mac_permissions.xml\");\n    if (systemExtMacPermission.exists()) {\n        sMacPermissions.add(systemExtMacPermission);\n    }\n\n    // Product mac permissions (optional).\n    final File productMacPermission = new File(\n            Environment.getProductDirectory(), \"/etc/selinux/product_mac_permissions.xml\");\n    if (productMacPermission.exists()) {\n        sMacPermissions.add(productMacPermission);\n    }\n\n    // Vendor mac permissions.\n    // The filename has been renamed from nonplat_mac_permissions to\n    // vendor_mac_permissions. Either of them should exist.\n    final File vendorMacPermission = new File(\n        Environment.getVendorDirectory(), \"/etc/selinux/vendor_mac_permissions.xml\");\n    if (vendorMacPermission.exists()) {\n        sMacPermissions.add(vendorMacPermission);\n    } else {\n        // For backward compatibility.\n        sMacPermissions.add(new File(Environment.getVendorDirectory(),\n                                     \"/etc/selinux/nonplat_mac_permissions.xml\"));\n    }\n\n    // ODM mac permissions (optional).\n    final File odmMacPermission = new File(\n        Environment.getOdmDirectory(), \"/etc/selinux/odm_mac_permissions.xml\");\n    if (odmMacPermission.exists()) {\n        sMacPermissions.add(odmMacPermission);\n    }\n}\n\npublic static boolean readInstallPolicy() {\n    ...\n    final int count = sMacPermissions.size();\n    for (int i = 0; i &lt; count; ++i) {\n        final File macPermission = sMacPermissions.get(i);\n        try {\n            policyFile = new FileReader(macPermission);\n            Slog.d(TAG, \"Using policy file \" + macPermission);\n\n            parser.setInput(policyFile);\n            ...\n\n            policies.add(readSignerOrThrow(parser));\n        }\n        ...\n    }\n\n    synchronized (sPolicies) {\n        sPolicies.clear();\n        sPolicies.addAll(policies);\n\n        ...\n    }\n\n    return true;\n}\n</code></pre> <ul> <li>\"/etc/selinux/plat_mac_permissions.xml\"</li> <li>\"/etc/selinux/system_ext_mac_permissions.xml\"</li> <li>\"/etc/selinux/product_mac_permissions.xml\"</li> <li>\"/etc/selinux/vendor_mac_permissions.xml\"</li> <li>\"/etc/selinux/nonplat_mac_permissions.xml\"</li> <li>\"/etc/selinux/odm_mac_permissions.xml\"</li> </ul> <p>\u6bd4\u5982\uff1a system/sepolicy/private/mac_permissions.xml \u7684\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;policy&gt;\n    &lt;!-- Platform dev key in AOSP --&gt;\n    &lt;signer signature=\"@PLATFORM\" &gt;\n      &lt;seinfo value=\"platform\" /&gt;\n    &lt;/signer&gt;\n\n    &lt;!-- Media key in AOSP --&gt;\n    &lt;signer signature=\"@MEDIA\" &gt;\n      &lt;seinfo value=\"media\" /&gt;\n    &lt;/signer&gt;\n\n    &lt;signer signature=\"@NETWORK_STACK\" &gt;\n      &lt;seinfo value=\"network_stack\" /&gt;\n    &lt;/signer&gt;\n&lt;/policy&gt;\n</code></pre> <p>\u81f3\u6b64\uff0c\u7b80\u8981\u7684\u8bf4\u660e\u4e86\u4e00\u4e2aapp\u8fdb\u7a0b\u5728\u542f\u52a8\u65f6\u88ab\u8d34SE\u6807\u7b7e\u7684\u8fc7\u7a0b\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_9","title":"\u7f16\u8bd1\u9a8c\u8bc1","text":"<p>\u4ece\u4e0a\u4e00\u5c0f\u8282\u53ef\u77e5\uff0c\u7cfb\u7edf\u4f1a\u5b9e\u65f6\u7f16\u8bd1 CIL \u6587\u4ef6\uff0c\u6240\u4ee5\u7f16\u8bd1\u9a8c\u8bc1\u6309\u5982\u4e0b\u6b65\u9aa4\uff1a</p> <ul> <li>\u5220\u9664 <code>/odm/etc/selinux/precompiled_sepolicy</code> \u6587\u4ef6</li> <li>\u7f16\u8bd1\u751f\u6210 <code>\"/system/etc/selinux/plat_sepolicy.cil\"</code> \u6216 <code>\"/vendor/etc/selinux/vendor_sepolicy.cil\"</code></li> <li>\u5c06\u7f16\u8bd1\u751f\u6210\u7684 <code>.cil</code> \u6587\u4ef6push\u5230\u624b\u673a</li> <li>\u91cd\u542f\u624b\u673a <pre><code>$ time prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-lemonadep.ninja -j64 plat_sepolicy.cil\n[2/2] Install: out/target/product/lemonadep/system/etc/selinux/plat_sepolicy.cil\nreal    0m0.932s\nuser    0m17.872s\nsys 0m1.028s\n\nadb push /out/target/product/lemonadep/system/etc/selinux/plat_sepolicy.cil /system/etc/selinux/plat_sepolicy.cil\n\nadb reboot\n</code></pre></li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_10","title":"\u8f85\u52a9\u5de5\u5177","text":"<p>Android\u5e73\u53f0\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8f85\u52a9\u5de5\u5177\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u66f4\u597d\u7684\u6765\u7ba1\u7406\u548c\u8c03\u8bd5SE\u89c4\u5219\uff1a</p> <ul> <li>chcon: \u53d8\u66f4\u6587\u4ef6\u7684SE\u6807\u7b7e\u3002</li> <li>getenforce/setenforce: \u83b7\u53d6/\u8bbe\u7f6e\u5f53\u524d\u73af\u5883\u7684 SELinux \u6a21\u5f0f\u3002</li> <li>ls -Z: \u67e5\u770b\u6587\u4ef6\u7684SE\u6807\u7b7e\u3002</li> <li>ps -Z: \u67e5\u770b\u8fdb\u7a0b\u7684SE\u6807\u7b7e\u3002</li> <li>restorecon: \u6839\u636e\u5e73\u53f0SE\u914d\u7f6e\uff0c\u56de\u590d\u67d0\u4e2a\u6587\u4ef6\u7684SE\u6807\u7b7e\u3002</li> <li>runcon: \u4ee5\u6307\u5b9a\u7684SE\u6807\u7b7e\u542f\u52a8\u67d0\u4e2a\u8fdb\u7a0b\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#sys","title":"\u5185\u6838/sys/\u9a71\u52a8\u8282\u70b9","text":"<p><code>/sys/fs/selinux/</code> \u76ee\u5f55\u662fSELinux\u7684\u76f8\u5173\u5185\u6838\u9a71\u52a8\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>cat</code> \u83b7\u53d6\u4e00\u4e9b\u5173\u4e8eSE\u7684\u72b6\u6001\u4fe1\u606f\u3002\u5982\uff0c\u67e5\u770b\u5f53\u524dSE\u7684enforce\u72b6\u6001\uff1a</p> <pre><code>lemonadep:/sys/fs/selinux ## cat /sys/fs/selinux/enforce\n1\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#faq","title":"FAQ","text":"","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#security-context","title":"\u5b89\u5168\u4e0a\u4e0b\u6587(security context)","text":"<p>SEAndroid\u662f\u4e00\u79cd\u57fa\u4e8e\u5b89\u5168\u7b56\u7565\u7684MAC\u5b89\u5168\u673a\u5236\u3002\u8fd9\u79cd\u5b89\u5168\u7b56\u7565\u53c8\u662f\u5efa\u7acb\u5728\u5bf9\u8c61\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u7684\u57fa\u7840\u4e0a\u7684\u3002\u8fd9\u91cc\u6240\u8bf4\u7684\u5bf9\u8c61\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u79f0\u4e3b\u4f53\uff08Subject\uff09\uff0c\u4e00\u79cd\u79f0\u4e3a\u5ba2\u4f53\uff08Object\uff09\u3002\u4e3b\u4f53\u901a\u5e38\u5c31\u662f\u6307\u8fdb\u7a0b\uff0c\u800c\u5ba2\u89c2\u5c31\u662f\u6307\u8fdb\u7a0b\u6240\u8981\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c\u4f8b\u5982\u6587\u4ef6\u3001\u7cfb\u7edf\u5c5e\u6027\u7b49\u3002 \u5b89\u5168\u4e0a\u4e0b\u6587\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u9644\u52a0\u5728\u5bf9\u8c61\u4e0a\u7684\u6807\u7b7e\uff08Tag\uff09\u3002\u8fd9\u4e2a\u6807\u7b7e\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u7531\u56db\u90e8\u5206\u5185\u5bb9\u7ec4\u6210\uff0c\u5206\u522b\u662fSELinux\u7528\u6237\u3001SELinux\u89d2\u8272\u3001\u7c7b\u578b\u3001\u5b89\u5168\u7ea7\u522b\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u901a\u8fc7\u4e00\u4e2a\u5192\u53f7\u6765\u5206\u9694\uff0c\u683c\u5f0f\u4e3a\uff1auser:role:type:sensitivity\u3002</p> <ul> <li>\u5b89\u5168\u7ea7\u522b\uff1a\u6700\u5f00\u59cb\u7684\u76ee\u7684\u662f\u7528\u6765\u5bf9\u7f8e\u56fd\u653f\u5e9c\u5206\u7c7b\u6587\u4ef6\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236\u7684\u3002\u5728\u57fa\u4e8e\u5b89\u5168\u7ea7\u522b\u7684MAC\u5b89\u5168\u673a\u5236\u4e2d\uff0c\u4e3b\u4f53\uff08subject\uff09\u548c\u5ba2\u4f53\uff08object\uff09\u90fd\u5173\u8054\u6709\u4e00\u4e2a\u5b89\u5168\u7ea7\u522b\u3002\u5176\u4e2d\uff0c\u5b89\u5168\u7ea7\u522b\u8f83\u9ad8\u7684\u4e3b\u4f53\u53ef\u4ee5\u8bfb\u53d6\u5b89\u5168\u7ea7\u522b\u8f83\u4f4e\u7684\u5ba2\u4f53\uff0c\u800c\u5b89\u5168\u7ea7\u522b\u8f83\u4f4e\u7684\u4e3b\u4f53\u53ef\u4ee5\u5199\u5165\u5b89\u5168\u7ea7\u522b\u8f83\u9ad8\u7684\u5ba2\u4f53\u3002\u524d\u8005\u79f0\u4e3a\u201cread down\u201d\uff0c\u800c\u540e\u8005\u79f0\u4e3a\u201cwrite up\u201d\u3002\u901a\u8fc7\u8fd9\u79cd\u89c4\u5219\uff0c\u53ef\u4ee5\u5141\u8bb8\u6570\u636e\u4ece\u5b89\u5168\u7ea7\u522b\u8f83\u4f4e\u7684\u4e3b\u4f53\u6d41\u5411\u5b89\u5168\u7ea7\u522b\u8f83\u9ad8\u7684\u4e3b\u4f53\uff0c\u800c\u9650\u5236\u6570\u636e\u4ece\u5b89\u5168\u7ea7\u522b\u8f83\u9ad8\u7684\u4e3b\u4f53\u6d41\u5411\u5b89\u5168\u7ea7\u522b\u8f83\u4f4e\u7684\u4e3b\u4f53\uff0c\u4ece\u800c\u6709\u6548\u5730\u4fdd\u62a4\u4e86\u6570\u636e\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e3b\u4f53\u548c\u5ba2\u4f53\u7684\u5b89\u5168\u7ea7\u522b\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u4e3b\u4f53\u662f\u53ef\u4ee5\u5bf9\u5ba2\u4f53\u8fdb\u884c\u8bfb\u548c\u5199\u7684\u3002</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#file_contexts","title":"file_contexts \u5982\u4f55\u751f\u6548\uff1f","text":"<p>\u5728\u521b\u5efa\u65b0 <code>te</code> \u65f6\uff0c\u8bf7\u521b\u5efa\u6216\u66f4\u65b0\u8be5\u6587\u4ef6\uff0c\u4ee5\u4fbf\u4e3a\u6587\u4ef6\u5206\u914d\u65b0\u6807\u7b7e\u3002\u5982\u9700\u5e94\u7528\u65b0\u7684 <code>file_contexts</code>\uff0c\u8bf7\u91cd\u65b0\u6784\u5efa\u6587\u4ef6\u7cfb\u7edf\u6620\u50cf\uff0c\u6216\u5bf9\u8981\u91cd\u65b0\u6dfb\u52a0\u6807\u7b7e\u7684\u6587\u4ef6\u8fd0\u884c <code>restorecon</code>\u3002\u5728\u5347\u7ea7\u65f6\uff0c\u5bf9 <code>file_contexts</code> \u6240\u505a\u7684\u66f4\u6539\u4f1a\u5728\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5e94\u7528\u4e8e\u7cfb\u7edf\u548c\u7528\u6237\u6570\u636e\u5206\u533a\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u8fd9\u4e9b\u66f4\u6539\u5728\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5e94\u7528\u4e8e\u5176\u4ed6\u5206\u533a\uff1a\u5728\u4ee5\u5141\u8bb8\u8bfb\u5199\u7684\u65b9\u5f0f\u88c5\u8f7d\u76f8\u5e94\u5206\u533a\u540e\uff0c\u5c06 <code>restorecon_recursive</code> \u8c03\u7528\u6dfb\u52a0\u5230 init.board.rc \u6587\u4ef6\u4e2d\u3002 \u521b\u5efa\u6587\u4ef6\u65f6\uff0c \u82e5\u65e0\u7279\u6b8a\u6307\u5b9a\uff0c \u4f1a\u7ee7\u627f\u5176\u7236\u76ee\u5f55\u7684\u5b89\u5168\u4e0a\u4e0b\u6587 \uff08####7.2 \u6587\u4ef6\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\uff09 SELinux\u4e2d\u6240\u6709\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u521d\u59cb\u5b89\u5168\u4e0a\u4e0b\u6587\u662f\u5728\u6302\u8f7d\u65f6\u6807\u8bb0\u7684\u7684\uff0c\u6839\u636e\u6587\u4ef6\u7cfb\u7edf\u7684\u4e0d\u540c\uff0c\u5176labeling\u7684\u89c4\u5219\u6709\u6240\u5dee\u5f02\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#check-the-policies-built-through-the-intermediates-files","title":"Check the policies built through the intermediates files.","text":"<p><code>$OUT/obj/ETC/sepolicy_intermediates/policy.conf</code> The file will list all the processed policies with a comment detailing the source</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#how-to-check-that-your-modifications-are-allowed","title":"How to check that your modifications are allowed\uff1f","text":"<p>build only the sepolicy project\uff1a<code>mmm -B external/sepolicy</code></p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#how-to-disable-it","title":"How to disable it?","text":"<p>Since SELinux can impede development, it might be useful to disable it during debugging phase. For a runtime disablement, you can use setenforce.</p> <pre><code>$ adb shell setenforce 0\n</code></pre> <p>kernel**\u4e2d\u5f7b\u5e95\u5173\u95ed\uff1a\u4fee\u6539<code>LINUX/android/kernel/arch/arm64/configs/xxx_defconfig</code>\u6587\u4ef6\uff08xxx\u4e00\u822c\u4e3a\u624b\u673a\u4ea7\u54c1\u540d\uff09\uff0c \u53bb\u6389<code>CONFIG_SECURITY_SELINUX=y</code>\u7684\u914d\u7f6e\u9879 For a more permanent option, we\u2019ve added a trigger to the boot script that allows you to disable enforcement from **U-Boot.</p> <ul> <li>If you want to be permissive (denials logged in dmesg but not enforced)</li> </ul> <pre><code>U-Boot &gt; setenv selinux permissive\n</code></pre> <ul> <li>If you want to disable selinux completely (no logs)</li> </ul> <pre><code>U-Boot &gt; setenv selinux disabled\n</code></pre> <p>NOTE: disabling SELinux completely isn\u2019t possible since Android Nougat due to this patch.</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_11","title":"\u5982\u4f55\u5728\u8bbe\u5907\u4e0a\u9ed8\u8ba4\u6253\u5f00\u6216\u5173\u95ed\uff1f","text":"<p>\u5982\u4e0bcode\u4f1a\u68c0\u6d4bcmdline\u5bf9selinux\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u6b7b <code>status</code> \u53d8\u91cf\u6765\u6253\u5f00/\u5173\u95ed SELinux\u3002</p> <pre><code>http://aospxref.com/android-12.0.0_r3/xref/system/core/init/selinux.cpp\n\nenum EnforcingStatus { SELINUX_PERMISSIVE, SELINUX_ENFORCING };\n\nEnforcingStatus StatusFromProperty() {\n    EnforcingStatus status = SELINUX_ENFORCING;\n\n    ImportKernelCmdline([&amp;](const std::string&amp; key, const std::string&amp; value) {\n        if (key == \"androidboot.selinux\" &amp;&amp; value == \"permissive\") {\n            status = SELINUX_PERMISSIVE;\n        }\n    });\n\n    if (status == SELINUX_ENFORCING) {\n        ImportBootconfig([&amp;](const std::string&amp; key, const std::string&amp; value) {\n            if (key == \"androidboot.selinux\" &amp;&amp; value == \"permissive\") {\n                status = SELINUX_PERMISSIVE;\n            }\n        });\n    }\n\n    return status;\n}\n</code></pre> <p>\u7f16\u8bd1\u548c\u8fd0\u884c</p> <pre><code>$ time prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-lemonadep.ninja -j64 init_second_stage\n[7/7] Install: out/target/product/lemonadep/system/bin/init\n\nreal    0m3.198s\nuser    0m19.220s\nsys 0m1.744s\n\n\nadb push out/target/product/lemonadep/system/bin/init /system/bin/init\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#how-to-createextend-a-policy","title":"How to create/extend a policy?","text":"<p>The first step is to be able to identify the denials from. If SELinux is set to be permissive or enforcing, you can simply look at the kernel logs.</p> <pre><code>$ adb shell dmesg | ``grep` `avc\n</code></pre> <p>Some tools exist to generate policies directly from the above logs.</p> <pre><code>$ sudo apt-get install policycoreutils\n$ adb shell dmesg | grep avc | audit2allow\n</code></pre> <p>Once the policy has been generated, it needs to be included to the SELinux system configuration. The first rule to add a policy is to NEVER modify the <code>external/sepolicy</code> project. Instead your <code>[BoardConfig.mk](http://boardconfig.mk/)</code> should specify some <code>BOARD_SEPOLICY_DIRS</code> directories from which policy can be overridden or unionised. In our BSP, every <code>[BoardConfig.mk](http://boardconfig.mk/)</code> include <code>[sepolicy.mk](https://github.com/boundarydevices/android_device_boundary/blob/boundary-imx-l5.0.0_1.0.0-ga/sepolicy.mk)</code> which specify the .te files location/</p> <pre><code>BOARD_SEPOLICY_DIRS := \\\n device/boundary/sepolicy \\\n device/fsl/sabresd_6dq/sepolicy\n\nBOARD_SEPOLICY_UNION := \\\n app.te \\\n file_contexts \\\n fs_use \\\n genfs_contexts \\\n netd.te \\\n untrusted_app.te \\\n</code></pre> <p>We invite you to browse our policy changes made for the Lollipop release:  https://github.com/boundarydevices/android_device_boundary/tree/boundary-imx-l5.0.0_1.0.0-ga/sepolicy</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#how-to-custom-security-context-of-process","title":"How to custom Security Context of process?","text":"<p>1. Define a Context</p> <p>Let's assume you want to create a custom context called <code>np_mybinary</code> for your binary. This is what your <code>.te</code> file will have to contain:</p> <pre><code>type np_mybinary, domain;\ntype np_mybinary_exec, exec_type, vendor_file_type, file_type;\n</code></pre> <p>This is what your <code>file_contexts</code> file will have to contain:</p> <pre><code>/system/bin/mymodule  u:object_r:np_mybinary_exec:s0\n</code></pre> <p>2. Define a Transition</p> <p>You need to define the transition from the parent process context to <code>np_mybinary_exec</code>.</p> <pre><code>domain_auto_trans(&lt;parent-context&gt;, np_mybinary, np_mybinary_exec)\n</code></pre> <p>If your process is started by init, there is a simple macro available:</p> <pre><code>init_daemon_domain(np_mybinary);\n</code></pre> <p>\u624b\u52a8\u6dfb\u52a0SEPolicy\u6743\u9650\u3002</p> <pre><code>## denied log\ntype=1400 audit(32.939:25): avc: denied { open } for pid=2592 comm=\"chmod\" path=\"/dev/block/mmcblk0p25\" dev=\"tmpfs\" ino=6494\nscontext=u:r:init_shell:s0 tcontext=u:object_r:block_device:s0 tclass=blk_file permissive=1\n\n## \u5173\u952e\u4fe1\u606f\n## avc: denied {\u64cd\u4f5c\u6743\u9650} for pid=7201 comm=\"\u8fdb\u7a0b\u540d\" scontext=u:r:\u6e90\u7c7b\u578b:s0 tcontext=u:r:\u76ee\u6807\u7c7b\u578b:s0 tclass=\u8bbf\u95ee\u7c7b\u578b permissive=0\ndenied { open }             u:r:init_shell:s0            u:object_r:block_device:s0       blk_file\n             A              B                            C                                D\n\n## \u751f\u6210\u89c4\u5219\uff1a/system/sepolicy/private/init_shell.te\n## \u683c\u5f0f\uff1aallow  \u6e90\u7c7b\u578b \u76ee\u6807\u7c7b\u578b:\u8bbf\u95ee\u7c7b\u578b {\u64cd\u4f5c\u6743\u9650};\nallow init_shell  block_device:blk_file open;\n      B           C            D        A\n</code></pre>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#_12","title":"\u4e07\u80fd\u516c\u5f0f","text":"<p><pre><code>11-04 18:37:12.143   653   653 W boot@1.1-servic: type=1400 audit(0.0:93): avc: denied { getattr } for path=\"/dev/block/sde21\" dev=\"tmpfs\" ino=2240 scontext=u:r:hal_bootctl_default:s0 tcontext=u:object_r:vendor_uefi_block_device:s0 tclass=blk_file permissive=0\n</code></pre> \u5982\u4e0alog\u662fandroid.hardware.boot@1.1-service\u6ca1\u6709\u6743\u9650\u3002 \u6839\u636e\u6253\u5370\u51fa\u6765\u7684avclog\uff1a</p> <ul> <li>\u7f3a\u5c11\u4ec0\u4e48\u6743\u9650\uff1aavc: denied { getattr }</li> <li>\u8c01\u7f3a\u5c11\u6743\u9650\uff1ascontext=u:r:hal_bootctl_default</li> <li>\u5bf9\u54ea\u4e2a\u6587\u4ef6\u7f3a\u5c11\u6743\u9650\uff1atcontext=u:object_r:vendor_uefi_block_device:s0</li> <li>\u4ec0\u4e48\u7c7b\u578b\u7684\u6587\u4ef6\uff1atclass=blk_file</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff1ahal_bootctl_default\u8fdb\u7a0b\u5bf9vendor_uefi_block_device\u7c7b\u578b\u7684blk_file\u7f3a\u5c11getattr\u6743\u9650\u3002\u6240\u4ee5\u6dfb\u52a0\u7684\u6743\u9650\u5982\u4e0b\uff1a</p> <pre><code>allow hal_bootctl_default vendor_uefi_block_device:blk_file { getattr }\n</code></pre> <p>\u4f46\u662f\uff0c\u8fd9\u6709\u4e00\u4e2a\u5de8\u5927\u7684\u5751\uff01\u6709\u65f6\u5019avc denied\u7684log\u4e0d\u662f\u4e00\u6b21\u6027\u66b4\u9732\u6240\u6709\u6743\u9650\u95ee\u9898\uff0c\u8981\u7b49\u89e3\u51b3\u4e00\u4e2a\u6743\u9650\u95ee\u9898\u4e4b\u540e\uff0c\u624d\u4f1a\u66b4\u9732\u53e6\u5916\u4e00\u4e2a\u6743\u9650\u95ee\u9898\u3002\u6bd4\u5982\u63d0\u793a\u7f3a\u5c11\u67d0\u4e2a\u76ee\u5f55\u7684read\u6743\u9650\uff0c\u52a0\u5165read\u4e4b\u540e\uff0c\u624d\u663e\u793a\u7f3a\u5c11write\u6743\u9650\uff0c\u8981\u4e00\u6b21\u6b21\u4e00\u6b21\u8bd5\uff0c\u4e00\u6b21\u4e00\u6b21\u52a0\uff0c\u65f6\u95f4\u6210\u672c\u6781\u5927\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7ed9\u6700\u9ad8\u7684\u6743\u9650\uff08\u4e00\u822c\u4e0d\u5efa\u8bae\uff09\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>allow hal_bootctl_default vendor_uefi_block_device:blk_file create_dir_perms\n</code></pre> <p>\u6709\u7684\u540c\u5b66\u6bd4\u8f83\u559c\u6b22\u7528audit2allow\uff0c\u6211\u521a\u63a5\u89e6seliunx\u65f6\u4e5f\u662f\u6781\u5ea6\u4f9d\u8d56audit2allow\u3002\u540e\u6765\u5b66\u4e60\u4e86selinux\u4e00\u4e9b\u77e5\u8bc6\u5e76\u603b\u7ed3\u8fd9\u4e2a\u4e07\u80fd\u516c\u5f0f\u540e\uff0c\u5c31\u4e0d\u518d\u7528audit2allow\u4e86\u3002</p>","tags":["Android","SELinux"]},{"location":"android/selinux/intro/#reference","title":"Reference","text":"<ul> <li>https://selinuxproject.org/page/NewUsers</li> <li>https://boundarydevices.com/android-security-part-3-security-enhanced-linux-in-android/</li> <li>CIL (Common Intermediate Language)\uff1ahttps://github.com/SELinuxProject/selinux/blob/master/secilc/docs/README.md</li> <li>https://source.android.com/security/selinux</li> </ul>","tags":["Android","SELinux"]},{"location":"android/selinux/genfscon/","title":"genfscon","text":"<p>\u63d2\u4e2a\u773c</p> <p>sysfs \u9700\u8981 genfscon</p> <p>\u540e\u7eed\u6709\u65f6\u95f4\u8865\u5168</p>","tags":["Android","SELinux"]},{"location":"android/binder/android12-native-binder-change/","title":"Android 12 Native Binder \u4ee3\u7801\u53d8\u8fc1","text":"<p>\u6ce8\uff1a\u5e7f\u4e49\u4e0a Native Binder \u53ef\u7406\u89e3\u4e3a\u5305\u542b VND\uff0cHW\uff0cRPC \u7b49\u5185\u5bb9\uff0c\u672c\u6587\u6240\u8ba8\u8bba\u7684 Native Binder \u6307\u7684\u4ec5\u662f servicemanager \u670d\u52a1\u7a0b\u5e8f\u53ca libbinder \u4e2d\u76f8\u5173\u4ee3\u7801\uff0c\u4e0d\u505a\u5e7f\u4e49\u7684\u5ef6\u4f38\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#_1","title":"\u4e00\u3001\u524d\u8a00","text":"<p>servicemanager \u7a0b\u5e8f\uff08\u4ee5\u4e0b\u7b80\u79f0 SM \uff09\u662f Android \u7cfb\u7edf Binder \u6a21\u5757\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u626e\u6f14\u7740\u7c7b\u4f3c C/S \u67b6\u6784\u4e2d\u7684 DNS \u670d\u52a1\u5668\u7684\u89d2\u8272\uff0c\u63d0\u4f9b\u670d\u52a1\u589e\u67e5\u548c\u6743\u9650\u7ba1\u7406\u7b49\u529f\u80fd\u652f\u6491\u3002</p> <p>\u5728 Android 11 \u4e4b\u524d\u7684\u7248\u672c\u91cc\uff0cSM \u662f**\u9762\u5411 Binder \u9a71\u52a8\u7f16\u7a0b**\uff0c\u76f4\u63a5\u4f7f\u7528 open\u3001mmap\u3001ioctl \u7b49 API \u4e0e Binder \u9a71\u52a8\u4ea4\u4e92\u3002\u800c\u4ece Android 11 \u5f00\u59cb\uff0cSM \u653e\u5f03\u4f7f\u7528\u8fd9\u4e9b\u8f83\u5e95\u5c42\u7684\u63a5\u53e3\uff0c\u8f6c\u5411 libbinder \u5e93\u548c AIDL\u3002\u6807\u5fd7\u6027\u7684\u63d0\u4ea4\u5982\u4e0b\uff0c\u8be5\u63d0\u4ea4\u5960\u5b9a\u4e86\u65b0\u7684 SM \u67b6\u6784\u57fa\u7840\uff0c\u6b64\u540e\u591a\u6b21\u63d0\u4ea4\u5bf9\u6b64\u8fdb\u884c\u5b8c\u5584\u586b\u5145\u3002</p> <p>frameworks/native</p> <pre><code>servicemanager: use libbinder\n\nBug: 135768100\nTest: boot\nTest: servicemanager_test\n\nChange-Id: I9d657b6c0d0be0f763b6d54e0e6c6bc1c1e3fc7a\n(cherry picked from commit 3e092daa14c63831d76d3ad6e56b2919a0523536)\n\nsmoreland@google.com\uff08\u4f5c\u8005\uff09\n\u63d0\u4ea4\u65e5\u671f2019-07-09 AM 9:54\n</code></pre> <p>\u672c\u6587\u4ee3\u7801\u57fa\u4e8e Android 12 \uff0c\u4ee5 SM \u4e3a\u4e3b\u89c6\u89d2\uff0c\u4ece\u67b6\u6784\u548c\u60c5\u666f\u6d41\u7a0b\u4e0a\u5e26\u5927\u5bb6\u8ba4\u8bc6\u65b0\u7684 Native Binder\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#_2","title":"\u4e8c\u3001\u8f6f\u4ef6\u67b6\u6784","text":"","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#21","title":"2.1\u3001\u67b6\u6784\u6982\u8ff0","text":"<p>\u56fe1\uff1a\u5207\u6362\u5230 AIDL \u548c libbinder \u540e\u7684 ServiceManager \u7c7b\u5173\u7cfb\u56fe</p> <p>\u56fe\u6ce8\uff1a</p> <p>\u4e3a\u4e86\u753b\u56fe\u65b9\u4fbf\uff0c\u5c06 namespace \u5199\u6210\u4e86\u4e0b\u5212\u7ebf\u5f62\u5f0f\u3002</p> <p>android_os_BpServiceManager \u548c android_os_BnServiceManager\u3001android_os_IServiceManager \u7c7b\u5747\u5728 android os \u7684 namespace \u4e2d\uff0c\u5176\u4ed6\u65e0\u4e0b\u5212\u7ebf\u7684\u7c7b\u540d\uff0c\u5904\u4e8e android namespace \u4e2d\u3002</p> <p>\u4e00\u56fe\u80dc\u5343\u8a00\uff0c11 \u4e4b\u524d\u7684 SM \u662f\u5199\u5728 c \u6587\u4ef6\u91cc\uff0c\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u73b0\u5728\u57fa\u4e8e AIDL \u548c libbinder\uff0c\u4f7f\u7528 CPP \u8bed\u8a00\uff0c\u7528 UML \u5c31\u53ef\u4ee5\u5f88\u5f62\u8c61\u5730\u5c55\u793a\u7c7b\u5173\u7cfb\u4e86\u3002\u5c31\u7740\u8fd9\u5e45\u56fe\u6211\u4eec\u5927\u81f4\u63cf\u8ff0\u65b0\u7684\u8f6f\u4ef6\u67b6\u6784\u3002</p> <ul> <li>\u7ea2\u8272\u7ebf\u6bb5\u5927\u6982\u5730\u5c06\u670d\u52a1\u7aef\u4e0e\u5ba2\u6237\u7aef\u7c7b\u76f8\u5206\u9694\uff0c\u670d\u52a1\u7aef\u5728\u53f3\u4e0b\u89d2\u3002</li> </ul> <p>\u4e00\u4e9b libbinder \u7684\u7528\u4e8e\u7ee7\u627f\u7684\u516c\u5171\u7c7b\u8bf7\u8bfb\u8005\u81ea\u884c\u5265\u79bb\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u5f52\u5165\u67d0\u4e00\u7aef\u3002\u4f8b\u5982 IBinder\uff0c\u6211\u4eec\u77e5\u9053\u4ed6\u662f BBinder \u548c BpBinder \u7684\u7236\u7c7b\uff0c\u662f\u516c\u5171\u7684\u63a5\u53e3\u7ea6\u675f\u3002</p> <ul> <li>libbinder \u4e2d\u5ba2\u6237\u7aef\u7684\u5165\u53e3\u53d8\u4e3a\uff1aIServiceManager.cpp#ServiceManagerShim</li> </ul> <p>\u4e4b\u524d\u65e0\u8be5\u8f85\u52a9\u7c7b\uff0c\u800c\u662f\u76f4\u63a5\u64cd\u4f5c BpServiceManager\uff0c\u8fd9\u4e2a\u8f85\u52a9\u7c7b\u5c01\u88c5\u4e86 AIDL \u81ea\u52a8\u751f\u6210\u7684 BpServiceManager\uff0c\u6240\u4ee5\u73b0\u5728\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u6d41\u5c31\u53d8\u6210\u5982\u4e0b\u4e09\u6b65\uff1a</p> <pre><code>1.\u7528\u6237\u4ee3\u7801 \n2.libbinder \u4ee3\u7801 binder/IServiceManager.cpp#ServiceManagerShim\n3.AIDL \u4ee3\u7801      android/os/IServiceManager.cpp#BpServiceManager \u63a5\u53e3\n</code></pre> <p>\u6240\u4ee5 libbinder \u4e2d\u7684 ServiceManagerShim \u8d77\u5230\u4e86\u4e00\u4e2a\u4e2d\u8f6c\u7684\u4f5c\u7528\uff0c\u628a\u8bf7\u6c42\u8f6c\u7ed9 out \u4e0b AIDL \u81ea\u52a8\u751f\u6210\u7684 BpServiceManager\u3002</p> <ul> <li>BpServiceManager \u7684\u5b9e\u73b0\u632a\u5230 out</li> </ul> <p>\u539f\u6765\u662f\u5728 libbinder#IServiceManager.cpp \u4e2d\u624b\u5199\u5b9e\u73b0\uff0c\u73b0\u5728\u662f AIDL \u5e2e\u4f60\u5b9e\u73b0\u3002</p> <p>\u5f53\u7136\uff0c\u8be5\u6587\u4ef6\u4e2d\u540c\u6837\u81ea\u52a8\u5b9e\u73b0\u4e86 BnServiceManager\u7c7b</p> <p>\u4ee3\u7801\u8def\u5f84</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm64_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</p> <ul> <li>\u670d\u52a1\u7aef\u7684\u6838\u5fc3\u5b9e\u73b0\u5728 ServiceManager.cpp</li> </ul> <p>\u539f\u6765\u662f\u6ca1\u6709 Bn \u7684\uff0c\u800c\u662f\u4e00\u4e2a binder_loop \u65b9\u6cd5\u6c9f\u901a\u9a71\u52a8\uff0c\u73b0\u5728\u5219\u662f ServiceManager \u7ee7\u627f\u4e86 BnServiceManager \u6765\u83b7\u5f97\u4ee3\u7801\u6d41\u3002</p> <ul> <li>waitForService\u7684\u6539\u52a8\uff1aIServiceCallback.aidl</li> </ul> <p>Waiter \u7c7b\u3002\u65b0\u589e\u4e86 Binder \u533f\u540d\u670d\u52a1\u7528\u6765\u5411 SM \u6ce8\u518c\u8de8\u8fdb\u7a0b\u7684\u56de\u8c03\uff0c\u5f53 SM \u68c0\u6d4b\u5230\u6709\u670d\u52a1\u6ce8\u518c\u65f6\uff0c\u4f1a\u8fd4\u56de\u901a\u77e5\u3002</p> <ul> <li>\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u6570\u91cf\u76d1\u542c\uff1aIServiceCallback.aidl</li> </ul> <p>IServiceCallback.aidl \u8fd9\u4e2a\u533f\u540d Binder \u670d\u52a1\u5c31\u662f\u7528\u4e8e\u8be5\u76ee\u7684\uff0c\u53ef\u4ee5\u76d1\u542c\u67d0\u4e2a\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u6570\u91cf\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#22","title":"2.2\u3001\u6587\u4ef6\u8def\u5f84","text":"<ul> <li>AIDL</li> </ul> <p>AIDL \u662f\u4e00\u79cd\u65b9\u4fbf\u7684\u63a5\u53e3\u5b9a\u4e49\u8bed\u8a00\uff0c\u7528\u4e8e Binder-IPC \u7f16\u7a0b\u3002\u8be6\u7ec6\u4ecb\u7ecd\u4e0e\u4f7f\u7528\u53ef\u53c2\u8003\uff1aAIDL Overview</p> <p>\u6211\u4eec\u5173\u6ce8\u4e09\u4e2a AIDL\uff0c\u5206\u522b\u662f IServiceManager.aidl\u3001IServiceCallback.aidl\u3001IClientCallback.aidl\uff0c\u5bf9\u5e94\u7684\u7f16\u8bd1\u540e\u751f\u6210\u7684\u6587\u4ef6\u8def\u5f84\u4e3a\uff1a</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/</p> <p>IClientCallback.cpp</p> <p>IServiceCallback.cpp</p> <p>IServiceManager.cpp</p> <ul> <li>libbinder \u4e2d\u7684\u4ee3\u7801\u8def\u5f84</li> </ul> <p>frameworks/native/libs/binder/IServiceManager.cpp</p> <ul> <li>SM \u670d\u52a1\u7aef\u4ee3\u7801\u8def\u5f84</li> </ul> <p>frameworks/native/cmds/servicemanager/</p> <p>main.cpp</p> <p>Access.cpp</p> <p>ServiceManager.cpp</p> <p>\u672c\u5c0f\u8282\u4ec5\u5c55\u793a\u6d89\u53ca\u53d8\u8fc1\u7684\u6587\u4ef6\u8def\u5f84\u3002\u7b80\u6d01\u8d77\u89c1\u53ea\u5199\u4e86 CPP \u6587\u4ef6\uff0c\u5bf9\u5e94\u7684h\u5934\u6587\u4ef6\u53ef\u4ee5\u9644\u8fd1\u67e5\u627e\u3002</p> <p>\u53e6\u5916\u9700\u8981\u7279\u522b\u533a\u5206\u7684\u662f\uff0c\u6709\u4e24\u4e2a IServiceManager \u3002</p> <p>\u4e00\u4e2a\u5728 libbinder \u4e2d\uff0c\u662f android \u7684 name space\uff0c\u76f4\u63a5\u88ab\u7528\u6237\u00a0<code>#include&lt;binder/IServiceManager&gt;</code>\u00a0\u4f7f\u7528\u3002</p> <p>\u53e6\u4e00\u4e2a\u662faidl\u81ea\u52a8\u751f\u6210\u7684 android os \u7684 name space\uff0c\u88ab\u4e0a\u9762\u7684 libbinder \u6240\u4f7f\u7528\u00a0<code>#include&lt;android/os/IServiceManager&gt;</code>\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#23","title":"2.3\u3001\u5c0f\u7ed3","text":"<p>\u7b2c\u4e8c\u7ae0\u8282\u4ece\u5168\u5c40\u7684\u89d2\u5ea6\u5c55\u793a\u4e86 SM \u5207\u6362\u5230 AIDL \u548c libbinder \u7684\u8f6f\u4ef6\u67b6\u6784\uff0c\u7ed3\u5408\u56fe\u6765\u770b\u8fd8\u662f\u975e\u5e38\u6e05\u695a\u6613\u4e8e\u7406\u89e3\u7684\u3002</p> <p>\u63a5\u4e0b\u6765\u8ddf\u8e2a\u51e0\u4e2a\u60c5\u666f\u6d41\u7a0b\uff0c\u5c55\u793a\u65b0\u67b6\u6784\u4e2d\u7684\u7ec6\u8282\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#servicemanager","title":"\u4e09\u3001servicemanager \u542f\u52a8\u6d41\u7a0b\u5206\u6790","text":"<p>\u56fe2\uff1aservicemanager \u542f\u52a8\u65f6\u5e8f\u56fe</p> <p>\u5982\u4e0a\u56fe\uff0c\u542f\u52a8\u6d41\u7a0b\u7684\u53d8\u52a8\u4e3b\u8981\u5728\u8fdb\u5165\u5faa\u73af\u7684\u65b9\u5f0f\uff0cAndroid 11 \u4e4b\u524d\u662f\u901a\u8fc7\u00a0<code>binder_loop</code>\u00a0\u65b9\u6cd5\uff0c\u800c\u73b0\u5728\u662f\u901a\u8fc7 looper\u3002\u4e0b\u9762\u5c55\u793a\u7ec6\u8282\u3002</p> <p>frameworks/native/cmds/servicemanager/main.cpp</p> <pre><code>int main(int argc, char** argv) {\n    if (argc &gt; 2) {\n        LOG(FATAL) &lt;&lt; \"usage: \" &lt;&lt; argv[0] &lt;&lt; \" [binder driver]\";\n    }\n\n    const char* driver = argc == 2 ? argv[1] : \"/dev/binder\";\n    //\u6c9f\u901a Binder \u9a71\u52a8\uff0copen\uff0cmmap\n    sp&lt;ProcessState&gt; ps = ProcessState::initWithDriver(driver);\n    ps-&gt;setThreadPoolMaxThreadCount(0);\n    //oneway \u9650\u5236\uff0cSM \u53d1\u8d77\u7684 Binder \u8c03\u7528\u5fc5\u987b\u662f\u5355\u5411\uff0c\u5426\u5219\u6253\u5370\u5806\u6808\u65e5\u5fd7\u63d0\u793a\n    ps-&gt;setCallRestriction(ProcessState::CallRestriction::FATAL_IF_NOT_ONEWAY);\n    //\u5b9e\u4f8b\u5316 ServiceManager\uff0c\u4f20\u5165 Access \u7c7b\u7528\u4e8e\u9274\u6743\n    sp&lt;ServiceManager&gt; manager = sp&lt;ServiceManager&gt;::make(std::make_unique&lt;Access&gt;());\n    if (!manager-&gt;addService(\"manager\", manager, false /*allowIsolated*/, IServiceManager::DUMP_FLAG_PRIORITY_DEFAULT).isOk()) {\n        LOG(ERROR) &lt;&lt; \"Could not self register servicemanager\";\n    }\n    //\u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf\u7ed9 IPCThreadState\n    IPCThreadState::self()-&gt;setTheContextObject(manager);\n    //\u6ce8\u518c\u5230\u9a71\u52a8\uff0c\u6210\u4e3a Binder \u7ba1\u7406\u5458\uff0chandle \u662f 0\n    ps-&gt;becomeContextManager();\n    //\u51c6\u5907 looper\n    sp&lt;Looper&gt; looper = Looper::prepare(false /*allowNonCallbacks*/);\n    //\u901a\u77e5\u9a71\u52a8 BC_ENTER_LOOPER \uff0c\u76d1\u542c\u9a71\u52a8 fd \uff0c\u6709\u6d88\u606f\u65f6\u56de\u8c03\u5230 handleEvent \u5904\u7406 binder \u8c03\u7528\n    BinderCallback::setupTo(looper);\n    //\u670d\u52a1\u7684\u6ce8\u518c\u76d1\u542c\u76f8\u5173\n    ClientCallbackCallback::setupTo(looper, manager);\n    //\u65e0\u9650\u5faa\u73af\u7b49\u6d88\u606f\n    while(true) {\n        looper-&gt;pollAll(-1);\n    }\n\n    // should not be reached\n    return EXIT_FAILURE;\n}\n</code></pre> <p>\u548c\u539f\u6765\u7684 servicemanager \u670d\u52a1\u76f8\u6bd4\u8f83\uff0c\u4f7f\u7528\u4e86 libbinder \u540e\uff0c\u4ee3\u7801\u66f4\u89c4\u8303\u5316\uff0c\u548c\u5176\u4ed6 Native \u7684\u670d\u52a1\u98ce\u683c\u8d8b\u4e8e\u4e00\u81f4\u3002</p> <ul> <li> <p>\u4e4b\u524d\u662f\u76f4\u63a5 open\u3001mmap \u73b0\u5728\u662f\u501f\u52a9 libbinder</p> </li> <li> <p>\u4e4b\u524d\u662f binder_loop \u6b7b\u5faa\u73af\u63a5\u6536\u9a71\u52a8\u7684\u6d88\u606f\uff0c\u73b0\u5728\u662f\u901a\u8fc7 looper \u76d1\u542c fd \u6765 handleEvent</p> </li> <li> <p>\u4e4b\u524d\u7684\u9274\u6743\u73b0\u5728\u88ab\u72ec\u7acb\u5230\u5355\u72ec\u6587\u4ef6 Access.cpp</p> </li> </ul> <p>\u7a81\u7136\u60f3\u8d77\u4e00\u4e2a\u9898\u76ee\uff0cservicemanager \u6620\u5c04\u7684\u865a\u62df\u5185\u5b58\u6709\u591a\u5927\uff1f\u73b0\u5728\u7684\u7b54\u6848\u662f\u548c\u666e\u901a\u5e94\u7528\u4e00\u6837\u5927\uff1a1 M - 2 \u9875\u3002</p> <p>frameworks/native/libs/binder/ProcessState.cpp</p> <pre><code>#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n</code></pre> <p>\u542f\u52a8\u6d41\u7a0b\u6bd4\u8f83\u6e05\u6670\u4e0d\u591a\u8d58\u8ff0\uff0c\u4e0b\u4e00\u5c0f\u8282\u770b addService \u7684\u6d41\u7a0b\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#addservice","title":"\u56db\u3001addService \u6d41\u7a0b\u5206\u6790","text":"<p> \u56fe3\uff1adefaultServiceManager \u6d41\u7a0b</p> <p> \u56fe4\uff1aaddService \u5ba2\u6237\u7aef\u6d41\u7a0b</p> <p> \u56fe5\uff1aaddService \u670d\u52a1\u7aef\u6d41\u7a0b</p> <p>\u5148\u4e0a\u56fe\uff0c\u603b\u89c8 Native \u7684\u4ee3\u7801\u6d41\u7a0b\uff0c\u5ba2\u6237\u7aef\u662f libbinder \u91cc\u7684 IServiceManager.cpp\uff0c\u670d\u52a1\u7aef\u662f\u6211\u4eec\u7684 ServiceManager.cpp</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#41servicemanagershimaddservice","title":"4.1\u3001ServiceManagerShim::addService","text":"<p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>status_t ServiceManagerShim::addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n                                        bool allowIsolated, int dumpsysPriority)\n{\n    Status status = mTheRealServiceManager-&gt;addService(\n        String8(name).c_str(), service, allowIsolated, dumpsysPriority);\n    return status.exceptionCode();\n}\n</code></pre> <p>\u76f4\u63a5\u4f7f\u7528\u7684 mTheRealServiceManager\uff0c\u6f84\u6e05\u7591\u95ee\uff0cmTheRealServiceManager \u662f\u8c01\uff1f</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#411mtherealservicemanager","title":"4.1.1\u3001mTheRealServiceManager \u662f\u8c01\uff1f","text":"<p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>#include &lt;android/os/IServiceManager.h&gt;\nusing AidlServiceManager = android::os::IServiceManager;\nclass ServiceManagerShim : public IServiceManager\n{\nprotected:\n    sp&lt;AidlServiceManager&gt; mTheRealServiceManager;\n......\nServiceManagerShim::ServiceManagerShim(const sp&lt;AidlServiceManager&gt;&amp; impl)\n : mTheRealServiceManager(impl)\n{}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cmTheRealServiceManager \u5c31\u662f\u4e00\u4e2a android::os::IServiceManager \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5728 ServiceManagerShim \u5b9e\u4f8b\u5316\u65f6\u8d4b\u503c\u3002</p> <p>\u90a3\u4e48 ServiceManagerShim \u4f55\u65f6\u5b9e\u4f8b\u5316\u5462\uff1f\u7b54\u6848\u662f defaultServiceManager() \u4e2d</p> <p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>sp&lt;IServiceManager&gt; defaultServiceManager()\n{\n    std::call_once(gSmOnce, []() {\n        sp&lt;AidlServiceManager&gt; sm = nullptr;\n        while (sm == nullptr) {\n            //1\u3001\u62ff\u5230 AidlServiceManager \u7c7b\u578b\u7684 BpServiceManager(new BpBinder(0)) \u5b9e\u4f8b\n            sm = interface_cast&lt;AidlServiceManager&gt;(ProcessState::self()-&gt;getContextObject(nullptr));\n            if (sm == nullptr) {\n                ALOGE(\"Waiting 1s on context object on %s.\", ProcessState::self()-&gt;getDriverName().c_str());\n                sleep(1);\n            }\n        }\n        //2\u3001new ServiceManagerShim\n        gDefaultServiceManager = sp&lt;ServiceManagerShim&gt;::make(sm);\n    });\n\n    return gDefaultServiceManager;\n}\n</code></pre> <p>\u5982\u6ce8\u91ca 1\u30012\uff0cmTheRealServiceManager \u5c31\u662f\u5728\u8fd9\u6837\u6d41\u7a0b\u4e2d\u8d4b\u503c\u7684\u3002\u4ed6\u7684\u771f\u662f\u9762\u76ee\u662f\u00a0<code>BpServiceManager(new BpBinder(0))</code>\u3002</p> <p>\u7531\u56fe1\u53ef\u77e5\uff0c\u6211\u4eec\u62ff\u5230\u4e86\u64cd\u4f5c Binder \u9a71\u52a8\u7684\u5165\u53e3\uff0cBpServiceManager\u2192BpBinder\u2192IPCThreadState\u2192ioctl</p> <p>\u5173\u4e8e\u4e00\u90e8\u5206\u65e7\u77e5\u8bc6\u4f1a\u8d34\u62d3\u5c55\u94fe\u63a5\u672c\u6587\u4e0d\u505a\u5c55\u5f00\u3002interface_cast \u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a\u6d45\u8c08Android\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u4e2d\u7684Server\u548cClient\u83b7\u5f97Service Manager\u63a5\u53e3\u4e4b\u8def</p> <p>\u597d\u73b0\u5728\u8fd4\u56de\u4e0a\u8282\uff0c\u76f4\u63a5\u8d70\u5165 BpServiceManager#addService \u65b9\u6cd5</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#42bpservicemanageraddservice","title":"4.2\u3001BpServiceManager::addService","text":"<p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</p> <pre><code>namespace android {\nnamespace os {\n\nBpServiceManager::BpServiceManager(const ::android::sp&lt;::android::IBinder&gt;&amp; _aidl_impl)\n    : BpInterface&lt;IServiceManager&gt;(_aidl_impl){//_aidl_impl \u5c31\u662f BpBinder(0) \u5b9e\u4f8b\n}\n--------------------------------------------------\n    ::android::binder::Status BpServiceManager::addService(const ::std::string&amp; name, const ::android::sp&lt;::android::IBinder&gt;&amp; service, bool allowIsolated, int32_t dumpPriority) {\n  ::android::Parcel _aidl_data;\n  _aidl_data.markForBinder(remoteStrong());//0\u3001\u548c Rpc Binder\u6709\u5173\n  ::android::Parcel _aidl_reply;\n  ::android::status_t _aidl_ret_status = ::android::OK;\n  ::android::binder::Status _aidl_status;\n  //1\u3001\u5199 interface\n  _aidl_ret_status = _aidl_data.writeInterfaceToken(getInterfaceDescriptor());\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //2\u3001\u5199 name\n  _aidl_ret_status = _aidl_data.writeUtf8AsUtf16(name);\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //3\u3001\u5199 binder \u5bf9\u8c61\n  _aidl_ret_status = _aidl_data.writeStrongBinder(service);\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //4\u3001\u5199 allowIsolated\n  _aidl_ret_status = _aidl_data.writeBool(allowIsolated);\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //5\u3001\u5199 dumpPriority\n  _aidl_ret_status = _aidl_data.writeInt32(dumpPriority);\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //6\u3001\u501f\u52a9 BpBinder(0)#transact \u6765\u53d1\u8d77 Binder \u901a\u4fe1\n  _aidl_ret_status = remote()-&gt;transact(BnServiceManager::TRANSACTION_addService, _aidl_data, &amp;_aidl_reply, 0);\n  if (UNLIKELY(_aidl_ret_status == ::android::UNKNOWN_TRANSACTION &amp;&amp; IServiceManager::getDefaultImpl())) {\n     return IServiceManager::getDefaultImpl()-&gt;addService(name, service, allowIsolated, dumpPriority);\n  }\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  //7\u3001\u5982\u679c\u6709\u8fd4\u56de\u503c\u5c31\u4ece\u8fd9\u4e2a parcel \u5305\u91cc\u8bfb\n  _aidl_ret_status = _aidl_status.readFromParcel(_aidl_reply);\n  if (((_aidl_ret_status) != (::android::OK))) {\n    goto _aidl_error;\n  }\n  if (!_aidl_status.isOk()) {\n    return _aidl_status;\n  }\n  _aidl_error:\n  _aidl_status.setFromStatusT(_aidl_ret_status);\n  return _aidl_status;\n}\n</code></pre> <p>\u628a Android 10 \u7684\u8d34\u4e0a\u6765\uff0c\u6211\u4eec\u5bf9\u6bd4\u770b\u770b</p> <p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>    virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n                                bool allowIsolated, int dumpsysPriority) {\n        Parcel data, reply;\n        data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n        data.writeString16(name);\n        data.writeStrongBinder(service);\n        data.writeInt32(allowIsolated ? 1 : 0);\n        data.writeInt32(dumpsysPriority);\n        status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);\n        return err == NO_ERROR ? reply.readExceptionCode() : err;\n    }\n</code></pre> <p>\u548c Android 11 \u4e4b\u524d\u624b\u5199\u7684 BpServiceManager \u76f8\u6bd4\uff0c\u672c\u8d28\u662f\u6ca1\u53d8\u7684\uff0c\u5c31\u662f\u591a\u4e86\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u89c4\u8303\u6027\u4ee3\u7801\u3002</p> <p>\u5230\u8fd9\u91cc\uff0c\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\u5c31\u5927\u81f4\u5c55\u793a\u5b8c\u4e86\uff0ctransact \u518d\u5f80\u540e\u5c31\u662f\u65e7\u6709\u7684\u6d41\u7a0b\uff0c\u53ef\u53c2\u8003\uff1a\u6d45\u8c08Android\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u4e2d\u7684Server\u548cClient\u83b7\u5f97Service Manager\u63a5\u53e3\u4e4b\u8def</p> <p>\u4e4b\u540e\u8d70\u5230 Binder \u9a71\u52a8\uff0c\u9a71\u52a8\u53c8\u6839\u636e handle == 0 \u627e\u5230\u5bf9\u7aef\uff0c\u6211\u4eec\u7684 SM \u8fdb\u7a0b\uff0c\u5524\u9192\u4ed6\u5f00\u59cb\u5904\u7406\u8bf7\u6c42\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#43bindercallbackhandleevent","title":"4.3\u3001BinderCallback::handleEvent","text":"<p>\u5982\u56fe 4\uff1aaddService \u670d\u52a1\u7aef\u6d41\u7a0b\uff0c\u73b0\u5728\u5f00\u59cb\u670d\u52a1\u7aef\u7684\u6d41\u7a0b\u5c55\u793a\u3002</p> <p>frameworks/native/cmds/servicemanager/main.cpp</p> <pre><code>class BinderCallback : public LooperCallback {\npublic:\n......\n        int handleEvent(int /* fd */, int /* events */, void* /* data */) override {\n        IPCThreadState::self()-&gt;handlePolledCommands();\n        return 1;  // Continue receiving callbacks.\n    }\n};\n</code></pre> <p>\u4e4b\u540e\u8d70\u5230 BR_TRANSACTION</p> <p>frameworks/native/libs/binder/IPCThreadState.cpp</p> <pre><code>status_t IPCThreadState::executeCommand(int32_t cmd)\n{\n    switch ((uint32_t)cmd) {\n        case BR_TRANSACTION:\n        {\n            if (tr.target.ptr) {\n            //\u56e0\u4e3a\u76ee\u7684\u7aef SM \u6240\u4ee5 tr.target.ptr \u4e3a 0\n            }else {//\u5f00\u59cb\u4e1a\u52a1\u5206\u53d1\n                error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);\n            }\n</code></pre> <p>the_context_object \u662f SM \u542f\u52a8\u7684\u65f6\u5019\u8bbe\u7f6e\u597d\u7684</p> <pre><code>sp&lt;BBinder&gt; the_context_object;\n\nvoid IPCThreadState::setTheContextObject(const sp&lt;BBinder&gt;&amp; obj)\n{\n    the_context_object = obj;\n}\n</code></pre> <p>\u662f ServiceManager \u7c7b\u5b9e\u4f8b\uff0c\u6240\u4ee5\u4e5f\u662f\u4e00\u4e2a BBinder \u5bf9\u8c61\uff0c\u6240\u4ee5\u5c31\u6709\u4e86 transact()\u2192onTransact() \u7684\u5904\u7406\u80fd\u529b\u3002</p> <p>\u6240\u4ee5\u73b0\u5728\u00a0<code>the_context_object-&gt;transact()</code>\u00a0\u8c03\u7528\u5c31\u8d70\u5230 BBinder \u7684 transact \u53c8\u8d70\u5230 BnServiceManager \u7684 onTransact() \u65b9\u6cd5\uff0c\u56de\u5230\u4e86\u8fd9\u4e2a AIDL \u81ea\u52a8\u751f\u6210\u7684 IServiceManager.cpp \u6587\u4ef6\u91cc\u3002</p> <p>\u515c\u515c\u8f6c\u8f6c\u8fd8\u662f\u5728\u8fd9\u4e2a\u6587\u4ef6\u3002</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</p> <pre><code>::android::status_t BnServiceManager::onTransact(uint32_t _aidl_code, const ::android::Parcel&amp; _aidl_data, ::android::Parcel* _aidl_reply, uint32_t _aidl_flags) {\n  ::android::status_t _aidl_ret_status = ::android::OK;\n  switch (_aidl_code) {\n  case BnServiceManager::TRANSACTION_addService:\n  {\n    ::std::string in_name;\n    ::android::sp&lt;::android::IBinder&gt; in_service;\n    bool in_allowIsolated;\n    int32_t in_dumpPriority;\n    //\u68c0\u67e5 interface\n    if (!(_aidl_data.checkInterface(this))) {\n      _aidl_ret_status = ::android::BAD_TYPE;\n      break;\n    }\n    //\u8bfb name\n    _aidl_ret_status = _aidl_data.readUtf8FromUtf16(&amp;in_name);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    //\u8bfb binder\n    _aidl_ret_status = _aidl_data.readStrongBinder(&amp;in_service);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    //\u8bfb in_allowIsolated\n    _aidl_ret_status = _aidl_data.readBool(&amp;in_allowIsolated);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    //\u8bfb in_dumpPriority\n    _aidl_ret_status = _aidl_data.readInt32(&amp;in_dumpPriority);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    //\u8c03\u7528\u771f\u6b63\u7684 ServiceManager.cpp \u4e2d\u7684\u5b9e\u73b0\n    ::android::binder::Status _aidl_status(addService(in_name, in_service, in_allowIsolated, in_dumpPriority));\n    //\u5982\u679c\u6709\u8fd4\u56de\u5199\u8fd4\u56de\u5230 _aidl_reply\n    _aidl_ret_status = _aidl_status.writeToParcel(_aidl_reply);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    if (!_aidl_status.isOk()) {\n      break;\n    }\n  }\n</code></pre> <p>\u548c Bp \u7aef\u662f\u5bf9\u79f0\u7684\u64cd\u4f5c\uff0c\u4e0b\u4e00\u6b65\u8d70\u5230 ServiceManager.cpp::addService \u65b9\u6cd5</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#44servicemanageraddservice","title":"4.4\u3001ServiceManager::addService","text":"<p>frameworks/native/cmds/servicemanager/ServiceManager.cpp</p> <pre><code>Status ServiceManager::addService(const std::string&amp; name, const sp&lt;IBinder&gt;&amp; binder, bool allowIsolated, int32_t dumpPriority) {\n    auto ctx = mAccess-&gt;getCallingContext();\n\n    // uid \u9274\u6743\n    if (multiuser_get_app_id(ctx.uid) &gt;= AID_APP) {\n        return Status::fromExceptionCode(Status::EX_SECURITY);\n    }\n    // selinux \u9274\u6743\n    if (!mAccess-&gt;canAdd(ctx, name)) {\n        return Status::fromExceptionCode(Status::EX_SECURITY);\n    }\n\n    if (binder == nullptr) {\n        return Status::fromExceptionCode(Status::EX_ILLEGAL_ARGUMENT);\n    }\n    //\u68c0\u67e5 name \u547d\u540d\n    if (!isValidServiceName(name)) {\n        LOG(ERROR) &lt;&lt; \"Invalid service name: \" &lt;&lt; name;\n        return Status::fromExceptionCode(Status::EX_ILLEGAL_ARGUMENT);\n    }\n    //\u5982\u679c vndservicemanager \u5219\u68c0\u67e5 VINTF manifest\n#ifndef VENDORSERVICEMANAGER\n    if (!meetsDeclarationRequirements(binder, name)) {\n        // already logged\n        return Status::fromExceptionCode(Status::EX_ILLEGAL_ARGUMENT);\n    }\n#endif  // !VENDORSERVICEMANAGER\n    //\u548c RPC Binder \u6709\u5173\uff0c\u6b7b\u4ea1\u76d1\u542c\n    // implicitly unlinked when the binder is removed\n    if (binder-&gt;remoteBinder() != nullptr &amp;&amp;\n        binder-&gt;linkToDeath(sp&lt;ServiceManager&gt;::fromExisting(this)) != OK) {\n        LOG(ERROR) &lt;&lt; \"Could not linkToDeath when adding \" &lt;&lt; name;\n        return Status::fromExceptionCode(Status::EX_ILLEGAL_STATE);\n    }\n    //\u65b0\u589e\u4e00\u4e2a\u7ed3\u6784\u4f53\u5230 map \u4e2d\n    // Overwrite the old service if it exists\n    mNameToService[name] = Service {\n        .binder = binder,\n        .allowIsolated = allowIsolated,\n        .dumpPriority = dumpPriority,\n        .debugPid = ctx.debugPid,\n    };\n    //\u67b6\u6784\u4e2d\u63d0\u5230\u7684 waiteForService \u7684\u8de8\u8fdb\u7a0b\n    auto it = mNameToRegistrationCallback.find(name);\n    if (it != mNameToRegistrationCallback.end()) {\n        for (const sp&lt;IServiceCallback&gt;&amp; cb : it-&gt;second) {\n            mNameToService[name].guaranteeClient = true;\n            // permission checked in registerForNotifications\n            cb-&gt;onRegistration(name, binder);\n        }\n    }\n\n    return Status::ok();\n}\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#_3","title":"\u4e94\u3001\u5176\u4ed6\u503c\u5f97\u5173\u6ce8\u7684\u7ec6\u8282","text":"<p>\u524d\u4e24\u8282\u662f\u5168\u5c40\u603b\u89c8\u3001\u7ecf\u5178\u60c5\u666f\u7684\u89c6\u89d2\u770b\u4ee3\u7801\uff0c\u73b0\u5728\u6211\u4eec\u6362\u4e00\u4e2a\u89c6\u89d2\uff0c\u5c55\u793a\u4e00\u4e9b\u8fb9\u8fb9\u89d2\u89d2\u7684\u5185\u5bb9\u4e3a\u4e0a\u9762\u7684\u4e3b\u5e72\u586b\u5145\u7ec6\u8282\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#51servicemanager","title":"5.1\u3001servicemanager \u7684\u80fd\u529b\u53d8\u5316","text":"<p>11\u4e4b\u524d\u4ec5\u67094\u4e2a\u63a5\u53e3\u66b4\u9732\u7ed9\u5e94\u7528</p> <p>frameworks/native/libs/binder/include/binder/IServiceManager.h</p> <pre><code>    enum {\n        GET_SERVICE_TRANSACTION = IBinder::FIRST_CALL_TRANSACTION,\n        CHECK_SERVICE_TRANSACTION,\n        ADD_SERVICE_TRANSACTION,\n        LIST_SERVICES_TRANSACTION,\n    };\n</code></pre> <p>\u800c Android 11 \u589e\u52a0\u5230 9 \u4e2a\uff0cAndroid 12 \u53c8\u589e\u52a0\u5230 13 \u4e2a</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/BnServiceManager.h</p> <pre><code>class BnServiceManager : public ::android::BnInterface&lt;IServiceManager&gt; {\npublic:\n  static constexpr uint32_t TRANSACTION_getService = ::android::IBinder::FIRST_CALL_TRANSACTION + 0;\n  static constexpr uint32_t TRANSACTION_checkService = ::android::IBinder::FIRST_CALL_TRANSACTION + 1;\n  static constexpr uint32_t TRANSACTION_addService = ::android::IBinder::FIRST_CALL_TRANSACTION + 2;\n  static constexpr uint32_t TRANSACTION_listServices = ::android::IBinder::FIRST_CALL_TRANSACTION + 3;\n  static constexpr uint32_t TRANSACTION_registerForNotifications = ::android::IBinder::FIRST_CALL_TRANSACTION + 4;\n  static constexpr uint32_t TRANSACTION_unregisterForNotifications = ::android::IBinder::FIRST_CALL_TRANSACTION + 5;\n  static constexpr uint32_t TRANSACTION_isDeclared = ::android::IBinder::FIRST_CALL_TRANSACTION + 6;\n  static constexpr uint32_t TRANSACTION_getDeclaredInstances = ::android::IBinder::FIRST_CALL_TRANSACTION + 7;\n  static constexpr uint32_t TRANSACTION_updatableViaApex = ::android::IBinder::FIRST_CALL_TRANSACTION + 8;\n  static constexpr uint32_t TRANSACTION_getConnectionInfo = ::android::IBinder::FIRST_CALL_TRANSACTION + 9;\n  static constexpr uint32_t TRANSACTION_registerClientCallback = ::android::IBinder::FIRST_CALL_TRANSACTION + 10;\n  static constexpr uint32_t TRANSACTION_tryUnregisterService = ::android::IBinder::FIRST_CALL_TRANSACTION + 11;\n  static constexpr uint32_t TRANSACTION_getServiceDebugInfo = ::android::IBinder::FIRST_CALL_TRANSACTION + 12;\n</code></pre> <p>\u4ece\u8fd9\u4e9b\u63a5\u53e3\u7684\u53d8\u52a8\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f88\u6e05\u6670\u5730\u628a\u63e1\u4f4f servicemanager \u7684\u524d\u8fdb\u65b9\u5411</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#52do_not_directly_use_me_implement_meta_interface","title":"5.2\u3001DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE","text":"<p>frameworks/native/libs/binder/include/binder/IInterface.h</p> <pre><code>#define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \\\n    static_assert(internal::allowedManualInterface(NAME),               \\\n                  \"b/64223827: Manually written binder interfaces are \" \\\n                  \"considered error prone and frequently have bugs. \"   \\\n                  \"The preferred way to add interfaces is to define \"   \\\n                  \"an .aidl file to auto-generate the interface. If \"   \\\n                  \"an interface must be manually written, add its \"     \\\n                  \"name to the whitelist.\");                            \\\n    DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)    \\\n-----------------------------\nconstexpr const char* const kManualInterfaces[] = {\n  \"android.app.IActivityManager\",\n  \"android.app.IUidObserver\",\n  \"android.drm.IDrm\",\n  \"android.dvr.IVsyncCallback\",\n  \"android.dvr.IVsyncService\",\n  \"android.gfx.tests.ICallback\",\n  \"android.gfx.tests.IIPCTest\",\n  ......\n</code></pre> <p>\u4ee5\u540e\u624b\u5199\u7684 Native \u670d\u52a1\u9700\u8981\u5173\u6ce8\u4e0b\u8fd9\u4e2a\u5b8f\uff0c\u505a\u4e86\u9650\u5236\u3002\u8c37\u6b4c\u5efa\u8bae\u662f\u73b0\u5728\u7684 Native \u670d\u52a1\u90fd\u7528 AIDL\uff0c\u522b\u624b\u5199\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#53string16string8-name","title":"5.3\u3001String16\u3001String8 \u4e0e name","text":"<p>AIDL \u6539\u9020\u4e4b\u524d\uff0c\u90fd\u662f\u4e00\u8def String16 \u4ece\u5ba2\u6237\u7aef\u4f20\u5230\u670d\u52a1\u7aef\uff0c\u800c\u73b0\u5728\u9700\u8981\u7ed5\u4e00\u4e9b\u8def\u4e86\u3002\u8fd8\u662f\u4ee5 addService \u4e3a\u4f8b</p> <pre><code>status_t ServiceManagerShim::addService(const String16&amp; name,){\n    Status status = mTheRealServiceManager-&gt;addService(\n        String8(name).c_str(), );\n\u5728\u8fd9\u91cc\u8f6c\u4e00\u6b21\uff0c16 \u8f6c\u6210 8\n------------------------------------------\n_aidl_ret_status = _aidl_data.writeUtf8AsUtf16(name);\n\u5728 BpServiceManager \u91cc\u53c8\u8f6c\u4e86\u4e00\u6b21\uff0c8 \u8f6c 16\n------------------------------------------\n_aidl_ret_status = _aidl_data.readUtf8FromUtf16(&amp;in_name);\n\u73b0\u5728\u6765\u5230 BnServiceManager \u7ee7\u7eed\u8f6c\uff0c16 \u8f6c 8\n</code></pre> <p>\u8f6c\u6765\u8f6c\u53bb\u5feb\u6655\u4e86\u3002\u603b\u7ed3\u5c31\u662f\uff0cSM \u670d\u52a1\u7aef\u90fd\u662f\u64cd\u4f5c\u7684 utf8\uff0c\u800c libbinder \u5ba2\u6237\u7aef\u90fd\u662f utf16\u3002\u6709\u4fee\u6539\u7684\u8bdd\u9700\u8981\u6ce8\u610f\u4e0b\u7f16\u7801\u95ee\u9898\u3002</p> <p>\u4e5f\u53ef\u80fd\u662f\u7531\u4e8e\u8fd9\u4e2a\u8f6c\u6362\u95ee\u9898\uff0c\u5728\u670d\u52a1\u7aef\u52a0\u4e86\u4e2a\u670d\u52a1\u540d\u68c0\u67e5</p> <pre><code>bool isValidServiceName(const std::string&amp; name) {\n    if (name.size() == 0) return false;\n    if (name.size() &gt; 127) return false;\n\n    for (char c : name) {\n        if (c == '_' || c == '-' || c == '.' || c == '/') continue;\n        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') continue;\n        if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') continue;\n        if (c &gt;= '0' &amp;&amp; c &lt;= '9') continue;\n        return false;\n    }\n\n    return true;\n}\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#54","title":"5.4\u3001\u670d\u52a1\u4fdd\u5b58\u7684\u6570\u636e\u7ed3\u6784","text":"<p>SM \u9700\u8981\u4fdd\u5b58\u670d\u52a1\u53ca\u5176\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c11 \u524d\u7528\u7684\u94fe\u8868 svc_list\uff0c\u6210\u5458\u662f svc_info \u7ed3\u6784\u4f53\uff1b11 \u540e\u7528\u7684 map\uff0c\u6210\u5458\u662f\u7ed3\u6784\u4f53 Service\u3002</p> <p>frameworks/native/cmds/servicemanager/ServiceManager.h</p> <pre><code>    struct Service {\n        sp&lt;IBinder&gt; binder; // not null\n        bool allowIsolated;\n        int32_t dumpPriority;\n        bool hasClients = false; // notifications sent on true -&gt; false.\n        bool guaranteeClient = false; // forces the client check to true\n        pid_t debugPid = 0; // the process in which this service runs\n\n        // the number of clients of the service, including servicemanager itself\n        ssize_t getNodeStrongRefCount();\n    };\n    using ServiceMap = std::map&lt;std::string, Service&gt;;\n    ServiceMap mNameToService;\n</code></pre> <p>\u8fd9\u4e2a Service \u7ed3\u6784\u4f53\u6709\u4e86\u66f4\u591a\u7684\u4fe1\u606f\u548c\u80fd\u529b\uff0cgetNodeStrongRefCount() \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8be5\u670d\u52a1\u6709\u591a\u5c11\u4e2a\u5ba2\u6237\u7aef\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#55listservices","title":"5.5\u3001listServices \u8fd4\u56de\u503c","text":"<p>11 \u4e4b\u524d\u7684\u5b9e\u73b0\u662f\u5ba2\u6237\u7aef\u5faa\u73af checkService\uff0c11 \u4e4b\u540e\u662f\u76f4\u63a5\u8fd4\u56de\u7684\u662f std::vector</p> <ul> <li>\u5ba2\u6237\u7aef</li> </ul> <p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>Vector&lt;String16&gt; ServiceManagerShim::listServices(int dumpsysPriority)\n{\n    std::vector&lt;std::string&gt; ret;\n    if (!mTheRealServiceManager-&gt;listServices(dumpsysPriority, &amp;ret).isOk()) {\n        return {};\n    }\n\n    Vector&lt;String16&gt; res;\n    res.setCapacity(ret.size());\n    for (const std::string&amp; name : ret) {\n        res.push(String16(name.c_str()));\n    }\n    return res;\n}\n</code></pre> <ul> <li>\u670d\u52a1\u7aef</li> </ul> <p>frameworks/native/cmds/servicemanager/ServiceManager.cpp</p> <pre><code>Status ServiceManager::listServices(int32_t dumpPriority, std::vector&lt;std::string&gt;* outList) {\n    size_t toReserve = 0;\n    for (auto const&amp; [name, service] : mNameToService) {\n        (void) name;\n\n        if (service.dumpPriority &amp; dumpPriority) ++toReserve;\n    }\n\n    outList-&gt;reserve(toReserve);\n    for (auto const&amp; [name, service] : mNameToService) {\n        (void) service;\n\n        if (service.dumpPriority &amp; dumpPriority) {\n            outList-&gt;push_back(name);\n        }\n    }\n</code></pre> <p>\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u770b\u5230\u5b57\u7b26\u7f16\u7801\u7684\u95ee\u9898\uff0c\u5ba2\u6237\u7aef\u7528\u7684\u662f utf16\uff0c\u800c\u670d\u52a1\u7aef\u7528\u7684\u662f utf8</p> <ul> <li>\u987a\u4fbf\u63d0\u4e00\u5634 dumpsys \u7684\u753b\u86c7\u6dfb\u8db3\u7684\u4fee\u6539</li> </ul> <p>frameworks/native/cmds/dumpsys/dumpsys.cpp</p> <pre><code>     if (services.empty() || showListOnly) {\n         services = listServices(priorityFlags, asProto);                                                                         \n......\n     if (N &gt; 1) {\n         for (size_t i=0; i&lt;N; i++) {\n             sp&lt;IBinder&gt; service = sm_-&gt;checkService(services[i]);\n</code></pre> <p>\u83b7\u53d6\u5230\u670d\u52a1\u5217\u8868\u540e\u4e3a\u4ec0\u4e48\u518d\u5faa\u73af check \u4e00\u904d\u5462\uff1f\u6211\u611f\u89c9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#56waitforservice-iservicecallbackaidl","title":"5.6\u3001waitForService \u4e0e IServiceCallback.aidl","text":"<p>\u5229\u7528\u4e86\u533f\u540d Binder \u6765\u4f20\u9012\u56de\u8c03\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u770b\u770b\u3002</p> <ul> <li>\u56de\u8c03\u6ce8\u518c</li> </ul> <p>frameworks/native/libs/binder/IServiceManager.cpp</p> <pre><code>sp&lt;IBinder&gt; ServiceManagerShim::waitForService(const String16&amp; name16)\n{\n     class Waiter : public android::os::BnServiceCallback {\n        Status onRegistration(const std::string&amp; /*name*/,\n                              const sp&lt;IBinder&gt;&amp; binder) override {\n......\n     sp&lt;Waiter&gt; waiter = sp&lt;Waiter&gt;::make();\n     if (Status status = mTheRealServiceManager-&gt;registerForNotifications(name, waiter);\n</code></pre> <ul> <li>\u56de\u8c03\u54cd\u5e94</li> </ul> <p>frameworks/native/cmds/servicemanager/ServiceManager.cpp</p> <pre><code>Status ServiceManager::addService(const std::string&amp; name, const sp&lt;IBinder&gt;&amp; binder, bool allowIsolated, int32_t dumpPriority) {\n    auto it = mNameToRegistrationCallback.find(name);\n    if (it != mNameToRegistrationCallback.end()) {\n        for (const sp&lt;IServiceCallback&gt;&amp; cb : it-&gt;second) {\n            mNameToService[name].guaranteeClient = true;\n            // permission checked in registerForNotifications\n            cb-&gt;onRegistration(name, binder);\n        }\n    }\n</code></pre> <ul> <li>AIDL \u53ca\u5176\u751f\u6210\u7684\u4ee3\u7801\u4f4d\u7f6e</li> </ul> <p>frameworks/native/libs/binder/aidl/android/os/IServiceCallback.aidl</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IServiceCallback.cpp</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#57iclientcallbackaidl","title":"5.7\u3001IClientCallback.aidl","text":"<p>IServiceManager.aidl \u4e2d\u5b9a\u4e49\u7684\u63a5\u53e3\uff0c\u90fd\u662f\u5728\u00a0<code>#include &lt;binder/IServiceManager.h&gt;</code>\u00a0\u5417\uff1f\u7b54\u6848\u4e3a\u5426\u3002IClientCallback \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <p>\u60f3\u7528 registerClientCallback \u65b9\u6cd5\u6ce8\u518c\u56de\u8c03\uff0c\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u00a0<code>#include &lt;android/os/IServiceManager.h&gt;</code>\u00a0\u62ff\u5230 BpServiceManager \u5b9e\u4f8b\uff0c\u6765\u901a\u4fe1\u3002</p> <p>\u8fd9\u4e2a\u63a5\u53e3\u6ca1\u6709\u66b4\u9732\u5728 libbinder \u7684 IServiceManager \u4e2d\u3002</p> <p>\u8fd9\u4e2a\u56de\u8c03\u7528\u4e8e\u76d1\u542c\u67d0\u4e2a\u670d\u52a1\u6709 client\uff0c\u548c IServiceCallback.aidl \u4e00\u6837\u662f\u533f\u540d binder \u670d\u52a1\uff0c\u4e00\u4e2a\u4f8b\u5b50 LazyServiceRegistrar.cpp\uff0c\u53ef\u81ea\u884c\u4e86\u89e3\u3002</p> <p>\u4ee3\u7801\u8def\u5f84</p> <p>frameworks/native/libs/binder/aidl/android/os/IClientCallback.aidl</p> <p>frameworks/native/libs/binder/LazyServiceRegistrar.cpp</p> <p>out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IClientCallback.cpp</p> <p>frameworks/native/cmds/servicemanager/ServiceManager.cpp</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#58rpc-binder","title":"5.8\u3001RPC-Binder","text":"<p>https://cs.android.com/android/_/android/platform/frameworks/native/+/5553ac45e0cb23102016858789603d6e12ab456b</p> <pre><code>Minimal-ish change for basic binder RPC.\n\nThis enables binder to work over sockets. The main change to core code\nis in 'Parcel' and 'BpBinder'. The Parcel format is now associated with\nthe binder that it is either for or a reply from (we no longer have\nbinder 'objects' for the kernel). BpBinder is extended to support\ntalking over sockets (ideally, this would be a subclass, but\nIBinder::localBinder/remoteBinder mean there is a lot of code which\npresupposes what type of binder we have).\n\nIn addition, we have a few new objects:\n- RpcServer - set this up to serve a connection\n- RpcConnection - symmetrical object handling dispatch to a known\n    server/client\n- RpcAddress - (this will definitely change) randomly generated\n    addresses - this might include things like host VM context, ip\n    address, or similar in the future. In that case, the address\n    generation should be cryptographically secure.\n- RpcState - this keeps track of known binders, their refcounts, and\n    async transactions, and it understand the binder socket wire\n    protocol\n\nThe connection itself looks like N socket accepts to a server (the\nserver might have M socket accepts back to the client for symmetrical\nconnections, that is connections which need more than nested\ntransactions). The number of these socket connections controls how many\nsynchronous transactions can be made. Wherever possible, the behavior\nhere seeks to mimick the binder driver, and some differences are\ndocumented in the code.\n\nAfter this CL merges, the future work I intend on completing includes:\n- support to work over vsock\n- performance benchmarking\n- optimization of the socket code here (may include delaying refcounts)\n- support to pass 'transitive' binders (pass a binder from one service\n  to a different service, to let it setup a new connection). This task\n  may be excluded from my efforts as a security hedge if I can manage.\n- fuzzer for this wire format\n- support for linkToDeath\n- support for transaction encryption\n- support for promoting from a weak pointer\n- handling SIGPIPE for dead connections\n- and many more! :)\n\nBug: 167966510\nTest: binderRpcTest\n\nChange-Id: I276c6e312f584b57f4e7a14389ea4a1d63cfa2f4\n\nsmoreland@google.com\uff08\u4f5c\u8005\uff09\n\u63d0\u4ea4\u65e5\u671f 3\u670824\u65e5 AM9:53\n</code></pre> <p>\u53ef\u80fd\u662f\u53d7\u4e86\u82f9\u679c\u548c\u9e3f\u8499\u7684\u523a\u6fc0\uff0c\u8c37\u6b4c\u4e5f\u5494\u5494\u5f04\u4e0a\u4e86\u4e07\u7269\u4e92\u8054\u3001\u5206\u5e03\u5f0f\u3002\u8fd9\u4e2a\u63d0\u4ea4\u5927\u610f\u662f\u5c06 Binder \u901a\u4fe1\u62d3\u5c55\u652f\u6301\u8de8\u8bbe\u5907\uff0c\u540e\u9762\u6709\u673a\u4f1a\u518d\u7814\u7a76\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/android12-native-binder-change/#_4","title":"\u516d\u3001\u603b\u7ed3\u548c\u53c2\u8003\u8d44\u6599","text":"<p>SM \u7ecf\u8fc7 Aidl \u548c libbinder \u6539\u9020\u540e\uff0c\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u4fee\u6539\u4f1a\u66f4\u52a0\u89c4\u8303\u548c\u7701\u5fc3</p> <p>\u65b0\u5f15\u5165\u7684\u7279\u6027\u5c55\u793a\u4e86 SM \u529f\u80fd\u66f4\u591a\u7684\u53ef\u80fd\u6027\uff0c\u53ef\u4e3a\u7279\u5b9a\u9700\u6c42\u63d0\u4f9b\u601d\u8def\uff0cNative AIDL \u548c\u533f\u540d Binder \u56de\u8c03\u503c\u5f97\u5b66\u4e60\u3002</p> <p>\u5173\u4e8e AIDL \u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u7167\u5b98\u65b9\u6587\u6863\uff1a</p> <p>AIDL Overview</p> <p>Android 11 \u4e4b\u524d\u7684 Native Binder \u53ef\u4ee5\u53c2\u8003\u8001\u7f57\u7684\u4e66\u6216\u8005\u535a\u5ba2\uff1a</p> <p>Android\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u7b80\u8981\u4ecb\u7ecd\u548c\u5b66\u4e60\u8ba1\u5212</p> <p>\u6d45\u8c08Service Manager\u6210\u4e3aAndroid\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u5b88\u62a4\u8fdb\u7a0b\u4e4b\u8def</p> <p>\u6d45\u8c08Android\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u4e2d\u7684Server\u548cClient\u83b7\u5f97Service Manager\u63a5\u53e3\u4e4b\u8def</p> <p>Android\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u4e2d\u7684Server\u542f\u52a8\u8fc7\u7a0b\u6e90\u4ee3\u7801\u5206\u6790</p> <p>Android\u7cfb\u7edf\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236Binder\u4e2d\u7684Client\u83b7\u5f97Server\u8fdc\u7a0b\u63a5\u53e3\u8fc7\u7a0b\u6e90\u4ee3\u7801\u5206\u6790</p>","tags":["Android","Binder"]},{"location":"android/binder/ashmem/","title":"Ashmem\u7b80\u4ecb\uff08Android IPC\u4f20\u8f93\u5927\u6570\u636e\uff09","text":"<p>Ashmem\u4e3a\u4ec0\u4e48\u4f1a\u8bde\u751f\uff1f\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f\u5728\u804a\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\u6211\u4eec\u5148\u6765\u4e86\u89e3Android\u7684IPC\u90fd\u7528\u90a3\u4e9b\uff0c\u8fd8\u6709\u5c31\u662f\u7f51\u4e0a\u4f20\u5f97\u5f88\u706b\u7684binder\u9650\u52361M\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u5982\u4f55\u89e3\u51b3\u9650\u52361M\u7684\u95ee\u9898\uff1f</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ipc","title":"IPC \u65b9\u5f0f","text":"","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#activity","title":"Activity","text":"<pre><code>Intent callIntent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:021-1234567\" ); \nmContext.startActivity(callIntent);\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#content-provider","title":"Content Provider","text":"<p>Android\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u6216SqlLite\u6570\u636e\u5e93\u6765\u5b58\u50a8\u6570\u636e\u3002 Content Provider\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u6570\u636e\u5171\u4eab\u7684\u65b9\u5f0f\uff08\u8de8\u8fdb\u7a0b\u5171\u4eab\u6570\u636e\uff09\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5229\u7528Content Provider\u5b8c\u6210\u4e0b\u9762\u7684\u5de5\u4f5c\uff1a</p> <ul> <li>\u67e5\u8be2\u6570\u636e</li> <li>\u4fee\u6539\u6570\u636e</li> <li>\u6dfb\u52a0\u6570\u636e</li> <li>\u5220\u9664\u6570\u636e</li> </ul>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#broadcast","title":"Broadcast","text":"<pre><code>Intent intent = new Intent(\"com.android.ACTION_TEST\");\nintent.putExtra(\"value\",\"content\");\nmContext.sendBroadcast(intent);\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#localsocket","title":"LocalSocket","text":"","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_1","title":"\u5ba2\u6237\u7aef","text":"<pre><code>\u5ba2\u6237\u7aefLocalSocket\u4ee3\u7801\n\n//\u521b\u5efa\u5bf9\u8c61\nLocalSocket localSocket = new LocalSocket();\n//\u8fde\u63a5socketServerSocket\nlocalSocket.connect(new LocalSocketAddress(String addrStr));\n\u83b7\u53d6localSocket\u7684\u8f93\u5165\u8f93\u51fa\u6d41\uff1a\noutputStream = localSocket.getOutputStream();\ninputStream = localSocket.getInputStream();\n\u5199\u5165\u6570\u636e\uff1a\noutputStream.write(\"\u6570\u636e\".getBytes());\n\u5faa\u73af\u63a5\u6536\u6570\u636e\uff1a\ntry {    \n    int readed = inputStream.read();\n    int size = 0;\n    byte[] bytes = new byte[0];\n    while (readed != -1) {\n      byte[] copy = new byte[500000]; \n      System.arraycopy(bytes, 0, copy, 0, bytes.length);\n      bytes = copy;\n      bytes[size++] = (byte) readed; \n      //\u4ee5\u6362\u884c\u7b26\u6807\u8bc6\u6210\u7ed3\u675f\n      if ('\\n' == (byte) readed) {\n          String resultStr = new String(bytes, 0, size); \n          break;                                                                             \n    } \n    readed = inputStream.read();\n    }\n} catch (IOException e) {\n    return false;\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_2","title":"\u670d\u52a1\u7aef","text":"<pre><code>\u670d\u52a1\u7aefLocalServerSocket\u4ee3\u7801\n\n//\u521d\u59cb\u5316\ntry {\n    //socketAddress\u9700\u8ddflocalSocket\u5730\u5740\u4e00\u81f4\uff0c\u5426\u5219\u65e0\u6cd5\u8fde\u63a5\u4e0a\n    serverSocket = new LocalServerSocket(socketAddress);\n} catch (IOException e) {\n    LoggerHelper.e(\"Server to establish connection exception:\" + e.toString());\n    e.printStackTrace();\n    return false;\n}\ntry {\n    //\u83b7\u53d6\u63a5\u6536\u7684LocalSocket\n    localSocket = serverSocket.accept();\n    //\u8bbe\u7f6e\u7f13\u51b2\u5927\u5c0f\n    localSocket.setReceiveBufferSize(ConstantConfig.BUFFER_SIZE);\n    localSocket.setSendBufferSize(ConstantConfig.BUFFER_SIZE);\n} catch (IOException e) {\n    e.printStackTrace();\n    LoggerHelper.d(\"Waiting to be linked to a bug,error:\" + e.toString());\n    return false;\n}\n\u83b7\u53d6\u8f93\u5165\u8f93\u51fa\u6d41\u4e00\u81f4\uff1a\n\nif (localSocket != null) {\n    try {\n        inputStream = localSocket.getInputStream();\n        outputStream = localSocket.getOutputStream();\n        /** \u5141\u8bb8\u4e00\u76f4\u63a5\u6536\u6570\u636e\uff0c\u4e00\u76f4\u5230\u8fde\u63a5\u88ab\u65ad\u5f00\uff0c\u5219\u8ba4\u4e3a\u5e94\u7528\u7aef\u9000\u51fa\uff0c\u81ea\u5df1\u4e5f\u9000\u51fa */\n        while (isLock &amp;&amp; receiveData()) ;\n    } catch (IOException e) {\n        LoggerHelper.e(\"Get stream exception:\" + e.toString());        e.printStackTrace();\n        return false;\n    }\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#aidl-service","title":"AIDL Service","text":"<p>aidl\u7684\u57fa\u672c\u7528\u6cd5\u8bf7\u81ea\u884c\u767e\u5ea6</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_3","title":"\u5c0f\u7ed3","text":"<p>\u9664\u4e86scocket\u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u5176\u4ed6\u7684\u901a\u4fe1\u65b9\u5f0f\u90fd\u662f\u57fa\u4e8ebinder\u673a\u5236\uff0c\u6240\u4ee5\u80af\u5b9a\u4e5f\u53d7binder\u7684\u4e00\u4e9b\u9650\u5236\uff0c\u90a3\u4e48binder\u9650\u52361M\u662f\u4ece\u54ea\u91cc\u770b\u51fa\u6765\u7684\u5462?</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#binder","title":"Binder\u9650\u5236","text":"<p>\u6211\u4eec\u5148\u6765\u770b\u770bBinder\u521d\u59cb\u5316\u65f6\u5019\u7684\u4ee3\u7801\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\n#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n\nProcessState::ProcessState(const char *driver)\n    : mDriverName(String8(driver))\n    , mDriverFD(open_driver(driver))\n    , mVMStart(MAP_FAILED)\n    , mThreadCountLock(PTHREAD_MUTEX_INITIALIZER)\n    , mThreadCountDecrement(PTHREAD_COND_INITIALIZER)\n    , mExecutingThreadsCount(0)\n    , mMaxThreads(DEFAULT_MAX_BINDER_THREADS)\n    , mStarvationStartTimeMs(0)\n    , mBinderContextCheckFunc(nullptr)\n    , mBinderContextUserData(nullptr)\n    , mThreadPoolStarted(false)\n    , mThreadPoolSeq(1)\n    , mCallRestriction(CallRestriction::NONE)\n{\n\n    ...\n\n    if (mDriverFD &gt;= 0) {\n        // mmap the binder, providing a chunk of virtual address space to receive transactions.\n        mVMStart = mmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);\n\n        ...\n\n    }\n\n    ...\n\n }\n</code></pre> <p>\u80fd\u770b\u5230\u5e94\u7528\u5728\u521d\u59cb\u5316Binder\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u9650\u5236\u4e86\u5927\u5c0f\u4e3a1M-2\u9875(1\u9875=4k)\u7684\u5927\u5c0f\u4e5f\u5c31\u662f1016k\u5927\u5c0f\uff0c\u6240\u4ee5\u7f51\u4e0a\u8bf4\u7684\u9650\u52361M\u5176\u5b9e\u4e0d\u5bf9\uff0c\u5e94\u8be5\u662f1016K\u3002</p> <p>\u5982\u679c\u53ea\u662f\u4f20\u8f93\u547d\u4ee4\u7684\u8bdd\u8fd8\u53ef\u4ee5\uff0c\u4f46\u662f\u8981\u4f20\u8f93\u56fe\u50cf\u6570\u636e\u8fd9\u4e2a\u5927\u5c0f\u6839\u672c\u4e0d\u591f\u3002\u52a0\u4e0aBinder\u5185\u90e8\u6709\u5bf9\u6bcf\u4e00\u4e2aBinder\u5185\u6838\u7f13\u51b2\u533a\u6709\u81ea\u5df1\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u6ca1\u529e\u6cd5\u6ee1\u8db3\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u4f20\u8f93\u5230SF\u8fdb\u7a0b\u4e2d\u3002\u4e5f\u56e0\u6b64\uff0cAndroid\u9009\u62e9\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\u4f20\u9012\u6570\u636e\uff0c\u4e5f\u5c31\u662fAshmem\u533f\u540d\u5185\u5b58\u3002</p> <p>\u5230\u8fd9\u6765\u5176\u5b9e\u6211\u4eec\u8fd8\u662f\u4e0d\u77e5\u9053Ashmem\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u4e86\u89e3Linux\u7684\u540c\u5b66\u5e94\u8be5\u90fd\u77e5\u9053linux\u5171\u4eab\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0bLinux\u5171\u4eab\u5185\u5b58\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#linux","title":"Linux\u5171\u4eab\u5185\u5b58","text":"<p>\u9996\u5148\u770b\u4e00\u4e0b\u4e24\u4e2a\u5173\u952e\u51fd\u6570\uff0c</p> <ul> <li>int shmget(key_t key, size_t size, int shmflg); \u8be5\u51fd\u6570\u7528\u6765\u521b\u5efa\u5171\u4eab\u5185\u5b58</li> <li>void *shmat(int shm_id, const void *shm_addr, int shmflg); \u8981\u60f3\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\uff0c\u5fc5\u987b\u5c06\u5176\u6620\u5c04\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4 <p>\u5176\u4e2dkey_t\u662f\u5171\u4eab\u5185\u5b58\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u53ef\u4ee5\u8bf4\uff0cLinux\u7684\u5171\u4eab\u5185\u5b58\u5176\u5b9e\u662f**\u6709\u540d**\u5171\u4eab\u5185\u5b58\uff0c\u800c\u540d\u5b57\u5c31\u662fkey\uff0c\u5177\u4f53\u7528\u6cd5\u5982\u4e0b</p> </li> </ul>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_4","title":"\u8bfb\u53d6\u8fdb\u7a0b","text":"<pre><code>int main()  \n{  \n    void *shm = NULL;//\u5206\u914d\u7684\u5171\u4eab\u5185\u5b58\u7684\u539f\u59cb\u9996\u5730\u5740  \n    struct shared_use_st *shared;//\u6307\u5411shm  \n    int shmid;//\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26  \n    //\u521b\u5efa\u5171\u4eab\u5185\u5b58  \n    shmid = shmget((key_t)12345, sizeof(struct shared_use_st), 0666|IPC_CREAT);   \n    //\u5c06\u5171\u4eab\u5185\u5b58\u6620\u5c04\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4  \n    shm = shmat(shmid, 0, 0);\n    //\u8bbe\u7f6e\u5171\u4eab\u5185\u5b58  \n    shared = (struct shared_use_st*)shm;  \n    shared-&gt;written = 0;  \n    //\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\n    while(1) {\n        if(shared-&gt;written != 0) { \n            printf(\"You wrote: %s\", shared-&gt;text);\n             if(strncmp(shared-&gt;text, \"end\", 3) == 0)  \n                break;\n            }}\n    //\u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb  \n    if(shmdt(shm) == -1) { }  \n    //\u5220\u9664\u5171\u4eab\u5185\u5b58  \n    if(shmctl(shmid, IPC_RMID, 0) == -1) {  }  \n    exit(EXIT_SUCCESS);  \n}  \n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_5","title":"\u5199\u8fdb\u7a0b","text":"<pre><code>int main()  \n{  \n    void *shm = NULL;  \n    struct shared_use_st *shared = NULL;  \n    char buffer[BUFSIZ + 1];//\u7528\u4e8e\u4fdd\u5b58\u8f93\u5165\u7684\u6587\u672c  \n    int shmid;  \n    //\u521b\u5efa\u5171\u4eab\u5185\u5b58  \n    shmid = shmget((key_t) 12345, sizeof(struct shared_use_st), 0666|IPC_CREAT);  \n    //\u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4  \n    shm = shmat(shmid, (void*)0, 0);  \n    printf(\"Memory attached at %X\\n\", (int)shm);  \n    //\u8bbe\u7f6e\u5171\u4eab\u5185\u5b58  \n    shared = (struct shared_use_st*)shm;  \n    while(1)//\u5411\u5171\u4eab\u5185\u5b58\u4e2d\u5199\u6570\u636e  \n    {  \n        //\u6570\u636e\u8fd8\u6ca1\u6709\u88ab\u8bfb\u53d6\uff0c\u5219\u7b49\u5f85\u6570\u636e\u88ab\u8bfb\u53d6,\u4e0d\u80fd\u5411\u5171\u4eab\u5185\u5b58\u4e2d\u5199\u5165\u6587\u672c  \n        while(shared-&gt;written == 1)  \n        {  \n            sleep(1);  \n        }  \n        //\u5411\u5171\u4eab\u5185\u5b58\u4e2d\u5199\u5165\u6570\u636e  \n        fgets(buffer, BUFSIZ, stdin);  \n        strncpy(shared-&gt;text, buffer, TEXT_SZ);  \n        shared-&gt;written = 1;  \n        if(strncmp(buffer, \"end\", 3) == 0)  \n            running = 0;  \n    }  \n    //\u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb  \n    if(shmdt(shm) == -1) {    }  \n    sleep(2);  \n    exit(EXIT_SUCCESS);  \n} \n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cLinux\u5171\u4eab\u5185\u5b58\u901a\u4fe1\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u8fdb\u7a0b\u95f4\u4e0d\u9700\u8981\u4f20\u9012\u6570\u636e\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff0c\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0cLinux\u5171\u4eab\u5185\u5b58\u6ca1\u6709\u63d0\u4f9b\u540c\u6b65\u7684\u673a\u5236\uff0c\u5728\u4f7f\u7528\u65f6\uff0c\u8981\u501f\u52a9\u5176\u4ed6\u7684\u624b\u6bb5\u6765\u5904\u7406\u8fdb\u7a0b\u95f4\u540c\u6b65\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_6","title":"\u601d\u8003","text":"<p>\u5728Android\u7cfb\u7edf\u4e2d\uff0cAPP\u7aefView\u89c6\u56fe\u7684\u6570\u636e\u662f\u5982\u4f55\u4f20\u9012SurfaceFlinger\u670d\u52a1\u7684\u5462\uff1fView\u7ed8\u5236\u7684\u6570\u636e\u6700\u7ec8\u662f\u6309\u7167\u4e00\u5e27\u4e00\u5e27\u663e\u793a\u5230\u5c4f\u5e55\u7684\uff0c\u800c\u6bcf\u4e00\u5e27\u90fd\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5728APP\u7aef\u6267\u884cdraw\u7684\u65f6\u5019\uff0c\u6570\u636e\u5f88\u660e\u663e\u662f\u8981\u7ed8\u5236\u5230APP\u7684\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u4f46\u662f\u89c6\u56fe\u7a97\u53e3\u8981\u7ecf\u8fc7SurfaceFlinger\u56fe\u5c42\u6df7\u6392\u624d\u4f1a\u751f\u6210\u6700\u7ec8\u7684\u5e27\uff0c\u800cSurfaceFlinger\u53c8\u8fd0\u884c\u5728\u53e6\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\u8fdb\u7a0b\uff0c\u90a3\u4e48View\u89c6\u56fe\u7684\u6570\u636e\u662f\u5982\u4f55\u5728\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u4f20\u9012\u7684\u5462\uff0c\u666e\u901a\u7684Binder\u901a\u4fe1\u80af\u5b9a\u4e0d\u884c\uff0c\u56e0\u4e3aBinder\u4e0d\u592a\u9002\u5408\u8fd9\u79cd\u6570\u636e\u91cf\u8f83\u5927\u7684\u901a\u4fe1\uff0c\u90a3\u4e48View\u6570\u636e\u7684\u901a\u4fe1\u91c7\u7528\u7684\u662f\u4ec0\u4e48IPC\u624b\u6bb5\u5462\uff1f</p> <p>\u7b54\u6848\u5c31\u662f\u5171\u4eab\u5185\u5b58\uff0c\u66f4\u7cbe\u786e\u7684\u8bf4\u662f\u533f\u540d\u5171\u4eab\u5185\u5b58\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u63d0\u5230\u7684Ashmem\u3002</p> <p>Android\u76f4\u63a5\u5728Linux\u5171\u4eab\u5185\u5b58\u673a\u5236\u4e0a\u505a\u51fa\u6539\u8fdb\uff0c\u8fdb\u800c\u5f62\u6210\u4e86Android\u7684\u533f\u540d\u5171\u4eab\u5185\u5b58\uff08Anonymous Shared Memory-Ashmem\uff09\u3002</p> <p>\u901a\u8fc7Ashmem\uff0cAPP\u8fdb\u7a0b\u540cSurfaceFlinger\u5171\u7528\u4e00\u5757\u5185\u5b58\uff0c\u5982\u6b64\uff0c\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\uff0cAPP\u7aef\u7ed8\u5236\u5b8c\u6bd5\uff0c\u901a\u77e5SurfaceFlinger\u7aef\u5408\u6210\uff0c\u518d\u8f93\u51fa\u5230\u786c\u4ef6\u8fdb\u884c\u663e\u793a\u5373\u53ef\u3002</p> <p> \uff08\u56fe\u7247\u6765\u6e90\u4e8e\u7f51\u7edc\uff09</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_7","title":"\u4f7f\u7528","text":"<p>\u5176\u5b9eAshmem\u4e0d\u4ec5\u4ec5\u53ea\u662f\u5185\u6838\u4e2d\u80fd\u591f\u4f7f\u7528\uff0c\u5176\u5b9e\u5728Java\u5c42Android\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3aMemoryFile\u7684\u7c7b\u63d0\u4f9b\u65b9\u4fbf\u4f7f\u7528\u533f\u540d\u5171\u4eab\u5185\u5b58\uff0c\u672c\u6b21\u5c31\u4ee5MemoryFile\u4e3a\u5207\u53e3\uff0c\u6765\u804a\u804aAshmem\u533f\u540d\u5185\u5b58\u7684\u4f7f\u7528\u3002</p> <pre><code>/**\n * IMemoryAidlInterface.aidl\n */\npackage com.i-rtfsc.ipcbigdata;\nimport android.os.ParcelFileDescriptor;\n\ninterface IMemoryAidlInterface {\n    ParcelFileDescriptor getParcelFileDescriptor();\n}\n\n\n/**\n * MemoryFetchService.java\n */\npublic class MemoryFetchService extends Service {\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return new MemoryFetchStub();\n    }\n    static class MemoryFetchStub extends IMemoryAidlInterface.Stub {\n        @Override\n        public ParcelFileDescriptor getParcelFileDescriptor() throws RemoteException {\n            MemoryFile memoryFile = null;\n            try {\n                memoryFile = new MemoryFile(\"test_memory\", 1024);\n                memoryFile.getOutputStream().write(new byte[]{1, 2, 3, 4, 5});\n                Method method = MemoryFile.class.getDeclaredMethod(\"getFileDescriptor\");\n                FileDescriptor des = (FileDescriptor) method.invoke(memoryFile);\n                return ParcelFileDescriptor.dup(des);\n            } catch (Exception e) {}\n            return null;\n     }}}\n\n     }\n\n/**\n * TestActivity.java\n */\nIntent intent = new Intent(MainActivity.this, MemoryFetchService.class);\nbindService(intent, new ServiceConnection() {\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n\n        byte[] content = new byte[10];\n        IMemoryAidlInterface iMemoryAidlInterface\n                = IMemoryAidlInterface.Stub.asInterface(service);\n        try {\n            ParcelFileDescriptor parcelFileDescriptor = iMemoryAidlInterface.getParcelFileDescriptor();\n            FileDescriptor descriptor = parcelFileDescriptor.getFileDescriptor();\n            FileInputStream fileInputStream = new FileInputStream(descriptor);\n            fileInputStream.read(content);\n        } catch (Exception e) {\n        }}\n\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n\n    }\n}, Service.BIND_AUTO_CREATE);   \n</code></pre> <p>\u5c01\u88c5\u597d\u7684\u6216\u8005\u66f4\u8be6\u7ec6\u7684\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003\uff1ahttps://github.com/CCLCM/AndroidSharedMemoryDemo</p> <p>\u672c\u6587\u7684\u91cd\u5fc3\u5728\u4e8e\u5206\u6790\u539f\u7406\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u65b9\u6cd5\u3002</p> <p>\u80fd\u770b\u5230\u64cd\u4f5c\u548c\u666e\u901a\u7684File\u64cd\u4f5c\u4e00\u6a21\u4e00\u6837\uff0c\u597d\u50cf\u6839\u672c\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002File\u672c\u8eab\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u4e2d\u8f6c\u7ad9\u505a\u4f20\u9012\u4fe1\u606f\u3002\u90a3\u4e48MemoryFile\u6bd4\u8d77\u666e\u901a\u7684File\u4f18\u52bf\u5f3a\u5728\u54ea\u91cc\u5462\uff1f\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5256\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u6765\u6bd4\u8f83\u770b\u770b\u533f\u540d\u5185\u5b58\u548cFile\u76f8\u6bd4\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u548cBinder\u9a71\u52a8\u53c8\u6709\u4ec0\u4e48\u533a\u522b\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memoryfile","title":"MemoryFile","text":"<p>MemoryFile\u662fandroid\u5728\u6700\u5f00\u59cb\u5c31\u5f15\u5165\u7684\u4e00\u5957\u6846\u67b6\uff0c\u5176\u5185\u90e8\u5b9e\u9645\u4e0a\u662f\u5c01\u88c5\u4e86android\u7279\u6709\u7684\u5185\u5b58\u5171\u4eab\u673a\u5236Ashmem\u533f\u540d\u5171\u4eab\u5185\u5b58\uff0c\u7b80\u5355\u6765\u8bf4Ashmem\u5728Android\u5185\u6838\u4e2d\u662f\u88ab\u6ce8\u518c\u6210\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\u8bbe\u5907\uff0cAshmem\u9a71\u52a8\u901a\u8fc7\u5728\u5185\u6838\u7684\u4e00\u4e2a\u81ea\u5b9a\u4e49slab\u7f13\u51b2\u533a\u4e2d\u521d\u59cb\u5316\u4e00\u6bb5\u5185\u5b58\u533a\u57df\uff0c\u7136\u540e\u901a\u8fc7mmap\u628a\u7533\u8bf7\u7684\u5185\u5b58\u6620\u5c04\u5230\u7528\u6237\u7684\u8fdb\u7a0b\u7a7a\u95f4\u4e2d\uff08\u901a\u8fc7tmpfs\uff09\uff0c\u5c31\u53ef\u4ee5\u5728\u7528\u6237\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u91cc\u7533\u8bf7\u7684\u5185\u5b58\u4e86\uff0c\u53e6\u5916Ashmem\u7684\u4e00\u4e2a\u7279\u6027\u5c31\u662f\u53ef\u4ee5\u5728\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u7684\u65f6\u5019\uff0c\u56de\u6536\u6389\u88ab\u6807\u8bb0\u4e3a\"unpin\"\u7684\u5185\u5b58(\u53ef\u81ea\u884c\u67e5\u770b\u7f51\u4e0a\u8d44\u6599)\uff0cMemoryFile\u4e5f\u53ef\u4ee5\u901a\u8fc7Binder\u8de8\u8fdb\u7a0b\u8c03\u7528\u6765\u8ba9\u4e24\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u3002\u7531\u4e8e\u6574\u4e2a\u7533\u8bf7\u5185\u5b58\u7684\u8fc7\u7a0b\u5e76\u4e0d\u518dJava\u5c42\u4e0a\uff0c\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u51fa\u4f7f\u7528MemoryFile\u7533\u8bf7\u7684\u5185\u5b58\u5b9e\u9645\u4e0a\u662f\u5e76\u4e0d\u4f1a\u5360\u7528Java\u5806\u5185\u5b58\u7684\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memoryfile_1","title":"MemoryFile\u521b\u5efa","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\n/**\n * Allocates a new ashmem region. The region is initially not purgable.\n *\n * @param name optional name for the file (can be null).\n * @param length of the memory file in bytes, must be positive.\n * @throws IOException if the memory file could not be created.\n */\npublic MemoryFile(String name, int length) throws IOException {\n    try {\n        mSharedMemory = SharedMemory.create(name, length);\n        mMapping = mSharedMemory.mapReadWrite();\n    } catch (ErrnoException ex) {\n        ex.rethrowAsIOException();\n    }\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#sharedmemorycreate","title":"SharedMemory.create","text":"<p><pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java\n\npublic static @NonNull SharedMemory create(@Nullable String name, int size)\n        throws ErrnoException {\n    ...\n    return new SharedMemory(nCreate(name, size));\n}\n</code></pre> \u80fd\u770b\u5230\u5b9e\u9645\u4e0aMemoryFile\u5185\u90e8\u6709\u4e00\u4e2a\u6838\u5fc3\u7684\u7c7bSharedMemory\u4f5c\u4e3a\u6838\u5fc3\u64cd\u4f5c\u7c7b\u3002\u6211\u4eec\u53bb\u770b\u770bSharedMemory\u521b\u5efa\u4e86\u4ec0\u4e48\u3002 <pre><code>private SharedMemory(FileDescriptor fd) {\n    ...\n    mFileDescriptor = fd;\n    mSize = nGetSize(mFileDescriptor);\n    ...\n    mMemoryRegistration = new MemoryRegistration(mSize);\n    mCleaner = Cleaner.create(mFileDescriptor,\n            new Closer(mFileDescriptor, mMemoryRegistration));\n}\n</code></pre></p> <p>SharedMemory\u6784\u9020\u51fd\u6570\u505a\u4e86\u4ee5\u4e0b\u8fd9\u4e48\u51e0\u4ef6\u4e8b\uff1a</p> <ul> <li>\u901a\u8fc7nCreate\u5728native\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u4e14\u5173\u8054\u5230\u5230SharedMemory</li> <li>\u901a\u8fc7nGetSize\u83b7\u53d6\u5f53\u524d\u5171\u4eab\u5185\u5b58\u5927\u5c0f</li> <li>\u901a\u8fc7MemoryRegistration\u628a\u5f53\u524d\u5927\u5c0f\u6ce8\u518c\u5230Java \u865a\u62df\u673a\u4e2d\u7684native\u5806\u6808\u5927\u5c0f\u4e2d</li> <li>\u521d\u59cb\u5316Cleaner\u7b49\u5230\u5408\u9002\u7684\u65f6\u5019\u901a\u8fc7gc\u8054\u52a8Cleaner\u9500\u6bc1native\u4e0b\u7684\u5bf9\u8c61\u3002</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java#354\n\n/**\n * Helper class that ensures that the native allocation pressure against the VM heap stays\n * active until the FD is closed as well as all mappings from that FD are closed.\n */\nprivate static final class MemoryRegistration {\n    private int mSize;\n    private int mReferenceCount;\n\n    private MemoryRegistration(int size) {\n        mSize = size;\n        mReferenceCount = 1;\n        VMRuntime.getRuntime().registerNativeAllocation(mSize);\n    }\n\n    public synchronized MemoryRegistration acquire() {\n        mReferenceCount++;\n        return this;\n    }\n\n    public synchronized void release() {\n        mReferenceCount--;\n        if (mReferenceCount == 0) {\n            VMRuntime.getRuntime().registerNativeFree(mSize);\n        }\n    }\n}\n</code></pre> <p>MemoryRegistration \u672c\u8d28\u4e0a\u5c31\u662f\u6ce8\u518c\u4e86Java\u865a\u62df\u673a\u4e2dnative\u5806\u7684\u5927\u5c0f\uff0c\u6bcf\u4e00\u6b21\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u4e00\u6b21\u8ba1\u6570\uff0c\u53ea\u6709\u51cf\u52300\u624d\u9500\u6bc1\uff0c\u6bd5\u7adf\u8fd9\u662f\u5171\u4eab\u5185\u5b58\uff0c\u4e0d\u5e94\u8be5\u5b8c\u5168\u7531Java\u865a\u62df\u673a\u7684GC\u673a\u5236\u51b3\u5b9a\u3002 \u8fd8\u8bb0\u5f97\u524d\u9762\u6211\u4eec\u63d0\u5230SharedMemory\u9996\u5148\u901a\u8fc7nCreate\u5728native\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u6765\u5206\u6790native\u4ee3\u7801\u90fd\u5e72\u4e9b\u4ec0\u4e48\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ncreatename-size","title":"nCreate(name, size)","text":"<p><pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java#377\n\nprivate static native FileDescriptor nCreate(String name, int size) throws ErrnoException;\n</code></pre> nCreate\u5728native\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/android_os_SharedMemory.cpp#53\n\njobject SharedMemory_nCreate(JNIEnv* env, jobject, jstring jname, jint size) {\n\n    // Name is optional so we can't use ScopedUtfChars for this as it throws NPE on null\n    const char* name = jname ? env-&gt;GetStringUTFChars(jname, nullptr) : nullptr;\n\n    int fd = ashmem_create_region(name, size);\n\n    // Capture the error, if there is one, before calling ReleaseStringUTFChars\n    int err = fd &lt; 0 ? errno : 0;\n\n    if (name) {\n        env-&gt;ReleaseStringUTFChars(jname, name);\n    }\n\n    if (fd &lt; 0) {\n        throwErrnoException(env, \"SharedMemory_create\", err);\n        return nullptr;\n    }\n\n    return jniCreateFileDescriptor(env, fd);\n}\n</code></pre></p> <p>\u901a\u8fc7ashmem_create_region\uff0c\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u7684\u533a\u57df\u3002\u8fd8\u8bb0\u5f97Linux\u4e2d\u90a3\u53e5\u8bdd\uff0c\u4e00\u5207\u7686\u4e3a\u6587\u4ef6\uff0c\u5b9e\u9645\u4e0a\u533f\u540d\u5171\u4eab\u5185\u5b58\u521b\u5efa\u51fa\u6765\u4e5f\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u662f\u5728tmpfs\u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf\u624d\u53eb\u505a\u533f\u540d\u7684\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem_create_region","title":"ashmem_create_region","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/system/core/libcutils/ashmem-dev.cpp#357\n\nint ashmem_create_region(const char *name, size_t size)\n{\n    int ret, save_errno;\n\n    if (has_memfd_support()) {//\u5c5e\u6027sys.use_memfd\u662f\u5426\u4e3atrue\n        return memfd_create_region(name ? name : \"none\", size);\n    }\n\n    int fd = __ashmem_open();\n    if (fd &lt; 0) {\n        return fd;\n    }\n\n    if (name) {\n        char buf[ASHMEM_NAME_LEN] = {0};\n\n        strlcpy(buf, name, sizeof(buf));\n        ret = TEMP_FAILURE_RETRY(ioctl(fd, ASHMEM_SET_NAME, buf));\n        ...\n    }\n\n    ret = TEMP_FAILURE_RETRY(ioctl(fd, ASHMEM_SET_SIZE, size));\n    ...\n    return fd;\n    ...\n}\n</code></pre> <p>\u521b\u5efa\u533f\u540d\u5171\u4eab\u5185\u5b58\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4:</p> <ul> <li>__ashmem_open \u521b\u5efa\u533f\u540d\u5171\u4eab\u5185\u5b58</li> <li>\u901a\u8fc7ioctl \u7ed9\u533f\u540d\u5171\u4eab\u5185\u5b58\u547d\u540d\uff0c\u53ea\u6709\u547d\u540d\u4e86\u624d\u80fd\u901a\u8fc7\u547d\u540d\u627e\u5230\u5bf9\u5e94\u7684\u533f\u540d\u5171\u4eab\u5185\u5b58</li> <li>ioctl\u901a\u8fc7ASHMEM_SET_SIZE\u547d\u4ee4\u8bbe\u7f6e\u533f\u540d\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f</li> </ul>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#__ashmem_open","title":"__ashmem_open","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/system/core/libcutils/ashmem-dev.cpp\n\nstatic int __ashmem_open()\n{\n    int fd;\n\n    pthread_mutex_lock(&amp;__ashmem_lock);\n    fd = __ashmem_open_locked();\n    pthread_mutex_unlock(&amp;__ashmem_lock);\n\n    return fd;\n}\n\n/* logistics of getting file descriptor for ashmem */\nstatic int __ashmem_open_locked()\n{\n    static const std::string ashmem_device_path = get_ashmem_device_path();\n\n    if (ashmem_device_path.empty()) {\n        return -1;\n    }\n\n    int fd = TEMP_FAILURE_RETRY(open(ashmem_device_path.c_str(), O_RDWR | O_CLOEXEC));\n\n    // fallback for APEX w/ use_vendor on Q, which would have still used /dev/ashmem\n    if (fd &lt; 0) {\n        fd = TEMP_FAILURE_RETRY(open(\"/dev/ashmem\", O_RDWR | O_CLOEXEC));\n    }\n\n    if (fd &lt; 0) {\n        return fd;\n    }\n\n    struct stat st;\n    int ret = TEMP_FAILURE_RETRY(fstat(fd, &amp;st));\n    if (ret &lt; 0) {\n        int save_errno = errno;\n        close(fd);\n        errno = save_errno;\n        return ret;\n    }\n    if (!S_ISCHR(st.st_mode) || !st.st_rdev) {\n        close(fd);\n        errno = ENOTTY;\n        return -1;\n    }\n\n    __ashmem_rdev = st.st_rdev;\n    return fd;\n}\n</code></pre> <p>\u7ec8\u4e8e\u770b\u5230\u4e86\uff0c\u7c7b\u4f3c\u4e8eBinder\u9a71\u52a8\u7684\u6253\u5f00\u65b9\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7/dev/ashmem\u7684\u65b9\u5f0f\u8bbf\u95eeashmem\u9a71\u52a8\u7684file_operation\u7684open\u65b9\u6cd5\uff0c\u6700\u540e\u83b7\u5f97\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u3002 \u9a71\u52a8\u76f8\u5173\u7684\u5185\u5bb9\u6211\u4eec\u653e\u5230\u6700\u540e\u4e00\u8282\u6765\u5206\u6790\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#sharedmemorymapreadwrite","title":"SharedMemory.mapReadWrite","text":"<p>ShareMemory\u5f53\u521b\u5efa\u597dashmem\u533f\u540d\u5171\u4eab\u5185\u5b58\u4e4b\u540e\uff0c\u5c06\u4f1a\u8c03\u7528mapReadWrite\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java\n\npublic @NonNull ByteBuffer mapReadWrite() throws ErrnoException {\n    return map(OsConstants.PROT_READ | OsConstants.PROT_WRITE, 0, mSize);\n}\n\n public @NonNull ByteBuffer map(int prot, int offset, int length) throws ErrnoException {\n    checkOpen();\n    validateProt(prot);\n    ...\n    long address = Os.mmap(0, length, prot, OsConstants.MAP_SHARED, mFileDescriptor, offset);\n    boolean readOnly = (prot &amp; OsConstants.PROT_WRITE) == 0;\n    Runnable unmapper = new Unmapper(address, length, mMemoryRegistration.acquire());\n    return new DirectByteBuffer(length, address, mFileDescriptor, unmapper, readOnly);\n}\n</code></pre> <ul> <li>map\u8c03\u7528 Os.mmap\u3002\u5176\u5b9e\u8fd9\u4e2a\u65b9\u6cd5\u7684\u672c\u8d28\u5c31\u662f\u8c03\u7528\u7cfb\u7edf\u8c03\u7528mmap\u3002\u8fd9\u91cc\u9762\u7684\u610f\u601d\u5c31\u662f\u8c03\u7528Ashmem\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26mmap\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0b\u5348\u5728\u8bb2\u9a71\u52a8\u7684\u65f6\u5019\u63d0\u5230\u7684ashmem_mmap\u3002\u901a\u8fc7\u8fd9\u79cd\u5e38\u89c4\u7684mmap\uff0c\u8ba9\u7528\u6237\u6001\u7684\u865a\u62df\u5185\u5b58\u76f4\u63a5\u548c\u7269\u7406\u5185\u5b58\u6620\u5c04\u8d77\u6765\uff0c\u5c31\u80fd\u901a\u8fc70\u6b21\u62f7\u8d1d\u7684\u65b9\u5f0f\u6620\u5c04\u8d77\u6765\u3002</li> <li>\u76f4\u63a5\u6620\u5c04\u4e00\u6bb5\u903b\u8f91\u4e0a\u7684\u865a\u62df\u5185\u5b58\u548c\u6587\u4ef6file\u5173\u8054\u8d77\u6765\u3002\u5f53\u7cfb\u7edf\u6b63\u5f0f\u8bbf\u95ee\u8fd9\u4e00\u6bb5\u865a\u62df\u5185\u5b58\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5c31\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad(\u6216\u8005\u5c1d\u8bd5\u7684\u4ece\u78c1\u76d8\u6267\u884c\u7269\u7406\u9875\u7684\u6362\u5165\u6362\u51fa)\uff0c\u6b64\u65f6\u5c31\u4f1a\u628a\u8fd9\u4e00\u6bb5\u903b\u8f91\u7ed1\u5b9a\u7684\u865a\u62df\u5185\u5b58\u548cfile\u6b63\u5f0f\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u3002</li> </ul>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#osmmap","title":"Os.mmap","text":"<p>\u8fd9\u4e2aOs.mmap\u5c31\u6bd4\u8f83\u6709\u610f\u601d\u4e86\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u6ca1\u600e\u4e48\u63a5\u89e6\u8fc7Android\u6e90\u7801\u7684\u540c\u5b66\u770b\u5230\u8fd9\u4e2a\uff0c\u5c31\u5f88\u96be\u627e\u5230\u539f\u51fd\u6570\u5728\u54ea\u4e2a\u5730\u65b9\u3002\u90a3\u4e48\u8fd9\u4e00\u5c0f\u8282\u6211\u4eec\u5c31\u7b80\u5355\u804a\u4e00\u804a\u770b\u5230\u4e00\u4e2a\u964c\u751f\u7684\u65b9\u6cd5\uff0c\u5982\u4f55\u627e\u5230\u5176\u539f\u51fd\u6570\u7684\u3002</p> <ul> <li>\u627e\u5230\u8fd9\u4e2a\u7c7b\u7684\u4f4d\u7f6e</li> </ul> <p></p> <ul> <li> <p>\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053\u662f\u5728\u54ea\u91cc\uff0c\u6240\u4ee5\u9009\u62e9\u4e86\u6240\u6709\u6587\u4ef6\u5939\u90fd\u641c\u7d22\u3002\u4f46\u662f\u719f\u6089Android\u6e90\u7801\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u57fa\u672c\u4e0a\u5e38\u7528\u5230\u7684java\u4ee3\u7801\u90fd\u662f\u5728framework\u3001system\u3001libcore\u7b49\u76ee\u5f55\u4e0b\u3002</p> </li> <li> <p>File Path\u8f93\u5165\uff1aOs.java\u3002\u641c\u7d22\u51fa\u6765\u6709\u975e\u5e38\u591a\u5e76\u4e14\u662f\u4e00\u4e9b\u201c\u4e71\u4e03\u516b\u7cdf\u201d\u7684\u7c7b\u3002\u90a3\u6211\u4eec\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u65e2\u7136\u662fFile Path\u90a3\u6211\u4eec\u628a\u5305\u540d\u4e5f\u52a0\u4e0a\u597d\u4e86\u3002\u5982android/system/Os.java\u3002\u597d\u7684\uff0c\u73b0\u5728\u641c\u7d22\u7ed3\u679c\u53ea\u6709\u4e24\u4e2a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u679c\u663e\u7136\u5c31\u662f/libcore/luni/src/main/java/android/system/Os.java\u3002\u8fd9\u4e2a\u4e5f\u8ddf\u6211\u4eec\u4e4b\u524d\u731c\u6d4b\u7684\u76ee\u5f55\u76f8\u7b26\u5408\u3002</p> </li> <li> <p>\u627e\u5230\u7c7b\u91cc\u5b9e\u73b0\u7684\u65b9\u6cd5 <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/android/system/Os.java#392\n\n/**\n  * See &lt;a href=\"http://man7.org/linux/man-pages/man2/mmap.2.html\"&gt;mmap(2)&lt;/a&gt;.\n  */\npublic static long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException { return Libcore.os.mmap(address, byteCount, prot, flags, fd, offset); }\n</code></pre></p> </li> </ul> <p>\u597d\u5bb6\u4f19\uff0c\u8fd9\u91cc\u53c8\u8c03 Libcore.os.mmap\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u4e0d\u505c\u7684\u91cd\u590d\u4e0a\u9762\u4e24\u4e2a\u6b65\u9aa4\u3002</p> <ul> <li>Libcore</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/libcore/io/Libcore.java\n\npublic static final Os rawOs = new Linux();\n\npublic static volatile Os os = new BlockGuardOs(rawOs);\n</code></pre> <ul> <li>BlockGuardOs</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/libcore/io/BlockGuardOs.java#49\n\npublic class BlockGuardOs extends ForwardingOs {\n    @UnsupportedAppUsage\n    public BlockGuardOs(Os os) {\n        super(os);\n    }\n}\n</code></pre> <ul> <li>ForwardingOs</li> </ul> <pre><code>public class ForwardingOs implements Os {\n    @UnsupportedAppUsage\n    private final Os os;\n\n    @UnsupportedAppUsage\n    @libcore.api.CorePlatformApi\n    protected ForwardingOs(Os os) {\n        this.os = Objects.requireNonNull(os);\n    }\n\n    public long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException { return os.mmap(address, byteCount, prot, flags, fd, offset); }\n}\n</code></pre> <ul> <li>Os</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/libcore/io/Os.java#132\n\n@UnsupportedAppUsage\npublic long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException;\n</code></pre> <p>\u770b\u5230\u8fd9\u53d1\u73b0\u6211\u4eec\u8d70\u8fdc\u4e86\uff0c\u5176\u5b9e\u771f\u6b63\u8c03\u7528\u7684\u662fLibcore\u4e2d\u7684Linux\u3002</p> <ul> <li>Linux</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/libcore/io/Linux.java#129\n\npublic native long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException;\n</code></pre> <p>\u597d\uff0c\u53d1\u73b0\u8c03\u7528native\u3002\u4e0d\u8981\u614c\uff0c\u5176\u5b9e\u5199\u8fc7JNI\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u5168\u5c40\u641c\u7d22\u4e00\u4e0b\u770bJNINativeMethod\u91ccjava\u7684mmap\u65b9\u6cd5\u5bf9\u5e94cpp\u7684\u54ea\u4e2a\u65b9\u6cd5\u5c31\u597d\u4e86\u3002</p> <p>\u5f53\u7136\u5982\u679c\u73b0\u5728\u76f4\u63a5\u5728\u6e90\u7801\u4e0b\u8fd9\u4e48\u641c\u7d22\uff0c\u51fa\u6765\u7684\u7ed3\u679c\u53ef\u60f3\u800c\u77e5\uff0c\u6211\u4eec\u6362\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u5f0f\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#native","title":"\u67e5\u627enative\u65b9\u6cd5","text":"<p>\u53c2\u8003gityuan\u7684Android JNI\u539f\u7406\u5206\u6790</p> <ul> <li>\u627e\u5230\u6587\u4ef6</li> </ul> <p>Linux.java\u7684\u5305\u662flibcore.io\uff0c\u90a3\u4e48\u6211\u4eec\u5199\u6210libcore_io_Linux.c\u6216\u8005libcore_io_Linux.cpp\u5728\u641c\u7d22\uff0c\u53d1\u73b0\u662f\u53ef\u4ee5\u641c\u5230libcore_io_Linux.cpp\u7684\u3002\u5e76\u4e14\u4e5f\u662flibcore\u76ee\u5f55\u4e0b\uff0c\u90a3\u770b\u5230\u662f\u5b83\u6ca1\u9519\u4e86\u3002</p> <ul> <li>\u627e\u5230\u65b9\u6cd5\u540d</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/native/libcore_io_Linux.cpp\n\nstatic JNINativeMethod gMethods[] = {\n    NATIVE_METHOD(Linux, mmap, \"(JJIILjava/io/FileDescriptor;J)J\"),\n}\n\njniRegisterNativeMethods(env, \"libcore/io/Linux\", gMethods, NELEM(gMethods));\n</code></pre> <p>\u770b\u5230\u4e86</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/native/libcore_io_Linux.cpp\n\nstatic jlong Linux_mmap(JNIEnv* env, jobject, jlong address, jlong byteCount, jint prot, jint flags, jobject javaFd, jlong offset) {\n    int fd = jniGetFDFromFileDescriptor(env, javaFd);\n    void* suggestedPtr = reinterpret_cast&lt;void*&gt;(static_cast&lt;uintptr_t&gt;(address));\n    void* ptr = mmap64(suggestedPtr, byteCount, prot, flags, fd, offset);\n    if (ptr == MAP_FAILED) {\n        throwErrnoException(env, \"mmap\");\n    }\n    return static_cast&lt;jlong&gt;(reinterpret_cast&lt;uintptr_t&gt;(ptr));\n}\n</code></pre> <p>\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u660e\u786eOs.mmap\u6700\u7ec8\u5c31\u662f\u8c03\u7528\u7cfb\u7edf\u8c03\u7528mmap\u3002 \u90a3\u4e48\u6211\u4eec\u73b0\u5728\u4e5f\u77e5\u9053\u4e86\u5982\u4f55\u901a\u8fc7OpenGrok\u641c\u7d22\u6211\u4eec\u4e0d\u719f\u6089\u7684java\u7c7b\u3001java\u51fd\u6570\u3001native\u65b9\u6cd5\u7b49\u7b49\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#unmapper","title":"Unmapper","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java\n\nprivate static final class Unmapper implements Runnable {\n    private long mAddress;\n    private int mSize;\n    private MemoryRegistration mMemoryReference;\n\n    private Unmapper(long address, int size, MemoryRegistration memoryReference) {\n        mAddress = address;\n        mSize = size;\n        mMemoryReference = memoryReference;\n    }\n\n    @Override\n    public void run() {\n        try {\n            Os.munmap(mAddress, mSize);\n        } catch (ErrnoException e) { /* swallow exception */ }\n        mMemoryReference.release();\n        mMemoryReference = null;\n    }\n}\n</code></pre> <p>\u5728DirectByteBuffer\u8bbe\u7f6e\u89e3\u5f00\u6620\u5c04\u7684\u56de\u8c03Unmapper\uff0c\u5982\u679c\u901a\u8fc7mMemoryRegistration\u5bdf\u89c9\u5230\u5f15\u7528\u8ba1\u6570\u4e3a0\uff0c\u5c31\u4f1a\u8c03\u7528munmap\u89e3\u6620\u5c04\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u63a8\u6572\u51fa\uff0cMemoryFile\u5c06\u4f1a\u4ee5mapReadWrite\u4ea7\u751f\u51fa\u6765\u7684mMapping\u4e3a\u57fa\u51c6\uff0c\u4e0d\u65ad\u7684\u4ece\u8fd9\u4e00\u6bb5\u865a\u62df\u5185\u5b58\u8bfb\u5199\u3002\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u6765\u770b\u770bMemoryFile\u7684\u8bfb\u5199\u65b9\u6cd5\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memoryfile_2","title":"MemoryFile\u5199\u6570\u636e","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\nprivate class MemoryOutputStream extends OutputStream {\n\n    private int mOffset = 0;\n    private byte[] mSingleByte;\n\n    @Override\n    public void write(byte buffer[], int offset, int count) throws IOException {\n        writeBytes(buffer, offset, mOffset, count);\n        mOffset += count;\n    }\n\n    @Override\n    public void write(int oneByte) throws IOException {\n        if (mSingleByte == null) {\n            mSingleByte = new byte[1];\n        }\n        mSingleByte[0] = (byte)oneByte;\n        write(mSingleByte, 0, 1);\n    }\n}\n</code></pre> <p>\u5199\u5165\u64cd\u4f5c\u80fd\u770b\u5230\u5c31\u662f\u83b7\u53d6MemoryFile\u7684OutputStream\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u3002\u80fd\u770b\u5230\u5728write\u65b9\u6cd5\u4e2d\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u8c03\u7528writeBytes\u4f5c\u4e3a\u6838\u5fc3\u5199\u5165\u65b9\u6cd5\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#writebytes","title":"writeBytes","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\npublic void writeBytes(byte[] buffer, int srcOffset, int destOffset, int count)\n            throws IOException {\n    beginAccess();\n    try {\n        mMapping.position(destOffset);\n        mMapping.put(buffer, srcOffset, count);\n    } finally {\n        endAccess();\n    }\n}\n\nprivate void beginAccess() throws IOException {\n    checkActive();\n    if (mAllowPurging) {\n        if (native_pin(mSharedMemory.getFileDescriptor(), true)) {\n            throw new IOException(\"MemoryFile has been purged\");\n        }\n    }\n}\n</code></pre> <ul> <li>native_pin</li> </ul> <p>\u8c03\u7528native_pin\u8fdb\u884c\u9501\u5b9a\u8fd9\u4e00\u5757\u5927\u5c0f\u7684\u865a\u62df\u5185\u5b58\uff0c\u907f\u514d\u88ab\u7cfb\u7edf\u56de\u6536\u3002</p> <ul> <li>mMapping.position</li> </ul> <p>\u8bb0\u5f55\u5199\u5b8c\u540e\u7684\u4f4d\u7f6e\u3002</p> <ul> <li>mMapping.put</li> </ul> <p>\u628abuffer\u6570\u636e\u5199\u5165\u5230mMapping\u4e2d\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#directbytebufferput","title":"DirectByteBuffer.put","text":"<p>\u8fd9\u91cc\u7a0d\u5fae\u4e0d\u6ce8\u610f\u5c31\u4f1a\u51fa\u9519\uff0c\u4ece\u4ee3\u7801\u91cc\u770b\u5230\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\nprivate ByteBuffer mMapping;\n</code></pre> <p>\u4f46\u662f\u5927\u5bb6\u8fd8\u8bb0\u5f97\u8d4b\u503c\u7684\u5730\u65b9\u5417\uff0c\u4e5f\u5c31\u662f\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\nmMapping = mSharedMemory.mapReadWrite();\n</code></pre> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java#map\n\npublic @NonNull ByteBuffer mapReadWrite() throws ErrnoException {\n    return map(OsConstants.PROT_READ | OsConstants.PROT_WRITE, 0, mSize);\n}\n\npublic @NonNull ByteBuffer map(int prot, int offset, int length) throws ErrnoException {\n    ...\n    return new DirectByteBuffer(length, address, mFileDescriptor, unmapper, readOnly);\n}\n</code></pre> <p>\u597d\u5bb6\u4f19\uff0c\u770b\u5230\u4e86\u5427\uff0c\u6700\u7ec8\u662fDirectByteBuffer\u3002 \u6240\u4ee5\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528\u6211\u4eec\u5e38\u89c1\u7684write\u51fd\u6570\u800c\u662f\u6539\u7528DirectByteBuffer.put\u5462\uff0c\u8fd9\u5176\u4e2d\u6709\u4ec0\u4e48\u6df1\u610f\u5417\uff1f</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/ojluni/src/main/java/java/nio/DirectByteBuffer.java#285\n\npublic ByteBuffer put(byte[] src, int srcOffset, int length) {\n    if (!memoryRef.isAccessible) {\n        throw new IllegalStateException(\"buffer is inaccessible\");\n    }\n    if (isReadOnly) {\n        throw new ReadOnlyBufferException();\n    }\n    checkBounds(srcOffset, length, src.length);\n    int pos = position();\n    int lim = limit();\n    assert (pos &lt;= lim);\n    int rem = (pos &lt;= lim ? lim - pos : 0);\n    if (length &gt; rem)\n        throw new BufferOverflowException();\n    Memory.pokeByteArray(ix(pos),\n            src, srcOffset, length);\n    position = pos + length;\n    return this;\n}\n</code></pre> <ul> <li>\u6839\u636e\u8bbe\u7f6e\u8fdb\u6765\u7684position\u8bbe\u5b9a\u5df2\u7ecf\u5199\u5165\u4e86\u591a\u5c11\u6570\u636e\uff0c\u4ece\u54ea\u91cc\u5f00\u59cb\u5199\u5165\u3002\u63a5\u7740\u4f1a\u901a\u8fc7\u4f20\u8fdb\u6765\u7684\u6570\u636e\u957f\u5ea6\u4ee5\u53ca\u8981\u5199\u5165\u7684\u504f\u79fb\u91cf\u6765\u786e\u5b9a\u8981\u5199\u5165\u54ea\u4e00\u5757\u5185\u5b58\u3002</li> <li>\u8c03\u7528Memory.pokeByteArray\u65b9\u6cd5\uff0c\u628a\u5185\u5bb9\u5199\u5230\u865a\u62df\u5730\u5740\u504f\u79fb\u91cf\u7684\u8d77\u70b9\u5230\u6570\u636e\u957f\u5ea6\u7ed3\u675f\u4e2d\uff0c\u4e5f\u5c31\u662f\u5199\u5165\u5230\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7269\u7406\u9875\u4e2d\u3002</li> </ul> <p>\u90a3\u4e48\u73b0\u5728\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u4e0d\u7528write\u800c\u662f\u7528DirectByteBuffer.put\u4e86\uff0c\u56e0\u4e3ammap\u7684\u6838\u5fc3\u539f\u7406\u5c31\u662f\u628a\u7269\u7406\u9875\u548c\u865a\u62df\u5185\u5b58\u9875\u6620\u5c04\u8d77\u6765\u3002 \u6211\u4eec\u63a5\u7740\u770bMemory.pokeByteArray\uff0c\u770b\u770b\u662f\u4e0d\u662f\u6211\u4eec\u731c\u60f3\u7684\u90a3\u6837\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memorypokebytearray","title":"Memory.pokeByteArray","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/java/libcore/io/Memory.java#242\n\npublic static native void pokeByteArray(long address, byte[] src, int offset, int count);\n</code></pre> <p>native\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd8\u662f\u50cf\u4e0a\u6587\u63d0\u5230\u7684\u65b9\u6cd5\u4e00\u6837\u627e\u5230\u5176\u771f\u6b63\u7684native\u65b9\u6cd5\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/native/libcore_io_Memory.cpp#111\n\nstatic void Memory_peekByteArray(JNIEnv* env, jclass, jlong srcAddress, jbyteArray dst, jint dstOffset, jint byteCount) {\n    env-&gt;SetByteArrayRegion(dst, dstOffset, byteCount, cast&lt;const jbyte*&gt;(srcAddress));\n}\n</code></pre> <p></p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memoryfile_3","title":"MemoryFile\u8bfb\u6570\u636e","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java#247\n\nprivate class MemoryInputStream extends InputStream {\n\n    private int mMark = 0;\n    private int mOffset = 0;\n    private byte[] mSingleByte;\n\n    ...\n\n    @Override\n    public int read() throws IOException {\n        if (mSingleByte == null) {\n            mSingleByte = new byte[1];\n        }\n        int result = read(mSingleByte, 0, 1);\n        if (result != 1) {\n            return -1;\n        }\n        return mSingleByte[0];\n    }\n\n    @Override\n    public int read(byte buffer[], int offset, int count) throws IOException {\n        if (offset &lt; 0 || count &lt; 0 || offset + count &gt; buffer.length) {\n            // readBytes() also does this check, but we need to do it before\n            // changing count.\n            throw new IndexOutOfBoundsException();\n        }\n        count = Math.min(count, available());\n        if (count &lt; 1) {\n            return -1;\n        }\n        int result = readBytes(buffer, mOffset, offset, count);\n        if (result &gt; 0) {\n            mOffset += result;\n        }\n        return result;\n    }\n\n    ...\n}\n</code></pre> <p>\u5199\u5165\u64cd\u4f5c\u80fd\u770b\u5230\u5c31\u662f\u83b7\u53d6MemoryFile\u7684InputStream\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u3002\u80fd\u770b\u5230\u5728read\u65b9\u6cd5\u4e2d\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u8c03\u7528readBytes\u4f5c\u4e3a\u6838\u5fc3\u5199\u5165\u65b9\u6cd5\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#readbytes","title":"readBytes","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/MemoryFile.java\n\npublic int readBytes(byte[] buffer, int srcOffset, int destOffset, int count)\n            throws IOException {\n    beginAccess();\n    try {\n        mMapping.position(srcOffset);\n        mMapping.get(buffer, destOffset, count);\n    } finally {\n        endAccess();\n    }\n    return count;\n}\n</code></pre> <ul> <li>native_pin</li> </ul> <p>\u8c03\u7528native_pin\u8fdb\u884c\u9501\u5b9a\u8fd9\u4e00\u5757\u5927\u5c0f\u7684\u865a\u62df\u5185\u5b58\uff0c\u907f\u514d\u88ab\u7cfb\u7edf\u56de\u6536\u3002</p> <ul> <li>mMapping.position</li> </ul> <p>\u8bb0\u5f55\u4f4d\u7f6e\u3002</p> <ul> <li>mMapping.get</li> </ul> <p>\u628abuffer\u6570\u636e\u8bfb\u5230mMapping\u4e2d\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#directbytebufferget","title":"DirectByteBuffer.get","text":"<p>\u5728DirectByteBuffer.put\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u770b\u539f\u51fd\u6570\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/ojluni/src/main/java/java/nio/DirectByteBuffer.java#229\n\npublic ByteBuffer get(byte[] dst, int dstOffset, int length) {\n    if (!memoryRef.isAccessible) {\n        throw new IllegalStateException(\"buffer is inaccessible\");\n    }\n    checkBounds(dstOffset, length, dst.length);\n    int pos = position();\n    int lim = limit();\n    assert (pos &lt;= lim);\n    int rem = (pos &lt;= lim ? lim - pos : 0);\n    if (length &gt; rem)\n        throw new BufferUnderflowException();\n    Memory.peekByteArray(ix(pos),\n            dst, dstOffset, length);\n    position = pos + length;\n    return this;\n}\n</code></pre> <p>\u4e00\u6837\u4e5f\u662f\u83b7\u53d6\u5f53\u524d\u5df2\u7ecf\u5199\u5165\u7684\u4f4d\u7f6e\uff0c\u4ece\u8be5\u4f4d\u7f6e+\u504f\u79fb\u91cf\u4f5c\u4e3a\u8bfb\u53d6\u6570\u636e\u7684\u8d77\u70b9\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u957f\u5ea6\u5373\u4e3a\u6240\u5f97\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#memorypeekbytearray","title":"Memory.peekByteArray","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/libcore/luni/src/main/native/libcore_io_Memory.cpp#111\n\nstatic void Memory_peekByteArray(JNIEnv* env, jclass, jlong srcAddress, jbyteArray dst, jint dstOffset, jint byteCount) {\n    env-&gt;SetByteArrayRegion(dst, dstOffset, byteCount, cast&lt;const jbyte*&gt;(srcAddress));\n}\n</code></pre> <p>\u80fd\u770b\u5230\u6b64\u65f6\u5c31\u662f\u83b7\u53d6\u76ee\u6807\u533a\u57df\u5185\u5b58\u7684\u6570\u636e\uff0c\u8bbe\u7f6e\u5230srcAddress\u4e2d\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_8","title":"\u603b\u7ed3","text":"<p>Ashmem\u533f\u540d\u5171\u4eab\u5185\u5b58\u4f7f\u7528\u7684\u6b65\u9aa4\u53ef\u4ee5\u5206\u4ee5\u4e0b\u51e0\u6b65\uff1a - open ashmem\u9a71\u52a8 - ioctl \u53d1\u9001ASHMEM_SET_NAME\u547d\u4ee4\u4e3a\u8be5ashmem\u521b\u5efa\u540d\u5b57 - ioctl \u53d1\u9001ASHMEM_SET_SIZE\u547d\u4ee4\u4e3aashmem\u8bbe\u7f6e\u5927\u5c0f - mmap - \u5bf9\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u884c\u8bfb\u5199</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem","title":"Ashmem\u9a71\u52a8","text":"<p>\u672c\u4eba\u6ca1\u505a\u8fc7\u9a71\u52a8\uff0c\u6240\u6709\u7684\u9a71\u52a8\u77e5\u8bc6\u90fd\u662f\u901a\u8fc7\u7f51\u4e0a\u5b66\u4e60\u6216\u8005RTFSC\uff0c\u6709\u8bb2\u9519\u4e4b\u5904\u8bf7\u6307\u70b9\u3002\u4e5f\u671b\u9a71\u52a8\u5927\u4f6c\u591a\u591a\u6d77\u6db5\u3002 ASHMEM_DEVICE\u5176\u5b9e\u5c31\u662f\u62bd\u8c61\u7684\u5171\u4eab\u5185\u5b58\u8bbe\u5907\uff0c\u5b83\u662f\u4e00\u4e2a\u6742\u9879\u8bbe\u5907\uff08\u5b57\u7b26\u8bbe\u5907\u7684\u4e00\u79cd\uff09\uff0c\u5728\u9a71\u52a8\u52a0\u8f7d\u4e4b\u540e\uff0c\u5c31\u4f1a\u5728/dev\u4e0b\u7a7f\u4ef6ashem\u6587\u4ef6\uff0c\u4e4b\u540e\u7528\u6237\u5c31\u80fd\u591f\u8bbf\u95ee\u8be5\u8bbe\u5907\u6587\u4ef6\uff0c\u540c\u4e00\u822c\u7684\u8bbe\u5907\u6587\u4ef6\u4e0d\u540c\uff0c\u5b83\u4ec5\u4ec5\u662f\u901a\u8fc7\u5185\u5b58\u62bd\u8c61\u7684\uff0c\u540c\u666e\u901a\u7684\u78c1\u76d8\u8bbe\u5907\u6587\u4ef6\u3001\u4e32\u884c\u7aef\u53e3\u5b57\u6bb5\u8bbe\u5907\u6587\u4ef6\u4e0d\u4e00\u6837\uff1a</p> <p>aospxref\u7f51\u7ad9\u6ca1\u6709\u6536\u5f55kernel\u4ee3\u7801\uff0cgooglesource\u9700\u8981\u81ea\u884c\u79d1\u5b66\u4e0a\u7f51\u3002 https://android.googlesource.com/kernel</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem_init","title":"\u521d\u59cb\u5316\uff08ashmem_init\uff09","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/staging/android/ashmem.c\n\nstatic int __init ashmem_init(void)\n{\n    int ret = -ENOMEM;\n\n    ashmem_area_cachep = kmem_cache_create(\"ashmem_area_cache\",\n                           sizeof(struct ashmem_area),\n                           0, 0, NULL);\n    if (!ashmem_area_cachep) {\n        pr_err(\"failed to create slab cache\\n\");\n        goto out;\n    }\n\n    ashmem_range_cachep = kmem_cache_create(\"ashmem_range_cache\",\n                        sizeof(struct ashmem_range),\n                        0, 0, NULL);\n    if (!ashmem_range_cachep) {\n        pr_err(\"failed to create slab cache\\n\");\n        goto out_free1;\n    }\n\n    ret = misc_register(&amp;ashmem_misc);\n    if (ret) {\n        pr_err(\"failed to register misc device!\\n\");\n        goto out_free2;\n    }\n\n    ret = register_shrinker(&amp;ashmem_shrinker);\n    if (ret) {\n        pr_err(\"failed to register shrinker!\\n\");\n        goto out_demisc;\n    }\n\n    pr_info(\"initialized\\n\");\n\n    return 0;\n\nout_demisc:\n    misc_deregister(&amp;ashmem_misc);\nout_free2:\n    kmem_cache_destroy(ashmem_range_cachep);\nout_free1:\n    kmem_cache_destroy(ashmem_area_cachep);\nout:\n    return ret;\n}\n\ndevice_initcall(ashmem_init);\n</code></pre> <ul> <li>\u5728slab\u9ad8\u901f\u7f13\u5b58\u5f00\u8f9f\u4e86ashmem_area</li> <li>ashmem_range\u4e24\u4e2a\u7ed3\u6784\u4f53\u7684cache</li> <li>\u901a\u8fc7register_shrinker\u5411\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u6ce8\u518cAshmem\u56de\u6536\u51fd\u6570 <p>\u5982\u679cLinux\u5185\u5b58\u7ba1\u7406slab\u662f\u4ec0\u4e48\u53ef\u4ee5\u6d4f\u89c8\u4ee5\u4e0b\u6587\u7ae0\uff1a</p> </li> </ul> <p>Linux\u4e2d\u7684Slab Linux\u5185\u5b58\u7ba1\u7406\u4e4bSLAB\u539f\u7406\u6d45\u6790</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#file_operations","title":"file_operations","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/staging/android/ashmem.c\n\nstatic struct miscdevice ashmem_misc = {\n    .minor = MISC_DYNAMIC_MINOR,\n    .name = \"ashmem\",\n    .fops = &amp;ashmem_fops,\n};\n\nstatic const struct file_operations ashmem_fops = {\n    .owner = THIS_MODULE,\n    .open = ashmem_open,\n    .release = ashmem_release,\n    .read_iter = ashmem_read_iter,\n    .llseek = ashmem_llseek,\n    .mmap = ashmem_mmap,\n    .unlocked_ioctl = ashmem_ioctl,\n#ifdef CONFIG_COMPAT\n    .compat_ioctl = compat_ashmem_ioctl,\n#endif\n#ifdef CONFIG_PROC_FS\n    .show_fdinfo = ashmem_show_fdinfo,\n#endif\n};\n</code></pre> <p>\u7ed3\u6784\u4f53file_operations\u5728\u5934\u6587\u4ef6 linux/fs.h\u4e2d\u5b9a\u4e49\uff0c\u7528\u6765\u5b58\u50a8\u9a71\u52a8\u5185\u6838\u6a21\u5757\u63d0\u4f9b\u7684\u5bf9\u8bbe\u5907\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u7684\u51fd\u6570\u7684\u6307\u9488\u3002 \u80fd\u770b\u5230\u91cc\u9762\u6709open\uff0cread_iter\uff0cmmap\uff0cunlocked_ioctl\u8fd9\u56db\u4e2a\u6838\u5fc3\u7684\u65b9\u6cd5\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem_open","title":"ashmem_open","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/staging/android/ashmem.c\n\nstatic int ashmem_open(struct inode *inode, struct file *file)\n{\n    struct ashmem_area *asma;\n    int ret;\n\n    ret = generic_file_open(inode, file);\n    if (ret)\n        return ret;\n\n    asma = kmem_cache_zalloc(ashmem_area_cachep, GFP_KERNEL);\n    if (!asma)\n        return -ENOMEM;\n\n    INIT_LIST_HEAD(&amp;asma-&gt;unpinned_list);\n    memcpy(asma-&gt;name, ASHMEM_NAME_PREFIX, ASHMEM_NAME_PREFIX_LEN);\n    asma-&gt;prot_mask = PROT_MASK;\n    file-&gt;private_data = asma;\n\n    return 0;\n}\n</code></pre> <p>open\u51fd\u6570\u5f88\u666e\u901a\uff0c\u521b\u5efa\u4e00\u5757ashmem\u5171\u4eab\u5185\u5b58\u65f6\uff0c\u5176\u5b9e\u662f\u5728\u5185\u6838\u5c42\u6253\u5f00\u4e86\u4e00\u4e2aashmem file\uff0c\u800c\u4e14\u8fd9\u4e2afile\u7684private_data\u91cc\u8bb0\u5f55\u4e86\u4e00\u5757ashmem_area\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem_ioctl","title":"ashmem_ioctl","text":"<p>ashmem_open()\u4e4b\u540e\uff0c\u7d27\u63a5\u7740\u8981\u8bbe\u7f6e\u521a\u6253\u5f00\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u4e8e\u662f\u8c03\u7528\u5230ioctl()\u5bf9\u5e94\u7684ashmem_ioctl()\u3002\u4e3b\u8981\u7684\u8bbe\u7f6e\u52a8\u4f5c\u5176\u5b9e\u5c31\u662f\u5411ashmem_area\u91cc\u5199\u5165\u4e00\u4e9b\u6570\u636e\u3002ashmem_ioctl()\u51fd\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/staging/android/ashmem.c\n\nstatic long ashmem_ioctl(struct file *file, unsigned int cmd, unsigned long arg)\n{\n    struct ashmem_area *asma = file-&gt;private_data;\n    long ret = -ENOTTY;\n\n    switch (cmd) {\n    ...\n    case ASHMEM_SET_SIZE:\n        ret = -EINVAL;\n        mutex_lock(&amp;ashmem_mutex);\n        if (!asma-&gt;file) {\n            ret = 0;\n            asma-&gt;size = (size_t)arg;\n        }\n        mutex_unlock(&amp;ashmem_mutex);\n        break;\n    ...\n    }\n\n    return ret;\n}\n</code></pre> <p>\u8bbe\u7f6e\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5176\u5b9e\u5e76\u672a\u771f\u6b63\u7684\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e5f\u7b26\u5408Linux\u7684\u98ce\u683c\uff0c\u53ea\u6709\u7b49\u5230\u771f\u6b63\u7684\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u901a\u8fc7\u7f3a\u9875\u4e2d\u65ad\u5206\u914d\u5185\u5b58\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#ashmem_mmap","title":"ashmem_mmap","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/staging/android/ashmem.c\n\nstatic int ashmem_mmap(struct file *file, struct vm_area_struct *vma)\n{\n    static struct file_operations vmfile_fops;\n    struct ashmem_area *asma = file-&gt;private_data;\n    int ret = 0;\n\n    mutex_lock(&amp;ashmem_mutex);\n\n    /* user needs to SET_SIZE before mapping */\n    //1. \u8bbe\u7f6easma\u7684size\uff0c\u4e0d\u7136\u4f1a\u629b\u5f02\u5e38\u3002\n    if (!asma-&gt;size) {\n        ret = -EINVAL;\n        goto out;\n    }\n\n    /* requested mapping size larger than object size */\n    //2. \u68c0\u6d4b\u9700\u8981\u6620\u5c04\u7684vma\u865a\u62df\u5185\u5b58\u662f\u5426\u7b26\u5408\u6743\u9650\uff0c\u5426\u5219\u629b\u5f02\u5e38\u3002\n    if (vma-&gt;vm_end - vma-&gt;vm_start &gt; PAGE_ALIGN(asma-&gt;size)) {\n        ret = -EINVAL;\n        goto out;\n    }\n\n    /* requested protection bits must match our allowed protection mask */\n    if ((vma-&gt;vm_flags &amp; ~calc_vm_prot_bits(asma-&gt;prot_mask, 0)) &amp;\n        calc_vm_prot_bits(PROT_MASK, 0)) {\n        ret = -EPERM;\n        goto out;\n    }\n    vma-&gt;vm_flags &amp;= ~calc_vm_may_flags(~asma-&gt;prot_mask);\n\n    if (!asma-&gt;file) {\n        char *name = ASHMEM_NAME_DEF;\n        struct file *vmfile;\n        struct inode *inode;\n\n        //3. \u68c0\u67e5asma\u4e2d\u7684file\u6587\u4ef6\u7ed3\u6784\u4f53\u662f\u5426\u521b\u5efa\n        if (asma-&gt;name[ASHMEM_NAME_PREFIX_LEN] != '\\0')\n            name = asma-&gt;name;\n\n        /* ... and allocate the backing shmem file */\n        //4. \n        vmfile = shmem_file_setup(name, asma-&gt;size, vma-&gt;vm_flags);\n        if (IS_ERR(vmfile)) {\n            ret = PTR_ERR(vmfile);\n            goto out;\n        }\n        vmfile-&gt;f_mode |= FMODE_LSEEK;\n        inode = file_inode(vmfile);\n        lockdep_set_class(&amp;inode-&gt;i_rwsem, &amp;backing_shmem_inode_class);\n        asma-&gt;file = vmfile;\n        /*\n         * override mmap operation of the vmfile so that it can't be\n         * remapped which would lead to creation of a new vma with no\n         * asma permission checks. Have to override get_unmapped_area\n         * as well to prevent VM_BUG_ON check for f_ops modification.\n         */\n        if (!vmfile_fops.mmap) {\n            vmfile_fops = *vmfile-&gt;f_op;\n            vmfile_fops.mmap = ashmem_vmfile_mmap;\n            vmfile_fops.get_unmapped_area =\n                    ashmem_vmfile_get_unmapped_area;\n        }\n        vmfile-&gt;f_op = &amp;vmfile_fops;\n    }\n    get_file(asma-&gt;file);\n\n    /*\n     * XXX - Reworked to use shmem_zero_setup() instead of\n     * shmem_set_file while we're in staging. -jstultz\n     */\n    if (vma-&gt;vm_flags &amp; VM_SHARED) {\n        //5. \u68c0\u67e5\u5982\u679c\u5f53\u524d\u7684vma\u865a\u62df\u5185\u5b58\u5141\u8bb8\u5171\u4eab\u5219\u8c03\u7528shmem_zero_setup\u6620\u5c04\u6587\u4ef6\n        ret = shmem_zero_setup(vma);\n        if (ret) {\n            fput(asma-&gt;file);\n            goto out;\n        }\n    } else {\n        vma_set_anonymous(vma);\n    }\n\n    if (vma-&gt;vm_file)\n        fput(vma-&gt;vm_file);\n    vma-&gt;vm_file = asma-&gt;file;\n\nout:\n    mutex_unlock(&amp;ashmem_mutex);\n    return ret;\n}\n</code></pre> <ul> <li>\u8bbe\u7f6easma\u7684size\uff0c\u4e0d\u7136\u4f1a\u629b\u5f02\u5e38</li> <li>\u68c0\u6d4b\u9700\u8981\u6620\u5c04\u7684vma\u865a\u62df\u5185\u5b58\u662f\u5426\u7b26\u5408\u6743\u9650\uff0c\u5426\u5219\u629b\u5f02\u5e38</li> <li>\u68c0\u67e5asma\u4e2d\u7684file\u6587\u4ef6\u7ed3\u6784\u4f53\u662f\u5426\u521b\u5efa</li> <li>\u6ca1\u6709\u5219\u83b7\u53d6asma\u540d\u5b57\u548c\u5927\u5c0f\u901a\u8fc7shmem_file_setup\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26</li> <li>\u68c0\u67e5\u5982\u679c\u5f53\u524d\u7684vma\u865a\u62df\u5185\u5b58\u5141\u8bb8\u5171\u4eab\u5219\u8c03\u7528shmem_zero_setup\u6620\u5c04\u6587\u4ef6</li> </ul>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#shmem_file_setup","title":"shmem_file_setup","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/mm/shmem.c\n\nstatic struct file *__shmem_file_setup(struct vfsmount *mnt, const char *name, loff_t size,\n                       unsigned long flags, unsigned int i_flags)\n{\n    struct inode *inode;\n    struct file *res;\n\n    if (IS_ERR(mnt))\n        return ERR_CAST(mnt);\n\n    if (size &lt; 0 || size &gt; MAX_LFS_FILESIZE)\n        return ERR_PTR(-EINVAL);\n\n    if (shmem_acct_size(flags, size))\n        return ERR_PTR(-ENOMEM);\n    //\u5206\u914dinode\uff0c\u5206\u914d\u6210\u529f\u5c31\u597d\u6bd4\u5efa\u7acb\u4e86\u6587\u4ef6\uff0c\u4e5f\u8bb8\u5e76\u672a\u5b58\u5728\u771f\u5b9e\u6587\u4ef6\u6620\u5c04\n    inode = shmem_get_inode(mnt-&gt;mnt_sb, NULL, S_IFREG | S_IRWXUGO, 0,\n                flags);\n    if (unlikely(!inode)) {\n        shmem_unacct_size(flags, size);\n        return ERR_PTR(-ENOSPC);\n    }\n    inode-&gt;i_flags |= i_flags;\n    inode-&gt;i_size = size;\n    clear_nlink(inode); /* It is unlinked */\n    res = ERR_PTR(ramfs_nommu_expand_for_mapping(inode, size));\n    if (!IS_ERR(res))\n        res = alloc_file_pseudo(inode, mnt, name, O_RDWR,\n                &amp;shmem_file_operations);\n    if (IS_ERR(res))\n        iput(inode);\n    return res;\n}\n</code></pre> <p>\u901a\u8fc7shmem_file_setup\u5728tmpfs\u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\uff08\u4e5f\u8bb8\u53ea\u662f\u5185\u6838\u4e2d\u7684\u4e00\u4e2ainode\u8282\u70b9\uff09\uff0c\u8be5\u6587\u4ef6\u4e0eAshmem\u9a71\u52a8\u7a0b\u5e8f\u521b\u5efa\u7684\u533f\u540d\u5171\u4eab\u5185\u5b58\u5bf9\u5e94\uff0c\u4e0d\u8fc7\u7528\u6237\u6001\u5e76\u4e0d\u80fd\u770b\u5230\u8be5\u4e34\u65f6\u6587\u4ef6\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#shmem_zero_setup","title":"shmem_zero_setup","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/mm/shmem.c\n\nint shmem_zero_setup(struct vm_area_struct *vma)\n{\n    struct file *file;\n    loff_t size = vma-&gt;vm_end - vma-&gt;vm_start;\n\n    /*\n     * Cloning a new file under mmap_sem leads to a lock ordering conflict\n     * between XFS directory reading and selinux: since this file is only\n     * accessible to the user through its mapping, use S_PRIVATE flag to\n     * bypass file security, in the same way as shmem_kernel_file_setup().\n     */\n    file = shmem_kernel_file_setup(\"dev/zero\", size, vma-&gt;vm_flags);\n    if (IS_ERR(file))\n        return PTR_ERR(file);\n\n    if (vma-&gt;vm_file)\n        fput(vma-&gt;vm_file);\n    vma-&gt;vm_file = file;\n    vma-&gt;vm_ops = &amp;shmem_vm_ops;\n\n    if (IS_ENABLED(CONFIG_TRANSPARENT_HUGE_PAGECACHE) &amp;&amp;\n            ((vma-&gt;vm_start + ~HPAGE_PMD_MASK) &amp; HPAGE_PMD_MASK) &lt;\n            (vma-&gt;vm_end &amp; HPAGE_PMD_MASK)) {\n        khugepaged_enter(vma, vma-&gt;vm_flags);\n    }\n\n    return 0;\n}\n\n\nstruct file *shmem_kernel_file_setup(const char *name, loff_t size, unsigned long flags)\n{\n    return __shmem_file_setup(shm_mnt, name, size, flags, S_PRIVATE);\n}\n\n\nstatic struct file *__shmem_file_setup(struct vfsmount *mnt, const char *name, loff_t size,\n                       unsigned long flags, unsigned int i_flags)\n{\n    struct inode *inode;\n    struct file *res;\n\n    if (IS_ERR(mnt))\n        return ERR_CAST(mnt);\n\n    if (size &lt; 0 || size &gt; MAX_LFS_FILESIZE)\n        return ERR_PTR(-EINVAL);\n\n    if (shmem_acct_size(flags, size))\n        return ERR_PTR(-ENOMEM);\n\n    inode = shmem_get_inode(mnt-&gt;mnt_sb, NULL, S_IFREG | S_IRWXUGO, 0,\n                flags);\n    if (unlikely(!inode)) {\n        shmem_unacct_size(flags, size);\n        return ERR_PTR(-ENOSPC);\n    }\n    inode-&gt;i_flags |= i_flags;\n    inode-&gt;i_size = size;\n    clear_nlink(inode); /* It is unlinked */\n    res = ERR_PTR(ramfs_nommu_expand_for_mapping(inode, size));\n    if (!IS_ERR(res))\n        res = alloc_file_pseudo(inode, mnt, name, O_RDWR,\n                &amp;shmem_file_operations);\n    if (IS_ERR(res))\n        iput(inode);\n    return res;\n}\n</code></pre> <ul> <li>\u901a\u8fc7shmem_get_inode\u8bbe\u7f6e\u5171\u4eab\u7684inode\uff0cinode\u662fLinux\u8bbf\u95ee\u786c\u76d8\u6587\u4ef6\u7cfb\u7edf\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u91cc\u9762\u5305\u542b\u5982superblock\u7b49\u5143\u6570\u636e\u3002</li> <li>alloc_file_pseudo\u7533\u8bf7\u4e00\u4e2afile\u7ed3\u6784\u4f53\uff0c\u540c\u65f6\u590d\u5199file\u7684\u7ed3\u6784\u4e2d\u7684file_operation\u6587\u4ef6\u64cd\u4f5c</li> </ul> <p>\u7ee7\u7eed\u770bfile_operations\u6709\u54ea\u4e9b\u64cd\u4f5c</p> <pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/mm/shmem.c\n\nstatic const struct file_operations shmem_file_operations = {\n    .mmap       = shmem_mmap,\n    .get_unmapped_area = shmem_get_unmapped_area,\n#ifdef CONFIG_TMPFS\n    .llseek     = shmem_file_llseek,\n    .read_iter  = shmem_file_read_iter,\n    .write_iter = generic_file_write_iter,\n    .fsync      = noop_fsync,\n    .splice_read    = generic_file_splice_read,\n    .splice_write   = iter_file_splice_write,\n    .fallocate  = shmem_fallocate,\n#endif\n};\n</code></pre> <p>\u901a\u8fc7shmem_file_setup\uff0cashmem\u9a71\u52a8\u7a0b\u5e8f\u5c31\u628avma\u4e2d\u7684file\u6587\u4ef6\u7ed3\u6784\u4f53\u8f6c\u5316\u4e3a\u5171\u4eab\u5185\u5b58\u4e86\u3002 \u4e0d\u8fc7\u770b\u5230shmem\u8fd9\u4e2a\u540d\u5b57\u5c31\u5e94\u8be5\u77e5\u9053\u5176\u5b9e\u8fd9\u5c31\u662fLinux\u4e2d\u7684\u5171\u4eab\u5185\u5b58\u3002</p> <p>\u5171\u4eab\u5185\u5b58\u673a\u5236\u771f\u6b63\u4f7f\u7528map\u7684\u5bf9\u8c61\u5176\u5b9e\u662f\u8fd9\u4e2a\u4e34\u65f6\u6587\u4ef6\uff0c\u800c\u4e0d\u662fashmem\u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u91cc\u4e4b\u6240\u4ee5\u662f\u4e00\u6b21mmap\uff0c\u4e3b\u8981\u662f\u901a\u8fc7vma-&gt;vm_file = asma-&gt;file\u5b8c\u6210map\u5bf9\u8c61\u7684\u66ff\u6362\uff0c\u5f53\u6620\u5c04\u7684\u5185\u5b58\u5f15\u8d77\u7f3a\u9875\u4e2d\u65ad\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8c03\u7528shmem_file_setup\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662fashmem\u7684\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#filedescriptor","title":"FileDescriptor","text":"<p>\u6587\u7ae0\u6709\u70b9\u957f\uff0c\u770b\u5b8cMemoryFile\u548cAshmen\u7684\u5206\u6790\u3002\u53ef\u80fd\u5c31\u5df2\u7ecf\u61f5\u4e86\uff0c\u5565\u554a\u8fd9\u662f\u3002\u90a3\u4e48\u5230\u73b0\u5728\u4e3a\u6b62\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u4f20\u8f93\u5927\u6570\u636e\u3002 \u539f\u751fLinux\u5171\u4eab\u5185\u5b58\u662f\u901a\u8fc7\u4f20\u9012\u5df2\u77e5\u7684key\u6765\u5904\u7406\u7684\uff0c\u4f46\u662fAndroid\u4e2d\u4e0d\u5b58\u5728\u8fd9\u79cd\u673a\u5236\uff0cAndroid\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f\u90a3\u5c31\u662f\u901a\u8fc7Binder\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u5904\u7406\uff0cAndroid\u7684Binder\u5bf9\u4e8efd\u7684\u4f20\u9012\u4e5f\u505a\u4e86\u9002\u914d\uff0c\u539f\u7406\u5176\u5b9e\u5c31\u662f**\u5728\u5185\u6838\u5c42\u4e3a\u8981\u4f20\u9012\u7684\u76ee\u6807\u8fdb\u7a0b\u8f6c\u6362fd**\uff0c\u56e0\u4e3a\u5728linux\u4e2dfd\u53ea\u662f\u5bf9\u672c\u8fdb\u7a0b\u662f\u6709\u6548\u3001\u4e14\u552f\u4e00\uff0c\u8fdb\u7a0bA\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5f97\u5230\u4e00\u4e2afd\uff0c\u4e0d\u80fd\u76f4\u63a5\u4e3a\u8fdb\u7a0bB\u4f7f\u7528\uff0c\u56e0\u4e3aB\u4e2d\u90a3\u4e2afd\u53ef\u80fd\u538b\u6839\u65e0\u6548\u3001\u6216\u8005\u5bf9\u5e94\u5176\u4ed6\u6587\u4ef6\u3002\u867d\u7136\u540c\u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4f46\u662f\u6587\u4ef6\u53ea\u6709\u4e00\u4e2a\uff0c\u5728\u5185\u6838\u5c42\u4e5f\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2ainode\u8282\u70b9\u4e0efile\u5bf9\u8c61\uff0c\u8fd9\u4e5f\u662f\u5185\u6838\u5c42\u53ef\u4ee5\u4f20\u9012fd\u7684\u57fa\u7840\uff0cBinder\u9a71\u52a8\u901a\u8fc7\u5f53\u524d\u8fdb\u7a0b\u7684fd\u627e\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u7136\u540e\u4e3a\u76ee\u6807\u8fdb\u7a0b\u65b0\u5efafd\uff0c\u5e76\u4f20\u9012\u7ed9\u76ee\u6807\u8fdb\u7a0b\uff0c\u6838\u5fc3\u5c31\u662f\u628a\u8fdb\u7a0bA\u4e2d\u7684fd\u8f6c\u5316\u6210\u8fdb\u7a0bB\u4e2d\u7684fd\u3002 \u5728MemoryFile\u7684\u6784\u9020\u51fd\u6570\u91cc\uff0c\u4f1a\u521b\u5efa\u51fa\u4e00\u5757\u5171\u4eab\u5185\u5b58\uff0c\u5e76\u7528\u4e00\u4e2aFileDescriptor\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bb0\u5f55\u5b83\uff0c\u8fd9\u4e2a\u5728\u524d\u6587\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/SharedMemory.java#377\n\nprivate static native FileDescriptor nCreate(String name, int size) throws ErrnoException;\n</code></pre> <p>\u90a3\u4e48\u5f88\u660e\u663e\uff0cMemoryFile\u5185\u90e8\u6700\u6838\u5fc3\u7684\u4e1c\u897f\uff0c\u4e5f\u5c31\u6765\u6e90\u4e8e\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 \u5728\u201c\u4f7f\u7528\u201d\u8fd9\u4e00\u8282\u4e86\u5176\u5b9e\u4e5f\u7528\u5230\u4e86fd\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#qa","title":"QA","text":"<ul> <li>\u4e3a\u4e86\u51cf\u5c11Java\u5806\u4e2d\u7684\u5927\u5c0f\u800c\u628a\u90e8\u5206\u6570\u636e\u901a\u8fc7\u533f\u540d\u5171\u4eab\u5185\u5b58\u4f20\u9012\uff0c\u8fd9\u6837\u7684\u5185\u5b58\u4f18\u5316\u65b9\u6848\u662f\u5426\u53ef\u884c\uff1f</li> </ul> <p>\u4ece\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053\u533f\u540d\u5171\u4eab\u5185\u5b58\u4e0d\u4f1a\u5360\u7528Dalvik Heap\u4e0eNative Heap\uff0c\u4e0d\u4f1a\u5bfc\u81f4OOM\u3002\u4f46\u662f\u5982\u679c\u8bf4\u533f\u540d\u5171\u4eab\u5185\u5b58\u662f\u5185\u5b58\u4f18\u5316\u65b9\u6848\u5c31\u662f\u5927\u9519\u7279\u9519\u4e86\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ea\u662fAndroid\u7248\u672c\u68c0\u6d4b\u5185\u5b58\u7684\u6f0f\u6d1e\u800c\u5df2\u3002</p> <p> \uff08\u7f51\u4e0a\u56fe\u7247\uff09</p> <p>\u53e6\u5916\u5171\u4eab\u5b58\u5360\u7528\u7a7a\u95f4\u7684\u8ba1\u7b97\uff0c\u53ea\u4f1a\u8ba1\u7b97\u5230\u7b2c\u4e00\u4e2a\u521b\u5efa\u5b83\u7684\u8fdb\u7a0b\u4e2d\uff0c\u5176\u4ed6\u8fdb\u7a0b\u4e0d\u5c06ashmem\u8ba1\u7b97\u5728\u5185\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#putbinder","title":"putBinder","text":"<p>\u73b0\u5728\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7f51\u4e0a\u4f20\u5f97\u5f88\u795e\u5947\u7684putBinder\u53ef\u4ee5\u4f20\u8f93\u5927\u56fe\u7247\u5230\u5e95\u662f\u4e3a\u4f55\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_9","title":"\u4ee3\u7801","text":"<pre><code>//\u53d1\u9001\u7aef\nIntent intent = new Intent(this, SecondActivity.class);\nBundle bundle = new Bundle();\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n    bundle.putBinder(\"bitmap\", new ImageBinder(mBitmap));\n}\nintent.putExtras(bundle);\nstartActivity(intent);\n\n//\u63a5\u6536\u7aef\nBundle bundle = getIntent().getExtras();\nif (bundle != null) {\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n        ImageBinder imageBinder = (ImageBinder) bundle.getBinder(\"bitmap\");\n        Bitmap bitmap = imageBinder.getBitmap();\n        mTv.setText(String.format((\"bitmap\u5927\u5c0f\u4e3a%dkB\"), bitmap.getByteCount() / 1024));\n        mIv.setImageBitmap(bitmap);\n    }\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_10","title":"\u6e90\u7801","text":"<p>startActivity\u7684\u6d41\u7a0b\u8bf7\u9605\u8bfbActivity\u542f\u52a8\u5206\u6790\uff0c\u8fd9\u91cc\u53ea\u8d34\u51fa\u5173\u952e\u4ee3\u7801\u7247\u6bb5\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#writetoparcel","title":"writeToParcel","text":"<pre><code>int startActivity(..., Intent intent, ...) {\n    Parcel data = Parcel.obtain();\n    ......  \n    intent.writeToParcel(data, 0);    \n    ......\n    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);  \n    ......\n}\n\npublic void writeToParcel(Parcel out, int flags) {\n    ......    \n    out.writeBundle(mExtras);\n}\n\npublic void writeToParcel(Parcel out, int flags) {    \n    ......    \n    out.writeBundle(mExtras);\n}\n</code></pre> <p>writeToParcel\u51fd\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u7ed9Intent\u91cc\u7684Bundle\u5199\u5230Parcel\u4e86\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#writebundle","title":"writeBundle","text":"<p>\u7ee7\u7eed\u5f80\u4e0b\u8d70\uff0c\u770bBundle\u600e\u4e48\u5199\u5230Parcel\u7684\uff0c\u539f\u6765\u662f\u8c03\u5230\u4e86Bundle\u7684writeToParcel\u51fd\u6570\u3002</p> <pre><code>public final void writeBundle(Bundle val) {    \n    val.writeToParcel(this, 0);\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#writetoparcelinner","title":"writeToParcelInner","text":"<p>\u7ee7\u7eed\u5f80\u4e0b\u8d70\uff0c\u53c8\u8c03\u5230\u4e86writeToParcelInner\u3002</p> <pre><code>public void writeToParcel(Parcel parcel, int flags) {    \n    final boolean oldAllowFds = parcel.pushAllowFds(mAllowFds); \n    super.writeToParcelInner(parcel, flags);    \n    parcel.restoreAllowFds(oldAllowFds);\n}\n</code></pre>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#pushallowfds","title":"pushAllowFds","text":"<p>\u8fd9\u4e0d\u5c31\u662f\u4e0a\u6587\u6211\u4eec\u63d0\u5230\u7684fd\u5417\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002</p> <pre><code>bool Parcel::pushAllowFds(bool allowFds) {    \n    const bool origValue = mAllowFds;    \n    if (!allowFds) {        \n        mAllowFds = false;    \n    }    \n    return origValue;\n}\n</code></pre> <p>\u8fd4\u56detrue\uff0c\u4e0d\u518d\u6df1\u5165\u5206\u6790</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#writetoparcelinner_1","title":"writeToParcelInner","text":"<pre><code>void writeToParcelInner(Parcel parcel, int flags) {    \n    ......    \n    parcel.writeArrayMapInternal(mMap);\n}\n\nvoid writeArrayMapInternal(ArrayMap&lt;String, Object&gt; val) {      \n    final int N = val.size();   \n    writeInt(N);    \n    for (int i = 0; i &lt; N; i++) {        \n        writeString(val.keyAt(i));        \n        writeValue(val.valueAt(i));    \n    }\n}\n\npublic final void writeValue(Object v) {    \n    ......     \n    else if (v instanceof Parcelable) {        \n        writeInt(VAL_PARCELABLE);        \n        writeParcelable((Parcelable) v, 0);    \n    }     \n    ......\n}\n\nvoid writeParcelable(Parcelable p, int parcelableFlags) {    \n    writeParcelableCreator(p);    \n    p.writeToParcel(this, parcelableFlags);\n}\n</code></pre> <p>\u5c31\u662f\u5728\u4e00\u4e2afor\u5faa\u73af\u91cc\u7ed9map\u7684key\u548cvalue\u4f9d\u6b21\u5199\u5230parcel\u3002\u56e0\u4e3aBitmap\u662fParcelable\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5173\u6ce8\u8fd9\u4e2a\u5206\u652f\uff0c\u8fd9\u53c8\u8c03\u5230\u4e86Bitmap\u7684writeToParcel\u51fd\u6570\u3002</p> <pre><code>void writeParcelable(Parcelable p, int parcelableFlags) {    \n    writeParcelableCreator(p);    \n    p.writeToParcel(this, parcelableFlags);\n}\n</code></pre> <p>\u8fdb\u5165\u4e86native\u5c42</p> <pre><code>jboolean Bitmap_writeToParcel(JNIEnv* env, jobject, ...) {    \n    android::Bitmap* androidBitmap = reinterpret_cast&lt;Bitmap*&gt;(bitmapHandle);    \n    androidBitmap-&gt;getSkBitmap(&amp;bitmap);  \n\n    // \u5f80parcel\u91cc\u5199Bitmap\u7684\u5404\u79cd\u914d\u7f6e\u53c2\u6570    \n    int fd = androidBitmap-&gt;getAshmemFd();    \n    if (fd &gt;= 0 &amp;&amp; !isMutable &amp;&amp; p-&gt;allowFds()) {        \n        status = p-&gt;writeDupImmutableBlobFileDescriptor(fd);        \n        return JNI_TRUE;    \n    }    \n\n    android::Parcel::WritableBlob blob;    \n    status = p-&gt;writeBlob(size, mutableCopy, &amp;blob);    \n    const void* pSrc =  bitmap.getPixels();    \n    memcpy(blob.data(), pSrc, size);\n}\n</code></pre> <p>\u8fd9\u91cc\u9996\u5148\u62ff\u5230native\u5c42\u7684Bitmap\u5bf9\u8c61\uff0c\u53ebandroidBitmap\uff0c\u7136\u540e\u62ff\u5230\u5bf9\u5e94\u7684SkBitmap\u3002 \u5148\u770bbitmap\u91cc\u5e26\u4e0d\u5e26ashmemFd\uff0c\u5982\u679c\u5e26\uff0c\u5e76\u4e14\u8fd9\u4e2aBitmap\u4e0d\u80fd\u6539\uff0c\u5e76\u4e14Parcel\u662f\u5141\u8bb8\u5e26fd\u7684\u8bdd\uff0c\u5c31\u7ed9fd\u5199\u5230parcel\u91cc\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5426\u5219\u7684\u8bdd\u7ee7\u7eed\u5f80\u4e0b\uff0c\u5148\u6709\u4e2aWriteBlob\u5bf9\u8c61\uff0c\u901a\u8fc7writeBlob\u51fd\u6570\u7ed9\u8fd9\u4e2ablob\u5728parcel\u91cc\u5206\u914d\u4e86\u4e00\u5757\u7a7a\u95f4\uff0c\u7136\u540e\u7ed9bitmap\u62f7\u8d1d\u5230\u8fd9\u5757\u7a7a\u95f4\u91cc\u3002\u6211\u4eec\u770b\u8fd9\u4e2awriteBlob\u51fd\u6570\u3002</p> <pre><code>status_t Parcel::writeBlob(size_t len, bool mutableCopy, WritableBlob* outBlob) {    \n    if (!mAllowFds || len &lt;= BLOB_INPLACE_LIMIT) {        \n        status = writeInt32(BLOB_INPLACE);        \n        void* ptr = writeInplace(len);        \n        outBlob-&gt;init(-1, ptr, len, false);        \n        return NO_ERROR;    \n    }    \n    int fd = ashmem_create_region(\"Parcel Blob\", len);    \n    void* ptr = mmap(NULL, len, ..., MAP_SHARED, fd, 0);    \n    ......    \n    status = writeFileDescriptor(fd, true);    \n    outBlob-&gt;init(fd, ptr, len, mutableCopy);    \n    return NO_ERROR;\n}\n</code></pre> <p>\u8fd9\u4e2awriteBlob\u51fd\u6570\uff0c\u9996\u5148\u770b\u5982\u679c\u4e0d\u5141\u8bb8\u5e26fd\uff0c\u6216\u8005\u8fd9\u4e2a\u6570\u636e\u5c0f\u4e8e16K\uff0c\u5c31\u76f4\u63a5\u5728parcel\u7684\u7f13\u51b2\u533a\u91cc\u5206\u914d\u4e00\u5757\u7a7a\u95f4\u6765\u4fdd\u5b58\u8fd9\u4e2a\u6570\u636e\u3002 \u4e0d\u7136\u7684\u8bdd\u5462\uff0c\u5c31\u53e6\u5916\u5f00\u8f9f\u4e00\u4e2aashmem\uff0c\u6620\u5c04\u51fa\u4e00\u5757\u5185\u5b58\uff0c\u6570\u636e\u5c31\u4fdd\u5b58\u5728ashmem\u7684\u5185\u5b58\u91cc\uff0cparcel\u91cc\u53ea\u5199\u4e2afd\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u5c31\u7b97\u6570\u636e\u91cf\u5f88\u5927\uff0cparcel\u81ea\u5df1\u7684\u7f13\u51b2\u533a\u4e5f\u4e0d\u7528\u5f88\u5927\u3002</p> <p>\u770b\u5230\u8fd9\u91cc\u5c31\u660e\u767d\u4e86\uff0c\u5176\u5b9e\u8fd8\u6709\u7528\u4e86Ashmen\u673a\u5236\u3002</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/ashmem/#_11","title":"\u53c2\u8003","text":"<p>Ashmem\u673a\u5236\u8bb2\u89e3 Android\u533f\u540d\u5171\u4eab\u5185\u5b58\uff08Ashmem\uff09\u539f\u7406</p>","tags":["Android","Binder","Ashmem"]},{"location":"android/binder/driver/","title":"Binder\u673a\u523601-\u9a71\u52a8","text":"","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_1","title":"\u6838\u5fc3","text":"<p>Binder\u673a\u5236\u7684\u5b9e\u73b0\u4e2d\uff0c\u6700\u6838\u5fc3\u7684\u5c31\u662fBinder\u9a71\u52a8\u3002 Binder\u662f\u4e00\u4e2amiscellaneous\u7c7b\u578b\u7684\u9a71\u52a8\uff0c\u672c\u8eab\u4e0d\u5bf9\u5e94\u4efb\u4f55\u786c\u4ef6\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5728\u8f6f\u4ef6\u5c42\u3002\u00a0Binder\u9a71\u52a8\u7684\u6838\u5fc3\u662f\u7ef4\u62a4\u4e00\u4e2abinder_proc\u7c7b\u578b\u7684\u94fe\u8868\u3002\u91cc\u9762\u8bb0\u5f55\u4e86\u5305\u62ecService Manager\u5728\u5185\u7684\u6240\u6709Client\u4fe1\u606f\uff0c\u5f53Client\u53bb\u8bf7\u6c42\u5f97\u5230\u67d0\u4e2aService\u65f6\uff0cBinder\u9a71\u52a8\u5c31\u53bbbinder_proc\u4e2d\u67e5\u627e\u76f8\u5e94\u7684Service\u8fd4\u56de\u7ed9Client\uff0c\u540c\u65f6\u589e\u52a0\u5f53\u524dService\u7684\u5f15\u7528\u4e2a\u6570\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_2","title":"\u7ed3\u6784\u4f53","text":"<p>Binder\u9a71\u52a8\u4e2d\u5305\u542b\u4e86\u5f88\u591a\u7684\u7ed3\u6784\u4f53\u3002\u4e3a\u4e86\u4fbf\u4e8e\u4e0b\u6587\u8bb2\u89e3\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5bf9\u8fd9\u4e9b\u7ed3\u6784\u4f53\u505a\u4e00\u4e9b\u4ecb\u7ecd\u3002</p> <p>\u9a71\u52a8\u4e2d\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a</p> <p>\u4e00\u7c7b\u662f\u4e0e\u7528\u6237\u7a7a\u95f4\u5171\u7528\u7684\uff0c\u8fd9\u4e9b\u7ed3\u6784\u4f53\u5728Binder\u901a\u4fe1\u534f\u8bae\u8fc7\u7a0b\u4e2d\u4f1a\u7528\u5230\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u7ed3\u6784\u4f53\u5b9a\u4e49\u5728binder.h\u4e2d\uff0c\u5305\u62ec\uff1a</p> \u7ed3\u6784\u4f53\u540d\u79f0 \u8bf4\u660e flat_binder_object \u63cf\u8ff0\u5728Binder IPC\u4e2d\u4f20\u9012\u7684\u5bf9\u8c61\uff0c\u89c1\u4e0b\u6587 binder_write_read \u5b58\u50a8\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\u7684\u6570\u636e binder_version \u5b58\u50a8Binder\u7684\u7248\u672c\u53f7 transaction_flags \u63cf\u8ff0\u4e8b\u52a1\u7684flag\uff0c\u4f8b\u5982\u662f\u5426\u662f\u5f02\u6b65\u8bf7\u6c42\uff0c\u662f\u5426\u652f\u6301fd binder_transaction_data \u5b58\u50a8\u4e00\u6b21\u4e8b\u52a1\u7684\u6570\u636e binder_ptr_cookie \u5305\u542b\u4e86\u4e00\u4e2a\u6307\u9488\u548c\u4e00\u4e2acookie <p>Binder\u9a71\u52a8\u4e2d\uff0c\u8fd8\u6709\u4e00\u7c7b\u7ed3\u6784\u4f53\u662f\u4ec5\u4ec5Binder\u9a71\u52a8\u5185\u90e8\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9700\u8981\u7684\uff0c\u5b83\u4eec\u5b9a\u4e49\u5728binder.c\u4e2d\uff0c\u5305\u62ec\uff1a</p> \u7ed3\u6784\u4f53\u540d\u79f0 \u8bf4\u660e binder_node \u63cf\u8ff0Binder\u5b9e\u4f53\u8282\u70b9\uff0c\u5373\uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2aServer binder_ref \u63cf\u8ff0\u5bf9\u4e8eBinder\u5b9e\u4f53\u7684\u5f15\u7528 binder_buffer \u63cf\u8ff0Binder\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u5b58\u50a8\u6570\u636e\u7684Buffer binder_proc \u63cf\u8ff0\u4f7f\u7528Binder\u7684\u8fdb\u7a0b binder_thread \u63cf\u8ff0\u4f7f\u7528Binder\u7684\u7ebf\u7a0b binder_work \u63cf\u8ff0\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u7684\u4e00\u9879\u4efb\u52a1 binder_transaction \u63cf\u8ff0\u4e00\u6b21\u4e8b\u52a1\u7684\u76f8\u5173\u4fe1\u606f binder_deferred_state \u63cf\u8ff0\u5ef6\u8fdf\u4efb\u52a1 binder_stats Binder\u7ebf\u7a0b\u76f8\u5173\u7edf\u8ba1\u6570\u636e binder_ref_death \u6b7b\u4ea1\u901a\u77e5\u7684\u7ed3\u6784\u4f53","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_write_read","title":"binder_write_read","text":"<p>binder\u7684\u8bfb\u5199\u7ed3\u6784\uff0c \u8bb0\u5f55\u4e86binder\u4e2d\u8bfb\u548c\u5199\u7684\u6570\u636e\u4fe1\u606f\uff1a</p> <pre><code>struct binder_write_read {\n   binder_size_t       write_size;     //\u8981\u5199\u5165\u7684\u5b57\u8282\u6570,write_buffer\u7684\u603b\u5b57\u8282\u6570\n   binder_size_t       write_consumed; //\u9a71\u52a8\u7a0b\u5e8f\u5360\u7528\u7684\u5b57\u8282\u6570,write_buffer\u5df2\u6d88\u8d39\u7684\u5b57\u8282\u6570\n   binder_uintptr_t    write_buffer;   //\u5199\u7f13\u51b2\u6570\u636e\u7684\u6307\u9488\n   binder_size_t       read_size;      //\u8981\u8bfb\u7684\u5b57\u8282\u6570,read_buffer\u7684\u603b\u5b57\u8282\u6570\n   binder_size_t       read_consumed;  //\u9a71\u52a8\u7a0b\u5e8f\u5360\u7528\u7684\u5b57\u8282\u6570,read_buffer\u5df2\u6d88\u8d39\u7684\u5b57\u8282\u6570\n   binder_uintptr_t    read_buffer;    //\u8bfb\u7f13\u5b58\u6570\u636e\u7684\u6307\u9488\n};\n</code></pre> <p>\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u548cBinder\u9a71\u52a8\u7a0b\u5e8f\u4ea4\u4e92\u57fa\u672c\u90fd\u662f\u901a\u8fc7BINDER_WRITE_READ\u547d\u4ee4\uff0c\u6765\u8fdb\u884c\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u3002</p> <ul> <li>write_buffer\uff1a\u7528\u4e8e\u53d1\u9001IPC(\u6216IPC reply)\u6570\u636e\uff0c\u5373\u4f20\u9012\u7ecf\u7531Binder Driver\u7684\u6570\u636e\u65f6\u4f7f\u7528\u3002</li> <li>read_buffer\uff1a\u7528\u4e8e\u63a5\u6536\u6765\u81eaBinder Driver\u7684\u6570\u636e\uff0c\u5373Binder Driver\u5728\u63a5\u6536IPC(\u6216IPC reply)\u6570\u636e\u540e\uff0c\u4fdd\u5b58\u5230read_buffer\uff0c\u518d\u4f20\u9012\u5230\u7528\u6237\u7a7a\u95f4\u3002</li> </ul> <p>write_buffer\u548cread_buffer\u90fd\u662f\u5305\u542bBinder\u534f\u8bae\u547d\u4ee4\u548cbinder_transaction_data\u7ed3\u6784\u4f53\u3002</p> <ul> <li>copy_from_user()\uff1a\u5c06\u7528\u6237\u7a7a\u95f4IPC\u6570\u636e\u62f7\u8d1d\u5230\u5185\u6838\u6001binder_write_read\u7ed3\u6784\u4f53\u3002</li> <li>copy_to_user()\uff1a\u5c06\u7528\u5185\u6838\u6001binder_write_read\u7ed3\u6784\u4f53\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u7a7a\u95f4\u3002</li> </ul>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_transaction_data","title":"binder_transaction_data","text":"<pre><code>struct binder_transaction_data {\n    union {\n        __u32    handle;                 //binder_ref\uff08\u5373handle\uff09\n        binder_uintptr_t ptr;            //Binder_node\u7684\u5185\u5b58\u5730\u5740\n    } target;                            //RPC\u76ee\u6807\n    binder_uintptr_t    cookie;          //BBinder\u6307\u9488\n    __u32        code;                   //RPC\u4ee3\u7801\uff0c\u4ee3\u8868Client\u4e0eServer\u53cc\u65b9\u7ea6\u5b9a\u7684\u547d\u4ee4\u7801\n\n    __u32            flags;              //\u6807\u5fd7\u4f4d\uff0c\u6bd4\u5982TF_ONE_WAY\u4ee3\u8868\u5f02\u6b65\uff0c\u5373\u4e0d\u7b49\u5f85Server\u7aef\u56de\u590d\n    pid_t        sender_pid;             //\u53d1\u9001\u7aef\u8fdb\u7a0b\u7684pid\n    uid_t        sender_euid;            //\u53d1\u9001\u7aef\u8fdb\u7a0b\u7684uid\n    binder_size_t    data_size;          //data\u6570\u636e\u7684\u603b\u5927\u5c0f\n    binder_size_t    offsets_size;       //IPC\u5bf9\u8c61\u7684\u5927\u5c0f\n\n    union {\n        struct {\n            binder_uintptr_t    buffer;  //\u6570\u636e\u533a\u8d77\u59cb\u5730\u5740\n            binder_uintptr_t    offsets; //\u6570\u636e\u533aIPC\u5bf9\u8c61\u504f\u79fb\u91cf\n        } ptr;\n       __u8    buf[8];\n    } data;                              //RPC\u6570\u636e\n};\n</code></pre> <p>\u5f53BINDER_WRITE_READ\u547d\u4ee4\u7684\u76ee\u6807\u662f\u672c\u5730Binder node\u65f6\uff0ctarget\u4f7f\u7528ptr\uff0c\u5426\u5219\u4f7f\u7528handle\u3002\u53ea\u6709\u5f53\u8fd9\u662fBinder node\u65f6\uff0ccookie\u624d\u6709\u610f\u4e49\uff0c\u8868\u793a\u9644\u52a0\u6570\u636e\uff0c\u7531\u8fdb\u7a0b\u81ea\u5df1\u89e3\u91ca\u3002</p> <ul> <li>target\uff1a\u5bf9\u4e8eBpBinder\u5219\u4f7f\u7528handle\uff0c\u5bf9\u4e8eBBinder\u5219\u4f7f\u7528ptr\uff0c\u6545\u4f7f\u7528union\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u3002</li> <li>code\uff1a\u6bd4\u5982\u6ce8\u518c\u670d\u52a1\u8fc7\u7a0bcode\u4e3aADD_SERVICE_TRANSACTION\uff0c\u53c8\u6bd4\u5982\u83b7\u53d6\u670d\u52a1code\u4e3aCHECK_SERVICE_TRANSACTION\u3002</li> <li>data\uff1a\u4ee3\u8868\u6574\u4e2a\u6570\u636e\u533a\uff0c\u5176\u4e2ddata.ptr\u6307\u5411\u7684\u662f\u4f20\u9012\u7ed9Binder\u9a71\u52a8\u7684\u6570\u636e\u533a\u7684\u8d77\u59cb\u5730\u5740\uff0cdata.offsets\u6307\u7684\u662f\u6570\u636e\u533a\u4e2dIPC\u6570\u636e\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002</li> <li>cookie: \u8bb0\u5f55\u7740BBinder\u6307\u9488\u3002</li> <li>data_size\uff1a\u4ee3\u8868\u672c\u6b21\u4f20\u8f93\u7684parcel\u6570\u636e\u7684\u5927\u5c0f\u3002</li> <li> <p>offsets_size\uff1a \u4ee3\u8868\u4f20\u9012\u7684IPC\u5bf9\u8c61\u7684\u5927\u5c0f\uff1b\u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4f20\u9012\u4e86\u591a\u5c11\u4e2abinder\u5bf9\u8c61\u3002</p> </li> <li> <p>\u5bf9\u4e8e64\u4f4dIPC\uff0c\u4e00\u4e2aIPC\u5bf9\u8c61\u5927\u5c0f\u7b49\u4e8e8\u3002</p> </li> <li>\u5bf9\u4e8e32\u4f4dIPC\uff0c\u4e00\u4e2aIPC\u5bf9\u8c61\u5927\u5c0f\u7b49\u4e8e4\u3002</li> </ul>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_node","title":"binder_node","text":"<pre><code>/**\n * struct binder_node - binder node bookkeeping\n * @debug_id:             unique ID for debugging\n *                        (invariant after initialized)\n * @lock:                 lock for node fields\n * @work:                 worklist element for node work\n *                        (protected by @proc-&gt;inner_lock)\n * @rb_node:              element for proc-&gt;nodes tree\n *                        (protected by @proc-&gt;inner_lock)\n * @dead_node:            element for binder_dead_nodes list\n *                        (protected by binder_dead_nodes_lock)\n * @proc:                 binder_proc that owns this node\n *                        (invariant after initialized)\n * @refs:                 list of references on this node\n *                        (protected by @lock)\n * @internal_strong_refs: used to take strong references when\n *                        initiating a transaction\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @local_weak_refs:      weak user refs from local process\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @local_strong_refs:    strong user refs from local process\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @tmp_refs:             temporary kernel refs\n *                        (protected by @proc-&gt;inner_lock while @proc\n *                        is valid, and by binder_dead_nodes_lock\n *                        if @proc is NULL. During inc/dec and node release\n *                        it is also protected by @lock to provide safety\n *                        as the node dies and @proc becomes NULL)\n * @ptr:                  userspace pointer for node\n *                        (invariant, no lock needed)\n * @cookie:               userspace cookie for node\n *                        (invariant, no lock needed)\n * @has_strong_ref:       userspace notified of strong ref\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @pending_strong_ref:   userspace has acked notification of strong ref\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @has_weak_ref:         userspace notified of weak ref\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @pending_weak_ref:     userspace has acked notification of weak ref\n *                        (protected by @proc-&gt;inner_lock if @proc\n *                        and by @lock)\n * @has_async_transaction: async transaction to node in progress\n *                        (protected by @lock)\n * @sched_policy:         minimum scheduling policy for node\n *                        (invariant after initialized)\n * @accept_fds:           file descriptor operations supported for node\n *                        (invariant after initialized)\n * @min_priority:         minimum scheduling priority\n *                        (invariant after initialized)\n * @inherit_rt:           inherit RT scheduling policy from caller\n * @txn_security_ctx:     require sender's security context\n *                        (invariant after initialized)\n * @async_todo:           list of async work items\n *                        (protected by @proc-&gt;inner_lock)\n *\n * Bookkeeping structure for binder nodes.\n */\nstruct binder_node {\n    int debug_id;                       //\u8282\u70b9\u521b\u5efa\u65f6\u5206\u914d\uff0c\u5177\u6709\u5168\u5c40\u552f\u4e00\u6027\uff0c\u7528\u4e8e\u8c03\u8bd5\u4f7f\u7528\n    spinlock_t lock;\n    struct binder_work work;\n    union {\n        struct rb_node rb_node;         //binder\u8282\u70b9\u6b63\u5e38\u4f7f\u7528\uff0cunion\n        struct hlist_node dead_node;    //binder\u8282\u70b9\u5df2\u9500\u6bc1\uff0cunion\n    };\n    struct binder_proc *proc;           //binder\u6240\u5728\u7684\u8fdb\u7a0b\n    struct hlist_head refs;             //\u6240\u6709\u6307\u5411\u8be5\u8282\u70b9\u7684binder\u5f15\u7528\u961f\u5217\n    int internal_strong_refs;\n    int local_weak_refs;\n    int local_strong_refs;\n    int tmp_refs\n    binder_uintptr_t ptr;               //\u6307\u5411\u7528\u6237\u7a7a\u95f4binder_node\u7684\u6307\u9488\uff0c\u5bf9\u5e94flat_binder_object.binder\n    binder_uintptr_t cookie;            //\u6570\u636e\uff0c\u5bf9\u5e94flat_binder_object.cookie\n    struct {\n        /*\n         * bitfield elements protected by\n         * proc inner_lock\n         */\n        u8 has_strong_ref:1;\n        u8 pending_strong_ref:1;\n        u8 has_weak_ref:1;\n        u8 pending_weak_ref:1;\n    };\n    struct {\n        /*\n         * invariant after initialization\n         */\n        u8 sched_policy:2;\n        u8 inherit_rt:1;\n        u8 accept_fds:1;\n        u8 txn_security_ctx:1;\n        u8 min_priority;\n    };\n    bool has_async_transaction;\n    struct list_head async_todo;        //\u5f02\u6b65todo\u961f\u5217\n};\n</code></pre> <p>\u7ed3\u6784struct binder_node\u8868\u793a\u4e00\u4e2abinder\u5b9e\u4f53\u3002rb_node\u548cdead_node\u7ec4\u6210\u4e00\u4e2a\u8054\u5408\u4f53\u3002\u5982\u679c\u8fd9\u4e2aBinder\u5b9e\u4f53\u8fd8\u5728\u6b63\u5e38\u4f7f\u7528\uff0c\u5219\u4f7f\u7528rb_node\u6765\u8fde\u5165proc-&gt;nodes\u6240\u8868\u793a\u7684\u7ea2\u9ed1\u6811\u7684\u8282\u70b9\uff0c\u8fd9\u68f5\u7ea2\u9ed1\u6811\u7528\u6765\u7ec4\u7ec7\u5c5e\u4e8e\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u6240\u6709Binder\u5b9e\u4f53\u3002\u5982\u679c\u8fd9\u4e2aBinder\u5b9e\u4f53\u6240\u5c5e\u7684\u8fdb\u7a0b\u5df2\u7ecf\u9500\u6bc1\uff0c\u800c\u8fd9\u4e2aBinder\u5b9e\u4f53\u53c8\u88ab\u5176\u5b83\u8fdb\u7a0b\u6240\u5f15\u7528\uff0c\u5219\u8fd9\u4e2aBinder\u5b9e\u4f53\u901a\u8fc7dead_node\u8fdb\u5165\u5230\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\u53bb\u5b58\u653e\u3002proc\u6210\u5458\u53d8\u91cf\u5c31\u662f\u8868\u793a\u8fd9\u4e2aBinder\u5b9e\u4f8b\u6240\u5c5e\u4e8e\u8fdb\u7a0b\u4e86\u3002refs\u6210\u5458\u53d8\u91cf\u628a\u6240\u6709\u5f15\u7528\u4e86\u8be5Binder\u5b9e\u4f53\u7684Binder\u5f15\u7528\u8fde\u63a5\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u94fe\u8868\u3002internal_strong_refs\u3001local_weak_refs\u548clocal_strong_refs\u8868\u793a\u8fd9\u4e2aBinder\u5b9e\u4f53\u7684\u5f15\u7528\u8ba1\u6570\u3002ptr\u548ccookie\u6210\u5458\u53d8\u91cf\u5206\u522b\u8868\u793a\u8fd9\u4e2aBinder\u5b9e\u4f53\u5728\u7528\u6237\u7a7a\u95f4\u7684\u5730\u5740\u4ee5\u53ca\u9644\u52a0\u6570\u636e\u3002</p> <ul> <li>debug_id\uff1a\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\uff0c\u548cref\u7684debug_id\u5171\u7528\u4e00\u4e2a\u6574\u6570\u7a7a\u95f4\u3002</li> <li>work\uff1a\u5f53\u672c\u8282\u70b9\u5f15\u7528\u8ba1\u6570\u53d1\u751f\u6539\u53d8\uff0c\u9700\u8981\u901a\u77e5\u6240\u5c5e\u8fdb\u7a0b\u65f6\uff0c\u901a\u8fc7\u8be5\u6210\u5458\u6302\u5165\u6240\u5c5e\u8fdb\u7a0b\u7684to-do\u961f\u5217\uff0c\u5524\u9192\u6240\u5c5e\u8fdb\u7a0b\u6267\u884cBinder\u5b9e\u4f53\u5f15\u7528\u8ba1\u6570\u7684\u4fee\u6539\u3002</li> <li>rb_node\uff1a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7ef4\u62a4\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u4ee5Binder\u5b9e\u4f53\u5728\u7528\u6237\u7a7a\u95f4\u7684\u6307\u9488\uff0c\u5373\u672c\u7ed3\u6784\u7684ptr\u6210\u5458\u4e3a\u7d22\u5f15\u5b58\u653e\u8be5\u8fdb\u7a0b\u6240\u6709\u7684Binder\u5b9e\u4f53\u3002\u8fd9\u6837\u9a71\u52a8\u53ef\u4ee5\u6839\u636eBinder\u5b9e\u4f53\u5728\u7528\u6237\u7a7a\u95f4\u7684\u6307\u9488\u5f88\u5feb\u627e\u5230\u5176\u4f4d\u4e8e\u5185\u6838\u7684\u8282\u70b9\u3002rb_node\u7528\u4e8e\u5c06\u672c\u8282\u70b9\u94fe\u5165\u8be5\u7ea2\u9ed1\u6811\u4e2d\u3002</li> <li>dead_node\uff1a\u9500\u6bc1\u65f6\u5fc5\u987b\u5c06rb_node\u4ece\u7ea2\u9ed1\u6811\u4e2d\u6458\u9664\uff0c\u5982\u679c\u672c\u8282\u70b9\u8fd8\u6709\u5f15\u7528\u5207\u65ad\uff0c\u5c31\u7528dead_node\u5c06\u8282\u70b9\u9694\u79bb\u5230\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u4e2d\uff0c\u76f4\u5230\u901a\u77e5\u6240\u6709\u8fdb\u7a0b\u5207\u65ad\u8be5\u8282\u70b9\u7684\u5f15\u7528\u540e\uff0c\u8be5\u8282\u70b9\u624d\u53ef\u80fd\u88ab\u9500\u6bc1\u3002</li> <li>proc\uff1a\u672c\u6210\u5458\u6307\u5411\u8282\u70b9\u6240\u5c5e\u7684\u8fdb\u7a0b\uff0c\u5373\u63d0\u4f9b\u8be5\u8282\u70b9\u7684\u8fdb\u7a0b\u3002</li> <li>refs\uff1a\u672c\u6210\u5458\u662f\u961f\u5217\u5934\uff0c\u6240\u6709\u6307\u5411\u672c\u8282\u70b9\u7684\u5f15\u7528\u90fd\u8fde\u63a5\u5230\u8be5\u961f\u5217\u91cc\uff0c\u8fd9\u4e9b\u5f15\u7528\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u8fdb\u7a0b\u3002\u901a\u8fc7\u8be5\u5bf9\u5217\u53ef\u4ee5\u904d\u5386\u6307\u5411\u8be5\u8282\u70b9\u7684\u6240\u6709\u5f15\u7528\u3002</li> <li>internal_strong_refs\uff1a\u7528\u6765\u5b9e\u73b0\u5f3a\u6307\u9488\u7684\u8ba1\u6570\u5668\uff1a\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u672c\u8282\u70b9\u7684\u5f3a\u5f15\u7528\uff0c\u8be5\u8ba1\u6570\u5668\u5219\u52a01</li> <li>local_weak_refs\uff1a\u9a71\u52a8\u4e3a\u4f20\u8f93\u4e2d\u7684Binder\u8bbe\u7f6e\u7684\u5f31\u5f15\u7528\u8ba1\u6570\u5668\u3002\u5982\u679c\u4e00\u4e2aBinder\u6253\u5305\u5728\u6570\u636e\u5305\u4e2d\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u5230\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u9a71\u52a8\u4f1a\u4e3a\u8be5Binder\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u77e5\u9053\u63a5\u6536\u8fdb\u7a0b\u901a\u8fc7BC_FREE_BUFFER\u901a\u77e5\u9a71\u52a8\u91ca\u653e\u8be5\u6570\u636e\u5305\u7684\u6570\u636e\u533a\u4e3a\u6b62\u3002</li> <li>local_strong_refs\uff1a\u9a71\u52a8\u4e3a\u4f20\u8f93\u4e2d\u7684Binder\u8bbe\u7f6e\u7684\u5f3a\u5f15\u7528\u8ba1\u6570\uff0c\u540c\u4e0a</li> <li>ptr\uff1a\u6307\u5411\u7528\u6237\u7a7a\u95f4Binder\u5b9e\u4f53\u7684\u6307\u9488\uff0c\u6765\u81ea\u4e8eflat_binder_object\u7684binder\u6210\u5458\u3002</li> <li>cookie\uff1a\u6307\u5411\u7528\u6237\u7a7a\u95f4\u7684\u9644\u52a0\u6307\u9488\uff0c\u6765\u81ea\u4e8eflat_binder_object\u7684cookie\u6210\u5458</li> <li>has_strong_ref, pending_strong_ref, has_weak_ref, pending_weak_ref\uff1a\u8fd9\u4e00\u7ec4\u6807\u5fd7\u7528\u4e8e\u63a7\u5236\u9a71\u52a8\u4e0eBinder\u5b9e\u4f53\u6240\u5728\u8fdb\u7a0b\u4ea4\u4e92\u5f0f\u4fee\u6539\u5f15\u7528\u8ba1\u6570\u3002</li> </ul>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_ref","title":"binder_ref","text":"<pre><code>/**\n * struct binder_ref - struct to track references on nodes\n * @data:        binder_ref_data containing id, handle, and current refcounts\n * @rb_node_desc: node for lookup by @data.desc in proc's rb_tree\n * @rb_node_node: node for lookup by @node in proc's rb_tree\n * @node_entry:  list entry for node-&gt;refs list in target node\n *               (protected by @node-&gt;lock)\n * @proc:        binder_proc containing ref\n * @node:        binder_node of target node. When cleaning up a\n *               ref for deletion in binder_cleanup_ref, a non-NULL\n *               @node indicates the node must be freed\n * @death:       pointer to death notification (ref_death) if requested\n *               (protected by @node-&gt;lock)\n *\n * Structure to track references from procA to target node (on procB). This\n * structure is unsafe to access without holding @proc-&gt;outer_lock.\n */\nstruct binder_ref {\n    /* Lookups needed: */\n    /*   node + proc =&gt; ref (transaction) */\n    /*   desc + proc =&gt; ref (transaction, inc/dec ref) */\n    /*   node =&gt; refs + procs (proc exit) */\n    struct binder_ref_data data;\n    struct rb_node rb_node_desc;        //\u4ee5desc\u4e3a\u7d22\u5f15\u7684\u7ea2\u9ed1\u6811\n    struct rb_node rb_node_node;        //\u4ee5node\u4e3a\u7d22\u5f15\u7684\u7ea2\u9ed1\u6811\n    struct hlist_node node_entry;\n    struct binder_proc *proc;           //binder\u8fdb\u7a0b\n    struct binder_node *node;           //binder\u8282\u70b9\n    struct binder_ref_death *death;     //\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219client\u60f3\u83b7\u77e5binder\u7684\u6b7b\u4ea1\n};\n</code></pre> <p>binder_ref \u63cf\u8ff0\u4e86\u6bcf\u4e2a\u5bf9\u670d\u52a1\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5bf9\u5e94\u4e0eClient\u7aef\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6bcf\u4e2aRef\u901a\u8fc7node\u6307\u5411binder_node. \u4e00\u4e2a\u8fdb\u7a0b\u6240\u6709\u7684binder_ref\u901a\u8fc7\u4e24\u4e2a\u7ea2\u9ed1\u6811\uff08RbTree)\u8fdb\u884c\u7ba1\u7406\uff0c\u901a\u8fc7binder_get_ref() \u548c binder_get_ref_for_node\u5feb\u901f\u67e5\u627e\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_proc","title":"binder_proc","text":"<pre><code>/**\n * struct binder_proc - binder process bookkeeping\n * @proc_node:            element for binder_procs list\n * @threads:              rbtree of binder_threads in this proc\n *                        (protected by @inner_lock)\n * @nodes:                rbtree of binder nodes associated with\n *                        this proc ordered by node-&gt;ptr\n *                        (protected by @inner_lock)\n * @refs_by_desc:         rbtree of refs ordered by ref-&gt;desc\n *                        (protected by @outer_lock)\n * @refs_by_node:         rbtree of refs ordered by ref-&gt;node\n *                        (protected by @outer_lock)\n * @waiting_threads:      threads currently waiting for proc work\n *                        (protected by @inner_lock)\n * @pid                   PID of group_leader of process\n *                        (invariant after initialized)\n * @tsk                   task_struct for group_leader of process\n *                        (invariant after initialized)\n * @deferred_work_node:   element for binder_deferred_list\n *                        (protected by binder_deferred_lock)\n * @deferred_work:        bitmap of deferred work to perform\n *                        (protected by binder_deferred_lock)\n * @is_dead:              process is dead and awaiting free\n *                        when outstanding transactions are cleaned up\n *                        (protected by @inner_lock)\n * @todo:                 list of work for this process\n *                        (protected by @inner_lock)\n * @stats:                per-process binder statistics\n *                        (atomics, no lock needed)\n * @delivered_death:      list of delivered death notification\n *                        (protected by @inner_lock)\n * @max_threads:          cap on number of binder threads\n *                        (protected by @inner_lock)\n * @requested_threads:    number of binder threads requested but not\n *                        yet started. In current implementation, can\n *                        only be 0 or 1.\n *                        (protected by @inner_lock)\n * @requested_threads_started: number binder threads started\n *                        (protected by @inner_lock)\n * @tmp_ref:              temporary reference to indicate proc is in use\n *                        (protected by @inner_lock)\n * @default_priority:     default scheduler priority\n *                        (invariant after initialized)\n * @debugfs_entry:        debugfs node\n * @alloc:                binder allocator bookkeeping\n * @context:              binder_context for this proc\n *                        (invariant after initialized)\n * @inner_lock:           can nest under outer_lock and/or node lock\n * @outer_lock:           no nesting under innor or node lock\n *                        Lock order: 1) outer, 2) node, 3) inner\n * @binderfs_entry:       process-specific binderfs log file\n *\n * Bookkeeping structure for binder processes\n */\nstruct binder_proc {\n    struct hlist_node proc_node;                //\u8fdb\u7a0b\u8282\u70b9\n    struct rb_root threads;                     //binder_thread\u7ea2\u9ed1\u6811\u7684\u6839\u8282\u70b9\uff0c\u5b58\u653e\u6307\u9488\uff0c\u6307\u5411\u8fdb\u7a0b\u6240\u6709\u7684binder_thread, \u7528\u4e8eServer\u7aef\n    struct rb_root nodes;                       //binder_node\u7ea2\u9ed1\u6811\u7684\u6839\u8282\u70b9\uff0c\u5b58\u653e\u6307\u9488\uff0c\u6307\u5411\u8fdb\u7a0b\u6240\u6709\u7684binder \u5bf9\u8c61\n    struct rb_root refs_by_desc;                //\u8bb0\u5f55binder\u5f15\u7528, \u4fbf\u4e8e\u5feb\u901f\u67e5\u627e,binder_ref\u7ea2\u9ed1\u6811\u7684\u6839\u8282\u70b9(\u4ee5handle\u4e3akey)\uff0c\u5b83\u662fClient\u5728Binder\u9a71\u52a8\u4e2d\u7684\u4f53\u73b0\n    struct rb_root refs_by_node;                //\u8bb0\u5f55binder\u5f15\u7528, \u4fbf\u4e8e\u5feb\u901f\u67e5\u627e,binder_ref\u7ea2\u9ed1\u6811\u7684\u6839\u8282\u70b9\uff08\u4ee5ptr\u4e3akey\uff09\uff0c\u5b83\u662fClient\u5728Binder\u9a71\u52a8\u4e2d\u7684\u4f53\u73b0\n    struct list_head waiting_threads;\n    int pid;                                    //\u76f8\u5e94\u8fdb\u7a0bid\n    struct task_struct *tsk;                    //\u76f8\u5e94\u8fdb\u7a0b\u7684task\u7ed3\u6784\u4f53\n    struct hlist_node deferred_work_node;\n    int deferred_work;\n    bool is_dead;\n\n    struct list_head todo;                      //\u8fdb\u7a0b\u5c06\u8981\u505a\u7684\u4e8b\n    struct binder_stats stats;                  //binder\u7edf\u8ba1\u4fe1\u606f\n    struct list_head delivered_death;\n    int max_threads;\n    int requested_threads;                      //\u8bf7\u6c42\u7684\u7ebf\u7a0b\u6570\n    int requested_threads_started;              //\u5df2\u542f\u52a8\u7684\u8bf7\u6c42\u7ebf\u7a0b\u6570\n    int tmp_ref;\n    struct binder_priority default_priority;    //\u9ed8\u8ba4\u4f18\u5148\u7ea7\n    struct dentry *debugfs_entry;\n    struct binder_alloc alloc;\n    struct binder_context *context;\n    spinlock_t inner_lock;\n    spinlock_t outer_lock;\n    struct dentry *binderfs_entry;\n};\n</code></pre> <p>\u4e00\u4e2a\u8fdb\u7a0b\u65e2\u5305\u542b\u7684Service\u5bf9\u8c61\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u5bf9\u5176\u4ed6Service\u5bf9\u8c61\u7684\u5f15\u7528. \u5982\u679c\u4f5c\u4e3aService\u5bf9\u8c61\u8fdb\u7a0b\uff0c\u5b83\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2aBinder_Thread\u3002\u8fd9\u4e9b\u4fe1\u606f\u90fd\u5728binder_proc\u7ed3\u6784\u4f53\u8fdb\u884c\u7ba1\u7406\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_buffer","title":"binder_buffer","text":"<pre><code>/**\n * struct binder_buffer - buffer used for binder transactions\n * @entry:              entry alloc-&gt;buffers\n * @rb_node:            node for allocated_buffers/free_buffers rb trees\n * @free:               %true if buffer is free\n * @allow_user_free:    %true if user is allowed to free buffer\n * @async_transaction:  %true if buffer is in use for an async txn\n * @debug_id:           unique ID for debugging\n * @transaction:        pointer to associated struct binder_transaction\n * @target_node:        struct binder_node associated with this buffer\n * @data_size:          size of @transaction data\n * @offsets_size:       size of array of offsets\n * @extra_buffers_size: size of space for other objects (like sg lists)\n * @user_data:          user pointer to base of buffer space\n * @pid:                pid to attribute the buffer to (caller)\n *\n * Bookkeeping structure for binder transaction buffers\n */\nstruct binder_buffer {\n    /* free and allocated entries by address */\n    struct list_head entry;                     //buffer\u5b9e\u4f53\u7684\u5730\u5740\n    /* free entry by size or allocated entry */\n    /* by address */\n    struct rb_node rb_node;                     //buffer\u5b9e\u4f53\u7684\u5730\u5740\n    unsigned free:1;                            //\u6807\u8bb0\u662f\u5426\u662f\u7a7a\u95f2buffer\uff0c\u5360\u4f4d1bit\n    unsigned allow_user_free:1;                 //\u662f\u5426\u5141\u8bb8\u7528\u6237\u91ca\u653e\uff0c\u5360\u4f4d1bit\n    unsigned async_transaction:1;\n    unsigned debug_id:29;\n\n    struct binder_transaction *transaction;     //\u8be5\u7f13\u5b58\u533a\u7684\u9700\u8981\u5904\u7406\u7684\u4e8b\u52a1\n\n    struct binder_node *target_node;            //\u8be5\u7f13\u5b58\u533a\u6240\u9700\u5904\u7406\u7684Binder\u5b9e\u4f53\n    size_t data_size;                           //\u6570\u636e\u5927\u5c0f\n    size_t offsets_size;                        //\u6570\u636e\u504f\u79fb\u91cf\n    size_t extra_buffers_size;\n    void __user *user_data;                     //\u7528\u6237\u6570\u636e\n    int    pid;\n};\n</code></pre> <p>\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9664\u4e86\u547d\u4ee4\uff0c\u8fd8\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4ea4\u6362\uff0c\u8981\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u901a\u5e38\u9700\u8981\u4e24\u6b21\u62f7\u8d1d\uff0c\u8fdb\u7a0bA -&gt; \u5185\u6838 -&gt; \u8fdb\u7a0bB\u3002binder_buffer \u5c31\u662f\u5185\u6838\u91cc\u5b58\u653e\u4ea4\u6362\u6570\u636e\u7684\u7a7a\u95f4\uff08\u8fd9\u4e9b\u6570\u636e\u662f\u4ee5Parcel\u7684\u5f62\u5f0f\u5b58\u5728\uff09\u3002\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0cAndroid \u7684 binder \u53ea\u9700\u8981\u4e00\u6b21\u62f7\u8d1d\uff0c\u56e0\u4e3abinder \u8fdb\u7a0b\u901a\u8fc7mmap\u5c06\u5185\u6838\u7a7a\u95f4\u5730\u5740\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u4ece\u800c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eebinder_buffer\u7684\u5185\u5bb9\u800c\u65e0\u9700\u4e00\u6b21\u989d\u5916\u62f7\u8d1d\u3002binder_buffer\u7531\u5185\u6838\u5728\u6bcf\u6b21\u53d1\u8d77\u7684binder\u8c03\u7528\u521b\u5efa\uff0c\u5e76\u8d4b\u7ed9binder_transaction-&gt;buffer.binder driver \u6839\u636ebinder_transaction \u751f\u4ea7 transaction_data\uff08\u5305\u542bbuffer\u7684\u6307\u9488\u800c\u975e\u5185\u5bb9\uff09, \u5e76\u5c06\u5176\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_thread","title":"binder_thread","text":"<pre><code>/**\n * struct binder_thread - binder thread bookkeeping\n * @proc:                 binder process for this thread\n *                        (invariant after initialization)\n * @rb_node:              element for proc-&gt;threads rbtree\n *                        (protected by @proc-&gt;inner_lock)\n * @waiting_thread_node:  element for @proc-&gt;waiting_threads list\n *                        (protected by @proc-&gt;inner_lock)\n * @pid:                  PID for this thread\n *                        (invariant after initialization)\n * @looper:               bitmap of looping state\n *                        (only accessed by this thread)\n * @looper_needs_return:  looping thread needs to exit driver\n *                        (no lock needed)\n * @transaction_stack:    stack of in-progress transactions for this thread\n *                        (protected by @proc-&gt;inner_lock)\n * @todo:                 list of work to do for this thread\n *                        (protected by @proc-&gt;inner_lock)\n * @process_todo:         whether work in @todo should be processed\n *                        (protected by @proc-&gt;inner_lock)\n * @return_error:         transaction errors reported by this thread\n *                        (only accessed by this thread)\n * @reply_error:          transaction errors reported by target thread\n *                        (protected by @proc-&gt;inner_lock)\n * @wait:                 wait queue for thread work\n * @stats:                per-thread statistics\n *                        (atomics, no lock needed)\n * @tmp_ref:              temporary reference to indicate thread is in use\n *                        (atomic since @proc-&gt;inner_lock cannot\n *                        always be acquired)\n * @is_dead:              thread is dead and awaiting free\n *                        when outstanding transactions are cleaned up\n *                        (protected by @proc-&gt;inner_lock)\n * @task:                 struct task_struct for this thread\n *\n * Bookkeeping structure for binder threads.\n */\nstruct binder_thread {\n    struct binder_proc *proc;   //\u7ebf\u7a0b\u6240\u5c5e\u7684\u8fdb\u7a0b\n    struct rb_node rb_node;         //\u7ea2\u9ed1\u6811\u8282\u70b9\n    struct list_head waiting_thread_node;\n    int pid;                          //\u7ebf\u7a0bpid\n    int looper;               //looper\u7684\u72b6\u6001\n    bool looper_need_return;  \n    struct binder_transaction *transaction_stack;   //\u7ebf\u7a0b\u6b63\u5728\u5904\u7406\u7684\u4e8b\u52a1\n    struct list_head todo;                   //\u5c06\u8981\u5904\u7406\u7684\u94fe\u8868\n    bool process_todo;\n    struct binder_error return_error;   //write\u5931\u8d25\u540e\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u7801\n    struct binder_error reply_error;\n    wait_queue_head_t wait;                 //\u7b49\u5f85\u961f\u5217\u7684\u961f\u5934\n    struct binder_stats stats;          //binder\u7ebf\u7a0b\u7684\u7edf\u8ba1\u4fe1\u606f\n    atomic_t tmp_ref;\n    bool is_dead;\n    struct task_struct *task;\n};\n</code></pre> <p>binder_proc\u91cc\u7684threads \u7ea2\u9ed1\u6811\u5b58\u653e\u7740\u6307\u5411binder_thread\u5bf9\u8c61\u7684\u6307\u9488\u3002\u8fd9\u91cc\u7684binder_thread \u4e0d\u4ec5\u4ec5\u5305\u62ecservice\u7684binder thread\uff0c\u4e5f\u5305\u62ec\u8bbf\u95ee\u5176\u4ed6service\u7684\u8c03\u7528thread\u3002 \u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u4e0ebinder\u76f8\u5173\u7684\u7ebf\u7a0b\u90fd\u4f1a\u5728binder_proc\u7684threads\u7ea2\u9ed1\u6811\u91cc\u7559\u4e0b\u8bb0\u5f55\u3002binder_thread\u91cc\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\u662f transaction_stack \u548c wait\u3002</p> <p>\u5728binder_proc\u91cc\u9762\u6211\u4eec\u4e5f\u80fd\u770b\u5230\u4e00\u4e2await \u961f\u5217\uff0c\u662f\u4e0d\u662f\u610f\u5473\u7740\u7ebf\u7a0b\u65e2\u53ef\u4ee5\u5728proc-&gt;wait\u4e0a\u7b49\u5f85\uff0c\u4e5f\u53ef\u4ee5\u5728thread-&gt;wait\u4e0a\u7b49\u5f85\uff1fbinder driver \u5bf9\u6b64\u6709\u660e\u786e\u7684\u7528\u6cd5\uff0c\u6240\u6709\u7684binder threads (server \u7aef\uff09\u90fd\u7b49\u5f85\u5728proc-&gt;wait\u4e0a\u3002\u56e0\u4e3a\u5bf9\u4e8e\u670d\u52a1\u7aef\u6765\u8bf4\uff0c\u7528\u54ea\u4e2athread\u6765\u54cd\u5e94\u8fdc\u7a0b\u8c03\u7528\u8bf7\u6c42\u90fd\u662f\u4e00\u6837\u7684\u3002\u7136\u800c\u6240\u6709\u7684ref thread(client\u7aef\uff09\u7684\u8fd4\u56de\u7b49\u5f85\u90fd\u53d1\u751f\u5728\u8c03\u7528thread\u7684wait \u961f\u5217\uff0c\u56e0\u4e3a\uff0c\u5f53\u67d0\u4e2abinder thread \u5b8c\u6210\u670d\u52a1\u8bf7\u6c42\u540e\uff0c\u4ed6\u5fc5\u987b\u5524\u9192\u7279\u5b9a\u7684\u7b49\u5f85\u8fd4\u56de\u7684\u7ebf\u7a0b\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u5728\u53cc\u5411\u8c03\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u67d0\u4e2aServer\u7aef\u7684thread\u5c06\u4f1a\u6302\u5728thread-&gt;wait\u4e0a\u7b49\u5f85\uff0c\u800c\u4e0d\u662fproc-&gt;wait. \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u4e24\u4e2a\u8fdb\u7a0bP1 \u548c P2\uff0c\u5404\u81ea\u8fd0\u884c\u4e86\u4e00\u4e2aService\uff0c S1\uff0cS2\uff0c P1 \u5728 thread T1 \u91cc\u8c03\u7528S2\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u7136\u540e\u5728T1-&gt;wait\u91cc\u7b49\u5f85\u8fd4\u56de\u3002S2\u7684\u670d\u52a1\u5728P2\u7684binder thread(T2)\u91cc\u6267\u884c\uff0c\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0cS2\u53c8\u8c03\u5230S1\u91cc\u7684\u67d0\u4e2a\u63a5\u53e3\uff0c\u6309\u7406S1 \u5c06\u5728P1\u7684binder thread T3\u91cc\u6267\u884c\uff0c \u5982\u679cP1\u63a5\u4e0b\u6765\u53c8\u8c03\u5230\u4e86P2\uff0c\u90a3\u53c8\u4f1a\u4ea7\u751f\u65b0\u7684\u8fdb\u7a0b T4\uff0c \u5982\u679c\u8fd9\u4e2a\u53cd\u590d\u8c03\u7528\u6808\u5f88\u6df1\uff0c\u9700\u8981\u8017\u8d39\u5927\u91cf\u7684\u7ebf\u7a0b\uff0c\u663e\u7136\u8fd9\u662f\u975e\u5e38\u4e0d\u9ad8\u6548\u7684\u8bbe\u8ba1\u3002\u6240\u4ee5\uff0cbinder driver \u91cc\u505a\u4e86\u7279\u6b8a\u7684\u5904\u7406\u3002\u5f53T2 \u8c03\u7528 S1\u7684\u63a5\u53e3\u51fd\u6570\u65f6\uff0cbinder driver \u4f1a\u904d\u5386T2\u7684transaction_stack, \u5982\u679c\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u8c03\u7528\uff08binder_transaction-&gt;from-&gt;proc \u7b49\u4e8eP1), \u4fbf\u4f1a\u5524\u9192\u6b63\u5728\u7b49\u5f85reply\u7684T1\uff0cT1 \u5b8c\u6210\u8fd9\u4e2a\u8bf7\u6c42\u540e\uff0c\u7ee7\u7eed\u7b49\u5f85S2\u7684\u56de\u590d\u3002\u8fd9\u6837\uff0c\u53ea\u9700\u8981\u6700\u591a\u4e24\u4e2aThread\u5c31\u53ef\u4ee5\u5b8c\u6210\u591a\u5c42\u7684\u53cc\u5411\u8c03\u7528\u3002</p> <p>binder_thread\u91cc\u7684transaction_stack \u662f\u7528\u94fe\u8868\u5b9e\u73b0\u7684\u5806\u6808\uff0c \u8c03\u7528\u7ebf\u7a0b\u548c\u670d\u52a1\u7ebf\u7a0b\u7684transaction\u6709\u7740\u4e0d\u540c\u7684\u5806\u6808\u3002\u4e0b\u56fe\u662f\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u5806\u6808\u60c5\u5f62\uff1a</p> <p></p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_3","title":"\u5173\u7cfb","text":"","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_4","title":"\u534f\u8bae","text":"<p>Binder\u534f\u8bae\u53ef\u4ee5\u5206\u4e3a\u63a7\u5236\u534f\u8bae\u548c\u9a71\u52a8\u534f\u8bae\u4e24\u7c7b\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_5","title":"\u63a7\u5236\u534f\u8bae","text":"<p>\u63a7\u5236\u534f\u8bae\u662f\u8fdb\u7a0b\u901a\u8fc7ioctl(\u201c/dev/binder\u201d) \u4e0eBinder\u8bbe\u5907\u8fdb\u884c\u901a\u8baf\u7684\u534f\u8bae\uff0c\u8be5\u534f\u8bae\u5305\u542b\u4ee5\u4e0b\u51e0\u79cd\u547d\u4ee4\uff1a</p> <pre><code>#define BINDER_WRITE_READ       _IOWR('b', 1, struct binder_write_read)\n#define BINDER_SET_IDLE_TIMEOUT     _IOW('b', 3, __s64)\n#define BINDER_SET_MAX_THREADS      _IOW('b', 5, __u32)\n#define BINDER_SET_IDLE_PRIORITY    _IOW('b', 6, __s32)\n#define BINDER_SET_CONTEXT_MGR      _IOW('b', 7, __s32)\n#define BINDER_THREAD_EXIT      _IOW('b', 8, __s32)\n#define BINDER_VERSION          _IOWR('b', 9, struct binder_version)\n#define BINDER_GET_NODE_DEBUG_INFO  _IOWR('b', 11, struct binder_node_debug_info)\n#define BINDER_GET_NODE_INFO_FOR_REF    _IOWR('b', 12, struct binder_node_info_for_ref)\n#define BINDER_SET_CONTEXT_MGR_EXT  _IOW('b', 13, struct flat_binder_object)\n</code></pre> <p>\u8fd9\u4e9bBinder IOCTL\u7801\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> \u547d\u4ee4 \u8bf4\u660e \u53c2\u6570\u7c7b\u578b BINDER_WRITE_READ \u8bfb\u5199\u64cd\u4f5c\uff0c\u6700\u5e38\u7528\u7684\u547d\u4ee4\u3002IPC\u8fc7\u7a0b\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u547d\u4ee4\u8fdb\u884c\u6570\u636e\u4f20\u9012 binder_write_read BINDER_SET_MAX_THREADS \u8bbe\u7f6e\u8fdb\u7a0b\u652f\u6301\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u91cf size_t BINDER_SET_CONTEXT_MGR \u8bbe\u7f6e\u81ea\u8eab\u4e3aServiceManager \u65e0 BINDER_THREAD_EXIT \u901a\u77e5\u9a71\u52a8Binder\u7ebf\u7a0b\u9000\u51fa \u65e0 BINDER_VERSION \u83b7\u53d6Binder\u9a71\u52a8\u7684\u7248\u672c\u53f7 binder_version BINDER_SET_IDLE_PRIORITY \u6682\u672a\u7528\u5230 - BINDER_SET_IDLE_TIMEOUT \u6682\u672a\u7528\u5230 -","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_6","title":"\u9a71\u52a8\u534f\u8bae","text":"<p>Binder\u7684\u9a71\u52a8\u534f\u8bae\u63cf\u8ff0\u4e86\u5bf9\u4e8eBinder\u9a71\u52a8\u7684\u5177\u4f53\u4f7f\u7528\u8fc7\u7a0b\u3002\u9a71\u52a8\u534f\u8bae\u53c8\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a</p> <ul> <li>\u4e00\u7c7b\u662fbinder_driver_command_protocol\uff0c\u63cf\u8ff0\u4e86\u8fdb\u7a0b\u53d1\u9001\u7ed9Binder\u9a71\u52a8\u7684\u547d\u4ee4\uff1b\u4e5f\u79f0BC\u7801</li> <li>\u4e00\u7c7b\u662fbinder_driver_return_protocol\uff0c\u63cf\u8ff0\u4e86Binder\u9a71\u52a8\u53d1\u9001\u7ed9\u8fdb\u7a0b\u7684\u547d\u4ee4\uff1b\u4e5f\u79f0BR\u7801</li> </ul>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#bc","title":"BC\u7801","text":"<p>BC\u7801\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> \u547d\u4ee4 \u8bf4\u660e \u53c2\u6570\u7c7b\u578b BC_TRANSACTION Binder\u4e8b\u52a1\uff0c\u5373\uff1aClient\u5bf9\u4e8eServer\u7684\u8bf7\u6c42 binder_transaction_data BC_REPLY \u4e8b\u52a1\u7684\u5e94\u7b54\uff0c\u5373\uff1aServer\u5bf9\u4e8eClient\u7684\u56de\u590d binder_transaction_data BC_FREE_BUFFER \u901a\u77e5\u9a71\u52a8\u91ca\u653eBuffer binder_uintptr_t BC_ACQUIRE \u5f3a\u5f15\u7528\u8ba1\u6570+1 u32 BC_RELEASE \u5f3a\u5f15\u7528\u8ba1\u6570-1 u32 BC_INCREFS \u5f31\u5f15\u7528\u8ba1\u6570+1 u32 BC_DECREFS \u5f31\u5f15\u7528\u8ba1\u6570-1 u32 BC_ACQUIRE_DONE BR_ACQUIRE\u7684\u56de\u590d binder_ptr_cookie BC_INCREFS_DONE BR_INCREFS\u7684\u56de\u590d binder_ptr_cookie BC_ENTER_LOOPER \u901a\u77e5\u9a71\u52a8\u4e3b\u7ebf\u7a0bready void BC_REGISTER_LOOPER \u901a\u77e5\u9a71\u52a8\u5b50\u7ebf\u7a0bready void BC_EXIT_LOOPER \u901a\u77e5\u9a71\u52a8\u7ebf\u7a0b\u5df2\u7ecf\u9000\u51fa void BC_REQUEST_DEATH_NOTIFICATION \u8bf7\u6c42\u63a5\u6536\u6b7b\u4ea1\u901a\u77e5 binder_handle_cookie BC_CLEAR_DEATH_NOTIFICATION \u53bb\u9664\u63a5\u6536\u6b7b\u4ea1\u901a\u77e5 binder_handle_cookie BC_DEAD_BINDER_DONE \u5df2\u7ecf\u5904\u7406\u5b8c\u6b7b\u4ea1\u901a\u77e5 binder_uintptr_t BC_ATTEMPT_ACQUIRE \u6682\u672a\u5b9e\u73b0 - BC_ACQUIRE_RESULT \u6682\u672a\u5b9e\u73b0 - <p>\u8868\u683c\u4e2d\u53c2\u6570\u7c7b\u578b\uff1au32 \u5e94\u8be5\u662f __u32 \uff0c\u8fd9\u91cc\u4f7f\u7528 u32 \u662f\u56e0\u4e3a\u5982\u679c\u7528 __u32 \uff0ctable \u5c31\u6709\u95ee\u9898\u3002\u4f30\u8ba1\u662f _\u5f00\u5934\u89e6\u53d1\u4e86 obsidian \u7684\u8bed\u6cd5\u3002\u5728\u522b\u7684 markdown \u7f16\u8f91\u5668\u662f\u6ca1\u8fd9\u4e2a\u95ee\u9898\u7684\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#br","title":"BR\u7801","text":"<p>BR\u7801\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> \u8fd4\u56de\u7c7b\u578b \u8bf4\u660e \u53c2\u6570\u7c7b\u578b BR_OK \u64cd\u4f5c\u5b8c\u6210 void BR_NOOP \u64cd\u4f5c\u5b8c\u6210 void BR_ERROR \u53d1\u751f\u9519\u8bef s32 BR_TRANSACTION \u901a\u77e5\u8fdb\u7a0b\u6536\u5230\u4e00\u6b21Binder\u8bf7\u6c42\uff08Server\u7aef\uff09 binder_transaction_data BR_REPLY \u901a\u77e5\u8fdb\u7a0b\u6536\u5230Binder\u8bf7\u6c42\u7684\u56de\u590d\uff08Client\uff09 binder_transaction_data BR_TRANSACTION_COMPLETE \u9a71\u52a8\u5bf9\u4e8e\u63a5\u53d7\u8bf7\u6c42\u7684\u786e\u8ba4\u56de\u590d void BR_FAILED_REPLY \u544a\u77e5\u53d1\u9001\u65b9\u901a\u4fe1\u76ee\u6807\u4e0d\u5b58\u5728 void BR_SPAWN_LOOPER \u901a\u77e5Binder\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b void BR_ACQUIRE \u5f3a\u5f15\u7528\u8ba1\u6570+1\u8bf7\u6c42 binder_ptr_cookie BR_RELEASE \u5f3a\u5f15\u7528\u8ba1\u6570-1\u8bf7\u6c42 binder_ptr_cookie BR_INCREFS \u5f31\u5f15\u7528\u8ba1\u6570+1\u8bf7\u6c42 binder_ptr_cookie BR_DECREFS \u82e5\u5f15\u7528\u8ba1\u6570-1\u8bf7\u6c42 binder_ptr_cookie BR_DEAD_BINDER \u53d1\u9001\u6b7b\u4ea1\u901a\u77e5 binder_uintptr_t BR_CLEAR_DEATH_NOTIFICATION_DONE \u6e05\u7406\u6b7b\u4ea1\u901a\u77e5\u5b8c\u6210 binder_uintptr_t BR_DEAD_REPLY \u544a\u77e5\u53d1\u9001\u65b9\u5bf9\u65b9\u5df2\u7ecf\u6b7b\u4ea1 void BR_ACQUIRE_RESULT \u6682\u672a\u5b9e\u73b0 - BR_ATTEMPT_ACQUIRE \u6682\u672a\u5b9e\u73b0 - BR_FINISHED \u6682\u672a\u5b9e\u73b0 - <p>\u8868\u683c\u4e2d\u53c2\u6570\u7c7b\u578b\uff1as32 \u5e94\u8be5\u662f __s32 \uff0c\u8fd9\u91cc\u4f7f\u7528 s32 \u662f\u56e0\u4e3a\u5982\u679c\u7528 __s32 \uff0ctable \u5c31\u6709\u95ee\u9898\u3002\u4f30\u8ba1\u662f _\u5f00\u5934\u89e6\u53d1\u4e86 obsidian \u7684\u8bed\u6cd5\u3002\u5728\u522b\u7684 markdown \u7f16\u8f91\u5668\u662f\u6ca1\u8fd9\u4e2a\u95ee\u9898\u7684\u3002</p> <p>\u5355\u72ec\u770b\u4e0a\u9762\u7684\u534f\u8bae\u53ef\u80fd\u5f88\u96be\u7406\u89e3\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e00\u6b21Binder\u8bf7\u6c42\u8fc7\u7a0b\u6765\u8be6\u7ec6\u770b\u4e00\u4e0bBinder\u534f\u8bae\u662f\u5982\u4f55\u901a\u4fe1\u7684\uff0c\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\u3002</p> <p></p> <p>\u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a</p> <ul> <li>Binder\u662fC/S\u67b6\u6784\u7684\uff0c\u901a\u4fe1\u8fc7\u7a0b\u7275\u6d89\u5230\uff1aClient\uff0cServer\u4ee5\u53caBinder\u9a71\u52a8\u4e09\u4e2a\u89d2\u8272</li> <li>Client\u5bf9\u4e8eServer\u7684\u8bf7\u6c42\u4ee5\u53caServer\u5bf9\u4e8eClient\u56de\u590d\u90fd\u9700\u8981\u901a\u8fc7Binder\u9a71\u52a8\u6765\u4e2d\u8f6c\u6570\u636e</li> <li>BC_XXX\u547d\u4ee4\u662f\u8fdb\u7a0b\u53d1\u9001\u7ed9\u9a71\u52a8\u7684\u547d\u4ee4</li> <li>BR_XXX\u547d\u4ee4\u662f\u9a71\u52a8\u53d1\u9001\u7ed9\u8fdb\u7a0b\u7684\u547d\u4ee4</li> <li>\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u7531Binder\u9a71\u52a8\u63a7\u5236</li> </ul> <p>\u901a\u8fc7\u4e0a\u9762\u7684Binder\u534f\u8bae\u7684\u8bf4\u660e\u8868\u4e2d\u6211\u4eec\u770b\u5230\uff0cBinder\u534f\u8bae\u7684\u901a\u4fe1\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u53d1\u9001\u8bf7\u6c42\u548c\u63a5\u53d7\u6570\u636e\u8fd9\u4e9b\u547d\u4ee4\u3002\u540c\u65f6\u5305\u62ec\u4e86\u5bf9\u4e8e\u5f15\u7528\u8ba1\u6570\u7684\u7ba1\u7406\u548c\u5bf9\u4e8e\u6b7b\u4ea1\u901a\u77e5\u7684\u7ba1\u7406\uff08\u544a\u77e5\u4e00\u65b9\uff0c\u901a\u8baf\u7684\u53e6\u5916\u4e00\u65b9\u5df2\u7ecf\u6b7b\u4ea1\uff09\u7b49\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u7684\u901a\u4fe1\u8fc7\u7a0b\u548c\u4e0a\u9762\u8fd9\u5e45\u56fe\u662f\u7c7b\u4f3c\u7684\uff1a\u4e00\u65b9\u53d1\u9001BC_XXX\uff0c\u7136\u540e\u7531\u9a71\u52a8\u63a7\u5236\u901a\u4fe1\u8fc7\u7a0b\uff0c\u63a5\u7740\u53d1\u9001\u5bf9\u5e94\u7684BR_XXX\u547d\u4ee4\u7ed9\u901a\u4fe1\u7684\u53e6\u5916\u4e00\u65b9\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder-init","title":"Binder init","text":"<p>\u5185\u6838\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u8c03\u7528\u5230device_initcall()\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4ece\u800c\u542f\u52a8binder_init\u3002binder_init()\u4e3b\u8981\u8d1f\u8d23\u6ce8\u518cmisc\u8bbe\u5907,\u901a\u8fc7\u8c03\u7528misc_register()\u6765\u5b9e\u73b0\u3002</p> <pre><code>static int __init binder_init(void)\n{\n    int ret;\n    char *device_name, *device_tmp;\n    struct binder_device *device;\n    struct hlist_node *tmp;\n    char *device_names = NULL;\n\n    ret = binder_alloc_shrinker_init();\n    if (ret)\n        return ret;\n\n    atomic_set(&amp;binder_transaction_log.cur, ~0U);\n    atomic_set(&amp;binder_transaction_log_failed.cur, ~0U);\n\n    /**\n     * \u5728debugfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u8fd4\u56de\u503c\u662f\u6307\u5411dentry\u7684\u6307\u9488\n     * \u5728\u624b\u673a\u5bf9\u5e94\u7684\u76ee\u5f55\uff1a/sys/kernel/debug/binder \u91cc\u9762\u521b\u5efa\u4e86\u51e0\u4e2a\u6587\u4ef6\uff0c\u7528\u6765\u8bb0\u5f55binder\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u4fe1\u606f\u548c\u65e5\u5fd7 \n     */\n    binder_debugfs_dir_entry_root = debugfs_create_dir(\"binder\", NULL);\n    if (binder_debugfs_dir_entry_root)\n        binder_debugfs_dir_entry_proc = debugfs_create_dir(\"proc\",\n                         binder_debugfs_dir_entry_root);\n\n    if (binder_debugfs_dir_entry_root) {\n        debugfs_create_file(\"state\",\n                    0444,\n                    binder_debugfs_dir_entry_root,\n                    NULL,\n                    &amp;binder_state_fops);\n        debugfs_create_file(\"stats\",\n                    0444,\n                    binder_debugfs_dir_entry_root,\n                    NULL,\n                    &amp;binder_stats_fops);\n        debugfs_create_file(\"transactions\",\n                    0444,\n                    binder_debugfs_dir_entry_root,\n                    NULL,\n                    &amp;binder_transactions_fops);\n        debugfs_create_file(\"transaction_log\",\n                    0444,\n                    binder_debugfs_dir_entry_root,\n                    &amp;binder_transaction_log,\n                    &amp;binder_transaction_log_fops);\n        debugfs_create_file(\"failed_transaction_log\",\n                    0444,\n                    binder_debugfs_dir_entry_root,\n                    &amp;binder_transaction_log_failed,\n                    &amp;binder_transaction_log_fops);\n    }\n\n    if (!IS_ENABLED(CONFIG_ANDROID_BINDERFS) &amp;&amp;\n        strcmp(binder_devices_param, \"\") != 0) {\n        /*\n        * Copy the module_parameter string, because we don't want to\n        * tokenize it in-place.\n         */\n        device_names = kstrdup(binder_devices_param, GFP_KERNEL);\n        if (!device_names) {\n            ret = -ENOMEM;\n            goto err_alloc_device_names_failed;\n        }\n\n        /**\n         * Android8.0 \u4e2d\u5f15\u5165\u4e86hwbinder\uff0cvndbinder\uff0c\u6240\u4ee5\u73b0\u5728\u6709\u4e09\u4e2abinder\uff0c\u5206\u522b\u9700\u8981\u521b\u5efa\u4e09\u4e2abinder device:\n         * \u5faa\u73af\u6ce8\u518cbinder \u7684\u4e09\u4e2a\u8bbe\u5907\uff1a\n         * /dev/binder\n         * /dev/hwbinder\n         * /dev/vndbinder\n         */\n        device_tmp = device_names;\n        while ((device_name = strsep(&amp;device_tmp, \",\"))) {\n            ret = init_binder_device(device_name);\n            if (ret)\n                goto err_init_binder_device_failed;\n        }\n    }\n\n    ret = init_binderfs();\n    if (ret)\n        goto err_init_binder_device_failed;\n\n    return ret;\n\nerr_init_binder_device_failed:\n    hlist_for_each_entry_safe(device, tmp, &amp;binder_devices, hlist) {\n        misc_deregister(&amp;device-&gt;miscdev);\n        hlist_del(&amp;device-&gt;hlist);\n        kfree(device);\n    }\n\n    kfree(device_names);\n\nerr_alloc_device_names_failed:\n    debugfs_remove_recursive(binder_debugfs_dir_entry_root);\n\n    return ret;\n}\n</code></pre> <p>\u5176\u5b9ebinder_init()\u4e2d\u6700\u91cd\u8981\u7684\u662f\u521b\u5efa\u8bbe\u5907\u6587\u4ef6\u7684\u51fd\u6570misc_register(&amp;device-&gt;miscdev); \u4e5f\u5c31\u662f\u5c06device-&gt;miscdev\u6ce8\u518c\u4e3amisc\u8bbe\u5907\u3002</p> <pre><code>struct miscdevice  {\n    int minor;                          //\u6b21\u8bbe\u5907\u53f7 \u52a8\u6001\u5206\u914d MISC_DYNAMIC_MINOR\n    const char *name;                   //\u8bbe\u5907\u540d\u5982/dev/binder\u3001/dev/hwbinder\u3001/dev/vndbinder\"\n    const struct file_operations *fops; //\u8bbe\u5907\u7684\u6587\u4ef6\u64cd\u4f5c\u7ed3\u6784\uff0c\u8fd9\u662ffile_operations\u7ed3\u6784\n    struct list_head list;\n    struct device *parent;\n    struct device *this_device;\n    const struct attribute_group **groups;\n    const char *nodename;\n    umode_t mode;\n}\n\n/**\n * struct binder_device - information about a binder device node\n * @hlist:          list of binder devices (only used for devices requested via\n *                  CONFIG_ANDROID_BINDER_DEVICES)\n * @miscdev:        information about a binder character device node\n * @context:        binder context information\n * @binderfs_inode: This is the inode of the root dentry of the super block\n *                  belonging to a binderfs mount.\n */\nstruct binder_device {\n    struct hlist_node hlist;\n    struct miscdevice miscdev;\n    struct binder_context context;\n    struct inode *binderfs_inode;\n    refcount_t ref;\n};\n\nconst struct file_operations binder_fops = {\n    .owner = THIS_MODULE,\n    .poll = binder_poll,\n    .unlocked_ioctl = binder_ioctl,\n    .compat_ioctl = binder_ioctl,\n    .mmap = binder_mmap,\n    .open = binder_open,\n    .flush = binder_flush,\n    .release = binder_release,\n};\n\n\nstatic int __init init_binder_device(const char *name)\n{\n    int ret;\n    struct binder_device *binder_device;\n\n    binder_device = kzalloc(sizeof(*binder_device), GFP_KERNEL);\n    if (!binder_device)\n        return -ENOMEM;\n\n    binder_device-&gt;miscdev.fops = &amp;binder_fops;\n    binder_device-&gt;miscdev.minor = MISC_DYNAMIC_MINOR;\n    binder_device-&gt;miscdev.name = name;\n\n    refcount_set(&amp;binder_device-&gt;ref, 1);\n    binder_device-&gt;context.binder_context_mgr_uid = INVALID_UID;\n    binder_device-&gt;context.name = name;\n    mutex_init(&amp;binder_device-&gt;context.context_mgr_node_lock);\n\n    ret = misc_register(&amp;binder_device-&gt;miscdev);\n    if (ret &lt; 0) {\n        kfree(binder_device);\n        return ret;\n    }\n\n    hlist_add_head(&amp;binder_device-&gt;hlist, &amp;binder_devices);\n\n    return ret;\n}\n</code></pre> <p>binder_device\u7ed3\u6784\u4f53\u5305\u542b\u4e86\u4e00\u4e2a\u54c8\u5e0c\u94fe\u8868\u3001\u4e00\u4e2amisc\u8bbe\u5907\u7ed3\u6784\u3001\u4e00\u4e2abinder context\u7b49</p> <p>miscdevice\u7ed3\u6784\u4f53\u6211\u4eec\u4e3b\u8981\u5173\u6ce8name\uff0cfops\uff1b\u5176\u4e2dname\u5c31\u662f\u8bbe\u5907\u540d\u5982/dev/binder\u3001/dev/hwbinder\u3001/dev/vndbinder\uff1bfops\u8bbe\u5907\u7684\u6587\u4ef6\u64cd\u4f5c\u7ed3\u6784\uff0c\u4f5c\u7528\u662f\u6807\u8bc6\u5f53\u524d\u8bbe\u5907\u7684\u64cd\u4f5c\u51fd\u6570\u3002\u4ece\u8fd9\u4e2a\u6210\u5458\u53d8\u91cf\u7684\u5b9a\u4e49\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u8bbe\u5907\u6240\u5177\u5907\u7684\u63a5\u53e3\uff0c\u5982binder_fops\u4e2d\u53ef\u4ee5\u770b\u5230\u6709binder_ioctl\u3001binder_open\u548cbinder_mmap\u7b49\u63a5\u53e3\u3002\u5f53\u6211\u4eec\u5bf9\u8fd9\u4e2a\u8bbe\u5907\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u5176\u4e2d\u7684\u51fd\u6570\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder-open","title":"Binder open","text":"<p>\u4efb\u4f55\u8fdb\u7a0b\u5728\u4f7f\u7528Binder\u4e4b\u524d\uff0c\u90fd\u9700\u8981\u5148\u901a\u8fc7open(\"/dev/binder\")\u6253\u5f00Binder\u8bbe\u5907\u3002\u4e0a\u6587\u5df2\u7ecf\u63d0\u5230\uff0c\u7528\u6237\u7a7a\u95f4\u7684open\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u4e86\u9a71\u52a8\u4e2d\u7684binder_open\u51fd\u6570\u3002\u5728\u8fd9\u4e2a\u51fd\u6570\uff0cBinder\u9a71\u52a8\u4f1a\u4e3a\u8c03\u7528\u7684\u8fdb\u7a0b\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\u3002binder_open\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>static int binder_open(struct inode *nodp, struct file *filp)\n{\n    struct binder_proc *proc, *itr;//binder\u8fdb\u7a0b\n    struct binder_device *binder_dev;//binder device\n    struct binderfs_info *info;\n    struct dentry *binder_binderfs_dir_entry_proc = NULL;\n    bool existing_pid = false;\n\n    binder_debug(BINDER_DEBUG_OPEN_CLOSE, \"%s: %d:%d\\n\", __func__,\n             current-&gt;group_leader-&gt;pid, current-&gt;pid);\n\n    /**\n     * \u4e3abinder_proc\u7ed3\u6784\u4f53\u5728\u5206\u914dkernel\u5185\u5b58\u7a7a\u95f4\n     */\n    proc = kzalloc(sizeof(*proc), GFP_KERNEL);\n    if (proc == NULL)\n        return -ENOMEM;\n    spin_lock_init(&amp;proc-&gt;inner_lock);\n    spin_lock_init(&amp;proc-&gt;outer_lock);\n    get_task_struct(current-&gt;group_leader);//\u589e\u52a0\u7ebf\u7a0b\u5f15\u7528\u8ba1\u6570\n    proc-&gt;tsk = current-&gt;group_leader;//\u5c06\u5f53\u524d\u7ebf\u7a0b\u7684task\u4fdd\u5b58\u5230binder\u8fdb\u7a0b\u7684tsk\n    INIT_LIST_HEAD(&amp;proc-&gt;todo);//\u521d\u59cb\u5316todo\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u653e\u5f85\u5904\u7406\u7684\u8bf7\u6c42\uff08server\u7aef\uff09\n    if (binder_supported_policy(current-&gt;policy)) {\n        proc-&gt;default_priority.sched_policy = current-&gt;policy;\n        proc-&gt;default_priority.prio = current-&gt;normal_prio;\n    } else {\n        proc-&gt;default_priority.sched_policy = SCHED_NORMAL;\n        proc-&gt;default_priority.prio = NICE_TO_PRIO(0);\n    }\n\n    /* binderfs stashes devices in i_private */\n    if (is_binderfs_device(nodp)) {\n        binder_dev = nodp-&gt;i_private;\n        info = nodp-&gt;i_sb-&gt;s_fs_info;\n        binder_binderfs_dir_entry_proc = info-&gt;proc_log_dir;\n    } else {\n        binder_dev = container_of(filp-&gt;private_data,\n                      struct binder_device, miscdev);\n    }\n    refcount_inc(&amp;binder_dev-&gt;ref);\n    proc-&gt;context = &amp;binder_dev-&gt;context;//\u62ff\u5230binder device\u7684context\uff0c\u4f20\u7ed9binder_proc\n    binder_alloc_init(&amp;proc-&gt;alloc);\n\n    binder_stats_created(BINDER_STAT_PROC);//\u7c7b\u578b\u4e3aBINDER_STAT_PROC\u5bf9\u8c61\u7684\u521b\u5efa\u4e2a\u6570\u52a01\n    proc-&gt;pid = current-&gt;group_leader-&gt;pid;//\u8bb0\u5f55\u5f53\u524d\u8fdb\u7a0b\u7684pid\n    INIT_LIST_HEAD(&amp;proc-&gt;delivered_death);\n    INIT_LIST_HEAD(&amp;proc-&gt;waiting_threads);\n    filp-&gt;private_data = proc;//\u5c06binder_proc\u5b58\u653e\u5728filp\u7684private_data\u57df\uff0c\u4ee5\u4fbf\u4e8e\u5728\u4e4b\u540e\u7684mmap\u3001ioctl\u4e2d\u83b7\u53d6\n\n    mutex_lock(&amp;binder_procs_lock);\n    hlist_for_each_entry(itr, &amp;binder_procs, proc_node) {\n        if (itr-&gt;pid == proc-&gt;pid) {\n            existing_pid = true;\n            break;\n        }\n    }\n    hlist_add_head(&amp;proc-&gt;proc_node, &amp;binder_procs);//\u5c06proc_node\u8282\u70b9\u6dfb\u52a0\u5230binder_procs\u4e3a\u8868\u5934\u7684\u961f\u5217\n    mutex_unlock(&amp;binder_procs_lock);\n\n    //\u5982\u679c/sys/kernel/debug/binder/proc \u76ee\u5f55\u5b58\u5728\uff0c\u5e76\u4e14pid\u4e0d\u5b58\u5728\n    //\u5728\u8be5\u76ee\u5f55\u4e2d\u521b\u5efa\u76f8\u5e94pid\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u540d\u79f0\u4e3apid\uff0c\u7528\u6765\u8bb0\u5f55binder_proc\u7684\u72b6\u6001\n    if (binder_debugfs_dir_entry_proc &amp;&amp; !existing_pid) {\n        char strbuf[11];\n\n        snprintf(strbuf, sizeof(strbuf), \"%u\", proc-&gt;pid);\n        /*\n         * proc debug entries are shared between contexts.\n         * Only create for the first PID to avoid debugfs log spamming\n         * The printing code will anyway print all contexts for a given\n         * PID so this is not a problem.\n         */\n        proc-&gt;debugfs_entry = debugfs_create_file(strbuf, 0444,\n            binder_debugfs_dir_entry_proc,\n            (void *)(unsigned long)proc-&gt;pid,\n            &amp;proc_fops);\n    }\n\n    if (binder_binderfs_dir_entry_proc &amp;&amp; !existing_pid) {\n        char strbuf[11];\n        struct dentry *binderfs_entry;\n\n        snprintf(strbuf, sizeof(strbuf), \"%u\", proc-&gt;pid);\n        /*\n         * Similar to debugfs, the process specific log file is shared\n         * between contexts. Only create for the first PID.\n         * This is ok since same as debugfs, the log file will contain\n         * information on all contexts of a given PID.\n         */\n        binderfs_entry = binderfs_create_file(binder_binderfs_dir_entry_proc,\n            strbuf, &amp;proc_fops, (void *)(unsigned long)proc-&gt;pid);\n        if (!IS_ERR(binderfs_entry)) {\n            proc-&gt;binderfs_entry = binderfs_entry;\n        } else {\n            int error;\n\n            error = PTR_ERR(binderfs_entry);\n            pr_warn(\"Unable to create file %s in binderfs (error %d)\\n\",\n                strbuf, error);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>**binder_open()**\u804c\u8d23\u5982\u4e0b\uff1a</p> <ul> <li>\u9996\u5148\u521b\u5efa\u4e86binder_proc\u7ed3\u6784\u4f53\u5b9e\u4f8bproc</li> <li>\u63a5\u7740\u5f00\u59cb\u521d\u59cb\u5316\u4e00\u7cfb\u5217\u6210\u5458\uff1atsk, todo, default_priority, pid\uff0c delivered_death\u7b49</li> <li>\u66f4\u65b0\u4e86\u7edf\u8ba1\u6570\u636e\uff1abinder_proc\u7684\u521b\u5efa\u4e2a\u6570\u52a01</li> <li>\u7d27\u63a5\u7740\u5c06\u521d\u59cb\u5316\u597d\u7684proc\uff0c\u5b58\u653e\u5230\u6587\u4ef6\u6307\u9488filp-&gt;private_data\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u5728\u4e4b\u540e\u7684mmap\u3001ioctl\u4e2d\u83b7\u53d6</li> <li>\u5c06binder_proc\u94fe\u5165binder_procs\u54c8\u5e0c\u94fe\u8868\u4e2d</li> <li>\u6700\u540e\u67e5\u770b\u662f\u5426\u521b\u5efa\u7684\u4e86/sys/kernel/debug/binde/proc/\u76ee\u5f55\uff0c\u6709\u7684\u8bdd\u518d\u521b\u5efa\u4e00\u4e2a/sys/kernel/debug/binde/proc/pid\u6587\u4ef6\uff0c\u7528\u6765\u8bb0\u5f55binder_proc\u7684\u72b6\u6001</li> </ul> <p></p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder-mmap","title":"Binder mmap","text":"<p>\u4e0eopen\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u7684mmap\u64cd\u4f5c\u5bf9\u5e94\u4e86Binder\u9a71\u52a8\u4e2dbinder_fops\u7684mmap\uff0c\u4e5f\u5c31\u662fbinder_mmap()\u3002\u5176\u7684\u4f5c\u7528\u6709\u5982\u4e0b\u4e24\u4e2a\uff1a</p> <ul> <li>\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u6765\u63a5\u6536Binder\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u3002</li> <li>\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u5730\u5740\u6620\u5c04\uff0c\u4ee5\u4fbf\u5c06\u6765\u8bbf\u95ee\u3002</li> </ul> <pre><code>static int binder_mmap(struct file *filp, struct vm_area_struct *vma)\n{\n    int ret;\n    struct binder_proc *proc = filp-&gt;private_data;//private_data\u4fdd\u5b58\u4e86\u6211\u4eecopen\u8bbe\u5907\u65f6\u521b\u5efa\u7684binder_proc\u4fe1\u606f\n    const char *failure_string;\n\n    if (proc-&gt;tsk != current-&gt;group_leader)\n        return -EINVAL;\n\n    binder_debug(BINDER_DEBUG_OPEN_CLOSE,\n             \"%s: %d %lx-%lx (%ld K) vma %lx pagep %lx\\n\",\n             __func__, proc-&gt;pid, vma-&gt;vm_start, vma-&gt;vm_end,\n             (vma-&gt;vm_end - vma-&gt;vm_start) / SZ_1K, vma-&gt;vm_flags,\n             (unsigned long)pgprot_val(vma-&gt;vm_page_prot));\n\n    //mmap \u7684 buffer \u7981\u6b62\u7528\u6237\u8fdb\u884c\u5199\u64cd\u4f5c\u3002mmap \u53ea\u662f\u4e3a\u4e86\u5206\u914d\u5185\u6838\u7a7a\u95f4\uff0c\u4f20\u9012\u6570\u636e\u901a\u8fc7 ioctl()\n    if (vma-&gt;vm_flags &amp; FORBIDDEN_MMAP_FLAGS) {\n        ret = -EPERM;\n        failure_string = \"bad vm_flags\";\n        goto err_bad_arg;\n    }\n    // \u5c06 VM_DONTCOP \u7f6e\u8d77\uff0c\u7981\u6b62 \u62f7\u8d1d\uff0c\u7981\u6b62 \u5199\u64cd\u4f5c\n    vma-&gt;vm_flags |= VM_DONTCOPY | VM_MIXEDMAP;\n    vma-&gt;vm_flags &amp;= ~VM_MAYWRITE;\n\n    vma-&gt;vm_ops = &amp;binder_vm_ops;\n    vma-&gt;vm_private_data = proc;\n\n    // \u518d\u6b21\u5b8c\u5584 binder buffer allocator\n    ret = binder_alloc_mmap_handler(&amp;proc-&gt;alloc, vma);\n    if (ret)\n        return ret;\n    return 0;\n\nerr_bad_arg:\n    pr_err(\"%s: %d %lx-%lx %s failed %d\\n\", __func__,\n           proc-&gt;pid, vma-&gt;vm_start, vma-&gt;vm_end, failure_string, ret);\n    return ret;\n}\n\n\n/**\n * binder_alloc_mmap_handler() - map virtual address space for proc\n * @alloc:  alloc structure for this proc\n * @vma:    vma passed to mmap()\n *\n * Called by binder_mmap() to initialize the space specified in\n * vma for allocating binder buffers\n *\n * Return:\n *      0 = success\n *      -EBUSY = address space already mapped\n *      -ENOMEM = failed to map memory to given address space\n */\nint binder_alloc_mmap_handler(struct binder_alloc *alloc,\n                  struct vm_area_struct *vma)\n{\n    int ret;\n    const char *failure_string;\n    //\u6bcf\u4e00\u6b21Binder\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u90fd\u4f1a\u5148\u4eceBinder\u5185\u5b58\u7f13\u5b58\u533a\u4e2d\u5206\u914d\u4e00\u4e2abinder_buffer\u6765\u5b58\u50a8\u4f20\u8f93\u6570\u636e\n    struct binder_buffer *buffer;\n\n    mutex_lock(&amp;binder_alloc_mmap_lock);//\u540c\u6b65\u9501\n    if (alloc-&gt;buffer_size) {// \u4e0d\u9700\u8981\u91cd\u590dmmap\n        ret = -EBUSY;\n        failure_string = \"already mapped\";\n        goto err_already_mapped;\n    }\n    alloc-&gt;buffer_size = min_t(unsigned long, vma-&gt;vm_end - vma-&gt;vm_start,\n                   SZ_4M);\n    mutex_unlock(&amp;binder_alloc_mmap_lock);//\u91ca\u653e\u9501\n\n    alloc-&gt;buffer = (void __user *)vma-&gt;vm_start;//\u6307\u5411\u7528\u6237\u8fdb\u7a0b\u5185\u6838\u865a\u62df\u7a7a\u95f4\u7684 start\u5730\u5740\n\n    //\u5206\u914d\u7269\u7406\u9875\u7684\u6307\u9488\u6570\u7ec4\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3avma\u7684\u7b49\u6548page\u4e2a\u6570\n    alloc-&gt;pages = kcalloc(alloc-&gt;buffer_size / PAGE_SIZE,\n                   sizeof(alloc-&gt;pages[0]),\n                   GFP_KERNEL);\n    if (alloc-&gt;pages == NULL) {\n        ret = -ENOMEM;\n        failure_string = \"alloc page array\";\n        goto err_alloc_pages_failed;\n    }\n\n    buffer = kzalloc(sizeof(*buffer), GFP_KERNEL);//\u7533\u8bf7\u4e00\u4e2abinder_buffer\u7684\u5185\u5b58\n    if (!buffer) {\n        ret = -ENOMEM;\n        failure_string = \"alloc buffer struct\";\n        goto err_alloc_buf_struct_failed;\n    }\n\n    buffer-&gt;user_data = alloc-&gt;buffer;//\u6307\u5411\u7528\u6237\u8fdb\u7a0b\u5185\u6838\u865a\u62df\u7a7a\u95f4\u7684 start\u5730\u5740\uff0c\u5373\u4e3a\u5f53\u524d\u8fdb\u7a0bmmap\u7684\u5185\u6838\u7a7a\u95f4\u5730\u5740\n    list_add(&amp;buffer-&gt;entry, &amp;alloc-&gt;buffers);//\u5c06binder_buffer\u5730\u5740 \u52a0\u5165\u5230\u6240\u5c5e\u8fdb\u7a0b\u7684buffers\u961f\u5217\n    buffer-&gt;free = 1;\n    binder_insert_free_buffer(alloc, buffer);//\u5c06 \u5f53\u524d buffer \u52a0\u5165\u5230 \u7ea2\u9ed1\u6811 alloc-&gt;free_buffers \u4e2d\uff0c\u8868\u793a\u5f53\u524d buffer \u662f\u7a7a\u95f2buffer\n    alloc-&gt;free_async_space = alloc-&gt;buffer_size / 2;// \u5c06 \u5f02\u6b65\u4e8b\u52a1 \u7684\u7a7a\u95f4\u5927\u5c0f\u8bbe\u7f6e\u4e3a \u6574\u4e2a\u7a7a\u95f4\u7684\u4e00\u534a\n    binder_alloc_set_vma(alloc, vma);\n    mmgrab(alloc-&gt;vma_vm_mm);\n\n    return 0;\n\nerr_alloc_buf_struct_failed:\n    kfree(alloc-&gt;pages);\n    alloc-&gt;pages = NULL;\nerr_alloc_pages_failed:\n    alloc-&gt;buffer = NULL;\n    mutex_lock(&amp;binder_alloc_mmap_lock);\n    alloc-&gt;buffer_size = 0;\nerr_already_mapped:\n    mutex_unlock(&amp;binder_alloc_mmap_lock);\n    binder_alloc_debug(BINDER_DEBUG_USER_ERROR,\n               \"%s: %d %lx-%lx %s failed %d\\n\", __func__,\n               alloc-&gt;pid, vma-&gt;vm_start, vma-&gt;vm_end,\n               failure_string, ret);\n    return ret;\n}\n</code></pre> <p>\u9996\u5148\u5728\u5185\u6838\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u7533\u8bf7\u4e00\u5757\u4e0e\u7528\u6237\u865a\u62df\u5185\u5b58\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\uff1b\u7136\u540e\u518d\u7533\u8bf7page\u7269\u7406\u5185\u5b58\uff0c\u518d\u5c06\u540c\u4e00\u5757\u7269\u7406\u5185\u5b58\u5206\u522b\u6620\u5c04\u5230\u5185\u6838\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u7528\u6237\u7a7a\u95f4\u7684Buffer\u548c\u5185\u6838\u7a7a\u95f4\u7684Buffer\u540c\u6b65\u64cd\u4f5c\u7684\u529f\u80fd\u3002</p> <ul> <li>filp-&gt;private_data\u4fdd\u5b58\u4e86\u6211\u4eecopen\u8bbe\u5907\u65f6\u521b\u5efa\u7684binder_proc\u4fe1\u606f\u3002</li> <li>\u4e3a\u7528\u6237\u8fdb\u7a0b\u5206\u914d\u4e00\u5757\u5185\u6838\u7a7a\u95f4\u4f5c\u4e3a\u7f13\u51b2\u533a\u3002</li> <li>\u628a\u5206\u914d\u7684\u7f13\u51b2\u533a\u6307\u9488\u5b58\u653e\u5230binder_proc\u7684buffer\u5b57\u6bb5\u3002</li> <li>\u5206\u914dpages\u7a7a\u95f4\u3002</li> <li>\u5728\u5185\u6838\u5206\u914d\u4e00\u5757\u540c\u6837\u9875\u6570\u7684\u5185\u6838\u7a7a\u95f4\uff0c\u5e76\u628a\u5b83\u7684\u7269\u7406\u5185\u5b58\u548c\u524d\u9762\u4e3a\u7528\u6237\u8fdb\u7a0b\u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u5173\u8054\u3002</li> <li>\u5c06\u521a\u624d\u5206\u914d\u7684\u5185\u5b58\u5757\u52a0\u5165\u7528\u6237\u8fdb\u7a0b\u5185\u5b58\u94fe\u8868\u3002</li> </ul> <p>binder_mmap\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u4f1a\u7533\u8bf7\u4e00\u5757\u7269\u7406\u5185\u5b58\uff0c\u7136\u540e\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u540c\u65f6\u5bf9\u5e94\u5230\u8fd9\u5757\u5185\u5b58\u4e0a\u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u5f53\u6709Client\u8981\u53d1\u9001\u6570\u636e\u7ed9Server\u7684\u65f6\u5019\uff0c\u53ea\u9700\u4e00\u6b21\uff0c\u5c06Client\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u62f7\u8d1d\u5230Server\u7aef\u7684\u5185\u6838\u7a7a\u95f4\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740\u5373\u53ef\uff0c\u7531\u4e8e\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5728\u670d\u52a1\u7aef\u5df2\u7ecf\u540c\u65f6\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u56e0\u6b64\u65e0\u9700\u518d\u505a\u4e00\u6b21\u590d\u5236\uff0cServer\u5373\u53ef\u76f4\u63a5\u8bbf\u95ee\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <ul> <li>Server\u5728\u542f\u52a8\u4e4b\u540e\uff0c\u8c03\u7528\u5bf9/dev/binder\u8bbe\u5907\u8c03\u7528mmap\u3002</li> <li>\u5185\u6838\u4e2d\u7684binder_mmap\u51fd\u6570\u8fdb\u884c\u5bf9\u5e94\u7684\u5904\u7406\uff1a\u7533\u8bf7\u4e00\u5757\u7269\u7406\u5185\u5b58\uff0c\u7136\u540e\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u540c\u65f6\u8fdb\u884c\u6620\u5c04\u3002</li> <li>Client\u901a\u8fc7BINDER_WRITE_READ\u547d\u4ee4\u53d1\u9001\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u5c06\u5148\u5230\u9a71\u52a8\u4e2d\uff0c\u540c\u65f6\u9700\u8981\u5c06\u6570\u636e\u4eceClient\u8fdb\u7a0b\u7684\u7528\u6237\u7a7a\u95f4\u62f7\u8d1d\u5230\u5185\u6838\u7a7a\u95f4\u3002</li> <li>\u9a71\u52a8\u901a\u8fc7BR_TRANSACTION\u901a\u77e5Server\u6709\u4eba\u53d1\u51fa\u8bf7\u6c42\uff0cServer\u8fdb\u884c\u5904\u7406\u3002\u7531\u4e8e\u8fd9\u5757\u5185\u5b58\u4e5f\u5728\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u4e86\u6620\u5c04\uff0c\u56e0\u6b64Server\u8fdb\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002</li> </ul> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u4f7f\u7528Binder\u673a\u5236\uff0c\u6570\u636e\u53ea\u9700\u8981\u7ecf\u5386\u4e00\u6b21\u62f7\u8d1d\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u539f\u7406\u5c31\u5728\u8fd9\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder","title":"Binder \u6570\u636e\u4ea4\u6362","text":"<p>\u5bf9Binder\u9a71\u52a8\u800c\u8a00\uff0c\u4e0d\u7ba1\u662fServiceManager\u8fd8\u662fService\u548cClient\uff0c\u90fd\u4e3a\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u8c03\u7528Binder\u9a71\u52a8ioctl()\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u7684\u65b9\u6cd5\u5982\uff1a</p> <pre><code>ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr)\n</code></pre> <ul> <li>mProcess-&gt;mDriverFD\uff1a\u5bf9\u5e94\u4e86\u6253\u5f00Binder\u8bbe\u5907\u65f6\u7684fd\u3002</li> <li>BINDER_WRITE_READ\uff1a\u5bf9\u5e94\u4e86\u5177\u4f53\u8981\u505a\u7684\u64cd\u4f5c\u7801\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7801\u5c06\u7531Binder\u9a71\u52a8\u89e3\u6790\u3002</li> <li>bwr\uff1a\u5b58\u50a8\u4e86\u8bf7\u6c42\u6570\u636e\uff0c\u5176\u7c7b\u578b\u662fbinder_write_read\u3002</li> </ul> <p>binder_write_read\u5176\u5b9e\u662f\u4e00\u4e2a\u76f8\u5bf9\u5916\u5c42\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u5185\u90e8\u4f1a\u5305\u542b\u4e00\u4e2abinder_transaction_data\u7ed3\u6784\u7684\u6570\u636e\u3002binder_transaction_data\u5305\u542b\u4e86\u53d1\u51fa\u8bf7\u6c42\u8005\u7684\u6807\u8bc6\uff0c\u8bf7\u6c42\u7684\u76ee\u6807\u5bf9\u8c61\u4ee5\u53ca\u8bf7\u6c42\u6240\u9700\u8981\u7684\u53c2\u6570\u3002\u5b83\u4eec\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <pre><code>static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)\n{\n    int ret;\n    //filp-&gt;private_data \u5728open()binder\u9a71\u52a8\u65f6\uff0c\u4fdd\u5b58\u4e86\u4e00\u4e2a\u521b\u5efa\u7684binder_proc\uff0c\u5373\u662f\u6b64\u65f6\u8c03\u7528\u8fdb\u7a0b\u7684binder_proc\n    struct binder_proc *proc = filp-&gt;private_data;\n    struct binder_thread *thread;//binder\u7ebf\u7a0b\n    unsigned int size = _IOC_SIZE(cmd);\n    void __user *ubuf = (void __user *)arg;\n\n    /*pr_info(\"binder_ioctl: %d:%d %x %lx\\n\",\n            proc-&gt;pid, current-&gt;pid, cmd, arg);*/\n\n    binder_selftest_alloc(&amp;proc-&gt;alloc);\n\n    trace_binder_ioctl(cmd, arg);\n\n    //\u8fdb\u5165\u4f11\u7720\u72b6\u6001\uff0c\u76f4\u5230\u4e2d\u65ad\u5524\u9192\n    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);\n    if (ret)\n        goto err_unlocked;\n\n    //\u83b7\u53d6binder\u7ebf\u7a0b\u4fe1\u606f\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u8c03\u7528ioctl()\uff0c\u5219\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\n    thread = binder_get_thread(proc);\n    if (thread == NULL) {\n        ret = -ENOMEM;\n        goto err;\n    }\n\n    switch (cmd) {\n    case BINDER_WRITE_READ://binder\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u4f7f\u7528\u9891\u7387\u8f83\u9ad8\n        ret = binder_ioctl_write_read(filp, cmd, arg, thread);\n        if (ret)\n            goto err;\n        break;\n    case BINDER_SET_MAX_THREADS: {//\u8bbe\u7f6eBinder\u7ebf\u7a0b\u6700\u5927\u4e2a\u6570\n        int max_threads;\n\n        if (copy_from_user(&amp;max_threads, ubuf,\n                   sizeof(max_threads))) {\n            ret = -EINVAL;\n            goto err;\n        }\n        binder_inner_proc_lock(proc);\n        proc-&gt;max_threads = max_threads;\n        binder_inner_proc_unlock(proc);\n        break;\n    }\n    case BINDER_SET_CONTEXT_MGR_EXT: {//\u8bbe\u7f6eService Manager\u8282\u70b9\uff0c\u5e26flag\u53c2\u6570\uff0c servicemanager\u8fdb\u7a0b\u6210\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n        struct flat_binder_object fbo;\n\n        if (copy_from_user(&amp;fbo, ubuf, sizeof(fbo))) {\n            ret = -EINVAL;\n            goto err;\n        }\n        ret = binder_ioctl_set_ctx_mgr(filp, &amp;fbo);\n        if (ret)\n            goto err;\n        break;\n    }\n    case BINDER_SET_CONTEXT_MGR://\u8bbe\u7f6eService Manager\u8282\u70b9\uff0c\u4e0d\u5e26flag\u53c2\u6570\uff0c servicemanager\u8fdb\u7a0b\u6210\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n        ret = binder_ioctl_set_ctx_mgr(filp, NULL);\n        if (ret)\n            goto err;\n        break;\n    case BINDER_THREAD_EXIT://\u5f53binder\u7ebf\u7a0b\u9000\u51fa\uff0c\u91ca\u653ebinder\u7ebf\u7a0b\n        binder_debug(BINDER_DEBUG_THREADS, \"%d:%d exit\\n\",\n                 proc-&gt;pid, thread-&gt;pid);\n        binder_thread_release(proc, thread);\n        thread = NULL;\n        break;\n    case BINDER_VERSION: {//\u83b7\u53d6Binder\u7248\u672c\u4fe1\u606f\n        struct binder_version __user *ver = ubuf;\n\n        if (size != sizeof(struct binder_version)) {\n            ret = -EINVAL;\n            goto err;\n        }\n        if (put_user(BINDER_CURRENT_PROTOCOL_VERSION,\n                 &amp;ver-&gt;protocol_version)) {\n            ret = -EINVAL;\n            goto err;\n        }\n        break;\n    }\n    case BINDER_GET_NODE_INFO_FOR_REF: {\n        struct binder_node_info_for_ref info;\n\n        if (copy_from_user(&amp;info, ubuf, sizeof(info))) {\n            ret = -EFAULT;\n            goto err;\n        }\n\n        ret = binder_ioctl_get_node_info_for_ref(proc, &amp;info);\n        if (ret &lt; 0)\n            goto err;\n\n        if (copy_to_user(ubuf, &amp;info, sizeof(info))) {\n            ret = -EFAULT;\n            goto err;\n        }\n\n        break;\n    }\n    case BINDER_GET_NODE_DEBUG_INFO: {\n        struct binder_node_debug_info info;\n\n        if (copy_from_user(&amp;info, ubuf, sizeof(info))) {\n            ret = -EFAULT;\n            goto err;\n        }\n\n        ret = binder_ioctl_get_node_debug_info(proc, &amp;info);\n        if (ret &lt; 0)\n            goto err;\n\n        if (copy_to_user(ubuf, &amp;info, sizeof(info))) {\n            ret = -EFAULT;\n            goto err;\n        }\n        break;\n    }\n    default:\n        ret = -EINVAL;\n        goto err;\n    }\n    ret = 0;\nerr:\n    if (thread)\n        thread-&gt;looper_need_return = false;\n    wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);\n    if (ret &amp;&amp; ret != -ERESTARTSYS)\n        pr_info(\"%d:%d ioctl %x %lx returned %d\\n\", proc-&gt;pid, current-&gt;pid, cmd, arg, ret);\nerr_unlocked:\n    trace_binder_ioctl_done(ret);\n    return ret;\n}\n\nstatic int binder_ioctl_write_read(struct file *filp,\n                unsigned int cmd, unsigned long arg,\n                struct binder_thread *thread)\n{\n    int ret = 0;\n    struct binder_proc *proc = filp-&gt;private_data;\n    unsigned int size = _IOC_SIZE(cmd);\n    void __user *ubuf = (void __user *)arg;\n    struct binder_write_read bwr;\n\n    if (size != sizeof(struct binder_write_read)) {\n        ret = -EINVAL;\n        goto out;\n    }\n    if (copy_from_user(&amp;bwr, ubuf, sizeof(bwr))) {\n        ret = -EFAULT;\n        goto out;\n    }\n    binder_debug(BINDER_DEBUG_READ_WRITE,\n             \"%d:%d write %lld at %016llx, read %lld at %016llx\\n\",\n             proc-&gt;pid, thread-&gt;pid,\n             (u64)bwr.write_size, (u64)bwr.write_buffer,\n             (u64)bwr.read_size, (u64)bwr.read_buffer);\n\n    if (bwr.write_size &gt; 0) {\n        //write_size\u5927\u4e8e0\uff0c\u8868\u793a\u7528\u6237\u8fdb\u7a0b\u6709\u6570\u636e\u53d1\u9001\u5230\u9a71\u52a8\uff0c\u5219\u8c03\u7528binder_thread_write\u53d1\u9001\u6570\u636e\n        ret = binder_thread_write(proc, thread,\n                      bwr.write_buffer,\n                      bwr.write_size,\n                      &amp;bwr.write_consumed);\n        trace_binder_write_done(ret);\n        if (ret &lt; 0) {\n            //binder_thread_write\u4e2d\u6709\u9519\u8bef\u53d1\u751f\uff0c\u5219read_consumed\u8bbe\u4e3a0\uff0c\u8868\u793akernel\u6ca1\u6709\u6570\u636e\u8fd4\u56de\u7ed9\u8fdb\u7a0b\n            bwr.read_consumed = 0;\n            //\u5c06bwr\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u8c03\u7528\u8005\uff0cbwr\u5728binder_thread_write\u4e2d\u4f1a\u88ab\u4fee\u6539\n            if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))\n                ret = -EFAULT;\n            goto out;\n        }\n    }\n    if (bwr.read_size &gt; 0) {\n        //read_size\u5927\u4e8e0\uff0c \u8868\u793a\u8fdb\u7a0b\u7528\u6237\u6001\u5730\u5740\u7a7a\u95f4\u5e0c\u671b\u6709\u6570\u636e\u8fd4\u56de\u7ed9\u5b83\uff0c\u5219\u8c03\u7528binder_thread_read\u8fdb\u884c\u5904\u7406\n        ret = binder_thread_read(proc, thread, bwr.read_buffer,\n                     bwr.read_size,\n                     &amp;bwr.read_consumed,\n                     filp-&gt;f_flags &amp; O_NONBLOCK);\n        trace_binder_read_done(ret);\n        binder_inner_proc_lock(proc);\n        //\u8bfb\u53d6\u5b8c\u540e\uff0c\u5982\u679cproc-&gt;todo\u94fe\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5524\u9192\u5728proc-&gt;wait\u7b49\u5f85\u961f\u5217\u4e0a\u7684\u8fdb\u7a0b\n        if (!binder_worklist_empty_ilocked(&amp;proc-&gt;todo))\n            binder_wakeup_proc_ilocked(proc);\n        binder_inner_proc_unlock(proc);\n        if (ret &lt; 0) {\n            //\u5982\u679cbinder_thread_read\u8fd4\u56de\u5c0f\u4e8e0\uff0c\u53ef\u80fd\u5904\u7406\u4e00\u534a\u5c31\u4e2d\u65ad\u4e86\uff0c\u9700\u8981\u5c06bwr\u62f7\u8d1d\u56de\u8fdb\u7a0b\u7684\u7528\u6237\u6001\u5730\u5740\n            if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))\n                ret = -EFAULT;\n            goto out;\n        }\n    }\n    binder_debug(BINDER_DEBUG_READ_WRITE,\n             \"%d:%d wrote %lld of %lld, read return %lld of %lld\\n\",\n             proc-&gt;pid, thread-&gt;pid,\n             (u64)bwr.write_consumed, (u64)bwr.write_size,\n             (u64)bwr.read_consumed, (u64)bwr.read_size);\n    //\u5904\u7406\u6210\u529f\u7684\u60c5\u51b5\uff0c\u4e5f\u9700\u8981\u5c06bwr\u62f7\u8d1d\u56de\u8fdb\u7a0b\u7684\u7528\u6237\u6001\u5730\u5740\u7a7a\u95f4\n    if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {\n        ret = -EFAULT;\n        goto out;\n    }\nout:\n    return ret;\n}\n</code></pre> <p>binder_ioctl\u51fd\u6570\u5bf9\u5e94\u4e86ioctl\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u6839\u636eioctl\u7684\u547d\u4ee4\u6765\u786e\u5b9a\u8fdb\u4e00\u6b65\u5904\u7406\u7684\u903b\u8f91\uff0c\u5177\u4f53\u5982\u4e0b:</p> <ul> <li> <p>BINDER_WRITE_READ\uff1a</p> </li> <li> <p>bwr.write_size &gt; 0\uff1a\u8c03\u7528binder_thread_write</p> </li> <li> <p>bwr.read_size &gt; 0\uff1a\u8c03\u7528binder_thread_read</p> </li> <li> <p>BINDER_SET_MAX_THREADS\uff1a\u8bbe\u7f6e\u8fdb\u7a0b\u7684max_threads\uff0c\u5373\u8fdb\u7a0b\u652f\u6301\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u3002</p> </li> <li>BINDER_SET_CONTEXT_MGR\uff1a\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u4e3aServiceManager\uff0c\u540e\u7eed\u6587\u7ae0\u4f1a\u8be6\u89e3\u3002</li> <li>BINDER_THREAD_EXIT\uff1a\u8c03\u7528binder_free_thread\uff0c\u91ca\u653ebinder_thread\u3002</li> <li>BINDER_VERSION\uff1a\u8fd4\u56de\u5f53\u524d\u7684Binder\u7248\u672c\u53f7\u3002</li> </ul> <p>\u5bf9\u4e8eBINDER_WRITE_READ\u5206\u652f\u5904\u7406\u91cc\uff0c\u7ed3\u6784\u8fd8\u662f\u5f88\u6e05\u6670\u7684\uff0c\u5c31\u662f\u628a\u7528\u6237\u6001\u4f20\u9012\u8fc7\u6765\u7684binder_write_read\u6570\u636e\u7ed3\u6784\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u7136\u540e\u518d\u6839\u636e\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u91cc\u7684read_size\u548cwrite_size\u662f\u5426\u5927\u4e8e0\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u503c\u90fd\u53ef\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u4e8e\u662f\u4e00\u4e2aioctl\u5468\u671f\u91cc\uff0c\u6709\u53ef\u80fd\u540c\u65f6\u8fdb\u884c\u8bfb\u5199\u3002\u4e4b\u540e\u7684\u4ee3\u7801\u5219\u53ef\u4ee5\u8fdb\u5165\u5230binder_thread_write()\u6216\u662fbinder_thread_read()\uff0cwrite\u548cread\u90fd\u662f\u76f8\u5bf9\u4e8e\u7528\u6237\u6001\u6765\u8bf4\u7684\uff0cthread\u4e5f\u662f\uff0c\u5c31\u662f\u5982\u679c\u8c03\u5ea6\u5230\u5408\u9002\u7684IPCThreadState\u5bf9\u8c61\uff0c\u4ee5\u7ebf\u7a0b\u65b9\u5f0f\u5904\u7406\u7528\u6237\u6001\u7684\u5199\u8bf7\u6c42\u6216\u662f\u8bfb\u8bf7\u6c42\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_thread_write","title":"binder_thread_write","text":"<p>binder_thread_write()\u7684\u5b9e\u73b0\u76f8\u5bf9\u6765\u8bf4\u5c31\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u662f\u901a\u8fc7\u89e3\u6790binder_ioctl()\u5f97\u5230\u7684BC_*\u547d\u4ee4\uff0c\u7136\u540e\u518d\u6839\u636e\u547d\u4ee4\u4f5c\u51fa\u5904\u7406\u3002</p> <pre><code>static int binder_thread_write(struct binder_proc *proc,\n            struct binder_thread *thread,\n            binder_uintptr_t binder_buffer, size_t size,\n            binder_size_t *consumed)\n{\n    uint32_t cmd;\n    struct binder_context *context = proc-&gt;context;//\u539f\u6765Service\u8fdb\u7a0b\u7684proc\u7684context\n    void __user *buffer = (void __user *)(uintptr_t)binder_buffer;\n    void __user *ptr = buffer + *consumed;\n    void __user *end = buffer + size;\n\n    while (ptr &lt; end &amp;&amp; thread-&gt;return_error.cmd == BR_OK) {\n        int ret;\n\n        //\u62f7\u8d1d\u7528\u6237\u7a7a\u95f4\u7684cmd\u547d\u4ee4\uff0caddService\u548cgetService\u65f6\uff0c\u4e3a BC_TRANSACTION\n        if (get_user(cmd, (uint32_t __user *)ptr))\n            return -EFAULT;\n        ptr += sizeof(uint32_t);\n        trace_binder_command(cmd);\n        if (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) {\n            atomic_inc(&amp;binder_stats.bc[_IOC_NR(cmd)]);\n            atomic_inc(&amp;proc-&gt;stats.bc[_IOC_NR(cmd)]);\n            atomic_inc(&amp;thread-&gt;stats.bc[_IOC_NR(cmd)]);\n        }\n        switch (cmd) {\n\n        ...\n\n        case BC_TRANSACTION:\n        case BC_REPLY: {\n            struct binder_transaction_data tr;\n\n            if (copy_from_user(&amp;tr, ptr, sizeof(tr)))\n                return -EFAULT;\n            ptr += sizeof(tr);\n            binder_transaction(proc, thread, &amp;tr,\n                       cmd == BC_REPLY, 0);\n            break;\n        }\n\n        ...\n\n        default:\n            pr_err(\"%d:%d unknown command %d\\n\",\n                   proc-&gt;pid, thread-&gt;pid, cmd);\n            return -EINVAL;\n        }\n        *consumed = ptr - buffer;\n    }\n    return 0;\n}\n</code></pre> <p>BC_\u7cfb\u5217\u547d\u4ee4\u7684\u5b9a\u4e49\u662f\u5728\u679a\u4e3e\u578bbinder_driver_command_protocol\u4e2d\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684BC_\u7cfb\u5217\u547d\u4ee4\uff0c\u5904\u7406\u53ea\u662f\u76f4\u63a5\u5b8c\u6210\u5373\u53ef\uff0c\u4f46\u5bf9\u4e8e\u9644\u5e26\u6570\u636e\u7684BC_TRANASACTION\u548cBC_REPLY\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6d89\u53ca\u5230\u590d\u6742\u6570\u636e\u7ed3\u6784\u7684\u89e3\u6790\u4ee5\u53ca\u6570\u636e\u62f7\u8d1d\uff0c\u4e8e\u662f\u4f1a\u901a\u8fc7binder_transaction()\u6765\u8fdb\u884c\u4f20\u8f93\u3002</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_transaction","title":"binder_transaction","text":"<p>\u4ece\u57fa\u672c\u64cd\u4f5c\u4e0a\u6765\u770b\uff0c\u6574\u4e2abinder_transaction()\u64cd\u4f5c\uff0c\u5c31\u662f\u628a\u9700\u8981\u53d1\u9001\u7684\u6570\u636e\u76f4\u63a5\u627e\u5230\u76ee\u7684\uff0c\u7136\u540e\u518d\u5f52\u7c7b\u6574\u7406\u597d\uff0c\u7b49\u5f85\u63a5\u6536\u8005\u5728\u5b83\u7684\u8bfb\u53d6\u5468\u671f\u91cc\u53d6\u8d70\u6570\u636e\u3002\u4e5f\u5c31\u662f\u628a\u53d1\u9001\u65b9\u63d0\u4f9b\u7684binder_transaction_data\u8f6c\u6362\u6210binder driver\u4e13\u7528\u7684binder_transaction\u5bf9\u8c61\uff0c\u5e76\u4fdd\u5b58\u5230\u63a5\u6536\u8005\u8fdb\u7a0b/\u7ebf\u7a0b\u7684todo\u961f\u5217\u4e2d\u3002</p> <pre><code>static void binder_transaction(struct binder_proc *proc,\n                   struct binder_thread *thread,\n                   struct binder_transaction_data *tr, int reply,\n                   binder_size_t extra_buffers_size)\n{\n    int ret;\n    struct binder_transaction *t;\n    struct binder_work *tcomplete;\n    binder_size_t buffer_offset = 0;\n    binder_size_t off_start_offset, off_end_offset;\n    binder_size_t off_min;\n    binder_size_t sg_buf_offset, sg_buf_end_offset;\n    struct binder_proc *target_proc = NULL;\n    struct binder_thread *target_thread = NULL;\n    struct binder_node *target_node = NULL;\n    struct binder_transaction *in_reply_to = NULL;\n    struct binder_transaction_log_entry *e;\n    uint32_t return_error = 0;\n    uint32_t return_error_param = 0;\n    uint32_t return_error_line = 0;\n    binder_size_t last_fixup_obj_off = 0;\n    binder_size_t last_fixup_min_off = 0;\n    struct binder_context *context = proc-&gt;context;\n    int t_debug_id = atomic_inc_return(&amp;binder_last_id);\n    char *secctx = NULL;\n    u32 secctx_sz = 0;\n   ...\n    //addService\u7b2c\u4e00\u6b21\u8fdb\u6765\u65f6\uff0creply\u4e3a\u7a7a\n    if (reply) {\n        ...\n    } else {\n        //addService\u548cgetService\u65f6\uff0c\u4f20\u5165\u7684handle=0\uff0c\u8868\u660e\u60f3\u8bbf\u95eeServiceManager\n        if (tr-&gt;target.handle) {\n               //\u5148\u4ecetr-&gt;target.handle\u53e5\u67c4\u503c\uff0c\u627e\u5230\u5bf9\u5e94\u7684binder_ref\u8282\u70b9\uff0c\u53cabinder_node\u8282\u70b9\n            struct binder_ref *ref;\n            binder_proc_lock(proc);\n            ref = binder_get_ref_olocked(proc, tr-&gt;target.handle,\n                             true);\n            if (ref) {\n                target_node = binder_get_node_refs_for_txn(\n                        ref-&gt;node, &amp;target_proc,\n                        &amp;return_error);\n            } else {\n\n                return_error = BR_FAILED_REPLY;\n            }\n            binder_proc_unlock(proc);\n        } else {\n            mutex_lock(&amp;context-&gt;context_mgr_node_lock); //\u4e92\u65a5\u9501\n            // handle=0\u5219\u627e\u5230servicemanager\u5b9e\u4f53\n            target_node = context-&gt;binder_context_mgr_node;\n            if (target_node)\n                //\u83b7\u53d6ServiceManager\u8fdb\u7a0b\u7684target_proc\n                target_node = binder_get_node_refs_for_txn(\n                        target_node, &amp;target_proc,\n                        &amp;return_error);\n            else\n                return_error = BR_DEAD_REPLY;\n            mutex_unlock(&amp;context-&gt;context_mgr_node_lock); //\u91ca\u653e\u9501\n            if (target_node &amp;&amp; target_proc == proc) {\n                binder_user_error(\"%d:%d got transaction to context manager from process owning it\\n\",\n                          proc-&gt;pid, thread-&gt;pid);\n                return_error = BR_FAILED_REPLY;\n                return_error_param = -EINVAL;\n                return_error_line = __LINE__;\n                goto err_invalid_target_handle;\n            }\n        }\n            ...\n        //\u68c0\u67e5Client\u8fdb\u7a0b\u662f\u5426\u6709\u6743\u9650\u5411Server\u8fdb\u7a0b\u53d1\u9001\u8bf7\u6c42\n        if (security_binder_transaction(proc-&gt;tsk,\n                        target_proc-&gt;tsk) &lt; 0) {\n            return_error = BR_FAILED_REPLY;\n            return_error_param = -EPERM;\n            return_error_line = __LINE__;\n            goto err_invalid_target_handle;\n        }\n        binder_inner_proc_lock(proc);\n        //\u5982\u679cflag\u4e0d\u662foneway,\u5e76\u4e14\u73b0\u573a\u7684transaction_stack\u5b58\u5728\u5185\u5bb9\n        if (!(tr-&gt;flags &amp; TF_ONE_WAY) &amp;&amp; thread-&gt;transaction_stack) {\n            struct binder_transaction *tmp;\n            tmp = thread-&gt;transaction_stack;\n            if (tmp-&gt;to_thread != thread) {\n                spin_lock(&amp;tmp-&gt;lock);\n                binder_user_error(\"%d:%d got new transaction with bad transaction stack, transaction %d has target %d:%d\\n\",\n                    proc-&gt;pid, thread-&gt;pid, tmp-&gt;debug_id,\n                    tmp-&gt;to_proc ? tmp-&gt;to_proc-&gt;pid : 0,\n                    tmp-&gt;to_thread ?\n                    tmp-&gt;to_thread-&gt;pid : 0);\n                spin_unlock(&amp;tmp-&gt;lock);\n                binder_inner_proc_unlock(proc);\n                return_error = BR_FAILED_REPLY;\n                return_error_param = -EPROTO;\n                return_error_line = __LINE__;\n                goto err_bad_call_stack;\n            }\n            while (tmp) {\n                struct binder_thread *from;\n\n                spin_lock(&amp;tmp-&gt;lock);\n                from = tmp-&gt;from;\n                if (from &amp;&amp; from-&gt;proc == target_proc) {\n                    atomic_inc(&amp;from-&gt;tmp_ref);\n                    target_thread = from;\n                    spin_unlock(&amp;tmp-&gt;lock);\n                    break;\n                }\n                spin_unlock(&amp;tmp-&gt;lock);\n                tmp = tmp-&gt;from_parent;\n            }\n        }\n        binder_inner_proc_unlock(proc);\n    }\n    if (target_thread)\n        e-&gt;to_thread = target_thread-&gt;pid;\n    e-&gt;to_proc = target_proc-&gt;pid;\n\n    // \u521b\u5efabinder_transaction\u8282\u70b9\n    t = kzalloc(sizeof(*t), GFP_KERNEL); \n    if (t == NULL) {\n        return_error = BR_FAILED_REPLY;\n        return_error_param = -ENOMEM;\n        return_error_line = __LINE__;\n        goto err_alloc_t_failed;\n    }\n    binder_stats_created(BINDER_STAT_TRANSACTION);\n    spin_lock_init(&amp;t-&gt;lock);\n    //\u521b\u5efa\u4e00\u4e2abinder_work\u8282\u70b9\n    tcomplete = kzalloc(sizeof(*tcomplete), GFP_KERNEL);\n        ...\n    binder_stats_created(BINDER_STAT_TRANSACTION_COMPLETE);\n\n    t-&gt;debug_id = t_debug_id;\n    ...\n\n    if (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))\n        t-&gt;from = thread;   // \u8fd4\u56deproc\u7684\u5f53\u524d\u7ebf\u7a0b\n    else\n        t-&gt;from = NULL;\n    t-&gt;sender_euid = task_euid(proc-&gt;tsk);  // \u6e90\u7ebf\u7a0b\u7528\u6237id\n    t-&gt;to_proc = target_proc;               // \u8d1f\u8d23\u5904\u7406\u8be5\u4e8b\u52a1\u7684\u8fdb\u7a0b--ServiceManager\n    t-&gt;to_thread = target_thread;           // \u8d1f\u8d23\u5904\u7406\u8be5\u4e8b\u52a1\u7684\u7ebf\u7a0b\n        // \u5c06binder_transaction_data\u7684code\u3001flags\u57df\u8bb0\u5165binder_transaction\u8282\u70b9\n    t-&gt;code = tr-&gt;code;                     // ADD_SERVICE_TRANSACTION\n    t-&gt;flags = tr-&gt;flags;                   // TF_ACCEPT_FDS\n    // \u6e90\u7ebf\u7a0b\u4f18\u5148\u7ea7\u8bbe\u7f6e\n    if (!(t-&gt;flags &amp; TF_ONE_WAY) &amp;&amp;\n        binder_supported_policy(current-&gt;policy)) {\n        /* Inherit supported policies for synchronous transactions */\n        t-&gt;priority.sched_policy = current-&gt;policy;\n        t-&gt;priority.prio = current-&gt;normal_prio;\n    } else {\n        /* Otherwise, fall back to the default priority */\n        t-&gt;priority = target_proc-&gt;default_priority;\n    }\n\n    if (target_node &amp;&amp; target_node-&gt;txn_security_ctx) {\n        u32 secid;\n        size_t added_size;\n\n        security_task_getsecid(proc-&gt;tsk, &amp;secid);\n        ret = security_secid_to_secctx(secid, &amp;secctx, &amp;secctx_sz);\n        if (ret) {\n            return_error = BR_FAILED_REPLY;\n            return_error_param = ret;\n            return_error_line = __LINE__;\n            goto err_get_secctx_failed;\n        }\n        added_size = ALIGN(secctx_sz, sizeof(u64));\n        extra_buffers_size += added_size;\n        if (extra_buffers_size &lt; added_size) {\n            /* integer overflow of extra_buffers_size */\n            return_error = BR_FAILED_REPLY;\n            return_error_param = EINVAL;\n            return_error_line = __LINE__;\n            goto err_bad_extra_size;\n        }\n    }\n\n    //\u5206\u914d\u4e00\u5757buffer\u7528\u4e8e\u4fdd\u5b58mOut\u4e2d\u7684data\u548cmObjects \u4e2d\u7684offset\u6570\u636e\n    t-&gt;buffer = binder_alloc_new_buf(&amp;target_proc-&gt;alloc, tr-&gt;data_size,\n        tr-&gt;offsets_size, extra_buffers_size,\n        !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));\n        ...\n    if (secctx) {\n        size_t buf_offset = ALIGN(tr-&gt;data_size, sizeof(void *)) +\n                    ALIGN(tr-&gt;offsets_size, sizeof(void *)) +\n                    ALIGN(extra_buffers_size, sizeof(void *)) -\n                    ALIGN(secctx_sz, sizeof(u64));\n\n        t-&gt;security_ctx = (uintptr_t)t-&gt;buffer-&gt;user_data + buf_offset;\n        binder_alloc_copy_to_buffer(&amp;target_proc-&gt;alloc,\n                        t-&gt;buffer, buf_offset,\n                        secctx, secctx_sz);\n        security_release_secctx(secctx, secctx_sz);\n        secctx = NULL;\n    }\n    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;\n    t-&gt;buffer-&gt;transaction = t;             // \u7f13\u51b2\u533a\u6b63\u4ea4\u7ed9\u54ea\u4e2a\u4e8b\u52a1\u4f7f\u7528\n    t-&gt;buffer-&gt;target_node = target_node;   // \u7f13\u51b2\u533a\u6b63\u4ea4\u7ed9\u54ea\u4e2aBinder\u5b9e\u4f53\u5bf9\u8c61\u4f7f\u7528\n    trace_binder_transaction_alloc_buf(t-&gt;buffer);\n\n    //\u62f7\u8d1d\u7528\u6237\u7a7a\u95f4\u7684binder_transaction_data\u4e2dptr.buffer\u5230\u5185\u6838\uff0c\u5b58\u5165t-&gt;buffer\n    //\u4ecemOut\u4e2d\u5c06data\u62f7\u8d1d\u5230buffer\u4e2d\n    if (binder_alloc_copy_user_to_buffer(\n                &amp;target_proc-&gt;alloc,\n                t-&gt;buffer, 0,\n                (const void __user *)\n                    (uintptr_t)tr-&gt;data.ptr.buffer,\n                tr-&gt;data_size)) {\n               ...\n    }\n    //\u62f7\u8d1d\u7528\u6237\u7a7a\u95f4\u7684binder_transaction_data\u4e2dptr.offsets\u5230\u5185\u6838,\u5b58\u5165t-&gt;buffer\n    //\u4ecemObjects \u4e2d\u5c06offset\u6570\u636e\u62f7\u8d1d\u5230buffer\u4e2ddata\u4e4b\u540e\n    if (binder_alloc_copy_user_to_buffer(\n                &amp;target_proc-&gt;alloc,\n                t-&gt;buffer,\n                ALIGN(tr-&gt;data_size, sizeof(void *)),\n                (const void __user *)\n                    (uintptr_t)tr-&gt;data.ptr.offsets,\n                tr-&gt;offsets_size)) {\n               ...\n    }\n    ...\n    off_start_offset = ALIGN(tr-&gt;data_size, sizeof(void *));\n    buffer_offset = off_start_offset;\n    off_end_offset = off_start_offset + tr-&gt;offsets_size;\n    sg_buf_offset = ALIGN(off_end_offset, sizeof(void *));\n    sg_buf_end_offset = sg_buf_offset + extra_buffers_size -\n        ALIGN(secctx_sz, sizeof(u64));\n    off_min = 0;\n\n\n    //\u4ecedata\u4e2d\u89e3\u6790\u51fa\u6240\u6709\u7684binder\u5b9e\u4f53\u5e76\u4e3a\u5176\u521b\u5efabinder_node\u548cbinder_ref\n    for (buffer_offset = off_start_offset; buffer_offset &lt; off_end_offset;\n         buffer_offset += sizeof(binder_size_t)) {\n        struct binder_object_header *hdr;\n        size_t object_size;\n        struct binder_object object;\n        binder_size_t object_offset;\n\n        //\u5f97\u5230object_offset\u7684\u5927\u5c0f\n        binder_alloc_copy_from_buffer(&amp;target_proc-&gt;alloc,\n                          &amp;object_offset,\n                          t-&gt;buffer,\n                          buffer_offset,\n                          sizeof(object_offset));\n        //\u4ecet-&gt;buffer\u4e2d\u89e3\u6790object\uff0cobject_size=sizeof(flat_binder_object)\n        object_size = binder_get_object(target_proc, t-&gt;buffer,\n                        object_offset, &amp;object);\n        if (object_size == 0 || object_offset &lt; off_min) {\n            ...\n            return_error = BR_FAILED_REPLY;\n            return_error_param = -EINVAL;\n            return_error_line = __LINE__;\n            goto err_bad_offset;\n        }\n\n        hdr = &amp;object.hdr;\n        off_min = object_offset + object_size;\n        //\u6839\u636eaddService\u65f6\uff0cwriteStrongBinder()\u5199\u7684\u662f\u5b9e\u4f53Binder--BINDER_TYPE_BINDER\uff0c\u8fd8\u662f\u4ee3\u7406Binder--BINDER_TYPE_HANDLE\u7c7b\u578b\u6765\u51b3\u5b9a\n        switch (hdr-&gt;type) {\n        case BINDER_TYPE_BINDER:\n        case BINDER_TYPE_WEAK_BINDER: {\n            // \u5982\u679c\u662fbinder\u5b9e\u4f53\n            struct flat_binder_object *fp;\n\n            fp = to_flat_binder_object(hdr);\n            //\u5728\u76ee\u6807\u8fdb\u7a0b\u7684binder_proc\u4e2d\u521b\u5efa\u5bf9\u5e94\u7684binder_ref\u7ea2\u9ed1\u6811\u8282\u70b9\n            //BINDER_TYPE_BINDER \u8f6c\u6210BINDER_TYPE_HANDLE\n            //\u4e3abinder\u5b9e\u4f53\u521b\u5efabinder_node\u5e76\u6dfb\u52a0\u5230\u7ea2\u9ed1\u6811proc-&gt;nodes.rb_node\u4e2d\n            ret = binder_translate_binder(fp, t, thread);\n            if (ret &lt; 0) {\n                return_error = BR_FAILED_REPLY;\n                return_error_param = ret;\n                return_error_line = __LINE__;\n                goto err_translate_failed;\n            }\n            binder_alloc_copy_to_buffer(&amp;target_proc-&gt;alloc,\n                            t-&gt;buffer, object_offset,\n                            fp, sizeof(*fp));\n        } break;\n        case BINDER_TYPE_HANDLE:\n        case BINDER_TYPE_WEAK_HANDLE: {\n            // \u5982\u679c\u662f Binder\u5f15\u7528\uff0c\u62ff\u5230Binder\u7684handle\n            struct flat_binder_object *fp;\n\n            fp = to_flat_binder_object(hdr);\n             //\u5728\u8fdc\u7aef\u8fdb\u7a0b\u7684binder_proc\u4e2d\u627e\u5230\u4e00\u4e2abinder_ref\u7ea2\u9ed1\u6811\u8282\u70b9\n            //\u89e3\u6790\u51fa\u5f15\u7528\u7684flat_binder_object,\u5e76\u5728\u8bf7\u6c42proc\u4e0b\u521b\u5efa\u670d\u52a1\u7684\u5f15\u7528\n            ret = binder_translate_handle(fp, t, thread);\n            if (ret &lt; 0) {\n                return_error = BR_FAILED_REPLY;\n                return_error_param = ret;\n                return_error_line = __LINE__;\n                goto err_translate_failed;\n            }\n            binder_alloc_copy_to_buffer(&amp;target_proc-&gt;alloc,\n                            t-&gt;buffer, object_offset,\n                            fp, sizeof(*fp));\n        } break;\n            ...\n        }\n    }\n    //transaction\u4e8b\u52a1\u5904\u7406\u5b8c\u6210\n    tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;\n    t-&gt;work.type = BINDER_WORK_TRANSACTION; //\u8bbe\u7f6e\u4e8b\u52a1\u7c7b\u578b\n\n    if (reply) {\n    ... \n    } else if (!(t-&gt;flags &amp; TF_ONE_WAY)) {\n        BUG_ON(t-&gt;buffer-&gt;async_transaction != 0);\n        binder_inner_proc_lock(proc);\n        //\u5ef6\u8fdf TRANSACTION_COMPLETE\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u4f1a\u7acb\u5373\u8fd4\u56de\u5230\u7528\u6237\u7a7a\u95f4\uff1b\n        //\u8fd9\u5141\u8bb8\u76ee\u6807\u8fdb\u7a0b\u7acb\u5373\u5f00\u59cb\u5904\u7406\u6b64\u4e8b\u52a1\uff0c\u4ece\u800c\u51cf\u5c11\u5ef6\u8fdf\u3002\n        //\u7136\u540e\uff0c\u5f53\u76ee\u6807\u56de\u590d\uff08\u6216\u51fa\u73b0\u9519\u8bef\uff09\u65f6\uff0c\u6211\u4eec\u5c06\u8fd4\u56deTRANSACTION_COMPLETE\u3002\n        //\u628abinder_transaction\u8282\u70b9\u63d2\u5165target_list\uff08\u5373\u76ee\u6807todo\u961f\u5217\uff09\n        binder_enqueue_deferred_thread_work_ilocked(thread, tcomplete);\n        t-&gt;need_reply = 1;  //\u662f\u53cc\u5411\u7684\u6240\u4ee5\u9700\u8981\u56de\u590d\n        t-&gt;from_parent = thread-&gt;transaction_stack;\n        thread-&gt;transaction_stack = t;  //\u5c06\u4f20\u9012\u6570\u636e\u4fdd\u5b58\u5728\u8bf7\u6c42\u7ebf\u7a0b\u7684\u4e2d,\u4ee5\u540e\u540e\u7eed\u7f13\u5b58\u91ca\u653e\u7b49\n        binder_inner_proc_unlock(proc);\n        //\u5c06\u6570\u636e\u653e\u5230\u76ee\u6807\u8fdb\u7a0b\u7684todo list\u4e2d\u53bb,\u5524\u9192\u76ee\u6807\u8fdb\u7a0b\u5904\u7406\u8bf7\u6c42,\u8fd9\u91cc\u5524\u9192ServiceManager\u8fdb\u884c\u5904\u7406\n        if (!binder_proc_transaction(t, target_proc, target_thread)) {\n            binder_inner_proc_lock(proc);\n            binder_pop_transaction_ilocked(thread, t);\n            binder_inner_proc_unlock(proc);\n            goto err_dead_proc_or_thread;\n        }\n    } else {\n        ...\n    }\n    if (target_thread)\n        binder_thread_dec_tmpref(target_thread);\n    binder_proc_dec_tmpref(target_proc);\n    if (target_node)\n        binder_dec_node_tmpref(target_node);\n    smp_wmb();\n    WRITE_ONCE(e-&gt;debug_id_done, t_debug_id);\n    return;\n\n    ...\n}\n</code></pre> <ul> <li>\u540c\u6837\u662fBC_\u547d\u4ee4\uff0cBC_TRANSACTION\u4e0eBC_REPLY\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5bf9\u4e8eBC_REPLY\uff0c\u4e00\u822c\u4f1a\u662f\u57fa\u4e8e\u67d0\u4e2aBR_TRANSACTION\u5904\u7406\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u524d\u9762\u5904\u7406\u7684transaction\u4e5f\u4f1a\u88ab\u4fdd\u5b58\u5230binder_thread\u7684transaction_stack\u91cc\u3002\u4e8e\u662f\uff0c\u5bf9\u4e8eBC_REPLY\u7684\u5904\u7406\uff0c\u5c31\u4f1a\u662f\u901a\u8fc7transaction_stack\uff0c\u518d\u57fa\u4e8e\u5b83\u5904\u7406BC_REPLY\u8bf7\u6c42\u3002\u9996\u5148\u4f1a\u8bbe\u7f6e\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8fd4\u56de\u503c\u4f20\u8f93\u65f6\u7684\u4f18\u5148\u7ea7\u603b\u4f1a\u7531\u53d1\u9001\u65f6\u6765\u51b3\u5b9a\uff0c\u4e8e\u662f\u8fd9\u91cc\u4f1a\u91cd\u8bbe\u4f18\u5148\u7ea7\u3002\u7136\u540e\u628atransaction_stack\u5f39\u51fa\u4e00\u7ea7\uff08\u4e4b\u6240\u6709\u53ebstack\uff0c\u4f1a\u8bb0\u5f55transaction\u7684\u6808\u5f0f\u5173\u7cfb\uff09\uff0c\u76f8\u5f53\u4e8e\u51fd\u6570\u8c03\u7528\u4e0a\u5df2\u7ecf\u9000\u51fa\u4e86\uff0c\u7136\u540e\u56de\u9000\u4e00\u6b21\u6808\u3002\u6700\u540e\u4f1a\u8bbe\u7f6e\u597dtarget_thread\u548ctarget_proc\uff0c\u4e3a\u540e\u7eed\u64cd\u4f5c\u4f5c\u597d\u51c6\u5907\u3002</li> <li>\u5bf9\u4e8eBC_TRANSACTION\uff0c\u4e0d\u662f\u57fa\u4e8e\u67d0\u4e2a\u5df2\u6709\u7684transaction\uff0c\u76f8\u53cd\u662f\u8981\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\uff0c\u4f1a\u51b3\u5b9a\u540e\u7eedBC_REPLY\u64cd\u4f5c\u7684transaction\u3002</li> <li>\u5982\u679c\u6709\u7528\u6237\u6001\u4f20\u8fc7\u6765\u7684binder_transaction\u5305\u542btarget.handle\uff0c\u8fd9\u8bf4\u660e\u662f\u901a\u8fc7Proxy\u627e\u5230\u660e\u786e\u7684\u64cd\u4f5c\u76ee\u6807\uff0c\u5219\u4f1a\u5c1d\u8bd5\u5728Binder\u9a71\u52a8\u91cc\u67e5\u627e\u8be5target.handle\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u627e\u5230\u5219\u4f1a\u76f4\u63a5\u628a\u5b83\u4f5c\u4e3a\u64cd\u4f5c\u76ee\u6807\u3002\u5f53\u7136\u8fd9\u65f6\u53ef\u80fd\u627e\u4e0d\u5230\uff0c\u56e0\u4e3aBinder\u5fc5\u7136\u662f\u5148\u6709Service\uff0c\u7136\u540e\u624d\u7531Proxy\u5f15\u7528\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u65f6\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u975e\u6cd5\u8bbf\u95ee\uff0c\u51fa\u9519\u9000\u51fa\u3002\u5982\u679c\u7528\u6237\u6001\u8fdb\u7a0b\u6ca1\u6709\u6307\u5b9atarget.handle\uff0c\u8fd9\u53ea\u80fd\u8bf4\u660e\u662f\u901a\u8fc7servicemanager\u6765\u67e5\u627eService\u7684\u8bf7\u6c42\uff0c\u4f1a\u76f4\u63a5\u628a\u76ee\u6807\u8bbe\u7f6e\u4e3abinder_context_mgr_node\u3002</li> <li>\u5982\u679c\u4f20\u8f93\u4e0d\u662f\u5355\u5411\u7684\uff0c\u5e76\u4e14binder_thread\u7684transaction_stack\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u6b64\u65f6\u6b63\u5728\u5904\u7406\u67d0\u4e2a\u6216\u8005\u591a\u4e2aBC_TRANSACTION\u8fc7\u7a0b\u4e2d\u3002\u6211\u4eec\u4e5f\u77e5\u9053\u6808\u5f0f\u7ed3\u6784\u91cc\u6808\u9876\u6c38\u8fdc\u4f1a\u662f\u6700\u65b0\u7684\u4e0a\u4e0b\u6587\u73b0\u573a\uff0c\u8fd9\u4e0d\u7b26\u5408\u4f20\u8f93\u7684\u5b9e\u9645\u9700\u6c42\u3002\u4e8e\u662f\uff0c\u8fd9\u91cc\u4f1a\u901a\u8fc7\u4e00\u6b21\u5faa\u73af\u627e\u5230transaction_stack\u7684\u76ee\u6807\u7b26\u5408\u7684target_thread\u3002\u8fd9\u4e5f\u6709\u52a9\u4e8e\u7ebf\u7a0b\u6c60\u64cd\u4f5c\uff0c\u5982\u679c\u5b58\u5728\u4e8etransaction_stack\u4e2d\uff0c\u5219\u8bf4\u660e\u8be5transaction\u80af\u5b9a\u5904\u4e8e\u67d0\u4e2a\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u8fd0\u884c\u8fd9\u4e2a\u5904\u7406\u8fc7\u7a0b\u7684Binder\u7ebf\u7a0b\u5fc5\u7136\u65e0\u6cd5\u88ab\u7528\u4e8e\u63a5\u6536\u8fd9\u4e00transaction\uff0c\u800c\u4e3bBinder\u7ebf\u7a0b\u6309\u7167\u540c\u6837\u7684\u539f\u5219\uff08\u547d\u4ee4\u4ea4\u7ed9\u5904\u4e8e\u6808\u5e95\u7684Binder\u7ebf\u7a0b\u6765\u8bfb\uff0c\u4ea4\u4e92\u5219\u53d1\u751f\u5728\u6808\u9876\u7684Binder\u7ebf\u7a0b\u91cc\uff09\uff0c\u603b\u4f1a\u662f\u6700\u201c\u95f2\u201d\u7684\u3002</li> <li>\u8ddf3\u7684\u5904\u7406\u539f\u7406\u7c7b\u4f3c\uff0c\u5982\u679c\u627e\u5230\u76ee\u6807binder_thread\uff0c\u5219\u8bf4\u660e\u8be5\u7ebf\u7a0b\u662f\u5c5e\u4e8e\u67d0\u4e2a\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u7684Service\u7684\uff0c\u76f4\u63a5\u66f4\u65b0target_list\u548ctarget_wait\u4fe1\u606f\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5219\u6839\u636e\u76ee\u6807\u7684binder_proc\u6765\u4e0d\u66f4\u65b0\u8fd9\u4e24\u4e2a\u5217\u8868\u4fe1\u606f\uff0c\u6b64\u65f6\u5219\u53d1\u751f\u5728ServiceManager\u8bbf\u95ee\u6216\u662fService\u7684Binder\u7ebf\u7a0b\u6ca1\u6709\u5c31\u7eea\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5b58\u8d77\u6765\u7b49\u5f85\u5c31\u7eea\u540e\u518d\u6267\u884c\u3002</li> <li>\u5206\u914d\u4f20\u8f93\u65f6\uff0c\u5185\u6838\u6001\u9700\u8981\u4f7f\u7528\u7684binder_transaction\u5907\u4efd\u3002\u6240\u6709\u7ecf\u7531\u5185\u6838\u800c\u5728\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u8fdb\u884c\u6d88\u606f\u4f20\u8f93\u7684\u6570\u636e\uff0c\u51fa\u4e8e\u8fdb\u7a0b\u72ec\u7acb\u6027\u8003\u8651\uff0c\u5fc5\u987b\u4e24\u4e2a\u7528\u6237\u8fdb\u7a0b\u7a7a\u95f4\u5185\u5404\u4e00\u4efd\uff0c\u7136\u540e\u5728\u5185\u6838\u6001\u6709\u4e00\u4efd\uff0c\u5904\u7406\u4f20\u8f93\u51fa\u9519\u6062\u590d\u6216\u662f\u91cd\u8bd5\u3002\u800c\u53e6\u4e00\u4e2at_complete\u7684\u7533\u8bf7\uff0c\u53ea\u662f\u5efa\u7acb\u4e00\u4e2a\u64cd\u4f5c\u6210\u529f\u7684\u94fe\u8868\u800c\u5df2\u3002</li> <li>\u6839\u636e\u7528\u6237\u6001\u7684\u5f53\u524d\u4fe1\u606f\uff0c\u6765\u66f4\u65b0\u5185\u6838\u7684binder_transaction\u5907\u4efd\uff0c\u5e76\u628a\u67e5\u627e\u5230\u7684target_thread\u548ctarget_proc\u586b\u5165\u8fd9\u4e00binder_transaction\u3002</li> <li>\u5206\u914d\u5185\u6838\u6001binder_transaction\u6240\u9700\u8981\u4f7f\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f7f\u7528\u5185\u90e8\u7684binder_buffer\u6765\u5206\u914d\uff0c\u8fd9\u4e00\u7a7a\u95f4\u6e90\u81ea\u4e8e\u8fdb\u7a0b\u7a7a\u95f4\u7684mmap()\u5f97\u5230\u7684\u7528\u6237\u7a7a\u95f4\u9875\u9762\uff0c\u8fd9\u4e9b\u9875\u9762\u4f1a\u6620\u5c04\u5230\u5185\u6838\u6001\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u9020\u6210\u5185\u6838\u5206\u914d\u4e0a\u7684\u5f00\u9500\u3002</li> <li>\u5904\u4e8e\u4e00\u4e2abinder_transaction\u5185\u7684\u6570\u636e\uff0c\u90fd\u4f1a\u4fdd\u5b58\u5728data.ptr.buffer\u7684\u7528\u6237\u5185\u5b58\u91cc\uff0c\u5e76\u901a\u8fc7\u7528\u6237\u5185\u5b58\u91cc\u7684\u53e6\u4e00\u6bb5data.ptr.offsets\u6765\u7d22\u5f15buffer\u91cc\u5404\u4e2a\u5bf9\u8c61\u7684\u62c6\u5206\u60c5\u51b5\u3002\u4e8e\u662f\u8fd9\u91cc\u4f1a\u628a\u8fd9\u4e24\u90e8\u5206\u5185\u5bb9\u901a\u8fc7copy_from_user()\u62f7\u8d1d\u5230\u5185\u6838\u6001\u3002</li> <li>\u901a\u8fc7\u4e00\u6b21\u5faa\u73af\u5904\u7406data.ptr.buffer\u91cc\u6240\u5305\u542b\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u5f53\u7136\uff0c\u5728\u4f20\u8f93\u5230binder\u65f6\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5df2\u7ecf\u662f\u88ab\u201c\u538b\u6241\u201d\u4e86\u7684\u5bf9\u8c61\uff0cflat_binder_object\u3002</li> <li>\u5982\u679c\u5bf9\u8c61\u7684\u7c7b\u578b\u662fBinder\u5bf9\u8c61\uff08WEAK_BINDER\uff0c\u6709\u53ef\u80fd\u88ab\u81ea\u52a8\u56de\u6536\u7684Binder\u5bf9\u8c61\uff09\uff0c\u5219\u5c1d\u8bd5\u67e5\u627e\u7cfb\u7edf\u4f7f\u7528\u8fc7\u7684binder_node\u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u5bf9\u8c61\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u4e00\u4e2a\u3002\u7136\u540e\u7ed9\u5176\u52a0\u4e0a\u5f15\u7528\u8ba1\u6570\u3002</li> <li>\u5982\u679c\u5bf9\u8c61\u7c7b\u578b\u662fHANDLE\uff08\u6216\u662fWEAK_HANDLE\uff0c\u6709\u53ef\u80fd\u88ab\u81ea\u52a8\u56de\u6536\u7684HANDLE\u5bf9\u8c61\uff09\uff0c\u8fd9\u65f6\u5fc5\u987b\u6709\u63d0\u4f9b\u8005\uff08Service\uff09\u63d0\u4f9b\u8fd9\u4e00\u5bf9\u8c61\uff0c\u4e0d\u5b58\u5728\u4fbf\u51fa\u9519\u9000\u51fa\u3002\u5982\u679c\u5b58\u5728\uff0c\u5e76\u975etarget_proc\u4e0e\u67e5\u627e\u5230\u7684handle\u7684proc\u4e00\u81f4\uff0c\u5219\u5c06\u5bf9\u8c61\u4e0ehandle\u5173\u8054\u8d77\u6765\uff0c\u4e0d\u4e00\u81f4\u65f6\u5fc5\u7136\u53d1\u751f\u5728\u5bf9servicemanager\u7684\u8c03\u7528\u65f6\uff0c\u5219\u5c1d\u8bd5\u521b\u5efa\u4e00\u8d77\u5bf9handle\u7684\u5f15\u7528\u3002</li> <li>\u5982\u679c\u5bf9\u8c61\u7c7b\u578b\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26FD\uff0c\u5219\u9700\u8981\u5bf9\u6587\u4ef6\u672c\u8eab\u7684\u4e00\u4e9b\u5f15\u7528\u4fe1\u606f\u8fdb\u884c\u66f4\u65b0\u3002</li> <li>\u5982\u679c\u6267\u884c\u5230\u8fd9\u4e00\u6b65\uff0c\u8bc1\u660e\u8be5transaction\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u628a\u5b83\u52a0\u5165\u5230target_thread\u7684todo\u5c3e\u90e8\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2abinder_thread_read()\u5468\u671f\u7684\u8bfb\u53d6\u8fc7\u7a0b\u3002\u56e0\u4e3a\u52a0\u5165\u94fe\u8868\u662f\u6700\u540e\u4e00\u6b65\u64cd\u4f5c\uff0c\u4e8e\u662f\u4f20\u8f93\u8fc7\u7a0b\u91cc\u7684\u539f\u5b50\u6027\u53ef\u4ee5\u5f97\u5230\u4fdd\u8bc1\u3002</li> </ul> <p>Client\u7684\u6570\u636e\u4f20\u6765\u540e\uff0c\u8fdb\u884c\u4e8b\u52a1\u5904\u7406\u540e\uff0c\u5524\u9192Server\u7aef\uff0cServer\u7aef\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\u3002\u5047\u8bbe\u6211\u4eec\u8fd9\u91cc\u7684Server\u7aef\u4e3aServiceManager\uff0c\u5728ServiceManager\u4e2d\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u4e0d\u505c\u7684\u5411Binder\u9a71\u52a8\u53d1\u9001\u8bfb\u5199\u7684\u4fe1\u606f\uff0c\u8bfb\u5230\u5185\u5bb9\u540e\u8c03\u7528binder_parse()\u8fdb\u884c\u89e3\u6790\u3002</p> <p></p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#binder_thread_read","title":"binder_thread_read","text":"<p>\u524d\u9762\u5df2\u7ecf\u89e3\u91ca\u8fc7biner_transaction\u51fd\u6570\uff0c\u4e3b\u8981\u662f\u628abinder_transaction.work\u653e\u5165\u5230\u63a5\u6536\u7aef\u7684todo\u961f\u5217\u3002\u800cbinder_thread_read\u51fd\u6570\u4e3b\u8981\u662f\u5904\u7406todo\u961f\u5217\u4e2d\u7684binder_work\u5bf9\u8c61\u3002</p> <pre><code>static int binder_thread_read(struct binder_proc *proc,\n                  struct binder_thread *thread,\n                  binder_uintptr_t binder_buffer, size_t size,\n                  binder_size_t *consumed, int non_block)\n{\n    ...\n\nretry:\n    binder_inner_proc_lock(proc);\n    //\u4f18\u5148\u8003\u8651thread\u8282\u70b9\u7684todo\u94fe\u8868\u4e2d\u6709\u6ca1\u6709\u5de5\u4f5c\u9700\u8981\u5b8c\u6210\n    wait_for_proc_work = binder_available_for_proc_work_ilocked(thread);\n    binder_inner_proc_unlock(proc);\n\n    thread-&gt;looper |= BINDER_LOOPER_STATE_WAITING;\n\n    trace_binder_wait_for_work(wait_for_proc_work,\n                   !!thread-&gt;transaction_stack,\n                   !binder_worklist_empty(proc, &amp;thread-&gt;todo));\n    if (wait_for_proc_work) {\n        if (!(thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |\n                    BINDER_LOOPER_STATE_ENTERED))) {\n            binder_user_error(\"%d:%d ERROR: Thread waiting for process work before calling BC_REGISTER_LOOPER or BC_ENTER_LOOPER (state %x)\\n\",\n                proc-&gt;pid, thread-&gt;pid, thread-&gt;looper);\n            wait_event_interruptible(binder_user_error_wait,\n                         binder_stop_on_user_error &lt; 2);\n        }\n        trace_android_vh_binder_restore_priority(NULL, current);\n        binder_restore_priority(current, proc-&gt;default_priority);\n    }\n\n    if (non_block) {\n        if (!binder_has_work(thread, wait_for_proc_work))\n            ret = -EAGAIN;\n    } else {\n        //\u4f11\u7720\u5728\u8fd9\u91cc, wait_for_proc_work\u4e3afalse\n        ret = binder_wait_for_work(thread, wait_for_proc_work);\n    }\n\n    thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_WAITING;\n\n    if (ret)\n        return ret;\n\n    while (1) {\n\n        ...\n\n        switch (w-&gt;type) {\n        case BINDER_WORK_TRANSACTION: {\n            binder_inner_proc_unlock(proc);\n            t = container_of(w, struct binder_transaction, work);\n        } break;\n        }\n        ...\n\n        //\u6570\u636e\u5728\u5185\u6838\u4e2d\u5c01\u88c5\u6210\u7ed3\u6784\u4f53binder_transaction\u4f20\u8f93,\n        //\u636e\u8fd4\u56de\u5230\u5e94\u7528\u5c42\u4e4b\u540e\u8981\u5c01\u88c5\u6210\u7ed3\u6784\u4f53 binder_transaction_data,\u6240\u4ee5\u8fd9\u91cc\u5c31\u662f\u5c06\u6570\u636e\u4ece\u65b0\u5c01\u88c5\u6210binder_transaction_data\u8fd4\u56de\u7ed9\u7528\u6237\u7a7a\u95f4\n        if (t-&gt;buffer-&gt;target_node) {\n            struct binder_node *target_node = t-&gt;buffer-&gt;target_node;\n            struct binder_priority node_prio;\n\n            //\u7528\u76ee\u6807binder_node\u4e2d\u8bb0\u5f55\u7684cookie\u503c\u7ed9binder_transaction_data\u7684cookie\u57df\u8d4b\u503c\n            //\u8fd9\u4e2a\u503c\u5c31\u662f\u76ee\u6807binder\u5b9e\u4f53\u7684\u5730\u5740\n            trd-&gt;target.ptr = target_node-&gt;ptr;\n            trd-&gt;cookie =  target_node-&gt;cookie;\n            node_prio.sched_policy = target_node-&gt;sched_policy;\n            node_prio.prio = target_node-&gt;min_priority;\n            binder_transaction_priority(current, t, node_prio,\n                            target_node-&gt;inherit_rt);\n            cmd = BR_TRANSACTION;\n        } else {\n            trd-&gt;target.ptr = 0;\n            trd-&gt;cookie = 0;\n            cmd = BR_REPLY;\n        }\n        trd-&gt;code = t-&gt;code;\n        trd-&gt;flags = t-&gt;flags;\n        trd-&gt;sender_euid = from_kuid(current_user_ns(), t-&gt;sender_euid);\n\n        t_from = binder_get_txn_from(t);\n        if (t_from) {\n            struct task_struct *sender = t_from-&gt;proc-&gt;tsk;\n\n            trd-&gt;sender_pid =\n                task_tgid_nr_ns(sender,\n                        task_active_pid_ns(current));\n        } else {\n            trd-&gt;sender_pid = 0;\n        }\n\n        ret = binder_apply_fd_fixups(proc, t);\n        if (ret) {\n            struct binder_buffer *buffer = t-&gt;buffer;\n            bool oneway = !!(t-&gt;flags &amp; TF_ONE_WAY);\n            int tid = t-&gt;debug_id;\n\n            if (t_from)\n                binder_thread_dec_tmpref(t_from);\n            buffer-&gt;transaction = NULL;\n            binder_cleanup_transaction(t, \"fd fixups failed\",\n                           BR_FAILED_REPLY);\n            binder_free_buf(proc, buffer);\n\n            ...\n\n            if (cmd == BR_REPLY) {\n                cmd = BR_FAILED_REPLY;\n                if (put_user(cmd, (uint32_t __user *)ptr))\n                    return -EFAULT;\n                ptr += sizeof(uint32_t);\n                binder_stat_br(proc, thread, cmd);\n                break;\n            }\n            continue;\n        }\n        trd-&gt;data_size = t-&gt;buffer-&gt;data_size;\n        trd-&gt;offsets_size = t-&gt;buffer-&gt;offsets_size;\n        trd-&gt;data.ptr.buffer = (uintptr_t)t-&gt;buffer-&gt;user_data;\n        trd-&gt;data.ptr.offsets = trd-&gt;data.ptr.buffer +\n                    ALIGN(t-&gt;buffer-&gt;data_size,\n                        sizeof(void *));\n\n        tr.secctx = t-&gt;security_ctx;\n        if (t-&gt;security_ctx) {\n            cmd = BR_TRANSACTION_SEC_CTX;\n            trsize = sizeof(tr);\n        }\n        //\u5c06cmd\u547d\u4ee4\u5199\u5165\u7528\u6237\u6001\uff0c\u6b64\u65f6\u5e94\u8be5\u662fBR_TRANSACTION\n        if (put_user(cmd, (uint32_t __user *)ptr)) {\n            if (t_from)\n                binder_thread_dec_tmpref(t_from);\n\n            binder_cleanup_transaction(t, \"put_user failed\",\n                           BR_FAILED_REPLY);\n\n            return -EFAULT;\n        }\n        ptr += sizeof(uint32_t);\n        //\u5c06\u91cd\u65b0\u5c01\u88c5\u540e\u7684\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u7a7a\u95f4\n        if (copy_to_user(ptr, &amp;tr, trsize)) {\n            if (t_from)\n                binder_thread_dec_tmpref(t_from);\n\n            binder_cleanup_transaction(t, \"copy_to_user failed\",\n                           BR_FAILED_REPLY);\n\n            return -EFAULT;\n        }\n        ptr += trsize;\n\n        trace_binder_transaction_received(t);\n        binder_stat_br(proc, thread, cmd);\n\n        ...\n\n        if (t_from)\n            binder_thread_dec_tmpref(t_from);\n        t-&gt;buffer-&gt;allow_user_free = 1;\n        if (cmd != BR_REPLY &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) {\n            //binder_transaction\u8282\u70b9\u63d2\u5165\u4e86\u76ee\u6807\u7ebf\u7a0b\u7684transaction_stack\u5806\u6808\uff0c\u800c\u4e14\u662f\u4ee5to_thread\u57df\u6765\u8fde\u63a5\u5806\u6808\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\n            binder_inner_proc_lock(thread-&gt;proc);\n            t-&gt;to_parent = thread-&gt;transaction_stack;\n            t-&gt;to_thread = thread;\n            thread-&gt;transaction_stack = t;\n            binder_inner_proc_unlock(thread-&gt;proc);\n        } else {\n            //TF_ONE_WAY\u60c5\u51b5\uff0c\u6b64\u65f6\u4f1a\u5220\u9664binder_transaction\u8282\u70b9\n            binder_free_transaction(t);\n        }\n        break;\n    }\n\ndone:\n\n    *consumed = ptr - buffer;\n    binder_inner_proc_lock(proc);\n    if (proc-&gt;requested_threads == 0 &amp;&amp;\n        list_empty(&amp;thread-&gt;proc-&gt;waiting_threads) &amp;&amp;\n        proc-&gt;requested_threads_started &lt; proc-&gt;max_threads &amp;&amp;\n        (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |\n         BINDER_LOOPER_STATE_ENTERED)) /* the user-space code fails to */\n         /*spawn a new thread if we leave this out */) {\n        proc-&gt;requested_threads++;\n        binder_inner_proc_unlock(proc);\n\n        ...\n\n        if (put_user(BR_SPAWN_LOOPER, (uint32_t __user *)buffer))\n            return -EFAULT;\n        binder_stat_br(proc, thread, BR_SPAWN_LOOPER);\n    } else\n        binder_inner_proc_unlock(proc);\n    return 0;\n}\n</code></pre> <ul> <li>binder_driver\u9996\u5148\u786e\u5b9a\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u6709\u672a\u5904\u7406\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u8ba9\u672c\u7ebf\u7a0b\u53bb\u5904\u7406\u53d1\u7ed9\u8fdb\u7a0b\u7684\u5de5\u4f5c\uff08\u5373\u4e0d\u9650\u5b9a\u7531\u90a3\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u7684\u5de5\u4f5c\uff09\u3002</li> <li>\u7b49\u5f85binder_work\u3002</li> <li>\u5faa\u73af\u5904\u7406binder_work\u3002</li> </ul>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/driver/#_7","title":"\u603b\u7ed3","text":"<ul> <li>Binder\u91c7\u7528\u4e86AIDL\u6765\u63cf\u8ff0\u8fdb\u7a0b\u95f4\u7684\u63a5\u53e3\u3002</li> <li>Binder\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\u578b\u8bbe\u5907\uff0c\u8bbe\u5907\u8282\u70b9\u4e3adev/binder\u3002</li> <li> <p>\u5728Binder\u9a71\u52a8\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u4ee5\u4e0b\u51fd\u6570\u8d77\u7740\u5173\u952e\u4f5c\u7528\uff1a</p> </li> <li> <p>\u4f7f\u7528binder_ioctl()\u51fd\u6570\u4e0e\u7528\u6237\u7a7a\u95f4\u4ea4\u6362\u6570\u636e\u3002</p> </li> <li>BINDER_WRITE_READ\u7528\u6765\u8bfb\u5199\u6570\u636e\uff0c\u6570\u636e\u5305\u4e2d\u7684cmd\u57df\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u8bf7\u6c42\uff1b</li> <li>\u4f7f\u7528binder_thread_write()\u51fd\u6570\u6765\u53d1\u9001\u8bf7\u6c42\u6216\u8fd4\u56de\u7ed3\u679c\uff0c\u5728binder_thread_write()\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7\u8c03\u7528binder_transaction()\u51fd\u6570\u6765\u8f6c\u53d1\u8bf7\u6c42\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u5f53\u6536\u5230\u8bf7\u6c42\u65f6\uff0cbinder_transaction()\u51fd\u6570\u4f1a\u901a\u8fc7\u5bf9\u8c61\u7684handle\u627e\u5230\u5bf9\u8c61\u6240\u5728\u7684\u8fdb\u7a0b\uff0c\u5982\u679chandle\u7ed3\u679c\u4e3a\u7a7a\uff0c\u5219\u8ba4\u4e3a\u6b64\u5bf9\u8c61\u662fcontext_mgr\uff0c\u7136\u540e\u628a\u8bf7\u6c42\u53d1\u7ed9context_mgr\u6240\u5728\u7684\u8fdb\u7a0b\uff0c\u5e76\u5c06\u8bf7\u6c42\u4e2d\u6240\u6709\u7684Binder\u5bf9\u8c61\u653e\u5230RB\u6811\u4e2d\uff0c\u6700\u540e\u628a\u8bf7\u6c42\u653e\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u961f\u5217\u4e2d\u4ee5\u7b49\u5f85\u76ee\u6807\u8fdb\u7a0b\u7684\u8bfb\u53d6\u3002</li> <li>\u4f7f\u7528binder_thread_read()\u51fd\u6570\u6765\u8bfb\u53d6\u7ed3\u679c\u3002</li> <li>\u5728\u51fd\u6570binder_parse()\u4e2d\u5b9e\u73b0\u6570\u636e\u89e3\u6790\u5de5\u4f5c\u3002</li> </ul> <p>\u53c2\u8003\uff1a</p> <p>\u300cBinder\u673a\u5236\u5b66\u4e60\u603b\u7ed3(\u4e8c)-Driver\u90e8\u5206\u300d</p> <p>\u300cBinder\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u300d</p> <p>\u300c\u7406\u89e3Android Binder\u673a\u5236\uff1a\u9a71\u52a8\u7bc7\u300d</p> <p>\u300cAndroid10.0 Binder\u901a\u4fe1\u539f\u7406(\u4e94)-Binder\u9a71\u52a8\u5206\u6790\u300d</p> <p>\u300c\u56fe\u89e3Android - Binder \u548c Service\u300d</p>","tags":["Android","Binder","\u9a71\u52a8"]},{"location":"android/binder/service-manager/","title":"Binder\u673a\u523602-ServiceManager","text":"<p>Service Manager\u662f\u6574\u4e2aBinder\u673a\u5236\u7684\u5b88\u62a4\u8fdb\u7a0b\uff0c\u7528\u6765\u7ba1\u7406\u5f00\u53d1\u8005\u521b\u5efa\u7684\u5404\u79cdServer\uff0c\u5e76\u4e14\u5411Client\u63d0\u4f9b\u67e5\u8be2Server\u8fdc\u7a0b\u63a5\u53e3\u7684\u529f\u80fd\u3002Service Manager\u5728init.rc\u4e2d\u4f5c\u4e3aservice\u542f\u52a8\uff0c\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\u4e2d\u3002\u800cClient\u548cServer\u4e5f\u8fd0\u884c\u5728\u72ec\u7acb\u7684\u8fdb\u7a0b\u4e2d\u3002\u5982\u679cClient\u548cServer\u9700\u8981\u8fdb\u884c\u901a\u4fe1\uff0cClient\u5c31\u9700\u8981\u5411Service Manager\u67e5\u8be2\u670d\u52a1\uff0c\u83b7\u5f97Server\u624d\u80fd\u6b63\u5e38\u8ddfServer\u901a\u4fe1\u3002Service Manager\u5728Binder\u673a\u5236\u7684\u5b88\u62a4\u8fdb\u7a0b\u7684\u89d2\u8272\u7684\u540c\u65f6\uff0c\u4e5f\u5728\u5145\u5f53Server\u7684\u89d2\u8272\u3002\u5b83\u662f\u4e00\u79cd\u7279\u6b8a\u7684Server\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#servicemanager","title":"ServiceManager\u542f\u52a8","text":"<p>init\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u52a0\u8f7dservicemanager.rc\uff0c\u542f\u52a8serviecmanager\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/system/core/rootdir/init.rc\n\non init\n    sysclktz 0\n\n    ...\n\n    ## Start essential services.\n    start servicemanager\n    start hwservicemanager\n    start vndservicemanager\n</code></pre> <p>\u4e09\u4e2a\u670d\u52a1\u7684\u5b9a\u4e49\u5982\u94fe\u63a5\u4e2d\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ea\u4ee5servicemanager\u4e3e\u4f8b\u3002</p> <p>servicemanager</p> <p>hwservicemanager</p> <p>vndservicemanager</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/servicemanager.rc\n\nservice servicemanager /system/bin/servicemanager\n    class core animation\n    user system\n    group system readproc\n    critical\n    onrestart restart apexd\n    onrestart restart audioserver\n    onrestart restart gatekeeperd\n    onrestart class_restart main\n    onrestart class_restart hal\n    onrestart class_restart early_hal\n    writepid /dev/cpuset/system-background/tasks\n    shutdown critical\n</code></pre> <p>\u4ece\u4e0a\u9762\u7684rc\u6587\u4ef6\u53ef\u77e5\u9053\uff0cservicemanager\u7f16\u8bd1\u540e\uff0c\u4f4d\u4e8e\u624b\u673a\u7684/system/bin\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2aNative C/C++\u7684\u8fdb\u7a0b\uff0cC/C++\u7684\u8fdb\u7a0b\u90fd\u4f1a\u6709\u4e00\u4e2amain()\u7684\u5165\u53e3\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/Android.bp\n\ncc_binary {\n    name: \"servicemanager\",\n    defaults: [\"servicemanager_defaults\"],\n    init_rc: [\"servicemanager.rc\"],\n    srcs: [\"main.cpp\"],\n}\n</code></pre> <p>\u901a\u8fc7\u67e5\u770bAndroid.bp\u6211\u4eec\u627e\u5230\u4e86servicemanager\u7684\u5165\u53e3\uff1amain.cpp\u7684main()\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/main.cpp\n\nint main(int argc, char** argv) {\n    if (argc &gt; 2) {\n        LOG(FATAL) &lt;&lt; \"usage: \" &lt;&lt; argv[0] &lt;&lt; \" [binder driver]\";\n    }\n    //servicemanager\u548cvndservicemanager\u5171\u4eab\u4e00\u5957\u4ee3\u7801\uff0cvndservicemanager\u4f20\u5165\u53c2\u6570\"/dev/vndbinder\"\n    const char* driver = argc == 2 ? argv[1] : \"/dev/binder\";\n\n    //android11\u8ddf\u4e4b\u524d\u7684\u4ee3\u7801\u5dee\u5f02\u6bd4\u8f83\u5927\uff0c\u6253\u5f00binder\u8bbe\u5907\u6587\u4ef6\u662f\u5728ProcessState\u91cc\u6267\u884c\n    //\u4e0b\u6587\u6211\u4eec\u5c06\u91cd\u70b9\u5206\u6790initWithDriver\u90fd\u505a\u91cc\u4ec0\u4e48\u4e8b\u60c5\n    sp&lt;ProcessState&gt; ps = ProcessState::initWithDriver(driver);\n    ps-&gt;setThreadPoolMaxThreadCount(0);\n    ps-&gt;setCallRestriction(ProcessState::CallRestriction::FATAL_IF_NOT_ONEWAY);\n    //\u5206\u914d\u4e00\u4e2a\u5b9e\u4f8b\n    sp&lt;ServiceManager&gt; manager = new ServiceManager(std::make_unique&lt;Access&gt;());\n    //\u5c06 ServiceManager\u5bf9\u8c61\u63d2\u5165ServiceManager::mNameToService\u4e2d\n    if (!manager-&gt;addService(\"manager\", manager, false /*allowIsolated*/, IServiceManager::DUMP_FLAG_PRIORITY_DEFAULT).isOk()) {\n        LOG(ERROR) &lt;&lt; \"Could not self register servicemanager\";\n    }\n\n    //\u544a\u8bc9binder\u9a71\u52a8\u81ea\u5df1\u662fbinder\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n    IPCThreadState::self()-&gt;setTheContextObject(manager);\n    ps-&gt;becomeContextManager();\n\n    sp&lt;Looper&gt; looper = Looper::prepare(false /*allowNonCallbacks*/);\n\n    BinderCallback::setupTo(looper);\n    ClientCallbackCallback::setupTo(looper, manager);\n\n    //\u8fdb\u5165\u4e00\u4e2a\u65e0\u7a77\u5faa\u73af\uff0c\u5145\u5f53Server\u7684\u89d2\u8272\uff0c\u7b49\u5f85Client\u7684\u8bf7\u6c42\n    while(true) {\n        //\u8fdb\u5165\u5faa\u73af\uff0c\u8c03\u7528 epoll_wait()\u7b49\u5f85\u6d88\u606f\n        //\u6709\u6d88\u606f\u540e\u8c03\u7528BinderCallback::handleEvent()\n        looper-&gt;pollAll(-1);\n    }\n\n    // should not be reached\n    return EXIT_FAILURE;\n}\n</code></pre> <p>\u5728Android8.0\u540e\uff0c\u8c37\u6b4c\u5f15\u5165Treble\u673a\u5236\uff0cbinder\u673a\u5236\u589e\u52a0\u4e86hwbinder\u548cvndbinder\uff0c\u5176\u4e2dvndbinder\u7684\u5b88\u62a4\u8fdb\u7a0b\u4e3avndservicemanager\u3002</p> <p>vndservicemanager\u548cservicemanager\u5171\u7528\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u662f\u4f20\u5165\u7684\u53c2\u6570\u548c\u5b8f\u63a7\u5236\u7684\u6d41\u7a0b\u6709\u90e8\u5206\u5dee\u5f02\u3002vndservicemanager\u4f1a\u4f20\u5165\u53c2\u6570\"/dev/vndbinder\", servicemanager\u4f7f\u7528\u9ed8\u8ba4\u7684\"/dev/binder\"\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#processstateinitwithdriver","title":"ProcessState.initWithDriver()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nsp&lt;ProcessState&gt; ProcessState::initWithDriver(const char* driver)\n{\n    Mutex::Autolock _l(gProcessMutex);\n    if (gProcess != nullptr) {\n        // Allow for initWithDriver to be called repeatedly with the same\n        // driver.\n        if (!strcmp(gProcess-&gt;getDriverName().c_str(), driver)) {\n            return gProcess;\n        }\n        LOG_ALWAYS_FATAL(\"ProcessState was already initialized.\");\n    }\n\n    if (access(driver, R_OK) == -1) {\n        ALOGE(\"Binder driver %s is unavailable. Using /dev/binder instead.\", driver);\n        driver = \"/dev/binder\";\n    }\n\n    gProcess = new ProcessState(driver);\n    return gProcess;\n}\n</code></pre> <p>initWithDriver\u51fd\u6570\u6ca1\u770b\u5230\u6709\u4ec0\u4e48\u7384\u673a\uff0c\u90a3\u5e94\u8be5\u662f\u5728ProcessState\u7684\u6784\u9020\u51fd\u6570\u91cc\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#new-processstatedriver","title":"new ProcessState(driver)","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nProcessState::ProcessState(const char *driver)\n    : mDriverName(String8(driver))\n    , mDriverFD(open_driver(driver))\n    , mVMStart(MAP_FAILED)\n    , mThreadCountLock(PTHREAD_MUTEX_INITIALIZER)\n    , mThreadCountDecrement(PTHREAD_COND_INITIALIZER)\n    , mExecutingThreadsCount(0)\n    , mMaxThreads(DEFAULT_MAX_BINDER_THREADS)\n    , mStarvationStartTimeMs(0)\n    , mThreadPoolStarted(false)\n    , mThreadPoolSeq(1)\n    , mCallRestriction(CallRestriction::NONE)\n{\n    ...\n\n    if (mDriverFD &gt;= 0) {\n        // mmap the binder, providing a chunk of virtual address space to receive transactions.\n        //#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n        //_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\n        //3. \u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\n        mVMStart = mmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);\n        if (mVMStart == MAP_FAILED) {\n            // *sigh*\n            ALOGE(\"Using %s failed: unable to mmap transaction memory.\\n\", mDriverName.c_str());\n            close(mDriverFD);\n            mDriverFD = -1;\n            mDriverName.clear();\n        }\n    }\n\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\u770b\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u9a71\u52a8\u7684\u540d\u5b57\u3001\u6700\u5927\u7ebf\u7a0b\u6570\u7b49\u7b49\u3002\u8fd8\u8c03\u7528\u4e86open_driver(driver)\u548cmmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0)\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#open_driverdriver","title":"open_driver(driver)","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nstatic int open_driver(const char *driver)\n{\n    //1. \u6253\u5f00Binder\u8bbe\u5907\u9a71\u52a8\n    int fd = open(driver, O_RDWR | O_CLOEXEC);\n    if (fd &gt;= 0) {\n        int vers = 0;\n        //2. \u83b7\u53d6Binder\u7684\u7248\u672c\u4fe1\u606f\n        status_t result = ioctl(fd, BINDER_VERSION, &amp;vers);\n        if (result == -1) {\n            ALOGE(\"Binder ioctl to obtain version failed: %s\", strerror(errno));\n            close(fd);\n            fd = -1;\n        }\n        //2.1 \u6bd4\u8f83\u534f\u8bae\u7248\u672c\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u540c\u5219\u8df3\u51fa\n        if (result != 0 || vers != BINDER_CURRENT_PROTOCOL_VERSION) {\n          ALOGE(\"Binder driver protocol(%d) does not match user space protocol(%d)! ioctl() return value: %d\",\n                vers, BINDER_CURRENT_PROTOCOL_VERSION, result);\n            close(fd);\n            fd = -1;\n        }\n        size_t maxThreads = DEFAULT_MAX_BINDER_THREADS;\n        //\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0cBINDER_SET_MAX_THREADS=16\n        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);\n        if (result == -1) {\n            ALOGE(\"Binder ioctl to set max threads failed: %s\", strerror(errno));\n        }\n    } else {\n        ALOGW(\"Opening '%s' failed: %s\\n\", driver, strerror(errno));\n    }\n    return fd;\n}\n</code></pre> <ul> <li>\u8c03\u7528open\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_open\uff09\u6253\u5f00Binder\u8bbe\u5907\u9a71\u52a8</li> <li>\u8c03\u7528ioctl\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_ioctl\uff09\u83b7\u53d6Binder\u7684\u7248\u672c\u4fe1\u606f</li> <li>\u8c03\u7528ioctl\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_ioctl\uff09\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0cBINDER_SET_MAX_THREADS=16</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#mmap","title":"mmap()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\n//#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n//_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\n//3. \u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\nmVMStart = mmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);\n</code></pre> <p>\u8c03\u7528mmap\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_mmap\uff09\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_1","title":"\u5c0f\u7ed3","text":"<pre><code>sequenceDiagram\nmain.cpp -&gt;&gt;+ main.cpp::main()\nmain.cpp -&gt;&gt;+ ProcessState::initWithDriver(driver)\nProcessState -&gt;&gt; ProcessState:new ProcessState(driver)\nProcessState -&gt;&gt; ProcessState:open_driver(driver)\nProcessState -&gt;&gt; Binder\u9a71\u52a8:binder_open()\nProcessState -&gt;&gt; Binder\u9a71\u52a8:binder_ioctl()\nProcessState -&gt;&gt;- Binder\u9a71\u52a8:binder_mmap()\nmain.cpp -&gt;&gt;- ProcessState:becomeContextManager()</code></pre> <p>initWithDriver\u7684\u5de5\u4f5c\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a</p> <ul> <li>\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528open()\u6765\u6253\u5f00\"/dev/binder\"\uff0c\u83b7\u5f97\u4e00\u4e2a\u53e5\u67c4\u4fe1\u606f\uff0c\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_open()</li> <li>\u901a\u8fc7ioctl\u83b7\u53d6binder\u7684\u7248\u672c\u4fe1\u606f\uff0c\u6bd4\u8f83binder\u534f\u8bae\u7248\u672c\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u540c\u5219\u8df3\u51fa\uff1b\u518d\u6b21\u901a\u8fc7ioctl\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_ioctl()</li> <li> <p>\u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u628abinder\u9a71\u52a8\u6587\u4ef6\u76841016K\u5b57\u8282\u6620\u5c04\u5230\u4e86\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd91016K\u5185\u5b58\u7a7a\u95f4\u4e3aservicemanager\u4f7f\u7528\u3002\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_mmap()\u3002</p> </li> <li> <p>_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\uff0c\u5373(1M - 4K*2)=1016K\u3002</p> </li> <li>\u8fd9\u4e2apage\u7684\u5927\u5c0f\uff0c\u4e0d\u540c\u5382\u5bb6\u6709\u65f6\u5019\u4e5f\u4f1a\u8c03\u6574\u5927\u5c0f\uff0c\u4e00\u822c\u67091M\uff0c64K\uff0c4K\uff0c1KB\uff0c\u901a\u5e38\u4e3a4K\u3002</li> <li>Android11\u4e4b\u524dservicemanager\u6620\u5c04\u7684\u5185\u5b58\u7a7a\u95f4\u662f128K\u3002</li> </ul> <pre><code>\u6267\u884c\u547d\u4ee4\u627e\u5230servicemanager\u7684\u8fdb\u7a0b\u53f7\n$ adb shell ps | grep servicemanager\nsystem          564      1 12348096  3368 do_epoll_wait       0 S servicemanager\nsystem          565      1 12349220  4516 do_epoll_wait       0 S hwservicemanager\nsystem          566      1 12348016  2032 do_epoll_wait       0 S vndservicemanager\n\nservicemanager\u8fdb\u7a0bmmap\u7684\u5185\u5b58\u5927\u5c0f\n$ adb shell cat /proc/564/maps | grep binder\n78a294f000-78a2a4d000 r--p 00000000 00:2a 4                              /dev/binderfs/binder\n\n78a2a4d000-78a294f000=FE000 ---&gt; 1016K\n\n\n\u67e5\u770b\u522b\u7684\u8fdb\u7a0b\u6bd4\u5982systemUI\uff0c\u8ba1\u7b97\u51fa\u6765\u4e5f\u662f1016K\uff0c\u5e76\u4e14android10\u4e5f\u662f1016K\u3002android10\u4e4b\u524d\u7684\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u6216\u8005\u770b\u4ee3\u7801\u3002\n$ adb shell ps -eT | grep systemui\nsystem         2675  2675    750 16963640 113868 do_epoll_wait      0 S ndroid.systemui\n$ adb shell cat /proc/2675/maps | grep binder\n6e6a7d8000-6e6a8d6000 r--p 00000000 00:2a 5                              /dev/binderfs/hwbinder\n6e8eb07000-6e8ec05000 r--p 00000000 00:2a 5                              /dev/binderfs/hwbinder\n6e92e1d000-6e92f1b000 r--p 00000000 00:2a 4                              /dev/binderfs/binder\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#becomecontextmanager","title":"becomeContextManager()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nbool ProcessState::becomeContextManager()\n{\n    AutoMutex _l(mLock);\n\n    flat_binder_object obj {\n        .flags = FLAT_BINDER_FLAG_TXN_SECURITY_CTX,\n    };\n\n    //Android10.0\u4e4b\u540e\u4e2d\u5f15\u5165BINDER_SET_CONTEXT_MGR_EXT\uff0c\u7528\u6765\u628aServiecManager\u8bbe\u7f6e\u6210\u4e3a\u5b89\u5168\u7684\u4e0a\u4e0b\u6587\n    int result = ioctl(mDriverFD, BINDER_SET_CONTEXT_MGR_EXT, &amp;obj);\n\n    // fallback to original method\n    if (result != 0) {\n        android_errorWriteLog(0x534e4554, \"121035042\");\n\n        int unused = 0;\n        //\u5982\u679c\u5b89\u5168\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u5931\u8d25\uff0c\u7ee7\u7eed\u4f7f\u7528\u539f\u6709\u7684BINDER_SET_CONTEXT_MGR\u6765\u8fdb\u884c\u63a7\u5236\n        result = ioctl(mDriverFD, BINDER_SET_CONTEXT_MGR, &amp;unused);\n    }\n\n    if (result == -1) {\n        ALOGE(\"Binder ioctl to become context manager failed: %s\\n\", strerror(errno));\n    }\n\n    return result == 0;\n}\n</code></pre> <p>ioctl\u5bf9\u5e94\u4e8e\u9a71\u52a8\u4e2d\u7684\u51fd\u6570\u4e3abinder_ioctl\uff0c\u4ece\u7528\u6237\u7a7a\u95f4\u62f7\u8d1dioctl\u7684\u53c2\u6570\uff0c\u8c03\u7528binder_ioctl_set_ctx_mgr()\u8fdb\u884c\u8bbe\u7f6e\u3002BINDER_SET_CONTEXT_MGR_EXT\u5e26\u53c2\u6570\uff0cBINDER_SET_CONTEXT_MGR\u4e0d\u5e26\u53c2\u6570\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_ioctl","title":"binder_ioctl()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)\n{\n    ...\n\n    switch (cmd) {\n    case BINDER_SET_CONTEXT_MGR_EXT: {//\u8bbe\u7f6eService Manager\u8282\u70b9\uff0c\u5e26flag\u53c2\u6570\uff0c servicemanager\u8fdb\u7a0b\u6210\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n        struct flat_binder_object fbo;\n\n        if (copy_from_user(&amp;fbo, ubuf, sizeof(fbo))) {\n            ret = -EINVAL;\n            goto err;\n        }\n        ret = binder_ioctl_set_ctx_mgr(filp, &amp;fbo);\n        if (ret)\n            goto err;\n        break;\n    }\n    case BINDER_SET_CONTEXT_MGR://\u8bbe\u7f6eService Manager\u8282\u70b9\uff0c\u4e0d\u5e26flag\u53c2\u6570\uff0c servicemanager\u8fdb\u7a0b\u6210\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n        ret = binder_ioctl_set_ctx_mgr(filp, NULL);\n        if (ret)\n            goto err;\n        break;\n    default:\n        ret = -EINVAL;\n        goto err;\n    }\n    ret = 0;\nerr:\n    if (thread)\n        thread-&gt;looper_need_return = false;\n    wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);\n    if (ret &amp;&amp; ret != -ERESTARTSYS)\n        pr_info(\"%d:%d ioctl %x %lx returned %d\\n\", proc-&gt;pid, current-&gt;pid, cmd, arg, ret);\nerr_unlocked:\n    trace_binder_ioctl_done(ret);\n    return ret;\n}\n</code></pre> <p>\u4e0d\u7ba1\u662fBINDER_SET_CONTEXT_MGR_EXT\u8fd8\u662fBINDER_SET_CONTEXT_MGR\u6700\u7ec8\u90fd\u662f\u8c03\u7528binder_ioctl_set_ctx_mgr()\u8fdb\u884c\u8bbe\u7f6e\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_ioctl_set_ctx_mgr","title":"binder_ioctl_set_ctx_mgr()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic int binder_ioctl_set_ctx_mgr(struct file *filp,\n                    struct flat_binder_object *fbo)\n{\n    int ret = 0;\n    //\u8fdb\u7a0b\u7684binder_proc\uff0c \u8fd9\u91cc\u662fServiceManager\u7684 binder_proc,\u4e4b\u524d\u901a\u8fc7open(\"/dev/binder\")\u5f97\u6765\n    struct binder_proc *proc = filp-&gt;private_data;\n    struct binder_context *context = proc-&gt;context;\n    struct binder_node *new_node;\n    kuid_t curr_euid = current_euid();//\u7ebf\u7a0b\u7684uid\n\n    mutex_lock(&amp;context-&gt;context_mgr_node_lock);//\u4e92\u65a5\u9501\n    //\u6b63\u5e38\u7b2c\u4e00\u6b21\u4e3anull\uff0c\u5982\u679c\u4e0d\u4e3anull\u5219\u8bf4\u660e\u8be5\u8fdb\u7a0b\u5df2\u7ecf\u8bbe\u7f6e\u8fc7context mgr\u5219\u76f4\u63a5\u9000\u51fa\n    if (context-&gt;binder_context_mgr_node) {\n        pr_err(\"BINDER_SET_CONTEXT_MGR already set\\n\");\n        ret = -EBUSY;\n        goto out;\n    }\n    //\u68c0\u67e5\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u6ce8\u518cContext Manager\u7684SEAndroid\u5b89\u5168\u6743\u9650\n    ret = security_binder_set_context_mgr(proc-&gt;tsk);\n    if (ret &lt; 0)\n        goto out;\n    if (uid_valid(context-&gt;binder_context_mgr_uid)) {\n        //\u8bfb\u53d6binder_context_mgr_uid\u548c\u5f53\u524d\u7684\u6bd4\uff0c\u5982\u679c\u4e0d\u4e00\u6837\uff0c\u62a5\u9519\u3002\n        if (!uid_eq(context-&gt;binder_context_mgr_uid, curr_euid)) {\n            pr_err(\"BINDER_SET_CONTEXT_MGR bad uid %d != %d\\n\",\n                   from_kuid(&amp;init_user_ns, curr_euid),\n                   from_kuid(&amp;init_user_ns,\n                     context-&gt;binder_context_mgr_uid));\n            ret = -EPERM;\n            goto out;\n        }\n    } else {\n        //\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684uid\u8d4b\u503c\u7ed9context\u7684binder_context_mgr_uid\u53d8\u91cf\u4ee5\u4f5c\u4fdd\u5b58\n        context-&gt;binder_context_mgr_uid = curr_euid;\n    }\n    //\u521b\u5efabinder_node\u5bf9\u8c61\n    new_node = binder_new_node(proc, fbo);\n    if (!new_node) {\n        ret = -ENOMEM;\n        goto out;\n    }\n    binder_node_lock(new_node);\n    //\u589e\u52a0\u5f3a\u5f31\u5f15\u7528\u8ba1\u6570\n    new_node-&gt;local_weak_refs++;\n    new_node-&gt;local_strong_refs++;\n    new_node-&gt;has_strong_ref = 1;\n    new_node-&gt;has_weak_ref = 1;\n    //\u628a\u65b0\u521b\u5efa\u7684node\u5bf9\u8c61\u8d4b\u503c\u7ed9context-&gt;binder_context_mgr_node\uff0c\u6210\u4e3aserviceManager\u7684binder\u7ba1\u7406\u5b9e\u4f53\n    context-&gt;binder_context_mgr_node = new_node;\n    binder_node_unlock(new_node);\n    binder_put_node(new_node);\nout:\n    mutex_unlock(&amp;context-&gt;context_mgr_node_lock);//\u91ca\u653e\u9501\n    return ret;\n}\n</code></pre> <ul> <li>\u68c0\u67e5\u8fdb\u7a0b\u5df2\u7ecf\u8bbe\u7f6e\u8fc7context mgr</li> <li>\u901a\u8fc7\u8c03\u7528security_binder_set_context_mgr\u68c0\u67e5\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u6ce8\u518cContext Manager\u7684SEAndroid\u5b89\u5168\u6743\u9650\u3002\u6700\u540e\u4f1a\u8c03\u5230security.c\u4e2d\uff0c\u5177\u4f53\u5b9e\u73b0\u4e0d\u518d\u6df1\u5165\u5206\u6790\u3002</li> <li>\u68c0\u67e5uid\u662f\u5426\u6709\u6548\uff0c\u5e76\u5c06\u6709\u6548uid\u8bbe\u7f6e\u5230\u5168\u5c40\u53d8\u91cfbinder_context_mgr_uid</li> <li>\u4e3a\u5f53\u524dServiceManager\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2abinder\u5b9e\u4f53\u5bf9\u8c61\uff0c\u5e76\u4fdd\u5b58\u5230binder_context_mgr_node\u5168\u5c40\u53d8\u91cf\u4e2d</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_new_node","title":"binder_new_node()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic struct binder_node *binder_new_node(struct binder_proc *proc,\n                       struct flat_binder_object *fp)\n{\n    struct binder_node *node;\n    //\u521b\u5efabinder_node\u8282\u70b9\n    struct binder_node *new_node = kzalloc(sizeof(*node), GFP_KERNEL);\n\n    if (!new_node)\n        return NULL;\n    binder_inner_proc_lock(proc);\n    //\u4ece\u8fdb\u7a0b\u63cf\u8ff0\u7b26binder_proc\u7684nodes\u7ea2\u9ed1\u6811\u4e2d\u67e5\u627e\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684binder\u5b9e\u4f53\u5bf9\u8c61\uff0c\u5373\u67e5\u627e\u7b2c\u4e00\u4e2a\u53f6\u8282\u70b9\n    node = binder_init_node_ilocked(proc, new_node, fp);\n    binder_inner_proc_unlock(proc);\n    if (node != new_node)\n        /*\n         * The node was already added by another thread\n         */\n        kfree(new_node);\n\n    return node;\n}\n</code></pre> <ul> <li>\u521b\u5efabinder_node\u8282\u70b9</li> <li>\u8c03\u7528binder_init_node_ilocked()\u4ece\u8fdb\u7a0b\u63cf\u8ff0\u7b26binder_proc\u7684nodes\u7ea2\u9ed1\u6811\u4e2d\u67e5\u627e\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684binder\u5b9e\u4f53\u5bf9\u8c61</li> <li>\u5982\u679cnode\u5df2\u7ecf\u88ab\u522b\u7684\u7ebf\u7a0b\u6dfb\u52a0\u4e86\uff0c\u5219free\u6389</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_init_node_ilocked","title":"binder_init_node_ilocked()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic struct binder_node *binder_init_node_ilocked(\n                        struct binder_proc *proc,\n                        struct binder_node *new_node,\n                        struct flat_binder_object *fp)\n{\n    struct rb_node **p = &amp;proc-&gt;nodes.rb_node;\n    struct rb_node *parent = NULL;\n    struct binder_node *node;\n    binder_uintptr_t ptr = fp ? fp-&gt;binder : 0;\n    binder_uintptr_t cookie = fp ? fp-&gt;cookie : 0;\n    __u32 flags = fp ? fp-&gt;flags : 0;\n    s8 priority;\n\n    assert_spin_locked(&amp;proc-&gt;inner_lock);\n\n    while (*p) {\n        //\u4ece\u8fdb\u7a0b\u63cf\u8ff0\u7b26binder_proc\u7684nodes\u7ea2\u9ed1\u6811\u4e2d\u67e5\u627e\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684binder\u5b9e\u4f53\u5bf9\u8c61\n        parent = *p;\n        node = rb_entry(parent, struct binder_node, rb_node);\n\n        if (ptr &lt; node-&gt;ptr)\n            p = &amp;(*p)-&gt;rb_left;\n        else if (ptr &gt; node-&gt;ptr)\n            p = &amp;(*p)-&gt;rb_right;\n        else {\n            /*\n             * A matching node is already in\n             * the rb tree. Abandon the init\n             * and return it.\n             */\n            binder_inc_node_tmpref_ilocked(node);\n            return node;\n        }\n    }\n    node = new_node;\n    binder_stats_created(BINDER_STAT_NODE);\n    node-&gt;tmp_refs++;\n    rb_link_node(&amp;node-&gt;rb_node, parent, p);//\u63d2\u5165\u8282\u70b9\u64cd\u4f5c1\n    rb_insert_color(&amp;node-&gt;rb_node, &amp;proc-&gt;nodes);//\u63d2\u5165\u8282\u70b9\u64cd\u4f5c2\n    node-&gt;debug_id = atomic_inc_return(&amp;binder_last_id);\n    node-&gt;proc = proc;\n    node-&gt;ptr = ptr;\n    node-&gt;cookie = cookie;\n    node-&gt;work.type = BINDER_WORK_NODE;\n    priority = flags &amp; FLAT_BINDER_FLAG_PRIORITY_MASK;\n    node-&gt;sched_policy = (flags &amp; FLAT_BINDER_FLAG_SCHED_POLICY_MASK) &gt;&gt;\n        FLAT_BINDER_FLAG_SCHED_POLICY_SHIFT;\n    node-&gt;min_priority = to_kernel_prio(node-&gt;sched_policy, priority);\n    node-&gt;accept_fds = !!(flags &amp; FLAT_BINDER_FLAG_ACCEPTS_FDS);\n    node-&gt;inherit_rt = !!(flags &amp; FLAT_BINDER_FLAG_INHERIT_RT);\n    node-&gt;txn_security_ctx = !!(flags &amp; FLAT_BINDER_FLAG_TXN_SECURITY_CTX);\n    spin_lock_init(&amp;node-&gt;lock);\n    INIT_LIST_HEAD(&amp;node-&gt;work.entry);\n    INIT_LIST_HEAD(&amp;node-&gt;async_todo);\n    binder_debug(BINDER_DEBUG_INTERNAL_REFS,\n             \"%d:%d node %d u%016llx c%016llx created\\n\",\n             proc-&gt;pid, current-&gt;pid, node-&gt;debug_id,\n             (u64)node-&gt;ptr, (u64)node-&gt;cookie);\n\n    return node;\n}\n</code></pre> <p>binder_proc\u7684\u6210\u5458node\u662fbinder_node\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u9897\u7ea2\u9ed1\u6811\uff0c\u8be5\u51fd\u6570\u9996\u5148\u6839\u636e\u89c4\u5219\u627e\u5230\u7b2c\u4e00\u4e2a\u53f6\u8282\u70b9\u4f5c\u4e3a\u65b0\u63d2\u5165\u7684\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7136\u540e\u521b\u5efabinder_node\u8282\u70b9\u5e76\u63d2\u5165\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_2","title":"\u5c0f\u7ed3","text":"<pre><code>sequenceDiagram\nmain.cpp -&gt;&gt; main.cpp::main()\nmain.cpp -&gt;&gt; ProcessState:becomeContextManager()\nProcessState -&gt;&gt;+ Binder\u9a71\u52a8:binder_ioctl()\nBinder\u9a71\u52a8 -&gt;&gt; Binder\u9a71\u52a8:binder_ioctl_set_ctx_mgr()\nBinder\u9a71\u52a8 -&gt;&gt; Binder\u9a71\u52a8:binder_new_node()\nBinder\u9a71\u52a8 -&gt;&gt;- Binder\u9a71\u52a8:binder_init_node_ilocked()</code></pre> <p>becomeContextManager\u7684\u6d41\u7a0b\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\uff1a</p> <ul> <li>\u5148\u68c0\u67e5\u5f53\u524d\u8fdb\u7a0b\u662f\u5426\u5177\u6709\u6ce8\u518cContext Manager\u7684SEAndroid\u5b89\u5168\u6743\u9650\u3002</li> <li>\u5982\u679c\u5177\u6709SELinux\u6743\u9650\uff0c\u4f1a\u4e3a\u6574\u4e2a\u7cfb\u7edf\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e13\u95e8\u751f\u6210\u4e00\u4e2abinder_node\u8282\u70b9\uff0c\u4f7f\u8be5\u8282\u70b9\u7684\u5f3a\u5f31\u5e94\u7528\u52a01\u3002</li> <li>\u65b0\u521b\u5efa\u7684binder_node \u8282\u70b9\uff0c\u8bb0\u5165context-&gt;binder_context_mgr_node\uff0c\u5373ServiceManager \u8fdb\u7a0b\u7684context binder\u8282\u70b9\uff0c\u4f7f\u4e4b\u6210\u4e3aserviceManager\u7684binder\u7ba1\u7406\u5b9e\u4f53\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_3","title":"\u5faa\u73af\u5904\u7406","text":"<p>\u7ecf\u8fc7\u524d\u9762\u4e24\u6b65\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u4ec5\u6253\u5f00\u4e86Binder\uff0c\u800c\u4e14\u628a\u5f53\u524d\u7684ServiceManager\u6ce8\u518c\u6210\u4e3a\u4e86\u7ba1\u7406\u5458\uff0c\u4e0b\u9762\u8981\u505a\u7684\u5c31\u662f\u53bb\u627f\u62c5\u7ba1\u7406\u5458\u7684\u804c\u8d23\uff0c\u4e5f\u5c31\u662f\u63a5\u6536\u5404\u79cd\u8bf7\u6c42\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/main.cpp\n\nint main(int argc, char** argv) {\n\n    ...\n\n    sp&lt;Looper&gt; looper = Looper::prepare(false /*allowNonCallbacks*/);\n\n    BinderCallback::setupTo(looper);\n    ClientCallbackCallback::setupTo(looper, manager);\n\n    while(true) {\n        looper-&gt;pollAll(-1);\n    }\n\n    // should not be reached\n    return EXIT_FAILURE;\n}\n\nclass BinderCallback : public LooperCallback {\npublic:\n    static sp&lt;BinderCallback&gt; setupTo(const sp&lt;Looper&gt;&amp; looper) {\n        sp&lt;BinderCallback&gt; cb = new BinderCallback;\n\n        int binder_fd = -1;\n\n        //\u5f97\u5230open(\"/dev/binder\")\u7684\u6587\u4ef6\u53e5\u67c4fd\n        //\u5e76\u4e14\u8bbe\u7f6e BC_ENTER_LOOPER \u547d\u4ee4\n        IPCThreadState::self()-&gt;setupPolling(&amp;binder_fd);\n\n        // Flush after setupPolling(), to make sure the binder driver\n        // knows about this thread handling commands.\n        //\u5c06\u4e0a\u9762\u8bbe\u7f6e\u597d\u7684\u547d\u4ee4\u5199\u5165binder\u9a71\u52a8\n        IPCThreadState::self()-&gt;flushCommands();\n        //\u5c06 binder_fd \u6ce8\u518c\u8fdb epoll \u76d1\u542c\n        int ret = looper-&gt;addFd(binder_fd,\n                                Looper::POLL_CALLBACK,\n                                Looper::EVENT_INPUT,\n                                cb,2\n                                nullptr /*data*/);\n        ...\n\n        return cb;\n    }\n\n    int handleEvent(int /* fd */, int /* events */, void* /* data */) override {\n        IPCThreadState::self()-&gt;handlePolledCommands();\n        return 1;  // Continue receiving callbacks.\n    }\n};\n\n// LooperCallback for IClientCallback\nclass ClientCallbackCallback : public LooperCallback {\npublic:\n    static sp&lt;ClientCallbackCallback&gt; setupTo(const sp&lt;Looper&gt;&amp; looper, const sp&lt;ServiceManager&gt;&amp; manager) {\n        sp&lt;ClientCallbackCallback&gt; cb = new ClientCallbackCallback(manager);\n\n        int fdTimer = timerfd_create(CLOCK_MONOTONIC, 0 /*flags*/);\n        LOG_ALWAYS_FATAL_IF(fdTimer &lt; 0, \"Failed to timerfd_create: fd: %d err: %d\", fdTimer, errno);\n\n        itimerspec timespec {\n            .it_interval = {\n                .tv_sec = 5,\n                .tv_nsec = 0,\n            },\n            .it_value = {\n                .tv_sec = 5,\n                .tv_nsec = 0,\n            },\n        };\n\n        int timeRes = timerfd_settime(fdTimer, 0 /*flags*/, &amp;timespec, nullptr);\n        LOG_ALWAYS_FATAL_IF(timeRes &lt; 0, \"Failed to timerfd_settime: res: %d err: %d\", timeRes, errno);\n\n        int addRes = looper-&gt;addFd(fdTimer,\n                                   Looper::POLL_CALLBACK,\n                                   Looper::EVENT_INPUT,\n                                   cb,\n                                   nullptr);\n        LOG_ALWAYS_FATAL_IF(addRes != 1, \"Failed to add client callback FD to Looper\");\n\n        return cb;\n    }\n\n    int handleEvent(int fd, int /*events*/, void* /*data*/) override {\n        uint64_t expirations;\n        int ret = read(fd, &amp;expirations, sizeof(expirations));\n        if (ret != sizeof(expirations)) {\n            ALOGE(\"Read failed to callback FD: ret: %d err: %d\", ret, errno);\n        }\n\n        mManager-&gt;handleClientCallbacks();\n        return 1;  // Continue receiving callbacks.\n    }\nprivate:\n    ClientCallbackCallback(const sp&lt;ServiceManager&gt;&amp; manager) : mManager(manager) {}\n    sp&lt;ServiceManager&gt; mManager;\n};\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_4","title":"\u8fdb\u5165\u5faa\u73af","text":"","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#setuppolling","title":"setupPolling","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::setupPolling(int* fd)\n{\n    if (mProcess-&gt;mDriverFD &lt; 0) {\n        return -EBADF;\n    }\n\n    mOut.writeInt32(BC_ENTER_LOOPER);\n    *fd = mProcess-&gt;mDriverFD;\n    return 0;\n}\n</code></pre> <p>\u6211\u4eec\u770b\u5230\u5173\u952e\u7684\u4ee3\u7801\uff1a</p> <ul> <li>mOut.writeInt32(BC_ENTER_LOOPER);\u8bbe\u7f6eBC_ENTER_LOOPER</li> <li>*fd = mProcess-&gt;mDriverFD;\u5f97\u5230\u6587\u4ef6\u53e5\u67c4fd</li> </ul> <p>\u4f46\u8fd9\u4e2a\u65f6\u5019\u8fd8\u6ca1\u770b\u5230\u8c03\u7528\u9a71\u52a8\u63a5\u53e3\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#flushcommands","title":"flushCommands","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nvoid IPCThreadState::flushCommands()\n{\n    if (mProcess-&gt;mDriverFD &lt; 0)\n        return;\n    talkWithDriver(false);\n    // The flush could have caused post-write refcount decrements to have\n    // been executed, which in turn could result in BC_RELEASE/BC_DECREFS\n    // being queued in mOut. So flush again, if we need to.\n    if (mOut.dataSize() &gt; 0) {      \n        talkWithDriver(false);\n    }\n    if (mOut.dataSize() &gt; 0) {\n        ALOGW(\"mOut.dataSize() &gt; 0 after flushCommands()\");\n    }\n}\n</code></pre> <p>\u7ee7\u7eed\u770btalkWithDriver()\u51fd\u6570\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#talkwithdriver","title":"talkWithDriver()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::talkWithDriver(bool doReceive)\n{\n    if (mProcess-&gt;mDriverFD &lt; 0) {\n        return -EBADF;\n    }\n\n    binder_write_read bwr;\n\n    // Is the read buffer empty?\n    const bool needRead = mIn.dataPosition() &gt;= mIn.dataSize();\n\n    // We don't want to write anything if we are still reading\n    // from data left in the input buffer and the caller\n    // has requested to read the next data.\n    const size_t outAvail = (!doReceive || needRead) ? mOut.dataSize() : 0;\n\n    bwr.write_size = outAvail;\n    bwr.write_buffer = (uintptr_t)mOut.data();\n\n    ...\n\n    bwr.write_consumed = 0;\n    bwr.read_consumed = 0;\n    status_t err;\n    do {\n        ...\n#if defined(__ANDROID__)\n        if (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= 0)\n            err = NO_ERROR;\n        else\n            err = -errno;\n#else\n        err = INVALID_OPERATION;\n#endif\n        ...\n    } while (err == -EINTR);\n\n    ...\n\n    return err;\n}\n</code></pre> <p>\u56e0\u4e3a\u6211\u4eec\u5f53\u524d\u7684\u6d41\u7a0b\u662f\u5411binder\u9a71\u52a8\u53d1\u9001\u547d\u4ee4\uff0c\u6240\u4ee5\u8ddfread\u76f8\u5173\u7684\u90fd\u4e0d\u8003\u8651\u3002\u8fd9\u4e2a\u51fd\u6570\u91cc\u6211\u4eec\u770b\u5230\u7ee7\u7eed\u8c03\u7528ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr)\u51fd\u6570\uff0c\u5176\u5b9e\u5c31\u8c03\u5230\u4e86\u9a71\u52a8\u7684binder_ioctl()\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_ioctl_1","title":"binder_ioctl()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)\n{\n    int ret;\n    struct binder_proc *proc = filp-&gt;private_data;\n    struct binder_thread *thread;\n    unsigned int size = _IOC_SIZE(cmd);\n    void __user *ubuf = (void __user *)arg;\n\n    binder_selftest_alloc(&amp;proc-&gt;alloc);\n\n    trace_binder_ioctl(cmd, arg);\n\n    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);\n    ...\n\n    thread = binder_get_thread(proc);\n    ...\n\n    switch (cmd) {\n    case BINDER_WRITE_READ:\n        ret = binder_ioctl_write_read(filp, cmd, arg, thread);\n        if (ret)\n            goto err;\n        break;\n        ...\n    }\n    ret = 0;\n    ...\n    return ret;\n}\n</code></pre> <p>\u4f20\u8fdb\u6765\u7684cmd\u662fBINDER_WRITE_READ\uff0c\u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u770bbinder_ioctl_write_read()\u51fd\u6570\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_ioctl_write_read","title":"binder_ioctl_write_read()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic int binder_ioctl_write_read(struct file *filp,\n                unsigned int cmd, unsigned long arg,\n                struct binder_thread *thread)\n{\n    int ret = 0;\n    struct binder_proc *proc = filp-&gt;private_data;\n    unsigned int size = _IOC_SIZE(cmd);\n    void __user *ubuf = (void __user *)arg;\n    struct binder_write_read bwr;\n\n    if (size != sizeof(struct binder_write_read)) {\n        ret = -EINVAL;\n        goto out;\n    }\n    if (copy_from_user(&amp;bwr, ubuf, sizeof(bwr))) {\n        ret = -EFAULT;\n        goto out;\n    }\n    ...\n\n    if (bwr.write_size &gt; 0) {\n        ret = binder_thread_write(proc, thread,\n                      bwr.write_buffer,\n                      bwr.write_size,\n                      &amp;bwr.write_consumed);\n        trace_binder_write_done(ret);\n        if (ret &lt; 0) {\n            bwr.read_consumed = 0;\n            if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr)))\n                ret = -EFAULT;\n            goto out;\n        }\n    }\n    ...\n    if (copy_to_user(ubuf, &amp;bwr, sizeof(bwr))) {\n        ret = -EFAULT;\n        goto out;\n    }\nout:\n    return ret;\n}\n</code></pre> <p>\u8c03\u7528binder_thread_write()\u51fd\u6570\uff0c\u544a\u8bc9binder\u9a71\u52a8ServiceManager\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#binder_thread_write","title":"binder_thread_write()","text":"<pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/binder.c\n\nstatic int binder_thread_write(struct binder_proc *proc,\n            struct binder_thread *thread,\n            binder_uintptr_t binder_buffer, size_t size,\n            binder_size_t *consumed)\n{\n    uint32_t cmd;\n    struct binder_context *context = proc-&gt;context;\n    void __user *buffer = (void __user *)(uintptr_t)binder_buffer;\n    void __user *ptr = buffer + *consumed;\n    void __user *end = buffer + size;\n\n    while (ptr &lt; end &amp;&amp; thread-&gt;return_error.cmd == BR_OK) {\n        int ret;\n\n        if (get_user(cmd, (uint32_t __user *)ptr))\n            return -EFAULT;\n        ptr += sizeof(uint32_t);\n        trace_binder_command(cmd);\n        if (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) {\n            atomic_inc(&amp;binder_stats.bc[_IOC_NR(cmd)]);\n            atomic_inc(&amp;proc-&gt;stats.bc[_IOC_NR(cmd)]);\n            atomic_inc(&amp;thread-&gt;stats.bc[_IOC_NR(cmd)]);\n        }\n        switch (cmd) {\n        ...\n        case BC_ENTER_LOOPER:\n            binder_debug(BINDER_DEBUG_THREADS,\n                     \"%d:%d BC_ENTER_LOOPER\\n\",\n                     proc-&gt;pid, thread-&gt;pid);\n            if (thread-&gt;looper &amp; BINDER_LOOPER_STATE_REGISTERED) {\n                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;\n                binder_user_error(\"%d:%d ERROR: BC_ENTER_LOOPER called after BC_REGISTER_LOOPER\\n\",\n                    proc-&gt;pid, thread-&gt;pid);\n            }\n            thread-&gt;looper |= BINDER_LOOPER_STATE_ENTERED;\n            break;\n        ...\n\n        default:\n            pr_err(\"%d:%d unknown command %d\\n\",\n                   proc-&gt;pid, thread-&gt;pid, cmd);\n            return -EINVAL;\n        }\n        *consumed = ptr - buffer;\n    }\n    return 0;\n}\n</code></pre> <p>\u8bbe\u7f6ethread-&gt;looper |= BINDER_LOOPER_STATE_ENTERED\uff0c\u5230\u8fd9\u6765binder\u9a71\u52a8\u7ec8\u4e8e\u77e5\u9053ServiceManager\u51c6\u5907\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u63a5\u6536\u6570\u636e\u4e86\u3002</p> <p>\u524d\u9762\u4e00\u5927\u63a8\u5206\u6790\u90fd\u662f\u5411binder\u9a71\u52a8\u53d1\u9001\u547d\u4ee4\u534f\u8baeBC_ENTER_LOOPER\uff0c\u63a5\u4e0b\u6765\u624d\u8fdb\u5165\u5faa\u73af\u72b6\u6001\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#pollall","title":"pollAll()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/main.cpp\n\nint main(int argc, char** argv) {\n    ...\n    while(true) {\n        looper-&gt;pollAll(-1);\n    }\n    ...\n}\n</code></pre> <p>\u8fdb\u5165\u5faa\u73af\u7b49\u5230\u6d88\u606f\u7684\u5230\u6765\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_5","title":"\u5c0f\u7ed3","text":"<pre><code>sequenceDiagram\nmain.cpp -&gt;&gt;+ main.cpp::main()\nmain.cpp -&gt;&gt; Looper:prepare()\nmain.cpp -&gt;&gt; BinderCallback:setupTo()\nBinderCallback -&gt;&gt; IPCThreadState:setupPolling()\n    Note over IPCThreadState : mOut.writeInt32(BC_ENTER_LOOPER);\nIPCThreadState -&gt;&gt; IPCThreadState:flushCommands()\nIPCThreadState -&gt;&gt; IPCThreadState:talkWithDriver()\nIPCThreadState -&gt;&gt; Binder\u9a71\u52a8:binder_ioctl()\nBinder\u9a71\u52a8 -&gt;&gt; Binder\u9a71\u52a8:binder_ioctl_write_read()\nBinder\u9a71\u52a8 -&gt;&gt; Binder\u9a71\u52a8:binder_thread_write()\nmain.cpp -&gt;&gt; Looper:pollAll()</code></pre> <p>\u8fd9\u4e00\u5c0f\u7ed3\u4e3b\u8981\u662f\u544a\u8bc9binder\u9a71\u52a8ServiceManager\u51c6\u5907\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u63a5\u6536\u6570\u636e\u4e86\u3002\u6700\u540e\u5c31\u8fdb\u5165\u5faa\u73af\u7b49\u5f85\u5904\u7406\u4fe1\u606f\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_6","title":"\u5904\u7406\u4fe1\u606f","text":"<p>\u4ece\u524d\u9762\u7684\u6b7b\u5faa\u73af\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7528\u5230\u4e86epoll\u673a\u5236\u5faa\u73af\u83b7\u53d6\u6d88\u606f\uff0c\u5173\u4e8eepoll\u673a\u5236\u5982\u4f55\u83b7\u53d6\u5230\u6d88\u606f\u6211\u4eec\u627e\u65f6\u95f4\u53e6\u8d77\u4e00\u4e2a\u7ae0\u8282\u518d\u8ba8\u8bba\u3002\u4e0b\u9762\u6d41\u7a0b\u6d89\u53ca\u5230\u7684Looper.h\u548cLooper.cpp\u53ef\u70b9\u94fe\u63a5\u67e5\u770b\u6e90\u7801\u3002\u5f53\u524d\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u6d41\u7a0b\u7136\u540e\u76f4\u63a5\u770b\u6d88\u606f\u5904\u7406\u8fc7\u7a0b\u7684\u7ec6\u8282\u3002</p> <pre><code>sequenceDiagram\nmain.cpp -&gt;&gt; Looper.h:pollAll(-1)\nLooper.h -&gt;&gt; Looper.cpp:pollAll(timeoutMillis, nullptr, nullptr, nullptr)\nLooper.cpp -&gt;&gt; Looper.cpp:pollOnce(timeoutMillis, outFd, outEvents, outData)\nLooper.cpp -&gt;&gt; Looper.cpp:pollInner(timeoutMillis)\nLooper.cpp -&gt;&gt; BinderCallback:handleEvent(fd, events, data)\nBinderCallback -&gt;&gt;IPCThreadState:handlePolledCommands()</code></pre> <p>\u73b0\u5728\u6211\u4eec\u76f4\u63a5\u4ecehandleEvent()\u51fd\u6570\u5f00\u59cb\u770b\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#handleevent","title":"handleEvent()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/main.cpp\n\nint handleEvent(int /* fd */, int /* events */, void* /* data */) override {\n    IPCThreadState::self()-&gt;handlePolledCommands();\n    return 1;  // Continue receiving callbacks.\n}\n</code></pre> <p>\u8c03\u7528IPCThreadState\u7684handlePolledCommands()\u83b7\u53d6\u6d88\u606f\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#handlepolledcommands","title":"handlePolledCommands()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::handlePolledCommands()\n{\n    status_t result;\n\n    do {\n        result = getAndExecuteCommand();\n    } while (mIn.dataPosition() &lt; mIn.dataSize());\n\n    processPendingDerefs();\n    flushCommands();\n    return result;\n}\n</code></pre> <p>\u4ece\u51fd\u6570getAndExecuteCommand()\u7684\u540d\u5b57\u4e0d\u96be\u731c\u51fa\u5c31\u662f\u83b7\u53d6\u5e76\u6267\u884c\u4fe1\u606f\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#getandexecutecommand","title":"getAndExecuteCommand()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::getAndExecuteCommand()\n{\n    status_t result;\n    int32_t cmd;\n\n    result = talkWithDriver();\n    if (result &gt;= NO_ERROR) {\n        size_t IN = mIn.dataAvail();\n        if (IN &lt; sizeof(int32_t)) return result;\n        //\u83b7\u53d6cmd\n        cmd = mIn.readInt32();\n        ...\n        //\u6267\u884ccmd\n        result = executeCommand(cmd);\n\n        ...\n    }\n\n    return result;\n}\n</code></pre> <p>\u51fd\u6570talkWithDriver()\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5206\u4eab\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u5206\u4eab\uff0c\u5176\u5927\u81f4\u7684\u8c03\u7528\u6d41\u7a0b\u5982\uff1a</p> <p>talkWithDriver() \u2192 binder_ioctl() \u2192 binder_ioctl_write_read() \u2192 copy_to_user()\u3002</p> <p>\u7ecf\u8fc7talkWithDriver()\u4ece\u9a71\u52a8\u8bfb\u53d6\u6d88\u606f\u4e4b\u540e\u5c31\u53d6\u51fa\u5e76\u6267\u884c\uff0c\u8ddf\u6211\u4eec\u524d\u9762\u731c\u6d4b\u7684\u662f\u4e00\u6837\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#executecommand","title":"executeCommand()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::executeCommand(int32_t cmd)\n{\n    BBinder* obj;\n    RefBase::weakref_type* refs;\n    status_t result = NO_ERROR;\n\n    //\u6bcf\u4e2a\u547d\u4ee4\u4e2d\u53ef\u80fd\u5305\u542b\u591a\u4e2aBR\u7801\uff0c\u56e0\u6b64\u9700\u8981\u7528while\u5faa\u73af\u6765\u89e3\u6790buffer\u4e2d\u6240\u6709\u7684BR_XX\u7801\n    switch ((uint32_t)cmd) {\n    ...\n\n    case BR_TRANSACTION_SEC_CTX:\n    case BR_TRANSACTION:\n        {\n            binder_transaction_data_secctx tr_secctx;\n            binder_transaction_data&amp; tr = tr_secctx.transaction_data;\n\n            if (cmd == (int) BR_TRANSACTION_SEC_CTX) {\n                result = mIn.read(&amp;tr_secctx, sizeof(tr_secctx));\n            } else {\n                result = mIn.read(&amp;tr, sizeof(tr));\n                tr_secctx.secctx = 0;\n            }\n\n            ...\n\n            //\u5728binder\u9a71\u52a8\u7ae0\u8282\u8bb2\u8fc7binder_transaction_data\u7ed3\u6784\u4f53\n            //\u5230\u8fd9\u6765\u624d\u53d1\u73b0\u8fd8\u9700\u8981\u5728\u804a\u4e00\u804aBBinder\u548cBpBinder\u7684\u533a\u522b\uff0c\u540e\u9762\u4e13\u95e8\u627e\u4e00\u7ae0\u8282\u518d\u5206\u6790\n            //\u76ee\u524d\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u670d\u52a1\u7ba1\u7406\u5668\u4e0d\u4f1a\u8d70\u8fd9\u4e2a\u5206\u652f\uff0ccamera\u3001audio\u670d\u52a1\u63d0\u4f9b\u8005\u624d\u4f1a\u8d70\u8fd9\u4e2a\u5206\u652f\n            if (tr.target.ptr) {\n                // We only have a weak reference on the target object, so we must first try to\n                // safely acquire a strong reference before doing anything else with it.\n                if (reinterpret_cast&lt;RefBase::weakref_type*&gt;(\n                        tr.target.ptr)-&gt;attemptIncStrong(this)) {\n                    error = reinterpret_cast&lt;BBinder*&gt;(tr.cookie)-&gt;transact(tr.code, buffer,\n                            &amp;reply, tr.flags);\n                    reinterpret_cast&lt;BBinder*&gt;(tr.cookie)-&gt;decStrong(this);\n                } else {\n                    error = UNKNOWN_TRANSACTION;\n                }\n\n            } else {\n                error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);\n            }\n\n            if ((tr.flags &amp; TF_ONE_WAY) == 0) {\n                sendReply(reply, 0);\n            }\n\n            ...\n\n        }\n        break;\n\n    ...\n    }\n\n    if (result != NO_ERROR) {\n        mLastError = result;\n    }\n\n    return result;\n}\n</code></pre> <p>\u8fd8\u8bb0\u5f97main.cpp\u91cc\u8fd9\u4e48\u4e00\u6bb5\u4ee3\u7801\u4e48\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/main.cpp\nint main(int argc, char** argv) {\n    ...\n    sp&lt;ServiceManager&gt; manager = new ServiceManager(std::make_unique&lt;Access&gt;());\n    ...\n    //\u544a\u8bc9binder\u9a71\u52a8\u81ea\u5df1\u662fbinder\u4e0a\u4e0b\u6587\u7ba1\u7406\u8005\n    IPCThreadState::self()-&gt;setTheContextObject(manager);\n    ...\n}\n</code></pre> <p>setTheContextObject\u7684\u5b9e\u73b0\u53c8\u662f\uff1a</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nsp&lt;BBinder&gt; the_context_object;\n\nvoid IPCThreadState::setTheContextObject(sp&lt;BBinder&gt; obj)\n{\n    the_context_object = obj;\n}\n</code></pre> <p>\u6240\u4ee5the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);\u4e5f\u5c31\u662f\u8c03\u7528\u4e86serviceManger\u7684transact\uff0c\u8fd9\u4e2a\u5176\u5b9e\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u662f\u901a\u8fc7BBinder\u7684\u65b9\u6cd5\u5b9e\u73b0\u5982\u4e0b\uff1a</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#transact","title":"transact()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/Binder.cpp\n\nstatus_t BBinder::transact(\n    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)\n{\n    data.setDataPosition(0);\n\n    status_t err = NO_ERROR;\n    switch (code) {\n        case PING_TRANSACTION:\n            err = pingBinder();\n            break;\n        case EXTENSION_TRANSACTION:\n            err = reply-&gt;writeStrongBinder(getExtension());\n            break;\n        case DEBUG_PID_TRANSACTION:\n            err = reply-&gt;writeInt32(getDebugPid());\n            break;\n        default:\n            err = onTransact(code, data, reply, flags);\n            break;\n    }\n\n    // In case this is being transacted on in the same process.\n    if (reply != nullptr) {\n        reply-&gt;setDataPosition(0);\n    }\n\n    return err;\n}\n</code></pre> <p>\u8c41\u7136\u5f00\u6717 \uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u666e\u901a\u5b9a\u4e49\u7684onTransact\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u56e0\u4e3aServiceManager\u63a5\u53e3\u662f\u901a\u8fc7aidl\u58f0\u660e\u7684\uff0c\u56e0\u4e3a\u8fd9\u5199\u4ee3\u7801\u90fd\u662f\u7cfb\u7edf\u751f\u6210\u7684\uff0c\u4e0d\u65b9\u4fbf\u9605\u8bfb\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u5927\u6982\u4ecb\u7ecd\u4e00\u4e0b\uff0c\u662f\u518dout\u76ee\u5f55\u4e0b\u901a\u8fc7aidl\u751f\u6210\u7684\u6587\u4ef6\u3002</p> <pre><code>::android::status_t BnServiceManager::onTransact(uint32_t _aidl_code, const ::android::Parcel&amp; _aidl_data, ::android::Parcel* _aidl_reply, uint32_t _aidl_flags) {\n    ::android::status_t _aidl_ret_status = ::android::OK;\n    switch (_aidl_code) {\n    case ::android::IBinder::FIRST_CALL_TRANSACTION + 0 /* getService */:\n    {\n    ::std::string in_name;\n    ::android::sp&lt;::android::IBinder&gt; _aidl_return;\n    if (!(_aidl_data.checkInterface(this))) {\n      _aidl_ret_status = ::android::BAD_TYPE;\n      break;\n    }\n    _aidl_ret_status = _aidl_data.readUtf8FromUtf16(&amp;in_name);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    ::android::binder::Status _aidl_status(getService(in_name, &amp;_aidl_return));\n    _aidl_ret_status = _aidl_status.writeToParcel(_aidl_reply);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    if (!_aidl_status.isOk()) {\n      break;\n    }\n    _aidl_ret_status = _aidl_reply-&gt;writeStrongBinder(_aidl_return);\n    if (((_aidl_ret_status) != (::android::OK))) {\n      break;\n    }\n    }\n    break;\n    case ::android::IBinder::FIRST_CALL_TRANSACTION + 1 /* checkService */:\n    {\n\n    break;\n    case ::android::IBinder::FIRST_CALL_TRANSACTION + 2 /* addService */:\n    {\n\n    }\n    break;\n\n    break;\n\n    return _aidl_ret_status;\n}\n</code></pre> <p>\u56e0\u4e3a\u4e4b\u524d\u5728main.cpp\u91cc\u6709\u8c03\u7528addService()\u6ce8\u518c\u6210\u4e3a\u670d\u52a1\u7684\u8fc7\u7a0b\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u4ee5getService()\u4e3a\u4f8b\uff0c\u6240\u4ee5\u6700\u7ec8\u8c03\u5230ServiceManager\u7684getService()\u51fd\u6570\u3002ServiceManager\u5728Android 11\u4e0a\u6539\u52a8\u975e\u5e38\u5927\u4e86\u3002ServiceManager\u7684addService()\u548cgetService()\u9664\u4e86\u68c0\u67e5SELinux\u6743\u9650\u5916\u5c31\u662f\u901a\u8fc7mNameToService\u5bf9\u8c61\u6dfb\u52a0\u6216\u8005\u83b7\u53d6\u670d\u52a1\u3002\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_7","title":"\u603b\u7ed3","text":"<p>servicemanager\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\uff1a</p> <ul> <li>\u6253\u5f00binder\u9a71\u52a8\u3002</li> <li>\u8c03\u7528addService\u628aservicemanager\uff08vndservicemanager\uff09\u6dfb\u52a0\u5230\u670d\u52a1\u3002</li> <li>\u8c03\u7528becomeContextManager()\u8ba9\u81ea\u5df1\u6210\u4e3a\u6574\u4e2a\u7cfb\u7edf\u4e2d\u552f\u4e00\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u6240\u6709service\u7ba1\u7406\u5668\u3002</li> <li>\u8fdb\u5165\u6b7b\u5faa\u73af\u5904\u7406\u4fe1\u606f\uff08\u6dfb\u52a0\u670d\u52a1\uff0c\u83b7\u53d6\u670d\u52a1\u7b49\uff09\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/service-manager/#_8","title":"\u53c2\u8003","text":"<p>Binder\u9a71\u52a8\u4e4b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u53ca\u8bbe\u7f6e</p> <p>Android Binder</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/","title":"Binder\u673a\u523603-Framework-Native","text":"","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_1","title":"\u524d\u8a00","text":"<p>Framework\u662f\u4e00\u4e2a\u4e2d\u95f4\u5c42\uff0c\u5b83\u5bf9\u63a5\u4e86\u5e95\u5c42\u5b9e\u73b0\uff0c\u5c01\u88c5\u4e86\u590d\u6742\u7684\u5185\u90e8\u903b\u8f91\uff0c\u5e76\u63d0\u4f9b\u4f9b\u5916\u90e8\u4f7f\u7528\u7684\u63a5\u53e3\u3002Framework\u5c42\u662f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u57fa\u7840\u3002Binder Framework\u5c42\u5206\u4e3aC++\u548cJava\u4e24\u4e2a\u90e8\u5206\uff0c\u4e3a\u4e86\u8fbe\u5230\u529f\u80fd\u7684\u590d\u7528\uff0c\u4e2d\u95f4\u901a\u8fc7JNI\u8fdb\u884c\u8854\u63a5\u3002 Binder Framework\u7684C++\u90e8\u5206</p> <ul> <li>\u5934\u6587\u4ef6\u4f4d\u4e8e\u8fd9\u4e2a\u8def\u5f84\uff1ahttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/include/binder/</li> <li>\u5b9e\u73b0\u4f4d\u4e8e\u8fd9\u4e2a\u8def\u5f84\uff1ahttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/</li> </ul> <p>Binder\u5e93\u6700\u7ec8\u4f1a\u7f16\u8bd1\u6210\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\uff1alibbinder.so\uff0c\u4f9b\u5176\u4ed6\u8fdb\u7a0b\u94fe\u63a5\u4f7f\u7528\u3002</p> <p>\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u4e86ServiceManager\u7684\u542f\u52a8\u8fc7\u7a0b\uff0c\u6ce8\u518c\u3001\u83b7\u53d6\u670d\u52a1\u7684\u7ec6\u8282\u3002\u5982\u679c\u8ba9\u6211\u4eec\u5f00\u53d1\u5e94\u8be5Native\u670d\u52a1\uff0c\u6211\u4eec\u8981\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u4ee5media\u7684\u670d\u52a1\u6765\u8fdb\u884c\u5206\u6790\u3002\u5728\u4e86\u89e3\u5982\u4f55\u5f00\u53d1native\u670d\u52a1\u4e4b\u524d\u6211\u4eec\u5148\u4e86\u89e3Native\u5c42\u7684Binder\u67b6\u6784\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#nativebinder","title":"Native\u5c42\u7684Binder\u67b6\u6784","text":"<p>Binder Framework Native(libbinder)\u4e2d\uff0c\u5c06\u5b9e\u73b0\u5206\u4e3aProxy\u548cNative\u4e24\u7aef\u3002</p> <ul> <li>Proxy\u5bf9\u5e94Client\u7aef\uff0c\u662f\u670d\u52a1\u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u3002\u7c7b\u540d\u4e2d\u5e26\u6709\u5c0f\u5199\u5b57\u6bcdp\u7684\uff08\u4f8b\u5982BpInterface\uff09\uff0c\u5c31\u662f\u6307Proxy\u7aef\u3002</li> <li>Native\u662f\u670d\u52a1\u5b9e\u73b0\u7684\u4e00\u7aef\uff0c\u5bf9\u5e94\u4e86\u4e0a\u6587\u63d0\u5230\u7684Server\u7aef\u3002\u7c7b\u540d\u5e26\u6709\u5c0f\u5199\u5b57\u6bcdn\u7684\uff08\u4f8b\u5982BnInterface\uff09\uff0c\u5c31\u662f\u6307Native\u7aef\u3002 <p>Proxy\u4ee3\u8868\u4e86\u8c03\u7528\u65b9\uff0c\u901a\u5e38\u4e0e\u670d\u52a1\u7684\u5b9e\u73b0\u4e0d\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u56e0\u6b64\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u4e5f\u79f0Proxy\u7aef\u4e3a\u201c\u8fdc\u7a0b\u201d\u7aef\u3002 Native\u7aef\u662f\u670d\u52a1\u5b9e\u73b0\u7684\u81ea\u8eab\uff0c\u56e0\u6b64\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u4e5f\u79f0Native\u7aef\u4e3a\u201c\u672c\u5730\u201d\u7aef\u3002</p> </li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_2","title":"\u6982\u5ff5","text":"<p>\u5728\u524d\u9762\u7684Binder\u6982\u8ff0\u3001Binder\u9a71\u52a8\u7b49\u7ae0\u8282\u6211\u4eec\u90fd\u804a\u5230\u4e86BpBinder\u3001BBinder\u3002\u6211\u4eec\u5148\u7528\u4e00\u4e2a\u8868\u683c\u6765\u5217\u4e3elibbinder\u4e2d\u7684\u4e3b\u8981\u7c7b\u3002</p> \u7c7b\u540d \u8bf4\u660e BpRefBase RefBase\u7684\u5b50\u7c7b\uff0c\u63d0\u4f9bremote()\u65b9\u6cd5\u83b7\u53d6\u8fdc\u7a0bBinder IInterface Binder\u670d\u52a1\u63a5\u53e3\u7684\u57fa\u7c7b\uff0cBinder\u670d\u52a1\u901a\u5e38\u9700\u8981\u540c\u65f6\u63d0\u4f9b\u672c\u5730\u63a5\u53e3\u548c\u8fdc\u7a0b\u63a5\u53e3 BpInterface \u8fdc\u7a0b\u63a5\u53e3\u7684\u57fa\u7c7b\uff0c\u8fdc\u7a0b\u63a5\u53e3\u662f\u4f9b\u5ba2\u6237\u7aef\u8c03\u7528\u7684\u63a5\u53e3\u96c6 BnInterface \u672c\u5730\u63a5\u53e3\u7684\u57fa\u7c7b\uff0c\u672c\u5730\u63a5\u53e3\u662f\u9700\u8981\u670d\u52a1\u4e2d\u771f\u6b63\u5b9e\u73b0\u7684\u63a5\u53e3\u96c6 IBiner Binder\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0cBBinder\u548cBpBinder\u90fd\u662f\u8fd9\u4e2a\u7c7b\u7684\u5b50\u7c7b BpBinder \u8fdc\u7a0bBinder\uff0c\u8fd9\u4e2a\u7c7b\u63d0\u4f9btransact\u65b9\u6cd5\u6765\u53d1\u9001\u8bf7\u6c42\uff0cBpXXX\u5b9e\u73b0\u4e2d\u4f1a\u7528\u5230 BBinder \u672c\u5730Binder\uff0c\u670d\u52a1\u5b9e\u73b0\u65b9\u7684\u57fa\u7c7b\uff0c\u63d0\u4f9b\u4e86onTransact\u63a5\u53e3\u6765\u63a5\u6536\u8bf7\u6c42 ProcessState \u4ee3\u8868\u4e86\u4f7f\u7528Binder\u7684\u8fdb\u7a0b IPCThreadState \u4ee3\u8868\u4e86\u4f7f\u7528Binder\u7684\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u5c01\u88c5\u4e86\u4e0eBinder\u9a71\u52a8\u901a\u4fe1\u7684\u903b\u8f91 Parcel \u5728Binder\u4e0a\u4f20\u9012\u7684\u6570\u636e\u7684\u5305\u88c5\u5668 <p>\u4e0b\u56fe\u63cf\u8ff0\u4e86Binder Framework Native(libbinder)\u4e3b\u8981\u7c7b\u7684\u5173\u7cfb\u3002</p> <p></p> <p>Binder\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\uff08\u56fe\u4e2d\u7d2b\u8272\u90e8\u5206\uff09\u901a\u5e38\u90fd\u4f1a\u9075\u5b88\u4e0b\u9762\u7684\u547d\u540d\u89c4\u5219\uff1a - \u670d\u52a1\u7684\u63a5\u53e3\u4f7f\u7528I\u5b57\u6bcd\u4f5c\u4e3a\u524d\u7f00 - \u8fdc\u7a0b\u63a5\u53e3\u4f7f\u7528Bp\u4f5c\u4e3a\u524d\u7f00 - \u672c\u5730\u63a5\u53e3\u4f7f\u7528Bn\u4f5c\u4e3a\u524d\u7f00</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#ibinderh","title":"IBinder.h","text":"<p>IBinder\u4eceRefbase\u7ee7\u627f\u800c\u6765\uff0c\u4e00\u63d0\u4f9b\u5f3a\u5f31\u6307\u9488\u8ba1\u6570\u80fd\u529b\u3002IBinder\u6709\u51e0\u4e2a\u65b9\u6cd5\u6bd4\u8f83\u91cd\u8981\uff1a</p> <ul> <li>localBinder()\uff1a\u83b7\u53d6\u672c\u5730Binder\u5bf9\u8c61</li> <li>remoteBinder()\uff1a\u83b7\u53d6\u8fdc\u7a0bBinder\u5bf9\u8c61</li> <li>transact()\uff1a\u8fdb\u884c\u4e00\u6b21Binder\u64cd\u4f5c</li> <li>queryLocalInterface()\uff1a\u5c1d\u8bd5\u83b7\u53d6\u672c\u5730Binder\uff0c\u5982\u4f55\u5931\u8d25\u8fd4\u56deNULL</li> <li>getInterfaceDescriptor()\uff1a\u83b7\u53d6Binder\u7684\u670d\u52a1\u63a5\u53e3\u63cf\u8ff0\uff0c\u5176\u5b9e\u5c31\u662fBinder\u670d\u52a1\u7684\u552f\u4e00\u6807\u8bc6</li> <li>isBinderAlive()\uff1a\u67e5\u8be2Binder\u670d\u52a1\u662f\u5426\u8fd8\u6d3b\u7740</li> <li>pingBinder()\uff1a\u53d1\u9001PING_TRANSACTION\u7ed9Binder\u670d\u52a1</li> </ul> <p>IBinder.h\u7684\u4ee3\u7801\u53ef\u4ee5\u70b9\u94fe\u63a5\u67e5\u770b\u3002\u5bf9\u4e8eIBinder\u4e2d\u7684\u65b9\u6cd5\uff0c\u57fa\u672c\u90fd\u662f\u6ca1\u6709\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5b9e\u73b0\u90fd\u4ea4\u7ed9\u7ee7\u627f\u5b83\u7684\u5b50\u7c7b\u6765\u5b9e\u73b0\uff0c\u90a3\u4e0b\u9762\u76f4\u63a5\u770bBpBinder\u7684\u5185\u5bb9\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpbinderh","title":"BpBinder.h","text":"<p>BpBinder.h\u7684\u4ee3\u7801\u6bd4\u8f83\u591a\u4e0d\u8d34\u51fa\u6765\u4e86\uff0c\u53ef\u4ee5\u70b9\u51fb\u94fe\u63a5\u81ea\u884c\u67e5\u770b\u4ee3\u7801\u3002\u6211\u4eec\u4e3b\u8981\u6765\u5206\u6790\u4e0a\u8ff0\u63d0\u5230\u7684\u51e0\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u3002 \u200b</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpbinder","title":"BpBinder\u6784\u9020\u51fd\u6570","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\nBpBinder::BpBinder(int32_t handle, int32_t trackedUid)\n    : mHandle(handle)\n    , mStability(0)\n    , mAlive(1)\n    , mObitsSent(0)\n    , mObituaries(nullptr)\n    , mTrackedUid(trackedUid)\n{\n    ALOGV(\"Creating BpBinder %p handle %d\\n\", this, mHandle);\n\n    extendObjectLifetime(OBJECT_LIFETIME_WEAK);\n    IPCThreadState::self()-&gt;incWeakHandle(handle, this);\n}\n</code></pre> <ul> <li>\u5c06\u4f20\u5165\u7684handle\u503c\u4fdd\u5b58\u5230mHandle\u6210\u5458\u53d8\u91cf\u91cc</li> <li>mAlive\u8bbe\u7f6e\u4e3a1</li> <li>extendObjectLifetime\u5c06\u5bf9\u8c61\u6539\u4e3a\u5f31\u5f15\u7528\u63a7\u5236</li> <li>\u901a\u8fc7IPCThreadState\u7684incWeakHandle\u589e\u52a0Binder Service\u7684\u5982\u5f15\u7528\u8ba1\u6570\u503c\u3002</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nvoid IPCThreadState::incWeakHandle(int32_t handle, BpBinder *proxy)\n{\n    LOG_REMOTEREFS(\"IPCThreadState::incWeakHandle(%d)\\n\", handle);\n    mOut.writeInt32(BC_INCREFS);\n    mOut.writeInt32(handle);\n    // Create a temp reference until the driver has handled this command.\n    proxy-&gt;getWeakRefs()-&gt;incWeak(mProcess.get());\n    mPostWriteWeakDerefs.push(proxy-&gt;getWeakRefs());\n}\n</code></pre> <p>\u8fd9\u4e00\u6b65\u53ea\u662f\u5c06BC_INCREFS\u8bf7\u6c42\u5199\u5230mOut\u4e2d\uff0c\u8fd8\u6ca1\u6709\u53d1\u9001\u51fa\u53bb\u3002</p> <p>\u9664\u4e86incWeakHandle\u51fd\u6570\u5916\u8fd8\u6709decWeakHandle\uff0cincStrongHandle\u548cdecStrongHandle\u4e0eBinder\u534f\u8bae\u4e2d\u7684\u5176\u4ed6\u547d\u4ee4\u5bf9\u5e94\u8d77\u6765\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#getinterfacedescriptor","title":"getInterfaceDescriptor()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\nconst String16&amp; BpBinder::getInterfaceDescriptor() const\n{\n    if (isDescriptorCached() == false) {\n        Parcel send, reply;\n        // do the IPC without a lock held.\n        //\u901a\u8fc7BpBinder\u7684transact\u51fd\u6570\u5c06INTERFACE_TRANSACTION\u8bf7\u6c42\u53d1\u9001\u51fa\u53bb\n        status_t err = const_cast&lt;BpBinder*&gt;(this)-&gt;transact(\n                INTERFACE_TRANSACTION, send, &amp;reply);\n        if (err == NO_ERROR) {\n          //\u8bfb\u53d6\u8fd4\u56de\u503c\u5f97\u5185\u5bb9\n            String16 res(reply.readString16());\n            Mutex::Autolock _l(mLock);\n            // mDescriptorCache could have been assigned while the lock was\n            // released.\n            if (mDescriptorCache.size() == 0)\n                mDescriptorCache = res;\n        }\n    }\n\n    // we're returning a reference to a non-static object here. Usually this\n    // is not something smart to do, however, with binder objects it is\n    // (usually) safe because they are reference-counted.\n\n    return mDescriptorCache;\n}\n</code></pre> <p>\u8fd9\u91cc\u662f\u901a\u8fc7BpBinder\u7684transact\u51fd\u6570\u5c06\u8bf7\u6c42\u53d1\u9001\u51fa\u53bb</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#transact","title":"transact()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\n// NOLINTNEXTLINE(google-default-arguments)\nstatus_t BpBinder::transact(\n    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)\n{\n    // Once a binder has died, it will never come back to life.\n    if (mAlive) {\n        ...\n        //\u8c03\u7528IPCThreadState\u7684transact\u51fd\u6570\n        status_t status = IPCThreadState::self()-&gt;transact(\n            mHandle, code, data, reply, flags);\n        if (status == DEAD_OBJECT) mAlive = 0;\n\n        return status;\n    }\n\n    return DEAD_OBJECT;\n}\n</code></pre> <p>BpBinder\u8fd9\u4e2a\u4ee3\u7406\u7aef\u7684\u6570\u636e\u53d1\u9001\u5176\u5b9e\u4e5f\u4e0d\u662f\u81ea\u5df1\u6267\u884c\u6570\u636e\u4f20\u8f93\u7684\u64cd\u4f5c\uff0c\u800c\u662f\u8c03\u7528IPCThreadState\u7684transact()\u51fd\u6570\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#ipcthreadstatetransact","title":"IPCThreadState.transact()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::transact(int32_t handle,\n                                  uint32_t code, const Parcel&amp; data,\n                                  Parcel* reply, uint32_t flags)\n{\n    status_t err;\n\n    flags |= TF_ACCEPT_FDS;\n\n    ...\n    //\u8c03\u7528writeTransactionData\uff0c\u5c06data\u4e2d\u7684\u6570\u636e\u6253\u5305\u6210binder_transaction_data\u7ed3\u6784\u5e76\u5199\u5165\u5230mOut\u4e2d\n    err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, nullptr);\n\n    if (err != NO_ERROR) {\n        if (reply) reply-&gt;setError(err);\n        return (mLastError = err);\n    }\n\n    if ((flags &amp; TF_ONE_WAY) == 0) {\n        if (UNLIKELY(mCallRestriction != ProcessState::CallRestriction::NONE)) {\n            if (mCallRestriction == ProcessState::CallRestriction::ERROR_IF_NOT_ONEWAY) {\n                ALOGE(\"Process making non-oneway call (code: %u) but is restricted.\", code);\n                CallStack::logStack(\"non-oneway call\", CallStack::getCurrent(10).get(),\n                    ANDROID_LOG_ERROR);\n            } else /* FATAL_IF_NOT_ONEWAY */ {\n                LOG_ALWAYS_FATAL(\"Process may not make oneway calls (code: %u).\", code);\n            }\n        }\n\n        ...\n\n        if (reply) {\n            //\u548cBinder\u9a71\u52a8\u901a\u4fe1\uff0c\u7b49\u5f85\u6570\u636e\u56de\u590d\n            err = waitForResponse(reply);\n        } else {\n            Parcel fakeReply;\n            //\u548cBinder\u9a71\u52a8\u901a\u4fe1\uff0c\u7b49\u5f85\u6570\u636e\u56de\u590d\n            err = waitForResponse(&amp;fakeReply);\n        }\n        ...\n    } else {\n        //\u548cBinder\u9a71\u52a8\u901a\u4fe1\uff0c\u7b49\u5f85\u6570\u636e\u56de\u590d\n        err = waitForResponse(nullptr, nullptr);\n    }\n\n    return err;\n}\n</code></pre> <ul> <li>\u8c03\u7528writeTransactionData\uff0c\u5c06Parcel\u7c7b\u53d8\u91cfdata\u6253\u5305\u6210\u4e00\u4e2abinder_transaction_data\uff0c\u7136\u540e\u5c06\u5176\u5199\u5230mOut\u4e2d</li> <li>\u8c03\u7528waitForResponse\uff0c\u7b49\u5f85binder\u9a71\u52a8\u5904\u7406\u6570\u636e</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#ipcthreadstatewaitforresponse","title":"IPCThreadState.waitForResponse()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult)\n{\n    uint32_t cmd;\n    int32_t err;\n\n    while (1) {\n        //Binder\u9a71\u52a8\u8fdb\u884c\u4ea4\u4e92\n        if ((err=talkWithDriver()) &lt; NO_ERROR) break;\n        err = mIn.errorCheck();\n        if (err &lt; NO_ERROR) break;\n        if (mIn.dataAvail() == 0) continue;\n\n        //\u62ff\u5230cmd\n        cmd = (uint32_t)mIn.readInt32();\n\n        switch (cmd) {\n        case BR_TRANSACTION_COMPLETE:\n            if (!reply &amp;&amp; !acquireResult) goto finish;\n            break;\n\n        case BR_DEAD_REPLY:\n            err = DEAD_OBJECT;\n            goto finish;\n\n        case BR_FAILED_REPLY:\n            err = FAILED_TRANSACTION;\n            goto finish;\n\n        case BR_FROZEN_REPLY:\n            err = FAILED_TRANSACTION;\n            goto finish;\n\n        case BR_ACQUIRE_RESULT:\n            {\n                ALOG_ASSERT(acquireResult != NULL, \"Unexpected brACQUIRE_RESULT\");\n                const int32_t result = mIn.readInt32();\n                if (!acquireResult) continue;\n                *acquireResult = result ? NO_ERROR : INVALID_OPERATION;\n            }\n            goto finish;\n\n        case BR_REPLY:\n            {\n                binder_transaction_data tr;\n                err = mIn.read(&amp;tr, sizeof(tr));\n                ALOG_ASSERT(err == NO_ERROR, \"Not enough command data for brREPLY\");\n                if (err != NO_ERROR) goto finish;\n\n                if (reply) {\n                    if ((tr.flags &amp; TF_STATUS_CODE) == 0) {\n                        reply-&gt;ipcSetDataReference(\n                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),\n                            tr.data_size,\n                            reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),\n                            tr.offsets_size/sizeof(binder_size_t),\n                            freeBuffer, this);\n                    } else {\n                        err = *reinterpret_cast&lt;const status_t*&gt;(tr.data.ptr.buffer);\n                        freeBuffer(nullptr,\n                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),\n                            tr.data_size,\n                            reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),\n                            tr.offsets_size/sizeof(binder_size_t), this);\n                    }\n                } else {\n                    freeBuffer(nullptr,\n                        reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),\n                        tr.data_size,\n                        reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),\n                        tr.offsets_size/sizeof(binder_size_t), this);\n                    continue;\n                }\n            }\n            goto finish;\n\n        default:\n            err = executeCommand(cmd);\n            if (err != NO_ERROR) goto finish;\n            break;\n        }\n    }\n\nfinish:\n    if (err != NO_ERROR) {\n        if (acquireResult) *acquireResult = err;\n        if (reply) reply-&gt;setError(err);\n        mLastError = err;\n    }\n\n    return err;\n}\n</code></pre> <ul> <li>\u8c03\u7528talkWithDriver()\u51fd\u6570\u8ddf\u9a71\u52a8\u4ea4\u4e92\uff0c\u5728 Binder\u673a\u523602-ServiceManager \u7ae0\u8282\u4e2d\u6211\u4eec\u8bb2\u8fc7talkWithDriver()\u51fd\u6570\u8c03\u7528binder_ioctl()\u8ddf\u9a71\u52a8\u4ea4\u4e92\u7684\u7ec6\u8282\uff0c\u8fd9\u91cc\u4e0d\u5728\u5c55\u5f00\u63cf\u8ff0</li> <li>\u6839\u636ebinder\u9a71\u52a8\u5904\u7406\u540e\u7684\u7ed3\u679c\u505a\u64cd\u4f5c\uff0cBR\u7801\u5728 Binder\u673a\u523602-ServiceManager \u6709\u63cf\u8ff0</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#linktodeath","title":"linkToDeath()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\nstatus_t BpBinder::linkToDeath(\n    const sp&lt;DeathRecipient&gt;&amp; recipient, void* cookie, uint32_t flags)\n{\n    Obituary ob;\n    ob.recipient = recipient;\n    ob.cookie = cookie;\n    ob.flags = flags;\n\n\n    {\n        AutoMutex _l(mLock);\n\n        if (!mObitsSent) {//\u8fd8\u6ca1\u6709\u53d1\u9001\u8fc7\u6b7b\u4ea1\u901a\u77e5\n            if (!mObituaries) {//\u7b2c\u4e00\u6b21\u8c03\u7528\u7684\u8bdd\uff0cmObituaries\u8fd8\u6ca1\u6709\u5206\u914d\u5185\u5b58\n                mObituaries = new Vector&lt;Obituary&gt;;\n                if (!mObituaries) {\n                    return NO_MEMORY;\n                }\n                ALOGV(\"Requesting death notification: %p handle %d\\n\", this, mHandle);\n                getWeakRefs()-&gt;incWeak(this);\n                IPCThreadState* self = IPCThreadState::self();\n                self-&gt;requestDeathNotification(mHandle, this);\n                self-&gt;flushCommands();\n            }\n            ssize_t res = mObituaries-&gt;add(ob);\n            return res &gt;= (ssize_t)NO_ERROR ? (status_t)NO_ERROR : res;\n        }\n    }\n\n    return DEAD_OBJECT;\n}\n</code></pre> <ul> <li>\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u53d1\u9001\u8fc7\u6b7b\u4ea1\u901a\u77e5\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u9001\u8fc7\u90a3\u4e48\u5c31\u5206\u914d\u5185\u5b58</li> <li>\u8c03\u7528IPCThreadState\u7684requestDeathNotification\uff0c\u5c06\u81ea\u5df1\u6ce8\u518c\u5230binder\u9a71\u52a8\u91cc\u9762</li> <li>\u5c06Obituary\u6dfb\u52a0\u5230vector\u91cc</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#ipcthreadstaterequestdeathnotification","title":"IPCThreadState.requestDeathNotification()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nstatus_t IPCThreadState::requestDeathNotification(int32_t handle, BpBinder* proxy)\n{\n    mOut.writeInt32(BC_REQUEST_DEATH_NOTIFICATION);\n    mOut.writeInt32((int32_t)handle);\n    mOut.writePointer((uintptr_t)proxy);\n    return NO_ERROR;\n}\n</code></pre> <p>\u5c06BC_REQUEST_DEATH_NOTIFICATION\uff08\u8bf7\u6c42\u63a5\u6536\u6b7b\u4ea1\u901a\u77e5\uff09\u5199\u5230mOut\u4e2d\u3002BC\u7801\u5728 Binder\u673a\u523601-\u9a71\u52a8 \u6709\u63cf\u8ff0</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#ipcthreadstateflushcommands","title":"IPCThreadState.flushCommands()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IPCThreadState.cpp\n\nvoid IPCThreadState::flushCommands()\n{\n    if (mProcess-&gt;mDriverFD &lt; 0)\n        return;\n    talkWithDriver(false);\n    // The flush could have caused post-write refcount decrements to have\n    // been executed, which in turn could result in BC_RELEASE/BC_DECREFS\n    // being queued in mOut. So flush again, if we need to.\n    if (mOut.dataSize() &gt; 0) {\n        talkWithDriver(false);\n    }\n    if (mOut.dataSize() &gt; 0) {\n        ALOGW(\"mOut.dataSize() &gt; 0 after flushCommands()\");\n    }\n}\n</code></pre> <p>\u8c03\u7528talkWithDriver\u548cbinder\u9a71\u52a8\u8fdb\u884c\u4ea4\u4e92\uff0c\u5728 Binder\u673a\u523602-ServiceManager \u7ae0\u8282\u4e2d\u6211\u4eec\u8bb2\u8fc7talkWithDriver()\u51fd\u6570\u8c03\u7528binder_ioctl()\u8ddf\u9a71\u52a8\u4ea4\u4e92\u7684\u7ec6\u8282\uff0c\u8fd9\u91cc\u4e0d\u5728\u5c55\u5f00\u63cf\u8ff0\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#unlinktodeath","title":"unlinkToDeath()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\nstatus_t BpBinder::unlinkToDeath(\n    const wp&lt;DeathRecipient&gt;&amp; recipient, void* cookie, uint32_t flags,\n    wp&lt;DeathRecipient&gt;* outRecipient)\n{\n    AutoMutex _l(mLock);\n\n    if (mObitsSent) {\n        return DEAD_OBJECT;\n    }\n\n    const size_t N = mObituaries ? mObituaries-&gt;size() : 0;\n    for (size_t i=0; i&lt;N; i++) {\n        const Obituary&amp; obit = mObituaries-&gt;itemAt(i);\n        if ((obit.recipient == recipient\n                    || (recipient == nullptr &amp;&amp; obit.cookie == cookie))\n                &amp;&amp; obit.flags == flags) {\n            if (outRecipient != nullptr) {\n                *outRecipient = mObituaries-&gt;itemAt(i).recipient;\n            }\n            mObituaries-&gt;removeAt(i);\n            if (mObituaries-&gt;size() == 0) {\n                ALOGV(\"Clearing death notification: %p handle %d\\n\", this, mHandle);\n                IPCThreadState* self = IPCThreadState::self();\n                self-&gt;clearDeathNotification(mHandle, this);\n                self-&gt;flushCommands();\n                delete mObituaries;\n                mObituaries = nullptr;\n            }\n            return NO_ERROR;\n        }\n    }\n\n    return NAME_NOT_FOUND;\n}\n</code></pre> <p>unlinkToDeath()\u51fd\u6570\u8ddflinkToDeath()\u51fd\u6570\u8c03\u7528\u6d41\u7a0b\u4e00\u76f4\uff0c\u53ea\u4e0d\u8fc7\u662fBC\u7801\u53d8\u6210\u4e86BC_CLEAR_DEATH_NOTIFICATION\uff08\u53bb\u9664\u63a5\u6536\u6b7b\u4ea1\u901a\u77e5\uff09\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#sendobituary","title":"sendObituary()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/BpBinder.cpp\n\nvoid BpBinder::sendObituary()\n{\n    ALOGV(\"Sending obituary for proxy %p handle %d, mObitsSent=%s\\n\",\n        this, mHandle, mObitsSent ? \"true\" : \"false\");\n\n    mAlive = 0;\n    //\u5982\u679c\u5df2\u7ecf\u53d1\u9001\u8fc7\u6b7b\u4ea1\u901a\u77e5\u4e86\u5c31\u76f4\u63a5\u8fd4\u56de\n    if (mObitsSent) return;\n\n    mLock.lock();\n    Vector&lt;Obituary&gt;* obits = mObituaries;\n    if(obits != nullptr) {\n        ALOGV(\"Clearing sent death notification: %p handle %d\\n\", this, mHandle);\n        IPCThreadState* self = IPCThreadState::self();\n        //\u6e05\u9664\u6ce8\u518c\u5728binder\u9a71\u52a8\u4e2d\u7684\u6b7b\u4ea1\u901a\u77e5\n        self-&gt;clearDeathNotification(mHandle, this);\n        self-&gt;flushCommands();\n        mObituaries = nullptr;\n    }\n    mObitsSent = 1;\n    mLock.unlock();\n\n    ALOGV(\"Reporting death of proxy %p for %zu recipients\\n\",\n        this, obits ? obits-&gt;size() : 0U);\n\n    if (obits != nullptr) {\n        const size_t N = obits-&gt;size();\n        for (size_t i=0; i&lt;N; i++) {\n            //\u8c03\u7528\u6b7b\u4ea1\u901a\u77e5\u51fd\u6570\n            reportOneDeath(obits-&gt;itemAt(i));\n        }\n\n        delete obits;\n    }\n}\n\nvoid BpBinder::reportOneDeath(const Obituary&amp; obit)\n{\n    sp&lt;DeathRecipient&gt; recipient = obit.recipient.promote();\n    ALOGV(\"Reporting death to recipient: %p\\n\", recipient.get());\n    if (recipient == nullptr) return;\n\n    recipient-&gt;binderDied(this);\n}\n</code></pre> <p>\u53d1\u51fa\u6b7b\u4ea1\u901a\u77e5\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bbinder","title":"BBinder","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/include/binder/Binder.h\n\n\nclass BBinder : public IBinder\n{\npublic:\n                        BBinder();\n\n    virtual const String16&amp; getInterfaceDescriptor() const;\n    virtual bool        isBinderAlive() const;\n    virtual status_t    pingBinder();\n    virtual status_t    dump(int fd, const Vector&lt;String16&gt;&amp; args);\n\n    // NOLINTNEXTLINE(google-default-arguments)\n    virtual status_t    transact(   uint32_t code,\n                                    const Parcel&amp; data,\n                                    Parcel* reply,\n                                    uint32_t flags = 0) final;\n\n    // NOLINTNEXTLINE(google-default-arguments)\n    virtual status_t    linkToDeath(const sp&lt;DeathRecipient&gt;&amp; recipient,\n                                    void* cookie = nullptr,\n                                    uint32_t flags = 0);\n\n    // NOLINTNEXTLINE(google-default-arguments)\n    virtual status_t    unlinkToDeath(  const wp&lt;DeathRecipient&gt;&amp; recipient,\n                                        void* cookie = nullptr,\n                                        uint32_t flags = 0,\n                                        wp&lt;DeathRecipient&gt;* outRecipient = nullptr);\n\n    virtual void        attachObject(   const void* objectID,\n                                        void* object,\n                                        void* cleanupCookie,\n                                        object_cleanup_func func) final;\n    virtual void*       findObject(const void* objectID) const final;\n    virtual void        detachObject(const void* objectID) final;\n\n    virtual BBinder*    localBinder();\n\n    bool                isRequestingSid();\n    // This must be called before the object is sent to another process. Not thread safe.\n    void                setRequestingSid(bool requestSid);\n\n    sp&lt;IBinder&gt;         getExtension();\n    // This must be called before the object is sent to another process. Not thread safe.\n    void                setExtension(const sp&lt;IBinder&gt;&amp; extension);\n\n    __attribute__((weak))\n    void                setMinSchedulerPolicy(int policy, int priority);\n    __attribute__((weak))\n    int                 getMinSchedulerPolicy();\n    __attribute__((weak))\n    int                 getMinSchedulerPriority();\n\n    pid_t               getDebugPid();\n\nprotected:\n    virtual             ~BBinder();\n\n    // NOLINTNEXTLINE(google-default-arguments)\n    virtual status_t    onTransact( uint32_t code,\n                                    const Parcel&amp; data,\n                                    Parcel* reply,\n                                    uint32_t flags = 0);\n\nprivate:\n                        BBinder(const BBinder&amp; o);\n            BBinder&amp;    operator=(const BBinder&amp; o);\n\n    class Extras;\n\n    Extras*             getOrCreateExtras();\n\n    std::atomic&lt;Extras*&gt; mExtras;\n\n    friend ::android::internal::Stability;\n    union {\n        int32_t mStability;\n        void* mReserved0;\n    };\n};\n</code></pre> <p>BBinder\u7c7b\u5728Binder.h\u4e2d\u5b9a\u4e49\uff0c\u5176\u65b9\u6cd5\u5728Binder.cpp\u91cc\u5b9e\u73b0\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#transact_1","title":"transact()","text":"<pre><code>https://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/Binder.cpp\n\n// NOLINTNEXTLINE(google-default-arguments)\nstatus_t BBinder::transact(\n    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)\n{\n    data.setDataPosition(0);\n\n    status_t err = NO_ERROR;\n    switch (code) {\n        case PING_TRANSACTION:\n            err = pingBinder();\n            break;\n        case EXTENSION_TRANSACTION:\n            err = reply-&gt;writeStrongBinder(getExtension());\n            break;\n        case DEBUG_PID_TRANSACTION:\n            err = reply-&gt;writeInt32(getDebugPid());\n            break;\n        default:\n            err = onTransact(code, data, reply, flags);\n            break;\n    }\n\n    // In case this is being transacted on in the same process.\n    if (reply != nullptr) {\n        reply-&gt;setDataPosition(0);\n    }\n\n    return err;\n}\n</code></pre> <p>\u90a3\u4e48\u63a5\u4e0b\u6765\u76f4\u63a5\u770bonTransact\u51fd\u6570\u597d\u4e86\u3002</p> <pre><code>https://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/Binder.cpp\n\n// NOLINTNEXTLINE(google-default-arguments)\nstatus_t BBinder::onTransact(\n    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t /*flags*/)\n{\n    switch (code) {\n        case INTERFACE_TRANSACTION:\n            reply-&gt;writeString16(getInterfaceDescriptor());\n            return NO_ERROR;\n\n        case DUMP_TRANSACTION: {\n            int fd = data.readFileDescriptor();\n            int argc = data.readInt32();\n            Vector&lt;String16&gt; args;\n            for (int i = 0; i &lt; argc &amp;&amp; data.dataAvail() &gt; 0; i++) {\n               args.add(data.readString16());\n            }\n            return dump(fd, args);\n        }\n\n        case SHELL_COMMAND_TRANSACTION: {\n            int in = data.readFileDescriptor();\n            int out = data.readFileDescriptor();\n            int err = data.readFileDescriptor();\n            int argc = data.readInt32();\n            Vector&lt;String16&gt; args;\n            for (int i = 0; i &lt; argc &amp;&amp; data.dataAvail() &gt; 0; i++) {\n               args.add(data.readString16());\n            }\n            sp&lt;IShellCallback&gt; shellCallback = IShellCallback::asInterface(\n                    data.readStrongBinder());\n            sp&lt;IResultReceiver&gt; resultReceiver = IResultReceiver::asInterface(\n                    data.readStrongBinder());\n\n            // XXX can't add virtuals until binaries are updated.\n            //return shellCommand(in, out, err, args, resultReceiver);\n            (void)in;\n            (void)out;\n            (void)err;\n\n            if (resultReceiver != nullptr) {\n                resultReceiver-&gt;send(INVALID_OPERATION);\n            }\n\n            return NO_ERROR;\n        }\n\n        case SYSPROPS_TRANSACTION: {\n            report_sysprop_change();\n            return NO_ERROR;\n        }\n\n        default:\n            return UNKNOWN_TRANSACTION;\n    }\n}\n</code></pre> <p>\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u7684\u5185\u5bb9\uff0c\u5728 Binder\u673a\u523602-ServiceManager \u7ae0\u8282\u4e2d\u63d0\u5230\u8fc7\u7f16\u5199\u5b9e\u9645\u7684Binder\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684\u65f6\u5019\u5e94\u8be5\u662f\u4f1a\u91cd\u8f7d\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ee5\u63d0\u4f9b\u5b9e\u9645\u7684\u529f\u80fd\u3002\u4e8b\u5b9e\u662f\u5426\u5982\u6b64\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u5e26\u7740\u8fd9\u4e2a\u7591\u95ee\u5728\u4e0b\u6587\u4e2d\u5bfb\u627e\u7b54\u6848\u3002</p> <p>BBinder\u7684\u4ee3\u7801\u4e0d\u591a\uff0c\u770b\u6837\u5b50\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u5177\u4f53\u670d\u52a1\u7aef\u7684\u7279\u6027\u6765\u6dfb\u52a0\u76f8\u5e94\u7684\u529f\u80fd\u7684\u3002 \u8fd8\u6709\u5c31\u662f\u50cfattachObject\u3001detachObject\u3001findObject\u7684\u529f\u80fd\u662f\u901a\u8fc7BpBinder\u4e2d\u7684ObjectManager\u6765\u5b9e\u73b0\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#iinterfaceh","title":"IInterface.h","text":"<p>IInterface.h\u7684\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u94fe\u63a5\u81ea\u884c\u67e5\u770b\u3002\u9664\u4e86\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u5916\uff0cIInterface\u7c7b\u91cc\u9762\u53ea\u5e26\u6709\u4e00\u4e2a\u5b9e\u73b0\u4e86\u7684\u7c7b\u65b9\u6cd5\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684\u91cd\u8f7d\uff0c\u5c31\u662f\u5c06IInterface\u53c2\u6570\u8f6c\u6362\u6210IBinder\u5bf9\u8c61\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u8fd9\u6837\u5b50\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u4f7f\u7528IBinder\u63d0\u4f9b\u7684transact\u3001onTransact\u7b49\u51fd\u6570\u8fdb\u884cBinder\u6570\u636e\u4f20\u8f93\u4e86\u3002 \u200b</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#declare_meta_interface","title":"DECLARE_META_INTERFACE","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/include/binder/IInterface.h\n\n#define DECLARE_META_INTERFACE(INTERFACE)                               \\\npublic:                                                                 \\\n    static const ::android::String16 descriptor;                        \\\n    static ::android::sp&lt;I##INTERFACE&gt; asInterface(                     \\\n            const ::android::sp&lt;::android::IBinder&gt;&amp; obj);              \\\n    virtual const ::android::String16&amp; getInterfaceDescriptor() const;  \\\n    I##INTERFACE();                                                     \\\n    virtual ~I##INTERFACE();                                            \\\n    static bool setDefaultImpl(std::unique_ptr&lt;I##INTERFACE&gt; impl);     \\\n    static const std::unique_ptr&lt;I##INTERFACE&gt;&amp; getDefaultImpl();       \\\nprivate:                                                                \\\n    static std::unique_ptr&lt;I##INTERFACE&gt; default_impl;                  \\\npublic: \n</code></pre> <p>\u4ee5AudioPolicyService\u4e3a\u4f8b</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#declare_meta_interfaceaudiopolicyservice","title":"DECLARE_META_INTERFACE(AudioPolicyService)","text":"<pre><code>public:\n    static const ::android::String16 descriptor;\n    static ::android::sp&lt;IAudioPolicyService&gt; asInterface(\n            const ::android::sp&lt;::android::IBinder&gt;&amp; obj);\n    virtual const ::android::String16&amp; getInterfaceDescriptor() const;\n    IAudioPolicyService();\n    virtual ~IAudioPolicyService();\n    static bool setDefaultImpl(std::unique_ptr&lt;IAudioPolicyService&gt; impl);\n    static const std::unique_ptr&lt;IAudioPolicyService&gt;&amp; getDefaultImpl();\nprivate:\n    static std::unique_ptr&lt;IAudioPolicyService&gt; default_impl;\npublic:\n</code></pre> <p>\u66ff\u6362\u4e4b\u540e\u7684\u5185\u5bb9\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u65e0\u975e\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e9b\u65b9\u6cd5\u3002\u90a3\u4e48IMPLEMENT_META_INTERFACE\u5e94\u8be5\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5b8f\u4e86\uff0c\u4e0b\u9762\u770b\u770b\u66ff\u6362\u540e\u7684IMPLEMENT_META_INTERFACE\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#implement_meta_interface","title":"IMPLEMENT_META_INTERFACE","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/include/binder/IInterface.h\n\n#define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \\\n    DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)    \\\n\n#endif\n\n#define DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)\\\n    const ::android::StaticString16                                     \\\n        I##INTERFACE##_descriptor_static_str16(__IINTF_CONCAT(u, NAME));\\\n    const ::android::String16 I##INTERFACE::descriptor(                 \\\n        I##INTERFACE##_descriptor_static_str16);                        \\\n    const ::android::String16&amp;                                          \\\n            I##INTERFACE::getInterfaceDescriptor() const {              \\\n        return I##INTERFACE::descriptor;                                \\\n    }                                                                   \\\n    ::android::sp&lt;I##INTERFACE&gt; I##INTERFACE::asInterface(              \\\n            const ::android::sp&lt;::android::IBinder&gt;&amp; obj)               \\\n    {                                                                   \\\n        ::android::sp&lt;I##INTERFACE&gt; intr;                               \\\n        if (obj != nullptr) {                                           \\\n            intr = static_cast&lt;I##INTERFACE*&gt;(                          \\\n                obj-&gt;queryLocalInterface(                               \\\n                        I##INTERFACE::descriptor).get());               \\\n            if (intr == nullptr) {                                      \\\n                intr = new Bp##INTERFACE(obj);                          \\\n            }                                                           \\\n        }                                                               \\\n        return intr;                                                    \\\n    }                                                                   \\\n    std::unique_ptr&lt;I##INTERFACE&gt; I##INTERFACE::default_impl;           \\\n    bool I##INTERFACE::setDefaultImpl(std::unique_ptr&lt;I##INTERFACE&gt; impl)\\\n    {                                                                   \\\n        /* Only one user of this interface can use this function     */ \\\n        /* at a time. This is a heuristic to detect if two different */ \\\n        /* users in the same process use this function.              */ \\\n        assert(!I##INTERFACE::default_impl);                            \\\n        if (impl) {                                                     \\\n            I##INTERFACE::default_impl = std::move(impl);               \\\n            return true;                                                \\\n        }                                                               \\\n        return false;                                                   \\\n    }                                                                   \\\n    const std::unique_ptr&lt;I##INTERFACE&gt;&amp; I##INTERFACE::getDefaultImpl() \\\n    {                                                                   \\\n        return I##INTERFACE::default_impl;                              \\\n    }                                                                   \\\n    I##INTERFACE::I##INTERFACE() { }                                    \\\n    I##INTERFACE::~I##INTERFACE() { }                                   \\\n</code></pre> <p>\u4ee5AudioPolicyService\u4e3a\u4f8b</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#implement_meta_interfaceaudiopolicyservice-androidmediaiaudiopolicyservice","title":"IMPLEMENT_META_INTERFACE(AudioPolicyService, \"android.media.IAudioPolicyService\")","text":"<pre><code>const ::android::String16 IAudioPolicyService::descriptor(\"android.media.IAudioPolicyService\");\nconst ::android::String16&amp;\n    IAudioPolicyService::getInterfaceDescriptor() const {\n    return IAudioPolicyService::descriptor;\n}\n::android::sp&lt;IAudioPolicyService&gt; IAudioPolicyService::asInterface(\n    const ::android::sp&lt;::android::IBinder&gt;&amp; obj)\n{\n    ::android::sp&lt;IAudioPolicyService&gt; intr;\n    if (obj != nullptr) {\n        intr = static_cast&lt;IAudioPolicyService*&gt;(\n            obj-&gt;queryLocalInterface(\n                IAudioPolicyService::descriptor).get());\n        if (intr == nullptr) {\n            intr = new BpAudioPolicyService(obj);\n        }\n    }\n    return intr;\n}\nstd::unique_ptr&lt;IAudioPolicyService&gt; IAudioPolicyService::default_impl;\nbool IAudioPolicyService::setDefaultImpl(std::unique_ptr&lt;IAudioPolicyService&gt; impl)\n{\n    if (!IAudioPolicyService::default_impl &amp;&amp; impl) {\n        IAudioPolicyService::default_impl = std::move(impl);\n        return true;\n    }\n    return false;\n}\nconst std::unique_ptr&lt;IAudioPolicyService&gt;&amp; IAudioPolicyService::getDefaultImpl()\n{\n    return IAudioPolicyService::default_impl;\n}\nIAudioPolicyService::IAudioPolicyService() { }\nIAudioPolicyService::~IAudioPolicyService() { }\n</code></pre> <p>\u5176\u5b9e\u5c06descriptor\u5b9a\u4e49\u4e3aandroid.os.IAudioPolicyService\uff0c\u7136\u540egetInterfaceDescriptor\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5230\u8fd9\u4e2adescriptor\u3002\u7136\u540e\u5728asInterface\u51fd\u6570\u4e2d\uff0c\u5c06\u4e00\u4e2aIBinder\u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u4e2aBpInterface\u7c7b\u5bf9\u8c61\u3002\u4e0b\u4e00\u8282\u8fd8\u6709\u4e3e\u4f8b\u8865\u5145\u8bf4\u660e\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_3","title":"\u5c0f\u7ed3","text":"<p>\u6bcf\u4e2aBinder\u670d\u52a1\u90fd\u662f\u4e3a\u4e86\u67d0\u4e2a\u529f\u80fd\u800c\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u5176\u672c\u8eab\u4f1a\u5b9a\u4e49\u4e00\u5957\u63a5\u53e3\u96c6\uff08\u901a\u5e38\u662fC++\u7684\u4e00\u4e2a\u7c7b\uff09\u6765\u63cf\u8ff0\u81ea\u5df1\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002\u800cBinder\u670d\u52a1\u65e2\u6709\u81ea\u8eab\u5b9e\u73b0\u670d\u52a1\u7684\u7c7b\uff0c\u4e5f\u8981\u6709\u7ed9\u5ba2\u6237\u7aef\u8fdb\u7a0b\u8c03\u7528\u7684\u7c7b\u3002\u4e3a\u4e86\u4fbf\u4e8e\u5f00\u53d1\uff0c\u8fd9\u4e24\u4e2d\u7c7b\u91cc\u9762\u7684\u670d\u52a1\u63a5\u53e3\u5e94\u5f53\u662f\u4e00\u81f4\u7684\uff0c\u4f8b\u5982\uff1a\u5047\u8bbe\u670d\u52a1\u5b9e\u73b0\u65b9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\u4e3aadd(int a, int b)\u7684\u670d\u52a1\u65b9\u6cd5\uff0c\u90a3\u4e48\u5176\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u4e5f\u5e94\u5f53\u6709\u4e00\u4e2aadd(int a, int b)\u65b9\u6cd5\u3002\u56e0\u6b64\u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u672c\u5730\u5b9e\u73b0\u7c7b\u548c\u8fdc\u7a0b\u63a5\u53e3\u7c7b\u9700\u8981\u6709\u4e00\u4e2a\u516c\u5171\u7684\u63cf\u8ff0\u670d\u52a1\u63a5\u53e3\u7684\u57fa\u7c7b\uff08\u5373\u4e0a\u56fe\u4e2d\u7684IXXXService\uff09\u6765\u7ee7\u627f\u3002\u800c\u8fd9\u4e2a\u57fa\u7c7b\u901a\u5e38\u662fIInterface\u7684\u5b50\u7c7b\u3002</p> <p>BnInterface\u7ee7\u627f\u4e86BBinder\u7c7b\uff0c\u7531\u6b64\u53ef\u4ee5\u901a\u8fc7\u590d\u5199onTransact\u65b9\u6cd5\u6765\u63d0\u4f9b\u5b9e\u73b0\u3002BpInterface\u7ee7\u627f\u4e86BpRefBase\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u7684remote\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5230\u6307\u5411\u670d\u52a1\u5b9e\u73b0\u65b9\u7684\u53e5\u67c4\u3002\u5728\u5ba2\u6237\u7aef\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u4e2d\uff0c\u6bcf\u4e2a\u63a5\u53e3\u5728\u7ec4\u88c5\u597d\u53c2\u6570\u4e4b\u540e\uff0c\u90fd\u4f1a\u8c03\u7528remote()-&gt;transact\u6765\u53d1\u9001\u8bf7\u6c42\uff0c\u800c\u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u8c03\u7528\u7684BpBinder\u7684transact\u65b9\u6cd5\uff0c\u8fd9\u6837\u8bf7\u6c42\u4fbf\u901a\u8fc7Binder\u5230\u8fbe\u4e86\u670d\u52a1\u5b9e\u73b0\u65b9\u7684onTransact\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#nativemedia","title":"\u6ce8\u518cNative\u670d\u52a1\uff08media\u670d\u52a1\uff09","text":"<p>mediaserver\u670d\u52a1\u5982\u4f55\u88ab\u62c9\u8d77\uff0c\u540e\u9762\u4f1a\u4e13\u95e8\u627e\u4e2a\u7ae0\u8282\u8be6\u7ec6\u8bb2\u89e3\uff0c\u672c\u7ae0\u6211\u4eec\u5c31\u9ed8\u8ba4\u6267\u884c\u5230mediaserver\u7684main()\u51fd\u6570\u4e86\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/av/media/mediaserver/main_mediaserver.cpp\n\n\nint main(int argc __unused, char **argv __unused)\n{\n    signal(SIGPIPE, SIG_IGN);\n\n    sp&lt;ProcessState&gt; proc(ProcessState::self());//\u83b7\u5f97ProcessState\u5b9e\u4f8b\u5bf9\u8c61\n    sp&lt;IServiceManager&gt; sm(defaultServiceManager());//\u83b7\u53d6BpServiceManager\u5bf9\u8c61\n    ALOGI(\"ServiceManager: %p\", sm.get());\n    AIcu_initializeIcuOrDie();\n    MediaPlayerService::instantiate();//\u6ce8\u518c\u591a\u5a92\u4f53\u670d\u52a1\n    ResourceManagerService::instantiate();\n    registerExtensions();\n    ::android::hardware::configureRpcThreadpool(16, false);//\u914d\u7f6eHwBinder\u7684\u7ebf\u7a0b\u6c60\n    ProcessState::self()-&gt;startThreadPool();//\u542f\u52a8Binder\u7ebf\u7a0b\u6c60\n    IPCThreadState::self()-&gt;joinThreadPool();//\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u7ebf\u7a0b\u6c60\n    ::android::hardware::joinRpcThreadpool();//\u628a\u5f53\u524d\u7684\u901a\u4fe1\u52a0\u5165HwBinder\u7684\u7ebf\u7a0b\u6c60\u8fdb\u884c\u5faa\u73af\n}\n</code></pre> <ul> <li>\u83b7\u5f97ProcessState\u5b9e\u4f8b\u5bf9\u8c61</li> <li>\u8c03\u7528defualtServiceManager\u65b9\u6cd5\u83b7\u53d6IServiceManager\u5b9e\u4f8b\uff08\u5373BpServiceManager\uff09</li> <li>\u6ce8\u518cmedia\u670d\u52a1</li> <li>\u542f\u52a8Binder\u7ebf\u7a0b\u6c60</li> <li>\u628a\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u7ebf\u7a0b\u6c60</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#binder","title":"\u6253\u5f00Binder\u9a71\u52a8","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nsp&lt;ProcessState&gt; ProcessState::self()\n{\n    Mutex::Autolock _l(gProcessMutex);\n    if (gProcess != nullptr) {\n        return gProcess;\n    }\n    gProcess = new ProcessState(kDefaultDriver);\n    return gProcess;\n}\n</code></pre> <p>ProcessState\u4ee3\u8868\u8fdb\u7a0b\u72b6\u6001\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u6709\u4e00\u4e2aProcessState\u5bf9\u8c61\u3002ProcessState\u91c7\u7528\u4e86\u5355\u4f8b\u7684\u6a21\u5f0f\u4fdd\u5b58\u4e86\u4e00\u4e2aProcessState\u5168\u5c40\u5bf9\u8c61gProcess\uff0c\u4f9b\u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u3002</p> <p>\u8fd9\u91cc\u7684new ProcessState(kDefaultDriver)\u5176\u5b9e\u5c31\u662f\u53bb\u6253\u5f00binder\u9a71\u52a8\u7b49\u64cd\u4f5c\uff0c\u5982\u679c\u770b\u8fc7 Binder\u673a\u523602-ServiceManager \u6216\u8005Ashmem\u7b80\u4ecb\uff08Android IPC\u4f20\u8f93\u5927\u6570\u636e\uff09\u4f1a\u8fd9\u6d41\u7a0b\u6709\u6240\u4e86\u89e3\uff0c\u4e3a\u4e86\u7167\u987e\u6ca1\u770b\u8fc7\u8fd9\u4e24\u7bc7\u6587\u6863\u7684\u540c\u5b66\uff0c\u8fd9\u91cc\u6211\u4eec\u8fd8\u662f\u628a\u4e4b\u524d\u7684\u5206\u6790\u62f7\u8d1d\u8fc7\u6765\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#new-processstatedriver","title":"new ProcessState(driver)","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nProcessState::ProcessState(const char *driver)\n    : mDriverName(String8(driver))\n    , mDriverFD(open_driver(driver))\n    , mVMStart(MAP_FAILED)\n    , mThreadCountLock(PTHREAD_MUTEX_INITIALIZER)\n    , mThreadCountDecrement(PTHREAD_COND_INITIALIZER)\n    , mExecutingThreadsCount(0)\n    , mMaxThreads(DEFAULT_MAX_BINDER_THREADS)\n    , mStarvationStartTimeMs(0)\n    , mThreadPoolStarted(false)\n    , mThreadPoolSeq(1)\n    , mCallRestriction(CallRestriction::NONE)\n{\n    ...\n\n    if (mDriverFD &gt;= 0) {\n        // mmap the binder, providing a chunk of virtual address space to receive transactions.\n        //#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n        //_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\n        //3. \u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\n        mVMStart = mmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);\n        if (mVMStart == MAP_FAILED) {\n            // *sigh*\n            ALOGE(\"Using %s failed: unable to mmap transaction memory.\\n\", mDriverName.c_str());\n            close(mDriverFD);\n            mDriverFD = -1;\n            mDriverName.clear();\n        }\n    }\n\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\u770b\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u9a71\u52a8\u7684\u540d\u5b57\u3001\u6700\u5927\u7ebf\u7a0b\u6570\u7b49\u7b49\u3002\u8fd8\u8c03\u7528\u4e86open_driver(driver)\u548cmmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0)\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#open_driverdriver","title":"open_driver(driver)","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nstatic int open_driver(const char *driver)\n{\n    //1. \u6253\u5f00Binder\u8bbe\u5907\u9a71\u52a8\n    int fd = open(driver, O_RDWR | O_CLOEXEC);\n    if (fd &gt;= 0) {\n        int vers = 0;\n        //2. \u83b7\u53d6Binder\u7684\u7248\u672c\u4fe1\u606f\n        status_t result = ioctl(fd, BINDER_VERSION, &amp;vers);\n        if (result == -1) {\n            ALOGE(\"Binder ioctl to obtain version failed: %s\", strerror(errno));\n            close(fd);\n            fd = -1;\n        }\n        //2.1 \u6bd4\u8f83\u534f\u8bae\u7248\u672c\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u540c\u5219\u8df3\u51fa\n        if (result != 0 || vers != BINDER_CURRENT_PROTOCOL_VERSION) {\n          ALOGE(\"Binder driver protocol(%d) does not match user space protocol(%d)! ioctl() return value: %d\",\n                vers, BINDER_CURRENT_PROTOCOL_VERSION, result);\n            close(fd);\n            fd = -1;\n        }\n        size_t maxThreads = DEFAULT_MAX_BINDER_THREADS;\n        //\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0cBINDER_SET_MAX_THREADS=16\n        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);\n        if (result == -1) {\n            ALOGE(\"Binder ioctl to set max threads failed: %s\", strerror(errno));\n        }\n    } else {\n        ALOGW(\"Opening '%s' failed: %s\\n\", driver, strerror(errno));\n    }\n    return fd;\n}\n</code></pre> <ul> <li>\u8c03\u7528open\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_open\uff09\u6253\u5f00Binder\u8bbe\u5907\u9a71\u52a8</li> <li>\u8c03\u7528ioctl\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_ioctl\uff09\u83b7\u53d6Binder\u7684\u7248\u672c\u4fe1\u606f</li> <li>\u8c03\u7528ioctl\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_ioctl\uff09\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0cBINDER_SET_MAX_THREADS=16</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#mmap","title":"mmap()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\n//#define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)\n//_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\n//3. \u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\nmVMStart = mmap(nullptr, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);\n</code></pre> <p>\u8c03\u7528mmap\uff08\u5bf9\u5e94\u5185\u6838\u4e2d\u7684binder_mmap\uff09\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_4","title":"\u5c0f\u7ed3","text":"<pre><code>sequenceDiagram\nmain_mediaserver.cpp -&gt;&gt;+ ProcessState:self()\nProcessState -&gt;&gt; ProcessState:new ProcessState(driver)\nProcessState -&gt;&gt; ProcessState:open_driver(driver)\nProcessState -&gt;&gt; Binder\u9a71\u52a8:binder_open()\nProcessState -&gt;&gt; Binder\u9a71\u52a8:binder_ioctl()\nProcessState -&gt;&gt;- Binder\u9a71\u52a8:binder_mmap()</code></pre> <p>ProcessState:self\u7684\u5de5\u4f5c\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a</p> <ul> <li>\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528open()\u6765\u6253\u5f00\"/dev/binder\"\uff0c\u83b7\u5f97\u4e00\u4e2a\u53e5\u67c4\u4fe1\u606f\uff0c\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_open()</li> <li>\u901a\u8fc7ioctl\u83b7\u53d6binder\u7684\u7248\u672c\u4fe1\u606f\uff0c\u6bd4\u8f83binder\u534f\u8bae\u7248\u672c\u662f\u5426\u76f8\u540c\uff0c\u4e0d\u540c\u5219\u8df3\u51fa\uff1b\u518d\u6b21\u901a\u8fc7ioctl\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_ioctl()</li> <li>\u901a\u8fc7mmap\u5185\u5b58\u6620\u5c04\uff081M-4K*2\uff09\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u628abinder\u9a71\u52a8\u6587\u4ef6\u76841016K\u5b57\u8282\u6620\u5c04\u5230\u4e86\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd91016K\u5185\u5b58\u7a7a\u95f4\u4e3aservicemanager\u4f7f\u7528\u3002\u5728Binder\u9a71\u52a8\u4e2d\u5bf9\u5e94\u7684\u662f\u51fd\u6570binder_mmap()\u3002</li> <li>_SC_PAGE_SIZE\u8868\u793a\u4e00\u4e2apage\u9875\u7684\u5927\u5c0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3a4K\uff0c\u5373(1M - 4K*2)=1016K\u3002</li> <li>\u8fd9\u4e2apage\u7684\u5927\u5c0f\uff0c\u4e0d\u540c\u5382\u5bb6\u6709\u65f6\u5019\u4e5f\u4f1a\u8c03\u6574\u5927\u5c0f\uff0c\u4e00\u822c\u67091M\uff0c64K\uff0c4K\uff0c1KB\uff0c\u901a\u5e38\u4e3a4K\u3002</li> <li>Android11\u4e4b\u524dservicemanager\u6620\u5c04\u7684\u5185\u5b58\u7a7a\u95f4\u662f128K\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#servicemanager","title":"\u83b7\u53d6ServiceManager\u4ee3\u7406\u5bf9\u8c61","text":"<p>\u5f53\u670d\u52a1\u8fdb\u7a0b\u83b7\u53d6\u5230\u4e86ProcessState\u5bf9\u8c61\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u62ff\u5230ServiceManager\u7684\u4ee3\u7406\u5bf9\u8c61(BpServiceManager)\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IServiceManager.cpp\n\n//AidlServiceManager\u5176\u5b9e\u5c31\u662fIServiceManager\nusing AidlServiceManager = android::os::IServiceManager;\n\nsp&lt;IServiceManager&gt; defaultServiceManager()\n{\n    std::call_once(gSmOnce, []() {\n        sp&lt;AidlServiceManager&gt; sm = nullptr;\n        while (sm == nullptr) {\n            sm = interface_cast&lt;AidlServiceManager&gt;(ProcessState::self()-&gt;getContextObject(nullptr));\n            if (sm == nullptr) {\n                ALOGE(\"Waiting 1s on context object on %s.\", ProcessState::self()-&gt;getDriverName().c_str());\n                sleep(1);\n            }\n        }\n\n        gDefaultServiceManager = new ServiceManagerShim(sm);\n    });\n\n    return gDefaultServiceManager;\n}\n</code></pre> <p>\u83b7\u53d6ServiceManager\u5bf9\u8c61\u91c7\u7528\u5355\u4f8b\u6a21\u5f0f\uff0c\u5f53gDefaultServiceManager\u5b58\u5728\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\uff0c\u5426\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002 \u5176\u521b\u5efa\u8fc7\u7a0b\u5206\u4e3a\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u8c03\u7528ProcessState::self()\u83b7\u53d6ProcessState\u5bf9\u8c61\uff0c\u4e0a\u4e00\u6b65\u521a\u83b7\u53d6\uff0c\u6240\u4ee5\u5168\u5c40\u5bf9\u8c61gProcess</li> <li>\u8c03\u7528ProcessState::getContextObject(nullptr)\u83b7\u53d6\u83b7\u53d6BpBinder\u5bf9\u8c61</li> <li>\u8c03\u7528interface_cast()\u83b7\u53d6BpServiceManager\u5bf9\u8c61</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#getcontextobject","title":"getContextObject()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nsp&lt;IBinder&gt; ProcessState::getContextObject(const sp&lt;IBinder&gt;&amp; /*caller*/)\n{\n    sp&lt;IBinder&gt; context = getStrongProxyForHandle(0);\n\n    if (context == nullptr) {\n       ALOGW(\"Not able to get context object on %s.\", mDriverName.c_str());\n    }\n\n    // The root object is special since we get it directly from the driver, it is never\n    // written by Parcell::writeStrongBinder.\n    internal::Stability::tryMarkCompilationUnit(context.get());\n\n    return context;\n}\n</code></pre> <p>getContextObject()\u8c03\u7528getStrongProxyForHandle()\u8fdb\u884c\u5904\u7406\uff0c\u4f20\u5165handle=0(\u7cfb\u7edf\u4e2d\u7ea6\u5b9a\u4e86ServiceManager\u7684handle=0)</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#getstrongproxyforhandle","title":"getStrongProxyForHandle()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/ProcessState.cpp\n\nsp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)\n{\n    sp&lt;IBinder&gt; result;\n\n    AutoMutex _l(mLock);\n    //\u67e5\u627ehandle\u5bf9\u5e94\u7684\u8d44\u6e90\u9879\n    handle_entry* e = lookupHandleLocked(handle);\n\n    if (e != nullptr) {\n        IBinder* b = e-&gt;binder;\n        if (b == nullptr || !e-&gt;refs-&gt;attemptIncWeak(this)) {\n            if (handle == 0) {\n\n                Parcel data;\n                //\u901a\u8fc7ping\u64cd\u4f5c\u6d4b\u8bd5binder\u662f\u5426\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\n                status_t status = IPCThreadState::self()-&gt;transact(\n                        0, IBinder::PING_TRANSACTION, data, nullptr, 0);\n                if (status == DEAD_OBJECT)\n                   return nullptr;\n            }\n            //\u5f53handle\u503c\u6240\u5bf9\u5e94\u7684IBinder\u4e0d\u5b58\u5728\u6216\u5f31\u5f15\u7528\u65e0\u6548\u65f6\uff0c\u5219\u521b\u5efaBpBinder\u5bf9\u8c61\n            //handle=0\n            //create\u7684\u5b9e\u73b0\u5176\u5b9e\u5c31\u662fnew BpBinder(0,trackedUid)\n            b = BpBinder::create(handle);\n            e-&gt;binder = b;\n            if (b) e-&gt;refs = b-&gt;getWeakRefs();\n            result = b;\n        } else {\n            // This little bit of nastyness is to allow us to add a primary\n            // reference to the remote proxy when this team doesn't have one\n            // but another team is sending the handle to us.\n            result.force_set(b);\n            e-&gt;refs-&gt;decWeak(this);\n        }\n    }\n\n    return result;\n}\n\nProcessState::handle_entry* ProcessState::lookupHandleLocked(int32_t handle)\n{\n    const size_t N=mHandleToObject.size();\n    //\u5f53handle\u5927\u4e8emHandleToObject\u7684\u957f\u5ea6\u65f6\uff0c\u8fdb\u5165\u8be5\u5206\u652f\n    if (N &lt;= (size_t)handle) {\n        handle_entry e;\n        e.binder = nullptr;\n        e.refs = nullptr;\n        //\u4ecemHandleToObject\u7684\u7b2cN\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u63d2\u5165(handle+1-N)\u4e2ae\u5230\u961f\u5217\u4e2d\n        status_t err = mHandleToObject.insertAt(e, N, handle+1-N);\n        if (err &lt; NO_ERROR) return nullptr;\n    }\n    return &amp;mHandleToObject.editItemAt(handle);\n}\n</code></pre> <ul> <li>\u5f53handle=0\u6240\u5bf9\u5e94\u7684IBinder\u4e0d\u5b58\u5728\u6216\u5f31\u5f15\u7528\u65e0\u6548\u65f6\uff0c\u521b\u5efaBpBinder</li> <li>\u901a\u8fc7PING_TRANSACTION\u6765\u5224\u65adServiceManager\u662f\u5426\u5df2\u7ecf\u5c31\u7eea</li> <li>\u521b\u5efa\u4e00\u4e2aBpBinder(0, trackedUid)\uff0c\u540c\u65f6\u5c06handle\u76f8\u5bf9\u5e94Binder\u7684\u5f31\u5f15\u7528\u589e\u52a01</li> </ul> <p>lookupHandleLocked()\u65b9\u6cd5\u6839\u636ehandle\u503c\u6765\u67e5\u627e\u5bf9\u5e94\u7684handle_entry\uff0chandle_entry\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u8bb0\u5f55\u4e86IBinder\u548cweakref_type\u4e24\u4e2a\u6307\u9488\u3002\u5f53handle\u5927\u4e8emHandleToObject\u7684Vector\u957f\u5ea6\u65f6\uff0c\u5219\u5411Vector\u4e2d\u6dfb\u52a0(handle+1-N)\u4e2ahandle_entry\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u518d\u8fd4\u56dehandle\u5411\u5bf9\u5e94\u4f4d\u7f6e\u7684handle_entry\u7ed3\u6784\u4f53\u6307\u9488\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpservicemanager","title":"\u83b7\u53d6BpServiceManager\u5bf9\u8c61","text":"","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#interface_cast","title":"interface_cast()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/include/binder/IInterface.h\n\ntemplate&lt;typename INTERFACE&gt;\ninline sp&lt;INTERFACE&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)\n{\n    return INTERFACE::asInterface(obj);\n}\n</code></pre> <pre><code>\u8fd9\u91cc\u91c7\u7528\u4e86C++\u7684\u6a21\u677f\u51fd\u6570\uff0c\u56e0\u4e3aAidlServiceManager\u5176\u5b9e\u5c31\u662fIServiceManager\uff0cinterface_cast&lt;AidlServiceManager&gt;\u5176\u5b9e\u5c31\u662finterface_cast&lt;IServiceManager&gt;\uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u4e86IServiceManager::asInterface(obj);  \u8fd9\u91cc\u7684obj\u5c31\u662fnew BpBinder(0)\u3002\n</code></pre> <p>obsidian\u6b63\u6587\u4e2d\u7528\u5230 &lt;&gt; \u6216\u8005\u5728table\u4e2d\u7528\u5230 __ \u5f00\u5934\uff0c\u5c31\u5f71\u54cd\u7684md\u683c\u5f0f\u3002 \u6240\u4ee5\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5982\u679c\u653e\u5728\u6b63\u6587\uff0c\u5c31\u5f71\u54cd\u4e86\u6574\u4e2a\u6587\u6863\u683c\u5f0f\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#iservicemanagerasinterface","title":"IServiceManager::asInterface()","text":"<p>\u4f46\u662fIServiceManager\u4e2d\u6ca1\u6709\u770b\u5230 asInterface()\u7684\u5b9e\u73b0\uff0c\u8fd8\u8bb0\u5f97\u524d\u9762\u6211\u804a\u5230DECLARE_META_INTERFACE\u548cIMPLEMENT_META_INTERFACE\u4e2d\u5b9e\u73b0asInterface()\u3002</p> <p>\u770b\u8fc7Android 10\u53ca\u4e4b\u524d\u76f8\u5173\u6e90\u7801\u7684\u540c\u5b66\u5e94\u8be5\u4f1a\u5bf9BpServiceManager\u8fd9\u4e2a\u7c7b\u6bd4\u8f83\u719f\u6089\uff0c\u5b83\u662fServiceManager\u5728\u5176\u5b83Binder\u7ebf\u7a0b\u7684\u4ee3\u7406\u3002\u4e0d\u8fc7\u8fd9\u4e00\u90e8\u5206\u4ee3\u7801\u73b0\u5728\u5df2\u7ecf\u88ab\u5220\u9664\u4e86\u3002\u5728\u6b64\u4e4b\u540e\uff0cBpServiceManager\u4e0d\u518d\u901a\u8fc7\u624b\u52a8\u5b9e\u73b0\uff0c\u800c\u662f\u91c7\u7528AID\uff08\u6587\u4ef6\u4e3a IServiceManager.aidl\uff09\uff0c\u751f\u6210IServiceManager\u3001BnServiceManager\u3001BpServiceManager\u7684\u5934\u6587\u4ef6\u53ca\u5177\u4f53\u5b9e\u73b0\u3002</p> <p>https://android-review.googlesource.com/c/platform/frameworks/native/+/1132445 https://android.googlesource.com/platform/system/tools/aidl/+/brillo-m10-dev/docs/aidl-cpp.md</p> <p>\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p><pre><code>DECLARE_META_INTERFACE(ServiceManager)\n\nIMPLEMENT_META_INTERFACE(ServiceManager, \"android.os.IServiceManager\")\n</code></pre> \u200b</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#declare_meta_interfaceservicemanager","title":"DECLARE_META_INTERFACE(ServiceManager)","text":"<pre><code>public:\n    static const ::android::String16 descriptor;\n    static ::android::sp&lt;IServiceManager&gt; asInterface(\n            const ::android::sp&lt;::android::IBinder&gt;&amp; obj);\n    virtual const ::android::String16&amp; getInterfaceDescriptor() const;\n    IServiceManager();\n    virtual ~IServiceManager();\n    static bool setDefaultImpl(std::unique_ptr&lt;IServiceManager&gt; impl);\n    static const std::unique_ptr&lt;IServiceManager&gt;&amp; getDefaultImpl();\nprivate:\n    static std::unique_ptr&lt;IServiceManager&gt; default_impl;\npublic:\n</code></pre> <p>\u8be5\u8fc7\u7a0b\u4e3b\u8981\u662f\u58f0\u660easInterface()\u3001getInterfaceDescriptor()\u65b9\u6cd5\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#implement_meta_interfaceservicemanager-androidosiservicemanager","title":"IMPLEMENT_META_INTERFACE(ServiceManager, \"android.os.IServiceManager\")","text":"<pre><code>const ::android::String16 IServiceManager::descriptor(\"android.os.IServiceManager\");\nconst ::android::String16&amp;\n    IServiceManager::getInterfaceDescriptor() const {\n    return IServiceManager::descriptor;\n}\n::android::sp&lt;IServiceManager&gt; IServiceManager::asInterface(\n    const ::android::sp&lt;::android::IBinder&gt;&amp; obj)\n{\n    ::android::sp&lt;IServiceManager&gt; intr;\n    if (obj != nullptr) {\n        intr = static_cast&lt;IServiceManager*&gt;(\n            obj-&gt;queryLocalInterface(\n                IServiceManager::descriptor).get());\n        if (intr == nullptr) {\n            intr = new BpServiceManager(obj);\n        }\n    }\n    return intr;\n}\nstd::unique_ptr&lt;IServiceManager&gt; IServiceManager::default_impl;\nbool IServiceManager::setDefaultImpl(std::unique_ptr&lt;IServiceManager&gt; impl)\n{\n    if (!IServiceManager::default_impl &amp;&amp; impl) {\n        IServiceManager::default_impl = std::move(impl);\n        return true;\n    }\n    return false;\n}\nconst std::unique_ptr&lt;IServiceManager&gt;&amp; IServiceManager::getDefaultImpl()\n{\n    return IServiceManager::default_impl;\n}\nIServiceManager::IServiceManager() { }\nIServiceManager::~IServiceManager() { }\n</code></pre> <p>\u6700\u7ec8IServiceManager::asInterface()\u7b49\u4ef7\u4e8enew Bp##INTERFACE(obj)\uff0c\u5373new BpServiceManager(obj)\uff0c\u6240\u4ee5gDefaultServiceManager = new ServiceManagerShim(sm);\u8f6c\u6362\u540e\uff0c\u53d8\u6210gDefaultServiceManager = new ServiceManagerShim(new BpBinder(0\uff0ctrackedUid));</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#mediaplayerserviceinstantiate","title":"MediaPlayerService::instantiate()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp\n\nvoid MediaPlayerService::instantiate() {\n    defaultServiceManager()-&gt;addService(\n            String16(\"media.player\"), new MediaPlayerService());\n}\n</code></pre> <ul> <li>\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Service\u2014\u2014BnMediaPlayerService\uff0c\u60f3\u628a\u5b83\u544a\u8bc9ServiceManager\u3002\u7136\u540e\u8c03\u7528BnServiceManager\u7684addService\u7684addService\u6765\u5411ServiceManager\u4e2d\u6dfb\u52a0\u4e00\u4e2aService\uff0c\u5176\u4ed6\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32\"media.player\"\u6765\u5411ServiceManager\u67e5\u8be2\u6b64\u670d\u52a1\u3002</li> <li>\u6ce8\u518c\u670d\u52a1MediaPlayerService\uff1a\u7531defaultServiceManager()\u8fd4\u56de\u7684\u662fBpServiceManager\uff0c\u540c\u65f6\u4f1a\u521b\u5efaProcessState\u5bf9\u8c61\u548cBpBinder\u5bf9\u8c61\u3002\u6545\u6b64\u5904\u7b49\u4ef7\u4e8e\u8c03\u7528BpServiceManager-&gt;addService\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_5","title":"\u7c7b\u56fe","text":"<p>\u61d2\u5f97\u753b\u56fe\uff0c\u590d\u7528\u4e4b\u524d\u7684\u56fe\u7247\uff0c\u628a\u56fe\u4e2dXXX\u6362\u6210MediaPlayerService\u5373\u53ef\u3002</p> <p>MediaPlayerService\u7ee7\u627f\u81eaBnMediaPlayerService\uff0cBnMediaPlayerService\u7ee7\u627f\u81eaBnInterface\uff0cBnInterface\u7ee7\u627f\u81eaBBinder\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3a\u4e00\u4e2aBinder\u5b9e\u4f53\uff0c\u4e5f\u5c31\u662fBBinder\u5bf9\u8c61\u3002</p> <p></p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpservicemanageraddservice","title":"BpServiceManager.addService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IServiceManager.cpp\n\nstatus_t ServiceManagerShim::addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n                                        bool allowIsolated, int dumpsysPriority)\n{\n    Status status = mTheRealServiceManager-&gt;addService(\n        String8(name).c_str(), service, allowIsolated, dumpsysPriority);\n    return status.exceptionCode();\n}\n</code></pre> <p>\u6dfb\u52a0Service\u5230ServiceManager\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#servicemanageraddservice","title":"ServiceManager.addService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.h\n\n//\u5b9a\u4e49Service\u7ed3\u6784\u4f53\nstruct Service {\n    sp&lt;IBinder&gt; binder; // not null\n    bool allowIsolated;\n    int32_t dumpPriority;\n    bool hasClients = false; // notifications sent on true -&gt; false.\n    bool guaranteeClient = false; // forces the client check to true\n    pid_t debugPid = 0; // the process in which this service runs\n\n    // the number of clients of the service, including servicemanager itself\n    ssize_t getNodeStrongRefCount();\n};\n\nusing ServiceMap = std::map&lt;std::string, Service&gt;;\n\n//\u7528\u4e8e\u4fdd\u5b58\u6dfb\u52a0\u8fdb\u6765\u7684Services\nServiceMap mNameToService;\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.cpp\n\nStatus ServiceManager::addService(const std::string&amp; name, const sp&lt;IBinder&gt;&amp; binder, bool allowIsolated, int32_t dumpPriority) {\n    ...\n\n    //\u6dfb\u52a0 Service \u5230 mNameToService \u4e2d\uff0c\u5b8c\u6210 Binder Service \u6ce8\u518c\u8fc7\u7a0b\n    mNameToService[name] = Service {\n        .binder = binder,\n        .allowIsolated = allowIsolated,\n        .dumpPriority = dumpPriority,\n        .debugPid = ctx.debugPid,\n    };\n\n    auto it = mNameToRegistrationCallback.find(name);\n    if (it != mNameToRegistrationCallback.end()) {\n        for (const sp&lt;IServiceCallback&gt;&amp; cb : it-&gt;second) {\n            mNameToService[name].guaranteeClient = true;\n            // permission checked in registerForNotifications\n            cb-&gt;onRegistration(name, binder);\n        }\n    }\n\n    return Status::ok();\n}\n</code></pre> <p>\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u5728 Binder\u673a\u523602-ServiceManager \u7ae0\u8282\u4e2d\u6709\u8bb2\u89e3\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u63cf\u8ff0\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_6","title":"\u5c0f\u7ed3","text":"<ul> <li>\u670d\u52a1\u8fdb\u7a0b\u5148\u83b7\u5f97\u4e00\u4e2a ProcessState()\u7684\u5bf9\u8c61</li> <li>\u83b7\u53d6ServiceManager\u7684\u4ee3\u7406\u5bf9\u8c61BpServiceManager\uff0c\u4e3b\u8981\u901a\u8fc7new BpBinder(0\uff0cxxx)\u5f97\u5230</li> <li>\u8c03\u7528BpServiceManager\u7684addService\uff0cServiceManager\u4fdd\u5b58\u5230mNameToService\u4e2d</li> <li>\u901a\u8fc7ProcessState::startThreadPool\u542f\u52a8\u7ebf\u7a0b\u6c60</li> <li>\u901a\u8fc7IPCThreadState::joinThreadPool\u5c06\u4e3b\u7ebf\u7a0b\u52a0\u5165\u7684Binder\u4e2d</li> <li>\u901a\u8fc7::android::hardware::joinRpcThreadpool()\u5c06\u4e3b\u7ebf\u7a0b\u52a0\u5165HwBinder\u7684\u7ebf\u7a0b\u6c60\u8fdb\u884c\u5faa\u73af</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#nativemedia_1","title":"\u83b7\u53d6Native\u670d\u52a1\uff08media\u670d\u52a1\uff09","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/av/media/libmedia/IMediaDeathNotifier.cpp\n\nIMediaDeathNotifier::getMediaPlayerService()\n{\n    ALOGV(\"getMediaPlayerService\");\n    Mutex::Autolock _l(sServiceLock);\n    if (sMediaPlayerService == 0) {\n        //\u83b7\u53d6ServiceManager\u7684\u4ee3\u7406\u5bf9\u8c61BpServiceManager\n        sp&lt;IServiceManager&gt; sm = defaultServiceManager();\n        sp&lt;IBinder&gt; binder;\n        do {\n            //\u8c03\u7528BpServiceManager\u7684getService\u63a5\u53e3\uff0c\u6765\u83b7\u53d6\u670d\u52a1\u540d\u79f0\u4e3a\u201cmedia.player\u201d\u7684Binder\u670d\u52a1\u5bf9\u8c61\n            binder = sm-&gt;getService(String16(\"media.player\"));\n            if (binder != 0) {\n                break;\n            }\n            ALOGW(\"Media player service not published, waiting...\");\n            //\u5982\u679cmedia\u7684\u670d\u52a1\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\uff0c\u4f11\u77200.5\u79d2\u8fdb\u884c\u7b49\u5f85\n            usleep(500000); // 0.5 s\n        } while (true);\n\n        if (sDeathNotifier == NULL) {\n            //\u521b\u5efa\u6b7b\u4ea1\u901a\u77e5\u5bf9\u8c61\n            sDeathNotifier = new DeathNotifier();\n        }\n        binder-&gt;linkToDeath(sDeathNotifier);\n        //\u8f6c\u6362\u5f97\u5230\u670d\u52a1\u5bf9\u8c61\n        sMediaPlayerService = interface_cast&lt;IMediaPlayerService&gt;(binder);\n    }\n    ALOGE_IF(sMediaPlayerService == 0, \"no media player service!?\");\n    return sMediaPlayerService;\n}\n</code></pre> <ul> <li>\u83b7\u53d6ServiceManager\u7684\u4ee3\u7406\u5bf9\u8c61BpServiceManager</li> <li>\u8c03\u7528BpServiceManager\u7684getService\u63a5\u53e3\uff0c\u6765\u83b7\u53d6\u670d\u52a1\u540d\u79f0\u4e3a\u201cmedia.player\u201d\u7684Binder\u670d\u52a1\u5bf9\u8c61</li> <li>\u521b\u5efa\u6b7b\u4ea1\u901a\u77e5\u5bf9\u8c61</li> <li>\u5c06\u6b7b\u4ea1\u901a\u77e5\u8fde\u63a5\u5230binder</li> <li>\u5f97\u5230\u670d\u52a1\u5bf9\u8c61</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#servicemanager_1","title":"\u83b7\u53d6ServiceManager\u4ee3\u7406\u5bf9\u8c61","text":"<p>\u5176\u4e2ddefaultServiceManager()\u8fc7\u7a0b\u5728\u4e0a\u9762\u5df2\u7ecf\u8bf4\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpservicemanagergetservice","title":"BpServiceManager.getService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IServiceManager.cpp\n\nsp&lt;IBinder&gt; ServiceManagerShim::getService(const String16&amp; name) const\n{\n    static bool gSystemBootCompleted = false;\n    //\u68c0\u67e5\u6307\u5b9a\u670d\u52a1\u662f\u5426\u5b58\u5728\n    sp&lt;IBinder&gt; svc = checkService(name);\n    if (svc != nullptr) return svc;\n\n    //\u5982\u679cProcessState\u548cBinder\u9a71\u52a8\u4ea4\u4e92\u7684\u662f\"/dev/vndbinder\"\uff0c\u90a3\u4e48isVendorService\u4e3aTrue\uff0c\u8868\u660eVendor\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884cBinder\u901a\u4fe1\n    const bool isVendorService =\n        strcmp(ProcessState::self()-&gt;getDriverName().c_str(), \"/dev/vndbinder\") == 0;\n    const long timeout = uptimeMillis() + 5000;\n    // Vendor code can't access system properties\n    if (!gSystemBootCompleted &amp;&amp; !isVendorService) {\n    //vendor\u5206\u533a\u7684\u4ee3\u7801\u4e0d\u80fd\u8bbf\u95eesystem\u7684\u5c5e\u6027\n#ifdef __ANDROID__\n        char bootCompleted[PROPERTY_VALUE_MAX];\n        property_get(\"sys.boot_completed\", bootCompleted, \"0\");\n        gSystemBootCompleted = strcmp(bootCompleted, \"1\") == 0 ? true : false;\n#else\n        gSystemBootCompleted = true;\n#endif\n    }\n    // retry interval in millisecond; note that vendor services stay at 100ms\n    //vendor\u5206\u533a\u7684\u670d\u52a1sleepTime \u4e3a100ms\uff0c system\u4e3a1000ms\n    const long sleepTime = gSystemBootCompleted ? 1000 : 100;\n\n    int n = 0;\n    while (uptimeMillis() &lt; timeout) {\n        n++;\n        ALOGI(\"Waiting for service '%s' on '%s'...\", String8(name).string(),\n            ProcessState::self()-&gt;getDriverName().c_str());\n        usleep(1000*sleepTime);\n\n        sp&lt;IBinder&gt; svc = checkService(name);\n        if (svc != nullptr) return svc;\n    }\n    ALOGW(\"Service %s didn't start. Returning NULL\", String8(name).string());\n    return nullptr;\n}\n</code></pre> <p>getService()\u7684\u6838\u5fc3\u5c31\u662f\u8c03\u7528checkService()\u6765\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u7ee7\u7eed\u7b49\u5f85\u67e5\u627e\u3002\u6ce8\u610f\uff1avendor\u5206\u533a\u7684\u670d\u52a1\u7b49\u5f85\u65f6\u95f4\u4e3a100ms\uff0csystem\u5206\u533a\u7684\u4e3a1000ms.</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#bpservicemanagercheckservice","title":"BpServiceManager.checkService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/IServiceManager.cpp\n\nsp&lt;IBinder&gt; ServiceManagerShim::checkService(const String16&amp; name) const\n{\n    sp&lt;IBinder&gt; ret;\n    if (!mTheRealServiceManager-&gt;checkService(String8(name).c_str(), &amp;ret).isOk()) {\n        return nullptr;\n    }\n    return ret;\n}\n</code></pre> <p>checkService()\u548c\u524d\u9762\u7684addService()\u7c7b\u4f3c\uff0c\u6700\u7ec8\u8c03\u5230ServiceManager.cpp\u91cc\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#servicemanagercheckservice","title":"ServiceManager.checkService()","text":"<pre><code>ttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.h\n\n//\u5b9a\u4e49Service\u7ed3\u6784\u4f53\nstruct Service {\n    sp&lt;IBinder&gt; binder; // not null\n    bool allowIsolated;\n    int32_t dumpPriority;\n    bool hasClients = false; // notifications sent on true -&gt; false.\n    bool guaranteeClient = false; // forces the client check to true\n    pid_t debugPid = 0; // the process in which this service runs\n\n    // the number of clients of the service, including servicemanager itself\n    ssize_t getNodeStrongRefCount();\n};\n\nusing ServiceMap = std::map&lt;std::string, Service&gt;;\n\n//\u7528\u4e8e\u4fdd\u5b58\u6dfb\u52a0\u8fdb\u6765\u7684Services\nServiceMap mNameToService;\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.cpp\n\nStatus ServiceManager::checkService(const std::string&amp; name, sp&lt;IBinder&gt;* outBinder) {\n    *outBinder = tryGetService(name, false);\n    // returns ok regardless of result for legacy reasons\n    return Status::ok();\n}\n\nsp&lt;IBinder&gt; ServiceManager::tryGetService(const std::string&amp; name, bool startIfNotFound) {\n    auto ctx = mAccess-&gt;getCallingContext();\n\n    sp&lt;IBinder&gt; out;\n    Service* service = nullptr;\n    //\u67e5\u627emNameToServices\u662f\u5426\u5b58\u5728\u540d\u5b57\u4e3aname\u7684Service\n    if (auto it = mNameToService.find(name); it != mNameToService.end()) {\n        service = &amp;(it-&gt;second);\n\n        if (!service-&gt;allowIsolated) {\n            uid_t appid = multiuser_get_app_id(ctx.uid);\n            bool isIsolated = appid &gt;= AID_ISOLATED_START &amp;&amp; appid &lt;= AID_ISOLATED_END;\n\n            if (isIsolated) {\n                return nullptr;\n            }\n        }\n        out = service-&gt;binder;\n    }\n\n    if (!mAccess-&gt;canFind(ctx, name)) {\n        return nullptr;\n    }\n\n    if (!out &amp;&amp; startIfNotFound) {\n        tryStartService(name);\n    }\n\n    if (out) {\n        // Setting this guarantee each time we hand out a binder ensures that the client-checking\n        // loop knows about the event even if the client immediately drops the service\n        service-&gt;guaranteeClient = true;\n    }\n\n    return out;\n}\n</code></pre> <p>\u5230\u6b64\u6211\u4eec\u5c31\u62ff\u5230\u670d\u52a1\uff0c\u62ff\u5230\u670d\u52a1\u540e\u53ef\u4ee5\u8c03\u7528linkToDeath()\u51fd\u6570\u76d1\u542c\u670d\u52a1\u8fdb\u7a0b\u7684\u72b6\u6001\uff0c\u524d\u9762\u6211\u4eec\u6709\u804a\u5230\u8fc7\u5982\u4f55\u5904\u7f5alinkToDeath\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u5c55\u5f00\u63cf\u8ff0\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-native/#_7","title":"\u603b\u7ed3","text":"<p>\u4e0d\u8fc7\u662f\u670d\u52a1\u7684\u6ce8\u518c\u8fd8\u662f\u83b7\u53d6\uff0c\u90fd\u662f\u901a\u8fc7ServiceManager\u4ea4\u4e92\u3002\u8bf4\u5f97\u7b80\u5355\u4e00\u70b9\u5176\u5b9e\u5c31\u662f\uff1a</p> <ul> <li>\u901a\u8fc7\u8c03\u7528defaultServiceManager()\u83b7\u53d6ServiceManager\u7684\u4ee3\u7406\u5bf9\u8c61BpServiceManager</li> <li>\u8c03\u7528BpServiceManager.addService()\u83b7\u53d6BpServiceManager.getService()</li> </ul> <p>\u5f53\u7136\u5728\u5b9e\u9645coding\u8fc7\u7a0b\u4e2d\u6ca1\u8fd9\u4e48\u7b80\u5355\uff0c\u5728\u540e\u7eed\u5f97\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u5199\u4e00\u4e2anative\u670d\u52a1demo\uff0c\u8fd9\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u96be\u53d1\u73b0\u5176\u5b9e\u51fa\u6765\u521a\u624d\u8bf4\u5f97\uff0c\u5176\u5b9e\u8fd8\u9700\u8981\u6dfb\u52a0seliunx\u3001\u7f16\u8bd1\u6587\u4ef6\u3001\u542f\u52a8\u811a\u672c\u7b49\u7b49\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/","title":"Binder\u673a\u523604-Framework-Java","text":"","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_1","title":"\u524d\u8a00","text":"<p>\u5728 Binder\u673a\u523603-Framework-Native \u7ae0\u8282\u91cc\u6211\u4eec\u5206\u6790\u4e86native(C/C++)\u5c42\u7684binder\u67b6\u6784\uff0cAndroid\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528Java\u8bed\u8a00\u5f00\u53d1\uff0cBinder\u6846\u67b6\u81ea\u7136\u4e5f\u5c11\u4e0d\u4e86\u5728Java\u5c42\u63d0\u4f9b\u63a5\u53e3\u3002\u6240\u4ee5Binder\u5728framework\u5c42\uff0c\u91c7\u7528JNI\u6280\u672f\u6765\u8c03\u7528native(C/C++)\u5c42\u7684binder\u67b6\u6784\uff0c\u6700\u7ec8\u628a\u670d\u52a1\u6ce8\u518c\u5230Native\u5c42\u7684ServiceManager\u4e2d\u3002  </p> <p>\u5e94\u7528\u5c42\u7684\u8fdb\u7a0b\u901a\u8fc7Framework\u7684\u63a5\u53e3\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u7ecf\u8fc7JNI\u6280\u672f\u8fdb\u5165Native C\\C++\uff0c\u6700\u7ec8\u5728Native\u5c42\u7684ServiceManager\u4e2d\u5f97\u5230\u670d\u52a1handle\uff0c\u6700\u7ec8\u8f6c\u6210\u76f8\u5e94\u7684\u670d\u52a1\u5bf9\u8c61\u3002</p> <ul> <li> <p>Binder Framework JNI\uff1ahttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/</p> </li> <li> <p>android_util_Binder.h</p> </li> <li>android_util_Binder.cpp</li> <li>android_os_Parcel.h</li> <li>android_os_Parcel.cpp</li> <li>android_os_HwBinder.h</li> <li>android_os_HwBinder.cpp</li> <li>android_os_HwParcel.h</li> <li> <p>android_os_HwParcel.cpp</p> </li> <li> <p>Binder Framework JAVA\uff1ahttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/</p> </li> <li> <p>Binder.java</p> </li> <li>IBinder.java</li> <li>IInterface.java</li> <li>Parcel.java</li> <li>HwBinder.java</li> <li>IHwBinder.java</li> <li>IHwInterface.java</li> <li>HwParcel.java</li> <li>IServiceManager.java</li> <li>ServiceManager.java</li> <li> <p>ServiceManagerNative.java(\u5185\u542bServiceManagerProxy\u7c7b)</p> </li> <li> <p>BinderInternal.java(http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/com/android/internal/os/)</p> </li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_2","title":"\u6846\u67b6","text":"<p>\u4e0b\u56fe\u63cf\u8ff0\u4e86Binder Framework Java\u5c42\u5230C++\u5c42\u7684\u8854\u63a5\u5173\u7cfb\u3002</p> <p></p> <p>\u8fd9\u91cc\u5bf9\u56fe\u4e2dJava\u5c42\u548cJNI\u5c42\u7684\u51e0\u4e2a\u7c7b\u505a\u4e00\u4e0b\u8bf4\u660e\uff1a</p> <ul> <li>IInterface(interface) \uff1a\u4f9bJava\u5c42Binder\u670d\u52a1\u63a5\u53e3\u7ee7\u627f\u7684\u63a5\u53e3</li> <li>IBinder(interface)\uff1aJava\u5c42IBinder\u7c7b\uff0c\u63d0\u4f9b\u4e86transaction\u65b9\u6cd5\u6765\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1</li> <li>Binder(class)\uff1a\u5b9e\u73b0\u4e86IBinder\u63a5\u53e3\uff0c\u5c01\u88c5\u4e86JNI\u7684\u5b9e\u73b0\u3002Java\u5c42Binder\u670d\u52a1\u7684\u57fa\u7c7b</li> <li>BInderProxy(class)\uff1a\u5b9e\u73b0\u4e86IBinder\u63a5\u53e3\uff0c\u5c01\u88c5\u4e86JNI\u7684\u5b9e\u73b0\u3002\u63d0\u4f9btransac()\u65b9\u6cd5\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1</li> <li>JavaBBinderHolder(class) \uff1a\u5185\u90e8\u5b58\u50a8\u4e86JavaBBinder</li> <li>JavaBBinder(class)\uff1a\u5c06C++\u7aef\u7684onTransact\u8c03\u7528\u4f20\u9012\u5230Java\u7aef</li> <li>Parcel(class)\uff1aJava\u5c42\u7684\u6570\u636e\u5305\u88c5\u5668\u3002</li> </ul> <p>\u8fd9\u91cc\u7684IInterface\uff0cIBinder\u548cC++\u5c42\u7684\u4e24\u4e2a\u7c7b\u662f\u540c\u540d\u7684\u3002\u8fd9\u4e2a\u540c\u540d\u5e76\u4e0d\u662f\u5de7\u5408\uff1a\u5b83\u4eec\u4e0d\u4ec5\u4ec5\u540c\u540d\uff0c\u5b83\u4eec\u6240\u8d77\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u5176\u4e2d\u5305\u542b\u7684\u63a5\u53e3\u90fd\u662f\u51e0\u4e4e\u4e00\u6837\u7684\uff0c\u533a\u522b\u4ec5\u4ec5\u5728\u4e8e\u4e00\u4e2a\u662fC++\u5c42\uff0c\u4e00\u4e2a\u662fJava\u5c42\u800c\u5df2\u3002</p> <p>\u9664\u4e86IInterface\uff0cIBinder\u4e4b\u5916\uff0c\u8fd9\u91ccBinder\u4e0eBinderProxy\u7c7b\u4e5f\u662f\u4e0eC++\u7684\u7c7b\u5bf9\u5e94\u7684\uff0c\u4e0b\u9762\u5217\u51fa\u4e86Java\u5c42\u548cC++\u5c42\u7c7b\u7684\u5bf9\u5e94\u5173\u7cfb\uff1a</p> C++\u5c42 Java\u5c42 IInterface IInterface IBinder IBinder BBinder BBinder BpProxy BpProxy Parcel Parcel","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#jni","title":"JNI","text":"<p>JNI\u5168\u79f0\u662fJava Native Interface\uff0c\u8fd9\u4e2a\u662f\u7531Java\u865a\u62df\u673a\u63d0\u4f9b\u7684\u673a\u5236\u3002\u8fd9\u4e2a\u673a\u5236\u4f7f\u5f97natvie\u4ee3\u7801\u53ef\u4ee5\u548cJava\u4ee3\u7801\u76f8\u4e92\u8c03\u7528\u3002\u7b80\u5355\u7684\u6765\u8bf4\u5c31\u662f\uff1a\u6211\u4eec\u53ef\u4ee5\u5728C/C++\u7aef\u8c03\u7528Java\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u5728Java\u7aef\u8c03\u7528C/C++\u4ee3\u7801\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5728Android\u4e2d\u5f88\u591a\u7684\u670d\u52a1\u6216\u8005\u673a\u5236\u90fd\u662f\u5728C/C++\u5c42\u5b9e\u73b0\u7684\uff0c\u60f3\u8981\u5c06\u8fd9\u4e9b\u5b9e\u73b0\u590d\u7528\u5230Java\u5c42\u5c31\u5fc5\u987b\u901a\u8fc7JNI\u8fdb\u884c\u8854\u63a5\u3002AOSP\u4e2d\uff1a</p> <ul> <li>frameworks/base/core/jni/ \u76ee\u5f55\u4e0b\u7684\u6e90\u7801\u5c31\u662f\u4e13\u95e8\u7528\u6765\u5bf9\u63a5Framework\u5c42\u7684JNI\u5b9e\u73b0</li> <li>frameworks/base/core/java/ \u76ee\u5f55\u4e0b\u7684\u6e90\u7801\u5c31\u662fFramework\u5c42\u7684\u8c03\u7528JNI\u4ee3\u7801</li> </ul> <p>\u5176\u5b9e\u5927\u5bb6\u770b\u4e00\u4e0bBinder.java\u7684\u5b9e\u73b0\u5c31\u4f1a\u53d1\u73b0\uff0c\u8fd9\u91cc\u9762\u6709\u4e0d\u5c11\u7684\u65b9\u6cd5\u90fd\u662fnative\u5173\u952e\u5b57\u4fee\u9970\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u65b9\u6cd5\u5b9e\u73b0\u4f53\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5176\u5b9e\u90fd\u662f\u5728C++\u4e2d\u5b9e\u73b0\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#java","title":"Java","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/Binder.java\n\npackage android.os;\n\npublic class Binder implements IBinder {\n    private static native long getNativeFinalizer();\n    public static final native int getCallingPid();\n    public static final native int getCallingUid();\n    public static final native boolean isHandlingTransaction();\n    public static final native long clearCallingIdentity();\n    public static final native void restoreCallingIdentity(long token);\n    public static final native void setThreadStrictModePolicy(int policyMask);\n    public static final native int getThreadStrictModePolicy();\n    public static final native long setCallingWorkSourceUid(int workSource);\n    public static final native int getCallingWorkSourceUid();\n    public static final native long clearCallingWorkSource();\n    public static final native void restoreCallingWorkSource(long token);\n    public final native void markVintfStability();\n    public static final native void flushPendingCommands();\n    public static final native void blockUntilThreadAvailable();\n    public final native @Nullable IBinder getExtension();\n    public final native void setExtension(@Nullable IBinder extension);\n    private static native long getNativeBBinderHolder();\n    private static native long getFinalizer();\n}\n</code></pre> <p>\u65b9\u6cd5\u90fd\u662fnative\u5173\u952e\u5b57\u4fee\u9970\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u65b9\u6cd5\u5b9e\u73b0\u4f53\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#jninativemethod","title":"JNINativeMethod","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/android_util_Binder.cpp\n\nstatic const JNINativeMethod gBinderMethods[] = {\n     /* name, signature, funcPtr */\n    { \"getCallingPid\", \"()I\", (void*)android_os_Binder_getCallingPid },\n    { \"getCallingUid\", \"()I\", (void*)android_os_Binder_getCallingUid },\n    { \"isHandlingTransaction\", \"()Z\", (void*)android_os_Binder_isHandlingTransaction },\n    { \"clearCallingIdentity\", \"()J\", (void*)android_os_Binder_clearCallingIdentity },\n    { \"restoreCallingIdentity\", \"(J)V\", (void*)android_os_Binder_restoreCallingIdentity },\n    { \"setThreadStrictModePolicy\", \"(I)V\", (void*)android_os_Binder_setThreadStrictModePolicy },\n    { \"getThreadStrictModePolicy\", \"()I\", (void*)android_os_Binder_getThreadStrictModePolicy },\n    { \"setCallingWorkSourceUid\", \"(I)J\", (void*)android_os_Binder_setCallingWorkSourceUid },\n    { \"getCallingWorkSourceUid\", \"()I\", (void*)android_os_Binder_getCallingWorkSourceUid },\n    { \"clearCallingWorkSource\", \"()J\", (void*)android_os_Binder_clearCallingWorkSource },\n    { \"restoreCallingWorkSource\", \"(J)V\", (void*)android_os_Binder_restoreCallingWorkSource },\n    { \"markVintfStability\", \"()V\", (void*)android_os_Binder_markVintfStability},\n    { \"flushPendingCommands\", \"()V\", (void*)android_os_Binder_flushPendingCommands },\n    { \"getNativeBBinderHolder\", \"()J\", (void*)android_os_Binder_getNativeBBinderHolder },\n    { \"getNativeFinalizer\", \"()J\", (void*)android_os_Binder_getNativeFinalizer },\n    { \"blockUntilThreadAvailable\", \"()V\", (void*)android_os_Binder_blockUntilThreadAvailable },\n    { \"getExtension\", \"()Landroid/os/IBinder;\", (void*)android_os_Binder_getExtension },\n    { \"setExtension\", \"(Landroid/os/IBinder;)V\", (void*)android_os_Binder_setExtension },\n};\n\nconst char* const kBinderPathName = \"android/os/Binder\";\n</code></pre> <p>\u5b9a\u4e49\u4e86\u4e00\u4e2aJNINativeMethod\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u7684\u540d\u5b57\u662fgBinderMethods\uff0c\u91cc\u9762\u5b58\u50a8\u7684\u662fnative\u65b9\u6cd5\u4e8eJNI\u5c42\u51fd\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u53ea\u5b9a\u4e49\u662f\u6ca1\u6709\u7528\u7684\uff0c\u8fd8\u9700\u8981\u6ce8\u518c\u5b83\uff0c\u6ce8\u518c\u7684\u51fd\u6570\u4e3a\uff1aint_register_android_os_Binder(JNIEnv* env)\u3002</p> <p>\u5173\u4e8eJNI\u66f4\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u6211\u4eec\u4ee5\u540e\u4e5f\u4f1a\u6709\u4e13\u95e8\u7684\u7ae0\u8282\u8ba8\u8bba\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u6df1\u5165\u5206\u6790\u3002\u6211\u4eec\u8fd9\u91cc\u53ea\u628aAndroid\u7cfb\u7edf\u8d77\u6765\u540e\u6ce8\u518cJNI\u7684\u6d41\u7a0b\u7b80\u5355\u68b3\u7406\u3002</p> <pre><code>sequenceDiagram\nZygote -&gt;&gt; app_main:main()\napp_main -&gt;&gt; AndroidRuntime:start()\nAndroidRuntime -&gt;&gt; AndroidRuntime:startVm()\nAndroidRuntime -&gt;&gt;+ AndroidRuntime:startReg()\nAndroidRuntime -&gt;&gt; AndroidRuntime:REG_JNI(register_android_os_Binder)\nAndroidRuntime -&gt;&gt; android_util_Binder:register_android_os_Binder()\nandroid_util_Binder -&gt;&gt; android_util_Binder:int_register_android_os_Binder()\nandroid_util_Binder -&gt;&gt; core_jni_helpers:RegisterMethodsOrDie()\ncore_jni_helpers --&gt;&gt; AndroidRuntime:registerNativeMethods()\nAndroidRuntime -&gt;&gt;- JNIHelp:jniRegisterNativeMethods()</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#cjava","title":"\uff08\u9644\uff09C\u8c03\u7528Java","text":"<p>\u4e0a\u9762\u6211\u4eec\u77e5\u9053\u4e86Java\u901a\u8fc7JNI\u8c03\u7528C\u4ee3\u7801\uff0c\u90a3\u4e48C\u4ee3\u7801\u5982\u4f55\u53cd\u8fc7\u6765\u8c03\u7528Java\u4ee3\u7801\u5462\uff1flibbinder\u4e2d\u7684**BBinder::onTransacts**\u662f\u5982\u4f55\u80fd\u80fd\u591f\u8c03\u7528\u5230Java\u4e2d\u7684**Binder::onTransact**\u7684\uff1f</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/android_util_Binder.cpp\n\nclass JavaBBinder : public BBinder\n{\npublic:\n    status_t onTransact(\n        uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags = 0) override\n    {\n        JNIEnv* env = javavm_to_jnienv(mVM);\n\n        IPCThreadState* thread_state = IPCThreadState::self();\n        const int32_t strict_policy_before = thread_state-&gt;getStrictModePolicy();\n        //\u8c03\u5230\u4e86android.os.Binder\u7c7b\u7684exectTransac\u65b9\u6cd5\n        jboolean res = env-&gt;CallBooleanMethod(mObject, gBinderOffsets.mExecTransact,\n            code, reinterpret_cast&lt;jlong&gt;(&amp;data), reinterpret_cast&lt;jlong&gt;(reply), flags);\n\n        ...\n\n        return res != JNI_FALSE ? NO_ERROR : UNKNOWN_TRANSACTION;\n    }\n};\n\n\nconst char* const kBinderPathName = \"android/os/Binder\";\n\nstatic int int_register_android_os_Binder(JNIEnv* env)\n{\n    jclass clazz = FindClassOrDie(env, kBinderPathName);\n\n    gBinderOffsets.mClass = MakeGlobalRefOrDie(env, clazz);\n    //gBinderOffsets.mExecTransact\u4e5f\u5c31\u662fandroid.os.Binder\u7c7b\u7684exectTransac\u65b9\u6cd5\n    gBinderOffsets.mExecTransact = GetMethodIDOrDie(env, clazz, \"execTransact\", \"(IJJI)Z\");\n    gBinderOffsets.mGetInterfaceDescriptor = GetMethodIDOrDie(env, clazz, \"getInterfaceDescriptor\",\n        \"()Ljava/lang/String;\");\n    gBinderOffsets.mObject = GetFieldIDOrDie(env, clazz, \"mObject\", \"J\");\n\n    return RegisterMethodsOrDie(\n        env, kBinderPathName,\n        gBinderMethods, NELEM(gBinderMethods));\n}\n</code></pre> <ul> <li>kBinderPathName\u4e3a\"android/os/Binder\"\uff0c\u4e5f\u5c31\u662fJava\u7684\u7c7b\u662f\uff1aandroid.os.Binder\uff08http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/Binder.java\uff09</li> <li> <p>GetMethodIDOrDie(env, clazz, \"execTransact\", \"(IJJI)Z\")</p> </li> <li> <p>\u51fd\u6570\u662f\uff1aandroid.os.Binder.execTransact()</p> </li> <li>(IJJI)Z\u8868\u793a\uff1abool execTransact(int x1, long x2, long x3, int x4)</li> </ul> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/Binder.java\n\n// Entry point from android_util_Binder.cpp's onTransact\n@UnsupportedAppUsage\n    private boolean execTransact(int code, long dataObj, long replyObj,\n                                 int flags) {\n    // At that point, the parcel request headers haven't been parsed so we do not know what\n    // WorkSource the caller has set. Use calling uid as the default.\n    final int callingUid = Binder.getCallingUid();\n    final long origWorkSource = ThreadLocalWorkSource.setUid(callingUid);\n    try {\n        return execTransactInternal(code, dataObj, replyObj, flags, callingUid);\n    } finally {\n        ThreadLocalWorkSource.restore(origWorkSource);\n    }\n}\n</code></pre> <p>\u770b\u5230\u6ce8\u91ca\u4e5f\u80fd\u77e5\u9053\u662fC\u4ee3\u7801\u8c03\u7528\u5230\u4e86\u8fd9\u91cc\uff0c\u7ec6\u8282\u5c31\u4e0d\u8ba8\u8bba\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_3","title":"\u6ce8\u518c\u670d\u52a1","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/java/com/android/server/SystemServer.java\n\nconnectivity = new ConnectivityService(\n        context, networkManagement, networkStats, networkPolicy);\nServiceManager.addService(Context.CONNECTIVITY_SERVICE, connectivity,\n        /* allowIsolated= */ false,\n        DUMP_FLAG_PRIORITY_HIGH | DUMP_FLAG_PRIORITY_NORMAL);\n</code></pre> <p>SystemServer\u8fdb\u7a0b\u6ce8\u518c\u5f88\u591a\u670d\u52a1\uff0c\u5176\u6ce8\u518c\u670d\u52a1\u5230\u65b9\u6cd5\u5f88\u7b80\u5355\u901a\u8fc7\u8c03\u7528\u7684\u662fServiceManager.java\u7684addService()\uff0c\u90a3\u6211\u4eec\u5c31\u4eceaddService()\u5f00\u59cb\u5206\u6790\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanageraddservice","title":"ServiceManager.addService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManager.java\n\npublic static void addService(String name, IBinder service, boolean allowIsolated,\n        int dumpPriority) {\n    try {\n        getIServiceManager().addService(name, service, allowIsolated, dumpPriority);\n    } catch (RemoteException e) {\n        Log.e(TAG, \"error in addService\", e);\n    }\n}\n</code></pre> <p>\u83b7\u53d6ServiceManagerProxy\u5bf9\u8c61\uff0c\u6267\u884caddService\u64cd\u4f5c\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagergetiservicemanager","title":"ServiceManager.getIServiceManager()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManager.java\n\nprivate static IServiceManager getIServiceManager() {\n    if (sServiceManager != null) {\n        return sServiceManager;\n    }\n\n    // Find the service manager\n    sServiceManager = ServiceManagerNative\n            .asInterface(Binder.allowBlocking(BinderInternal.getContextObject()));\n    return sServiceManager;\n}\n</code></pre> <p>\u91c7\u7528\u5355\u4f8b\u6a21\u5f0f\u6765\u83b7\u53d6ServiceManagerProxy\u5bf9\u8c61\u3002\u8fd9\u91cc\u6709\u4e09\u65b9\u6cd5\uff0c\u5148\u4eceBinderInternal.getContextObject()\u51fd\u6570\u5f00\u59cb\u5206\u6790\uff0c\u5176\u6b21\u662fBinder.allowBlocking()\u51fd\u6570\uff0c\u6700\u540e\u662fServiceManagerNative.asInterface()\u51fd\u6570\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#binderinternalgetcontextobject","title":"BinderInternal.getContextObject()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/com/android/internal/os/BinderInternal.java\n\npublic static final native IBinder getContextObject();\n</code></pre> <p>BinderInternal.java\u4e2d\u6709\u4e00\u4e2anative\u65b9\u6cd5getContextObject()\uff0c\u901a\u8fc7JNI\u8c03\u7528\u6267\u884cC\u7684\u65b9\u6cd5\u3002\u5728JNI\u7684gBinderInternalMethods\u6570\u7ec4\u4e2d\u627e\u5230\u4e86getContextObject\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5373\u6700\u7ec8\u8c03\u7528android_os_BinderInternal_getContextObject()\u65b9\u6cd5\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#android_os_binderinternal_getcontextobject","title":"android_os_BinderInternal_getContextObject()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/android_util_Binder.cpp\n\nstatic jobject android_os_BinderInternal_getContextObject(JNIEnv* env, jobject clazz)\n{\n    sp&lt;IBinder&gt; b = ProcessState::self()-&gt;getContextObject(NULL);\n    return javaObjectForIBinder(env, b);\n}\n</code></pre> <p>\u770b\u5230ProcessState::self()-&gt;getContextObject(NULL)\u8fd9\u884c\u4ee3\u7801\uff0c\u4e0d\u96be\u53d1\u73b0\u5728 Binder\u673a\u523603-Framework-Native \u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u6700\u7ec8\u7b49\u4ef7\u4e8e new BpBinder(0)\uff0c\u8fd9\u91cc\u5c31\u4e0d\u91cd\u590d\u5c55\u5f00\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#javaobjectforibinder","title":"javaObjectForIBinder()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/android_util_Binder.cpp\n\njobject javaObjectForIBinder(JNIEnv* env, const sp&lt;IBinder&gt;&amp; val)\n{\n    // N.B. This function is called from a @FastNative JNI method, so don't take locks around\n    // calls to Java code or block the calling thread for a long time for any reason.\n\n    if (val == NULL) return NULL;\n\n    if (val-&gt;checkSubclass(&amp;gBinderOffsets)) {\n        //\u5982\u679c\u53c2\u6570\u662fJavaBBinder\uff0c\u8fd4\u56de\u7528\u4e8e\u521b\u5efa\u5b83\u7684Java\u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2aBinderProxy\u7684\u5bf9\u8c61\u3002\n        jobject object = static_cast&lt;JavaBBinder*&gt;(val.get())-&gt;object();\n        return object;\n    }\n\n    //\u7533\u8bf7\u4e00\u4e2aBinderProxyNativeData\u7684\u5185\u5b58\n    BinderProxyNativeData* nativeData = new BinderProxyNativeData();\n    nativeData-&gt;mOrgue = new DeathRecipientList;\n    nativeData-&gt;mObject = val;\n\n    //\u521b\u5efaBinderProxy\u5bf9\u8c61\uff0c\u8bbe\u7f6eBinderProxy\u7684\u76f8\u5173\u53c2\u6570\uff0c\u80fd\u591f\u4e0eJAVA\u5c42\u7684BinderProx\u53c2\u4e0e\u5de5\u4f5c\n    jobject object = env-&gt;CallStaticObjectMethod(gBinderProxyOffsets.mClass,\n            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.get());\n    if (env-&gt;ExceptionCheck()) {\n        // In the exception case, getInstance still took ownership of nativeData.\n        return NULL;\n    }\n    BinderProxyNativeData* actualNativeData = getBPNativeData(env, object);\n    if (actualNativeData == nativeData) {\n        // Created a new Proxy\n        uint32_t numProxies = gNumProxies.fetch_add(1, std::memory_order_relaxed);\n        uint32_t numLastWarned = gProxiesWarned.load(std::memory_order_relaxed);\n        if (numProxies &gt;= numLastWarned + PROXY_WARN_INTERVAL) {\n            // Multiple threads can get here, make sure only one of them gets to\n            // update the warn counter.\n            if (gProxiesWarned.compare_exchange_strong(numLastWarned,\n                        numLastWarned + PROXY_WARN_INTERVAL, std::memory_order_relaxed)) {\n                ALOGW(\"Unexpectedly many live BinderProxies: %d\\n\", numProxies);\n            }\n        }\n    } else {\n        delete nativeData;\n    }\n\n    return object;\n}\n</code></pre> <p>javaObjectForIBinder()\u4e2d\uff0c\u7533\u8bf7\u4e00\u4e2aBinderProxyNativeData\u7684\u5185\u5b58\uff0c\u4f20\u5165\u7684BpBinder\u7684\u5bf9\u8c61\u5730\u5740\u4fdd\u5b58\u5230BinderProxyNativeData.mObject\u6210\u5458\u53d8\u91cf\u4e2d\uff0c\u901a\u8fc7\u865a\u62df\u673a\u7684\u8f6c\u6362\uff0cBinderProxyNativeData\u5728JAVA\u7a7a\u95f4\u4f1a\u88ab\u8f6c\u6362\u6210 BinderProxy\u5bf9\u8c61\u3002</p> <p>\u6700\u7ec8\uff0cBinderInternal.getContextObject()\u7b49\u4ef7\u4e8e new BinderProxy()\uff0c\u6240\u4ee5getIServiceManager\u7b49\u4ef7\u4e8enew ServiceManagerProxy(new BinderProxy())\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#binderallowblocking","title":"Binder.allowBlocking()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/Binder.java\n\npublic static IBinder allowBlocking(IBinder binder) {\n    try {\n        if (binder instanceof BinderProxy) {\n            //\u5982\u679cbinder\u662f\u4ee3\u7406\u7c7b\uff0c\u5219\u8bbe\u7f6e\u975e\u963b\u585e\u5f0f\n            ((BinderProxy) binder).mWarnOnBlocking = false;\n        } else if (binder != null &amp;&amp; binder.getInterfaceDescriptor() != null\n                &amp;&amp; binder.queryLocalInterface(binder.getInterfaceDescriptor()) == null) {\n            //\u5982\u679cbinder\u662f\u672c\u5730\u5bf9\u8c61\uff0cbinder\u63cf\u8ff0\u7b26\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u548c\u672c\u5730binder\u63cf\u8ff0\u7b26\u4e0d\u76f8\u540c\n            Log.w(TAG, \"Unable to allow blocking on interface \" + binder);\n        }\n    } catch (RemoteException ignored) {\n    }\n    return binder;\n}\n</code></pre> <ul> <li>\u5141\u8bb8\u5728\u7ed9\u5b9a\u63a5\u53e3\u4e0a\u963b\u585e\u8c03\u7528\uff0c\u91cd\u5199\u8bf7\u6c42\u7684{setWarnOnBlocking\uff08boolean\uff09}\u503c\u3002</li> <li>\u53ea\u6709\u5f53\u60a8\u5b8c\u5168\u786e\u5b9a\u8fdc\u7a0b\u63a5\u53e3\u662f\u4e00\u4e2a\u6c38\u8fdc\u65e0\u6cd5\u5347\u7ea7\u7684\u5185\u7f6e\u7cfb\u7edf\u7ec4\u4ef6\u65f6\uff0c\u624d\u5e94\u8be5\u5f88\u5c11\u8c03\u7528\u6b64\u547d\u4ee4\u3002\u5c24\u5176\u662f\uff0c\u51b3\u4e0d\u80fd\u5bf9\u5305\u6258\u7ba1\u7684\u3001\u53ef\u5347\u7ea7\u6216\u66ff\u6362\u7684\u63a5\u53e3\u8c03\u7528\u6b64\u547d\u4ee4\uff0c\u5426\u5219\uff0c\u5982\u679c\u8fdc\u7a0b\u63a5\u53e3\u63a5\u5165\uff0c\u5c06\u6709\u7cfb\u7edf\u4e0d\u7a33\u5b9a\u7684\u98ce\u9669\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagernativeasinterface","title":"ServiceManagerNative.asInterface()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManagerNative.java\n\npublic static IServiceManager asInterface(IBinder obj) {\n    if (obj == null) {\n        return null;\n    }\n\n    // ServiceManager is never local\n    return new ServiceManagerProxy(obj);\n}\n\nclass ServiceManagerProxy implements IServiceManager {\npublic ServiceManagerProxy(IBinder remote) {\n        mRemote = remote;\n        mServiceManager = IServiceManager.Stub.asInterface(remote);\n    }\n\n    ...\n\n    private IBinder mRemote;\n\n    private IServiceManager mServiceManager;\n}\n</code></pre> <p>ServiceManagerProxy\u662fServiceManagerNative\u7c7b\u7684\u5185\u90e8\u7c7b, mRemote\u4e3aBinderProxy\u5bf9\u8c61\uff0c\u8be5BinderProxy\u5bf9\u8c61\u5bf9\u5e94\u4e8eBpBinder(0)\uff0c\u5176\u4f5c\u4e3abinder\u4ee3\u7406\u7aef\uff0c\u6307\u5411native\u7684\u5c42\u7684Service Manager\u3002</p> <p>ServiceManager.getIServiceManager()\u6700\u7ec8\u7b49\u4ef7\u4e8enew ServiceManagerProxy(new BinderProxy())\u3002\u6240\u4ee5getIServiceManager().addService()\u4e5f\u5c31\u662fServiceManagerNative.addService();</p> <p>Framework\u5c42\u7684ServiceManager\u7684\u8c03\u7528\u5b9e\u9645\u7684\u5de5\u4f5c\u786e\u5b9e\u4ea4\u7ed9\u4e86ServiceManagerProxy\u7684\u6210\u5458\u53d8\u91cfBinderProxy\uff1b\u800cBinderProxy\u901a\u8fc7JNI\u7684\u65b9\u5f0f\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528BpBinder\u5bf9\u8c61\uff1b\u53ef\u89c1\u4e0a\u5c42binder\u7ed3\u6784\u7684\u6838\u5fc3\u529f\u80fd\u4f9d\u8d56native\u67b6\u6784\u7684\u670d\u52a1\u6765\u5b8c\u6210\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagerproxyaddservice","title":"ServiceManagerProxy.addService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManagerNative.java\n\nclass ServiceManagerProxy implements IServiceManager {\npublic ServiceManagerProxy(IBinder remote) {\n        mRemote = remote;\n        mServiceManager = IServiceManager.Stub.asInterface(remote);\n    }\n\n    ...\n\n    public void addService(String name, IBinder service, boolean allowIsolated, int dumpPriority)\n            throws RemoteException {\n        mServiceManager.addService(name, service, allowIsolated, dumpPriority);\n    }\n\n    ...\n\n    private IServiceManager mServiceManager;\n}\n</code></pre> <p>IServiceManager\u5176\u5b9e\u5c31\u662fIServiceManager.aidl\uff0c\u6700\u7ec8\u8c03\u5230ServiceManager.ddService()\u65b9\u6cd5\u91cc\u3002 Binder\u673a\u523603-Framework-Native \u6709\u5206\u6790ServiceManager.ddService()\u3002</p> <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.cpp\n\nStatus ServiceManager::addService(const std::string&amp; name, const sp&lt;IBinder&gt;&amp; binder, bool allowIsolated, int32_t dumpPriority) {\n    ...\n\n    //\u6dfb\u52a0 Service \u5230 mNameToService \u4e2d\uff0c\u5b8c\u6210 Binder Service \u6ce8\u518c\u8fc7\u7a0b\n    mNameToService[name] = Service {\n        .binder = binder,\n        .allowIsolated = allowIsolated,\n        .dumpPriority = dumpPriority,\n        .debugPid = ctx.debugPid,\n    };\n\n    auto it = mNameToRegistrationCallback.find(name);\n    if (it != mNameToRegistrationCallback.end()) {\n        for (const sp&lt;IServiceCallback&gt;&amp; cb : it-&gt;second) {\n            mNameToService[name].guaranteeClient = true;\n            // permission checked in registerForNotifications\n            cb-&gt;onRegistration(name, binder);\n        }\n    }\n\n    return Status::ok();\n}\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_4","title":"\u5c0f\u7ed3","text":"<p>Framework\u5c42\u7684ServiceManager\u7684\u8c03\u7528\u5b9e\u9645\u7684\u5de5\u4f5c\u786e\u5b9e\u4ea4\u7ed9ServiceManagerProxy\u7684\u6210\u5458\u53d8\u91cfBinderProxy\uff1b\u800cBinderProxy\u901a\u8fc7jni\u65b9\u5f0f\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528BpBinder\u5bf9\u8c61\uff1b\u53ef\u89c1\u4e0a\u5c42binder\u67b6\u6784\u7684\u6838\u5fc3\u529f\u80fd\u4f9d\u8d56native\u67b6\u6784\u7684\u670d\u52a1\u6765\u5b8c\u6210\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_5","title":"\u83b7\u53d6\u670d\u52a1","text":"","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagergetservice","title":"ServiceManager.getService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManager.java\n\npublic static IBinder getService(String name) {\n    try {\n        //\u5148\u4ece\u7f13\u5b58\u4e2d\u67e5\u770b\n        IBinder service = sCache.get(name);\n        if (service != null) {\n            return service;\n        } else {\n            //\u4eceNative\u5c42\u670d\u52a1\u5217\u8868\u4e2d\u53d6\u670d\u52a1\u5bf9\u8c61\n            return Binder.allowBlocking(rawGetService(name));\n        }\n    } catch (RemoteException e) {\n        Log.e(TAG, \"error in getService\", e);\n    }\n    return null;\n}\n\nprivate static IBinder rawGetService(String name) throws RemoteException {\n    ...\n    //\u5373\u4e3aServiceManagerProxy.getService()\n    final IBinder binder = getIServiceManager().getService(name);\n    ...\n    return binder;\n}\n</code></pre> <ul> <li>\u5148\u4ece\u7f13\u5b58\u4e2d\u67e5\u770b</li> <li>\u7f13\u5b58\u4e2d\u6ca1\u6709\u5219\u4eceNative\u5c42\u670d\u52a1\u5217\u8868\u4e2d\u53d6\u670d\u52a1\u5bf9\u8c61\u5373\u4e3aServiceManagerProxy.getService()</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagerproxygetservice","title":"ServiceManagerProxy.getService()","text":"<pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/ServiceManagerNative.java\n\nclass ServiceManagerProxy implements IServiceManager {\npublic ServiceManagerProxy(IBinder remote) {\n        mRemote = remote;\n        mServiceManager = IServiceManager.Stub.asInterface(remote);\n    }\n\n    ...\n\n    public IBinder getService(String name) throws RemoteException {\n        // Same as checkService (old versions of servicemanager had both methods).\n        return mServiceManager.checkService(name);\n    }\n\n    ...\n\n    private IServiceManager mServiceManager;\n}\n</code></pre> <p>IServiceManager\u5176\u5b9e\u5c31\u662fIServiceManager.aidl\uff0c\u6700\u7ec8\u8c03\u5230ServiceManager.checkService()\u65b9\u6cd5\u91cc\u3002  Binder\u673a\u523603-Framework-Native \u6709\u5206\u6790ServiceManager.checkService()\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#servicemanagercheckservice","title":"ServiceManager.checkService()","text":"<pre><code>ttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.h\n\n//\u5b9a\u4e49Service\u7ed3\u6784\u4f53\nstruct Service {\n    sp&lt;IBinder&gt; binder; // not null\n    bool allowIsolated;\n    int32_t dumpPriority;\n    bool hasClients = false; // notifications sent on true -&gt; false.\n    bool guaranteeClient = false; // forces the client check to true\n    pid_t debugPid = 0; // the process in which this service runs\n\n    // the number of clients of the service, including servicemanager itself\n    ssize_t getNodeStrongRefCount();\n};\n\nusing ServiceMap = std::map&lt;std::string, Service&gt;;\n\n//\u7528\u4e8e\u4fdd\u5b58\u6dfb\u52a0\u8fdb\u6765\u7684Services\nServiceMap mNameToService;\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/ServiceManager.cpp\n\nStatus ServiceManager::checkService(const std::string&amp; name, sp&lt;IBinder&gt;* outBinder) {\n    *outBinder = tryGetService(name, false);\n    // returns ok regardless of result for legacy reasons\n    return Status::ok();\n}\n\nsp&lt;IBinder&gt; ServiceManager::tryGetService(const std::string&amp; name, bool startIfNotFound) {\n    auto ctx = mAccess-&gt;getCallingContext();\n\n    sp&lt;IBinder&gt; out;\n    Service* service = nullptr;\n    //\u67e5\u627emNameToServices\u662f\u5426\u5b58\u5728\u540d\u5b57\u4e3aname\u7684Service\n    if (auto it = mNameToService.find(name); it != mNameToService.end()) {\n        service = &amp;(it-&gt;second);\n\n        if (!service-&gt;allowIsolated) {\n            uid_t appid = multiuser_get_app_id(ctx.uid);\n            bool isIsolated = appid &gt;= AID_ISOLATED_START &amp;&amp; appid &lt;= AID_ISOLATED_END;\n\n            if (isIsolated) {\n                return nullptr;\n            }\n        }\n        out = service-&gt;binder;\n    }\n\n    if (!mAccess-&gt;canFind(ctx, name)) {\n        return nullptr;\n    }\n\n    if (!out &amp;&amp; startIfNotFound) {\n        tryStartService(name);\n    }\n\n    if (out) {\n        // Setting this guarantee each time we hand out a binder ensures that the client-checking\n        // loop knows about the event even if the client immediately drops the service\n        service-&gt;guaranteeClient = true;\n    }\n\n    return out;\n}\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_6","title":"\u5c0f\u7ed3","text":"<p>\u548c\u6ce8\u518c\u670d\u52a1\u7c7b\u4f3c\uff0c\u90fd\u662f\u9700\u8981\u4f9d\u8d56Native\u5c42\u7684\u63a5\u53e3\u4e0eBinder\u9a71\u52a8\u901a\u4fe1\uff0c\u83b7\u53d6\u670d\u52a1\u4e3b\u8981\u662f\u4eceNative\u7684ServieManager\u53d6\u5230Binder\u5bf9\u8c61\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_7","title":"\u603b\u7ed3","text":"<p>Framework\u5c42\u83b7\u53d6\u670d\u52a1\u3001\u6ce8\u518c\u670d\u52a1\uff0c\u5176\u5b9e\u90fd\u662f\u7531JAVA\u5c42\u7684ServiceManager\u4ee3\u7406ServiecManagerProxy\uff0c\u901a\u8fc7Binder\u9a71\u52a8\uff0c\u8bbf\u95eeNative\u5c42\u7684ServiceManager\uff0c\u8fdb\u884c\u670d\u52a1\u6ce8\u518c\u548c\u83b7\u53d6\u52a8\u4f5c\u3002native\u5c42\u4e2d\uff0cbinder\u662fC/S\u67b6\u6784\uff0c\u5206\u4e3aBn\u7aef(Server)\u548cBp\u7aef(Client)\u3002\u5bf9\u4e8eJava\u5c42\u5728\u547d\u4ee4\u4e0e\u67b6\u6784\u4e0a\u975e\u5e38\u76f8\u8fd1\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u4e00\u5957IPC\u901a\u4fe1\u67b6\u6784\u3002</p> <p></p> <ul> <li>\u4e0a\u5c42framework\u5c42\u7684Binder\u903b\u8f91\u662f\u5efa\u7acb\u5728Native\u5c42\u67b6\u6784\u57fa\u7840\u4e0a\u7684\uff0c\u6838\u5fc3\u903b\u8f91\u90fd\u662f\u4ea4\u4e8eNative\u5c42\u6765\u5904\u7406</li> <li>framework\u5c42\u7684ServiceManager\u7c7b\u4e0eNative\u5c42\u7684\u529f\u80fd\u5e76\u4e0d\u5b8c\u5168\u5bf9\u5e94\uff0cframework\u5c42\u7684ServiceManager\u7684\u5b9e\u73b0\u5bf9\u6700\u7ec8\u662f\u901a\u8fc7BinderProxy\u4f20\u9012\u7ed9Native\u5c42\u6765\u5b8c\u6210\u7684\u3002</li> <li>ServiceManager\uff1a\u901a\u8fc7getIServiceManager\u65b9\u6cd5\u83b7\u53d6\u7684\u662fServiceManagerProxy\u5bf9\u8c61\u3002ServiceMnager\u7684addService()\uff0cgetService()\u5b9e\u9645\u5de5\u4f5c\u90fd\u4ea4\u7ed9ServiceManagerProxy\u7684\u76f8\u5e94\u65b9\u6cd5\u6765\u5904\u7406\u3002</li> <li>ServiceManagerProxy\uff1a\u5176\u6210\u5458\u53d8\u91cfmRemote\u6307\u5411BinderProxy\u5bf9\u8c61\uff0cServiceManagerProxy\u7684addService()\uff0cgetService()\u65b9\u6cd5\u6700\u7ec8\u662f\u4ea4\u7ed9mRemote\u53bb\u5b8c\u6210\u3002</li> <li>ServiceManagerNative\uff1a\u5176\u65b9\u6cd5asInterface()\u8fd4\u56de\u7684\u662fServiceManagerProxy\u5bf9\u8c61\uff0cServiceManager\u4fbf\u662f\u501f\u52a9ServiceManagerNative\u7c7b\u6765\u627e\u5230ServiceManagerProxy\u3002</li> <li>Binder\uff1a\u5176\u6210\u5458mObject\u548c\u65b9\u6cd5execTransact()\u7528\u4e8enative\u65b9\u6cd5</li> <li>BinderInternal\uff1a\u5185\u90e8\u6709\u4e00\u4e2aGcWatcher\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u548c\u8c03\u8bd5\u4e0eBinder\u76f8\u5173\u7684\u62e6\u51fb\u56de\u6536\u3002</li> <li>IBinder\uff1a\u63a5\u53e3\u4e2d\u5e38\u91cfFLAG_ONEWAY:\u5ba2\u6237\u7aef\u5229\u7528binder\u8ddf\u670d\u52a1\u7aef\u901a\u4fe1\u662f\u963b\u585e\u5f0f\u7684\uff0c\u4f46\u5982\u679c\u8bbe\u7f6e\u4e86FLAG_ONEWAY\uff0c\u8fd9\u6210\u4e3a\u975e\u963b\u585e\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5ba2\u6237\u7aef\u80fd\u7acb\u5373\u8fd4\u56de\uff0c\u670d\u52a1\u7aef\u91c7\u7528\u56de\u8c03\u65b9\u5f0f\u6765\u901a\u77e5\u5ba2\u6237\u7aef\u5b8c\u6210\u60c5\u51b5\u3002\u53e6\u5916IBinder\u63a5\u53e3\u6709\u4e00\u4e2a\u5185\u90e8\u63a5\u53e3DeathDecipent(\u6b7b\u4ea1\u901a\u544a)\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/framework-java/#_8","title":"\u53c2\u8003","text":"<p>Android Binder\u673a\u5236\u539f\u7406java\u5c42\u7cfb\u5217\u4e8c\uff08\u6709\u56fe\u6709\u4ee3\u7801\u5f88\u8be6\u7ec6\uff09</p> <p>\u56fe\u89e3Android - Binder \u548c Service</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/","title":"Binder\u673a\u523605-AIDL","text":"","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl","title":"AIDL\u7b80\u4ecb","text":"","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl_1","title":"\u4ec0\u4e48\u662fAIDL","text":"<p>AIDL : Android Interface Definition Language,\u5373Android\u63a5\u53e3\u5b9a\u4e49\u8bed\u8a00\u3002</p> <p>Android\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u4e4b\u95f4\u4e0d\u80fd\u5171\u4eab\u5185\u5b58\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u673a\u5236\u5728\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u6570\u636e\u901a\u4fe1\u3002\u4e3a\u4e86\u4f7f\u5176\u4ed6\u7684\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u672c\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u670d\u52a1\uff0cAndroid\u7cfb\u7edf\u91c7\u7528\u4e86\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08Remote Procedure Call\uff0cRPC\uff09\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002\u4e0e\u5f88\u591a\u5176\u4ed6\u7684\u57fa\u4e8eRPC\u7684\u89e3\u51b3\u65b9\u6848\u4e00\u6837\uff0cAndroid\u4f7f\u7528\u4e00\u79cd\u63a5\u53e3\u5b9a\u4e49\u8bed\u8a00\uff08Interface Definition Language\uff0cIDL\uff09\u6765\u516c\u5f00\u670d\u52a1\u7684\u63a5\u53e3\u3002\u6211\u4eec\u77e5\u90534\u4e2aAndroid\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\u4e2d\u76843\u4e2a\uff08Activity\u3001BroadcastReceiver\u548cContentProvider\uff09\u90fd\u53ef\u4ee5\u8fdb\u884c\u8de8\u8fdb\u7a0b\u8bbf\u95ee\uff0c\u53e6\u5916\u4e00\u4e2aAndroid\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6Service\u540c\u6837\u53ef\u4ee5\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5c06\u8fd9\u79cd\u53ef\u4ee5\u8de8\u8fdb\u7a0b\u8bbf\u95ee\u7684\u670d\u52a1\u79f0\u4e3aAIDL\uff08Android Interface Definition Language\uff09\u670d\u52a1\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl_2","title":"AIDL\u57fa\u672c\u8bed\u6cd5","text":"<p>AIDL\u4f7f\u7528\u7b80\u5355\u7684\u8bed\u6cd5\u6765\u58f0\u660e\u63a5\u53e3\uff0c\u63cf\u8ff0\u5176\u65b9\u6cd5\u4ee5\u53ca\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u8fd9\u4e9b\u53c2\u6570\u548c\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u751a\u81f3\u662f\u5176\u4ed6AIDL\u751f\u6210\u7684\u63a5\u53e3\u3002</p> <p>\u5176\u4e2d\u5bf9\u4e8eJava\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b (int, long, char, boolean\uff0cString\uff0cCharSequence)\u96c6\u5408\u63a5\u53e3\u7c7b\u578bList\u548cMap\uff0c\u4e0d\u9700\u8981import \u8bed\u53e5\u3002\u800c\u5982\u679c\u9700\u8981\u5728AIDL\u4e2d\u4f7f\u7528\u5176\u4ed6AIDL\u63a5\u53e3\u7c7b\u578b\uff0c\u9700\u8981import\uff0c\u5373\u4f7f\u662f\u5728\u76f8\u540c\u5305\u7ed3\u6784\u4e0b\u3002AIDL\u5141\u8bb8\u4f20\u9012\u5b9e\u73b0Parcelable\u63a5\u53e3\u7684\u7c7b\uff0c\u9700\u8981import\u3002</p> <p>\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u975e\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u4e0d\u662fString\u548cCharSequence\u7c7b\u578b\u7684\uff0c\u9700\u8981\u6709\u65b9\u5411\u6307\u793a\uff0c\u5305\u62ecin\u3001out\u548cinout\u3002 in\uff1aclient\u7aef\u5c06\u53c2\u6570\u8bbe\u5b9a\u597d\uff0c\u4f20\u7ed9server\uff0cserver\u7aef\u62f7\u8d1d\u3001\u4f7f\u7528\u3002 out\uff1aclient\u5c06\u63a5\u53e3\u3001\u5730\u5740\u7b49\u201c\u7a7a\u58f3\u201d\u4f20\u7ed9server\uff0cserver\u5c06\u8fd0\u7b97\u7ed3\u679c\u586b\u5145\u8fdb\u53bb\uff0c\u7136\u540eclient\u4ece\u4e2d\u53d6\u51fa\u8fd0\u7b97\u7ed3\u679c\u3002 inout\uff1aclient\u7aef\u65e2\u4ece\u6b64\u5904\u4f20\u5165\u6570\u636e\uff0c\u53c8\u4ece\u6b64\u5904\u53d6\u51faserver\u586b\u5145\u7684\u7ed3\u679c\u3002</p> <p>\u5c06\u5b8c\u6210in\u529f\u80fd\u7684\u8bbe\u6210out\u3001\u6216out\u529f\u80fd\u7684\u8bbe\u6210in\uff0c\u90fd\u4f1a\u62a5\u9519\u3002\u82e5\u5c06\u8fde\u4e2a\u5747\u8bbe\u6210inout\uff0c\u5219\u901a\u8fc7\uff0c\u4f46\u589e\u52a0\u4e86\u5e8f\u5217\u5316\u7684\u6b65\u9aa4\uff0c\u767d\u767d\u6d6a\u8d39\u8fd0\u7b97\u8d44\u6e90\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl_3","title":"aidl\u6587\u4ef6","text":"<pre><code>// IPerformanceService.aidl  \npackage com.rtfsc.aidldemo;  \n\ninterface IPerformanceService {  \n    oneway void setProcessPriority(int pid, int priority);  \n    void setThreadPriority(int tid, int priority);  \n    int getThreadPriority(int pid);  \n    void copyArrayIn(in String[] source);  \n    void copyArrayOut(out String[] source);  \n    void copyArrayInOut(inout String[] source);  \n}\n</code></pre> <p>\u7136\u540e\u7528\u7f16\u8bd1\u5de5\u5177\u7f16\u8bd1\u4e4b\u540e\uff0c\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684 IPerformanceService.java \u7c7b\uff0c\u770b\u770b\u7cfb\u7edf\u7ed9\u6211\u4eec\u751f\u6210\u7684\u4ee3\u7801\uff1a</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#stub","title":"Stub\u7c7b","text":"<pre><code>/*\n * This file is auto-generated.  DO NOT MODIFY.\n */\npackage com.rtfsc.i007service;\n\npublic interface IPerformanceService extends android.os.IInterface {\n    /**\n     * Default implementation for IPerformanceService.\n     */\n    public static class Default implements com.rtfsc.i007service.IPerformanceService {\n        @Override\n        public void setProcessPriority(int pid, int priority) throws android.os.RemoteException {\n        }\n\n        @Override\n        public void setThreadPriority(int tid, int priority) throws android.os.RemoteException {\n        }\n\n        @Override\n        public int getThreadPriority(int pid) throws android.os.RemoteException {\n            return 0;\n        }\n\n        @Override\n        public void copyArrayIn(java.lang.String[] source) throws android.os.RemoteException {\n        }\n\n        @Override\n        public void copyArrayOut(java.lang.String[] source) throws android.os.RemoteException {\n        }\n\n        @Override\n        public void copyArrayInOut(java.lang.String[] source) throws android.os.RemoteException {\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return null;\n        }\n    }\n\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.rtfsc.i007service.IPerformanceService {\n        private static final java.lang.String DESCRIPTOR = \"com.rtfsc.i007service.IPerformanceService\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.rtfsc.i007service.IPerformanceService interface,\n         * generating a proxy if needed.\n         */\n        public static com.rtfsc.i007service.IPerformanceService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) &amp;&amp; (iin instanceof com.rtfsc.i007service.IPerformanceService))) {\n                return ((com.rtfsc.i007service.IPerformanceService) iin);\n            }\n            return new com.rtfsc.i007service.IPerformanceService.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            java.lang.String descriptor = DESCRIPTOR;\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(descriptor);\n                    return true;\n                }\n                case TRANSACTION_setProcessPriority: {\n                    data.enforceInterface(descriptor);\n                    int _arg0;\n                    _arg0 = data.readInt();\n                    int _arg1;\n                    _arg1 = data.readInt();\n                    this.setProcessPriority(_arg0, _arg1);\n                    return true;\n                }\n                case TRANSACTION_setThreadPriority: {\n                    data.enforceInterface(descriptor);\n                    int _arg0;\n                    _arg0 = data.readInt();\n                    int _arg1;\n                    _arg1 = data.readInt();\n                    this.setThreadPriority(_arg0, _arg1);\n                    reply.writeNoException();\n                    return true;\n                }\n                case TRANSACTION_getThreadPriority: {\n                    data.enforceInterface(descriptor);\n                    int _arg0;\n                    _arg0 = data.readInt();\n                    int _result = this.getThreadPriority(_arg0);\n                    reply.writeNoException();\n                    reply.writeInt(_result);\n                    return true;\n                }\n                case TRANSACTION_copyArrayIn: {\n                    data.enforceInterface(descriptor);\n                    java.lang.String[] _arg0;\n                    _arg0 = data.createStringArray();\n                    this.copyArrayIn(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n                case TRANSACTION_copyArrayOut: {\n                    data.enforceInterface(descriptor);\n                    java.lang.String[] _arg0;\n                    int _arg0_length = data.readInt();\n                    if ((_arg0_length &lt; 0)) {\n                        _arg0 = null;\n                    } else {\n                        _arg0 = new java.lang.String[_arg0_length];\n                    }\n                    this.copyArrayOut(_arg0);\n                    reply.writeNoException();\n                    reply.writeStringArray(_arg0);\n                    return true;\n                }\n                case TRANSACTION_copyArrayInOut: {\n                    data.enforceInterface(descriptor);\n                    java.lang.String[] _arg0;\n                    _arg0 = data.createStringArray();\n                    this.copyArrayInOut(_arg0);\n                    reply.writeNoException();\n                    reply.writeStringArray(_arg0);\n                    return true;\n                }\n                default: {\n                    return super.onTransact(code, data, reply, flags);\n                }\n            }\n        }\n\n        private static class Proxy implements com.rtfsc.i007service.IPerformanceService {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            @Override\n            public void setProcessPriority(int pid, int priority) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeInt(pid);\n                    _data.writeInt(priority);\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessPriority, _data, null, android.os.IBinder.FLAG_ONEWAY);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        getDefaultImpl().setProcessPriority(pid, priority);\n                        return;\n                    }\n                } finally {\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public void setThreadPriority(int tid, int priority) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeInt(tid);\n                    _data.writeInt(priority);\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_setThreadPriority, _data, _reply, 0);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        getDefaultImpl().setThreadPriority(tid, priority);\n                        return;\n                    }\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public int getThreadPriority(int pid) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                int _result;\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeInt(pid);\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_getThreadPriority, _data, _reply, 0);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        return getDefaultImpl().getThreadPriority(pid);\n                    }\n                    _reply.readException();\n                    _result = _reply.readInt();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n                return _result;\n            }\n\n            @Override\n            public void copyArrayIn(java.lang.String[] source) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeStringArray(source);\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayIn, _data, _reply, 0);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        getDefaultImpl().copyArrayIn(source);\n                        return;\n                    }\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public void copyArrayOut(java.lang.String[] source) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    if ((source == null)) {\n                        _data.writeInt(-1);\n                    } else {\n                        _data.writeInt(source.length);\n                    }\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayOut, _data, _reply, 0);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        getDefaultImpl().copyArrayOut(source);\n                        return;\n                    }\n                    _reply.readException();\n                    _reply.readStringArray(source);\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public void copyArrayInOut(java.lang.String[] source) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeStringArray(source);\n                    boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayInOut, _data, _reply, 0);\n                    if (!_status &amp;&amp; getDefaultImpl() != null) {\n                        getDefaultImpl().copyArrayInOut(source);\n                        return;\n                    }\n                    _reply.readException();\n                    _reply.readStringArray(source);\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            public static com.rtfsc.i007service.IPerformanceService sDefaultImpl;\n        }\n\n        static final int TRANSACTION_setProcessPriority = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n        static final int TRANSACTION_setThreadPriority = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);\n        static final int TRANSACTION_getThreadPriority = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);\n        static final int TRANSACTION_copyArrayIn = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);\n        static final int TRANSACTION_copyArrayOut = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);\n        static final int TRANSACTION_copyArrayInOut = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);\n\n        public static boolean setDefaultImpl(com.rtfsc.i007service.IPerformanceService impl) {\n            // Only one user of this interface can use this function\n            // at a time. This is a heuristic to detect if two different\n            // users in the same process use this function.\n            if (Stub.Proxy.sDefaultImpl != null) {\n                throw new IllegalStateException(\"setDefaultImpl() called twice\");\n            }\n            if (impl != null) {\n                Stub.Proxy.sDefaultImpl = impl;\n                return true;\n            }\n            return false;\n        }\n\n        public static com.rtfsc.i007service.IPerformanceService getDefaultImpl() {\n            return Stub.Proxy.sDefaultImpl;\n        }\n    }\n\n    public void setProcessPriority(int pid, int priority) throws android.os.RemoteException;\n\n    public void setThreadPriority(int tid, int priority) throws android.os.RemoteException;\n\n    public int getThreadPriority(int pid) throws android.os.RemoteException;\n\n    public void copyArrayIn(java.lang.String[] source) throws android.os.RemoteException;\n\n    public void copyArrayOut(java.lang.String[] source) throws android.os.RemoteException;\n\n    public void copyArrayInOut(java.lang.String[] source) throws android.os.RemoteException;\n}\n</code></pre> <p>\u7cfb\u7edf\u5e2e\u6211\u4eec\u751f\u6210\u4e86\u8fd9\u4e2a\u6587\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ee7\u627f IPerformanceService.Stub \u8fd9\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5b9e\u73b0\u5b83\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u5728Service \u7684onBind\u65b9\u6cd5\u91cc\u9762\u8fd4\u56de\u5c31\u5b9e\u73b0\u4e86AIDL\u3002</p> <p>\u8fd9\u4e2aStub\u7c7b\u975e\u5e38\u91cd\u8981\uff0c\u5177\u4f53\u770b\u770b\u5b83\u505a\u4e86\u4ec0\u4e48\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#stubbinder","title":"Stub\u7c7b\u7ee7\u627f\u81eaBinder","text":"<pre><code>public static abstract class Stub extends android.os.Binder implements com.rtfsc.i007service.IPerformanceService {\n    ...\n}\n</code></pre> <p>Stub\u7c7b\u7ee7\u627f\u81eaBinder\uff0c\u610f\u5473\u7740\u8fd9\u4e2aStub\u5176\u5b9e\u81ea\u5df1\u662f\u4e00\u4e2aBinder\u672c\u5730\u5bf9\u8c61\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#stub-iperformanceservice","title":"Stub\u5b9e\u73b0 IPerformanceService \u63a5\u53e3","text":"<pre><code>public static abstract class Stub extends android.os.Binder implements com.rtfsc.i007service.IPerformanceService {\n    ...\n}\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#iinterface","title":"IInterface","text":"<pre><code>public interface IPerformanceService extends android.os.IInterface {\n    ...\n}\n</code></pre> <p>IPerformanceService \u672c\u8eab\u662f\u4e00\u4e2aIInterface\u3002</p> <p>\u56e0\u6b64\u4ed6\u643a\u5e26\u67d0\u79cd\u5ba2\u6237\u7aef\u9700\u8981\u7684\u80fd\u529b\uff08\u8fd9\u91cc\u662f\u65b9\u6cd5 setProcessPriority\u7b49\u7b49 )\u3002\u6b64\u7c7b\u6709\u4e00\u4e2a\u5185\u90e8\u7c7bProxy\uff0c\u4e5f\u5c31\u662fBinder\u4ee3\u7406\u5bf9\u8c61\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#asinterface","title":"asInterface","text":"<pre><code>/**  \n * Cast an IBinder object into an com.rtfsc.i007service.IPerformanceService interface, * generating a proxy if needed. */public static com.rtfsc.i007service.IPerformanceService asInterface(android.os.IBinder obj) {  \n    if ((obj == null)) {  \n        return null;  \n    }  \n    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);  \n    if (((iin != null) &amp;&amp; (iin instanceof com.rtfsc.i007service.IPerformanceService))) {  \n        return ((com.rtfsc.i007service.IPerformanceService) iin);  \n    }  \n    return new com.rtfsc.i007service.IPerformanceService.Stub.Proxy(obj);  \n}\n</code></pre> <p>\u770b\u770b asInterface \u65b9\u6cd5\uff0c\u6211\u4eec\u5728bind\u4e00\u4e2aService\u4e4b\u540e\uff0c\u5728onServiceConnecttion\u7684\u56de\u8c03\u91cc\u9762\uff0c\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u62ff\u5230\u4e00\u4e2a\u8fdc\u7a0b\u7684service\u7684\u3002</p> <p>\u51fd\u6570\u7684\u5165\u53c2obj\u662f IBinder \u7c7b\u578b\u3002 \u5982\u679c\u662fBinder\u672c\u5730\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u5c31\u662f Binder \u7c7b\u578b\uff1b \u5982\u679c\u662fBinder\u4ee3\u7406\u5bf9\u8c61\uff0c\u90a3\u5c31\u662f BinderProxy \u7c7b\u578b\u3002</p> <p>\u6b63\u5982\u4e0a\u9762\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\u6240\u8bf4\uff0c\u5b83\u4f1a\u8bd5\u7740\u67e5\u627eBinder\u672c\u5730\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u5230\uff0c\u8bf4\u660eClient\u548cServer\u90fd\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u53c2\u6570\u76f4\u63a5\u5c31\u662f\u672c\u5730\u5bf9\u8c61\uff0c\u76f4\u63a5\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7136\u540e\u8fd4\u56de\u3002</p> <p>\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8bf4\u660e\u662f\u8fdc\u7a0b\u5bf9\u8c61\uff08\u5904\u4e8e\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\uff09\u90a3\u4e48\u5c31\u9700\u8981\u521b\u5efa\u4e00\u4e2aBinde\u4ee3\u7406\u5bf9\u8c61\uff0c\u8ba9\u8fd9\u4e2aBinder\u4ee3\u7406\u5b9e\u73b0\u5bf9\u4e8e\u8fdc\u7a0b\u5bf9\u8c61\u7684\u8bbf\u95ee\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u662f\u4e0e\u4e00\u4e2a\u8fdc\u7a0bService\u5bf9\u8c61\u8fdb\u884c\u901a\u4fe1\uff0c\u90a3\u4e48\u8fd9\u91cc\u8fd4\u56de\u7684\u4e00\u5b9a\u662f\u4e00\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\uff0c\u8fd9\u4e2aIBinder\u53c2\u6570\u7684\u7c7b\u578b\u662fBinderProxy\u3002</p> <p>\u6253\u5f00\u5199demo\u8c03\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9aservice\u5728\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u91cc\uff0c\u89c2\u5bdfasInterface\u65b9\u6cd5\u7528\u7684\u662f Binder \u8fd8\u662f BinderProxy \u53ef\u4ee5\u5728Androidmanifests\u6587\u4ef6\u4e2dService\u914d\u7f6eandroid:process=\":service\" </p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#proxy","title":"Proxy","text":"<p>\u518d\u770b\u770b\u6211\u4eec\u5bf9\u4e8eaidl\u7684 getThreadPriority \u65b9\u6cd5\u7684\u5b9e\u73b0\uff1b\u5728Stub\u7c7b\u91cc\u9762\uff0c getThreadPriority \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u7ee7\u627f\u8fd9\u4e2a\u7c7b\u5e76\u5b9e\u73b0\u5b83\u3002</p> <p>\u5982\u679cClient\u548cServer\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u90a3\u4e48\u76f4\u63a5\u5c31\u662f\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff1b\u5982\u679c\u662f\u8fdc\u7a0b\u8c03\u7528\uff0c\u662f\u901a\u8fc7Binder\u4ee3\u7406\u5b8c\u6210\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\u5c31\u662f Proxy \u7c7b\uff1b Proxy \u5bf9\u4e8e getThreadPriority \u65b9\u6cd5\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>@Override  \npublic int getThreadPriority(int pid) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    int _result;  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeInt(pid);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_getThreadPriority, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            return getDefaultImpl().getThreadPriority(pid);  \n        }  \n        _reply.readException();  \n        _result = _reply.readInt();  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n    return _result;  \n}\n</code></pre> <p>\u5b83\u9996\u5148\u7528 Parcel \u628a\u6570\u636e\u5e8f\u5217\u5316\u4e86\uff0c\u7136\u540e\u8c03\u7528\u4e86 transact \u65b9\u6cd5\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#transact","title":"transact","text":"<p>\u8fd9\u4e2a transact \u5230\u5e95\u505a\u4e86\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e2a Proxy \u7c7b\u5728 asInterface \u65b9\u6cd5\u91cc\u9762\u88ab\u521b\u5efa\uff0c\u5982\u679c\u662fBinder\u4ee3\u7406\u90a3\u4e48\u8bf4\u660e\u9a71\u52a8\u8fd4\u56de\u7684IBinder\u5b9e\u9645\u662f BinderProxy \uff0c\u56e0\u6b64\u6211\u4eec\u7684 Proxy \u7c7b\u91cc\u9762\u7684 mRemote \u5b9e\u9645\u7c7b\u578b\u5e94\u8be5\u662f BinderProxy \uff1b\u6211\u4eec\u770b\u770b BinderProxy \u7684 transact \u65b9\u6cd5\uff1a(Binder.java\u7684\u5185\u90e8\u7c7b)</p> <pre><code>frameworks/base/core/java/android/os/IBinder.java\n\n/**  \n * Perform a generic operation with the object. ** @param code The action to perform.  This should  \n * be a number between {@link #FIRST_CALL_TRANSACTION} and  \n * {@link #LAST_CALL_TRANSACTION}.  \n * @param data Marshalled data to send to the target.  Must not be null.  \n * If you are not sending any data, you must create an empty Parcel * that is given here. * @param reply Marshalled data to be received from the target.  May be  \n * null if you are not interested in the return value. * @param flags Additional operation flags.  Either 0 for a normal  \n * RPC, or {@link #FLAG_ONEWAY} for a one-way RPC.  \n * * @return Returns the result from {@link Binder#onTransact}.  A successful call  \n * generally returns true; false generally means the transaction code was not\n * understood.  For a oneway call to a different process false should never be\n * returned.  If a oneway call is made to code in the same process (usually to\n * a C++ or Rust implementation), then there are no oneway semantics, and\n * false can still be returned.\n */\npublic boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags)  \n    throws RemoteException;\n</code></pre> <pre><code>frameworks/base/core/java/android/os/BinderProxy.java\n\n/**  \n * Java proxy for a native IBinder object. * Allocated and constructed by the native javaObjectforIBinder function. Never allocated * directly from Java code. * * @hide  \n */  \npublic final class BinderProxy implements IBinder {\n    /**  \n     * Perform a binder transaction on a proxy. * * @param code The action to perform.  This should  \n     * be a number between {@link #FIRST_CALL_TRANSACTION} and  \n     * {@link #LAST_CALL_TRANSACTION}.  \n     * @param data Marshalled data to send to the target.  Must not be null.  \n     * If you are not sending any data, you must create an empty Parcel * that is given here. * @param reply Marshalled data to be received from the target.  May be  \n     * null if you are not interested in the return value. * @param flags Additional operation flags.  Either 0 for a normal  \n     * RPC, or {@link #FLAG_ONEWAY} for a one-way RPC.  \n     * * @return  \n     * @throws RemoteException  \n     */  \n    public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {  \n        Binder.checkParcel(this, code, data, \"Unreasonably large binder buffer\");  \n\n        boolean warnOnBlocking = mWarnOnBlocking; // Cache it to reduce volatile access.  \n\n        if (warnOnBlocking &amp;&amp; ((flags &amp; FLAG_ONEWAY) == 0)  \n                &amp;&amp; Binder.sWarnOnBlockingOnCurrentThread.get()) {  \n\n            // For now, avoid spamming the log by disabling after we've logged  \n            // about this interface at least once        mWarnOnBlocking = false;  \n            warnOnBlocking = false;  \n\n            if (Build.IS_USERDEBUG || Build.IS_ENG) {  \n                // Log this as a WTF on userdebug and eng builds.  \n                Log.wtf(Binder.TAG,  \n                        \"Outgoing transactions from this process must be FLAG_ONEWAY\",  \n                        new Throwable());  \n            } else {  \n                Log.w(Binder.TAG,  \n                        \"Outgoing transactions from this process must be FLAG_ONEWAY\",  \n                        new Throwable());  \n            }  \n        }  \n\n        final boolean tracingEnabled = Binder.isStackTrackingEnabled();  \n        if (tracingEnabled) {  \n            final Throwable tr = new Throwable();  \n            Binder.getTransactionTracker().addTrace(tr);  \n            StackTraceElement stackTraceElement = tr.getStackTrace()[1];  \n            Trace.traceBegin(Trace.TRACE_TAG_ALWAYS,  \n                    stackTraceElement.getClassName() + \".\" + stackTraceElement.getMethodName());  \n        }  \n\n        // Make sure the listener won't change while processing a transaction.  \n        final Binder.ProxyTransactListener transactListener = sTransactListener;  \n        Object session = null;  \n\n        if (transactListener != null) {  \n            final int origWorkSourceUid = Binder.getCallingWorkSourceUid();  \n            session = transactListener.onTransactStarted(this, code, flags);  \n\n            // Allow the listener to update the work source uid. We need to update the request  \n            // header if the uid is updated.        final int updatedWorkSourceUid = Binder.getCallingWorkSourceUid();  \n            if (origWorkSourceUid != updatedWorkSourceUid) {  \n                data.replaceCallingWorkSourceUid(updatedWorkSourceUid);  \n            }  \n        }  \n\n        final AppOpsManager.PausedNotedAppOpsCollection prevCollection =  \n                AppOpsManager.pauseNotedAppOpsCollection();  \n\n        if ((flags &amp; FLAG_ONEWAY) == 0 &amp;&amp; AppOpsManager.isListeningForOpNoted()) {  \n            flags |= FLAG_COLLECT_NOTED_APP_OPS;  \n        }  \n\n        try {  \n            final boolean result = transactNative(code, data, reply, flags);  \n\n            if (reply != null &amp;&amp; !warnOnBlocking) {  \n                reply.addFlags(Parcel.FLAG_IS_REPLY_FROM_BLOCKING_ALLOWED_OBJECT);  \n            }  \n\n            return result;  \n        } finally {  \n            AppOpsManager.resumeNotedAppOpsCollection(prevCollection);  \n\n            if (transactListener != null) {  \n                transactListener.onTransactEnded(session);  \n            }  \n\n            if (tracingEnabled) {  \n                Trace.traceEnd(Trace.TRACE_TAG_ALWAYS);  \n            }  \n        }  \n    }\n\n    /**  \n     * Native implementation of transact() for proxies \n     */\n    public native boolean transactNative(int code, Parcel data, Parcel reply,  \n        int flags) throws RemoteException;\n}\n</code></pre> <pre><code>frameworks/base/core/jni/android_util_Binder.cpp\n\nstatic const JNINativeMethod gBinderProxyMethods[] = {  \n     /* name, signature, funcPtr */\n    {\"transactNative\",      \"(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z\", (void*)android_os_BinderProxy_transact},\n};\n\nstatic jboolean android_os_BinderProxy_transact(JNIEnv* env, jobject obj,  \n        jint code, jobject dataObj, jobject replyObj, jint flags) // throws RemoteException  \n{  \n    if (dataObj == NULL) {  \n        jniThrowNullPointerException(env, NULL);  \n        return JNI_FALSE;  \n    }  \n\n    Parcel* data = parcelForJavaObject(env, dataObj);  \n    if (data == NULL) {  \n        return JNI_FALSE;  \n    }  \n    Parcel* reply = parcelForJavaObject(env, replyObj);  \n    if (reply == NULL &amp;&amp; replyObj != NULL) {  \n        return JNI_FALSE;  \n    }  \n\n    IBinder* target = getBPNativeData(env, obj)-&gt;mObject.get();  \n    if (target == NULL) {  \n        jniThrowException(env, \"java/lang/IllegalStateException\", \"Binder has been finalized!\");  \n        return JNI_FALSE;  \n    }  \n\n    ALOGV(\"Java code calling transact on %p in Java object %p with code %\" PRId32 \"\\n\",  \n            target, obj, code);  \n\n\n    bool time_binder_calls;  \n    int64_t start_millis;  \n    if (kEnableBinderSample) {  \n        // Only log the binder call duration for things on the Java-level main thread.  \n        // But if we don't        time_binder_calls = should_time_binder_calls();  \n\n        if (time_binder_calls) {  \n            start_millis = uptimeMillis();  \n        }  \n    }  \n\n    //printf(\"Transact from Java code to %p sending: \", target); data-&gt;print();  \n    status_t err = target-&gt;transact(code, *data, reply, flags);  \n    //if (reply) printf(\"Transact from Java code to %p received: \", target); reply-&gt;print();  \n\n    if (kEnableBinderSample) {  \n        if (time_binder_calls) {  \n            conditionally_log_binder_call(start_millis, target, code);  \n        }  \n    }  \n\n    if (err == NO_ERROR) {  \n        return JNI_TRUE;  \n    } else if (err == UNKNOWN_TRANSACTION) {  \n        return JNI_FALSE;  \n    }  \n\n    signalExceptionForError(env, obj, err, true /*canThrowRemoteException*/, data-&gt;dataSize());  \n    return JNI_FALSE;  \n}\n</code></pre> <p>\u4ece\u8fd9\u53ef\u4ee5\u770b\u51fa\u5b83\u7684\u5b9e\u73b0\u5728native\u5c42\uff0c\u91cc\u9762\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u8c03\u7528\u94fe\u5b9e\u5728\u592a\u957f\u8fd9\u91cc\u5c31\u4e0d\u7ed9\u51fa\u4e86\uff1b\u8981\u77e5\u9053\u7684\u662f\u5b83\u6700\u7ec8\u8c03\u7528\u5230\u4e86 talkWithDriver \u51fd\u6570\uff1b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u540d\u5b57\u5c31\u77e5\u9053\uff0c\u901a\u4fe1\u8fc7\u7a0b\u8981\u4ea4\u7ed9\u9a71\u52a8\u5b8c\u6210\u4e86\uff1b\u6700\u7ec8\u901a\u8fc7 ioctl \u7cfb\u7edf\u8c03\u7528\uff0cClient\u8fdb\u7a0b\u9677\u5165\u5185\u6838\u6001\uff0cClient\u8fdb\u7a0b\u6302\u8d77\u7b49\u5f85\u8fd4\u56de\uff1b\u9a71\u52a8\u5b8c\u6210\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u4e4b\u540e\u5524\u9192Server\u8fdb\u7a0b\uff0c\u8c03\u7528\u4e86Server\u8fdb\u7a0b\u672c\u5730\u5bf9\u8c61\u7684 onTransact \u51fd\u6570\u3002\u6211\u4eec\u5728\u770bBinder\u672c\u5730\u5bf9\u8c61\u7684 onTransact \u65b9\u6cd5\uff08\u8fd9\u91cc\u5c31\u662f Stub \u7c7b\u91cc\u9762\u7684\u6b64\u65b9\u6cd5\uff09\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#ontransact","title":"onTransact","text":"<pre><code>@Override  \npublic boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {  \n    java.lang.String descriptor = DESCRIPTOR;  \n    switch (code) {  \n        case INTERFACE_TRANSACTION: {  \n            reply.writeString(descriptor);  \n            return true;  \n        }  \n        ...\n        case TRANSACTION_getThreadPriority: {  \n            data.enforceInterface(descriptor);  \n            int _arg0;  \n            _arg0 = data.readInt();  \n            int _result = this.getThreadPriority(_arg0);  \n            reply.writeNoException();  \n            reply.writeInt(_result);  \n            return true;  \n        }\n        ...\n        default: {  \n            return super.onTransact(code, data, reply, flags);  \n        }  \n    }  \n}\n</code></pre> <p>\u5728Server\u8fdb\u7a0b\u91cc\u9762\uff0c onTransact \u6839\u636e\u8c03\u7528\u53f7\uff08\u6bcf\u4e2aAIDL\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u5728\u8de8\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u4f20\u9012\u51fd\u6570\uff0c\u800c\u662f\u4f20\u9012\u7f16\u53f7\u6307\u660e\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\uff09\u8c03\u7528\u76f8\u5173\u51fd\u6570\uff1b\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\uff0c\u8c03\u7528\u4e86Binder\u672c\u5730\u5bf9\u8c61\u7684 getThreadPriority \u65b9\u6cd5\uff1b\u8fd9\u4e2a\u65b9\u6cd5\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u9a71\u52a8\uff0c\u9a71\u52a8\u5524\u9192\u6302\u8d77\u7684Client\u8fdb\u7a0b\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u3002\u4e8e\u662f\u4e00\u6b21\u8de8\u8fdb\u7a0b\u8c03\u7528\u5c31\u5b8c\u6210\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#_1","title":"\u5c0f\u7ed3","text":"<p>\u6709\u4e00\u4e2aStub\u7684\u62bd\u8c61\u7c7b\uff0cStub\u4e2d\u53c8\u6709\u4e00\u4e2aProxy\u7684\u62bd\u8c61\u7c7b\u3002</p> <p>Stub.asInterface(IBinder) \u4f1a\u6839\u636e\u662f\u540c\u4e00\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd4\u56deStub()\u5b9e\u4f53\uff1b\u4e0d\u540c\u8fdb\u7a0b\u901a\u4fe1\uff0c\u8fd4\u56deStub.Proxy()\u4ee3\u7406\u5bf9\u8c61\u3002</p> <p>Stub()\u7684Binder\u5b9e\u4f53\u4e2d\u6709\u4e2aonTransact()\u51fd\u6570\uff0c\u5728\u524d\u9762\u7684\u4e00\u4e9bBinder Native\u3001Framework\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u670d\u52a1\u6700\u7ec8\u5904\u7406\u7684\u5165\u53e3\u5c31\u662fonTransact()\uff0c\u8fd9\u91cc\u4f1a\u89e3\u6790Client\u4f20\u6765\u7684 TRANSACTION code \uff0c\u89e3\u6790Parcel\u6570\u636e\uff0c\u8c03\u7528\u5bf9\u5e94\u7684\u670d\u52a1\u63a5\u53e3\u5904\u7406\u3002</p> <p>Proxy()\u4e2d\u5b58\u5728\u4e00\u4e2aasBinder()\uff0c\u8fd4\u56de\u7684\u5bf9\u8c61\u4e3amRemote\uff0c\u5c31\u5982\u6211\u4eec\u524d\u9762Framework\u4e86\u89e3\u7684\uff0c\u5bf9\u5e94\u7684\u5176\u5b9e\u662fBinderProxy\u5bf9\u8c61\u3002</p> <p>Proxy()\u7ec4\u88c5\u4e86Client\u4e2d\u7684AIDL\u63a5\u53e3\u7684\u6838\u5fc3\u5b9e\u73b0\uff0c\u7ec4\u88c5Parcel\u6570\u636e\uff0c\u8c03\u7528BinderProxy()\u7684transact()\u53d1\u9001TRANSACTION code\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl_4","title":"AIDL\u901a\u4fe1\u6d41\u7a0b","text":"<p>Client \u7aef\u548cServer\u7aef\u4f7f\u7528\u540c\u4e00\u4e2aAIDL\uff0c\u8fde\u5305\u540d\u90fd\u9700\u8981\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>Server\u7aef\u7ee7\u627f\u81eaService\uff0c\u91cd\u8f7d\u4e00\u4e2aonBind()\uff0c\u8fd4\u56de\u670d\u52a1\u5b9e\u4f53Stub()\uff0cStub\u63d0\u4f9b\u4e86\u4e00\u4e2aasInterface(Binder)\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u662f\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e0b\u90a3\u4e48asInterface()\u5c06\u8fd4\u56deStub\u5bf9\u8c61\u672c\u8eab\uff0c\u5426\u5219\u8fd4\u56deStub.Proxy\u5bf9\u8c61\u3002</p> <pre><code>IPerformanceService.Stub mStub = new IPerformanceService.Stub(){...};\n\n@Override\npublic IBinder onBind(Intent intent) {        \n    return mStub;//\u901a\u8fc7ServiceConnection\u5728activity\u4e2d\u62ff\u5230 PerformanceService\n}\n</code></pre> <p>Client \u7ed1\u5b9a\u670d\u52a1\u65f6\u901a\u8fc7\u62ff\u5230\u670d\u52a1Stub.asInterface\u8fd4\u56de\u7684\u670d\u52a1\u7684\u4ee3\u7406Stub.Proxy()\u3002 <pre><code>mService = IPerformanceService.Stub.asInterface(service);\n</code></pre></p> <p>Client\u548cServer\u4ea4\u4e92\u7684\u7b80\u5355\u793a\u610f\u6d41\u7a0b\uff1a</p> <p></p> <p>\u670d\u52a1\u672c\u5730\u62ff\u5230\u4e86AIDL\u751f\u6210\u7684\u670d\u52a1\u5b9e\u4f53Stub()\uff0c Client\u7ed1\u5b9a\u670d\u52a1\u540e\uff0c\u62ff\u5230\u4e86\u670d\u52a1\u7684\u4ee3\u7406Stub.proxy()\u3002\u8fd9\u548c\u6211\u4eec\u5728\u524d\u9762Framewok\u5c42\u7684\u6bd4\u8f83\u7c7b\u4f3c\u4e86\uff0cClient\u62ff\u5230BinderProxy\u5bf9\u8c61\uff0cServer\u62ff\u5230Binder\u5b9e\u4f53\u5bf9\u8c61\u3002</p> <p>AIDL\u5728\u8fd9\u91cc\u7528\u5230\u4e86\u4e00\u4e2aProxy-Stub \u00a0(\u4ee3\u7406-\u5b58\u6839)\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u8fd9\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u6765\u5c55\u5f00\u8bf4\u660e\u4e00\u4e0b\u3002</p> <p>Binder\u901a\u4fe1\u7684\u6570\u636e\u6d41\u8f6c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#proxy-stub","title":"proxy-stub \u8bbe\u8ba1\u6a21\u5f0f","text":"<p>Proxy\u5c06\u7279\u6b8a\u6027\u63a5\u53e3\u8f6c\u6362\u6210\u901a\u7528\u6027\u63a5\u53e3\uff0cStub\u5c06\u901a\u7528\u6027\u63a5\u53e3\u8f6c\u6362\u6210\u7279\u6b8a\u6027\u63a5\u53e3\uff0c\u4e8c\u8005\u4e4b\u95f4\u7684\u6570\u636e\u8f6c\u6362\u901a\u8fc7Parcel(\u6253\u5305)\u8fdb\u884c\u7684\uff0cProxy\u5e38\u4f5c\u4e3a\u6570\u636e\u53d1\u9001\u4ee3\u7406\uff0c\u901a\u8fc7Parcel\u5c06\u6570\u636e\u6253\u5305\u53d1\u9001\uff0cStub\u5e38\u4f5c\u4e3a\u6570\u636e\u63a5\u6536\u6869\uff0c\u89e3\u5305\u5e76\u89e3\u6790Parcel Data package\u3002</p> <p></p> <p>\u4e3e\u4e2a\u4f8b\u5b50</p> <p>\u8981\u505a\u7684\u4e8b\uff1a\u6211\u73b0\u5728\u8981\u5f00\u7a7a\u8c03 Client\uff08\u5ba2\u6237\u7aef\uff09\uff1a\u6211 Proxy\uff08\u4ee3\u7406\uff09\uff1a\u9065\u63a7\u5668 Stub\uff08\u5b9e\u4f53\uff09\uff1a\u7a7a\u8c03\uff0c Parcel\uff08\u6570\u636e\uff09\uff1a\u9065\u63a7\u5668\u4f20\u7ed9\u7a7a\u8c03\u7684\u84dd\u7259\u3001\u7ea2\u5916\u53c2\u6570\u3002</p> <p>\u6211\u6309\u4e0b\u4e86\u9065\u63a7\u5668\u7684\u63d0\u5347\u6e29\u5ea6\u6309\u952e\uff0c\u9065\u63a7\u5668\u4e4b\u524d\u8ddf\u7a7a\u8c03\u505a\u4e86\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u62ff\u5230\u7a7a\u8c03\u7684\u5bf9\u8c61\u5b9e\u4f53Stub\uff0c\u628a\u6309\u952e\u7684\u64cd\u4f5c\u7ec4\u88c5\u6210\u4e00\u4e2aParcel\u6570\u636e\uff0c\u53d1\u7ed9\u7a7a\u8c03\uff08Server\uff09\uff0c\u7a7a\u8c03\uff08Server\uff09\u62ff\u5230\u8bf7\u6c42\u540e\uff0c\u6267\u884c\u76f8\u5e94\u7684\u5904\u7406-\u63d0\u5347\u6e29\u5ea6\uff0c\u7ed3\u679c\u8fd4\u56de\u7ed9\u9065\u63a7\u5668\u3002\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86Proxy-Stub\u7684\u6570\u636e\u4ea4\u4e92\u6d41\u7a0b\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#_2","title":"\u603b\u7ed3","text":"<ul> <li>AIDL\u8981\u662f\u5b9e\u73b0\u7684\u6700\u7ec8\u76ee\u6807\u662f\u8de8\u8fdb\u7a0b\u8bbf\u95ee\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u5f97\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528\u5176\u65b9\u6cd5\u3002</li> <li>AIDL\u4e0e\u63a5\u53e3\u7c7b\u4f3c\uff0c\u672c\u8d28\u5c5e\u6027\u90fd\u662f\u4e00\u4e2aInterface\uff08AIDL\u6587\u4ef6\u662fIInterface\uff0c\u800cInterface\u662f\u7ee7\u627f\u81eaInterface\u7684\uff09\uff0c\u800c\u4e14\u90fd\u53ea\u5b9a\u4e49\u4e86\u62bd\u8c61\u65b9\u6cd5\uff0c\u6ca1\u6709\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u9700\u8981\u5b50\u7c7b\u53bb\u5b9e\u73b0\u3002</li> <li>\u4e0e\u63a5\u53e3\u4e0d\u540c\u7684\u662f\uff1a\u7531AIDL\u751f\u6210\u7684stub\u7c7b\u672c\u8d28\u4e0a\u662f\u4e00\u4e2aBinder\uff01\u8fd9\u4e2a\u7c7b\u6240\u751f\u6210\u7684\u5bf9\u8c61\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4f20\u9012\u7ed9\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\uff1a<ul> <li>\u4e00\u79cd\u662f\u901a\u8fc7bindService\u7684\u65b9\u5f0f\uff0c\u7ed1\u5b9a\u4e00\u4e2a\u670d\u52a1\uff0c\u800c\u5728\u7ed1\u5b9a\u540e\uff0c\u670d\u52a1\u5c06\u4f1a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e00\u4e2aBinder\u7684\u5bf9\u8c61\uff0c\u6b64\u65f6\u53ef\u4ee5\u628a\u7ee7\u627f\u81eastub\u7684Binder\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u3002</li> <li>\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u628a\u7ee7\u627f\u81eastub\u7684\u7c7b\u63d0\u5347\u4e3a\u7cfb\u7edf\u670d\u52a1\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u901a\u8fc7ServiceManager\u53bb\u5f97\u5230\u5f53\u524d\u7684\u7cfb\u7edf\u670d\u52a1\uff0cServiceManager\u5c31\u4f1a\u628a\u76ee\u6807Service\u7684Binder\u5bf9\u8c61\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ul> </li> <li>\u7ecf\u8fc7\u4e0a\u9762\u4e24\u79cd\u65b9\u6cd5\u5f97\u5230\u7684Binder\u5bf9\u8c61\uff0c\u5c31\u50cf\u5f97\u5230\u4e86\u672c\u5730\u7684\u67d0\u4e2a\u5bf9\u8c61\u4e00\u6837\uff0c\u53ef\u4ee5\u8c03\u7528\u5176\u8fdc\u7a0b\u7684\u65b9\u6cd5\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#_3","title":"\u6269\u5c55\u77e5\u8bc6","text":"","tags":["Android","Binder"]},{"location":"android/binder/aidl/#aidl_5","title":"aidl \u8fd4\u56de\u503c","text":"<pre><code>// IPerformanceService.aidl  \npackage com.rtfsc.aidldemo;  \n\ninterface IPerformanceService {\n    void setThreadPriority(int tid, int priority);  \n    int getThreadPriority(int pid);\n}\n</code></pre> <p>setThreadPriority\u6ca1\u6709\u8fd4\u56de\u503c\uff0cgetThreadPriority\u6709\u8fd4\u56de\u503c\uff1b\u6211\u4eec\u6765\u5bf9\u6bd4 Proxy \u5bf9\u4e8e setThreadPriority\u3001getThreadPriority \u65b9\u6cd5\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>@Override  \npublic void setThreadPriority(int tid, int priority) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeInt(tid);  \n        _data.writeInt(priority);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_setThreadPriority, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().setThreadPriority(tid, priority);  \n            return;  \n        }  \n        _reply.readException();  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n}\n</code></pre> <pre><code>@Override  \npublic int getThreadPriority(int pid) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    int _result;  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeInt(pid);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_getThreadPriority, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            return getDefaultImpl().getThreadPriority(pid);  \n        }  \n        _reply.readException();  \n        _result = _reply.readInt();  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n    return _result;  \n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8c03\u7528 transact \u65f6\u90fd\u4f20 reply \u8fdb\u53bb\u4e86\u3002</p> <p>\u7b14\u8005\u66fe\u7ecf\u8ddf\u522b\u4eba\u4e89\u8bba\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u4eba\u662f\u8ba4\u4e3a\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u4e0d\u9700\u8981\u4f20 reply \u8fdb\u53bb\u7684\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#oneway","title":"oneway","text":"<pre><code>// IPerformanceService.aidl  \npackage com.rtfsc.aidldemo;  \n\ninterface IPerformanceService {\n    oneway void setProcessPriority(int pid, int priority);\n    void setThreadPriority(int tid, int priority);\n}\n</code></pre> <p>setProcessPriority \u662f oneway\uff0csetThreadPriority \u4e0d\u662f oneway\u3002</p> <pre><code>@Override  \npublic void setProcessPriority(int pid, int priority) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeInt(pid);  \n        _data.writeInt(priority);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessPriority, _data, null, android.os.IBinder.FLAG_ONEWAY);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().setProcessPriority(pid, priority);  \n            return;  \n        }  \n    } finally {  \n        _data.recycle();  \n    }  \n}\n</code></pre> <pre><code>@Override  \npublic void setThreadPriority(int tid, int priority) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeInt(tid);  \n        _data.writeInt(priority);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_setThreadPriority, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().setThreadPriority(tid, priority);  \n            return;  \n        }  \n        _reply.readException();  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc\u523b\u610f\u627e\u4e86\u4e2a\u4e5f\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u975eoneway\u63a5\u53e3\u6765\u505a\u5bf9\u6bd4\uff0c\u5728\u975eoneway\u63a5\u53e3\u4e86\uff0c\u8c03\u7528 transact \u65f6\u4f20 reply \u8fdb\u53bb\u4e86\u3002</p> <p>\u800coneway\u63a5\u53e3\u662f\u4e0d\u9700\u8981\u4f20reply \u8fdb\u53bb\u7684\u3002\u5e76\u4e14oneway\u63a5\u53e3\u8bbe\u7f6e\u7684flags\u662f android.os.IBinder.FLAG_ONEWAY \u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/aidl/#tag","title":"\u6307\u5b9a\u5b9a\u5411tag","text":"<p>\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u8981\u4f20\u9012\u7684\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0**Parcelable**\u63a5\u53e3\uff0cAIDL\u4e2d\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u4f20\u9012\u8fd8\u5fc5\u987b\u6307\u5b9a\u5b9a\u5411tag\uff0ctag\u8868\u793a\u6570\u636e\u7684\u6d41\u901a\u65b9\u5411\u3002 \u5982\u4e0b copyArrayIn \u6307\u5b9a\u7684\u5165\u53c2tag\u4e3a in \u3001\u5982\u4e0b copyArrayOut \u6307\u5b9a\u7684\u5165\u53c2tag\u4e3a out \u3001\u5982\u4e0b copyArrayInOut \u6307\u5b9a\u7684\u5165\u53c2tag\u4e3a inout \u3002</p> <pre><code>// IPerformanceService.aidl  \npackage com.rtfsc.aidldemo;  \n\ninterface IPerformanceService {\n    void copyArrayIn(in String[] source);  \n    void copyArrayOut(out String[] source);  \n    void copyArrayInOut(inout String[] source);  \n}\n</code></pre> <p>Proxy \u5bf9\u4e8e \u8fd9\u4e09\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>@Override  \npublic void copyArrayIn(java.lang.String[] source) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeStringArray(source);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayIn, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().copyArrayIn(source);  \n            return;  \n        }  \n        _reply.readException();  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n}\n</code></pre> <pre><code>@Override  \npublic void copyArrayOut(java.lang.String[] source) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        if ((source == null)) {  \n            _data.writeInt(-1);  \n        } else {  \n            _data.writeInt(source.length);  \n        }  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayOut, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().copyArrayOut(source);  \n            return;  \n        }  \n        _reply.readException();  \n        _reply.readStringArray(source);  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n}\n\n\nStub\u7c7b\u7684onTransact\u65b9\u6cd5\u91cc:\ncase TRANSACTION_copyArrayOut: {  \n    data.enforceInterface(descriptor);  \n    java.lang.String[] _arg0;  \n    int _arg0_length = data.readInt();  \n    if ((_arg0_length &lt; 0)) {  \n        _arg0 = null;  \n    } else {  \n        _arg0 = new java.lang.String[_arg0_length];  \n    }  \n    this.copyArrayOut(_arg0);  \n    reply.writeNoException();  \n    reply.writeStringArray(_arg0);  \n    return true;  \n}\n</code></pre> <p>\u5728 copyArrayIn \u51fd\u6570\u4e2d\uff0c\u521b\u5efaParcel\u5bf9\u8c61_data\uff0c\u5c06 in \u578b\u53c2\u6570source\u5199\u5165_data\uff0c\u5b8c\u6210\u5e8f\u5217\u5316\u3002</p> <p>\u5728 copyArrayOut \u51fd\u6570\u4e2d\uff0c\u521b\u5efaParcel\u5bf9\u8c61_data\uff0c\u5199\u5165source.length\uff0c\u8c03\u7528transact()\u65b9\u6cd5\uff0c\u7b49\u5f85Service\u7aefonTransact()\u54cd\u5e94\u3002 onTransact() \u5f97\u5230String[]\u7684\u957f\u5ea6\uff1b\u521b\u5efaString[]\u53d8\u91cf\uff0c\u5e76\u4ecedata\u4e2d\u53cd\u5e8f\u5217\u5316\uff0c\u5f97\u5230client\u7aef\u4f20\u6765\u7684String[]\u53d8\u91cf\uff1b\u8c03\u7528\u672c\u5730\u7684 copyArrayOut \u65b9\u6cd5\u3002 \u5c06\u8f93\u51fa\u7684String[]\u578b_arg0\u5199\u5165Parcel\u578breply\u53d8\u91cf\uff0c\u5b8c\u6210\u5e8f\u5217\u5316\uff1b\u6b64\u65f6onTransact\u6267\u884c\u5b8c\u6bd5\u3002 Proxy\u5c06onTransact\u8fd4\u56de\u7684_reply\u53cd\u5e8f\u5217\u5316\uff0c\u5199\u5165source\u4e2d\uff0csource\u5373\u83b7\u5f97\u4e86\u8fd4\u56de\u503c\u3002\u6574\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002</p> <p>\u6240\u4ee5\u6307\u5b9a in\uff1aclient\u7aef\u5c06\u53c2\u6570\u8bbe\u5b9a\u597d\uff0c\u4f20\u7ed9server\uff0cserver\u7aef\u62f7\u8d1d\u3001\u4f7f\u7528\u3002 \u6240\u4ee5\u6307\u5b9a  out\uff1aclient\u5c06\u63a5\u53e3\u3001\u5730\u5740\u7b49\u201c\u7a7a\u58f3\u201d\u4f20\u7ed9server\uff0cserver\u5c06\u8fd0\u7b97\u7ed3\u679c\u586b\u5145\u8fdb\u53bb\uff0c\u7136\u540eclient\u4ece\u4e2d\u53d6\u51fa\u8fd0\u7b97\u7ed3\u679c\u3002</p> <pre><code>@Override  \npublic void copyArrayInOut(java.lang.String[] source) throws android.os.RemoteException {  \n    android.os.Parcel _data = android.os.Parcel.obtain();  \n    android.os.Parcel _reply = android.os.Parcel.obtain();  \n    try {  \n        _data.writeInterfaceToken(DESCRIPTOR);  \n        _data.writeStringArray(source);  \n        boolean _status = mRemote.transact(Stub.TRANSACTION_copyArrayInOut, _data, _reply, 0);  \n        if (!_status &amp;&amp; getDefaultImpl() != null) {  \n            getDefaultImpl().copyArrayInOut(source);  \n            return;  \n        }  \n        _reply.readException();  \n        _reply.readStringArray(source);  \n    } finally {  \n        _reply.recycle();  \n        _data.recycle();  \n    }  \n}\n</code></pre> <p>\u5bf9\u6bd4 copyArrayInOut \u548c copyArrayIn\u3001copyArrayOut\u7684\u533a\u522b\u53ef\u4ee5\u77e5\u9053\uff1b\u5982\u679c\u6307\u5b9atag\u4e3a inout\uff0c\u90a3\u4e48client\u7aef\u65e2\u4ece\u6b64\u5904\u4f20\u5165\u6570\u636e\uff0c\u53c8\u4ece\u6b64\u5904\u53d6\u51faserver\u586b\u5145\u7684\u7ed3\u679c\u3002</p> <p>\u603b\u7ed3\uff1a \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u975e\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u4e0d\u662fString\u548cCharSequence\u7c7b\u578b\u7684\uff0c\u9700\u8981\u6709\u65b9\u5411\u6307\u793a\uff0c\u5305\u62ecin\u3001out\u548cinout\u3002 in\uff1aclient\u7aef\u5c06\u53c2\u6570\u8bbe\u5b9a\u597d\uff0c\u4f20\u7ed9server\uff0cserver\u7aef\u62f7\u8d1d\u3001\u4f7f\u7528\u3002 out\uff1aclient\u5c06\u63a5\u53e3\u3001\u5730\u5740\u7b49\u201c\u7a7a\u58f3\u201d\u4f20\u7ed9server\uff0cserver\u5c06\u8fd0\u7b97\u7ed3\u679c\u586b\u5145\u8fdb\u53bb\uff0c\u7136\u540eclient\u4ece\u4e2d\u53d6\u51fa\u8fd0\u7b97\u7ed3\u679c\u3002 inout\uff1aclient\u7aef\u65e2\u4ece\u6b64\u5904\u4f20\u5165\u6570\u636e\uff0c\u53c8\u4ece\u6b64\u5904\u53d6\u51faserver\u586b\u5145\u7684\u7ed3\u679c\u3002</p> <p>\u5c06\u5b8c\u6210in\u529f\u80fd\u7684\u8bbe\u6210out\u3001\u6216out\u529f\u80fd\u7684\u8bbe\u6210in\uff0c\u90fd\u4f1a\u62a5\u9519\u3002\u82e5\u5c06\u8fde\u4e2a\u5747\u8bbe\u6210inout\uff0c\u5219\u901a\u8fc7\uff0c\u4f46\u589e\u52a0\u4e86\u5e8f\u5217\u5316\u7684\u6b65\u9aa4\uff0c\u767d\u767d\u6d6a\u8d39\u8fd0\u7b97\u8d44\u6e90\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/intro/","title":"Binder\u6982\u8ff0","text":"","tags":["Android","Binder"]},{"location":"android/binder/intro/#binder","title":"Binder\u673a\u5236\u6587\u7ae0\u5217\u8868","text":"<p>Binder\u6982\u8ff0</p> <p>Binder\u673a\u523601-\u9a71\u52a8</p> <p>Binder\u673a\u523602-ServiceManager</p> <p>Binder\u673a\u523603-Framework-Native</p> <p>Binder\u673a\u523604-Framework-Jave Binder\u673a\u523605-AIDL Binder\u673a\u523606-\u6846\u67b6 Binder\u673a\u523607-\u5b9e\u4f8b\u5206\u6790 Binder\u673a\u523608-\u603b\u7ed3 Ashmem\u7b80\u4ecb\uff08Android IPC\u4f20\u8f93\u5927\u6570\u636e\uff09</p>","tags":["Android","Binder"]},{"location":"android/binder/intro/#_1","title":"\u7b80\u4ecb","text":"<p>\u5728Android\u7684\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u5e94\u7528\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\uff0c\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u673a\uff0c\u5e94\u7528\u548c\u5e94\u7528\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u4e0d\u80fd\u5171\u4eab\u6570\u636e\u7684\uff0c\u4f46\u662f\u6211\u4eec\u7528\u5230Activity\u3001Service\u3001Context\u3001provider\u7b49\u529f\u80fd\u6070\u6070\u505a\u4e86\u5f88\u591a\u6570\u636e\u4f20\u8f93\u3002\u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u6211\u4eec\u4e86\u89e3\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236-IPC\u3002</p> <p>\u5728Android\u4e2d\u5e38\u5e38\u4f7f\u7528\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u6709\u5171\u4eab\u5185\u5b58\u3001\u7ba1\u9053\u3001\u4fe1\u53f7\u5904\u7406\u3001socket\u3001Binder\u7b49\uff0c\u5927\u90e8\u5206\u573a\u666f\u4e0b\u4f7f\u7528\u7684IPC\u90fd\u662fBinder\u3002Binder\u76f8\u8f83\u4e8e\u4f20\u7edfIPC\u6765\u8bf4\u66f4\u9002\u5408\u4e8eAndroid\u7cfb\u7edf\uff0c\u5177\u4f53\u539f\u56e0\u7684\u5305\u62ec\u5982\u4e0b\u4e09\u70b9\uff1a</p> <ul> <li>Binder\u672c\u8eab\u662fC/S\u67b6\u6784\u7684\uff0c\u8fd9\u4e00\u70b9\u66f4\u7b26\u5408Android\u7cfb\u7edf\u7684\u67b6\u6784</li> <li>\u6027\u80fd\u4e0a\u66f4\u6709\u4f18\u52bf\uff1a\u7ba1\u9053\uff0c\u6d88\u606f\u961f\u5217\uff0cSocket\u7684\u901a\u8baf\u90fd\u9700\u8981\u4e24\u6b21\u6570\u636e\u62f7\u8d1d\uff0c\u800cBinder\u53ea\u9700\u8981\u4e00\u6b21\u3002</li> <li>\u5b89\u5168\u6027\u66f4\u597d\uff1a\u4f20\u7edfIPC\u5f62\u5f0f\uff0c\u65e0\u6cd5\u5f97\u5230\u5bf9\u65b9\u7684\u8eab\u4efd\u6807\u8bc6\uff08UID/GID)\uff0c\u800c\u5728\u4f7f\u7528Binder IPC\u65f6\uff0c\u8fd9\u4e9b\u8eab\u4efd\u6807\u793a\u662f\u8ddf\u968f\u8c03\u7528\u8fc7\u7a0b\u800c\u81ea\u52a8\u4f20\u9012\u7684\u3002Server\u7aef\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u77e5\u9053Client\u7aef\u7684\u8eab\u4efd\uff0c\u975e\u5e38\u4fbf\u4e8e\u505a\u5b89\u5168\u68c0\u67e5\u3002</li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/intro/#_2","title":"\u67b6\u6784","text":"<p>\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cBinder\u7684\u5b9e\u73b0\u5206\u4e3a\uff1a</p> <ul> <li>\u9a71\u52a8\u5c42</li> <li>framework\u5c42</li> <li>C++</li> <li>JNI</li> <li>Java</li> </ul> <p>\u9a71\u52a8\u5c42\u4f4d\u4e8eLinux\u5185\u6838\u4e2d\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u5e95\u5c42\u7684\u6570\u636e\u4f20\u9012\uff0c\u5bf9\u8c61\u6807\u8bc6\uff0c\u7ebf\u7a0b\u7ba1\u7406\uff0c\u8c03\u7528\u8fc7\u7a0b\u63a7\u5236\u7b49\u529f\u80fd\u3002\u9a71\u52a8\u5c42\u662f\u6574\u4e2aBinder\u673a\u5236\u7684\u6838\u5fc3\u3002</p> <p>Framework\u5c42\u4ee5\u9a71\u52a8\u5c42\u4e3a\u57fa\u7840\uff0c\u63d0\u4f9b\u4e86\u5e94\u7528\u5f00\u53d1\u7684\u57fa\u7840\u8bbe\u65bd\u3002Framework\u5c42\u65e2\u5305\u542b\u4e86C++\u90e8\u5206\u7684\u5b9e\u73b0\uff0c\u4e5f\u5305\u542b\u4e86Java\u90e8\u5206\u7684\u5b9e\u73b0\u3002\u4e3a\u4e86\u80fd\u5c06C++\u7684\u5b9e\u73b0\u590d\u7528\u5230Java\u7aef\uff0c\u4e2d\u95f4\u901a\u8fc7JNI\u8fdb\u884c\u8854\u63a5\u3002</p> <p>\u5f00\u53d1\u8005\u53ef\u4ee5\u5728Framework\u4e4b\u4e0a\u5229\u7528Binder\u63d0\u4f9b\u7684\u673a\u5236\u6765\u8fdb\u884c\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u5f00\u53d1\u3002\u5176\u5b9e\u4e0d\u4ec5\u4ec5\u662f\u7b2c\u4e09\u65b9\u5f00\u53d1\u8005\uff0cAndroid\u7cfb\u7edf\u4e2d\u672c\u8eab\u4e5f\u5305\u542b\u5f88\u591a\u7cfb\u7edf\u670d\u52a1\u90fd\u662f\u57fa\u4e8eBinder\u6846\u67b6\u5f00\u53d1\u7684\u3002\u5176\u4e2dBinder\u6846\u67b6\u662f\u5178\u578b\u7684C/S\u67b6\u6784\u3002\u6240\u4ee5\u5728\u540e\u9762\u4e2d\uff0c \u6211\u4eec\u628a\u670d\u52a1\u7684\u8bf7\u6c42\u65b9\u79f0\u4e3aClient\uff0c\u670d\u52a1\u7684\u5b9e\u73b0\u65b9\u79f0\u4e4bServer\u3002Clinet\u5bf9\u4e8eServer\u7684\u8bf7\u6c42\u4f1a\u7ecf\u7531Binder\u9a71\u52a8\u6846\u67b6\u7531\u4e0a\u81f3\u4e0b\u4f20\u9012\u5230\u5185\u6838\u7684Binder\u9a71\u52a8\u4e2d\uff0c\u8bf7\u6c42\u4e2d\u5305\u542b\u4e86Client\u5c06\u8981\u8c03\u7528\u7684\u547d\u4ee4\u548c\u53c2\u6570\u3002\u8bf7\u6c42\u5230\u4e86Binder\u9a71\u52a8\u4ee5\u540e\uff0c\u5728\u786e\u5b9a\u4e86\u670d\u52a1\u7684\u63d0\u4f9b\u65b9\u4e4b\u540e\uff0c\u518d\u8bb2\u4ece\u4e0b\u81f3\u4e0a\u5c06\u8bf7\u6c42\u4f20\u9012\u7ed9\u5177\u4f53\u7684\u670d\u52a1\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>","tags":["Android","Binder"]},{"location":"android/binder/intro/#_3","title":"\u901a\u4fe1\u539f\u7406","text":"<p>Binder\u901a\u4fe1\u91c7\u7528C/S\u67b6\u6784\uff0c\u4ece\u7ec4\u4ef6\u89c6\u89d2\u6765\u8bf4\uff0c\u5305\u542bClient\u3001Server\u3001ServiceManager\u4ee5\u53cabinder\u9a71\u52a8\uff0c\u5176\u4e2dServiceManager\u7528\u4e8e\u7ba1\u7406\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u670d\u52a1\u3002\u67b6\u6784\u56fe\u5982\u4e0b\u6240\u793a\uff1a</p> <p></p> <p>\u6b64\u5904\u7684Service Manager\u662f\u6307Native\u5c42\u7684ServiceManager\uff08C++\uff09\uff0c\u5e76\u975e\u6307framework\u5c42\u7684ServiceManager(Java)\u3002ServiceManager\u662f\u6574\u4e2aBinder\u901a\u4fe1\u673a\u5236\u7684\u5927\u7ba1\u5bb6\uff0c\u662fAndroid\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236Binder\u7684\u5b88\u62a4\u8fdb\u7a0b\u3002ServiceManager\u5bf9\u4e8eBinder Server\u7684\u7ba1\u7406\u5c31\u597d\u6bd4\u8f66\u7ba1\u6240\u5bf9\u4e8e\u8f66\u724c\u53f7\u7801\u7684\u7684\u7ba1\u7406\uff0c\u6d3e\u51fa\u6240\u5bf9\u4e8e\u8eab\u4efd\u8bc1\u53f7\u7801\u7684\u7ba1\u7406\uff1a\u6bcf\u4e2a\u516c\u5f00\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684Server\u90fd\u9700\u8981\u6ce8\u518c\u5230ServiceManager\u4e2d\uff08\u901a\u8fc7addService\uff09\uff0c\u6ce8\u518c\u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684id\uff08\u8fd9\u4e2aid\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002Client\u8981\u5bf9Server\u53d1\u51fa\u8bf7\u6c42\uff0c\u5c31\u5fc5\u987b\u77e5\u9053\u670d\u52a1\u7aef\u7684id\u3002Client\u9700\u8981\u5148\u6839\u636eServer\u7684id\u901a\u8fc7ServerManager\u62ff\u5230Server\u7684\u6807\u793a\uff08\u901a\u8fc7getService\uff09\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u6807\u793a\u4e0eServer\u8fdb\u884c\u901a\u4fe1\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/intro/#_4","title":"\u6e90\u7801","text":"<ul> <li> <p>\u9a71\u52a8 <pre><code>https://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/drivers/android/\n\n$ tree kernel/drivers/android/\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 binder.c\n\u251c\u2500\u2500 binder_alloc.c\n\u251c\u2500\u2500 binder_alloc.h\n\u251c\u2500\u2500 binder_alloc_selftest.c\n\u251c\u2500\u2500 binder_internal.h\n\u251c\u2500\u2500 binder_trace.h\n\u251c\u2500\u2500 binderfs.c\n\u2514\u2500\u2500 vendor_hooks.c\n\n\nhttps://android.googlesource.com/kernel/common/+/refs/tags/5.4-android11-0/include/uapi/linux/android/\n\n$ tree kernel/include/uapi/linux/android/\n\u251c\u2500\u2500 binder.h\n\u2514\u2500\u2500 binderfs.h\n</code></pre></p> </li> <li> <p>native <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/native/libs/binder/\n\n$ tree frameworks/native/libs/binder/\n\u251c\u2500\u2500 Binder.cpp\n\u251c\u2500\u2500 BpBinder.cpp\n\u251c\u2500\u2500 IInterface.cpp\n\u251c\u2500\u2500 IPCThreadState.cpp\n\u251c\u2500\u2500 IServiceManager.cpp\n\u251c\u2500\u2500 Parcel.cpp\n\u251c\u2500\u2500 ProcessState.cpp\n\u251c\u2500\u2500 include\n \u00a0\u00a0 \u251c\u2500\u2500 binder\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 Binder.h\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 BinderService.h\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 BpBinder.h\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 IBinder.h\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 IInterface.h\n     \u00a0\u00a0 \u251c\u2500\u2500 IPCThreadState.h\n     \u00a0\u00a0 \u251c\u2500\u2500 IServiceManager.h\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 ProcessState.h\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/native/cmds/servicemanager/\n\n$ tree frameworks/native/cmds/servicemanager/\n\u251c\u2500\u2500 Access.cpp\n\u251c\u2500\u2500 Access.h\n\u251c\u2500\u2500 Android.bp\n\u251c\u2500\u2500 ServiceManager.cpp\n\u251c\u2500\u2500 ServiceManager.h\n\u251c\u2500\u2500 TEST_MAPPING\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 servicemanager.rc\n\u251c\u2500\u2500 test_sm.cpp\n\u2514\u2500\u2500 vndservicemanager.rc\n</code></pre></p> </li> <li> <p>Java&amp;jni <pre><code>http://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/jni/\n\n$ tree frameworks/base/core/jni/\n\u251c\u2500\u2500 AndroidRuntime.cpp\n\u251c\u2500\u2500 android_os_HidlMemory.cpp\n\u251c\u2500\u2500 android_os_HidlMemory.h\n\u251c\u2500\u2500 android_os_HidlSupport.cpp\n\u251c\u2500\u2500 android_os_HwBinder.cpp\n\u251c\u2500\u2500 android_os_HwBinder.h\n\u251c\u2500\u2500 android_os_HwParcel.cpp\n\u251c\u2500\u2500 android_os_HwParcel.h\n\u251c\u2500\u2500 android_os_HwRemoteBinder.cpp\n\u251c\u2500\u2500 android_os_HwRemoteBinder.h\n\u251c\u2500\u2500 android_os_Parcel.cpp\n\u251c\u2500\u2500 android_os_Parcel.h\n\u251c\u2500\u2500 android_util_Binder.cpp\n\u251c\u2500\u2500 android_util_Binder.h\n\u251c\u2500\u2500 android_util_Process.cpp\n\u251c\u2500\u2500 hwbinder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 EphemeralStorage.cpp\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 EphemeralStorage.h\n\u251c\u2500\u2500 include\n \u00a0\u00a0 \u2514\u2500\u2500 android_runtime\n\u00a0 \u00a0     \u251c\u2500\u2500 AndroidRuntime.h\n\n\nhttp://aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/\n\n$ tree frameworks/base/core/java/android/os/\n\u251c\u2500\u2500 HidlMemory.java\n\u251c\u2500\u2500 HidlMemoryUtil.java\n\u251c\u2500\u2500 HidlSupport.java\n\u251c\u2500\u2500 HwBinder.java\n\u251c\u2500\u2500 HwBlob.java\n\u251c\u2500\u2500 HwParcel.java\n\u251c\u2500\u2500 HwRemoteBinder.java\n\u251c\u2500\u2500 IBinder.java\n\u251c\u2500\u2500 IHwBinder.java\n\u251c\u2500\u2500 IHwInterface.java\n\u251c\u2500\u2500 IInterface.java\n\u251c\u2500\u2500 Parcel.java\n\u251c\u2500\u2500 Parcelable.java\n\u251c\u2500\u2500 ServiceManager.java\n\u251c\u2500\u2500 ServiceManagerNative.java\n</code></pre></p> </li> </ul>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/","title":"am trace-ipc \u5206\u6790","text":"","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#_1","title":"\u4e00\u3001\u4f7f\u7528","text":"","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#_2","title":"\u5b98\u7f51\u4ecb\u7ecd","text":"<p>\u94fe\u63a5\uff1aSlow rendering</p> <p>\u5982\u679c\u60a8\u6709 binder \u4e8b\u52a1\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u00a0adb\u00a0\u547d\u4ee4\u6355\u83b7\u5176\u8c03\u7528\u5806\u6808\uff1a</p> <pre><code>$ adb shell am trace-ipc start\n    \u2026 use the app - scroll/animate ...\n    $ adb shell am trace-ipc stop --dump-file /data/local/tmp/ipc-trace.txt\n    $ adb pull /data/local/tmp/ipc-trace.txt\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#_3","title":"\u547d\u4ee4\u63d0\u793a","text":"<pre><code>:/ # am\nActivity manager (activity) commands:\n  trace-ipc [start|stop] [--dump-file &lt;FILE&gt;]\n      Trace IPC transactions.\n      start: start tracing IPC transactions.\n      stop: stop tracing IPC transactions and dump the results to file.\n      --dump-file &lt;FILE&gt;: Specify the file the trace should be dumped to.\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#_4","title":"\u5c0f\u7ed3","text":"<p>1\u3001\u6293\u6240\u6709\u8fdb\u7a0b\u7684java\u5c42\u9762\u7684binder\u8c03\u7528\u6808\uff0c\u53ea\u6293\u53d1\u8d77\u7aef\u7684\u7ebf\u7a0b\u6808\uff0c\u4e5f\u5c31\u662f\u5806\u6808\u7684\u6700\u4e0a\u4e00\u53e5\u603b\u662f</p> <pre><code>Trace: java.lang.Throwable\nandroid.os.BinderProxy.transact(BinderProxy.java:509)\n</code></pre> <p>2\u3001\u6293\u7684\u662f\u4e00\u6bb5\u65f6\u95f4start\u2194stop\uff0c\u6ca1\u6709\u7c7b\u4f3clogcat\u7684\u7f13\u5b58</p> <p>3\u3001\u4e3b\u8981\u7528\u4e8e\u5728java\u5c42\u9762\u4e0a</p> <ul> <li>\u786e\u8ba4\u8c01\uff08\u8fdb\u7a0b\uff09\u8c03\u7528\u4e86\u67d0\u4e2abinder\u670d\u52a1</li> <li>\u786e\u8ba4\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u54ea\u4e9bipc\u52a8\u4f5c</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u5904\u5c40\u9650\u4e8ejava\u5c42\uff0c\u5c40\u9650\u4e8eipc\u3002</p> <ul> <li> <p>\u5982\u679c\u4f60\u7684\u76ee\u7684\u662f\u786e\u8ba4\u6700\u5168\u9762\uff08\u8fdb\u7a0b\u5185+\u8fdb\u7a0b\u5916\uff09\u7684\u4ee3\u7801\u6d41\u7a0b\uff0c\u5219\u8fd8\u9700\u8981cpu-profiler\u5de5\u5177\u6765\u6293\u8fdb\u7a0b\u5185\u7684\u6d41\u7a0b\u3002\u6216\u8005\u662ftraceview\u4e0eSimpleperf\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u60f3\u786e\u8ba4\u6700\u5168\u9762\u7684ipc\u6d41\u7a0b\uff0c\u76ee\u524dnative\u7684ipc\u8bb0\u5f55\u5de5\u5177\u8fd8\u6709\u5f85\u53d1\u6398\u3002</p> </li> </ul> <p>\u4e0b\u9762\u5206\u6790\u6e90\u7801\u5b9e\u73b0\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#_5","title":"\u4e8c\u3001\u6e90\u7801\u5206\u6790","text":"<p>\u4ee3\u7801\u57fa\u4e8eandroid11\u3002am\u547d\u4ee4\u7684\u5b9e\u73b0\u89c1debug\uff1aam\u3001cmd\u547d\u4ee4</p> <p>\u4e66\u63a5\u4e0a\u6587\uff0c</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#activitymanagershellcommandoncommand","title":"ActivityManagerShellCommand#onCommand","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand</p> <pre><code> 176     @Override\n 177     public int onCommand(String cmd) {      \n 183             switch (cmd) {\n 184                 case \"start\":\n 185                 case \"start-activity\":\n 186                     return runStartActivity(pw);\n......\n 203                 case \"trace-ipc\":\n 204                     return runTraceIpc(pw);\n......\n</code></pre> <p>\u8d70\u5230204\u884c</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#activitymanagershellcommandruntraceipc","title":"ActivityManagerShellCommand#runTraceIpc","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand</p> <pre><code> 754     int runTraceIpc(PrintWriter pw) throws RemoteException { \n 755         String op = getNextArgRequired();\n 756         if (op.equals(\"start\")) {\n 757             return runTraceIpcStart(pw);\n 758         } else if (op.equals(\"stop\")) {\n 759             return runTraceIpcStop(pw);\n 760         } else {\n 761             getErrPrintWriter().println(\"Error: unknown trace ipc command '\" + op + \"'\");\n</code></pre> <p>757\u884cstart\uff0c759\u884cstop\u3002\u5148\u770bstart</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#am-trace-ipc-start","title":"am trace-ipc start","text":"","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#activitymanagershellcommandruntraceipcstart","title":"ActivityManagerShellCommand#runTraceIpcStart","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand</p> <pre><code> 168     ActivityManagerShellCommand(ActivityManagerService service, boolean dumping) {\n 169         mInterface = service;     \n----------------------------------------------------------------------------------\n 766     int runTraceIpcStart(PrintWriter pw) throws RemoteException {                      \n 767         pw.println(\"Starting IPC tracing.\");\n 768         pw.flush();\n 769         mInterface.startBinderTracking();\n 770         return 0;\n 771     }\n</code></pre> <p>769\u884c\uff0cmInterface\u662fams\uff0c\u89c1\u6784\u9020\u51fd\u6570169\u884c\u3002\u7ee7\u7eed\u8ddf</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#activitymanagerservicejavastartbindertracking","title":"ActivityManagerService.java#startBinderTracking","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p> <pre><code>18843     public boolean startBinderTracking() throws RemoteException {\n18844         synchronized (this) {\n18845             mBinderTransactionTrackingEnabled = true;\n18846             // TODO: hijacking SET_ACTIVITY_WATCHER, but should be changed to its own\n18847             // permission (same as profileControl).\n18848             if (checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER)\n18849                     != PackageManager.PERMISSION_GRANTED) {\n18850                 throw new SecurityException(\"Requires permission \"\n18851                         + android.Manifest.permission.SET_ACTIVITY_WATCHER);\n18852             }\n18853 \n18854             for (int i = 0; i &lt; mProcessList.mLruProcesses.size(); i++) {\n18855                 ProcessRecord process = mProcessList.mLruProcesses.get(i);\n18856                 if (!processSanityChecksLocked(process)) {\n18857                     continue;\n18858                 }\n18859                 try {\n18860                     process.thread.startBinderTracking();\n18861                 } catch (RemoteException e) {\n</code></pre> <p>18848-18852\u9274\u6743\u3002</p> <p>18854\u884cfor\u5faa\u73af\uff0c\u5c06\u7cfb\u7edf\u7684java\u8fdb\u7a0b\u90fd\u5f00\u542fbinderTracking\uff0c\u91cd\u70b9\u5c31\u662f18860\u884c\u3002</p> <p>\u4e0b\u9762\u8fdb\u5165java\u8fdb\u7a0b\u7684ActivityThread\u4e2d\u8ddf\u8e2a</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#activitythreadjavaapplicationthreadstartbindertracking","title":"ActivityThread.java$ApplicationThread#startBinderTracking","text":"<p>frameworks/base/core/java/android/app/ActivityThread.java</p> <pre><code> 947     private class ApplicationThread extends IApplicationThread.Stub {\n1688         @Override\n1689         public void startBinderTracking() {                                             \n1690             sendMessage(H.START_BINDER_TRACKING, null);\n1691         }     \n--------------------------------------------------------------------------\n1803     class H extends Handler {\n1907         public void handleMessage(Message msg) {\n2042                 case START_BINDER_TRACKING:                                             \n2043                     handleStartBinderTracking();\n2044                     break;\n--------------------------------------------------------------------------\n3842     private void handleStartBinderTracking() {\n3843         Binder.enableTracing();                                                         \n3844     }\n</code></pre>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#binderjavaenabletracing","title":"Binder.java#enableTracing","text":"<p>frameworks/base/core/java/android/os/Binder.java</p> <pre><code> 138     /**\n 139      * Enable Binder IPC tracing.\n 140      *\n 141      * @hide\n 142      */\n 143     public static void enableTracing() {\n 144         sTracingEnabled = true;                                                         \n 145     }\n-------------------------------------------------------------------\n 161     public static boolean isTracingEnabled() {\n 162         return sTracingEnabled;\n 163     }\n</code></pre> <p>144\u884c\uff0c\u5c06\u6807\u5fd7\u4f4d\u7f6etrue\u3002\u4f5c\u7528\u662f\u5728\u6bcf\u6b21java\u4e16\u754c\u53d1\u8d77binder\u8c03\u7528\u7684\u65f6\u5019\uff0c\u6765\u901a\u8fc7\u8fd9\u4e2a\u53c2\u6570\u5224\u65ad\u662f\u5426\u8981\u6293trace\u3002</p>","tags":["Android","Binder"]},{"location":"android/binder/am-trace-ipc/#binderproxyjavatransact","title":"BinderProxy.java#transact","text":"<p>frameworks/base/core/java/android/os/BinderProxy.java</p> <pre><code>495     public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {\n517         final boolean tracingEnabled = Binder.isTracingEnabled();\n518         if (tracingEnabled) {\n519             final Throwable tr = new Throwable();\n520             Binder.getTransactionTracker().addTrace(tr);\n521             StackTraceElement stackTraceElement = tr.getStackTrace()[1];\n522             Trace.traceBegin(Trace.TRACE_TAG_ALWAYS,\n523                     stackTraceElement.getClassName() + \".\" + stackTraceElement.getMethodName());\n524         }\n526         // Make sure the listener won't change while processing a transaction.\n527         final Binder.ProxyTransactListener transactListener = sTransactListener;\n530         if (transactListener != null) {\n531             final int origWorkSourceUid = Binder.getCallingWorkSourceUid();\n532             session = transactListener.onTransactStarted(this, code, flags);\n540         }\n549         try {\n550             return transactNative(code, data, reply, flags);\n551         } finally {\n554             if (transactListener != null) {\n555                 transactListener.onTransactEnded(session);\n556             }\n558             if (tracingEnabled) {\n559                 Trace.traceEnd(Trace.TRACE_TAG_ALWAYS);\n</code></pre> <p>519\u3001520\u884c\u6293\u8c03\u7528\u6808\u653e\u5230TransactionTracker\u91cc\u5b58\u653e</p> <p>522\u548c559\u662f\u6293systrace\uff0c\u6293\u51fa\u6765\u7c7b\u4f3c\u957f\u8fd9\u6837\uff0c\u6709\u8be6\u7ec6\u7684\u7c7b\u540d\u65b9\u6cd5\u540d\uff1a</p> <p></p>","tags":["Android","Binder"]},{"location":"android/car/carservice/start-service/","title":"Android 15 CarService\u6e90\u780101-\u670d\u52a1\u542f\u52a8","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#_1","title":"\u80cc\u666f","text":"<p>SystemServer\u00a0\u4e2d\u4e13\u95e8\u4e3a\u4e86 Automotive OS \u8bbe\u7acb\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u7528\u6765\u7ba1\u7406\u8f66\u673a\u7684\u6838\u5fc3\u670d\u52a1\u00a0CarService\u3002 Car Service \u5b9e\u9645\u4e0a\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a\u662f\u76f4\u63a5\u4e0e\u7cfb\u7edf\u670d\u52a1\u4ea4\u4e92\u7684 builtin app\uff0c\u5176\u5728 Android.bp \u4e2d\u7684 module name \u4e5f\u5c31\u662f CarService\u3002\u53e6\u4e00\u4e2a\u662f\u4e3a\u8be5 builtin app \u63d0\u4f9b\u5b9e\u9645\u529f\u80fd\u5b9e\u73b0\u7684 updatable app\uff0c\u5176\u5728 Android.bp \u4e2d\u7684 module name \u4e5f\u5c31\u662f CarServiceUpdatable\u3002</p> <ul> <li>builtin app</li> </ul> <p>\u7cfb\u7edf\u4e2d\u4e0e\u8f66\u76f8\u5173\u7684\u6838\u5fc3 App\uff0c\u638c\u7ba1\u6700\u91cd\u8981\u7684\u00a0<code>CarService</code>\u00a0\u670d\u52a1\u7c7b\u3002\u76ee\u5f55\u4f4d\u4e8e\uff1apackages/services/Car/service-builtin \u5176 AndroidManifest.xml \u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u5b83\u5177\u6709\u7cfb\u7edf\u6743\u9650\u3001\u4e0e system uid \u5171\u4eab\u6570\u636e\u3002</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;  \n\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"  \n     xmlns:androidprv=\"http://schemas.android.com/apk/prv/res/android\"  \n     package=\"com.android.car\"  \n     coreApp=\"true\"  \n     android:sharedUserId=\"android.uid.system\"&gt;  \n\n    &lt;original-package android:name=\"com.android.car\"/&gt;  \n\n    &lt;application android:label=\"@string/app_title\"  \n         android:directBootAware=\"true\"  \n         android:allowBackup=\"false\"  \n         android:persistent=\"true\"&gt;  \n\n        &lt;!-- Do not add any new service without addressing mainline issues --&gt;  \n        &lt;service android:name=\".CarService\"  \n             android:singleUser=\"true\"  \n             android:exported=\"true\"&gt;  \n            &lt;intent-filter&gt;  \n                &lt;action android:name=\"android.car.ICar\"/&gt;  \n            &lt;/intent-filter&gt;  \n        &lt;/service&gt;\n\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <ul> <li>updatable app</li> </ul> <p>builtin app \u7684\u6240\u6709\u5177\u4f53\u5b9e\u73b0\u4ee5\u53ca\u540e\u7eed\u652f\u6301\u7684\u4e00\u5806\u670d\u52a1\u90fd\u5728 updatable app \u4e2d\u5b9e\u73b0\uff0c\u76ee\u5f55\u4f4d\u4e8e\uff1apackages/services/Car/service \u5176 AndroidManifest.xml \u5982\u4e0b\uff0c\u6240\u6709\u529f\u80fd\u5b9e\u73b0\u5e94\u901a\u8fc7 builtin CarService \u8fdb\u884c\u4ee3\u7406\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a updatable app \u4ec5\u4f5c\u4e3a\u4e00\u4e2a\u66f4\u65b0\u6a21\u5757\uff0c\u5176\u529f\u80fd\u4f9d\u8d56\u4e8e builtin app\uff08\u4f4d\u4e8e <code>packages/services/Car/service-builtin</code> \u4e2d\uff09\u7684\u6838\u5fc3\u670d\u52a1\u3002</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     xmlns:androidprv=\"http://schemas.android.com/apk/prv/res/android\"\n     package=\"com.android.car.updatable\"\n     coreApp=\"true\"&gt;\n\n    &lt;uses-sdk android:minSdkVersion=\"33\"/&gt;\n\n    &lt;application android:label=\"@string/app_title\"\n         android:directBootAware=\"true\"\n         android:allowBackup=\"false\"&gt;\n\n        &lt;!-- Do not add any new components here. Everything should be proxied through builtin\n             carservice --&gt;\n\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <p>\u6211\u4eec\u901a\u8fc7\u4e00\u5f20\u8868\u683c\u5bf9CarService\u76f8\u5173\u7ec4\u4ef6\u7684\u6784\u6210\u8fdb\u884c\u603b\u7ed3\u3002</p> car\u76f8\u5173\u7ec4\u4ef6 \u6240\u5c5e\u8fdb\u7a0b \u4f5c\u7528 CarServiceHelperService SystemServer \u7ba1\u7406 Car Serivce \u7684\u7cfb\u7edf\u670d\u52a1 CarService builtin app Car \u6838\u5fc3\u670d\u52a1 CarServiceUpdatable updatable app Car \u6838\u5fc3\u670d\u52a1\u7684\u5177\u4f53\u5b9e\u73b0 Car API android.car.jar Car API SDK <p>CarService\u5728\u7cfb\u7edf\u4e2d\u7684\u4f4d\u7f6e\u4ee5\u53ca\u4e0e\u5916\u90e8\u7684\u4ea4\u4e92\u94fe\u8def\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u5f20\u603b\u4f53\u56fe\u6765\u76f4\u89c2\u5c55\u793a\u3002</p> <p></p> <p>\u5173\u4e8e<code>CarService</code>\u670d\u52a1\u76f8\u5173\u6a21\u5757\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd9\u91cc\u4ec5\u505a\u7b80\u8981\u6982\u8ff0\uff0c\u5177\u4f53\u6784\u6210\u5c06\u5728\u540e\u7eed\u7684<code>CarService</code>\u7f16\u8bd1\u7cfb\u5217\u6587\u7ae0\u4e2d\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#system_server","title":"system_server\u8fdb\u7a0b","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#systemserverstartotherservices","title":"SystemServer.startOtherServices()","text":"<pre><code>// frameworks/base/services/java/com/android/server/SystemServer.java\n\n// SystemServer \u662f Android \u7cfb\u7edf\u542f\u52a8\u7684\u6838\u5fc3\u7c7b\u4e4b\u4e00\uff0c\u8d1f\u8d23\u542f\u52a8\u6240\u6709\u7684\u7cfb\u7edf\u670d\u52a1\u3002\npublic final class SystemServer implements Dumpable {\n\n    // \u5b9a\u4e49\u4e86\u6c7d\u8f66\u670d\u52a1\u5e2e\u52a9\u5668\u7c7b\u7684\u5b8c\u6574\u7c7b\u540d\uff0c\u7528\u4e8e\u52a8\u6001\u52a0\u8f7d\u8be5\u670d\u52a1\u3002\n    private static final String CAR_SERVICE_HELPER_SERVICE_CLASS =\n            \"com.android.internal.car.CarServiceHelperService\";\n\n\n    /**\n     * @param t \u7528\u4e8e\u8bb0\u5f55\u670d\u52a1\u542f\u52a8\u8fc7\u7a0b\u4e2d\u7684\u65f6\u95f4\u8ddf\u8e2a\u548c\u65e5\u5fd7\u8bb0\u5f55\u3002\n     */\n    private void startOtherServices(@NonNull TimingsTraceAndSlog t) {        \n        t.traceBegin(\"startOtherServices\");\n\n        // \u68c0\u67e5\u8bbe\u5907\u662f\u5426\u652f\u6301\u6c7d\u8f66\u76f8\u5173\u529f\u80fd\uff08\u662f\u5426\u4e3a Automotive \u7cfb\u7edf\uff09\u3002\n        boolean isAutomotive = mPackageManager\n                .hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);\n\n        // \u5982\u679c\u8bbe\u5907\u652f\u6301\u6c7d\u8f66\u529f\u80fd\uff0c\u542f\u52a8\u6c7d\u8f66\u670d\u52a1\u5e2e\u52a9\u5668\uff08CarServiceHelperService\uff09\u3002\n        if (isAutomotive) {\n            // \u5f00\u59cb\u8ffd\u8e2a \"StartCarServiceHelperService\" \u7684\u542f\u52a8\u8fc7\u7a0b\u3002\n            t.traceBegin(\"StartCarServiceHelperService\");\n\n            // \u52a8\u6001\u52a0\u8f7d\u5e76\u542f\u52a8 CarServiceHelperService \u670d\u52a1\u7c7b\u3002\n            final SystemService cshs = mSystemServiceManager\n                    .startService(CAR_SERVICE_HELPER_SERVICE_CLASS);\n\n            // \u5982\u679c\u542f\u52a8\u7684\u670d\u52a1\u5b9e\u73b0\u4e86 Dumpable \u63a5\u53e3\uff0c\u5219\u5c06\u5176\u6ce8\u518c\u5230\u8c03\u8bd5\u5de5\u5177\u4e2d\u3002\n            if (cshs instanceof Dumpable) {\n                mDumper.addDumpable((Dumpable) cshs);\n            }\n\n            // \u5982\u679c\u542f\u52a8\u7684\u670d\u52a1\u5b9e\u73b0\u4e86 DevicePolicySafetyChecker \u63a5\u53e3\uff0c\n            // \u5219\u5c06\u5176\u8bbe\u7f6e\u4e3a\u8bbe\u5907\u7b56\u7565\u7ba1\u7406\u7684\u5b89\u5168\u68c0\u67e5\u5668\u3002\n            if (cshs instanceof DevicePolicySafetyChecker) {\n                dpms.setDevicePolicySafetyChecker((DevicePolicySafetyChecker) cshs);\n            }\n\n            // \u8bb0\u5f55 \"StartCarServiceHelperService\" \u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\u3002\n            t.traceEnd();\n        }\n\n        t.traceEnd(); // startOtherServices\n    }\n\n}\n</code></pre> <p>SystemServer.startOtherServices() \u91cc\u52a8\u6001\u52a0\u8f7d\u5e76\u542f\u52a8 CarServiceHelperService \u670d\u52a1\u7c7b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#systemservicemanagerstartservice","title":"SystemServiceManager.startService()","text":"<pre><code>// frameworks/base/services/core/java/com/android/server/SystemServiceManager.java\n\n// SystemServiceManager \u662f Android \u7cfb\u7edf\u670d\u52a1\u7ba1\u7406\u7684\u6838\u5fc3\u7c7b\u3002  \n// \u8d1f\u8d23\u521b\u5efa\u3001\u542f\u52a8\u548c\u7ba1\u7406\u7cfb\u7edf\u670d\u52a1\u3002  \npublic final class SystemServiceManager implements Dumpable {  \n\n    /**  \n     * \u901a\u8fc7\u7c7b\u540d\u4ece\u5f53\u524d {@code SYSTEMSERVERCLASSPATH} \u542f\u52a8\u670d\u52a1\u3002  \n     *  \n     * \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a  \n     * - \u670d\u52a1\u5b9a\u4e49\u5728\u6784\u5efa\u65f6\u65e0\u6cd5\u901a\u8fc7 {@code services.jar} \u89e3\u6790\u3002  \n     * - \u670d\u52a1\u5b9a\u4e49\u5728 APEX \u5305\uff08\u7531 {@code PRODUCT_APEX_SYSTEM_SERVER_JARS} \u5b9a\u4e49\uff09\u3002  \n     * - \u670d\u52a1\u6765\u81ea\u4e0b\u6e38\u81ea\u5b9a\u4e49\u7684 jar \u5305\uff08\u7531 {@code PRODUCT_SYSTEM_SERVER_JARS} \u5b9a\u4e49\uff09\u3002  \n     *  \n     * \u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u63a8\u8350\u76f4\u63a5\u4f7f\u7528\u7c7b\u578b\u663e\u5f0f\u7684 {@link #startService(Class)} \u65b9\u6cd5\u3002  \n     *  \n     * @param className \u670d\u52a1\u7c7b\u7684\u5b8c\u6574\u7c7b\u540d\u3002  \n     * @return \u542f\u52a8\u7684\u670d\u52a1\u5b9e\u4f8b\u3002  \n     */  \n    @android.ravenwood.annotation.RavenwoodKeep  \n    public SystemService startService(String className) {  \n        // \u4ece\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u6307\u5b9a\u7684\u670d\u52a1\u7c7b\u3002  \n        final Class&lt;SystemService&gt; serviceClass = loadClassFromLoader(  \n                className, this.getClass().getClassLoader());  \n        // \u8c03\u7528\u663e\u5f0f\u7c7b\u578b\u7684\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u3002  \n        return startService(serviceClass);  \n    }  \n\n    private static Class&lt;SystemService&gt; loadClassFromLoader(String className,  \n                                                            ClassLoader classLoader) {  \n        try {  \n            return (Class&lt;SystemService&gt;) Class.forName(className, true, classLoader);  \n        } catch (ClassNotFoundException ex) {  \n            ...  \n        }  \n    }  \n\n    /**  \n     * \u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a\u7cfb\u7edf\u670d\u52a1\u3002\u8be5\u670d\u52a1\u7c7b\u5fc5\u987b\u662f {@link com.android.server.SystemService} \u7684\u5b50\u7c7b\u3002  \n     *  \n     * @param serviceClass \u7cfb\u7edf\u670d\u52a1\u7c7b\uff0c\u5fc5\u987b\u5b9e\u73b0 SystemService \u63a5\u53e3\u3002  \n     * @return \u542f\u52a8\u7684\u670d\u52a1\u5b9e\u4f8b\uff08\u6c38\u4e0d\u4e3a null\uff09\u3002  \n     * @throws RuntimeException \u5982\u679c\u670d\u52a1\u542f\u52a8\u5931\u8d25\uff0c\u5219\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002  \n     */  \n    @android.ravenwood.annotation.RavenwoodKeep  \n    @UsesReflection(  \n            @KeepTarget(  \n                    instanceOfClassConstantExclusive = SystemService.class,  \n                    methodName = \"&lt;init&gt;\",  \n                    methodParameterTypePatterns = {@TypePattern(constant = Context.class)}))  \n    public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) {  \n        try {  \n            // \u83b7\u53d6\u670d\u52a1\u7c7b\u7684\u5b8c\u6574\u540d\u79f0\uff0c\u7528\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u3002  \n            final String name = serviceClass.getName();  \n            Slog.i(TAG, \"Starting \" + name);  \n\n            // \u4f7f\u7528 Trace \u5de5\u5177\u8bb0\u5f55\u670d\u52a1\u542f\u52a8\u7684\u65f6\u95f4\u70b9\uff0c\u7528\u4e8e\u6027\u80fd\u5206\u6790\u3002  \n            Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, \"StartService \" + name);  \n\n            // \u68c0\u67e5\u670d\u52a1\u7c7b\u662f\u5426\u7ee7\u627f\u81ea SystemService\u3002  \n            if (!SystemService.class.isAssignableFrom(serviceClass)) {  \n                throw new RuntimeException(\"Failed to create \" + name  \n                        + \": service must extend \" + SystemService.class.getName());  \n            }  \n\n            // \u521b\u5efa\u670d\u52a1\u5b9e\u4f8b\u3002  \n            final T service;  \n            try {  \n                // \u83b7\u53d6\u670d\u52a1\u7c7b\u7684\u6784\u9020\u5668\uff08\u5fc5\u987b\u662f\u63a5\u6536 Context \u53c2\u6570\u7684\u516c\u5171\u6784\u9020\u5668\uff09\u3002  \n                Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);  \n                // \u4f7f\u7528\u53cd\u5c04\u8c03\u7528\u6784\u9020\u5668\u5b9e\u4f8b\u5316\u670d\u52a1\u5bf9\u8c61\u3002  \n                service = constructor.newInstance(mContext);  \n            }  \n            ...  \n\n            // \u8c03\u7528\u542f\u52a8\u670d\u52a1\u7684\u65b9\u6cd5\u3002  \n            startService(service);  \n\n            // \u8fd4\u56de\u670d\u52a1\u5b9e\u4f8b\u3002  \n            return service;  \n        } finally {  \n            // \u6807\u8bb0\u670d\u52a1\u542f\u52a8\u7684\u7ed3\u675f\u65f6\u95f4\u3002  \n            Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);  \n        }  \n    }  \n\n    /**  \n     * \u542f\u52a8\u7cfb\u7edf\u670d\u52a1\u5b9e\u4f8b\u3002  \n     *  \n     * @param service \u7cfb\u7edf\u670d\u52a1\u5b9e\u4f8b\uff08\u5fc5\u987b\u7ee7\u627f\u81ea SystemService\uff09\u3002  \n     */  \n    @android.ravenwood.annotation.RavenwoodKeep  \n    public void startService(@NonNull final SystemService service) {  \n        // \u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u7ecf\u542f\u52a8\uff08\u901a\u8fc7\u7c7b\u540d\u5224\u65ad\uff09\u3002  \n        String className = service.getClass().getName();  \n        if (mServiceClassnames.contains(className)) {  \n            Slog.i(TAG, \"Not starting an already started service \" + className);  \n            return;  \n        }  \n        // \u5982\u679c\u670d\u52a1\u5c1a\u672a\u542f\u52a8\uff0c\u5219\u5c06\u5176\u7c7b\u540d\u6dfb\u52a0\u5230\u5df2\u542f\u52a8\u670d\u52a1\u5217\u8868\u3002  \n        mServiceClassnames.add(className);  \n\n        // \u5c06\u670d\u52a1\u6ce8\u518c\u5230\u7cfb\u7edf\u670d\u52a1\u5217\u8868\u4e2d\u3002  \n        mServices.add(service);  \n\n        // \u5f00\u59cb\u670d\u52a1\u542f\u52a8\u7684\u8ba1\u65f6\u3002  \n        long time = SystemClock.elapsedRealtime();  \n        try {  \n            // \u8c03\u7528\u670d\u52a1\u7684 onStart \u65b9\u6cd5\u5b8c\u6210\u5b9e\u9645\u542f\u52a8\u903b\u8f91\u3002  \n            service.onStart();  \n        } catch (RuntimeException ex) {  \n            // \u5982\u679c onStart \u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002  \n            throw new RuntimeException(\"Failed to start service \" + service.getClass().getName()  \n                    + \": onStart threw an exception\", ex);  \n        }  \n\n        // \u68c0\u67e5\u670d\u52a1\u542f\u52a8\u7684\u8017\u65f6\uff0c\u5982\u679c\u8017\u65f6\u8fc7\u957f\u5219\u53d1\u51fa\u8b66\u544a\u3002  \n        warnIfTooLong(SystemClock.elapsedRealtime() - time, service, \"onStart\");  \n    }  \n}\n</code></pre> <p>\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u6784\u9020\u5668\u5b9e\u4f8b\u5316\u670d\u52a1\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528\u670d\u52a1\u7684 onStart \u65b9\u6cd5\u5b8c\u6210\u5b9e\u9645\u542f\u52a8\u903b\u8f91\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#carservicehelperserviceonstart","title":"CarServiceHelperService.onStart()","text":"<pre><code>// frameworks/opt/car/services/builtInServices/src/com/android/internal/car/CarServiceHelperService.java\n\n/**  \n * \u8f66\u8f7d\u670d\u52a1\u7684\u7cfb\u7edf\u670d\u52a1\u7aef\u8f85\u52a9\u670d\u52a1\u3002\u7528\u4e8e\u542f\u52a8\u8f66\u8f7d\u670d\u52a1\uff08CarService\uff09\u5e76\u4e3a\u5176\u63d0\u4f9b\u5fc5\u8981\u7684 API\u3002  \n * \u4ec5\u9002\u7528\u4e8e\u8f66\u8f7d\u4ea7\u54c1\u3002  \n *  \n * @hide  \n */  \npublic class CarServiceHelperService extends SystemService  \n        implements Dumpable, DevicePolicySafetyChecker, CarServiceHelperInterface {  \n\n    // \u52a8\u6001\u66f4\u65b0\u7684\u8f85\u52a9\u670d\u52a1\u5bf9\u8c61\uff0c\u7528\u4e8e\u6269\u5c55\u548c\u7075\u6d3b\u7ba1\u7406 CarService \u7684\u529f\u80fd  \n    private CarServiceHelperServiceUpdatable mCarServiceHelperServiceUpdatable;  \n\n    /**  \n     * \u6784\u9020\u51fd\u6570\uff1a\u4f7f\u7528\u9ed8\u8ba4\u7684\u7ec4\u4ef6\u5b9e\u4f8b\u6765\u521d\u59cb\u5316 CarServiceHelperService\u3002  \n     * @param context \u7cfb\u7edf\u670d\u52a1\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90\u3002  \n     */  \n    public CarServiceHelperService(Context context) {  \n        // \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0\u7684\u4f9d\u8d56\u7ec4\u4ef6  \n        this(context,  \n                new CarLaunchParamsModifier(context), // \u542f\u52a8\u53c2\u6570\u4fee\u6539\u5668  \n                new CarWatchdogDaemonHelper(TAG), // \u7528\u4e8e\u76d1\u63a7\u8f66\u8f7d\u7cfb\u7edf\u8fd0\u884c\u72b6\u6001  \n                /* carServiceHelperServiceUpdatable= */ null, // \u6ca1\u6709\u63d0\u4f9b\u66f4\u65b0\u670d\u52a1\u5b9e\u4f8b  \n                /* carDevicePolicySafetyChecker= */ null, // \u6ca1\u6709\u63d0\u4f9b\u8bbe\u5907\u5b89\u5168\u68c0\u67e5\u5668  \n                new CarActivityInterceptor(), // \u6d3b\u52a8\u62e6\u622a\u5668  \n                new CarDisplayCompatScaleProvider(context) // \u663e\u793a\u7f29\u653e\u9002\u914d\u5668  \n        );  \n    }  \n\n    /**  \n     * \u6d4b\u8bd5\u6784\u9020\u51fd\u6570\uff1a\u63d0\u4f9b\u5bf9\u4f9d\u8d56\u7ec4\u4ef6\u7684\u5b8c\u5168\u63a7\u5236\uff0c\u7528\u4e8e\u66f4\u7075\u6d3b\u7684\u521d\u59cb\u5316\u3002  \n     * @param context \u7cfb\u7edf\u670d\u52a1\u4e0a\u4e0b\u6587  \n     * @param carLaunchParamsModifier \u542f\u52a8\u53c2\u6570\u4fee\u6539\u5668  \n     * @param carWatchdogDaemonHelper \u5b88\u62a4\u7a0b\u5e8f\u8f85\u52a9\u5de5\u5177  \n     * @param carServiceHelperServiceUpdatable \u53ef\u66f4\u65b0\u7684\u8f85\u52a9\u670d\u52a1  \n     * @param carDevicePolicySafetyChecker \u8bbe\u5907\u7b56\u7565\u5b89\u5168\u68c0\u67e5\u5668  \n     * @param carActivityInterceptor \u6d3b\u52a8\u62e6\u622a\u5668  \n     * @param carDisplayCompatScaleProvider \u663e\u793a\u9002\u914d\u7f29\u653e\u5668  \n     */  \n    @VisibleForTesting  \n    CarServiceHelperService(  \n            Context context,  \n            CarLaunchParamsModifier carLaunchParamsModifier,  \n            CarWatchdogDaemonHelper carWatchdogDaemonHelper,  \n            @Nullable CarServiceHelperServiceUpdatable carServiceHelperServiceUpdatable,  \n            @Nullable CarDevicePolicySafetyChecker carDevicePolicySafetyChecker,  \n            @Nullable CarActivityInterceptor carActivityInterceptor,  \n            @Nullable CarDisplayCompatScaleProvider carDisplayCompatScaleProvider) {  \n        // \u8c03\u7528\u7236\u7c7b SystemService \u7684\u6784\u9020\u51fd\u6570  \n        super(context);  \n\n        // \u4fdd\u5b58\u4f20\u5165\u7684\u4e0a\u4e0b\u6587\u548c\u7ec4\u4ef6\u5f15\u7528  \n        mContext = context;  \n\n        // \u542f\u52a8\u540e\u53f0\u7ebf\u7a0b\u5e76\u83b7\u53d6\u5176\u6d88\u606f\u961f\u5217\u5904\u7406\u7a0b\u5e8f  \n        mHandlerThread.start();  \n        mHandler = new Handler(mHandlerThread.getLooper());  \n\n        // \u4fdd\u5b58\u5176\u4ed6\u4f9d\u8d56\u7ec4\u4ef6\u7684\u5f15\u7528  \n        mCarLaunchParamsModifier = carLaunchParamsModifier;  \n        mCarActivityInterceptor = carActivityInterceptor;  \n        mCarDisplayCompatScaleProvider = carDisplayCompatScaleProvider;  \n        mCarWatchdogDaemonHelper = carWatchdogDaemonHelper;  \n\n        // \u521d\u59cb\u5316\u52a8\u6001\u66f4\u65b0\u670d\u52a1\u5bf9\u8c61  \n        try {  \n            if (carServiceHelperServiceUpdatable == null) {  \n                // \u521b\u5efa\u63a5\u53e3\u548c\u5b9e\u73b0\u7684\u6620\u5c04\u8868\uff0c\u7528\u4e8e\u4f20\u9012\u7ed9\u52a8\u6001\u52a0\u8f7d\u7684\u7c7b  \n                Map&lt;String, Object&gt; interfaces = new ArrayMap&lt;&gt;();  \n                interfaces.put(CarServiceHelperInterface.class.getSimpleName(), this);  \n                interfaces.put(CarLaunchParamsModifierInterface.class.getSimpleName(),  \n                        mCarLaunchParamsModifier.getBuiltinInterface());  \n                interfaces.put(CarActivityInterceptorInterface.class.getSimpleName(),  \n                        mCarActivityInterceptor.getBuiltinInterface());  \n                interfaces.put(CarDisplayCompatScaleProviderInterface.class.getSimpleName(),  \n                        mCarDisplayCompatScaleProvider.getBuiltinInterface());  \n\n                // \u4f7f\u7528\u53cd\u5c04\u673a\u5236\u52a8\u6001\u52a0\u8f7d\u7c7b\u5e76\u5b9e\u4f8b\u5316\u5bf9\u8c61  \n                mCarServiceHelperServiceUpdatable = (CarServiceHelperServiceUpdatable) Class  \n                        .forName(CSHS_UPDATABLE_CLASSNAME_STRING) // \u52a8\u6001\u7c7b\u540d  \n                        .getConstructor(Context.class, Map.class) // \u83b7\u53d6\u6784\u9020\u51fd\u6570  \n                        .newInstance(mContext, interfaces); // \u5b9e\u4f8b\u5316\u5bf9\u8c61  \n                Slogf.d(TAG, \"CarServiceHelperServiceUpdatable created via reflection.\");  \n            } else {  \n                // \u5982\u679c\u4f20\u5165\u4e86\u66f4\u65b0\u670d\u52a1\u5b9e\u4f8b\uff0c\u76f4\u63a5\u4f7f\u7528  \n                mCarServiceHelperServiceUpdatable = carServiceHelperServiceUpdatable;  \n            }  \n        } catch (Exception e) {  \n            // \u5f02\u5e38\u5904\u7406\uff1a\u5982\u679c\u52a8\u6001\u52a0\u8f7d\u5931\u8d25\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u7ec8\u6b62\u8fdb\u7a0b  \n            Slogf.w(TAG, e, \"*** CARHELPER KILLING SYSTEM PROCESS: \"  \n                    + \"Can't create CarServiceHelperServiceUpdatable.\");  \n            Slogf.w(TAG, \"*** GOODBYE!\");  \n            Process.killProcess(Process.myPid()); // \u6740\u6b7b\u5f53\u524d\u8fdb\u7a0b  \n            System.exit(10); // \u9000\u51fa\u7a0b\u5e8f  \n        }  \n    }  \n\n    /**  \n     * \u91cd\u5199\u7684\u7cfb\u7edf\u670d\u52a1\u542f\u52a8\u65b9\u6cd5\uff0c\u7528\u4e8e\u542f\u52a8\u670d\u52a1\u548c\u521d\u59cb\u5316\u903b\u8f91\u3002  \n     */  \n    @Override  \n    public void onStart() {  \n        // \u542f\u52a8\u903b\u8f91\u7701\u7565\u7684\u90e8\u5206\uff08\u53ef\u80fd\u662f\u6ce8\u518c\u670d\u52a1\u3001\u5e7f\u64ad\u7b49\u64cd\u4f5c\uff09  \n        ...  \n\n        // \u542f\u52a8\u52a8\u6001\u66f4\u65b0\u670d\u52a1\u5bf9\u8c61\u7684\u542f\u52a8\u903b\u8f91  \n        mCarServiceHelperServiceUpdatable.onStart();  \n\n        ...  \n    }  \n\n}\n</code></pre> <p>\u5728 CarServiceHelperService \u9020\u51fd\u6570\u4e2d\u4f7f\u7528\u53cd\u5c04\u673a\u5236\u52a8\u6001\u52a0\u8f7d\u7c7b\u5e76\u5b9e\u4f8b\u5316 CarServiceHelperServiceUpdatableImpl \u5bf9\u8c61\uff0c\u5e76\u5728 onStart() \u51fd\u6570\u4e2d\u8c03\u7528 CarServiceHelperServiceUpdatableImpl.onStart()\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#carservicehelperserviceupdatableimplonstart","title":"CarServiceHelperServiceUpdatableImpl.onStart()","text":"<pre><code>// frameworks/opt/car/services/updatableServices/src/com/android/internal/car/updatable/CarServiceHelperServiceUpdatableImpl.java\n\n/**\n * \u5b9e\u73b0\u62bd\u8c61\u7c7b CarServiceHelperUpdatable \u7684\u5177\u4f53\u7c7b\u3002\n * \u8be5\u7c7b\u8d1f\u8d23\u4e0e\u8f66\u8f7d\u670d\u52a1\uff08CarService\uff09\u5efa\u7acb\u8fde\u63a5\u5e76\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\n */\n@Keep\npublic final class CarServiceHelperServiceUpdatableImpl\n        implements CarServiceHelperServiceUpdatable, Executor {\n\n    private static final String CAR_SERVICE_PACKAGE = \"com.android.car\";\n\n    // \u5b9a\u4e49\u4e00\u4e2a\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u4e0e\u8f66\u8f7d\u670d\u52a1\uff08CarService\uff09\u7684\u8fde\u63a5\u548c\u65ad\u5f00\u4e8b\u4ef6\u3002\n    private final ServiceConnection mCarServiceConnection = new ServiceConnection() {\n        /**\n         * \u5f53\u8f66\u8f7d\u670d\u52a1\u6210\u529f\u8fde\u63a5\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n         * @param componentName \u8fde\u63a5\u7684\u670d\u52a1\u7ec4\u4ef6\u7684\u540d\u79f0\u3002\n         * @param iBinder \u670d\u52a1\u7684 IBinder \u63a5\u53e3\uff0c\u7528\u4e8e\u4e0e\u670d\u52a1\u8fdb\u884c\u901a\u4fe1\u3002\n         */\n        @Override\n        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n            if (DBG) Slogf.d(TAG, \"onServiceConnected: %s\", iBinder); // \u6253\u5370\u65e5\u5fd7\u8bb0\u5f55\u670d\u52a1\u8fde\u63a5\u6210\u529f\u3002\n            handleCarServiceConnection(iBinder); // \u8c03\u7528\u65b9\u6cd5\u5904\u7406\u670d\u52a1\u8fde\u63a5\u7684\u540e\u7eed\u903b\u8f91\u3002\n        }\n\n        /**\n         * \u5f53\u8f66\u8f7d\u670d\u52a1\u610f\u5916\u65ad\u5f00\uff08\u4f8b\u5982\u5d29\u6e83\u6216\u88ab\u6740\u6b7b\uff09\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n         * @param componentName \u65ad\u5f00\u7684\u670d\u52a1\u7ec4\u4ef6\u7684\u540d\u79f0\u3002\n         */\n        @Override\n        public void onServiceDisconnected(ComponentName componentName) {\n            handleCarServiceCrash(); // \u8c03\u7528\u65b9\u6cd5\u5904\u7406\u670d\u52a1\u5d29\u6e83\u7684\u540e\u7eed\u903b\u8f91\u3002\n        }\n    };\n\n    /**\n     * \u670d\u52a1\u542f\u52a8\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u8d1f\u8d23\u542f\u52a8\u8f66\u8f7d\u670d\u52a1\u5e76\u8fdb\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\u3002\n     */\n    @Override\n    public void onStart() {\n        // \u521b\u5efa\u4e00\u4e2a\u610f\u56fe\uff08Intent\uff09\u5bf9\u8c61\uff0c\u7528\u4e8e\u542f\u52a8\u6307\u5b9a\u7684\u8f66\u8f7d\u670d\u52a1\u3002\n        Intent intent = new Intent(CAR_SERVICE_INTERFACE).setPackage(CAR_SERVICE_PACKAGE);\n\n        // \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u4e0a\u4e0b\u6587\uff08UserHandle.SYSTEM\uff09\u4ee5\u786e\u4fdd\u670d\u52a1\u5728\u7cfb\u7edf\u7528\u6237\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u3002\n        Context userContext = mContext.createContextAsUser(UserHandle.SYSTEM, /* flags= */ 0);\n\n        // \u5c1d\u8bd5\u7ed1\u5b9a\u8f66\u8f7d\u670d\u52a1\uff08CarService\uff09\u3002\n        // \u4f7f\u7528 Context.BIND_AUTO_CREATE \u6807\u5fd7\u8868\u793a\u5982\u679c\u670d\u52a1\u5c1a\u672a\u542f\u52a8\uff0c\u5219\u4f1a\u81ea\u52a8\u521b\u5efa\u5e76\u542f\u52a8\u5b83\u3002\n        if (!userContext.bindService(intent, Context.BIND_AUTO_CREATE, this,\n                mCarServiceConnection)) {\n            // \u5982\u679c\u7ed1\u5b9a\u5931\u8d25\uff0c\u6253\u5370\u8b66\u544a\u65e5\u5fd7\u5e76\u7ec8\u6b62\u64cd\u4f5c\u3002\n            Slogf.wtf(TAG, \"cannot start car service\");\n        }\n\n        ...\n    }\n}\n</code></pre> <p>CAR_SERVICE_INTERFACE \u662f\u5728 <code>car-lib</code> \u4e2d\u5b9a\u4e49\u3002</p> <pre><code>// packages/services/Car/car-lib/src/com/android/car/internal/common/CommonConstants.java\n\npublic final class CommonConstants {\n    public static final String CAR_SERVICE_INTERFACE = \"android.car.ICar\";\n}\n</code></pre> <p>\u901a\u8fc7\u5bf9 <code>CarServiceHelperServiceUpdatableImpl.onStart()</code> \u65b9\u6cd5\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7\u8c03\u7528 <code>bindService()</code> \u6765\u7ed1\u5b9a <code>CarService</code> \u670d\u52a1\u3002 \u5230\u6b64\uff0csystem_server \u8fdb\u7a0b\u542f\u52a8 CarService \u7684\u5de5\u4f5c\u5b8c\u6bd5\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u7ee7\u7eed\u770b CarService \u8fdb\u7a0b\u542f\u52a8\u8fc7\u7a0b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#carservice","title":"CarService\u8fdb\u7a0b","text":"<p>\u5728\u524d\u9762\u6211\u4eec\u63d0\u5230\u8fc7\u5728 packages/services/Car/service-builtin/AndroidManifest.xml \u4e2d\uff1a</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;  \n\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"  \n     xmlns:androidprv=\"http://schemas.android.com/apk/prv/res/android\"  \n     package=\"com.android.car\"  \n     coreApp=\"true\"  \n     android:sharedUserId=\"android.uid.system\"&gt;  \n\n    &lt;original-package android:name=\"com.android.car\"/&gt;  \n\n    &lt;application android:label=\"@string/app_title\"  \n         android:directBootAware=\"true\"  \n         android:allowBackup=\"false\"  \n         android:persistent=\"true\"&gt;  \n\n        &lt;!-- Do not add any new service without addressing mainline issues --&gt;  \n        &lt;service android:name=\".CarService\"  \n             android:singleUser=\"true\"  \n             android:exported=\"true\"&gt;  \n            &lt;intent-filter&gt;  \n                &lt;action android:name=\"android.car.ICar\"/&gt;  \n            &lt;/intent-filter&gt;  \n        &lt;/service&gt;\n\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <p>\u6240\u4ee5 system_server \u8fdb\u7a0b\u542f\u52a8 CarService \u5176\u5b9e\u5c31\u662f com.android.car.CarService \u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#carservice_1","title":"CarService\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service-builtin/src/com/android/car/CarService.java\n\n/** \n * Proxy service for CarServiceImpl. \n * \u8fd9\u662f\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\u7c7b\uff0c\u7528\u4e8e\u4ee3\u7406\u5b9e\u9645\u7684 CarServiceImpl \u670d\u52a1\u3002\u901a\u8fc7\u7ee7\u627f ServiceProxy \u7c7b\uff0c\n * \u8be5\u7c7b\u53ef\u4ee5\u52a8\u6001\u7ed1\u5b9a\u5b9e\u73b0\u7c7b\uff0c\u5e76\u63d0\u4f9b\u7edf\u4e00\u7684\u670d\u52a1\u63a5\u53e3\u3002\n */\npublic class CarService extends ServiceProxy {\n\n    // Binder \u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u8bbe\u7f6e\u4e3a 31\uff0c\u4e0e system_server \u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002\n    // system_server \u4e2d\u7684\u6700\u5927 Binder \u7ebf\u7a0b\u6570\u4e5f\u8bbe\u7f6e\u4e3a 31\uff08\u89c1 SystemServer.java \u7684 sMaxBinderThreads\uff09\u3002\n    private static final int MAX_BINDER_THREADS = 31;\n\n    /** \n     * \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 \n     * 1. \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165\u5177\u4f53\u5b9e\u73b0\u7c7b\u7684\u540d\u79f0\u3002\n     *    \u8fd9\u91cc\u901a\u8fc7 UpdatablePackageDependency \u63d0\u4f9b\u7684\u52a8\u6001\u5b9e\u73b0\u7c7b `CAR_SERVICE_IMPL_CLASS`\u3002\n     * 2. \u8c03\u7528 BinderInternal.setMaxThreads()\uff0c\u5c06\u6700\u5927 Binder \u7ebf\u7a0b\u6570\u8bbe\u7f6e\u4e3a 31\u3002\n     *    \u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd CarService \u7684 Binder \u7ebf\u7a0b\u6c60\u6709\u8db3\u591f\u7684\u7ebf\u7a0b\u6765\u5904\u7406\u8bf7\u6c42\u3002\n     */\n    public CarService() {\n        super(UpdatablePackageDependency.CAR_SERVICE_IMPL_CLASS);\n        // \u589e\u52a0 car service \u7684 Binder \u7ebf\u7a0b\u6570\uff0c\u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\u4e3a 31\u3002\n        BinderInternal.setMaxThreads(MAX_BINDER_THREADS);\n    }\n\n    /**\n     * \u5f53\u670d\u52a1\u901a\u8fc7 startService() \u65b9\u6cd5\u542f\u52a8\u65f6\u8c03\u7528\u3002\n     * @param intent \u542f\u52a8\u670d\u52a1\u7684\u610f\u56fe\u5bf9\u8c61\uff0c\u5305\u542b\u670d\u52a1\u542f\u52a8\u65f6\u4f20\u9012\u7684\u6570\u636e\u3002\n     * @param flags \u542f\u52a8\u6807\u5fd7\uff0c\u63cf\u8ff0\u542f\u52a8\u670d\u52a1\u7684\u8bf7\u6c42\u7c7b\u578b\u3002\n     * @param startId \u670d\u52a1\u7684\u542f\u52a8\u8bf7\u6c42 ID\uff0c\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u542f\u52a8\u8bf7\u6c42\u3002\n     * @return \u8fd4\u56de\u503c\u8868\u660e\u670d\u52a1\u7684\u542f\u52a8\u6a21\u5f0f\uff0c\u8fd9\u91cc\u8fd4\u56de START_STICKY\uff0c\u8868\u793a\u670d\u52a1\u5728\u88ab\u6740\u6b7b\u540e\u4f1a\u81ea\u52a8\u91cd\u542f\u3002\n     */\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        // \u4fdd\u6301\u670d\u52a1\u5b58\u6d3b\uff0c\u5373\u4f7f\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u8db3\u65f6\u88ab\u6740\u6b7b\u4e5f\u4f1a\u81ea\u52a8\u91cd\u542f\u3002\n        return START_STICKY;\n    }\n}\n</code></pre> <p><code>CarService</code> \u662f\u4e00\u4e2a\u670d\u52a1\u7c7b\uff0c\u5b83\u4f5c\u4e3a <code>CarServiceImpl</code> \u7684\u4ee3\u7406\uff0c\u901a\u8fc7\u52a8\u6001\u7ed1\u5b9a\u5b9e\u9645\u5b9e\u73b0\u7c7b\uff08<code>CAR_SERVICE_IMPL_CLASS</code>\uff09\u6765\u63d0\u4f9b\u670d\u52a1</p> <pre><code>// packages/services/Car/service-builtin/src/com/android/car/UpdatablePackageDependency.java\n\npublic final class UpdatablePackageDependency {\n\n    /**\n     * \u5e38\u91cf\uff1a`com.android.car.CarServiceImpl` \u7c7b\u7684\u5168\u9650\u5b9a\u7c7b\u540d\u3002\n     * \u7528\u4e8e\u52a8\u6001\u52a0\u8f7d `CarServiceImpl`\uff0c\u8be5\u7c7b\u662f Car \u670d\u52a1\u7684\u6838\u5fc3\u5b9e\u73b0\u3002\n     * \u6b64\u7c7b\u8d1f\u8d23\u63d0\u4f9b CarService \u7684\u6838\u5fc3\u529f\u80fd\u3002\n     */\n    public static final String CAR_SERVICE_IMPL_CLASS = \"com.android.car.CarServiceImpl\";\n\n}\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#serviceproxy","title":"ServiceProxy\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service-builtin/src/com/android/car/ServiceProxy.java\n\n/**\n * \u57fa\u7c7b\uff0c\u7528\u4e8e\u5305\u88c5\u670d\u52a1\u7684\u751f\u547d\u5468\u671f\uff0c\u52a0\u8f7d\u6765\u81ea\u53ef\u66f4\u65b0\u6c7d\u8f66\u670d\u52a1\u5305\u7684\u5b9e\u9645\u670d\u52a1\u4ee3\u7801\u3002\n * \u5185\u7f6e\u7684\u516c\u5171\u670d\u52a1\u5e94\u8be5\u7ee7\u627f\u6b64\u7c7b\uff0c\u4ee5\u63d0\u4f9b\u81ea\u52a8\u5305\u88c5\u529f\u80fd\u3002\n * &lt;p&gt;\n * \u8be5\u7c7b\u901a\u8fc7\u53cd\u5c04\u52a8\u6001\u52a0\u8f7d\u5e76\u5305\u88c5\u4e00\u4e2a\u5b9e\u9645\u7684\u670d\u52a1\u7c7b\uff08\u4f8b\u5982 `CarServiceImpl`\uff09\uff0c\n * \u4f7f\u5f97\u670d\u52a1\u80fd\u591f\u5728\u4e0d\u6539\u53d8\u57fa\u7840\u7cfb\u7edf\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u65b0\u3002\n */\npublic class ServiceProxy extends Service {\n\n    // \u5b9e\u9645\u670d\u52a1\u7684\u7c7b\u540d\uff08\u4f8b\u5982 \"com.android.car.CarServiceImpl\"\uff09\u3002\n    private final String mRealServiceClassName;\n\n    // \u5b9e\u9645\u670d\u52a1\u7684\u7c7b\u5f15\u7528\uff08\u901a\u8fc7\u53cd\u5c04\u52a8\u6001\u52a0\u8f7d\uff09\u3002\n    private Class mRealServiceClass;\n\n    // \u5b9e\u9645\u670d\u52a1\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u8c03\u7528\u670d\u52a1\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\u3002\n    private ProxiedService mRealService;\n\n    /**\n     * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u4ee3\u7406\u670d\u52a1\u5e76\u6307\u5b9a\u5b9e\u9645\u670d\u52a1\u7684\u7c7b\u540d\u3002\n     * \n     * @param realServiceClassName \u771f\u5b9e\u670d\u52a1\u7c7b\u7684\u5168\u9650\u5b9a\u7c7b\u540d\uff08\u4f8b\u5982 \"com.android.car.CarServiceImpl\"\uff09\u3002\n     */\n    public ServiceProxy(String realServiceClassName) {\n        mRealServiceClassName = realServiceClassName;\n    }\n\n    /**\n     * \u5728\u4ee3\u7406\u670d\u52a1\u521b\u5efa\u65f6\u8c03\u7528\uff0c\u521d\u59cb\u5316\u5b9e\u9645\u670d\u52a1\u5e76\u542f\u52a8\u5176\u751f\u547d\u5468\u671f\u3002\n     */\n    @Override\n    public void onCreate() {\n        // \u521d\u59cb\u5316\u771f\u5b9e\u670d\u52a1\uff0c\u52a0\u8f7d\u5176\u7c7b\u5e76\u8c03\u7528\u751f\u547d\u5468\u671f\u65b9\u6cd5\u3002\n        init();\n        // \u8c03\u7528\u771f\u5b9e\u670d\u52a1\u7684 onCreate \u65b9\u6cd5\uff0c\u5f00\u59cb\u771f\u5b9e\u670d\u52a1\u7684\u751f\u547d\u5468\u671f\u3002\n        mRealService.onCreate();\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u5b9e\u9645\u670d\u52a1\uff0c\u901a\u8fc7\u53cd\u5c04\u52a0\u8f7d\u670d\u52a1\u7c7b\u5e76\u8bbe\u7f6e\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u3002\n     */\n    private void init() {\n        // \u521b\u5efa\u7528\u4e8e\u52a0\u8f7d\u53ef\u66f4\u65b0\u5305\u7684\u4e0a\u4e0b\u6587\u3002\n        mUpdatablePackageContext = UpdatablePackageContext.create(this);\n        try {\n            // \u52a8\u6001\u52a0\u8f7d\u771f\u5b9e\u670d\u52a1\u7c7b\u3002\n            mRealServiceClass = mUpdatablePackageContext.getClassLoader().loadClass(\n                    mRealServiceClassName);\n            // \u83b7\u53d6\u8be5\u7c7b\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\n            Constructor constructor = mRealServiceClass.getConstructor();\n            // \u521b\u5efa\u771f\u5b9e\u670d\u52a1\u5b9e\u4f8b\u3002\n            mRealService = (ProxiedService) constructor.newInstance();\n            // \u5c06\u53ef\u66f4\u65b0\u5305\u7684\u4e0a\u4e0b\u6587\u9644\u52a0\u5230\u771f\u5b9e\u670d\u52a1\u3002\n            mRealService.doAttachBaseContext(mUpdatablePackageContext);\n            // \u8bbe\u7f6e\u771f\u5b9e\u670d\u52a1\u7684\u5185\u7f6e\u5305\u4e0a\u4e0b\u6587\u3002\n            mRealService.setBuiltinPackageContext(this);\n        } catch (Exception e) {\n            // \u5982\u679c\u52a0\u8f7d\u670d\u52a1\u7c7b\u6216\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u5219\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\n            throw new RuntimeException(\"\u65e0\u6cd5\u52a0\u8f7d\u7c7b:\" + mRealServiceClassName, e);\n        }\n    }\n}\n</code></pre> <p><code>ServiceProxy</code> \u7684\u6838\u5fc3\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7 Java \u53cd\u5c04\u6765\u52a8\u6001\u52a0\u8f7d\u670d\u52a1\u7c7b\u3002\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\uff0c<code>ServiceProxy</code> \u4f1a\u8bfb\u53d6\u6307\u5b9a\u7684\u670d\u52a1\u7c7b\u540d CarServiceImpl \uff0c\u7136\u540e\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5e76\u5728\u751f\u547d\u5468\u671f\u5185\u5bf9\u5176\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>\u6839\u636e\u524d\u9762\u7684\u80cc\u666f\u4ecb\u7ecd\uff0c\u6211\u4eec\u77e5\u9053 <code>ServiceProxy</code> \u4f4d\u4e8e builtin app \u4e2d\uff0c\u800c\u9700\u8981\u53cd\u5c04\u7684 <code>CarServiceImpl</code> \u5219\u662f\u5728 updatable app \u4e2d\u3002\u8fd9\u4e24\u4e2a\u5e94\u7528\u662f\u72ec\u7acb\u7684\uff0c\u5728 <code>AndroidManifest.xml</code> \u6587\u4ef6\u4e2d\u4e5f\u6ca1\u6709\u8bbe\u7f6e <code>android:process</code> \u5c5e\u6027\u6765\u6307\u5b9a\u5b83\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u8fdb\u7a0b\u540d\u3002</p> <p>\u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff1a\u5b83\u4eec\u662f\u5982\u4f55\u542f\u52a8 updatable app \u8fdb\u7a0b\u7684\uff1f\u6216\u8005\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u5e94\u7528\u662f\u5426\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\uff1f</p> <p>\u6b64\u90e8\u5206\u95ee\u9898\u76ee\u524d\u6682\u65f6\u65e0\u6cd5\u89e3\u7b54\u3002\u7531\u4e8e\u73af\u5883\u95ee\u9898\uff0c\u6211\u65e0\u6cd5\u5728\u5f53\u524d\u673a\u5668\u4e0a\u8fdb\u884c\u7f16\u8bd1\u548c\u8c03\u8bd5\u3002\u7b49\u5230\u6709\u5408\u9002\u7684\u73af\u5883\u65f6\uff0c\u6211\u4eec\u518d\u56de\u8fc7\u5934\u6765\u5206\u6790\u5e76\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#updatablepackagecontextcreate","title":"UpdatablePackageContext.create()","text":"<pre><code>/** \n * \u7528\u4e8e\u5305\u88c5\u53ef\u66f4\u65b0\u5305\u7684\u4e0a\u4e0b\u6587\n * \u8be5\u7c7b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8bbf\u95ee\u53ef\u66f4\u65b0\u8f66\u670d\u52a1\u5305\uff08updatable package\uff09\u7684\u4e0a\u4e0b\u6587\u3002\n * \n * @hide\n */\npublic final class UpdatablePackageContext extends ContextWrapper {\n    private static final String TAG = UpdatablePackageContext.class.getSimpleName();\n\n    // \u8fd9\u4e2a\u662f com.android.car.updatable \u5305\u7684\u4e0a\u4e0b\u6587\n    private final Context mPackageContext;\n\n    /** \n     * \u521b\u5efa\u53ef\u66f4\u65b0\u5305\u7684\u4e0a\u4e0b\u6587 \n     * \n     * \u8fd9\u4e2a\u65b9\u6cd5\u8d1f\u8d23\u627e\u5230\u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\uff0c\u5e76\u4e3a\u5b83\u521b\u5efa\u4e0a\u4e0b\u6587\u3002\n     * \n     * @param baseContext \u4f20\u5165\u7684\u57fa\u7840\u4e0a\u4e0b\u6587\n     * @return UpdatablePackageContext \u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a UpdatablePackageContext \u5bf9\u8c61\uff0c\n     *         \u8be5\u5bf9\u8c61\u7528\u4e8e\u8bbf\u95ee\u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\u3002\n     * @throws RuntimeException \u5982\u679c\u627e\u4e0d\u5230\u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\u6216\u8005\u5305\u4e0d\u53ef\u7528\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n     */\n    public static UpdatablePackageContext create(Context baseContext) {\n        Context packageContext;\n        try {\n            // \u627e\u5230\u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\n            PackageInfo info = findUpdatableServicePackage(baseContext);\n            // \u5982\u679c\u672a\u627e\u5230\u5305\uff0c\u6216\u8005\u5305\u4e0d\u662f\u7cfb\u7edf\u5e94\u7528\uff0c\u629b\u51fa\u5f02\u5e38\n            if (info == null || info.applicationInfo == null || !(info.applicationInfo.isSystemApp()\n                    || info.applicationInfo.isUpdatedSystemApp())) {\n                throw new IllegalStateException(\n                        \"Updated car service package is not usable:\" + ((info == null)\n                                ? \"do not exist\" : info.applicationInfo));\n            }\n\n            // \u4e3a\u8f66\u670d\u52a1\u5305\u542f\u7528\u6b63\u786e\u7684\u8d44\u6e90\u66ff\u4ee3 (RRO)\n            enableRROForCarServiceUpdatable(baseContext);\n\n            // \u4f7f\u7528 CONTEXT_IGNORE_SECURITY\uff0cUID \u4e0d\u540c\u4f46\u56e0\u4e3a\u8be5\u5305\u662f\u53ef\u4fe1\u4efb\u7684\u7cfb\u7edf\u5e94\u7528\uff0c\n            // \u56e0\u6b64\u65e0\u9700\u5b89\u5168\u68c0\u67e5\u3002\n            // \u521b\u5efa\u76ee\u6807\u5305\u7684\u4e0a\u4e0b\u6587\uff0c\u5e76\u5305\u62ec\u4ee3\u7801\u548c\u5ffd\u7565\u5b89\u5168\u68c0\u67e5\n            packageContext = baseContext.createPackageContext(info.packageName,\n                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);\n        } catch (Exception e) {\n            // \u5982\u679c\u51fa\u9519\uff0c\u629b\u51fa\u5f02\u5e38\u5e76\u63d0\u4f9b\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\n            throw new RuntimeException(\"Cannot load updatable package code\", e);\n        }\n\n        // \u8fd4\u56de\u5305\u88c5\u540e\u7684\u4e0a\u4e0b\u6587\n        return new UpdatablePackageContext(baseContext, packageContext);\n    }\n\n    /**\n     * \u67e5\u627e\u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\n     * \n     * \u8be5\u65b9\u6cd5\u6839\u636e\u7cfb\u7edf\u5c5e\u6027\u83b7\u53d6\u8f66\u670d\u52a1\u5305\u7684\u5305\u540d\uff0c\u5e76\u5c1d\u8bd5\u4ece PackageManager \u4e2d\u67e5\u8be2\u8be5\u5305\u7684\u4fe1\u606f\u3002\n     * \n     * @param baseContext \u5f53\u524d\u4e0a\u4e0b\u6587\n     * @return PackageInfo \u66f4\u65b0\u7684\u8f66\u670d\u52a1\u5305\u7684 PackageInfo \u4fe1\u606f\n     * @throws IllegalStateException \u5982\u679c\u7cfb\u7edf\u5c5e\u6027\u4e2d\u672a\u5b9a\u4e49\u8f66\u670d\u52a1\u5305\u540d\u79f0\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n     */\n    @Nullable\n    private static PackageInfo findUpdatableServicePackage(Context baseContext) {\n        PackageInfo info = null;\n        // \u4ece\u7cfb\u7edf\u5c5e\u6027\u4e2d\u83b7\u53d6\u8f66\u670d\u52a1\u5305\u540d\n        String packageName = SystemProperties.get(\n                PROPERTY_CAR_SERVICE_PACKAGE_NAME, /*def=*/null);\n        // \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u5305\u540d\uff0c\u629b\u51fa\u5f02\u5e38\n        if (packageName == null) {\n            throw new IllegalStateException(\n                    PROPERTY_CAR_SERVICE_PACKAGE_NAME + \" property not defined\");\n        }\n        try {\n            // \u83b7\u53d6\u8be5\u5305\u7684 PackageInfo \u4fe1\u606f\n            info = baseContext.getPackageManager().getPackageInfo(packageName, /* flags= */ 0);\n        } catch (PackageManager.NameNotFoundException e) {\n            // \u5982\u679c\u5305\u540d\u627e\u4e0d\u5230\uff0c\u53ea\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\uff0c\u8c03\u7528\u8005\u4f1a\u629b\u51fa\u5f02\u5e38\n            Slogf.e(TAG, e, \"Cannot find updatable car service package:%s\", packageName);\n        }\n        return info;\n    }\n\n    /**\n     * \u6784\u9020\u65b9\u6cd5\n     * \n     * @param baseContext \u57fa\u7840\u4e0a\u4e0b\u6587\n     * @param packageContext \u66f4\u65b0\u5305\u7684\u4e0a\u4e0b\u6587\n     */\n    private UpdatablePackageContext(Context baseContext, Context packageContext) {\n        super(baseContext);\n        mPackageContext = packageContext;\n    }\n\n    @Override  \n    public ClassLoader getClassLoader() {  \n        // This context cannot load code from builtin any more.  \n        return mPackageContext.getClassLoader();  \n    }\n}\n</code></pre> <p>\u6211\u4eec\u5148\u770b\u4e0b PROPERTY_CAR_SERVICE_PACKAGE_NAME \u662f\u4ec0\u4e48\u3002</p> <pre><code>/**\n * \u53ea\u8bfb\u5c5e\u6027\uff0c\u7528\u4e8e\u5b9a\u4e49\u53ef\u66f4\u65b0\u7684 car service \u5305\u540d\u3002\n *\n * &lt;p&gt;\u6b64\u5c5e\u6027\u5fc5\u987b\u88ab\u5b9a\u4e49\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4ece AOSP \u6784\u5efa\u521b\u5efa\u7684 car service\uff0c\u9ed8\u8ba4\u4e3a {@code \"com.android.car.updatable\"}\u3002\n * \u5982\u679c\u662f\u7531\u4e0d\u540c\u7684\u7b7e\u540d\u8005\u7b7e\u7f72 car framework apex \u6a21\u5757\uff0c\u5219\u8be5\u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4e0d\u540c\u7684\u5305\u540d\u3002\n */\npublic static final String PROPERTY_CAR_SERVICE_PACKAGE_NAME =\n        \"ro.android.car.carservice.package\";\n</code></pre> <p>\u5c3d\u7ba1\u5f53\u524d\u6211\u4eec\u65e0\u6cd5\u5728\u73af\u5883\u4e2d\u76f4\u63a5 dump \u51fa\u8be5\u5c5e\u6027\uff0c\u4f46\u4ece\u4ecb\u7ecd\u4e2d\u53ef\u4ee5\u63a8\u6d4b\uff0c\u8fd9\u4e2a\u5c5e\u6027\u5b9e\u9645\u4e0a\u5c31\u662f\u914d\u7f6e\u4e3a <code>\"com.android.car.updatable\"</code>\u3002</p> <p>\u6240\u4ee5 UpdatablePackageContext.create() \u5176\u5b9e\u5c31\u662f\u83b7\u53d6 com.android.car.updatable \u5305\u7684\u4e0a\u4e0b\u6587\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#serviceproxyinit","title":"ServiceProxy.init()","text":"<p>\u8fd9\u91cc\u5148\u83b7\u53d6\u5230 UpdatablePackageContext \uff0c\u7136\u540e\u518d\u901a\u8fc7 UpdatablePackageContext.getClassLoader() \u83b7\u53d6\u5230 <code>\"com.android.car.updatable\"</code> \u7684ClassLoader\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u5c04\u5230 <code>\"com.android.car.updatable\"</code> \u7684 CarServiceImpl \u7c7b\uff0c\u5e76\u521b\u5efa CarServiceImpl \u7c7b\u7684\u5b9e\u4f8b\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u5b9e\u4f8b\u5c5e\u4e8e\u5305\u540d <code>\"com.android.car.updatable\"</code> \u4e2d\u7684\u7c7b\uff0c\u4f46\u5b83\u672c\u8d28\u4e0a\u8fd8\u662f\u5728\u5f53\u524d\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#serviceproxyoncreate","title":"ServiceProxy.onCreate()","text":"<pre><code>@Override  \npublic void onCreate() {  \n    init();  \n    mRealService.onCreate();  \n}\n</code></pre> <p>\u8fd9\u6837\u8c03\u7528\u7684\u5c31\u662f CarServiceImpl.onCreate()</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/start-service/#carserviceimploncreate","title":"CarServiceImpl.onCreate()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\n@Override  \npublic void onCreate() {  \n    TimingsTraceLog initTiming = new TimingsTraceLog(CAR_SERVICE_INIT_TIMING_TAG,  \n            TraceHelper.TRACE_TAG_CAR_SERVICE, CAR_SERVICE_INIT_TIMING_MIN_DURATION_MS);  \n    initTiming.traceBegin(\"CarService.onCreate\");  \n\n    initTiming.traceBegin(\"getVehicle\");  \n    mVehicle = VehicleStub.newVehicleStub();  \n    initTiming.traceEnd(); // \"getVehicle\"  \n\n    EventLogHelper.writeCarServiceCreate(/* hasVhal= */ mVehicle.isValid());  \n\n    mVehicleInterfaceName = mVehicle.getInterfaceDescriptor();  \n\n    Slogf.i(CarLog.TAG_SERVICE, \"Connected to \" + mVehicleInterfaceName);  \n    EventLogHelper.writeCarServiceConnected(mVehicleInterfaceName);  \n\n    mICarImpl = new ICarImpl.Builder()  \n            .setServiceContext(this)  \n            .setBuiltInContext(getBuiltinPackageContext())  \n            .setVehicle(mVehicle)  \n            .setSystemInterface(  \n                    SystemInterface.Builder.defaultSystemInterface(this).build())  \n            .setVehicleInterfaceName(mVehicleInterfaceName)  \n            .build();  \n    mICarImpl.init();  \n\n    mVehicle.linkToDeath(mVehicleDeathRecipient);  \n\n    ServiceManagerHelper.addService(\"car_service\", mICarImpl);  \n    SystemPropertiesHelper.set(\"boot.car_service_created\", \"1\");  \n\n    super.onCreate();  \n\n    initTiming.traceEnd(); // \"CarService.onCreate\"  \n}\n</code></pre> <p>\u8fd9\u91cc\u628a car_service \u52a0\u5165\u5230 ServiceManager \u91cc\u3002 \u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u5206\u6790\u5b8c\u4e86 <code>CarService</code> \u670d\u52a1\u7684\u542f\u52a8\u6d41\u7a0b\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u8f6c\u5411\u5206\u6790 <code>CarService</code> \u7684\u521d\u59cb\u5316\u6d41\u7a0b\uff0c\u8fdb\u4e00\u6b65\u63a2\u8ba8\u670d\u52a1\u7684\u8be6\u7ec6\u5de5\u4f5c\u673a\u5236\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/","title":"Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#_1","title":"\u80cc\u666f","text":"<p>\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0 Android 15 CarService\u6e90\u780101-\u670d\u52a1\u542f\u52a8 \u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u5206\u6790\u4e86CarService\u8fdb\u7a0b\u7684\u542f\u52a8\u6d41\u7a0b\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u91cd\u70b9\u805a\u7126\u4e8eCarService\u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#carserviceimploncreate","title":"CarServiceImpl.onCreate()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\n@Override\npublic void onCreate() {\n    // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u8ddf\u8e2a\u521d\u59cb\u5316\u65f6\u95f4\u7684\u65e5\u5fd7\u5bf9\u8c61\uff0cCAR_SERVICE_INIT_TIMING_TAG\u662f\u65e5\u5fd7\u6807\u7b7e\uff0c\n    // TraceHelper.TRACE_TAG_CAR_SERVICE\u662f\u8ddf\u8e2a\u6807\u8bb0\uff0cCAR_SERVICE_INIT_TIMING_MIN_DURATION_MS\u662f\u6700\u5c0f\u6301\u7eed\u65f6\u95f4\u3002\n    TimingsTraceLog initTiming = new TimingsTraceLog(CAR_SERVICE_INIT_TIMING_TAG,\n            TraceHelper.TRACE_TAG_CAR_SERVICE, CAR_SERVICE_INIT_TIMING_MIN_DURATION_MS);\n\n    // \u5f00\u59cb\u8ddf\u8e2aCarService.onCreate\u65b9\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u3002\n    initTiming.traceBegin(\"CarService.onCreate\");\n\n    // \u5f00\u59cb\u8ddf\u8e2a\u83b7\u53d6\u8f66\u8f86\u5bf9\u8c61\u7684\u65f6\u95f4\u3002\n    initTiming.traceBegin(\"getVehicle\");\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684VehicleStub\u5bf9\u8c61\u5e76\u8d4b\u503c\u7ed9mVehicle\u3002\n    mVehicle = VehicleStub.newVehicleStub();\n    // \u7ed3\u675f\u8ddf\u8e2a\u83b7\u53d6\u8f66\u8f86\u5bf9\u8c61\u7684\u65f6\u95f4\u3002\n    initTiming.traceEnd(); // \"getVehicle\"\n\n    // \u8bb0\u5f55\u4e00\u4e2a\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u6807\u8bb0CarService\u7684\u521b\u5efa\uff0c\u5e76\u6307\u660e\u662f\u5426\u6709\u6709\u6548\u7684\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u3002\n    EventLogHelper.writeCarServiceCreate(/* hasVhal= */ mVehicle.isValid());\n\n    // \u83b7\u53d6\u8f66\u8f86\u63a5\u53e3\u7684\u63cf\u8ff0\u7b26\u540d\u79f0\u3002\n    mVehicleInterfaceName = mVehicle.getInterfaceDescriptor();\n\n    // \u6253\u5370\u4e00\u4e2a\u4fe1\u606f\u65e5\u5fd7\uff0c\u6807\u8bb0\u5df2\u7ecf\u8fde\u63a5\u5230\u8f66\u8f86\u63a5\u53e3\u3002\n    Slogf.i(CarLog.TAG_SERVICE, \"Connected to \" + mVehicleInterfaceName);\n    // \u8bb0\u5f55\u4e00\u4e2a\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u6807\u8bb0CarService\u5df2\u7ecf\u8fde\u63a5\u5230\u8f66\u8f86\u63a5\u53e3\u3002\n    EventLogHelper.writeCarServiceConnected(mVehicleInterfaceName);\n\n    // \u6784\u5efa\u4e00\u4e2aICarImpl\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u670d\u52a1\u4e0a\u4e0b\u6587\u3001\u5185\u7f6e\u5305\u4e0a\u4e0b\u6587\u3001\u8f66\u8f86\u5bf9\u8c61\u3001\u7cfb\u7edf\u63a5\u53e3\u548c\u8f66\u8f86\u63a5\u53e3\u540d\u79f0\u3002\n    mICarImpl = new ICarImpl.Builder()\n            .setServiceContext(this)\n            .setBuiltInContext(getBuiltinPackageContext())\n            .setVehicle(mVehicle)\n            .setSystemInterface(\n                    SystemInterface.Builder.defaultSystemInterface(this).build())\n            .setVehicleInterfaceName(mVehicleInterfaceName)\n            .build();\n    // \u521d\u59cb\u5316ICarImpl\u5bf9\u8c61\u3002\n    mICarImpl.init();\n\n    // \u4e3a\u8f66\u8f86\u5bf9\u8c61\u6ce8\u518c\u6b7b\u4ea1\u901a\u77e5\u63a5\u6536\u5668\u3002\n    mVehicle.linkToDeath(mVehicleDeathRecipient);\n\n    // \u5c06ICarImpl\u5bf9\u8c61\u6dfb\u52a0\u4e3a\u7cfb\u7edf\u670d\u52a1\uff0c\u670d\u52a1\u540d\u79f0\u4e3a\"car_service\"\u3002\n    ServiceManagerHelper.addService(\"car_service\", mICarImpl);\n    // \u8bbe\u7f6e\u7cfb\u7edf\u5c5e\u6027\uff0c\u6807\u8bb0CarService\u5df2\u7ecf\u521b\u5efa\u3002\n    SystemPropertiesHelper.set(\"boot.car_service_created\", \"1\");\n\n    // \u8c03\u7528\u7236\u7c7b\u7684onCreate\u65b9\u6cd5\u3002\n    super.onCreate();\n\n    // \u7ed3\u675f\u8ddf\u8e2aCarService.onCreate\u65b9\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u3002\n    initTiming.traceEnd(); // \"CarService.onCreate\"\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u5b8c\u6210\u4e86\u5982\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u901a\u8fc7<code>VehicleStub.newVehicleStub()</code>\u521b\u5efa\u4e00\u4e2a\u8f66\u8f86\u63a5\u53e3\u7684\u5bf9\u8c61\uff08<code>mVehicle</code>\uff09\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fdb\u884c\u4ea4\u4e92</li> <li>\u4f7f\u7528<code>ICarImpl.Builder</code>\u6784\u5efa\u4e00\u4e2a<code>ICarImpl</code>\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u3001\u8f66\u8f86\u5bf9\u8c61\u3001\u7cfb\u7edf\u63a5\u53e3\u7b49\uff0c\u5e76\u8c03\u7528<code>init()</code>\u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\u3002</li> <li>\u5c06<code>ICarImpl</code>\u5bf9\u8c61\u6dfb\u52a0\u4e3a\u7cfb\u7edf\u670d\u52a1\uff0c\u670d\u52a1\u540d\u79f0\u4e3a<code>\"car_service\"</code>\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\u8bbf\u95ee\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#vehiclestub","title":"VehicleStub","text":"<pre><code>// packages/services/Car/service/src/com/android/car/VehicleStub.java\n\n/**\n * VehicleStub \u8868\u793a\u4e00\u4e2a IVehicle \u670d\u52a1\u63a5\u53e3\uff0c\u53ef\u4ee5\u662f AIDL \u6216\u9057\u7559\u7684 HIDL \u7248\u672c\u3002\n * \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u4f7f\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u5173\u5fc3\u5e95\u5c42 IVehicle \u670d\u52a1\u662f\u54ea\u79cd\u7248\u672c\u3002\n */\npublic abstract class VehicleStub {\n\n    /**\n     * \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 VehicleStub \u4ee5\u8fde\u63a5\u5230\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u3002\n     *\n     * \u6839\u636e\u53ef\u7528\u7684\u540e\u7aef\uff08AIDL \u6216 HIDL\uff09\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 VehicleStub \u4ee5\u8fde\u63a5\u5230\u8f66\u8f86 HAL\u3002\n     * \u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u8f66\u8f86 HAL\uff0c\u6b64\u51fd\u6570\u5c06\u629b\u51fa {@link IllegalStateException}\u3002\n     *\n     * @return \u4e00\u4e2a\u8fde\u63a5\u5230\u8f66\u8f86 HAL \u7684 vehicle stub\u3002\n     * @throws IllegalStateException \u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u8f66\u8f86 HAL \u670d\u52a1\u3002\n     */\n    public static VehicleStub newVehicleStub() throws IllegalStateException {\n        // \u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a AIDL \u7248\u672c\u7684 VehicleStub\u3002\n        VehicleStub stub = new AidlVehicleStub();\n\n        // \u68c0\u67e5 AIDL \u7248\u672c\u7684 VehicleStub \u662f\u5426\u6709\u6548\u3002\n        if (stub.isValid()) {\n            // \u5982\u679c\u662f\u7528\u6237\u8c03\u8bd5\u7248\u672c\u6216\u5de5\u7a0b\u7248\u672c\uff0c\u5e76\u4e14\u542f\u7528\u4e86 FakeVehicleStub\uff0c\u5219\u5c1d\u8bd5\u521b\u5efa FakeVehicleStub\u3002\n            if ((BuildHelper.isUserDebugBuild() || BuildHelper.isEngBuild())\n                    &amp;&amp; FakeVehicleStub.doesEnableFileExist()) {\n                try {\n                    // \u8fd4\u56de\u4e00\u4e2a FakeVehicleStub \u5b9e\u4f8b\u3002\n                    return new FakeVehicleStub(stub);\n                } catch (Exception e) {\n                    // \u5982\u679c\u521b\u5efa FakeVehicleStub \u5931\u8d25\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u56de\u9000\u5230\u4f7f\u7528\u771f\u5b9e\u7684 VehicleStub\u3002\n                    Slogf.e(CarLog.TAG_SERVICE, e, \"Failed to create FakeVehicleStub. \"\n                            + \"Fallback to using real VehicleStub.\");\n                }\n            }\n            // \u8fd4\u56de\u6709\u6548\u7684 AIDL \u7248\u672c\u7684 VehicleStub\u3002\n            return stub;\n        }\n\n        // \u5982\u679c\u6ca1\u6709\u627e\u5230 AIDL \u7248\u672c\u7684\u8f66\u8f86 HAL\uff0c\u8bb0\u5f55\u4fe1\u606f\u65e5\u5fd7\u5e76\u5c1d\u8bd5\u4f7f\u7528 HIDL \u7248\u672c\u3002\n        Slogf.i(CarLog.TAG_SERVICE, \"No AIDL vehicle HAL found, fall back to HIDL version\");\n\n        // \u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a HIDL \u7248\u672c\u7684 VehicleStub\u3002\n        stub = new HidlVehicleStub();\n\n        // \u5982\u679c HIDL \u7248\u672c\u7684 VehicleStub \u4e5f\u65e0\u6548\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002\n        if (!stub.isValid()) {\n            throw new IllegalStateException(\"Vehicle HAL service is not available.\");\n        }\n\n        // \u8fd4\u56de\u6709\u6548\u7684 HIDL \u7248\u672c\u7684 VehicleStub\u3002\n        return stub;\n    }\n}\n</code></pre> <p>\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a <code>VehicleStub</code> \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u7528\u4e8e\u8fde\u63a5\u5230\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u3002\u51fd\u6570\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u4e2d\u53ef\u7528\u7684\u540e\u7aef\uff08AIDL \u6216 HIDL\uff09\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u7248\u672c\u7684 <code>VehicleStub</code>\u3002</p> <ul> <li>\u5c1d\u8bd5\u4f7f\u7528 Stable AIDL \u7248\u672c<ul> <li>\u9996\u5148\uff0c\u51fd\u6570\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a <code>AidlVehicleStub</code> \u5b9e\u4f8b\u3002</li> <li>\u68c0\u67e5\u8be5\u5b9e\u4f8b\u662f\u5426\u6709\u6548\uff08<code>isValid()</code> \u65b9\u6cd5\uff09\u3002</li> <li>\u5982\u679c\u6709\u6548\uff0c\u5e76\u4e14\u5728\u7528\u6237\u8c03\u8bd5\u7248\u672c\u6216\u5de5\u7a0b\u7248\u672c\u4e2d\u542f\u7528\u4e86 <code>FakeVehicleStub</code>\uff0c\u5219\u5c1d\u8bd5\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a <code>FakeVehicleStub</code>\u3002</li> <li>\u5982\u679c\u521b\u5efa <code>FakeVehicleStub</code> \u5931\u8d25\uff0c\u5219\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u56de\u9000\u5230\u4f7f\u7528\u771f\u5b9e\u7684 <code>AidlVehicleStub</code>\u3002</li> </ul> </li> <li>\u56de\u9000\u5230 HIDL \u7248\u672c<ul> <li>\u5982\u679c AIDL \u7248\u672c\u4e0d\u53ef\u7528\uff0c\u51fd\u6570\u8bb0\u5f55\u4fe1\u606f\u65e5\u5fd7\u5e76\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a <code>HidlVehicleStub</code> \u5b9e\u4f8b\u3002</li> <li>\u68c0\u67e5\u8be5\u5b9e\u4f8b\u662f\u5426\u6709\u6548\u3002</li> <li>\u5982\u679c HIDL \u7248\u672c\u4e5f\u4e0d\u53ef\u7528\uff0c\u5219\u629b\u51fa <code>IllegalStateException</code> \u5f02\u5e38\uff0c\u8868\u793a\u6ca1\u6709\u53ef\u7528\u7684\u8f66\u8f86 HAL \u670d\u52a1\u3002</li> </ul> </li> </ul> <p>Android \u4ece Android 12 \u5f00\u59cb\uff0c\u5c06 HIDL\uff08HAL Interface Definition Language\uff09\u9010\u6b65\u66ff\u6362\u4e3a Stable AIDL\uff08Android Interface Definition Language\uff09\u3002\u8fd9\u4e00\u5207\u6362\u7684\u76ee\u6807\u662f\u7b80\u5316\u63a5\u53e3\u5b9a\u4e49\uff0c\u5e76\u63d0\u4f9b\u66f4\u9ad8\u7684\u7a33\u5b9a\u6027\u548c\u5411\u540e\u517c\u5bb9\u6027\u3002</p> <p>Vehicle HAL \u662f\u5728 Android 13 \u4e2d\u5b9e\u73b0\u4e86\u4ece HIDL \u5230 Stable AIDL \u7684\u8fc1\u79fb\u3002</p> <p>\u5728\u5206\u6790 Android 15 \u65f6\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u4f7f\u7528 Stable AIDL \u63a5\u53e3\uff0c\u800c\u4e0d\u518d\u8003\u8651 HIDL \u7248\u672c\u3002<code>VehicleStub</code> \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5176\u5177\u4f53\u5b9e\u73b0\u7528\u4e8e\u901a\u8fc7 IPC \u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u4ea4\u4e92\u3002\u5728\u6df1\u5165\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3 Vehicle HAL \u63d0\u4f9b\u7684\u4e3b\u8981 IPC \u63a5\u53e3\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7406\u89e3\u5176\u529f\u80fd\u548c\u4ea4\u4e92\u65b9\u5f0f\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#ivehicleaidl","title":"IVehicle.aidl","text":"<pre><code>// hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicle.aidl\n\n// Vehicle HAL \u63a5\u53e3\uff0c\u5b9a\u4e49\u4e86\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002  \n@VintfStability  \ninterface IVehicle {  \n    /* \u4e00\u4e2a\u65e0\u6548\u7684\u5185\u5b58 ID\uff0c\u7528\u4e8e\u6807\u8bc6\u65e0\u6548\u7684\u5171\u4eab\u5185\u5b58\u3002 */    const long INVALID_MEMORY_ID = 0;  \n    /* \u6bcf\u4e2a\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u6700\u5927\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\uff0c\u9650\u5236\u4e86\u6bcf\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u3002 */    const int MAX_SHARED_MEMORY_FILES_PER_CLIENT = 3;  \n\n    /**  \n     * \u8fd4\u56de\u8f66\u8f86 HAL \u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002  \n     *  \n     * @return \u4e00\u4e2a\u53ef\u6253\u5305\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u5305\u542b\u914d\u7f6e\u5217\u8868\u6216\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u914d\u7f6e\u5217\u8868\u8d85\u51fa\u4e86 binder \u5185\u5b58\u9650\u5236\uff09\u3002  \n     * \u5fc5\u987b\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684\u5bf9\u8c61\u3002  \n     */  \n    VehiclePropConfigs getAllPropConfigs();  \n\n    /**  \n     * \u8fd4\u56de\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u5217\u8868\u3002  \n     *  \n     * \u5982\u679c\u8bf7\u6c42\u7684\u5c5e\u6027\u4e2d\u6709\u672a\u627e\u5230\u7684\uff0c\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\uff0c  \n     * \u5426\u5219\u8fd4\u56de\u5305\u542b {@link StatusCode#OK} \u7684\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002  \n     *  \n     * @param props \u8981\u83b7\u53d6\u914d\u7f6e\u7684\u5c5e\u6027 ID \u5217\u8868\u3002  \n     * @return \u4e00\u4e2a\u53ef\u6253\u5305\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u5305\u542b\u914d\u7f6e\u5217\u8868\u6216\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u914d\u7f6e\u5217\u8868\u8d85\u51fa\u4e86 binder \u5185\u5b58\u9650\u5236\uff09\u3002  \n     * \u5fc5\u987b\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684\u5bf9\u8c61\u3002  \n     */  \n    VehiclePropConfigs getPropConfigs(in int[] props);  \n\n    /**  \n     * \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002  \n     *  \n     * \u5f53\u503c\u88ab\u83b7\u53d6\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onGetValues} \u65b9\u6cd5\u3002  \n     * \u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u4f20\u9012\u5df2\u83b7\u53d6\u7684\u5c5e\u6027\u7684\u5b50\u96c6\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u5c5e\u6027 [A, B, C]\uff0c\u56de\u8c03\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u4e24\u6b21\uff0c\u5206\u522b\u4f20\u9012 [A, C] \u548c [B]\u3002  \n     * \u8c03\u7528\u8005\u4e0d\u5e94\u671f\u671b {@link IVehicleCallback#onGetValues} \u7684\u8c03\u7528\u987a\u5e8f\u3002  \n     *  \n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u3002  \n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56de OK\uff0c\u4ecd\u7136\u6709\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u67d0\u4e9b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u72b6\u6001\u7531 {@link GetValueResult#status} \u6307\u793a\u3002  \n     *  \n     * \u5bf9\u4e8e {@link VehiclePropertyChangeMode#STATIC} \u5c5e\u6027\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u59cb\u7ec8\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002  \n     * \u5bf9\u4e8e {@link VehiclePropertyChangeMode#ON_CHANGE} \u5c5e\u6027\uff0c\u5fc5\u987b\u8fd4\u56de\u6700\u65b0\u53ef\u7528\u7684\u503c\u3002  \n     * \u5bf9\u4e8e\u53ef\u7f13\u5b58\u7684\u5c5e\u6027\uff0c\u5c06\u8fd4\u56de\u7f13\u5b58\u4e2d\u7684\u503c\uff0c\u800c\u65e0\u9700\u4e0e\u5b9e\u9645\u7684\u8f66\u8f86\u603b\u7ebf\u901a\u4fe1\u3002  \n     *  \n     * \u67d0\u4e9b\u5c5e\u6027\uff08\u5982 {@code RADIO_PRESET}\uff09\u9700\u8981\u5728 {@link VehiclePropValue} \u5bf9\u8c61\u4e2d\u4f20\u9012\u9644\u52a0\u6570\u636e\u3002  \n     *  \n     * \u5982\u679c\u5c1a\u65e0\u53ef\u7528\u6570\u636e\uff08\u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u521d\u59cb\u9636\u6bb5\uff09\uff0c{@link GetValueResult#status} \u5305\u542b {@link StatusCode#TRY_AGAIN}\u3002  \n     *  \n     * \u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f20\u9012\u4e00\u4e2a\u552f\u4e00\u7684 RequestID\uff0c\u5982\u679c\u4efb\u4f55\u7ed9\u5b9a\u7684\u8bf7\u6c42 ID \u4e0e\u6302\u8d77\u7684\u8bf7\u6c42 ID \u91cd\u590d\uff0c  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027 ID \u548c\u76f8\u540c\u7684\u533a\u57df ID\uff09\u3002  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u4e3a\u91cd\u590d\u5c5e\u6027\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u8bf7\u6c42\u4e2d\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5c06\u88ab\u5ffd\u7565\u3002  \n     * {@link GetValueResult} \u4e2d\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5fc5\u987b\u662f\u81ea\u542f\u52a8\u4ee5\u6765\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff0c  \n     * \u5f53\u503c\u53d1\u751f\u53d8\u5316\u65f6\u9002\u7528\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u6216\u6839\u636e\u8f6e\u8be2\u7387\u68c0\u67e5\u503c\u65f6\u9002\u7528\u4e8e CONTINUOUS \u5c5e\u6027\u3002  \n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e CONTINUOUS \u5c5e\u6027\uff0cVHAL \u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002  \n     *  \n     * @param callback \u4e00\u4e2a\u56de\u8c03\u63a5\u53e3\uff0c\u5728\u503c\u88ab\u83b7\u53d6\u540e\u8c03\u7528\u5176 'onGetValues'\u3002  \n     * \u8c03\u7528\u8005\u5e94\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684 {@link GetValueResult} \u5bf9\u8c61\u3002  \n     * @param requests \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b\u8bf7\u6c42\u7684\u5c5e\u6027\u5217\u8868\u6216\u5305\u542b\u5c5e\u6027\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002  \n     * \u8be5\u5bf9\u8c61\u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002  \n     */  \n    void getValues(IVehicleCallback callback, in GetValueRequests requests);  \n\n    /**  \n     * \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002  \n     *  \n     * \u5728\u503c\u8bbe\u7f6e\u8bf7\u6c42\u901a\u8fc7\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u6216\u8bbe\u7f6e\u5931\u8d25\u540e\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onSetValues} \u51fd\u6570\u3002  \n     * \u5982\u679c\u603b\u7ebf\u534f\u8bae\u652f\u6301\u786e\u8ba4\uff0c\u5219\u5728\u6536\u5230\u786e\u8ba4\u540e\u8c03\u7528\u56de\u8c03\u3002  \n     *  \n     * \u5bf9\u4e8e\u67d0\u4e9b\u4e0d\u652f\u6301\u786e\u8ba4\u7684\u8f66\u8f86\u603b\u7ebf\uff08\u5982 CAN \u603b\u7ebf\uff09\uff0cOnSetValues \u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u503c\u7684\u53d8\u5316\u4f1a\u7acb\u5373\u53cd\u6620\u5728 {@link #getValues} \u4e2d\u3002  \n     *  \n     * \u5982\u679c\u8f93\u51fa\u72b6\u6001\u5305\u542b\u9519\u8bef\uff0c\u5219\u8868\u793a\u6211\u4eec\u65e0\u6cd5\u8bbe\u7f6e\u6240\u6709\u5c5e\u6027\u3002  \n     * \u5982\u679c\u6211\u4eec\u65e0\u6cd5\u8bbe\u7f6e\u67d0\u4e9b\u503c\uff0c\u5b83\u4eec\u5c06\u53cd\u6620\u4e3a\u975e OK \u7684 {@link SetValueResult#status}\u3002  \n     *  \n     * \u8bf7\u6c42\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u7684\u8bbe\u7f6e\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\u5982\u679c\u8c03\u7528\u8005\u9700\u8981\u786e\u4fdd\u8bbe\u7f6e\u503c\u7684\u987a\u5e8f\uff0c\u8c03\u7528\u8005\u5e94\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff0c\u7b49\u5f85\u5176\u56de\u8c03\uff0c\u7136\u540e\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u503c\u3002  \n     *  \n     * \u6570\u636e\u7684\u65f6\u95f4\u6233\u5728\u8bbe\u7f6e\u64cd\u4f5c\u4e2d\u5fc5\u987b\u88ab\u5ffd\u7565\u3002  \n     *  \n     * \u8bbe\u7f6e\u67d0\u4e9b\u5c5e\u6027\u9700\u8981\u6709\u53ef\u7528\u7684\u521d\u59cb\u72b6\u6001\u3002\u5982\u679c\u521d\u59cb\u6570\u636e\u5c1a\u4e0d\u53ef\u7528\uff0c{@link SetValueResult#status} \u5fc5\u987b\u662f {@link StatusCode#TRY_AGAIN}\u3002  \n     * \u5bf9\u4e8e\u5177\u6709\u72ec\u7acb\u7535\u6e90\u63a7\u5236\u7684\u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u672a\u901a\u7535\uff0c{@link SetValueResult#status} \u5fc5\u987b\u662f {@link StatusCode#NOT_AVAILABLE}\u3002  \n     *  \n     * \u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f20\u9012\u4e00\u4e2a\u552f\u4e00\u7684 RequestID\uff0c\u5982\u679c\u4efb\u4f55\u7ed9\u5b9a\u7684\u8bf7\u6c42 ID \u4e0e\u6302\u8d77\u7684\u8bf7\u6c42 ID \u91cd\u590d\uff0c  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027 ID \u548c\u76f8\u540c\u7684\u533a\u57df ID\uff09\u3002  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u4e3a\u91cd\u590d\u5c5e\u6027\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * @param callback \u56de\u8c03\uff0c\u5728\u8bbe\u7f6e\u503c\u8bf7\u6c42\u53d1\u9001\u5230\u603b\u7ebf\u540e\u8c03\u7528\u5176 'onSetValues'\u3002  \n     * @param requests \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b {@link SetValueRequest} \u5217\u8868\u6216\u5b58\u50a8\u8bf7\u6c42\u5217\u8868\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u5b83\u4eec\u8d85\u8fc7 binder \u5185\u5b58\u9650\u5236\uff09\uff0c  \n     * \u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002  \n     */  \n    void setValues(IVehicleCallback callback, in SetValueRequests requests);  \n\n    /**  \n     * \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n     *  \n     * \u5ba2\u6237\u7aef\u5fc5\u987b\u80fd\u591f\u6839\u636e options \u53c2\u6570\u4e2d\u63d0\u4f9b\u7684\u6570\u636e\u4e00\u6b21\u8ba2\u9605\u591a\u4e2a\u5c5e\u6027\u3002  \n     *  \n     * \u5bf9\u4e8e\u4e00\u4e2a\u56de\u8c03\uff0c\u4e00\u4e2a\u5c5e\u6027\u53ea\u6709\u4e00\u4e2a\u8ba2\u9605\u3002\u5177\u6709\u4e0d\u540c\u91c7\u6837\u7387\u7684\u65b0\u8ba2\u9605\u5c06\u8986\u76d6\u65e7\u8ba2\u9605\u3002  \n     * \u4e00\u4e2a\u5c5e\u6027\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u56de\u8c03\u591a\u6b21\u8ba2\u9605\u3002  \n     *  \n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u67d0\u4e9b\u5c5e\u6027\u8ba2\u9605\u5931\u8d25\u3002  \n     * \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u8ba2\u9605\u5df2\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002  \n     *  \n     * \u6307\u5b9a\u7684\u91c7\u6837\u7387\u53ea\u662f\u4e00\u4e2a\u6307\u5bfc\u3002\u6839\u636e\u8f6e\u8be2\u5237\u65b0\u7387\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u91c7\u6837\u7387\u662f\u53ef\u5b9e\u73b0\u7684\u3002  \n     * \u5b9e\u9645\u7684\u5c5e\u6027\u4e8b\u4ef6\u7387\u53ef\u80fd\u9ad8\u4e8e\u6216\u4f4e\u4e8e\u6307\u5b9a\u7684 sampleRate\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u8f6e\u8be2\u7387\u53ef\u4ee5\u662f\u6bcf\u79d2 5 \u6b21\u6216 10 \u6b21\uff0c\u8ba2\u9605 7 \u7684\u91c7\u6837\u7387\u53ef\u80fd\u4f1a\u4f7f\u7528\u6bcf\u79d2 5 \u6b21\u7684\u8f6e\u8be2\u7387\uff0c\u4ece\u800c\u751f\u6210\u6bcf\u79d2 5 \u6b21\u4e8b\u4ef6\u3002  \n     * \u6211\u4eec\u53ea\u8981\u6c42\u5e73\u5747\u800c\u8a00\uff0c{@code minSampleRate} \u548c {@code maxSampleRate} \u53ef\u4ee5\u5b9e\u73b0\uff0c  \n     * \u6240\u6709\u5728\u6700\u5c0f\u548c\u6700\u5927\u4e4b\u95f4\u7684 sampleRate \u5e73\u5747\u800c\u8a00\u751f\u6210\u4e8b\u4ef6\u7684\u901f\u7387 &gt;= {@code minSampleRate} \u4e14 &lt;= {@code maxSampleRate}\u3002  \n     *  \n     * \u6bcf\u4e2a\u5c5e\u6027\u4e8b\u4ef6\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5fc5\u987b\u662f\u81ea\u542f\u52a8\u4ee5\u6765\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff0c  \n     * \u5f53\u503c\u53d1\u751f\u53d8\u5316\u65f6\u9002\u7528\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u6216\u6839\u636e\u8f6e\u8be2\u7387\u68c0\u67e5\u503c\u65f6\u9002\u7528\u4e8e CONTINUOUS \u5c5e\u6027\u3002  \n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e CONTINUOUS \u5c5e\u6027\uff0cVHAL \u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u5c5e\u6027\u7684\u8f6e\u8be2\u7387\u662f\u6bcf\u79d2 10 \u6b21\uff0c\u65e0\u8bba {@code options} \u4e2d\u6307\u5b9a\u7684 sampleRate \u662f\u4ec0\u4e48\uff0c\u65f6\u95f4\u6233\u6bcf\u79d2\u66f4\u65b0 10 \u6b21\u3002  \n     *  \n     * \u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u7535\u6e90\u72b6\u6001\u5173\u95ed\u800c\u65e0\u6cd5\u8bfb\u53d6\u5c5e\u6027\uff0c\u5219\u5728\u5c5e\u6027\u53ef\u7528\u4e4b\u524d\u53ef\u80fd\u4e0d\u4f1a\u751f\u6210\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\u3002  \n     * \u5bf9\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u4ece NOT_AVAILABLE \u66f4\u6539\u4e3a OKAY \u4ee5\u8bfb\u53d6\u67d0\u4e9b\u6216\u6240\u6709\u533a\u57df\uff0c  \n     * \u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u4f9b\u8bfb\u53d6\u7684\u533a\u57df\uff0c\u5fc5\u987b\u751f\u6210\u4e00\u4e2a\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\u3002\u4e8b\u4ef6\u5fc5\u987b\u5305\u542b\u8be5\u533a\u57df\u7684\u5f53\u524d\u503c\u5e76\u5177\u6709 {@code AVAILABLE} \u72b6\u6001\u3002  \n     *  \n     * @param callback \u8ba2\u9605\u56de\u8c03\u3002  \n     *    \u5f53\u65b0\u5c5e\u6027\u4e8b\u4ef6\u5230\u8fbe\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onPropertyEvent}\u3002  \n     *    \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u5f02\u6b65\u5931\u8d25\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onPropertySetError}\u3002  \n     *    \u8fd9\u901a\u5e38\u662f\u7531\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u7684\u5c5e\u6027\u8bbe\u7f6e\u5931\u8d25\u6d88\u606f\u5f15\u8d77\u7684\u3002  \n     * @param options \u8ba2\u9605\u9009\u9879\u5217\u8868\u3002SubscribeOption \u5305\u542b\u5c5e\u6027 ID\u3001\u533a\u57df ID\u3001\u91c7\u6837\u7387\u7b49\u4fe1\u606f\u3002  \n     *    \u5bf9\u4e8e\u8fde\u7eed\u5c5e\u6027\uff0c\u5fc5\u987b\u63d0\u4f9b\u91c7\u6837\u7387\u3002\u5982\u679c\u91c7\u6837\u7387\u5c0f\u4e8e {@link VehiclePropConfig#minSampleRate}\uff0c  \n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3a minSampleRate\u3002\u5982\u679c\u91c7\u6837\u7387\u5927\u4e8e {@link VehiclePropValue#maxSampleRate}\uff0c  \n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3a maxSampleRate\u3002  \n     * @param maxSharedMemoryFileCount \u4e3a\u6b64\u8ba2\u9605\u5728 VHAL \u4e2d\u5206\u914d\u7684\u6700\u5927\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u3002  \n     *    \u5f53\u5185\u5b58\u6587\u4ef6\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u65f6\uff0c\u5728\u8c03\u7528 returnSharedMemory \u5c06\u7f13\u51b2\u533a\u8fd4\u56de\u7ed9 VHAL \u4e4b\u524d\uff0c  \n     *    VHAL \u4e0d\u80fd\u4f7f\u7528\u8be5\u5185\u5b58\u6587\u4ef6\u6765\u4f20\u9012\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u3002\u8f83\u5927\u7684 maxSharedMemoryFileCount \u610f\u5473\u7740\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\u6027\u80fd\u66f4\u597d\uff0c  \n     *    \u4f46\u4e5f\u610f\u5473\u7740\u66f4\u5927\u7684\u5185\u5b58\u5360\u7528\u3002\u5982\u679c\u4e0d\u671f\u671b\u4e8b\u4ef6\u975e\u5e38\u9891\u7e41\u5730\u5230\u8fbe\uff0c\u5efa\u8bae\u503c\u4e3a 2\u3002\u503c\u4e3a 0 \u8868\u793a\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u5c5e\u6027\uff0c  \n     *    \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u7528\u4efb\u4f55\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\u8fd9\u4ec5\u5e94\u4e3a\u4e0d\u9891\u7e41\u7684\u4e8b\u4ef6\u6216\u5185\u5b58\u6709\u9650\u7684\u8bbe\u5907\u914d\u7f6e\u3002  \n     *    \u6b64\u503c\u5fc5\u987b &gt;=0 \u4e14 &lt; {@link MAX_SHARED_MEMORY_FILES_PER_CLIENT}\u3002  \n     */  \n    void subscribe(in IVehicleCallback callback, in SubscribeOptions[] options,  \n                   int maxSharedMemoryFileCount);  \n\n    /**  \n     * \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n     *  \n     * \u5982\u679c 'callback' \u65e0\u6548\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     * \u5982\u679c\u6307\u5b9a\u7684 propId \u4e4b\u524d\u672a\u8ba2\u9605\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u5ffd\u7565\u8be5 propId\u3002  \n     *  \n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u67d0\u4e9b\u5c5e\u6027\u53d6\u6d88\u8ba2\u9605\u5931\u8d25\u3002  \n     * \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u53d6\u6d88\u8ba2\u9605\u5df2\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002  \n     *  \n     * @param callback \u5728\u5148\u524d\u8ba2\u9605\u4e2d\u4f7f\u7528\u7684\u56de\u8c03\u3002  \n     * @param propIds \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u7684 ID\u3002  \n     */  \n    void unsubscribe(in IVehicleCallback callback, in int[] propIds);  \n\n    /**  \n     * \u5c06\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u8fd4\u56de\u7ed9 VHAL \u4ee5\u4f9b\u56de\u6536\u3002  \n     *  \n     * \u5728\u5ba2\u6237\u7aef\u4e0d\u518d\u4f7f\u7528\u7531 {@link IVehicleCallback#onPropertyEvent} \u8fd4\u56de\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u540e\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002  \n     * \u901a\u5e38\u5728 'onPropertyEvent' \u7ed3\u675f\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\u3002  \n     *  \n     * \u5982\u679c 'callback' \u65e0\u6548\u6216 'sharedMemoryId' \u4e0e\u4f20\u9012\u7ed9 {@link IVehicleCallback#onPropertyEvent} \u7684  \n     * 'VehiclePropValues' \u4e2d\u7684\u4efb\u4f55 SharedMemoryId \u4e0d\u5339\u914d\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * @param callback \u5728\u8ba2\u9605\u4e2d\u4f7f\u7528\u7684\u56de\u8c03\u3002  \n     * @param sharedMemoryId \u7531 'onPropertyEvent' \u8fd4\u56de\u7684 ID\uff0c\u8868\u793a\u8981\u8fd4\u56de\u7684\u5df2\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002  \n     */  \n    void returnSharedMemory(in IVehicleCallback callback, long sharedMemoryId);  \n}\n</code></pre> <p>\u4ee5\u4e0a\u662f IVehicle.aidl \u4ee3\u7801\uff0c\u4ece\u5176\u63a5\u53e3\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u4e3b\u8981\u662f\u4e0e\u8f66\u8f86 HAL \u4ea4\u4e92\u7684\u6838\u5fc3\u63a5\u53e3\uff0c\u652f\u6301\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\uff0c\u5904\u7406\u5f02\u6b65\u64cd\u4f5c\u548c\u8d44\u6e90\u7ba1\u7406\u3002</p> <ul> <li> <p>getAllPropConfigs() \u8fd4\u56de\u8f66\u8f86 HAL \u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002</p> </li> <li> <p>getPropConfigs()\uff1a \u8fd4\u56de\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u5217\u8868\u3002</p> </li> <li> <p>getValues()\uff1a \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u80fd\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u5c5e\u6027\u7684\u5b50\u96c6\u3002\u652f\u6301\u4e0d\u540c\u7684\u5c5e\u6027\u53d8\u5316\u6a21\u5f0f\uff08\u9759\u6001\u3001\u53d8\u5316\u3001\u8fde\u7eed\uff09\uff0c\u5e76\u5904\u7406\u7f13\u5b58\u548c\u65f6\u95f4\u6233\u3002</p> </li> <li> <p>setValues()\uff1a \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u901a\u77e5\u8bbe\u7f6e\u7ed3\u679c\u3002\u5904\u7406\u8bbe\u7f6e\u987a\u5e8f\u3001\u786e\u8ba4\u673a\u5236\u3001\u521d\u59cb\u72b6\u6001\u9700\u6c42\u548c\u91cd\u590d\u8bf7\u6c42 ID \u7b49\u95ee\u9898\u3002</p> </li> <li> <p>subscribe()\uff1a \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002</p> </li> <li> <p>unsubscribe \u65b9\u6cd5\uff1a \u53d6\u6d88\u8ba2\u9605\u6307\u5b9a\u5c5e\u6027\u7684\u4e8b\u4ef6\u3002</p> </li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#ivehiclecallbackaidl","title":"IVehicleCallback.aidl","text":"<pre><code>// hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicleCallback.aidl\n\n// IVehicleCallback \u63a5\u53e3\uff0c\u5b9a\u4e49\u4e86\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u65f6\u7684\u56de\u8c03\u63a5\u53e3\u3002\n@VintfStability\ninterface IVehicleCallback {\n\n    /**\n     * {@link IVehicle#getValues} \u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53\u4e00\u4e9b\u8981\u83b7\u53d6\u7684\u503c\u51c6\u5907\u597d\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a 'getValues' \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u503c\u3002\u4fdd\u8bc1\u6240\u6709\u8bf7\u6c42\u7684\u503c\u90fd\u4f1a\u5728\u67d0\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u6bcf\u4e2a\u503c\u51c6\u5907\u597d\u7684\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\n     *\n     * @param responses \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b {@link GetValueResult} \u7684\u5217\u8868\uff08\u5982\u679c\u5b83\u4eec\u7b26\u5408 binder \u5185\u5b58\u9650\u5236\uff09\u6216\u5305\u542b\u54cd\u5e94\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\n     * \u6bcf\u4e2a {@link GetValueResult} \u8981\u4e48\u5305\u542b\u5c5e\u6027\u503c\uff0c\u8981\u4e48\u5305\u542b\u83b7\u53d6\u503c\u65f6\u53d1\u751f\u7684\u9519\u8bef\u3002\n     *\n     * {@link GetValueResult} \u8fd8\u5305\u542b\u4e00\u4e2a requestId\uff0c\u6307\u793a\u8be5\u54cd\u5e94\u662f\u9488\u5bf9\u54ea\u4e2a\u8bf7\u6c42\u7684\u3002\n     * \u54cd\u5e94\u5bf9\u8c61\u5e94\u7531 {@code android-automotive-large-parcelable} \u5e93\u89e3\u6790\u3002\n     */\n    oneway void onGetValues(in GetValueResults responses);\n\n    /**\n     * {@link IVehicle#setValues} \u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53 VHAL \u5b8c\u6210\u5904\u7406\u4e00\u4e9b\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a 'setValues' \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u503c\u3002\u4fdd\u8bc1\u6240\u6709\u8bbe\u7f6e\u7684\u503c\u72b6\u6001\u90fd\u4f1a\u5728\u67d0\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u6bcf\u4e2a\u503c\u8bbe\u7f6e\u7684\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\n     *\n     * @param responses {@link SetValueResult} \u7684\u5217\u8868\u3002\u6bcf\u4e2a SetValueResult \u5305\u542b\u4e00\u4e2a\u72b6\u6001\uff0c\u6307\u793a\u8bbe\u7f6e\u7279\u5b9a\u5c5e\u6027\u7684\u72b6\u6001\u3002\n     * requestId \u6307\u793a\u8be5\u54cd\u5e94\u662f\u9488\u5bf9\u54ea\u4e2a\u8bf7\u6c42\u7684\u3002\n     */\n    oneway void onSetValues(in SetValueResults responses);\n\n    /**\n     * \u5f53 API \u7528\u6237\u8ba2\u9605\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u9700\u8981\u62a5\u544a\u65f6\u53d1\u751f\u7684\u4e8b\u4ef6\u56de\u8c03\u3002\n     * \u8fd9\u53ef\u80fd\u7eaf\u7cb9\u57fa\u4e8e\u9608\u503c\u548c\u9891\u7387\uff08\u5e38\u89c4\u8ba2\u9605\uff0c\u53c2\u89c1 subscribe \u8c03\u7528\u7684\u53c2\u6570\uff09\u6216\u5f53\u8c03\u7528 {@link IVehicle#setValues} \u65b9\u6cd5\u5e76\u9700\u8981\u62a5\u544a\u5b9e\u9645\u66f4\u6539\u65f6\u3002\n     *\n     * @param propValues \u5305\u542b\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7684\u5bf9\u8c61\u3002\n     * \u5982\u679c\u5c5e\u6027\u5728 binder \u9650\u5236\u5185\uff0c\u5b83\u4eec\u5c06\u4f4d\u4e8e {@code propValues.payloads} \u4e2d\uff0c\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u4f4d\u4e8e\u5171\u4eab\u5185\u5b58\u6587\u4ef6 {@code propValues.sharedMemoryFd} \u4e2d\u3002\n     * \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7531 VHAL \u521b\u5efa\uff0c\u4f7f\u7528\u540e\u5fc5\u987b\u4f7f\u7528 {@link IVehicle#returnSharedMemory} \u8fd4\u56de\u7ed9 VHAL\u3002\n     * \u4e3a\u6bcf\u4e2a\u8ba2\u9605\u521b\u5efa\u7684\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u6709\u9650\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u8fd4\u56de\u5171\u4eab\u5185\u5b58\uff0c\u5ba2\u6237\u7aef\u53ef\u80fd\u65e0\u6cd5\u5728\u672a\u6765\u83b7\u5f97\u4e8b\u4ef6\u3002\n     * @param sharedMemoryFileCount \u4e3a\u6b64\u8ba2\u9605\u5206\u914d\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u3002\n     * \u8be5\u503c\u53ef\u7528\u4e8e\u8c03\u6574 {@link IVehicle#subscribe} \u4e2d\u7684 {@code maxSharedMemoryFileCount}\u3002\n     * \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u901a\u5e38\u770b\u5230 sharedMemoryFileCount \u662f\u60a8\u8bbe\u7f6e\u7684 maxSharedMemoryFileCount\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u80fd\u9700\u8981\u589e\u52a0 maxSharedMemoryFileCount\u3002\n     */\n    oneway void onPropertyEvent(in VehiclePropValues propValues, int sharedMemoryFileCount);\n\n    /**\n     * \u8bbe\u7f6e\u5c5e\u6027\u503c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u5ba2\u6237\u7aef\u4ece {@link IVehicle#setValues} \u6536\u5230 {@link StatusCode#OK}\uff0c\n     * \u6216\u5728 {@link #onSetValues} \u4e2d\u6536\u5230 {@link StatusCode#OK}\uff0c\u8fd9\u5e76\u4e0d\u4fdd\u8bc1\u503c\u5df2\u6210\u529f\u4f20\u64ad\u5230\u8f66\u8f86\u7f51\u7edc\u3002\n     * \u5982\u679c\u53d1\u751f\u8fd9\u79cd\u7f55\u89c1\u4e8b\u4ef6\uff0c\u5219\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n     *\n     * @param errors \u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u7684\u5217\u8868\u3002\u5982\u679c VHAL \u5b9e\u73b0\u4e0d\u6279\u91cf\u5904\u7406\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u53ea\u5305\u542b\u4e00\u4e2a\u9519\u8bef\u3002\n     */\n    oneway void onPropertySetError(in VehiclePropErrors errors);\n}\n</code></pre> <ul> <li> <p>onGetValues()\uff1a \u7528\u4e8e\u5904\u7406 <code>IVehicle#getValues</code> \u8bf7\u6c42\u7684\u56de\u8c03\u3002\u5f53\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u51c6\u5907\u597d\u65f6\u8c03\u7528\uff0c\u53ef\u80fd\u4f1a\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\u3002</p> </li> <li> <p>onSetValues()\uff1a \u7528\u4e8e\u5904\u7406 <code>IVehicle#setValues</code> \u8bf7\u6c42\u7684\u56de\u8c03\u3002\u5f53\u8bf7\u6c42\u7684\u5c5e\u6027\u8bbe\u7f6e\u5b8c\u6210\u65f6\u8c03\u7528\uff0c\u53ef\u80fd\u4f1a\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\u3002</p> </li> <li> <p>onPropertyEvent()\uff1a \u5f53\u8ba2\u9605\u7684\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\u53ef\u80fd\u57fa\u4e8e\u8ba2\u9605\u7684\u9608\u503c\u548c\u9891\u7387\u6216\u5c5e\u6027\u8bbe\u7f6e\u7684\u53d8\u5316\u3002</p> </li> <li> <p>onPropertySetError()\uff1a \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\u65f6\u8c03\u7528\u3002\u5373\u4f7f\u4e4b\u524d\u7684\u64cd\u4f5c\u8fd4\u56de\u6210\u529f\u72b6\u6001\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u3002</p> </li> </ul> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ddf Vehicle HAL \u4ea4\u4e92\u7684\u4e3b\u8981\u63a5\u53e3\u4e86\uff0c\u6211\u4eec\u8fd4\u56de\u5230VehicleStub.newVehicleStub()\u4e2d\uff0c\u5176\u83b7\u53d6 Stable AIDL \u7248\u672c\u5c31\u662f\u521b\u5efa\u4e00\u4e2aAidlVehicleStub\u5b9e\u4f8b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#aidlvehiclestub","title":"AidlVehicleStub\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// AidlVehicleStub \u7c7b\u662f VehicleStub \u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u7528\u4e8e\u901a\u8fc7 AIDL \u63a5\u53e3\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u3002\nfinal class AidlVehicleStub extends VehicleStub {\n\n    // IVehicle \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u8fdb\u884c\u901a\u4fe1\u3002\n    private final IVehicle mAidlVehicle;\n    // \u7528\u4e8e\u6784\u5efa HAL \u5c5e\u6027\u503c\u7684\u6784\u5efa\u5668\uff0c\u6307\u5b9a\u4e3a AIDL \u7248\u672c\u3002\n    private final HalPropValueBuilder mPropValueBuilder;\n    // \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u64cd\u4f5c\u7684 HandlerThread\u3002\n    private final HandlerThread mHandlerThread;\n    // \u7528\u4e8e\u5904\u7406\u6d88\u606f\u548c\u5f02\u6b65\u4efb\u52a1\u7684 Handler\u3002\n    private final Handler mHandler;\n    // \u7528\u4e8e\u5904\u7406\u83b7\u53d6\u548c\u8bbe\u7f6e\u503c\u56de\u8c03\u7684\u5185\u90e8\u7c7b\u5b9e\u4f8b\u3002\n    private final GetSetValuesCallback mGetSetValuesCallback;\n    // \u7528\u4e8e\u7ba1\u7406\u6302\u8d77\u7684\u5f02\u6b65\u8bf7\u6c42\u7684\u6c60\u3002\n    private final PendingAsyncRequestPool mPendingAsyncRequestPool;\n\n    // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 getAidlVehicle() \u83b7\u53d6 IVehicle \u5b9e\u4f8b\u3002\n    AidlVehicleStub() {\n        this(getAidlVehicle());\n    }\n\n    // \u6d4b\u8bd5\u53ef\u89c1\u7684\u6784\u9020\u51fd\u6570\uff0c\u5141\u8bb8\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 IVehicle \u5b9e\u4f8b\u3002\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle) {\n        // \u4f7f\u7528\u9ed8\u8ba4\u7684 HandlerThread \u5b9e\u4f8b\u5316 AidlVehicleStub\u3002\n        this(aidlVehicle,\n                CarServiceUtils.getHandlerThread(AidlVehicleStub.class.getSimpleName()));\n    }\n\n    // \u6d4b\u8bd5\u53ef\u89c1\u7684\u6784\u9020\u51fd\u6570\uff0c\u5141\u8bb8\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 IVehicle \u5b9e\u4f8b\u548c HandlerThread\u3002\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle, HandlerThread handlerThread) {\n        // \u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002\n        mAidlVehicle = aidlVehicle; // \u8d4b\u503c IVehicle \u5b9e\u4f8b\u3002\n        mPropValueBuilder = new HalPropValueBuilder(/*isAidl=*/true); // \u521d\u59cb\u5316\u5c5e\u6027\u503c\u6784\u5efa\u5668\u3002\n        mHandlerThread = handlerThread; // \u8d4b\u503c HandlerThread \u5b9e\u4f8b\u3002\n        mHandler = new Handler(mHandlerThread.getLooper()); // \u521b\u5efa Handler \u5b9e\u4f8b\u3002\n        mGetSetValuesCallback = new GetSetValuesCallback(); // \u521d\u59cb\u5316\u56de\u8c03\u5b9e\u4f8b\u3002\n        mPendingAsyncRequestPool = new PendingAsyncRequestPool(mHandler.getLooper()); // \u521d\u59cb\u5316\u5f02\u6b65\u8bf7\u6c42\u6c60\u3002\n    }\n}\n</code></pre> <ul> <li>\u8c03\u7528 <code>getAidlVehicle()</code> \u65b9\u6cd5\u83b7\u53d6 <code>IVehicle</code> \u5b9e\u4f8b\u3002</li> <li>\u521d\u59cb\u5316\u56de\u8c03\u5b9e\u4f8b mGetSetValuesCallback\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#getaidlvehicle","title":"getAidlVehicle()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// AidlVehicleStub \u7c7b\u662f VehicleStub \u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u7528\u4e8e\u901a\u8fc7 AIDL \u63a5\u53e3\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u3002\nfinal class AidlVehicleStub extends VehicleStub {\n\n    // \u5b9a\u4e49 AIDL VHAL \u670d\u52a1\u7684\u540d\u79f0\uff0c\u7528\u4e8e\u4ece\u670d\u52a1\u7ba1\u7406\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u3002\n    private static final String AIDL_VHAL_SERVICE =\n            \"android.hardware.automotive.vehicle.IVehicle/default\";\n\n    /**\n     * \u83b7\u53d6 AIDL \u8f66\u8f86\u670d\u52a1\u7684\u5b9e\u4f8b\u3002\n     *\n     * \u5c1d\u8bd5\u4ece\u670d\u52a1\u7ba1\u7406\u5668\u4e2d\u83b7\u53d6\u540d\u4e3a AIDL_VHAL_SERVICE \u7684\u8f66\u8f86\u670d\u52a1\u3002\n     * \u5982\u679c\u83b7\u53d6\u6210\u529f\uff0c\u5219\u8fd4\u56de IVehicle \u63a5\u53e3\u7684\u5b9e\u4f8b\u3002\n     * \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u5219\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de null\u3002\n     *\n     * @return IVehicle \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u83b7\u53d6\u5931\u8d25\u5219\u8fd4\u56de null\u3002\n     */\n    @Nullable\n    private static IVehicle getAidlVehicle() {\n        try {\n            // \u4ece\u670d\u52a1\u7ba1\u7406\u5668\u4e2d\u7b49\u5f85\u5e76\u83b7\u53d6\u58f0\u660e\u7684\u670d\u52a1\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u6362\u4e3a IVehicle \u63a5\u53e3\u3002\n            return IVehicle.Stub.asInterface(\n                    ServiceManagerHelper.waitForDeclaredService(AIDL_VHAL_SERVICE));\n        } catch (RuntimeException e) {\n            // \u5982\u679c\u5728\u83b7\u53d6\u670d\u52a1\u65f6\u53d1\u751f\u8fd0\u884c\u65f6\u5f02\u5e38\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u3002\n            Slogf.w(TAG, \"Failed to get \\\"\" + AIDL_VHAL_SERVICE + \"\\\" service\", e);\n        }\n        // \u5982\u679c\u83b7\u53d6\u670d\u52a1\u5931\u8d25\uff0c\u8fd4\u56de null\u3002\n        return null;\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u83b7\u53d6\u670d\u52a1\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a <code>IVehicle</code> \u63a5\u53e3\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u8c03\u7528\u4e4b\u524d\u5206\u6790\u7684 <code>IVehicle.aidl</code> \u4e2d\u5b9a\u4e49\u7684\u63a5\u53e3\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4f7f\u5f97 CarService \u80fd\u591f\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u4ea4\u4e92\uff0c\u6267\u884c\u5982\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u3001\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u7b49\u64cd\u4f5c\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#getsetvaluescallback","title":"GetSetValuesCallback","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// GetSetValuesCallback \u662f\u4e00\u4e2a\u79c1\u6709\u7684\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u83b7\u53d6\u548c\u8bbe\u7f6e\u64cd\u4f5c\u7684\u56de\u8c03\u3002\n// \u5b83\u7ee7\u627f\u81ea IVehicleCallback.Stub\uff0c\u8fd9\u662f\u4e00\u4e2a AIDL \u751f\u6210\u7684\u62bd\u8c61\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u901a\u4fe1\u3002\nprivate final class GetSetValuesCallback extends IVehicleCallback.Stub {\n\n    /**\n     * \u5f53\u8f66\u8f86\u5c5e\u6027\u503c\u83b7\u53d6\u64cd\u4f5c\u5b8c\u6210\u65f6\u8c03\u7528\u3002\n     *\n     * @param responses \u5305\u542b\u83b7\u53d6\u64cd\u4f5c\u7ed3\u679c\u7684\u5bf9\u8c61\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n     */\n    @Override\n    public void onGetValues(GetValueResults responses) throws RemoteException {\n        // \u8c03\u7528\u5916\u90e8\u7c7b AidlVehicleStub \u7684 onGetValues \u65b9\u6cd5\uff0c\u5c06\u83b7\u53d6\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5b83\u8fdb\u884c\u5904\u7406\u3002\n        AidlVehicleStub.this.onGetValues(responses);\n    }\n\n    /**\n     * \u5f53\u8f66\u8f86\u5c5e\u6027\u503c\u8bbe\u7f6e\u64cd\u4f5c\u5b8c\u6210\u65f6\u8c03\u7528\u3002\n     *\n     * @param responses \u5305\u542b\u8bbe\u7f6e\u64cd\u4f5c\u7ed3\u679c\u7684\u5bf9\u8c61\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n     */\n    @Override\n    public void onSetValues(SetValueResults responses) throws RemoteException {\n        // \u8c03\u7528\u5916\u90e8\u7c7b AidlVehicleStub \u7684 onSetValues \u65b9\u6cd5\uff0c\u5c06\u8bbe\u7f6e\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5b83\u8fdb\u884c\u5904\u7406\u3002\n        AidlVehicleStub.this.onSetValues(responses);\n    }\n\n    /**\n     * \u5f53\u8ba2\u9605\u7684\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     * \n     * @param propValues \u5305\u542b\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7684\u5bf9\u8c61\u3002\n     * @param sharedMemoryFileCount \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u6570\u91cf\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n     */\n    @Override\n    public void onPropertyEvent(VehiclePropValues propValues, int sharedMemoryFileCount)\n            throws RemoteException {\n        // \u8be5\u65b9\u6cd5\u5728 GetSetValuesCallback \u4e2d\u4e0d\u652f\u6301\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n        throw new UnsupportedOperationException(\n                \"GetSetValuesCallback only support onGetValues or onSetValues\");\n    }\n\n    /**\n     * \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\u65f6\u8c03\u7528\u3002\n     *\n     * @param errors \u5305\u542b\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u7684\u5bf9\u8c61\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n     */\n    @Override\n    public void onPropertySetError(VehiclePropErrors errors) throws RemoteException {\n        // \u8be5\u65b9\u6cd5\u5728 GetSetValuesCallback \u4e2d\u4e0d\u652f\u6301\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n        throw new UnsupportedOperationException(\n                \"GetSetValuesCallback only support onGetValues or onSetValues\");\n    }\n}\n</code></pre> <p>GetSetValuesCallback \u7ee7\u627f\u81ea IVehicleCallback.Stub\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u901a\u4fe1\u3002</p> <p><code>VehicleStub.newVehicleStub()</code> \u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u8f66\u8f86\u63a5\u53e3\u5bf9\u8c61 <code>mVehicle</code>\uff0c\u6211\u4eec\u5230\u6b64\u4e3a\u6b62\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u4e86\u8be6\u7ec6\u5206\u6790\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f1a\u6709\u4e13\u95e8\u7684\u6587\u7ae0\u6df1\u5165\u63a2\u8ba8 <code>AidlVehicleStub</code> \u7c7b\u4e2d\u8bbe\u7f6e\u5c5e\u6027\u548c\u76d1\u542c\u5c5e\u6027\u7684\u5177\u4f53\u8fc7\u7a0b\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4ec5\u5bf9\u5176\u521d\u59cb\u5316\u8fc7\u7a0b\u8fdb\u884c\u4e86\u7b80\u5355\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimpl","title":"ICarImpl\u521b\u5efa","text":"<p>\u56de\u5230 CarServiceImpl.onCreate() \u4e2d\uff0c\u521b\u5efa\u5b8c VehicleStub \u4e4b\u540e\u5c31\u5f00\u59cb ICarImpl \u5bf9\u8c61\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\n@Override\npublic void onCreate() {\n    // \u6784\u5efa\u4e00\u4e2aICarImpl\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u670d\u52a1\u4e0a\u4e0b\u6587\u3001\u5185\u7f6e\u5305\u4e0a\u4e0b\u6587\u3001\u8f66\u8f86\u5bf9\u8c61\u3001\u7cfb\u7edf\u63a5\u53e3\u548c\u8f66\u8f86\u63a5\u53e3\u540d\u79f0\u3002\n    mICarImpl = new ICarImpl.Builder()\n            .setServiceContext(this)\n            .setBuiltInContext(getBuiltinPackageContext())\n            .setVehicle(mVehicle)\n            .setSystemInterface(\n                    SystemInterface.Builder.defaultSystemInterface(this).build())\n            .setVehicleInterfaceName(mVehicleInterfaceName)\n            .build();\n    // \u521d\u59cb\u5316ICarImpl\u5bf9\u8c61\u3002\n    mICarImpl.init();\n\n}\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimplbuilder","title":"ICarImpl.Builder()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/ICarImpl.java\n\n\n// ICarImpl \u7c7b\u7ee7\u627f\u81ea ICar.Stub\uff0c\u7528\u4e8e\u5b9e\u73b0\u6c7d\u8f66\u670d\u52a1\u7684\u5177\u4f53\u529f\u80fd\u3002\npublic class ICarImpl extends ICar.Stub {\n\n    // Builder \u662f ICarImpl \u7684\u9759\u6001\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u6784\u5efa ICarImpl \u5bf9\u8c61\u3002\n    public static final class Builder {\n        // \u670d\u52a1\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u7684\u5168\u5c40\u4fe1\u606f\u3002\n        Context mContext;\n        // \u6c7d\u8f66\u670d\u52a1\u5185\u7f6e\u5305\u7684\u4e0a\u4e0b\u6587\u3002\n        Context mCarServiceBuiltinPackageContext;\n        // VehicleStub \u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fdb\u884c\u901a\u4fe1\u3002\n        VehicleStub mVehicle;\n        // \u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e\u7cfb\u7edf\u670d\u52a1\u4ea4\u4e92\u3002\n        SystemInterface mSystemInterface;\n        // \u8f66\u8f86\u63a5\u53e3\u540d\u79f0\uff0c\u7528\u4e8e\u6807\u8bc6\u8f66\u8f86\u63a5\u53e3\u3002\n        String mVehicleInterfaceName;\n\n        /**\n         * \u6784\u5efa\u7531\u6b64\u6784\u5efa\u5668\u5bf9\u8c61\u8868\u793a\u7684 ICarImpl \u5bf9\u8c61\u3002\n         *\n         * @return ICarImpl \u5bf9\u8c61\n         */\n        public ICarImpl build() {\n            return new ICarImpl(this);\n        }\n\n        /**\n         * \u8bbe\u7f6e ICarImpl \u6784\u5efa\u5668\u7684\u670d\u52a1\u4e0a\u4e0b\u6587\u3002\n         *\n         * @param serviceContext \u670d\u52a1\u4e0a\u4e0b\u6587\n         * @return \u5f53\u524d\u6784\u5efa\u5668\u5bf9\u8c61\n         */\n        public Builder setServiceContext(Context serviceContext) {\n            mContext = serviceContext;\n            return this;\n        }\n\n        /**\n         * \u8bbe\u7f6e ICarImpl \u6784\u5efa\u5668\u7684\u5185\u7f6e\u4e0a\u4e0b\u6587\u3002\n         *\n         * @param builtInContext \u6c7d\u8f66\u670d\u52a1\u5185\u7f6e\u5305\u7684\u4e0a\u4e0b\u6587\n         * @return \u5f53\u524d\u6784\u5efa\u5668\u5bf9\u8c61\n         */\n        public Builder setBuiltInContext(Context builtInContext) {\n            mCarServiceBuiltinPackageContext = builtInContext;\n            return this;\n        }\n\n        /**\n         * \u8bbe\u7f6e ICarImpl \u6784\u5efa\u5668\u7684\u8f66\u8f86\u5bf9\u8c61\u3002\n         *\n         * @param vehicle \u8981\u4f7f\u7528\u7684 VehicleStub \u5bf9\u8c61\n         * @return \u5f53\u524d\u6784\u5efa\u5668\u5bf9\u8c61\n         */\n        public Builder setVehicle(VehicleStub vehicle) {\n            mVehicle = vehicle;\n            return this;\n        }\n\n        /**\n         * \u8bbe\u7f6e ICarImpl \u6784\u5efa\u5668\u7684\u7cfb\u7edf\u63a5\u53e3\u3002\n         *\n         * @param systemInterface \u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61\n         * @return \u5f53\u524d\u6784\u5efa\u5668\u5bf9\u8c61\n         */\n        public Builder setSystemInterface(SystemInterface systemInterface) {\n            mSystemInterface = systemInterface;\n            return this;\n        }\n\n        /**\n         * \u8bbe\u7f6e ICarImpl \u6784\u5efa\u5668\u7684\u8f66\u8f86\u63a5\u53e3\u540d\u79f0\u3002\n         *\n         * @param vehicleInterfaceName \u8f66\u8f86\u63a5\u53e3\u540d\u79f0\n         * @return \u5f53\u524d\u6784\u5efa\u5668\u5bf9\u8c61\n         */\n        public Builder setVehicleInterfaceName(String vehicleInterfaceName) {\n            mVehicleInterfaceName = vehicleInterfaceName;\n            return this;\n        }\n    }\n}\n</code></pre> <p>\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0 Android 15 CarService\u6e90\u780101-\u670d\u52a1\u542f\u52a8 \u4e2d\uff0c\u6709\u4e00\u4e2a\u7ec6\u8282\u6211\u4eec\u5f53\u65f6\u6ca1\u6709\u6df1\u5165\u63a2\u8ba8\u3002\u5728 <code>ServiceProxy.init()</code> \u65b9\u6cd5\u4e2d\u8c03\u7528 <code>mRealService.setBuiltinPackageContext(this)</code>\uff0c\u5b9e\u9645\u4e0a\u662f\u5c06 builtin app \u7684\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u4e86\u53ef\u66f4\u65b0\u5e94\u7528\u4e2d\u7684 <code>CarServiceImpl</code>\u3002\u56e0\u6b64\uff0c<code>setBuiltInContext</code> \u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e <code>builtin app</code> \u7684\u4e0a\u4e0b\u6587\uff0c\u800c <code>setServiceContext</code> \u65b9\u6cd5\u5219\u7528\u4e8e\u8bbe\u7f6e <code>updatable app</code> \u81ea\u8eab\u7684\u4e0a\u4e0b\u6587\u3002</p> <p>\u4e2a\u4eba\u611f\u89c9 SystemInterface \u6682\u65f6\u4e0d\u91cd\u8981\uff0c\u5148\u4e0d\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimpl_1","title":"ICarImpl\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service/src/com/android/car/ICarImpl.java\n\n// ICarImpl \u7c7b\u7ee7\u627f\u81ea ICar.Stub\uff0c\u7528\u4e8e\u5b9e\u73b0\u6c7d\u8f66\u670d\u52a1\u7684\u5177\u4f53\u529f\u80fd\u3002\npublic class ICarImpl extends ICar.Stub {\n    // ICarImpl \u7684\u79c1\u6709\u6784\u9020\u51fd\u6570\uff0c\u901a\u8fc7 Builder \u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u3002\n    private ICarImpl(Builder builder) {\n        // \u5f53\u524d\u5927\u7ea6\u6709 36 \u4e2a\u670d\u52a1\uff0c\u56e0\u6b64\u4f7f\u7528 40 \u4f5c\u4e3a\u521d\u59cb\u5bb9\u91cf\u6765\u521b\u5efa\u670d\u52a1\u5217\u8868\u3002\n        List&lt;CarSystemService&gt; allServices = new ArrayList&lt;&gt;(40);\n        // \u6784\u5efa VehicleHal \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        mHal = constructWithTrace(t, VehicleHal.class,\n                () -&gt; new VehicleHal(mContext, builder.mVehicle), allServices);\n        // \u6784\u5efa CarPropertyService \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        mCarPropertyService = constructWithTrace(\n                t, CarPropertyService.class,\n                () -&gt; new CarPropertyService.Builder()\n                        .setContext(mContext)\n                        .setPropertyHalService(mHal.getPropertyHal())\n                        .build(), allServices);\n\n        // \u4ece\u6784\u5efa\u5668\u83b7\u53d6\u6216\u6784\u5efa CarUserService \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        mCarUserService = getFromBuilderOrConstruct(t, CarUserService.class,\n                builder.mCarUserService,\n                () -&gt; {\n                    int maxRunningUsers = UserManagerHelper.getMaxRunningUsers(mContext);\n                    return new CarUserService(mContext, mHal.getUserHal(), userManager,\n                        maxRunningUsers, mCarUXRestrictionsService, mCarPackageManagerService,\n                        mCarOccupantZoneService);\n                },\n                allServices);\n\n        // \u5982\u679c\u5728\u6784\u9020\u65f6\u542f\u7528\u4e86\u4f18\u5148\u521d\u59cb\u5316\uff0c\u5219\u8fdb\u884c\u4f18\u5148\u521d\u59cb\u5316\u3002\n        if (mDoPriorityInitInConstruction) {\n            Slogf.i(TAG, \"VHAL Priority Init Enabled\");\n            Slogf.i(TAG, \"Car User Service Priority Init Enabled\");\n            priorityInit();\n        }\n\n        // \u6784\u5efa CarInputService \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        mCarInputService = constructWithTrace(t, CarInputService.class,\n                () -&gt; new CarInputService(mContext, mHal.getInputHal(), mCarUserService,\n                        mCarOccupantZoneService, mCarBluetoothService, mCarPowerManagementService,\n                        mSystemInterface), allServices);\n\n        // \u5c06\u6240\u6709\u670d\u52a1\u6309\u521d\u59cb\u5316\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u3002\n        mAllServicesInInitOrder = allServices.toArray(new CarSystemService[allServices.size()]);\n    }\n\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u5bb9\u91cf\u4e3a 40 \u7684\u670d\u52a1\u5217\u8868 <code>allServices</code>\uff0c\u7136\u540e\u901a\u8fc7 <code>constructWithTrace</code> \u65b9\u6cd5\u6784\u5efa\u5404\u79cd\u670d\u52a1\u5b9e\u4f8b\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5b9e\u4f8b\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\u6700\u540e\uff0c\u5c06\u6240\u6709\u670d\u52a1\u6309\u521d\u59cb\u5316\u987a\u5e8f\u5b58\u50a8\u5728 <code>mAllServicesInInitOrder</code> \u6570\u7ec4\u4e2d\u3002</p> <p>\u5728\u8c03\u7528 ICarImpl.Builder() \u6ca1\u6709\u8bbe\u7f6e setDoPriorityInitInConstruction\uff0c\u6240\u4ee5\u5728 ICarImpl\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u521d\u59cb\u5316 priority</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimplconstructwithtrace","title":"ICarImpl.constructWithTrace()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/ICarImpl.java\n\n// ICarImpl \u7c7b\u7ee7\u627f\u81ea ICar.Stub\uff0c\u7528\u4e8e\u5b9e\u73b0\u6c7d\u8f66\u670d\u52a1\u7684\u5177\u4f53\u529f\u80fd\u3002\npublic class ICarImpl extends ICar.Stub {\n\n    // ICarImpl \u7684\u79c1\u6709\u6784\u9020\u51fd\u6570\uff0c\u901a\u8fc7 Builder \u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u3002\n    private ICarImpl(Builder builder) {\n\n        // \u6784\u5efa VehicleHal \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        // \u4f7f\u7528 constructWithTrace \u65b9\u6cd5\u6765\u521b\u5efa VehicleHal \u5b9e\u4f8b\u3002\n        mHal = constructWithTrace(t, VehicleHal.class,\n                () -&gt; new VehicleHal(mContext, builder.mVehicle), allServices);\n    }\n\n    /**\n     * \u4f7f\u7528\u6784\u5efa\u8ddf\u8e2a\u6765\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b\u3002\n     *\n     * @param t \u7528\u4e8e\u8ddf\u8e2a\u6784\u5efa\u8fc7\u7a0b\u7684 TimingsTraceLog \u5bf9\u8c61\u3002\n     * @param cls \u8981\u6784\u5efa\u7684\u670d\u52a1\u7c7b\u7684 Class \u5bf9\u8c61\u3002\n     * @param callable \u4e00\u4e2a Callable \u5bf9\u8c61\uff0c\u7528\u4e8e\u5b9e\u9645\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b\u3002\n     * @param allServices \u670d\u52a1\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u6784\u5efa\u7684\u670d\u52a1\u5b9e\u4f8b\u3002\n     * @param &lt;T&gt; CarSystemService \u7684\u5b50\u7c7b\u3002\n     * @return \u6784\u5efa\u7684\u670d\u52a1\u5b9e\u4f8b\u3002\n     */\n    private static &lt;T extends CarSystemService&gt; T constructWithTrace(TimingsTraceLog t,\n            Class&lt;T&gt; cls, Callable&lt;T&gt; callable, List&lt;CarSystemService&gt; allServices) {\n        // \u5f00\u59cb\u8ddf\u8e2a\u670d\u52a1\u6784\u5efa\u8fc7\u7a0b\u3002\n        t.traceBegin(cls.getSimpleName());\n        T constructed;\n        try {\n            // \u4f7f\u7528 callable.call() \u65b9\u6cd5\u5b9e\u9645\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b\u3002\n            constructed = callable.call();\n            // \u5c06\u6784\u5efa\u7684\u670d\u52a1\u5b9e\u4f8b\u6dfb\u52a0\u5230 CarLocalServices \u4e2d\uff0c\u4ee5\u4fbf\u5176\u4ed6\u7ec4\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u3002\n            CarLocalServices.addService(cls, constructed);\n        } catch (Exception e) {\n            // \u5982\u679c\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u5e76\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\u3002\n            throw new RuntimeException(\"Crash while constructing:\" + cls.getSimpleName(), e);\n        } finally {\n            // \u7ed3\u675f\u8ddf\u8e2a\u670d\u52a1\u6784\u5efa\u8fc7\u7a0b\u3002\n            t.traceEnd();\n        }\n        // \u5c06\u6784\u5efa\u7684\u670d\u52a1\u5b9e\u4f8b\u6dfb\u52a0\u5230\u670d\u52a1\u5217\u8868\u4e2d\u3002\n        allServices.add(constructed);\n        return constructed;\n    }\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4ee5 <code>VehicleHal</code> \u4e3a\u4f8b\u3002<code>constructWithTrace()</code> \u662f\u4e00\u4e2a\u6cdb\u578b\u65b9\u6cd5\uff0c\u7528\u4e8e\u6784\u5efa <code>CarSystemService</code> \u7684\u5b9e\u4f8b\u3002<code>Callable</code> \u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u4e0e <code>Runnable</code> \u7c7b\u4f3c\uff0c\u4f46\u5b83\u80fd\u591f\u8fd4\u56de\u7ed3\u679c\u6216\u629b\u51fa\u5f02\u5e38\u3002<code>callable.call()</code> \u65b9\u6cd5\u6267\u884c <code>Callable</code> \u7684\u903b\u8f91\u5e76\u8fd4\u56de\u7ed3\u679c\uff0c\u5728\u8fd9\u91cc\u7528\u4e8e\u5b9e\u9645\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b\u3002\u901a\u8fc7\u4f7f\u7528 <code>Callable</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u670d\u52a1\u5b9e\u4f8b\u7684\u521b\u5efa\u903b\u8f91\u5c01\u88c5\u5728\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u4e2d\uff0c\u5e76\u5728\u9700\u8981\u65f6\u6267\u884c\u3002\u8fd9\u79cd\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u7075\u6d3b\u6027\uff0c\u5141\u8bb8\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u590d\u7528\u76f8\u540c\u7684\u521b\u5efa\u903b\u8f91\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#vehiclehal","title":"VehicleHal","text":"<p>\u6211\u4eec\u6765\u770b\u4e0b VehicleHal \u7684\u521b\u5efa\u8fc7\u7a0b\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n\n// VehicleHal \u7c7b\u5b9e\u73b0\u4e86 VehicleHalCallback \u548c CarSystemService \u63a5\u53e3\uff0c\u8d1f\u8d23\u7ba1\u7406\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u7684\u670d\u52a1\u3002\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    // \u5b58\u50a8\u6240\u6709 HAL \u670d\u52a1\u7684\u5217\u8868\u3002\n    private final List&lt;CarSystemService&gt; mAllServices;\n    // \u8f66\u8f86\u5b58\u6839\u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e VHAL \u8fdb\u884c\u901a\u4fe1\u3002\n    private final VehicleStub mVehicleStub;\n    // \u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u5904\u7406\u5c5e\u6027\u4e8b\u4ef6\u7684\u8ba2\u9605\u3002\n    private final SubscriptionClient mSubscriptionClient;\n\n    /**\n     * \u6784\u9020\u4e00\u4e2a\u65b0\u7684 VehicleHal \u5bf9\u8c61\uff0c\u4f7f\u7528\u4f20\u5165\u7684 Context \u548c VehicleStub\u3002\n     *\n     * @param context \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u3002\n     * @param vehicle \u8f66\u8f86\u5b58\u6839\u5bf9\u8c61\u3002\n     */\n    public VehicleHal(Context context, VehicleStub vehicle) {\n        // \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165\u9ed8\u8ba4\u7684 HAL \u670d\u52a1\u548c\u5904\u7406\u7ebf\u7a0b\u3002\n        this(context, /* powerHal= */ null, /* propertyHal= */ null,\n                /* inputHal= */ null, /* vmsHal= */ null, /* userHal= */ null,\n                /* diagnosticHal= */ null, /* clusterHalService= */ null,\n                /* timeHalService= */ null,\n                CarServiceUtils.getHandlerThread(VehicleHal.class.getSimpleName()), vehicle);\n    }\n\n    /**\n     * \u6784\u9020\u4e00\u4e2a\u65b0\u7684 VehicleHal \u5bf9\u8c61\uff0c\u4f7f\u7528\u4f20\u5165\u7684\u670d\u52a1\u548c\u5904\u7406\u7ebf\u7a0b\u3002\n     * \u8be5\u65b9\u6cd5\u4ec5\u4f9b\u6d4b\u8bd5\u4f7f\u7528\u3002\n     *\n     * @param context \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u3002\n     * @param powerHal \u7535\u6e90 HAL \u670d\u52a1\u3002\n     * @param propertyHal \u5c5e\u6027 HAL \u670d\u52a1\u3002\n     * @param inputHal \u8f93\u5165 HAL \u670d\u52a1\u3002\n     * @param vmsHal VMS HAL \u670d\u52a1\u3002\n     * @param userHal \u7528\u6237 HAL \u670d\u52a1\u3002\n     * @param diagnosticHal \u8bca\u65ad HAL \u670d\u52a1\u3002\n     * @param clusterHalService \u96c6\u7fa4 HAL \u670d\u52a1\u3002\n     * @param timeHalService \u65f6\u95f4 HAL \u670d\u52a1\u3002\n     * @param handlerThread \u5904\u7406\u7ebf\u7a0b\u3002\n     * @param vehicle \u8f66\u8f86\u5b58\u6839\u5bf9\u8c61\u3002\n     */\n    @VisibleForTesting\n    VehicleHal(Context context,\n            PowerHalService powerHal,\n            PropertyHalService propertyHal,\n            InputHalService inputHal,\n            VmsHalService vmsHal,\n            UserHalService userHal,\n            DiagnosticHalService diagnosticHal,\n            ClusterHalService clusterHalService,\n            TimeHalService timeHalService,\n            HandlerThread handlerThread,\n            VehicleStub vehicle) {\n        // \u5fc5\u987b\u5728 HalService \u4e4b\u524d\u521d\u59cb\u5316\uff0c\u4ee5\u4fbf HalService \u53ef\u4ee5\u4f7f\u7528\u5b83\u3002\n        mPropValueBuilder = vehicle.getHalPropValueBuilder();\n        mHandlerThread = handlerThread;\n        mHandler = new Handler(mHandlerThread.getLooper());\n\n        // \u521d\u59cb\u5316\u5404\u4e2a HAL \u670d\u52a1\uff0c\u5982\u679c\u4f20\u5165\u7684\u670d\u52a1\u4e3a null\uff0c\u5219\u521b\u5efa\u9ed8\u8ba4\u5b9e\u4f8b\u3002\n        mPowerHal = powerHal != null ? powerHal : new PowerHalService(context, mFeatureFlags, this);\n        mPropertyHal = propertyHal != null ? propertyHal : new PropertyHalService(this);\n        mInputHal = inputHal != null ? inputHal : new InputHalService(this);\n        mVmsHal = vmsHal != null ? vmsHal : new VmsHalService(context, this);\n        mUserHal = userHal != null ? userHal : new UserHalService(this);\n        mDiagnosticHal = diagnosticHal != null ? diagnosticHal : new DiagnosticHalService(this);\n        mClusterHalService = clusterHalService != null\n                ? clusterHalService : new ClusterHalService(context, this);\n        mEvsHal = new EvsHalService(this);\n        mTimeHalService = timeHalService != null\n                ? timeHalService : new TimeHalService(context, this);\n\n        // \u5c06\u6240\u6709 HAL \u670d\u52a1\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u3002\n        mAllServices = List.of(\n                mPowerHal,\n                mInputHal,\n                mDiagnosticHal,\n                mVmsHal,\n                mUserHal,\n                mClusterHalService,\n                mEvsHal,\n                mTimeHalService,\n                // mPropertyHal \u5fc5\u987b\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u4ee5\u4fbf\u5728\u521d\u59cb\u5316/\u91ca\u653e\u65f6\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u5176\u4ed6 HAL \u670d\u52a1\u5c5e\u6027\u3002\n                mPropertyHal);\n\n        // \u521d\u59cb\u5316\u8f66\u8f86\u5b58\u6839\u548c\u8ba2\u9605\u5ba2\u6237\u7aef\u3002\n        mVehicleStub = vehicle;\n        mSubscriptionClient = vehicle.newSubscriptionClient(this);\n    }\n}\n</code></pre> <p>\u5b9e\u73b0\u4e86 <code>VehicleHalCallback</code> \u548c <code>CarSystemService</code> \u63a5\u53e3\uff0c\u8d1f\u8d23\u7ba1\u7406\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u7684\u4ea4\u4e92\u3002 \u521d\u59cb\u5316\u5404\u79cd HAL \u670d\u52a1\uff0c\u5e76\u5b58\u50a8\u6240\u6709 HAL \u670d\u52a1\u5230 mAllServices \u4e2d\u3002 \u6700\u540e\u8c03\u7528vehicle.newSubscriptionClient(this)\u8ba2\u9605\u4e8b\u4ef6\u56de\u8c03\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#aidlvehiclestubaidlsubscriptionclient","title":"AidlVehicleStub.AidlSubscriptionClient","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {  \n\n    // AidlSubscriptionClient \u662f\u4e00\u4e2a\u79c1\u6709\u5185\u90e8\u7c7b\uff0c\u7ee7\u627f\u81ea IVehicleCallback.Stub\uff0c\u5e76\u5b9e\u73b0\u4e86 SubscriptionClient \u63a5\u53e3\u3002  \n    // \u5b83\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u8ba2\u9605\u548c\u4e8b\u4ef6\u56de\u8c03\u3002  \n    private class AidlSubscriptionClient extends IVehicleCallback.Stub  \n            implements SubscriptionClient {  \n\n        // \u7528\u4e8e\u5904\u7406\u8f66\u8f86 HAL \u56de\u8c03\u7684\u63a5\u53e3\u3002  \n        private final VehicleHalCallback mCallback;  \n        // \u7528\u4e8e\u6784\u5efa HAL \u5c5e\u6027\u503c\u7684\u6784\u5efa\u5668\u3002  \n        private final HalPropValueBuilder mBuilder;  \n\n        // \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u56de\u8c03\u548c\u6784\u5efa\u5668\u3002  \n        AidlSubscriptionClient(VehicleHalCallback callback, HalPropValueBuilder builder) {  \n            mCallback = callback;  \n            mBuilder = builder;  \n        }  \n\n        /**  \n         * \u5f53\u83b7\u53d6\u5c5e\u6027\u503c\u7684\u64cd\u4f5c\u5b8c\u6210\u65f6\u8c03\u7528\u3002  \n         * \u7531\u4e8e AidlSubscriptionClient \u4e0d\u5904\u7406 getValues \u64cd\u4f5c\uff0c\u56e0\u6b64\u629b\u51fa\u5f02\u5e38\u3002  \n         *  \n         * @param responses \u5305\u542b\u83b7\u53d6\u64cd\u4f5c\u7ed3\u679c\u7684\u5bf9\u8c61\u3002  \n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         */  \n        @Override  \n        public void onGetValues(GetValueResults responses) throws RemoteException {  \n            // AidlSubscriptionClient \u4e0d\u652f\u6301 getValues \u64cd\u4f5c\u3002  \n            throw new UnsupportedOperationException(  \n                    \"onGetValues should never be called on AidlSubscriptionClient\");  \n        }  \n\n        /**  \n         * \u5f53\u8bbe\u7f6e\u5c5e\u6027\u503c\u7684\u64cd\u4f5c\u5b8c\u6210\u65f6\u8c03\u7528\u3002  \n         * \u7531\u4e8e AidlSubscriptionClient \u4e0d\u5904\u7406 setValues \u64cd\u4f5c\uff0c\u56e0\u6b64\u629b\u51fa\u5f02\u5e38\u3002  \n         *  \n         * @param responses \u5305\u542b\u8bbe\u7f6e\u64cd\u4f5c\u7ed3\u679c\u7684\u5bf9\u8c61\u3002  \n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         */  \n        @Override  \n        public void onSetValues(SetValueResults responses) throws RemoteException {  \n            // AidlSubscriptionClient \u4e0d\u652f\u6301 setValues \u64cd\u4f5c\u3002  \n            throw new UnsupportedOperationException(  \n                    \"onSetValues should never be called on AidlSubscriptionClient\");  \n        }  \n\n        /**  \n         * \u5f53\u8ba2\u9605\u7684\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002  \n         *  \n         * @param propValues            \u5305\u542b\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7684\u5bf9\u8c61\u3002  \n         * @param sharedMemoryFileCount \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u6570\u91cf\u3002  \n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         */  \n        @Override  \n        public void onPropertyEvent(VehiclePropValues propValues, int sharedMemoryFileCount)  \n                throws RemoteException {  \n            // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL \u53ef\u6253\u5305\u5bf9\u8c61\uff0c\u4e0d\u4fdd\u7559\u5171\u4eab\u5185\u5b58\u3002  \n            VehiclePropValues origPropValues = (VehiclePropValues)  \n                    LargeParcelable.reconstructStableAIDLParcelable(propValues,  \n                            /* keepSharedMemory= */ false);  \n            // \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8 HAL \u5c5e\u6027\u503c\u3002  \n            ArrayList&lt;HalPropValue&gt; values = new ArrayList&lt;&gt;(origPropValues.payloads.length);  \n            // \u904d\u5386\u539f\u59cb\u5c5e\u6027\u503c\uff0c\u5e76\u4f7f\u7528\u6784\u5efa\u5668\u6784\u5efa HAL \u5c5e\u6027\u503c\u3002  \n            for (VehiclePropValue value : origPropValues.payloads) {  \n                values.add(mBuilder.build(value));  \n            }  \n            // \u8c03\u7528\u56de\u8c03\u63a5\u53e3\uff0c\u4f20\u9012\u5c5e\u6027\u4e8b\u4ef6\u3002  \n            mCallback.onPropertyEvent(values);  \n        }  \n\n        /**  \n         * \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\u65f6\u8c03\u7528\u3002  \n         *  \n         * @param errors \u5305\u542b\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u7684\u5bf9\u8c61\u3002  \n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         */  \n        @Override  \n        public void onPropertySetError(VehiclePropErrors errors) throws RemoteException {  \n            // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL \u53ef\u6253\u5305\u5bf9\u8c61\uff0c\u4e0d\u4fdd\u7559\u5171\u4eab\u5185\u5b58\u3002  \n            VehiclePropErrors origErrors = (VehiclePropErrors)  \n                    LargeParcelable.reconstructStableAIDLParcelable(errors,  \n                            /* keepSharedMemory= */ false);  \n            // \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u5c5e\u6027\u9519\u8bef\u3002  \n            ArrayList&lt;VehiclePropError&gt; errorList = new ArrayList&lt;&gt;(origErrors.payloads.length);  \n            // \u904d\u5386\u539f\u59cb\u9519\u8bef\uff0c\u5e76\u6dfb\u52a0\u5230\u9519\u8bef\u5217\u8868\u4e2d\u3002  \n            for (VehiclePropError error : origErrors.payloads) {  \n                errorList.add(error);  \n            }  \n            // \u8c03\u7528\u56de\u8c03\u63a5\u53e3\uff0c\u4f20\u9012\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u3002  \n            mCallback.onPropertySetError(errorList);  \n        }  \n\n        /**  \n         * \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n         *  \n         * @param options \u8ba2\u9605\u9009\u9879\u6570\u7ec4\u3002  \n         * @throws RemoteException          \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u53d1\u751f\u3002  \n         */  \n        @Override  \n        public void subscribe(SubscribeOptions[] options)  \n                throws RemoteException, ServiceSpecificException {  \n            // \u8c03\u7528 AIDL \u8f66\u8f86\u63a5\u53e3\u7684 subscribe \u65b9\u6cd5\u8fdb\u884c\u8ba2\u9605\u3002  \n            mAidlVehicle.subscribe(this, options, /* maxSharedMemoryFileCount= */ 2);  \n        }  \n\n        /**  \n         * \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n         *  \n         * @param prop \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027 ID\u3002  \n         * @throws RemoteException          \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002  \n         * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u53d1\u751f\u3002  \n         */  \n        @Override  \n        public void unsubscribe(int prop) throws RemoteException, ServiceSpecificException {  \n            // \u8c03\u7528 AIDL \u8f66\u8f86\u63a5\u53e3\u7684 unsubscribe \u65b9\u6cd5\u8fdb\u884c\u53d6\u6d88\u8ba2\u9605\u3002  \n            mAidlVehicle.unsubscribe(this, new int[]{prop});  \n        }  \n\n        /**  \n         * \u83b7\u53d6\u63a5\u53e3\u7684\u54c8\u5e0c\u503c\u3002  \n         *  \n         * @return \u63a5\u53e3\u7684\u54c8\u5e0c\u503c\u3002  \n         */  \n        @Override  \n        public String getInterfaceHash() {  \n            return IVehicleCallback.HASH;  \n        }  \n\n        /**  \n         * \u83b7\u53d6\u63a5\u53e3\u7684\u7248\u672c\u3002  \n         *  \n         * @return \u63a5\u53e3\u7684\u7248\u672c\u3002  \n         */  \n        @Override  \n        public int getInterfaceVersion() {  \n            return IVehicleCallback.VERSION;  \n        }  \n    }  \n}\n</code></pre> <p>AidlSubscriptionClient \u7ee7\u627f\u81ea <code>IVehicleCallback.Stub</code>\uff0c\u5b9e\u73b0\u4e86 <code>SubscriptionClient</code> \u63a5\u53e3\u3002\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u8ba2\u9605\u548c\u4e8b\u4ef6\u56de\u8c03\u3002</p> <p>\u5728\u6b64\uff0c\u6211\u4eec\u4e0d\u518d\u6df1\u5165\u5206\u6790\u8ba2\u9605\u548c\u4e8b\u4ef6\u56de\u8c03\u7684\u7ec6\u8282\uff0c\u4e5f\u4e0d\u8be6\u7ec6\u63a2\u8ba8 HAL \u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\u5728\u540e\u7eed\u5206\u6790 Java \u670d\u52a1\u65f6\uff0c\u6211\u4eec\u5c06\u987a\u4fbf\u63a2\u8ba8\u4e0e\u5176\u5173\u8054\u7684 HAL \u670d\u52a1\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimplinit","title":"ICarImpl.init()","text":"<p>\u5728 <code>CarServiceImpl.onCreate()</code> \u65b9\u6cd5\u4e2d\uff0c\u6784\u9020 <code>ICarImpl</code> \u5b9e\u4f8b\u540e\uff0c\u63a5\u4e0b\u6765\u8c03\u7528\u5176 <code>init()</code> \u51fd\u6570\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/ICarImpl.java\n\n// ICarImpl \u7c7b\u7ee7\u627f\u81ea ICar.Stub\uff0c\u7528\u4e8e\u5b9e\u73b0\u6c7d\u8f66\u670d\u52a1\u7684\u5177\u4f53\u529f\u80fd\u3002\npublic class ICarImpl extends ICar.Stub {\n\n    /**\n     * \u521d\u59cb\u5316 ICarImpl \u5b9e\u4f8b\u3002\n     * \u8be5\u65b9\u6cd5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u8fd0\u884c\uff0c\u8d1f\u8d23\u521d\u59cb\u5316\u6240\u6709\u6c7d\u8f66\u7cfb\u7edf\u670d\u52a1\u3002\n     */\n    @MainThread\n    void init() {\n        // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u8ddf\u8e2a\u521d\u59cb\u5316\u65f6\u95f4\u7684\u65e5\u5fd7\u5bf9\u8c61\u3002\n        TimingsTraceLog t = new TimingsTraceLog(CAR_SERVICE_INIT_TIMING_TAG,\n                TraceHelper.TRACE_TAG_CAR_SERVICE, CAR_SERVICE_INIT_TIMING_MIN_DURATION_MS);\n\n        // \u5f00\u59cb\u8ddf\u8e2a ICarImpl \u521d\u59cb\u5316\u8fc7\u7a0b\u3002\n        t.traceBegin(\"ICarImpl.init\");\n\n        // \u5982\u679c\u5728\u6784\u9020\u65f6\u6ca1\u6709\u8fdb\u884c\u4f18\u5148\u521d\u59cb\u5316\uff0c\u5219\u5728\u6b64\u8fdb\u884c\u3002\n        if (!mDoPriorityInitInConstruction) {\n            priorityInit();\n        }\n\n        // \u5f00\u59cb\u8ddf\u8e2a\u6240\u6709\u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\n        t.traceBegin(\"CarService.initAllServices\");\n        for (CarSystemService service : mAllServicesInInitOrder) {\n            // \u8ddf\u8e2a\u6bcf\u4e2a\u670d\u52a1\u7684\u521d\u59cb\u5316\u3002\n            t.traceBegin(service.getClass().getSimpleName());\n            service.init(); // \u8c03\u7528\u670d\u52a1\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u3002\n            t.traceEnd();\n        }\n        t.traceEnd(); // \u7ed3\u675f\u8ddf\u8e2a \"CarService.initAllServices\"\n\n        // \u5f00\u59cb\u8ddf\u8e2a\u6240\u6709\u670d\u52a1\u7684\u521d\u59cb\u5316\u5b8c\u6210\u8fc7\u7a0b\u3002\n        t.traceBegin(\"CarService.onInitComplete\");\n        for (CarSystemService service : mAllServicesInInitOrder) {\n            // \u786e\u4fdd mCarPowerManagementService \u7684 onInitComplete \u65b9\u6cd5\u5728\u6700\u540e\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5173\u95ed\u8bbe\u5907\u3002\n            if (service == mCarPowerManagementService) {\n                continue;\n            }\n            // \u8ddf\u8e2a\u6bcf\u4e2a\u670d\u52a1\u7684\u521d\u59cb\u5316\u5b8c\u6210\u3002\n            t.traceBegin(\"onInitComplete:\" + service.getClass().getSimpleName());\n            service.onInitComplete(); // \u8c03\u7528\u670d\u52a1\u7684\u521d\u59cb\u5316\u5b8c\u6210\u65b9\u6cd5\u3002\n            t.traceEnd();\n        }\n        // \u786e\u4fdd\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u7684\u521d\u59cb\u5316\u5b8c\u6210\u5728\u6700\u540e\u6267\u884c\u3002\n        mCarPowerManagementService.onInitComplete();\n        t.traceEnd(); // \u7ed3\u675f\u8ddf\u8e2a \"CarService.onInitComplete\"\n\n        t.traceEnd(); // \u7ed3\u675f\u8ddf\u8e2a \"ICarImpl.init\"\n    }\n}\n</code></pre> <p>\u521d\u59cb\u5316\u7684\u6574\u8fc7\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>\u8c03\u7528 <code>priorityInit()</code> \u8fdb\u884c\u521d\u59cb\u5316\u3002</li> <li>\u904d\u5386 <code>mAllServicesInInitOrder</code> \u6570\u7ec4\uff0c\u4f9d\u6b21\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u7684 <code>init()</code> \u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\u3002</li> <li>\u518d\u6b21\u904d\u5386 <code>mAllServicesInInitOrder</code> \u6570\u7ec4\uff0c\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u7684 <code>onInitComplete()</code> \u65b9\u6cd5\uff0c\u6807\u8bb0\u521d\u59cb\u5316\u5b8c\u6210\u3002</li> <li>\u7279\u522b\u5904\u7406 <code>mCarPowerManagementService</code>\uff0c\u786e\u4fdd\u5176 <code>onInitComplete()</code> \u65b9\u6cd5\u5728\u6700\u540e\u6267\u884c\uff0c\u4ee5\u907f\u514d\u8bbe\u5907\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u88ab\u610f\u5916\u5173\u95ed\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#icarimplpriorityinit","title":"ICarImpl.priorityInit()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/ICarImpl.java\n\n/* package */ void priorityInit() {  \n    mHal.priorityInit();  \n    mCarUserService.priorityInit();  \n}\n</code></pre> <p>\u4ece\u524d\u9762 ICarImpl\u6784\u9020\u51fd\u6570 \u7684\u5206\u6790\u53ef\u77e5\uff0c\u8fd9\u91cc\u7684 mHal \u5c31\u662f VehicleHal\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#vehiclehalpriorityinit","title":"VehicleHal.priorityInit()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n/**\n * VehicleHal \u7c7b\u662f\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u7684\u62bd\u8c61\u3002\u8be5\u7c7b\u5904\u7406\u4e0e\u672c\u5730 HAL \u7684\u63a5\u53e3\uff0c\u5e76\u5bf9\u63a5\u6536\u5230\u7684\u6570\u636e\u8fdb\u884c\u57fa\u672c\u89e3\u6790\uff08\u7c7b\u578b\u68c0\u67e5\uff09\u3002\n * \u7136\u540e\uff0c\u6bcf\u4e2a\u4e8b\u4ef6\u88ab\u53d1\u9001\u5230\u76f8\u5e94\u7684 {@link HalServiceBase} \u5b9e\u73b0\u3002\n * {@link HalServiceBase} \u7684\u8d23\u4efb\u662f\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 Car*Service\uff0c\u4ee5\u4fbf\u901a\u8fc7 Car*Manager API \u4f7f\u7528\u3002\n */\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n\n    /**\n     * \u4e3a VHAL \u914d\u7f6e\u8fdb\u884c\u4f18\u5148\u521d\u59cb\u5316\u3002\n     */\n    public void priorityInit() {\n        // \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n        fetchAllPropConfigs();\n\n        // PropertyHalService \u5c06\u5904\u7406\u5927\u591a\u6570\u5c5e\u6027\uff0c\u56e0\u6b64\u9700\u8981\u8db3\u591f\u5927\u3002\n        ArrayMap&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; configsForAllServices;\n        synchronized (mLock) {\n            // \u521d\u59cb\u5316\u5b58\u50a8\u6bcf\u4e2a\u670d\u52a1\u7684\u5c5e\u6027\u914d\u7f6e\u7684\u6620\u5c04\u3002\n            configsForAllServices = new ArrayMap&lt;&gt;(mAllServices.size());\n            for (int i = 0; i &lt; mAllServices.size(); i++) {\n                // \u4e3a\u6bcf\u4e2a\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002\n                ArrayList&lt;HalPropConfig&gt; configsForService = new ArrayList&lt;&gt;();\n                HalServiceBase service = mAllServices.get(i);\n                // \u5c06\u670d\u52a1\u548c\u5176\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u6dfb\u52a0\u5230\u6620\u5c04\u4e2d\u3002\n                configsForAllServices.put(service, configsForService);\n\n                // \u83b7\u53d6\u670d\u52a1\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u3002\n                int[] supportedProps = service.getAllSupportedProperties();\n                if (supportedProps.length == 0) {\n                    // \u5982\u679c\u670d\u52a1\u6ca1\u6709\u660e\u786e\u652f\u6301\u7684\u5c5e\u6027\uff0c\u68c0\u67e5\u6240\u6709\u5c5e\u6027\u3002\n                    for (int j = 0; j &lt; mAllProperties.size(); j++) {\n                        Integer propId = mAllProperties.keyAt(j);\n                        if (service.isSupportedProperty(propId)) {\n                            HalPropConfig config = mAllProperties.get(propId);\n                            // \u5c06\u5c5e\u6027\u5904\u7406\u7a0b\u5e8f\u4e0e\u670d\u52a1\u5173\u8054\u3002\n                            mPropertyHandlers.append(propId, service);\n                            // \u5c06\u5c5e\u6027\u914d\u7f6e\u6dfb\u52a0\u5230\u670d\u52a1\u7684\u914d\u7f6e\u5217\u8868\u4e2d\u3002\n                            configsForService.add(config);\n                        }\n                    }\n                } else {\n                    // \u5982\u679c\u670d\u52a1\u6709\u660e\u786e\u652f\u6301\u7684\u5c5e\u6027\uff0c\u53ea\u5904\u7406\u8fd9\u4e9b\u5c5e\u6027\u3002\n                    for (int prop : supportedProps) {\n                        HalPropConfig config = mAllProperties.get(prop);\n                        if (config == null) {\n                            continue;\n                        }\n                        // \u5c06\u5c5e\u6027\u5904\u7406\u7a0b\u5e8f\u4e0e\u670d\u52a1\u5173\u8054\u3002\n                        mPropertyHandlers.append(prop, service);\n                        // \u5c06\u5c5e\u6027\u914d\u7f6e\u6dfb\u52a0\u5230\u670d\u52a1\u7684\u914d\u7f6e\u5217\u8868\u4e2d\u3002\n                        configsForService.add(config);\n                    }\n                }\n            }\n        }\n\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u670d\u52a1\u5e76\u4f20\u9012\u5176\u5c5e\u6027\u914d\u7f6e\u3002\n        for (Map.Entry&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; entry\n                : configsForAllServices.entrySet()) {\n            HalServiceBase service = entry.getKey();\n            ArrayList&lt;HalPropConfig&gt; configsForService = entry.getValue();\n            // \u8ba9\u670d\u52a1\u63a5\u7ba1\u5176\u5c5e\u6027\u914d\u7f6e\u3002\n            service.takeProperties(configsForService);\n            // \u521d\u59cb\u5316\u670d\u52a1\u3002\n            service.init();\n        }\n    }\n\n}\n</code></pre> <p>\u4e3b\u8981\u5b9e\u73b0\u4e86\uff1a</p> <ul> <li>\u8c03\u7528 <code>fetchAllPropConfigs()</code> \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002</li> <li>\u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u6620\u5c04\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u670d\u52a1\u7684\u5c5e\u6027\u914d\u7f6e\u3002</li> <li>\u904d\u5386\u6240\u6709 HAL \u670d\u52a1\uff0c\u68c0\u67e5\u6bcf\u4e2a\u670d\u52a1\u652f\u6301\u7684\u5c5e\u6027\uff0c\u5e76\u5c06\u5c5e\u6027\u914d\u7f6e\u4e0e\u670d\u52a1\u5173\u8054\u3002</li> <li>\u6700\u540e\uff0c\u904d\u5386\u6620\u5c04\uff0c\u521d\u59cb\u5316\u6bcf\u4e2a\u670d\u52a1\u5e76\u4f20\u9012\u5176\u5c5e\u6027\u914d\u7f6e\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#vehiclehalfetchallpropconfigs","title":"VehicleHal.fetchAllPropConfigs()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n     * \u8be5\u65b9\u6cd5\u7528\u4e8e\u4ece VHAL \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728 mAllProperties \u4e2d\u3002\n     * \u5982\u679c\u5c5e\u6027\u914d\u7f6e\u5df2\u7ecf\u83b7\u53d6\uff0c\u5219\u4e0d\u518d\u91cd\u590d\u83b7\u53d6\u3002\n     */\n    @VisibleForTesting\n    void fetchAllPropConfigs() {\n        synchronized (mLock) {\n            // \u5982\u679c\u5c5e\u6027\u914d\u7f6e\u5df2\u7ecf\u5b58\u5728\uff0c\u8bb0\u5f55\u65e5\u5fd7\u5e76\u8fd4\u56de\u3002\n            if (mAllProperties.size() != 0) { // \u5df2\u7ecf\u8bbe\u7f6e\n                Slogf.i(CarLog.TAG_HAL, \"fetchAllPropConfigs already fetched\");\n                return;\n            }\n        }\n\n        HalPropConfig[] configs;\n        try {\n            // \u4ece VHAL \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n            configs = getAllPropConfigs();\n            // \u5982\u679c\u83b7\u53d6\u7684\u914d\u7f6e\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\u3002\n            if (configs == null || configs.length == 0) {\n                Slogf.e(CarLog.TAG_HAL, \"getAllPropConfigs returned empty configs\");\n                return;\n            }\n        } catch (RemoteException | ServiceSpecificException e) {\n            // \u5982\u679c\u83b7\u53d6\u914d\u7f6e\u65f6\u53d1\u751f\u5f02\u5e38\uff0c\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\n            throw new RuntimeException(\"Unable to retrieve vehicle property configuration\", e);\n        }\n\n        synchronized (mLock) {\n            // \u521b\u5efa\u6240\u6709\u5c5e\u6027\u7684\u6620\u5c04\u3002\n            for (HalPropConfig p : configs) {\n                if (DBG) {\n                    // \u5982\u679c\u542f\u7528\u8c03\u8bd5\uff0c\u8bb0\u5f55\u5c5e\u6027\u914d\u7f6e\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n                    Slogf.d(CarLog.TAG_HAL, \"Add config for prop: 0x%x config: %s\", p.getPropId(),\n                            p.toString());\n                }\n                // \u5c06\u5c5e\u6027\u914d\u7f6e\u6dfb\u52a0\u5230 mAllProperties \u4e2d\u3002\n                mAllProperties.put(p.getPropId(), p);\n                // \u5982\u679c\u5c5e\u6027\u6ca1\u6709\u533a\u57df\u914d\u7f6e\uff0c\u4f7f\u7528\u9ed8\u8ba4\u533a\u57df ID 0\u3002\n                if (p.getAreaConfigs().length == 0) {\n                    mAccessByPropIdAreaId.put(p.getPropId(), /* areaId */ 0, p.getAccess());\n                } else {\n                    // \u5426\u5219\uff0c\u4e3a\u6bcf\u4e2a\u533a\u57df\u914d\u7f6e\u6dfb\u52a0\u8bbf\u95ee\u6743\u9650\u3002\n                    for (HalAreaConfig areaConfig : p.getAreaConfigs()) {\n                        mAccessByPropIdAreaId.put(p.getPropId(), areaConfig.getAreaId(),\n                                areaConfig.getAccess());\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u4ece VHAL \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n     *\n     * @return \u5305\u542b\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u6570\u7ec4\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u53d1\u751f\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n     */\n    public HalPropConfig[] getAllPropConfigs() throws RemoteException, ServiceSpecificException {\n        // \u8c03\u7528 VehicleStub \u7684 getAllPropConfigs \u65b9\u6cd5\u83b7\u53d6\u914d\u7f6e\u3002\n        return mVehicleStub.getAllPropConfigs();\n    }\n}\n</code></pre> <p>\u4ece\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728 <code>mAllProperties</code> \u4e2d\u3002</p> <ul> <li>\u9996\u5148\u68c0\u67e5 <code>mAllProperties</code> \u662f\u5426\u5df2\u7ecf\u5305\u542b\u914d\u7f6e\uff0c\u5982\u679c\u662f\uff0c\u5219\u8bb0\u5f55\u65e5\u5fd7\u5e76\u8fd4\u56de\u3002</li> <li>\u8c03\u7528 <code>getAllPropConfigs()</code> \u65b9\u6cd5\u4ece VHAL \u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\u3002</li> <li>\u904d\u5386\u83b7\u53d6\u7684\u914d\u7f6e\uff0c\u5c06\u6bcf\u4e2a\u5c5e\u6027\u914d\u7f6e\u6dfb\u52a0\u5230 <code>mAllProperties</code> \u4e2d\u3002</li> <li>\u5982\u679c\u5c5e\u6027\u6ca1\u6709\u533a\u57df\u914d\u7f6e\uff0c\u4f7f\u7528\u9ed8\u8ba4\u533a\u57df ID 0\uff0c\u5e76\u5c06\u8bbf\u95ee\u6743\u9650\u5b58\u50a8\u5728 <code>mAccessByPropIdAreaId</code> \u4e2d\u3002</li> <li>\u5426\u5219\uff0c\u4e3a\u6bcf\u4e2a\u533a\u57df\u914d\u7f6e\u6dfb\u52a0\u8bbf\u95ee\u6743\u9650\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#aidlvehiclestubgetallpropconfigs","title":"AidlVehicleStub.getAllPropConfigs()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// AidlVehicleStub \u7c7b\u662f VehicleStub \u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u7528\u4e8e\u901a\u8fc7 AIDL \u63a5\u53e3\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fdb\u884c\u901a\u4fe1\u3002\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n     *\n     * @return \u5305\u542b\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u6570\u7ec4\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n     */\n    @Override\n    public HalPropConfig[] getAllPropConfigs()\n            throws RemoteException, ServiceSpecificException {\n        // \u4ece AIDL \u63a5\u53e3\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\uff0c\u5e76\u91cd\u6784\u4e3a\u7a33\u5b9a\u7684 AIDL \u53ef\u6253\u5305\u5bf9\u8c61\u3002\n        VehiclePropConfigs propConfigs = (VehiclePropConfigs)\n                LargeParcelable.reconstructStableAIDLParcelable(\n                        mAidlVehicle.getAllPropConfigs(), /* keepSharedMemory= */ false);\n\n        // \u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\u7684\u6709\u6548\u8d1f\u8f7d\u3002\n        VehiclePropConfig[] payloads = propConfigs.payloads;\n        int size = payloads.length;\n\n        // \u521b\u5efa\u4e00\u4e2a HalPropConfig \u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u8f6c\u6362\u540e\u7684\u914d\u7f6e\u3002\n        HalPropConfig[] configs = new HalPropConfig[size];\n\n        // \u904d\u5386\u6709\u6548\u8d1f\u8f7d\uff0c\u5c06\u6bcf\u4e2a VehiclePropConfig \u8f6c\u6362\u4e3a AidlHalPropConfig\u3002\n        for (int i = 0; i &lt; size; i++) {\n            configs[i] = new AidlHalPropConfig(payloads[i]);\n        }\n\n        // \u8fd4\u56de\u8f6c\u6362\u540e\u7684\u914d\u7f6e\u6570\u7ec4\u3002\n        return configs;\n    }\n}\n</code></pre> <p>\u8fc7 AIDL \u63a5\u53e3\u8c03\u7528 <code>mAidlVehicle.getAllPropConfigs()</code> \u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\u3002</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a <code>HalPropConfig</code> \u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u8f6c\u6362\u540e\u7684\u914d\u7f6e\u3002</li> <li>\u904d\u5386 <code>payloads</code> \u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a <code>VehiclePropConfig</code> \u8f6c\u6362\u4e3a <code>AidlHalPropConfig</code>\uff0c\u5e76\u5b58\u50a8\u5728 <code>configs</code> \u6570\u7ec4\u4e2d\u3002</li> <li>\u8fd4\u56de <code>configs</code> \u6570\u7ec4\uff0c\u5305\u542b\u6240\u6709\u8f6c\u6362\u540e\u7684\u5c5e\u6027\u914d\u7f6e\u3002</li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u6682\u65f6\u4e0d\u6df1\u5165\u63a2\u8ba8 <code>VehiclePropConfig</code> \u7684\u6570\u636e\u7ed3\u6784\uff0c\u540e\u7eed\u5c06\u5728 Vehicle HAL \u7cfb\u5217\u4e2d\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#inputhalservicetakeproperties","title":"InputHalService.takeProperties()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\n/**\n * \u5c06 HAL (Hardware Abstraction Layer) \u8f93\u5165\u4e8b\u4ef6\u7ffb\u8bd1\u4e3a\u66f4\u9ad8\u7ea7\u522b\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n * \u8be5\u7c7b\u7ee7\u627f\u81ea HalServiceBase\uff0c\u5e76\u8d1f\u8d23\u5904\u7406\u4e0e\u8f93\u5165\u4e8b\u4ef6\u76f8\u5173\u7684\u5c5e\u6027\u3002\n */\npublic class InputHalService extends HalServiceBase {\n\n    // \u652f\u6301\u7684\u8f93\u5165\u5c5e\u6027\u6570\u7ec4\uff0c\u8868\u793a\u8be5\u670d\u52a1\u53ef\u4ee5\u5904\u7406\u7684 HAL \u8f93\u5165\u7c7b\u578b\u3002\n    // \u6bcf\u4e2a\u7c7b\u578b\u90fd\u5bf9\u5e94\u4e00\u4e2a\u786c\u4ef6\u8f93\u5165\u4e8b\u4ef6\u3002\n    private static final int[] SUPPORTED_PROPERTIES = new int[]{\n            HW_KEY_INPUT,        // \u786c\u4ef6\u6309\u952e\u8f93\u5165\n            HW_KEY_INPUT_V2,     // \u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c2\uff09\n            HW_MOTION_INPUT,     // \u786c\u4ef6\u8fd0\u52a8\u8f93\u5165\n            HW_ROTARY_INPUT,     // \u786c\u4ef6\u65cb\u94ae\u8f93\u5165\n            HW_CUSTOM_INPUT      // \u81ea\u5b9a\u4e49\u786c\u4ef6\u8f93\u5165\n    };\n\n    // \u5b9a\u4e49\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7528\u4e8e\u6807\u8bb0\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u5165\u662f\u5426\u53d7\u652f\u6301\u3002\n    private boolean mKeyInputSupported = false;      // \u662f\u5426\u652f\u6301\u6309\u952e\u8f93\u5165\n    private boolean mKeyInputV2Supported = false;    // \u662f\u5426\u652f\u6301\u6309\u952e\u8f93\u5165\uff08\u7248\u672c2\uff09\n    private boolean mMotionInputSupported = false;   // \u662f\u5426\u652f\u6301\u8fd0\u52a8\u8f93\u5165\n    private boolean mRotaryInputSupported = false;   // \u662f\u5426\u652f\u6301\u65cb\u94ae\u8f93\u5165\n    private boolean mCustomInputSupported = false;   // \u662f\u5426\u652f\u6301\u81ea\u5b9a\u4e49\u8f93\u5165\n\n    /**\n     * \u63a5\u6536 HAL \u5c5e\u6027\u914d\u7f6e\u7684\u96c6\u5408\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u542f\u7528\u5bf9\u5e94\u7684\u8f93\u5165\u652f\u6301\u3002\n     * \n     * @param properties HAL \u5c42\u4f20\u5165\u7684\u5c5e\u6027\u96c6\u5408\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5305\u542b\u914d\u7f6e\u4fe1\u606f\u3002\n     */\n    @Override\n    public void takeProperties(Collection&lt;HalPropConfig&gt; properties) {\n        synchronized (mLock) { // \u786e\u4fdd\u591a\u7ebf\u7a0b\u8bbf\u95ee\u65f6\u7684\u540c\u6b65\u6027\u3002\n            for (HalPropConfig property : properties) {\n                // \u6839\u636e\u5c5e\u6027 ID \u5224\u65ad\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\uff0c\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u3002\n                switch (property.getPropId()) {\n                    case HW_KEY_INPUT:\n                        mKeyInputSupported = true;  // \u542f\u7528\u6309\u952e\u8f93\u5165\u652f\u6301\n                        break;\n                    case HW_KEY_INPUT_V2:\n                        mKeyInputV2Supported = true;  // \u542f\u7528\u6309\u952e\u8f93\u5165\uff08\u7248\u672c2\uff09\u652f\u6301\n                        break;\n                    case HW_MOTION_INPUT:\n                        mMotionInputSupported = true;  // \u542f\u7528\u8fd0\u52a8\u8f93\u5165\u652f\u6301\n                        break;\n                    case HW_ROTARY_INPUT:\n                        mRotaryInputSupported = true;  // \u542f\u7528\u65cb\u94ae\u8f93\u5165\u652f\u6301\n                        break;\n                    case HW_CUSTOM_INPUT:\n                        mCustomInputSupported = true;  // \u542f\u7528\u81ea\u5b9a\u4e49\u8f93\u5165\u652f\u6301\n                        break;\n                    default:\n                        break; // \u5ffd\u7565\u672a\u8bc6\u522b\u7684\u5c5e\u6027 ID\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>SUPPORTED_PROPERTIES\u6570\u7ec4\u58f0\u660e\u4e86\u670d\u52a1\u652f\u6301\u7684\u6240\u6709\u8f93\u5165\u5c5e\u6027\u7c7b\u578b\uff0c\u6bcf\u4e2a\u5c5e\u6027\u7c7b\u578b\u90fd\u5bf9\u5e94\u4e00\u4e2a\u786c\u4ef6\u8f93\u5165\u4e8b\u4ef6\u7684\u5206\u7c7b\u3002</p> <ul> <li> <p>HW_KEY_INPUT \u786c\u4ef6\u6309\u952e\u8f93\u5165</p> </li> <li> <p>HW_KEY_INPUT_V2 \u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c2\uff09</p> </li> <li> <p>HW_MOTION_INPUT \u786c\u4ef6\u8fd0\u52a8\u8f93\u5165</p> </li> <li> <p>HW_ROTARY_INPUT \u786c\u4ef6\u65cb\u94ae\u8f93\u5165</p> </li> <li> <p>HW_CUSTOM_INPUT \u81ea\u5b9a\u4e49\u786c\u4ef6\u8f93\u5165</p> </li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#inputhalserviceinit","title":"InputHalService.init()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\n/**\n * \u5c06 HAL (Hardware Abstraction Layer) \u8f93\u5165\u4e8b\u4ef6\u7ffb\u8bd1\u4e3a\u66f4\u9ad8\u7ea7\u522b\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n * \u8be5\u7c7b\u7ee7\u627f\u81ea HalServiceBase\uff0c\u5e76\u8d1f\u8d23\u5904\u7406\u4e0e\u8f93\u5165\u4e8b\u4ef6\u76f8\u5173\u7684\u5c5e\u6027\u3002\n */\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u521d\u59cb\u5316\u51fd\u6570\uff0c\u5f53\u524d\u672a\u5b9e\u73b0\u5177\u4f53\u529f\u80fd\u3002\n     * \u901a\u5e38\u5728 HAL \u670d\u52a1\u542f\u52a8\u65f6\u8c03\u7528\uff0c\u6267\u884c\u670d\u52a1\u7684\u521d\u59cb\u5316\u903b\u8f91\u3002\n     */\n    @Override\n    public void init() {\n        // \u5f53\u524d\u672a\u5b9e\u73b0\u5177\u4f53\u7684\u521d\u59cb\u5316\u903b\u8f91\n    }\n}\n</code></pre> <p><code>init()</code> \u65b9\u6cd5\u5728\u5f53\u524d\u793a\u4f8b\u4e2d\u6ca1\u6709\u5b9e\u73b0\u5177\u4f53\u903b\u8f91\uff0c\u4f46\u5728\u5176\u4ed6\u670d\u52a1\u4e2d\uff0c\u901a\u5e38\u4f1a\u5305\u542b\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u7528\u4e8e\u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\u3001\u6ce8\u518c\u76d1\u542c\u5668\u6216\u8bbe\u7f6e\u4e0e HAL \u5c42\u7684\u901a\u4fe1\u7b49\u903b\u8f91\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#caruserservicepriorityinit","title":"CarUserService.priorityInit()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/user/CarUserService.java\n\n/**\n * \u7528\u6237\u670d\u52a1\uff08User Service\uff09\u7528\u4e8e\u7ba1\u7406\u6c7d\u8f66\u7528\u6237\u7684\u76f8\u5173\u64cd\u4f5c\u3002\n * \u8be5\u670d\u52a1\u7ee7\u627f\u4e86ICarUserService.Stub\u63a5\u53e3\uff0c\u5e76\u5b9e\u73b0\u4e86CarServiceBase\u63a5\u53e3\u3002\n */\npublic final class CarUserService extends ICarUserService.Stub implements CarServiceBase {\n\n    /**\n     * \u4f18\u5148\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e\u542f\u52a8\u7528\u6237\uff08Boot User\uff09\u3002\n     * \u8be5\u65b9\u6cd5\u5728HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u5df2\u5c31\u7eea\u4f46\u5176\u4ed6\u7ec4\u4ef6\u5c1a\u672a\u521d\u59cb\u5316\u65f6\u8c03\u7528\u3002\n     */\n    public void priorityInit() {\n        // \u4f7f\u7528Handler\u5c06\u521d\u59cb\u5316\u7528\u6237\u7684\u64cd\u4f5c\u6295\u9012\u5230\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u6267\u884c\u3002\n        mHandler.post(() -&gt; initBootUser(getInitialUserInfoRequestType()));\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u542f\u52a8\u7528\u6237\u3002\n     *\n     * @param requestType \u8bf7\u6c42\u7c7b\u578b\uff0c\u8868\u793a\u7528\u6237\u521d\u59cb\u5316\u7684\u65b9\u5f0f\uff08\u5982\u6062\u590d\u7528\u6237\u3001\u5207\u6362\u7528\u6237\u7b49\uff09\u3002\n     */\n    private void initBootUser(int requestType) {\n        // \u5f00\u542f\u5f02\u6b65\u8ddf\u8e2a\uff0c\u7528\u4e8e\u6027\u80fd\u5206\u6790\uff0c\u6807\u8bc6\u521d\u59cb\u5316\u542f\u52a8\u7528\u6237\u7684\u6d41\u7a0b\u5f00\u59cb\u3002\n        Trace.asyncTraceBegin(TraceHelper.TRACE_TAG_CAR_SERVICE, \"initBootUser\", requestType);\n\n        // \u5982\u679c\u662f\u6062\u590d\u7528\u6237\u5e76\u4e14\u4e0d\u9700\u8981\u5728\u4f11\u7720\u524d\u5207\u6362\u8bbf\u5ba2\u7528\u6237\uff0c\u5219\u66ff\u6362\u8bbf\u5ba2\u7528\u6237\u3002\n        boolean replaceGuest = requestType == InitialUserInfoRequestType.RESUME &amp;&amp; !mSwitchGuestUserBeforeSleep;\n\n        // \u68c0\u67e5\u662f\u5426\u5177\u6709\u7ba1\u7406\u7528\u6237\u7684\u6743\u9650\uff0c\u5982\u679c\u6ca1\u6709\u6743\u9650\u5219\u629b\u51fa\u5f02\u5e38\u3002\n        checkManageUsersPermission(\"startInitialUser\");\n\n        // \u68c0\u67e5\u7528\u6237HAL\u662f\u5426\u652f\u6301\uff0c\u82e5\u4e0d\u652f\u6301\u6216\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u884c\u4e3a\u3002\n        if (!isUserHalSupported() || mIsVisibleBackgroundUsersOnDefaultDisplaySupported) {\n            // \u56de\u9000\u5230\u9ed8\u8ba4\u7684\u542f\u52a8\u7528\u6237\u884c\u4e3a\u3002\n            fallbackToDefaultInitialUserBehavior(/* userLocales= */ null, replaceGuest,\n                    /* supportsOverrideUserIdProperty= */ true, requestType);\n            // \u5199\u5165\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u6807\u8bb0\u521d\u59cb\u5316\u5b8c\u6210\u3002\n            EventLogHelper.writeCarUserServiceInitialUserInfoReqComplete(requestType);\n            // \u7ed3\u675f\u8ddf\u8e2a\u3002\n            Trace.asyncTraceEnd(TraceHelper.TRACE_TAG_CAR_SERVICE, \"initBootUser\", requestType);\n            return;\n        }\n\n        // \u521b\u5efa\u5f53\u524d\u7528\u6237\u4fe1\u606f\u5bf9\u8c61\uff0c\u83b7\u53d6\u7528\u6237\u7ba1\u7406\u5668\u76f8\u5173\u4fe1\u606f\u3002\n        UsersInfo usersInfo = UserHalHelper.newUsersInfo(mUserManager, mUserHandleHelper);\n\n        // \u8bb0\u5f55\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u6807\u8bb0\u53d1\u8d77\u7684\u7528\u6237\u4fe1\u606f\u8bf7\u6c42\u3002\n        EventLogHelper.writeCarUserServiceInitialUserInfoReq(requestType, mHalTimeoutMs,\n                usersInfo.currentUser.userId, usersInfo.currentUser.flags, usersInfo.numberUsers);\n\n        // \u5411HAL\u53d1\u8d77\u8bf7\u6c42\u4ee5\u83b7\u53d6\u521d\u59cb\u7528\u6237\u4fe1\u606f\uff0c\u5e76\u6ce8\u518c\u56de\u8c03\u5904\u7406\u54cd\u5e94\u3002\n        mHal.getInitialUserInfo(requestType, mHalTimeoutMs, usersInfo, (status, resp) -&gt; {\n            if (resp != null) {\n                // \u8bb0\u5f55\u54cd\u5e94\u65e5\u5fd7\uff0c\u5305\u542b\u54cd\u5e94\u7684\u52a8\u4f5c\u548c\u7528\u6237\u4fe1\u606f\u3002\n                EventLogHelper.writeCarUserServiceInitialUserInfoResp(status, resp.action,\n                        resp.userToSwitchOrCreate.userId, resp.userToSwitchOrCreate.flags,\n                        resp.userNameToCreate, resp.userLocales);\n\n                String userLocales = resp.userLocales; // \u7528\u6237\u7684\u533a\u57df\u8bbe\u7f6e\u4fe1\u606f\u3002\n                InitialUserInfo info;\n\n                // \u6839\u636e\u54cd\u5e94\u52a8\u4f5c\uff08\u5982\u5207\u6362\u7528\u6237\u3001\u521b\u5efa\u7528\u6237\u6216\u9ed8\u8ba4\uff09\u5904\u7406\u521d\u59cb\u5316\u903b\u8f91\u3002\n                switch (resp.action) {\n                    case InitialUserInfoResponseAction.SWITCH:\n                        int userId = resp.userToSwitchOrCreate.userId;\n                        if (userId &lt;= 0) {\n                            // \u82e5\u7528\u6237ID\u65e0\u6548\uff0c\u5219\u56de\u9000\u5230\u9ed8\u8ba4\u884c\u4e3a\u3002\n                            Slogf.w(TAG, \"invalid (or missing) user id sent by HAL: %d\", userId);\n                            fallbackToDefaultInitialUserBehavior(userLocales, replaceGuest,\n                                    /* supportsOverrideUserIdProperty= */ false, requestType);\n                            break;\n                        }\n                        // \u6784\u5efa\u5207\u6362\u7528\u6237\u7684\u521d\u59cb\u5316\u4fe1\u606f\u5e76\u8bbe\u7f6e\u3002\n                        info = new InitialUserSetter.Builder(InitialUserSetter.TYPE_SWITCH)\n                                .setRequestType(requestType)\n                                .setUserLocales(userLocales)\n                                .setSwitchUserId(userId)\n                                .setReplaceGuest(replaceGuest)\n                                .build();\n                        mInitialUserSetter.set(info);\n                        break;\n\n                    case InitialUserInfoResponseAction.CREATE:\n                        int halFlags = resp.userToSwitchOrCreate.flags; // \u7528\u6237\u6807\u5fd7\u4fe1\u606f\u3002\n                        String userName = resp.userNameToCreate; // \u7528\u6237\u540d\u3002\n                        // \u6784\u5efa\u521b\u5efa\u7528\u6237\u7684\u521d\u59cb\u5316\u4fe1\u606f\u5e76\u8bbe\u7f6e\u3002\n                        info = new InitialUserSetter.Builder(InitialUserSetter.TYPE_CREATE)\n                                .setRequestType(requestType)\n                                .setUserLocales(userLocales)\n                                .setNewUserName(userName)\n                                .setNewUserFlags(halFlags)\n                                .build();\n                        mInitialUserSetter.set(info);\n                        break;\n\n                    case InitialUserInfoResponseAction.DEFAULT:\n                        // \u9ed8\u8ba4\u54cd\u5e94\u52a8\u4f5c\uff0c\u56de\u9000\u5230\u9ed8\u8ba4\u884c\u4e3a\u3002\n                        fallbackToDefaultInitialUserBehavior(userLocales, replaceGuest,\n                                /* supportsOverrideUserIdProperty= */ false, requestType);\n                        break;\n\n                    default:\n                        // \u65e0\u6548\u54cd\u5e94\u52a8\u4f5c\u65f6\uff0c\u8bb0\u5f55\u65e5\u5fd7\u5e76\u56de\u9000\u5230\u9ed8\u8ba4\u884c\u4e3a\u3002\n                        Slogf.w(TAG, \"invalid response action on %s\", resp);\n                        fallbackToDefaultInitialUserBehavior(/* userLocales= */ null, replaceGuest,\n                                /* supportsOverrideUserIdProperty= */ false, requestType);\n                        break;\n                }\n            } else {\n                // \u82e5\u54cd\u5e94\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u65e5\u5fd7\u5e76\u56de\u9000\u5230\u9ed8\u8ba4\u884c\u4e3a\u3002\n                EventLogHelper.writeCarUserServiceInitialUserInfoResp(status, /* action= */ 0,\n                        /* userId= */ 0, /* flags= */ 0, /* safeName= */ \"\", /* userLocales= */ \"\");\n                fallbackToDefaultInitialUserBehavior(/* user locale */ null, replaceGuest,\n                        /* supportsOverrideUserIdProperty= */ false, requestType);\n            }\n\n            // \u6807\u8bb0\u8bf7\u6c42\u5b8c\u6210\u5e76\u7ed3\u675f\u8ddf\u8e2a\u3002\n            EventLogHelper.writeCarUserServiceInitialUserInfoReqComplete(requestType);\n            Trace.asyncTraceEnd(TraceHelper.TRACE_TAG_CAR_SERVICE, \"initBootUser\", requestType);\n        });\n    }\n}\n</code></pre> <p><code>priorityInit()</code> \u65b9\u6cd5\u901a\u8fc7\u5f02\u6b65\u6d88\u606f\u673a\u5236\uff0c\u5c06\u521d\u59cb\u5316\u542f\u52a8\u7528\u6237\u7684\u4efb\u52a1\u63d0\u4ea4\u5230 <code>Handler</code>\uff0c\u4ee5\u786e\u4fdd\u4e0d\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\u3002</p> <p><code>initBootUser()</code> </p> <ul> <li>\u901a\u8fc7 <code>requestType</code> \u53c2\u6570\u51b3\u5b9a\u5982\u4f55\u521d\u59cb\u5316\u542f\u52a8\u7528\u6237\u3002</li> <li>\u68c0\u67e5\u662f\u5426\u652f\u6301 User HAL \u548c\u5176\u4ed6\u7279\u6027\uff0c\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5219\u56de\u9000\u5230\u9ed8\u8ba4\u7684\u884c\u4e3a\u3002</li> </ul> <p>\u8c03\u7528 HAL \u83b7\u53d6\u7528\u6237\u4fe1\u606f</p> <ul> <li>\u4f7f\u7528 <code>UserHalHelper</code> \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5e76\u8c03\u7528 HAL \u63a5\u53e3\u83b7\u53d6\u521d\u59cb\u7528\u6237\u4fe1\u606f\u3002</li> <li>\u6839\u636e HAL \u8fd4\u56de\u7684\u54cd\u5e94 (<code>resp</code>)\uff0c\u51b3\u5b9a\u662f\u5207\u6362\u7528\u6237 (<code>SWITCH</code>)\u3001\u521b\u5efa\u7528\u6237 (<code>CREATE</code>)\uff0c\u8fd8\u662f\u4f7f\u7528\u9ed8\u8ba4\u884c\u4e3a (<code>DEFAULT</code>)\u3002</li> </ul> <p>\u81f3\u6b64\uff0c<code>priorityInit()</code> \u6d41\u7a0b\u5206\u6790\u5b8c\uff0c\u6211\u4eec\u56de\u5230 ICarImpl.init() \u7ee7\u7eed\u5206\u6790\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u7684 <code>init()</code> \u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u8fd9\u6b21\u6211\u4eec\u6362\u4e00\u4e2a\u670d\u52a1\u6765\u5206\u6790\u5427\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#carinputserviceinit","title":"CarInputService.init()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\n/**\n * CarInputService \u76d1\u63a7\u548c\u5904\u7406\u901a\u8fc7 Vehicle HAL \u63a5\u6536\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\n * \u8be5\u670d\u52a1\u7ee7\u627f\u4e86 ICarInput.Stub \u63a5\u53e3\uff0c\u5e76\u5b9e\u73b0\u4e86 CarServiceBase \u548c InputHalService.InputListener \u63a5\u53e3\u3002\n */\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u521d\u59cb\u5316 CarInputService\u3002\n     * \u5982\u679c HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u4e0d\u652f\u6301\u6309\u952e\u8f93\u5165\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u3002\n     * \u5982\u679c\u652f\u6301\u6309\u952e\u8f93\u5165\uff0c\u5219\u5b8c\u6210\u8f93\u5165\u76d1\u542c\u5668\u7684\u8bbe\u7f6e\u4ee5\u53ca\u7528\u6237\u751f\u547d\u5468\u671f\u548c\u5ea7\u4f4d\u76f8\u5173\u7684\u521d\u59cb\u5316\u3002\n     */\n    @Override\n    public void init() {\n        // \u68c0\u67e5 Vehicle HAL \u662f\u5426\u652f\u6301\u6309\u952e\u8f93\u5165\u529f\u80fd\u3002\n        if (!mInputHalService.isKeyInputSupported()) {\n            // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u76f4\u63a5\u8fd4\u56de\u3002\n            Slogf.w(TAG, \"Hal does not support key input.\");\n            return;\n        }\n\n        // \u5982\u679c\u652f\u6301\u6309\u952e\u8f93\u5165\uff0c\u8bb0\u5f55\u652f\u6301\u4fe1\u606f\u3002\n        Slogf.d(TAG, \"Hal supports key input.\");\n\n        // \u8bbe\u7f6e\u8f93\u5165\u76d1\u542c\u5668\uff0cCarInputService \u5c06\u4f1a\u76d1\u542c\u8f93\u5165\u4e8b\u4ef6\u3002\n        mInputHalService.setInputListener(this);\n\n        // \u521b\u5efa\u7528\u6237\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u8fc7\u6ee4\u5668\uff0c\u53ea\u76d1\u542c \"\u7528\u6237\u5207\u6362\" \u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\n        UserLifecycleEventFilter userSwitchingEventFilter = new UserLifecycleEventFilter.Builder()\n                .addEventType(USER_LIFECYCLE_EVENT_TYPE_SWITCHING) // \u6dfb\u52a0\u4e8b\u4ef6\u7c7b\u578b\uff1a\u7528\u6237\u5207\u6362\n                .build();\n\n        // \u6ce8\u518c\u7528\u6237\u751f\u547d\u5468\u671f\u76d1\u542c\u5668\uff0c\u5f53\u7528\u6237\u5207\u6362\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u89e6\u53d1\u76f8\u5e94\u903b\u8f91\u3002\n        mUserService.addUserLifecycleListener(userSwitchingEventFilter, mUserLifecycleListener);\n\n        // \u83b7\u53d6\u9a7e\u9a76\u5458\u5ea7\u4f4d\u7684\u533a\u57df\u4fe1\u606f\u3002\n        mDriverSeat = mCarOccupantZoneService.getDriverSeat();\n\n        // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u9a7e\u9a76\u5458\u5ea7\u4f4d\uff08\u5373\u9a7e\u9a76\u5458\u5ea7\u4f4d\u662f\u5426\u4e3a\u6709\u6548\u503c\uff09\u3002\n        mHasDriver = (mDriverSeat != VehicleAreaSeat.SEAT_UNKNOWN);\n    }\n}\n</code></pre> <p><code>CarInputService</code> \u662f Android \u6c7d\u8f66\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u670d\u52a1\uff0c\u7528\u4e8e\u5904\u7406\u6765\u81ea <code>Vehicle HAL</code> \u7684\u8f93\u5165\u4e8b\u4ef6\uff0c\u4f8b\u5982\u6309\u952e\u8f93\u5165\u6216\u5176\u4ed6\u786c\u4ef6\u8f93\u5165\u3002\u5b83\u8fd8\u76d1\u542c\u7528\u6237\u751f\u547d\u5468\u671f\u4e8b\u4ef6\uff08\u5982\u7528\u6237\u5207\u6362\uff09\u5e76\u7ba1\u7406\u9a7e\u9a76\u5458\u5ea7\u4f4d\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u8fd9\u4e2a <code>init()</code> \u65b9\u6cd5\u6211\u4eec\u6682\u4e0d\u6df1\u5165\u5206\u6790\uff0c\u540e\u7eed\u6211\u4eec\u4f1a\u9488\u5bf9\u6bcf\u4e00\u4e2a\u670d\u52a1\u8fdb\u884c\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#carpowermanagementserviceoninitcomplete","title":"CarPowerManagementService.onInitComplete()","text":"<p>\u5206\u6790\u5b8c\u670d\u52a1\u7684 init() \u65b9\u6cd5\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u7ee7\u7eed\u5206\u6790\u670d\u52a1\u7684 <code>onInitComplete()</code> \u65b9\u6cd5\u3002\u5230\u8fd9\u91cc\u6211\u624d\u53d1\u73b0\u5176\u5b9e\u5c31\u53ea\u6709\u4e24\u4e2a\u670d\u52a1\u91cd\u5199\u4e86 <code>onInitComplete()</code> \u65b9\u6cd5\u3002 CarPowerManagementService \u548c CarOemProxyService \u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/power/CarPowerManagementService.java\n\n/**\n * CarPowerManagementService \u662f\u4e00\u4e2a\u4e13\u7528\u4e8e\u6c7d\u8f66\u7684\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u7c7b\u3002\n * \u5b83\u8d1f\u8d23\u63a7\u5236\u6c7d\u8f66\u7684\u7535\u6e90\u72b6\u6001\uff0c\u5e76\u4e0e\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u4ea4\u4e92\u4ee5\u786e\u4fdd\u7535\u6e90\u72b6\u6001\u7684\u6b63\u5e38\u8fd0\u4f5c\u3002\n * \n * \u529f\u80fd\uff1a\n * - \u76d1\u63a7\u548c\u7ba1\u7406\u8f66\u8f86\u7684\u7535\u6e90\u72b6\u6001\u3002\n * - \u652f\u6301\u8f66\u5e93\u6a21\u5f0f\uff08Garage Mode\uff09\uff0c\u5728\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u542f\u52a8\u6216\u8df3\u8fc7\u8be5\u6a21\u5f0f\u3002\n * - \u4e0e\u7535\u6e90\u76f8\u5173\u7684 HAL\uff08Hardware Abstraction Layer\uff09\u670d\u52a1\u8fdb\u884c\u901a\u4fe1\uff0c\u83b7\u53d6\u8f66\u8f86\u7684\u7535\u6e90\u72b6\u6001\u4fe1\u606f\u3002\n */\npublic class CarPowerManagementService extends ICarPower.Stub implements\n        CarServiceBase, PowerHalService.PowerEventListener {\n\n    /**\n     * \u670d\u52a1\u521d\u59cb\u5316\u5b8c\u6210\u65f6\u7684\u56de\u8c03\u65b9\u6cd5\u3002\n     * \n     * \u5982\u679c\u7cfb\u7edf\u652f\u6301\u65e0\u670d\u52a1\u5668\u8fdc\u7a0b\u8bbf\u95ee\u529f\u80fd\uff08Serverless Remote Access\uff09\uff0c\n     * \u5219\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u68c0\u67e5\u662f\u5426\u9700\u8981\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\u3002\n     */\n    @Override\n    public void onInitComplete() {\n        // \u68c0\u67e5\u662f\u5426\u542f\u7528\u4e86\u65e0\u670d\u52a1\u5668\u8fdc\u7a0b\u8bbf\u95ee\u529f\u80fd\n        if (mFeatureFlags.serverlessRemoteAccess()) {\n            // \u5982\u679c\u542f\u7528\uff0c\u5219\u5c1d\u8bd5\u5728\u542f\u52a8\u65f6\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\n            maybeEnterGarageModeOnBoot();\n        }\n    }\n\n    /**\n     * \u5982\u679c\u5f15\u5bfc\u539f\u56e0\u662f \"\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\"\uff0c\u5219\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\u3002\n     * \n     * \u8f66\u5e93\u6a21\u5f0f\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7535\u6e90\u72b6\u6001\uff0c\u8f66\u8f86\u8fdb\u5165\u8be5\u6a21\u5f0f\u540e\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u540e\u53f0\u4efb\u52a1\uff08\u5982\u7ef4\u62a4\u3001\u66f4\u65b0\u7b49\uff09\uff0c\n     * \u7136\u540e\u5728\u4efb\u52a1\u5b8c\u6210\u540e\u5173\u95ed\u7cfb\u7edf\u3002\n     */\n    private void maybeEnterGarageModeOnBoot() {\n        // \u4ece HAL \u83b7\u53d6\u5f53\u524d\u8f66\u8f86\u7684\u5f15\u5bfc\u539f\u56e0\n        @BootupReason int bootupReason = mHal.getVehicleApBootupReason();\n        // \u6253\u5370\u5f53\u524d\u8f66\u8f86\u7535\u6e90\u5f15\u5bfc\u539f\u56e0\u4ee5\u4f9b\u8c03\u8bd5\n        Slogf.i(TAG, \"Vehicle AP power bootup reason: \" + bootupReason);\n\n        // \u5982\u679c\u5f15\u5bfc\u539f\u56e0\u4e0d\u662f \"\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\"\uff0c\u76f4\u63a5\u9000\u51fa\n        if (bootupReason != BOOTUP_REASON_SYSTEM_ENTER_GARAGE_MODE) {\n            return;\n        }\n\n        // \u68c0\u67e5\u8f66\u8f86\u662f\u5426\u6b63\u5728\u4f7f\u7528\u4e2d\n        if (mHal.isVehicleInUse()) {\n            Slogf.i(TAG, \"Bootup reason is ENTER_GARAGE_MODE but vehicle is currently in use\"\n                    + \", skip entering garage mode\");\n            return;\n        }\n\n        // \u5982\u679c\u5f15\u5bfc\u539f\u56e0\u7b26\u5408\u5e76\u4e14\u8f66\u8f86\u672a\u88ab\u4f7f\u7528\uff0c\u5c1d\u8bd5\u5173\u95ed\u8bbe\u5907\u5e76\u8fd0\u884c\u8f66\u5e93\u6a21\u5f0f\n        try {\n            // \u8c03\u7528\u5173\u95ed\u8bbe\u5907\u7684\u65b9\u6cd5\uff0c\u5e76\u4f20\u5165\u6700\u540e\u4e00\u6b21\u5173\u673a\u72b6\u6001\n            requestShutdownAp(getLastShutdownState(), /* runGarageMode= */ true);\n        } catch (Exception e) {\n            // \u5982\u679c\u8c03\u7528 requestShutdownAp \u65b9\u6cd5\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n            Slogf.wtf(TAG, \"Failed to call requestShutdownAp\", e);\n        }\n    }\n}\n</code></pre> <p><code>onInitComplete()</code> \u65b9\u6cd5\u5728\u6240\u6709\u670d\u52a1\u521d\u59cb\u5316\u5b8c\u6210\u540e\u81ea\u52a8\u8c03\u7528\u3002\u68c0\u67e5\u7cfb\u7edf\u662f\u5426\u542f\u7528\u4e86 \"\u65e0\u670d\u52a1\u5668\u8fdc\u7a0b\u8bbf\u95ee\" \u529f\u80fd\uff0c\u5982\u679c\u542f\u7528\uff0c\u5219\u4f1a\u8fdb\u4e00\u6b65\u8c03\u7528 <code>maybeEnterGarageModeOnBoot()</code> \u65b9\u6cd5\uff0c\u68c0\u67e5\u662f\u5426\u9700\u8981\u5728\u542f\u52a8\u65f6\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\u3002</p> <p>maybeEnterGarageModeOnBoot() \u8c03\u7528 <code>mHal.getVehicleApBootupReason()</code> \u65b9\u6cd5\u4ece HAL \u83b7\u53d6\u8f66\u8f86\u5f53\u524d\u7684\u5f15\u5bfc\u539f\u56e0\u3002\u80fd\u7684\u5f15\u5bfc\u539f\u56e0\u5305\u62ec\uff1a\u6b63\u5e38\u542f\u52a8\u3001\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\u7b49\u3002</p> <ul> <li>\u5982\u679c\u5f15\u5bfc\u539f\u56e0\u4e0d\u662f <code>BOOTUP_REASON_SYSTEM_ENTER_GARAGE_MODE</code>\uff0c\u76f4\u63a5\u9000\u51fa\u65b9\u6cd5\u3002</li> <li>\u5982\u679c\u8f66\u8f86\u6b63\u5728\u88ab\u4f7f\u7528\uff08\u5982\u6b63\u5728\u9a7e\u9a76\u4e2d\uff09\uff0c\u4e5f\u8df3\u8fc7\u8f66\u5e93\u6a21\u5f0f\u3002</li> <li>\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u8c03\u7528 <code>requestShutdownAp()</code> \u65b9\u6cd5\u5173\u95ed\u8bbe\u5907\u5e76\u8fdb\u5165\u8f66\u5e93\u6a21\u5f0f\u3002</li> <li>\u4f20\u5165 <code>getLastShutdownState()</code> \u83b7\u53d6\u6700\u540e\u4e00\u6b21\u5173\u673a\u72b6\u6001\uff0c\u540c\u65f6\u8bbe\u7f6e <code>runGarageMode</code> \u53c2\u6570\u4e3a <code>true</code>\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/init-service/#_2","title":"\u603b\u7ed3","text":"<p>CarService \u670d\u52a1\u521d\u59cb\u5316\u4ece\u00a0<code>CarServiceImpl.onCreate()</code>\u00a0\u5f00\u59cb\uff1a</p> <ul> <li>\u8c03\u7528\u00a0<code>VehicleStub.newVehicleStub()</code>\u00a0\u521b\u5efa\u00a0<code>VehicleStub</code>\u00a0\u7684\u5b9e\u4f8b\uff0c\u5177\u4f53\u5b9e\u73b0\u4e3a\u00a0<code>AidlVehicleStub</code>\u00a0\u7684\u5b9e\u4f8b\u3002</li> <li>\u8c03\u7528\u00a0<code>new ICarImpl.Builder().build()</code>\u00a0\u521b\u5efa\u00a0<code>ICarImpl</code>\u00a0\u7684\u5b9e\u4f8b\u3002</li> <li>\u8c03\u7528\u00a0<code>ICarImpl.init()</code>\u00a0\u521d\u59cb\u5316\u00a0<code>HalService</code>\u3001<code>CarSystemService</code>\u7b49\u3002<ul> <li>\u8c03\u7528\u00a0<code>ICarImpl.priorityInit()</code>\u3002<ul> <li>\u8c03\u7528\u00a0<code>VehicleHal.priorityInit()</code>\u3002<ul> <li>\u8c03\u7528\u00a0<code>VehicleHal.fetchAllPropConfigs()</code>\u3002<ul> <li>\u8c03\u7528\u00a0<code>AidlVehicleStub.getAllPropConfigs()</code>\u00a0\u83b7\u53d6\u6240\u6709\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u3002</li> </ul> </li> <li>\u8c03\u7528\u00a0<code>HalServiceBase.takeProperties()</code>\u3002</li> <li>\u8c03\u7528\u00a0<code>HalServiceBase.init()</code>\u3002</li> </ul> </li> <li>\u8c03\u7528\u00a0<code>CarUserService.priorityInit()</code>\u3002</li> </ul> </li> <li>\u8c03\u7528\u00a0<code>CarSystemService.init()</code>\u3002</li> <li>\u8c03\u7528\u00a0<code>CarSystemService.onInitComplete()</code>\u3002</li> </ul> </li> </ul> <p>\u5176\u4ee3\u7801\u7cbe\u7b80\u5982\u4e0b\uff1a</p> <pre><code>public class CarServiceImpl extends ProxiedService {  \n\n    private ICarImpl mICarImpl;  \n    private VehicleStub mVehicle;  \n\n    public void onCreate() {  \n\n        mVehicle = VehicleStub.newVehicleStub();  \n\n        mICarImpl = new ICarImpl.Builder()  \n                .build();  \n        mICarImpl.init();\n    }  \n}  \n\n\npublic abstract class VehicleStub {  \n    public static VehicleStub newVehicleStub() throws IllegalStateException {  \n        VehicleStub stub = new AidlVehicleStub();  \n        return stub;  \n    }  \n}  \n\n\nfinal class AidlVehicleStub extends VehicleStub {  \n    AidlVehicleStub() {  \n    }  \n\n    @Override  \n    public HalPropConfig[] getAllPropConfigs()  \n    }  \n}  \n\n\npublic class ICarImpl extends ICar.Stub {  \n\n    private final VehicleHal mHal;  \n    private final CarUserService mCarUserService;  \n    private final CarSystemService service;  \n\n    private ICarImpl(Builder builder) {  \n    }  \n\n    void init() {  \n        priorityInit();  \n        service.init();  \n        service.onInitComplete();  \n    }  \n\n    void priorityInit() {  \n        mHal.priorityInit();  \n        mCarUserService.priorityInit();  \n    }  \n\n    public static final class Builder {  \n        public ICarImpl build() {  \n            return new ICarImpl(this);  \n        }  \n    }  \n\n}  \n\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {  \n    HalServiceBase service;  \n    AidlVehicleStub mVehicleStub;  \n\n    public void priorityInit() {  \n        fetchAllPropConfigs();  \n\n        service.takeProperties(configsForService);  \n        service.init();  \n    }  \n\n    void fetchAllPropConfigs() {  \n        configs = getAllPropConfigs();  \n    }  \n\n    public HalPropConfig[] getAllPropConfigs() throws RemoteException, ServiceSpecificException {  \n        return mVehicleStub.getAllPropConfigs();  \n    }  \n}  \n\n\npublic abstract class HalServiceBase {  \n    public void takeProperties(@NonNull Collection&lt;HalPropConfig&gt; properties) {  \n    }  \n\n    public abstract void init();  \n}  \n\n\npublic interface CarSystemService {  \n\n    void init();  \n\n    default void onInitComplete() {}  \n\n}\n</code></pre> <p>\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a</p> <pre><code>sequenceDiagram\n    participant CarServiceImpl\n    participant VehicleStub\n    participant AidlVehicleStub\n    participant ICarImpl\n    participant VehicleHal\n    participant HalServiceBase\n    participant CarSystemService\n\n    %% CarServiceImpl.onCreate()\n    rect rgb(191, 223, 255)\n    note over CarServiceImpl: CarServiceImpl.onCreate()\n    CarServiceImpl-&gt;&gt;VehicleStub: newVehicleStub()\n    VehicleStub-&gt;&gt;AidlVehicleStub: new AidlVehicleStub()\n    VehicleStub--&gt;&gt;CarServiceImpl: return AidlVehicleStub\n\n    CarServiceImpl-&gt;&gt;ICarImpl: new ICarImpl.Builder().build()\n    ICarImpl-&gt;&gt;ICarImpl: init()\n    end\n\n    %% ICarImpl.init() - priorityInit\n    rect rgb(255, 223, 191)\n    note over ICarImpl: ICarImpl.init() - priorityInit\n    ICarImpl-&gt;&gt;ICarImpl: priorityInit()\n    end\n\n    %% VehicleHal.priorityInit()\n    rect rgb(223, 191, 255)\n    note over VehicleHal: VehicleHal.priorityInit()\n    ICarImpl-&gt;&gt;VehicleHal: mHal.priorityInit()\n    VehicleHal-&gt;&gt;VehicleHal: fetchAllPropConfigs()\n    VehicleHal-&gt;&gt;AidlVehicleStub: getAllPropConfigs()\n    AidlVehicleStub--&gt;&gt;VehicleHal: return HalPropConfig[]\n\n    VehicleHal-&gt;&gt;HalServiceBase: service.takeProperties(configsForService)\n    HalServiceBase-&gt;&gt;HalServiceBase: init()\n    end\n\n    %% CarSystemService.init()\n    rect rgb(191, 255, 223)\n    note over CarSystemService: CarSystemService.init()\n    ICarImpl-&gt;&gt;CarSystemService: service.init()\n    end\n\n    %% CarSystemService.onInitComplete()\n    rect rgb(255, 191, 223)\n    note over CarSystemService: CarSystemService.onInitComplete()\n    ICarImpl-&gt;&gt;CarSystemService: service.onInitComplete()\n    end\n</code></pre> <p>\u5728\u5206\u6790 CarService \u670d\u52a1\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e86 CarService \u8fdb\u7a0b\u542f\u52a8\u540e\u7684\u521d\u59cb\u5316\u6b65\u9aa4\uff0c\u800c\u6ca1\u6709\u6df1\u5165\u63a2\u8ba8\u6bcf\u4e2a\u5177\u4f53\u670d\u52a1\u7684\u521d\u59cb\u5316\u7ec6\u8282\u3002\u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>Native\u670d\u52a1\u7684\u521d\u59cb\u5316 <ul> <li>\u9996\u5148\uff0c\u6784\u9020\u6bcf\u4e00\u4e2a\u00a0<code>HalService</code>\u00a0\u5b9e\u4f8b\u3002</li> <li>\u7136\u540e\uff0c\u8c03\u7528\u00a0<code>HalService</code>\u00a0\u7684\u00a0<code>takeProperties()</code>\u00a0\u65b9\u6cd5\u3002</li> <li>\u63a5\u7740\uff0c\u8c03\u7528\u00a0<code>HalService</code>\u00a0\u7684\u00a0<code>init()</code>\u00a0\u65b9\u6cd5\u3002</li> </ul> </li> <li>Java\u670d\u52a1\u7684\u521d\u59cb\u5316<ul> <li>\u6784\u9020\u6bcf\u4e00\u4e2a\u00a0<code>CarSystemService</code>\u00a0\u5b9e\u4f8b\u3002</li> <li>\u8c03\u7528\u00a0<code>CarSystemService</code>\u00a0\u7684\u00a0<code>init()</code>\u00a0\u65b9\u6cd5\u3002</li> <li>\u6700\u540e\uff0c\u8c03\u7528\u00a0<code>CarSystemService</code>\u00a0\u7684\u00a0<code>onInitComplete()</code>\u00a0\u65b9\u6cd5\u3002</li> </ul> </li> </ul> <p>\u5728\u540e\u7eed\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9010\u6b65\u6df1\u5165\u5206\u6790\u6bcf\u4e2a\u670d\u52a1\u7684\u542f\u52a8\u8fc7\u7a0b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/","title":"Android 15 CarService\u6e90\u780103-\u670d\u52a1\u53ca\u63a5\u53e3","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#_1","title":"\u670d\u52a1\u4ecb\u7ecd","text":"<p>Android \u539f\u751f\u7684 CarService \u662f\u4e00\u4e2a\u529f\u80fd\u4e30\u5bcc\u7684\u670d\u52a1\u6846\u67b6\uff0c\u4f5c\u4e3a C/S \u6a21\u5f0f\u4e2d\u7684\u670d\u52a1\u7aef\uff0c\u627f\u62c5\u4e86\u5173\u952e\u7684\u4e2d\u95f4\u6865\u6881\u4f5c\u7528\u3002\u5b83\u901a\u8fc7\u4e0e HAL \u5c42\u7684 VehicleHAL \u901a\u4fe1\uff0c\u8fdb\u4e00\u6b65\u501f\u52a9\u8f66\u8f7d\u603b\u7ebf\uff08\u5982 CAN \u603b\u7ebf\uff09\u4e0e\u8f66\u8eab\u786c\u4ef6\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b9e\u73b0\u5bf9\u8f66\u8f86\u786c\u4ef6\u7684\u63a7\u5236\u4e0e\u72b6\u6001\u83b7\u53d6\u3002\u540c\u65f6\uff0cCarService \u8fd8\u901a\u8fc7 Car API\uff08\u5982 Car**Manager\uff0cC/S \u6a21\u5f0f\u4e2d\u7684\u5ba2\u6237\u7aef\uff09\u5411\u5e94\u7528\u5c42\u63d0\u4f9b\u6807\u51c6\u5316\u63a5\u53e3\uff0c\u4f7f Car App \u80fd\u591f\u65b9\u4fbf\u5730\u5b9e\u73b0\u8f66\u8eab\u63a7\u5236\u548c\u72b6\u6001\u663e\u793a\u529f\u80fd\u3002</p> <p>\u4ee5\u4e0b\u5217\u4e3e CarService \u4e2d\u6240\u6709\u7684\u670d\u52a1\uff1a</p> Java\u670d\u52a1 Native\u670d\u52a1 Stub SDK \u529f\u80fd CarOemProxyService - - - \u8d1f\u8d23\u4e0eOEM\u7279\u5b9a\u529f\u80fd\u7684\u4ea4\u4e92\u3002 SystemActivityMonitoringService - - - \u76d1\u63a7\u7cfb\u7edf\u6d3b\u52a8\u72b6\u6001\u3002 CarPowerManagementService PowerHalService ICarPower.Stub CarPowerManager \u7ba1\u7406\u8f66\u8f86\u7684\u7535\u6e90\u72b6\u6001\u548c\u7b56\u7565\u3002 CarPackageManagerService - ICarPackageManager.Stub CarPackageManager \u7ba1\u7406\u8f66\u8f86\u76f8\u5173\u7684\u8f6f\u4ef6\u5305\u3002 CarInputService InputHalService ICarInput.Stub CarInputManager \u5904\u7406\u8f66\u8f86\u7684\u8f93\u5165\u4e8b\u4ef6\uff0c\u5982\u6309\u94ae\u548c\u5f00\u5173\u3002 CarDrivingStateService - ICarDrivingState.Stub CarDrivingStateManager \u7ba1\u7406\u548c\u76d1\u63a7\u8f66\u8f86\u7684\u9a7e\u9a76\u72b6\u6001\u3002 CarUxRestrictionsManagerService - ICarUxRestrictionsManager.Stub CarUxRestrictionsManager \u7ba1\u7406\u7528\u6237\u4f53\u9a8c\u9650\u5236\uff0c\u786e\u4fdd\u9a7e\u9a76\u5b89\u5168\u3002 OccupantAwarenessService - IOccupantAwarenessManager.Stub OccupantAwarenessManager \u76d1\u63a7\u8f66\u5185\u4e58\u5ba2\u7684\u72b6\u6001\u548c\u6d3b\u52a8\u3002 CarAudioService - ICarAudio.Stub CarAudioManager \u7ba1\u7406\u8f66\u8f86\u7684\u97f3\u9891\u7cfb\u7edf\u3002 CarProjectionService - ICarProjection.Stub CarProjectionManager \u5904\u7406\u624b\u673a\u4e0e\u8f66\u673a\u7684\u6295\u5f71\u529f\u80fd\u3002 CarPropertyService PropertyHalService ICarProperty.Stub CarPropertyManager \u8bbf\u95ee\u548c\u7ba1\u7406\u8f66\u8f86\u5c5e\u6027\u3002 CarNightService - - - \u7ba1\u7406\u8f66\u8f86\u7684\u591c\u95f4\u6a21\u5f0f\u3002 AppFocusService - IAppFocus.Stub CarAppFocusManager \u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u7684\u7126\u70b9\u72b6\u6001\u3002 FixedActivityService - - - \u7ba1\u7406\u56fa\u5b9a\u6d3b\u52a8\u7684\u72b6\u6001\u3002 GarageModeService - - - \u7ba1\u7406\u8f66\u8f86\u7684\u8f66\u5e93\u6a21\u5f0f\u3002 ClusterNavigationService - IInstrumentClusterNavigation.Stub - \u7ba1\u7406\u4eea\u8868\u76d8\u5bfc\u822a\u663e\u793a\u3002 InstrumentClusterService - - - \u7ba1\u7406\u4eea\u8868\u76d8\u529f\u80fd\u3002 CarLocationService - - - \u7ba1\u7406\u8f66\u8f86\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002 CarBluetoothService - - - \u7ba1\u7406\u8f66\u8f86\u7684\u84dd\u7259\u8fde\u63a5\u3002 CarPerUserServiceHelper - - - \u63d0\u4f9b\u7528\u6237\u76f8\u5173\u7684\u670d\u52a1\u5e2e\u52a9\u3002 CarDiagnosticService DiagnosticHalService ICarDiagnostic.Stub CarDiagnosticManager \u63d0\u4f9b\u8f66\u8f86\u8bca\u65ad\u4fe1\u606f\u3002 CarStorageMonitoringService - ICarStorageMonitoring.Stub CarStorageMonitoringManager \u76d1\u63a7\u8f66\u8f86\u5b58\u50a8\u72b6\u6001\u3002 CarMediaService - ICarMedia.Stub CarMediaManager \u7ba1\u7406\u8f66\u8f86\u7684\u5a92\u4f53\u64ad\u653e\u3002 CarUserService UserHalService ICarUserService.Stub CarUserManager \u7ba1\u7406\u8f66\u8f86\u7528\u6237\u4fe1\u606f\u3002 ExperimentalCarUserService - IExperimentalCarUserService.Stub ExperimentalCarUserManager \u5b9e\u9a8c\u6027\u7684\u7528\u6237\u670d\u52a1\u529f\u80fd\u3002 ExperimentalCarKeyguardService - IExperimentalCarKeyguardService.Stub - \u5b9e\u9a8c\u6027\u7684\u94a5\u5319\u7ba1\u7406\u529f\u80fd\u3002 CarOccupantZoneService - ICarOccupantZone.Stub CarOccupantZoneManager \u7ba1\u7406\u8f66\u5185\u4e58\u5ba2\u533a\u57df\u3002 CarUserNoticeService - - - \u7ba1\u7406\u7528\u6237\u901a\u77e5\u3002 VmsBrokerService - IVmsBrokerService.Stub - \u7ba1\u7406\u8f66\u8f86\u7684VMS\uff08\u8f66\u8f86\u7ba1\u7406\u7cfb\u7edf\uff09\u3002 CarBugreportManagerService - ICarBugreportService.Stub CarBugreportManager \u7ba1\u7406\u8f66\u8f86\u7684\u9519\u8bef\u62a5\u544a\u3002 CarStatsService - - - \u7ba1\u7406\u8f66\u8f86\u7684\u7edf\u8ba1\u4fe1\u606f\u3002 CarExperimentalFeatureServiceController - - - \u7ba1\u7406\u5b9e\u9a8c\u6027\u529f\u80fd\u63a7\u5236\u3002 CarWatchdogService - ICarWatchdogService.Stub CarWatchdogManager \u76d1\u63a7\u8f66\u8f86\u7cfb\u7edf\u7684\u5065\u5eb7\u72b6\u6001\u3002 CarPerformanceService - ICarPerformanceService.Stub CarPerformanceManager \u7ba1\u7406\u8f66\u8f86\u7684\u6027\u80fd\u76d1\u63a7\u3002 CarDevicePolicyService - ICarDevicePolicyService.Stub CarDevicePolicyManager \u7ba1\u7406\u8f66\u8f86\u7684\u8bbe\u5907\u7b56\u7565\u3002 ClusterHomeService ClusterHalService IClusterHomeService.Stub ClusterHomeManager \u7ba1\u7406\u4eea\u8868\u76d8\u4e3b\u9875\u663e\u793a\u3002 CarEvsService EvsHalService ICarEvsService.Stub CarEvsManager \u7ba1\u7406\u8f66\u8f86\u7684EVS\uff08\u589e\u5f3a\u89c6\u89c9\u7cfb\u7edf\uff09\u3002 CarTelemetryService - ICarTelemetryService.Stub CarTelemetryManager \u7ba1\u7406\u8f66\u8f86\u7684\u9065\u6d4b\u6570\u636e\u3002 CarActivityService - ICarActivityService.Stub CarActivityManager \u7ba1\u7406\u8f66\u8f86\u7684\u6d3b\u52a8\u72b6\u6001\u3002 CarOccupantConnectionService - ICarOccupantConnection.Stub CarOccupantConnectionManager \u7ba1\u7406\u8f66\u5185\u4e58\u5ba2\u7684\u8fde\u63a5\u72b6\u6001\u3002 CarRemoteDeviceService - ICarRemoteDevice.Stub CarRemoteDeviceManager \u7ba1\u7406\u8f66\u8f86\u7684\u8fdc\u7a0b\u8bbe\u5907\u8fde\u63a5\u3002 CarWifiService - ICarWifi.Stub CarWifiManager \u7ba1\u7406\u8f66\u8f86\u7684WiFi\u8fde\u63a5\u3002 CarRemoteAccessService - ICarRemoteAccessService.Stub CarRemoteAccessManager \u7ba1\u7406\u8f66\u8f86\u7684\u8fdc\u7a0b\u8bbf\u95ee\u529f\u80fd\u3002 <p>\u5728 Android 15 \u4e2d\uff0c\u6211\u5217\u4e3e\u4e86\u6240\u6709\u7684\u670d\u52a1\u3002\u7531\u4e8e\u76ee\u524d\u5bf9\u8fd9\u4e2a\u6a21\u5757\u8fd8\u4e0d\u719f\u6089\uff0c\u6709\u4e9b\u5bf9\u5e94\u7684 stub \u548c manager \u5c1a\u672a\u627e\u5230\uff0c\u4f46\u6211\u4f1a\u6301\u7eed\u66f4\u65b0\u8fd9\u4e2a\u8868\u683c\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4ece\u5ba2\u6237\u7aef\u7684\u89d2\u5ea6\u5f00\u59cb\u5206\u6790\uff0c\u5982\u4f55\u8c03\u7528\u670d\u52a1\u4e2d\u7684\u63a5\u53e3\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#_2","title":"\u5ba2\u6237\u7aef","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#_3","title":"\u5982\u4f55\u4f7f\u7528","text":"<pre><code>Car car = Car.createCar(mContext);  \nCarPowerManager carPowerManager = (CarPowerManager) car.getCarManager(Car.POWER_SERVICE);  \nint powerState = carPowerManager.getPowerState();\n</code></pre> <p>\u5982\u4e0a\uff0c\u521b\u5efa\u65b0\u7684 <code>Car</code> \u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7 <code>Car</code> \u5bf9\u8c61\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 CarXXXManager\uff0c\u5373\u53ef\u8c03\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u63a5\u53e3\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#carcreatecar","title":"Car.createCar()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/Car.java\n\n/**\n * \u6c7d\u8f66 API\uff0c\u9002\u7528\u4e8e Android Automotive OS \u90e8\u7f72\u3002\n * \u8be5 API \u4ec5\u9002\u7528\u4e8e\u5177\u6709 {@link PackageManager#FEATURE_AUTOMOTIVE} \u7279\u6027\u7684\u8bbe\u5907\u3002\n * \u5728\u4e0d\u5177\u5907\u6b64\u7279\u6027\u7684\u8bbe\u5907\u4e0a\u8c03\u7528\u6b64 API \u5c06\u5bfc\u81f4\u5f02\u5e38\u3002\n */\npublic final class Car implements ICarBase {\n\n    /**\n     * @deprecated \u5efa\u8bae\u4f7f\u7528 {@link #createCar(Context, Handler)}\u3002\n     */\n    @Deprecated\n    public static Car createCar(Context context, ServiceConnection serviceConnectionListener,\n            @Nullable Handler handler) {\n    }\n\n    /**\n     * @deprecated \u5efa\u8bae\u4f7f\u7528 {@link #createCar(Context, Handler)}\u3002\n     */\n    @Deprecated\n    public static Car createCar(Context context, ServiceConnection serviceConnectionListener) {\n    }\n\n    /**\n     * \u521b\u5efa\u65b0\u7684 {@link Car} \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u540c\u6b65\u8fde\u63a5\u5230\u6c7d\u8f66\u670d\u52a1\u5e76\u51c6\u5907\u4f7f\u7528\u3002\n     *\n     * &lt;p&gt;\u4f7f\u7528\u6b64\u65b9\u6cd5\u521b\u5efa\u7684\u5b9e\u4f8b\u5728\u4f20\u5165\u7684 {@code Context} \u91ca\u653e\u4e4b\u524d\uff0c\u5e94\u901a\u8fc7\u8c03\u7528\n     * {@link #disconnect()} \u4ece\u6c7d\u8f66\u670d\u52a1\u65ad\u5f00\u8fde\u63a5\u3002\n     *\n     * @param context \u5e94\u7528\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\n     *\n     * @return \u5982\u679c\u64cd\u4f5c\u6210\u529f\uff0c\u5219\u8fd4\u56de Car \u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de null\u3002\n     */\n    @Nullable\n    public static Car createCar(Context context) {\n        // \u4f7f\u7528 CarBuilder \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Car \u5b9e\u4f8b\n        return new CarBuilder().createCar(context);\n    }\n\n    /**\n     * \u521b\u5efa\u65b0\u7684 {@link Car} \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u540c\u6b65\u8fde\u63a5\u5230\u6c7d\u8f66\u670d\u52a1\u5e76\u51c6\u5907\u4f7f\u7528\u3002\n     *\n     * &lt;p&gt;\u4f7f\u7528\u6b64\u65b9\u6cd5\u521b\u5efa\u7684\u5b9e\u4f8b\u5728\u4f20\u5165\u7684 {@code Context} \u91ca\u653e\u4e4b\u524d\uff0c\u5e94\u901a\u8fc7\u8c03\u7528\n     * {@link #disconnect()} \u4ece\u6c7d\u8f66\u670d\u52a1\u65ad\u5f00\u8fde\u63a5\u3002\n     *\n     * @param context \u4e0d\u80fd\u4e3a {@code null}\u3002\u5982\u679c\u4f20\u5165 {@link ContextWrapper}\uff0c\n     *                \u8bf7\u786e\u4fdd\u5176 {@link ContextWrapper#getBaseContext() base context} \u4e5f\u4e0d\u4e3a {@code null}\u3002\n     *                \u5426\u5219\u5c06\u629b\u51fa {@link java.lang.NullPointerException}\u3002\n     * @param handler \u7528\u4e8e\u6267\u884c\u7ba1\u7406\u5668\u56de\u8c03\u7684\u5904\u7406\u5668\uff0c\u5982\u679c\u4e3a null\uff0c\u5219\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u7ebf\u7a0b\u4e0a\u6267\u884c\u3002\n     *\n     * @return \u5982\u679c\u64cd\u4f5c\u6210\u529f\uff0c\u5219\u8fd4\u56de Car \u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de null\u3002\n     */\n    @Nullable\n    public static Car createCar(Context context, @Nullable Handler handler) {\n        // \u4f7f\u7528 CarBuilder \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Car \u5b9e\u4f8b\uff0c\u5e76\u6307\u5b9a handler\n        return new CarBuilder().createCar(context, handler);\n    }\n\n    /**\n     * \u521b\u5efa\u65b0\u7684 {@link Car} \u5bf9\u8c61\uff0c\u5e76\u9644\u5e26 {@link CarServiceLifecycleListener}\u3002\n     *\n     * &lt;p&gt;\u4f7f\u7528\u6b64\u65b9\u6cd5\u521b\u5efa\u7684\u5b9e\u4f8b\u5728\u4f20\u5165\u7684 {@code Context} \u91ca\u653e\u4e4b\u524d\uff0c\u5e94\u901a\u8fc7\u8c03\u7528\n     * {@link #disconnect()} \u4ece\u6c7d\u8f66\u670d\u52a1\u65ad\u5f00\u8fde\u63a5\u3002\n     *\n     * &lt;p&gt;\u5982\u679c\u5728\u6b64\u8c03\u7528\u4e2d\u6c7d\u8f66\u670d\u52a1\u5df2\u51c6\u5907\u597d\uff0c\u5e76\u4e14\u8c03\u7528\u8005\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\n     * \u5219\u4f1a\u8c03\u7528 {@link CarServiceLifecycleListener#onLifecycleChanged(Car, boolean)}\uff0c\n     * \u5e76\u5c06 ready \u8bbe\u7f6e\u4e3a true\u3002\u5426\u5219\uff0c\u5c06\u7a0d\u540e\u4ece\u4e3b\u7ebf\u7a0b\u8c03\u7528\n     * {@link CarServiceLifecycleListener#onLifecycleChanged(Car, boolean)}\u3002&lt;/p&gt;\n     *\n     * &lt;p&gt;\u6b64\u8c03\u7528\u6700\u591a\u53ef\u4ee5\u963b\u585e\u6307\u5b9a\u7684 waitTimeoutMs \u65f6\u95f4\uff0c\u4ee5\u7b49\u5f85\u6c7d\u8f66\u670d\u52a1\u51c6\u5907\u597d\u3002\n     * \u5982\u679c\u6c7d\u8f66\u670d\u52a1\u672a\u5728\u7ed9\u5b9a\u65f6\u95f4\u5185\u51c6\u5907\u597d\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5904\u4e8e\u65ad\u5f00\u72b6\u6001\u7684 Car \u5b9e\u4f8b\u3002\n     * \u6c38\u4e45\u963b\u585e\u4e3b\u7ebf\u7a0b\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u6740\u6b7b\u5e94\u7528\u7a0b\u5e8f\uff08\u5e94\u7528\u7a0b\u5e8f\u65e0\u54cd\u5e94\uff0cANR\uff09\uff0c\n     * \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5728\u6c7d\u8f66\u670d\u52a1\u5d29\u6e83/\u91cd\u542f\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u5219\u4e0d\u5e94\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\n     * \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728\u6c7d\u8f66\u670d\u52a1\u51c6\u5907\u597d\u4e4b\u524d\u65e0\u6cd5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5b83\u4ecd\u7136\u6709\u7528\u3002\n     * \u5728\u4efb\u4f55\u7b49\u5f85\u4e2d\uff0c\u5982\u679c\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u5b83\u5c06\u7acb\u5373\u8fd4\u56de\u3002&lt;/p&gt;\n     *\n     * &lt;p&gt;\u6ce8\u610f\uff0c\u5f53\u6709\u6709\u9650\u7684\u8d85\u65f6\u65f6\u95f4\u65f6\uff0c\u8fd4\u56de\u7684 {@link Car} \u5bf9\u8c61\u4e0d\u4fdd\u8bc1\u5df2\u8fde\u63a5\u3002\n     * \u65e0\u8bba\u8fd4\u56de\u7684\u6c7d\u8f66\u662f\u5426\u5df2\u8fde\u63a5\uff0c\u5efa\u8bae\u5728\n     * {@link CarServiceLifecycleListener#onLifecycleChanged(Car, boolean)} \u4e2d\u5b9e\u73b0\u6240\u6709\u6c7d\u8f66\u76f8\u5173\u7684\u521d\u59cb\u5316\uff0c\n     * \u5e76\u907f\u514d\u9700\u8981\u68c0\u67e5\u8fd4\u56de\u7684 {@link Car} \u662f\u5426\u5df2\u8fde\u63a5\u3002&lt;/p&gt;\n     *\n     * @param context \u4e0d\u80fd\u4e3a {@code null}\u3002\u5982\u679c\u4f20\u5165 {@link ContextWrapper}\uff0c\n     *                \u8bf7\u786e\u4fdd\u5176 {@link ContextWrapper#getBaseContext() base context} \u4e5f\u4e0d\u4e3a {@code null}\u3002\n     *                \u5426\u5219\u5c06\u629b\u51fa {@link java.lang.NullPointerException}\u3002\n     * @param handler \u5c06\u6240\u6709 Car*Manager \u4e8b\u4ef6\u5206\u6d3e\u5230\u6b64\u5904\u7406\u5668\u3002\n     *                \u4f8b\u5916\u60c5\u51b5\u662f {@link CarServiceLifecycleListener}\uff0c\u5b83\u5c06\u59cb\u7ec8\u5206\u6d3e\u5230\u4e3b\u7ebf\u7a0b\u3002\n     *                \u4f20\u9012 null \u5c06\u5bfc\u81f4\u6240\u6709 Car*Manager \u56de\u8c03\u4e5f\u5206\u6d3e\u5230\u4e3b\u7ebf\u7a0b\u3002\n     * @param waitTimeoutMs \u8bbe\u7f6e\u4e3a {@link #CAR_WAIT_TIMEOUT_DO_NOT_WAIT} \u5c06\u786e\u4fdd API \u6839\u672c\u4e0d\u7b49\u5f85\u6c7d\u8f66\u670d\u52a1\u3002\n     *                      \u8bbe\u7f6e\u4e3a {@link #CAR_WAIT_TIMEOUT_WAIT_FOREVER} \u5c06\u6c38\u8fdc\u963b\u585e\u8c03\u7528\uff0c\u76f4\u5230\u6c7d\u8f66\u670d\u52a1\u51c6\u5907\u597d\u3002\n     *                      \u8bbe\u7f6e\u4efb\u4f55\u6b63\u503c\u5c06\u88ab\u89e3\u91ca\u4e3a\u8d85\u65f6\u65f6\u95f4\u3002\n     */\n    @NonNull\n    public static Car createCar(@NonNull Context context,\n            @Nullable Handler handler, long waitTimeoutMs,\n            @NonNull CarServiceLifecycleListener statusChangeListener) {\n        // \u4f7f\u7528 CarBuilder \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Car \u5b9e\u4f8b\uff0c\u6307\u5b9a handler\u3001\u8d85\u65f6\u65f6\u95f4\u548c\u751f\u547d\u5468\u671f\u76d1\u542c\u5668\n        return new CarBuilder().createCar(context, handler, waitTimeoutMs, statusChangeListener);\n    }\n\n}\n</code></pre> <p>Warning</p> <p><code>createCar(Context, ServiceConnection, Handler)</code> \u548c <code>createCar(Context, ServiceConnection)</code> \u662f\u5df2\u5f03\u7528\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa <code>Car</code> \u5b9e\u4f8b\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528<code>createCar(Context)</code> \u548c <code>createCar(Context, Handler)</code> \u83b7\u53d6\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>createCar(Context, Handler, long, CarServiceLifecycleListener)</code> \u6765\u6307\u5b9a\u7b49\u5f85\u8d85\u65f6\u65f6\u95f4\u548c\u751f\u547d\u5468\u671f\u76d1\u542c\u5668\u3002 \u8fd9\u4e09\u4e2a\u65b9\u6cd5\u6700\u7ec8\u90fd\u662f\u5229\u7528 <code>CarBuilder</code> \u6765\u521b\u5efa <code>Car</code> \u5b9e\u4f8b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#carbuildercreatecar","title":"CarBuilder.createCar()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/Car.java\n\n/**\n * \u6c7d\u8f66 API\uff0c\u9002\u7528\u4e8e Android Automotive OS \u90e8\u7f72\u3002\n * \u8be5 API \u4ec5\u9002\u7528\u4e8e\u5177\u6709 {@link PackageManager#FEATURE_AUTOMOTIVE} \u7279\u6027\u7684\u8bbe\u5907\u3002\n * \u5728\u4e0d\u5177\u5907\u6b64\u7279\u6027\u7684\u8bbe\u5907\u4e0a\u8c03\u7528\u6b64 API \u5c06\u5bfc\u81f4\u5f02\u5e38\u3002\n */\npublic final class Car implements ICarBase {\n\n    /**\n     * \u6ce8\u518c\u5230\u670d\u52a1\u7ba1\u7406\u5668\u7684\u6c7d\u8f66\u670d\u52a1\u7684 Binder \u670d\u52a1\u540d\u79f0\u3002\n     *\n     * @hide\n     */\n    @VisibleForHiddenApiCheck\n    public static final String CAR_SERVICE_BINDER_SERVICE_NAME = \"car_service\";\n\n\n    /**\n     * \u4e00\u4e2a\u5305\u88c5\u7c7b\uff0c\u56f4\u7ed5 {@code createCar} \u51fd\u6570\uff0c\u5141\u8bb8\u5728\u6d4b\u8bd5\u4e2d\u6ce8\u5165\u4f9d\u8d56\u3002\n     *\n     * @hide\n     */\n    @VisibleForTesting\n    public static final class CarBuilder {\n\n        /**\n         * \u6211\u4eec\u5728\u6b64\u7c7b\u4e2d\u8bbf\u95ee\u7684\u670d\u52a1\u7ba1\u7406\u5668\u51fd\u6570\u3002\n         */\n        public interface ServiceManager {\n            /** \u68c0\u67e5 {@link ServiceManager#getService(String)} */\n            IBinder getService(String name);\n        }\n\n        // \u9ed8\u8ba4\u7684\u670d\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0\uff0c\u4f7f\u7528 ServiceManagerHelper \u83b7\u53d6\u670d\u52a1\n        private ServiceManager mServiceManager = new ServiceManager() {\n            @Override\n            public IBinder getService(String name) {\n                return ServiceManagerHelper.getService(name);\n            }\n        };\n\n        /**\n         * \u8bbe\u7f6e\u7528\u4e8e\u6d4b\u8bd5\u7684\u5047\u670d\u52a1\u7ba1\u7406\u5668\u3002\n         */\n        public CarBuilder setServiceManager(ServiceManager serviceManager) {\n            mServiceManager = serviceManager;\n            return this;\n        }\n\n        /**\n         * \u53c2\u89c1 {@link Car#createCar}\u3002\n         */\n        public Car createCar(Context context) {\n            return createCar(context, (Handler) null);\n        }\n\n        /**\n         * \u53c2\u89c1 {@link Car#createCar}\u3002\n         */\n        public Car createCar(Context context, @Nullable Handler handler) {\n            // \u786e\u4fdd context \u4e0d\u4e3a null\n            assertNonNullContext(context);\n            Car car = null;\n            IBinder service = null;\n            boolean started = false;\n            int retryCount = 0;\n            while (true) {\n                // \u5c1d\u8bd5\u83b7\u53d6 car_service\n                service = mServiceManager.getService(CAR_SERVICE_BINDER_SERVICE_NAME);\n                if (car == null) {\n                    // \u5373\u4f7f service \u4e3a\u7a7a\uff0c\u6784\u9020\u51fd\u6570\u4e5f\u662f\u5b89\u5168\u7684\n                    car = new Car(context, ICar.Stub.asInterface(service),\n                            null /*serviceConnectionListener*/, null /*statusChangeListener*/,\n                            handler);\n                }\n                if (service != null) {\n                    if (!started) {  // \u6700\u5e38\u89c1\u7684\u60c5\u51b5\uff1a\u670d\u52a1\u5df2\u51c6\u5907\u597d\n                        car.startCarService();\n                        return car;\n                    }\n                    break;\n                }\n                if (!started) {\n                    car.startCarService();\n                    started = true;\n                }\n                retryCount++;\n                if (retryCount &gt; CAR_SERVICE_BINDER_POLLING_MAX_RETRY) {\n                    Slog.e(TAG_CAR, \"\u65e0\u6cd5\u83b7\u53d6 car_service\uff0c\u7b49\u5f85\u65f6\u95f4\uff08\u6beb\u79d2\uff09:\"\n                                    + CAR_SERVICE_BINDER_POLLING_INTERVAL_MS\n                                    * CAR_SERVICE_BINDER_POLLING_MAX_RETRY,\n                            new RuntimeException());\n                    return null;\n                }\n                try {\n                    Thread.sleep(CAR_SERVICE_BINDER_POLLING_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                    Slog.e(CarLibLog.TAG_CAR, \"\u7b49\u5f85 car_service \u65f6\u88ab\u4e2d\u65ad\",\n                            new RuntimeException());\n                    return null;\n                }\n            }\n            // \u53ef\u4ee5\u4ece\u4e3b\u7ebf\u7a0b\u4e2d\u7684 mServiceConnectionListener \u8bbf\u95ee\n            synchronized (car.mLock) {\n                if (car.mService == null) {\n                    car.mService = ICar.Stub.asInterface(service);\n                    Slog.w(TAG_CAR,\n                            \"\u7b49\u5f85 car_service\uff08\u6beb\u79d2\uff09:\"\n                                    + CAR_SERVICE_BINDER_POLLING_INTERVAL_MS * retryCount,\n                            new RuntimeException());\n                }\n                car.mConnectionState = STATE_CONNECTED;\n            }\n            return car;\n        }\n\n        /**\n         * \u53c2\u89c1 {@link Car#createCar}\u3002\n         */\n        @NonNull\n        public Car createCar(@NonNull Context context,\n                @Nullable Handler handler, long waitTimeoutMs,\n                @NonNull CarServiceLifecycleListener statusChangeListener) {\n            // \u786e\u4fdd context \u548c statusChangeListener \u4e0d\u4e3a null\n            assertNonNullContext(context);\n            Objects.requireNonNull(statusChangeListener);\n            Car car = null;\n            IBinder service = null;\n            boolean started = false;\n            int retryCount = 0;\n            long maxRetryCount = 0;\n            if (waitTimeoutMs &gt; 0) {\n                maxRetryCount = waitTimeoutMs / CAR_SERVICE_BINDER_POLLING_INTERVAL_MS;\n                // \u81f3\u5c11\u7b49\u5f85\u4e00\u6b21\uff0c\u5982\u679c\u5b83\u662f\u6b63\u503c\n                if (maxRetryCount == 0) {\n                    maxRetryCount = 1;\n                }\n            }\n            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();\n            while (true) {\n                // \u5c1d\u8bd5\u83b7\u53d6 car_service\n                service = mServiceManager.getService(CAR_SERVICE_BINDER_SERVICE_NAME);\n                if (car == null) {\n                    // \u5373\u4f7f service \u4e3a\u7a7a\uff0c\u6784\u9020\u51fd\u6570\u4e5f\u662f\u5b89\u5168\u7684\n                    car = new Car(context, ICar.Stub.asInterface(service), null,\n                            statusChangeListener, handler);\n                }\n                if (service != null) {\n                    // \u6700\u5e38\u89c1\u7684\u60c5\u51b5\uff1a\u670d\u52a1\u5df2\u51c6\u5907\u597d\n                    if (!started) {\n                        car.dispatchCarReadyToMainThread(isMainThread);\n                        car.startCarService();\n                        return car;\n                    }\n                    break;\n                }\n                if (!started) {\n                    car.startCarService();\n                    started = true;\n                }\n                retryCount++;\n                if (waitTimeoutMs &lt; 0 &amp;&amp; retryCount &gt;= CAR_SERVICE_BINDER_POLLING_MAX_RETRY\n                        &amp;&amp; retryCount % CAR_SERVICE_BINDER_POLLING_MAX_RETRY == 0) {\n                    Slog.w(TAG_CAR, \"car_service \u672a\u51c6\u5907\u597d\uff0c\u7b49\u5f85\u65f6\u95f4\uff08\u6beb\u79d2\uff09:\"\n                                    + retryCount * CAR_SERVICE_BINDER_POLLING_INTERVAL_MS,\n                            new RuntimeException());\n                } else if (waitTimeoutMs &gt;= 0 &amp;&amp; retryCount &gt; maxRetryCount) {\n                    if (waitTimeoutMs &gt; 0) {\n                        Slog.w(TAG_CAR, \"car_service \u672a\u51c6\u5907\u597d\uff0c\u7b49\u5f85\u65f6\u95f4\uff08\u6beb\u79d2\uff09:\"\n                                        + waitTimeoutMs,\n                                new RuntimeException());\n                    }\n                    return car;\n                }\n\n                try {\n                    Thread.sleep(CAR_SERVICE_BINDER_POLLING_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    Slog.w(TAG_CAR, \"\u4e2d\u65ad\", new RuntimeException());\n                    return car;\n                }\n            }\n            // \u53ef\u4ee5\u4ece\u4e3b\u7ebf\u7a0b\u4e2d\u7684 mServiceConnectionListener \u8bbf\u95ee\n            synchronized (car.mLock) {\n                Slog.w(TAG_CAR,\n                        \"\u7b49\u5f85 car_service\uff08\u6beb\u79d2\uff09:\"\n                                + retryCount * CAR_SERVICE_BINDER_POLLING_INTERVAL_MS,\n                        new RuntimeException());\n                if (car.mService != null) {\n                    return car;\n                }\n                car.mService = ICar.Stub.asInterface(service);\n                car.mConnectionState = STATE_CONNECTED;\n            }\n            car.dispatchCarReadyToMainThread(isMainThread);\n            return car;\n        }\n    }\n}\n</code></pre> <p><code>CarBuilder</code> \u662f\u4e00\u4e2a\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa <code>Car</code> \u5b9e\u4f8b\u3002\u63d0\u4f9b\u4e86\u591a\u79cd <code>**createCar**</code> \u91cd\u8f7d\u65b9\u6cd5\u6765\u521b\u5efa <code>Car</code> \u5b9e\u4f8b\u3002 \u5982\u679c\u670d\u52a1\u4e0d\u53ef\u7528\uff0c\u65b9\u6cd5\u4f1a\u91cd\u8bd5\u591a\u6b21\uff0c\u76f4\u5230\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u6216\u670d\u52a1\u53ef\u7528\uff1b\u5982\u679c\u670d\u52a1\u5728\u91cd\u8bd5\u540e\u4ecd\u4e0d\u53ef\u7528\uff0c\u65b9\u6cd5\u5c06\u8fd4\u56de <code>null</code> \u6216\u90e8\u5206\u521d\u59cb\u5316\u7684 <code>Car</code> \u5b9e\u4f8b\u3002</p> <p>\u8fd9\u91cc\u901a\u8fc7 ServiceManager \u83b7\u53d6\u7684 CAR_SERVICE_BINDER_SERVICE_NAME \u4e5f\u5c31\u662f<code>car_service</code> \uff0c\u5728\u524d\u9762\u7684 CarServiceImpl.onCreate() \u51fd\u6570\u91cc\u6709\u63d0\u5230\u8fc7\uff1a\u5c06<code>ICarImpl</code>\u5bf9\u8c61\u6dfb\u52a0\u4e3a\u7cfb\u7edf\u670d\u52a1\uff0c\u670d\u52a1\u540d\u79f0\u4e3a<code>\"car_service\"</code>\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\u8bbf\u95ee\u3002</p> <p>\u67e5\u627e\u5230\u670d\u52a1\u540e\u5c06 <code>IBinder</code> \u5bf9\u8c61\u8f6c\u6362\u4e3a <code>ICar</code> \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u5e76\u8d4b\u7ed9<code>mService</code> \u3002 \u540c\u65f6\u8bbe\u7f6e mConnectionState \u4e3a\u8fde\u63a5\u72b6\u6001\u3002</p> <pre><code>car.mService = ICar.Stub.asInterface(service);  \ncar.mConnectionState = STATE_CONNECTED;\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#cargetcarmanager","title":"Car.getCarManager()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/Car.java\n\npublic final class Car implements ICarBase {\n\n    /**\n     * \u83b7\u53d6\u7279\u5b9a\u4e8e\u6c7d\u8f66\u7684\u670d\u52a1\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e {@link Context#getSystemService(String)}\u3002\n     * \u8fd4\u56de\u7684 {@link Object} \u5e94\u8be5\u88ab\u5f3a\u5236\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u670d\u52a1\u7ba1\u7406\u5668\u7c7b\u578b\u3002\n     *\n     * &lt;p&gt;\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u4f20\u611f\u5668\u670d\u52a1\u7684\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a\n     * &lt;code&gt;\n     * CarSensorManager carSensorManager = (CarSensorManager) car.getCarManager(Car.SENSOR_SERVICE);\n     * &lt;/code&gt;\n     *\n     * @param serviceName \u5e94\u521b\u5efa\u7684\u670d\u52a1\u540d\u79f0\uff0c\u4f8b\u5982 {@link #SENSOR_SERVICE}\u3002\n     * @return \u5339\u914d\u7684\u670d\u52a1\u7ba1\u7406\u5668\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u5219\u8fd4\u56de null\u3002\n     */\n    @Nullable\n    public Object getCarManager(String serviceName) {\n        CarManagerBase manager;\n        synchronized (mLock) { // \u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff0c\u9501\u5b9a mLock\n            if (mService == null) { // \u68c0\u67e5\u6c7d\u8f66\u670d\u52a1\u662f\u5426\u5df2\u51c6\u5907\u597d\n                Slog.w(TAG_CAR, \"\u5728\u6c7d\u8f66\u670d\u52a1\u672a\u51c6\u5907\u597d\u65f6 getCarManager \u65e0\u6cd5\u5de5\u4f5c\");\n                return null;\n            }\n            manager = mServiceMap.get(serviceName); // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u670d\u52a1\u7ba1\u7406\u5668\n            if (manager == null) { // \u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\uff0c\u5219\u5c1d\u8bd5\u521b\u5efa\u65b0\u7684\u670d\u52a1\u7ba1\u7406\u5668\n                try {\n                    IBinder binder = mService.getCarService(serviceName); // \u83b7\u53d6\u670d\u52a1\u7684 IBinder\n                    if (binder == null) { // \u5982\u679c\u6ca1\u6709\u83b7\u53d6\u5230 IBinder\uff0c\u8bb0\u5f55\u8b66\u544a\u5e76\u8fd4\u56de null\n                        Slog.w(TAG_CAR, \"getCarManager \u65e0\u6cd5\u83b7\u53d6\u670d\u52a1\u7684 binder\uff1a\" + serviceName);\n                        return null;\n                    }\n                    manager = createCarManagerLocked(serviceName, binder); // \u521b\u5efa\u65b0\u7684\u670d\u52a1\u7ba1\u7406\u5668\n                    if (manager == null) { // \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u8bb0\u5f55\u8b66\u544a\u5e76\u8fd4\u56de null\n                        Slog.w(TAG_CAR, \"getCarManager \u65e0\u6cd5\u4e3a\u670d\u52a1\u521b\u5efa\u7ba1\u7406\u5668\uff1a\" + serviceName);\n                        return null;\n                    }\n                    mServiceMap.put(serviceName, manager); // \u5c06\u521b\u5efa\u7684\u7ba1\u7406\u5668\u653e\u5165\u7f13\u5b58\n                } catch (RemoteException e) { // \u5904\u7406\u8fdc\u7a0b\u5f02\u5e38\n                    handleRemoteExceptionFromCarService(e);\n                }\n            }\n        }\n        return manager; // \u8fd4\u56de\u670d\u52a1\u7ba1\u7406\u5668\n    }\n\n    /**\n     * \u901a\u8fc7\u7c7b\u83b7\u53d6\u7279\u5b9a\u4e8e\u6c7d\u8f66\u7684\u670d\u52a1\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e {@link Context#getSystemService(Class&lt;T&gt;)}\u3002\n     * \u8fd4\u56de\u6240\u9700\u7684\u670d\u52a1\uff0c\u4e0d\u9700\u8981\u7c7b\u578b\u8f6c\u6362\u3002\n     *\n     * &lt;p&gt;\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u4f20\u611f\u5668\u670d\u52a1\u7684\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a\n     * &lt;code&gt;CarSensorManager carSensorManager = car.getCarManager(CarSensorManager.class);&lt;/code&gt;\n     *\n     * @param serviceClass \u6240\u9700\u670d\u52a1\u7684\u7c7b\u3002\n     * @return \u5339\u914d\u7684\u670d\u52a1\u7ba1\u7406\u5668\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u5219\u8fd4\u56de {@code null}\u3002\n     */\n    @Nullable\n    public &lt;T&gt; T getCarManager(@NonNull Class&lt;T&gt; serviceClass) {\n        String serviceName = CAR_SERVICE_NAMES.get(serviceClass); // \u83b7\u53d6\u670d\u52a1\u540d\u79f0\n        return serviceName != null ? (T) getCarManager(serviceName) : null; // \u8fd4\u56de\u670d\u52a1\u7ba1\u7406\u5668\n    }\n}\n</code></pre> <p>\u5728\u83b7\u53d6\u7279\u5b9a\u4e8e\u6c7d\u8f66\u7684\u670d\u52a1\u7ba1\u7406\u5668\u65f6\uff0c\u7531\u4e8e <code>mServiceMap</code> \u4ec5\u5728 <code>getCarManager()</code> \u51fd\u6570\u4e2d\u6267\u884c <code>put</code> \u64cd\u4f5c\uff0c\u56e0\u6b64\u7b2c\u4e00\u6b21\u83b7\u53d6\u65f6 <code>manager</code> \u901a\u5e38\u4e3a\u7a7a\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c<code>mService</code> \u5b9e\u9645\u4e0a\u662f <code>ICar</code> \u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u5373 <code>ICarImpl</code>\u3002\u56e0\u6b64\uff0c\u5728\u5206\u6790\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u7684\u662f <code>getCarService()</code> \u548c <code>createCarManagerLocked</code> \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#icarimplgetcarservice","title":"ICarImpl.getCarService()","text":"<p>Warning</p> <p>\u8fd9\u91cc\u5df2\u7ecf\u8d70\u5230 CarService \u670d\u52a1\u8fdb\u7a0b\u4e86\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\npublic class ICarImpl extends ICar.Stub {\n\n    /**\n     * \u6839\u636e\u670d\u52a1\u540d\u79f0\u83b7\u53d6\u5bf9\u5e94\u7684 Binder \u5bf9\u8c61\u3002\n     *\n     * @param serviceName \u8981\u83b7\u53d6\u7684\u670d\u52a1\u540d\u79f0\u3002\n     * @return \u5bf9\u5e94\u670d\u52a1\u7684 IBinder \u5bf9\u8c61\uff0c\u5982\u679c\u670d\u52a1\u4e0d\u53ef\u7528\u6216\u672a\u542f\u7528\uff0c\u5219\u8fd4\u56de null\u3002\n     */\n    public IBinder getCarService(String serviceName) {\n        // \u68c0\u67e5\u670d\u52a1\u662f\u5426\u542f\u7528\n        if (!mFeatureController.isFeatureEnabled(serviceName)) {\n            Slogf.w(CarLog.TAG_SERVICE, \"\u5c1d\u8bd5\u83b7\u53d6\u5df2\u7981\u7528\u7684\u670d\u52a1\uff1a\" + serviceName);\n            return null;\n        }\n        // \u6839\u636e\u670d\u52a1\u540d\u79f0\u8fd4\u56de\u5bf9\u5e94\u7684 Binder \u5bf9\u8c61\n        switch (serviceName) {\n            case Car.AUDIO_SERVICE:\n                return mCarAudioService;\n            case Car.APP_FOCUS_SERVICE:\n                return mAppFocusService;\n            case Car.PACKAGE_SERVICE:\n                return mCarPackageManagerService;\n            case Car.DIAGNOSTIC_SERVICE:\n                CarServiceUtils.assertAnyDiagnosticPermission(mContext);\n                return mCarDiagnosticService;\n            case Car.POWER_SERVICE:\n                return mCarPowerManagementService;\n            case Car.CABIN_SERVICE:\n            case Car.HVAC_SERVICE:\n            case Car.INFO_SERVICE:\n            case Car.PROPERTY_SERVICE:\n            case Car.SENSOR_SERVICE:\n            case Car.VENDOR_EXTENSION_SERVICE:\n                return mCarPropertyService;\n            case Car.CAR_NAVIGATION_SERVICE:\n                CarServiceUtils.assertNavigationManagerPermission(mContext);\n                return mClusterNavigationService;\n            case Car.CAR_INSTRUMENT_CLUSTER_SERVICE:\n                CarServiceUtils.assertClusterManagerPermission(mContext);\n                return mInstrumentClusterService.getManagerService();\n            case Car.PROJECTION_SERVICE:\n                return mCarProjectionService;\n            case Car.VEHICLE_MAP_SERVICE:\n                CarServiceUtils.assertAnyVmsPermission(mContext);\n                return mVmsBrokerService;\n            case Car.VMS_SUBSCRIBER_SERVICE:\n                CarServiceUtils.assertVmsSubscriberPermission(mContext);\n                return mVmsBrokerService;\n            case Car.TEST_SERVICE: {\n                CarServiceUtils.assertPermission(mContext, Car.PERMISSION_CAR_TEST_SERVICE);\n                synchronized (mLock) {\n                    if (mCarTestService == null) {\n                        mCarTestService = new CarTestService(mContext, this);\n                    }\n                    return mCarTestService;\n                }\n            }\n            case Car.STORAGE_MONITORING_SERVICE:\n                CarServiceUtils.assertPermission(mContext, Car.PERMISSION_STORAGE_MONITORING);\n                return mCarStorageMonitoringService;\n            case Car.CAR_DRIVING_STATE_SERVICE:\n                CarServiceUtils.assertDrivingStatePermission(mContext);\n                return mCarDrivingStateService;\n            case Car.CAR_UX_RESTRICTION_SERVICE:\n                return mCarUXRestrictionsService;\n            case Car.OCCUPANT_AWARENESS_SERVICE:\n                return mOccupantAwarenessService;\n            case Car.CAR_MEDIA_SERVICE:\n                return mCarMediaService;\n            case Car.CAR_OCCUPANT_ZONE_SERVICE:\n                return mCarOccupantZoneService;\n            case Car.CAR_BUGREPORT_SERVICE:\n                return mCarBugreportManagerService;\n            case Car.CAR_USER_SERVICE:\n                return mCarUserService;\n            case Car.EXPERIMENTAL_CAR_USER_SERVICE:\n                return mExperimentalCarUserService;\n            case Car.EXPERIMENTAL_CAR_KEYGUARD_SERVICE:\n                return mExperimentalCarKeyguardService;\n            case Car.CAR_WATCHDOG_SERVICE:\n                return mCarWatchdogService;\n            case Car.CAR_PERFORMANCE_SERVICE:\n                return mCarPerformanceService;\n            case Car.CAR_INPUT_SERVICE:\n                return mCarInputService;\n            case Car.CAR_DEVICE_POLICY_SERVICE:\n                return mCarDevicePolicyService;\n            case Car.CLUSTER_HOME_SERVICE:\n                return mClusterHomeService;\n            case Car.CAR_EVS_SERVICE:\n                return mCarEvsService;\n            case Car.CAR_TELEMETRY_SERVICE:\n                return mCarTelemetryService;\n            case Car.CAR_ACTIVITY_SERVICE:\n                return mCarActivityService;\n            case Car.CAR_OCCUPANT_CONNECTION_SERVICE:\n                return mCarOccupantConnectionService;\n            case Car.CAR_REMOTE_DEVICE_SERVICE:\n                return mCarRemoteDeviceService;\n            case Car.CAR_REMOTE_ACCESS_SERVICE:\n                return mCarRemoteAccessService;\n            default:\n                // CarDisplayCompatManager \u4e0d\u9700\u8981\u65b0\u7684\u670d\u52a1\uff0c\u4f46 Car \u7c7b\u4e0d\u5141\u8bb8\u6ca1\u6709\u670d\u52a1\u7684\u65b0 Manager \u7c7b\u3002\n                if (mFeatureFlags.displayCompatibility()) {\n                    if (serviceName.equals(CAR_DISPLAY_COMPAT_SERVICE)) {\n                        return mCarActivityService;\n                    }\n                }\n                if (mFeatureFlags.persistApSettings()) {\n                    if (serviceName.equals(Car.CAR_WIFI_SERVICE)) {\n                        return mCarWifiService;\n                    }\n                }\n                IBinder service = null;\n                if (mCarExperimentalFeatureServiceController != null) {\n                    service = mCarExperimentalFeatureServiceController.getCarService(serviceName);\n                }\n                if (service == null) {\n                    Slogf.w(CarLog.TAG_SERVICE, \"\u5c1d\u8bd5\u83b7\u53d6\u672a\u77e5\u670d\u52a1\uff1a\" + serviceName);\n                }\n                return service;\n        }\n    }\n}\n</code></pre> <p><code>getCarService</code> \u65b9\u6cd5\u7528\u4e8e\u6839\u636e\u670d\u52a1\u540d\u79f0\u8fd4\u56de\u5bf9\u5e94\u7684 <code>IBinder</code> \u5bf9\u8c61\u3002<code>IBinder</code> \u662f Android \u4e2d\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5b9e\u73b0\u670d\u52a1\u7684\u7ed1\u5b9a\u548c\u8c03\u7528\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f20\u5165 <code>Car.POWER_SERVICE</code> \u65f6\uff0c\u65b9\u6cd5\u4f1a\u8fd4\u56de <code>mCarPowerManagementService</code>\uff0c\u5373 <code>ICarPower</code> \u5bf9\u8c61\u3002</p> <pre><code>public class CarPowerManagementService extends ICarPower.Stub {\n}\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#carcreatecarmanagerlocked","title":"Car.createCarManagerLocked()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/Car.java\npublic final class Car implements ICarBase {\n\n    /**\n     * \u6839\u636e\u670d\u52a1\u540d\u79f0\u548c IBinder \u521b\u5efa\u5bf9\u5e94\u7684 CarManagerBase \u5b9e\u4f8b\u3002\n     *\n     * @param serviceName \u670d\u52a1\u540d\u79f0\uff0c\u7528\u4e8e\u786e\u5b9a\u8981\u521b\u5efa\u7684\u7ba1\u7406\u5668\u7c7b\u578b\u3002\n     * @param binder \u670d\u52a1\u7684 IBinder \u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e\u670d\u52a1\u8fdb\u884c\u901a\u4fe1\u3002\n     * @return \u521b\u5efa\u7684 CarManagerBase \u5b9e\u4f8b\uff0c\u5982\u679c\u670d\u52a1\u540d\u79f0\u672a\u77e5\u6216\u65e0\u6cd5\u521b\u5efa\uff0c\u5219\u8fd4\u56de null\u3002\n     */\n    @Nullable\n    private CarManagerBase createCarManagerLocked(String serviceName, IBinder binder) {\n        CarManagerBase manager = null;\n        switch (serviceName) {\n            case AUDIO_SERVICE:\n                manager = new CarAudioManager(this, binder);\n                break;\n            case SENSOR_SERVICE:\n                manager = new CarSensorManager(this, binder);\n                break;\n            case INFO_SERVICE:\n                manager = new CarInfoManager(this, binder);\n                break;\n            case APP_FOCUS_SERVICE:\n                manager = new CarAppFocusManager(this, binder);\n                break;\n            case PACKAGE_SERVICE:\n                manager = new CarPackageManager(this, binder);\n                break;\n            case CAR_OCCUPANT_ZONE_SERVICE:\n                manager = new CarOccupantZoneManager(this, binder);\n                break;\n            case CAR_NAVIGATION_SERVICE:\n                manager = new CarNavigationStatusManager(this, binder);\n                break;\n            case CABIN_SERVICE:\n                manager = new CarCabinManager(this, binder);\n                break;\n            case DIAGNOSTIC_SERVICE:\n                manager = new CarDiagnosticManager(this, binder);\n                break;\n            case HVAC_SERVICE:\n                manager = new CarHvacManager(this, binder);\n                break;\n            case POWER_SERVICE:\n                manager = new CarPowerManager(this, binder);\n                break;\n            case PROJECTION_SERVICE:\n                manager = new CarProjectionManager(this, binder);\n                break;\n            case PROPERTY_SERVICE:\n                // \u4f7f\u7528 ICarProperty.Stub.asInterface \u5c06 binder \u8f6c\u6362\u4e3a ICarProperty \u63a5\u53e3\n                manager = new CarPropertyManager(this, ICarProperty.Stub.asInterface(binder));\n                break;\n            case VENDOR_EXTENSION_SERVICE:\n                manager = new CarVendorExtensionManager(this, binder);\n                break;\n            case CAR_INSTRUMENT_CLUSTER_SERVICE:\n                manager = new CarInstrumentClusterManager(this, binder);\n                break;\n            case TEST_SERVICE:\n                // CarTestManager \u5b58\u5728\u4e8e\u9759\u6001\u5e93\u4e2d\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u4f20\u9012 binder \u5305\u88c5\u5668\uff0c\u4ee5\u4fbf\u5728\u5916\u90e8\u6784\u9020 CarTestManager\n                manager = new CarTestManager(this, binder);\n                break;\n            case VEHICLE_MAP_SERVICE:\n                manager = new VmsClientManager(this, binder);\n                break;\n            case VMS_SUBSCRIBER_SERVICE:\n                // \u4f7f\u7528 VmsSubscriberManager \u5305\u88c5 VmsClientManager\n                manager = VmsSubscriberManager.wrap(this,\n                        (VmsClientManager) getCarManager(VEHICLE_MAP_SERVICE));\n                break;\n            case STORAGE_MONITORING_SERVICE:\n                manager = new CarStorageMonitoringManager(this, binder);\n                break;\n            case CAR_DRIVING_STATE_SERVICE:\n                manager = new CarDrivingStateManager(this, binder);\n                break;\n            case CAR_UX_RESTRICTION_SERVICE:\n                manager = new CarUxRestrictionsManager(this, binder);\n                break;\n            case OCCUPANT_AWARENESS_SERVICE:\n                manager = new OccupantAwarenessManager(this, binder);\n                break;\n            case CAR_MEDIA_SERVICE:\n                manager = new CarMediaManager(this, binder);\n                break;\n            case CAR_BUGREPORT_SERVICE:\n                manager = new CarBugreportManager(this, binder);\n                break;\n            case CAR_USER_SERVICE:\n                manager = new CarUserManager(this, binder);\n                break;\n            case EXPERIMENTAL_CAR_USER_SERVICE:\n                manager = new ExperimentalCarUserManager(this, binder);\n                break;\n            case CAR_WATCHDOG_SERVICE:\n                manager = new CarWatchdogManager(this, binder);\n                break;\n            case CAR_INPUT_SERVICE:\n                manager = new CarInputManager(this, binder);\n                break;\n            case CAR_DEVICE_POLICY_SERVICE:\n                manager = new CarDevicePolicyManager(this, binder);\n                break;\n            case CLUSTER_HOME_SERVICE:\n                manager = new ClusterHomeManager(this, binder);\n                break;\n            case CAR_EVS_SERVICE:\n                manager = new CarEvsManager(this, binder, /* featureFlags= */ null);\n                break;\n            case CAR_TELEMETRY_SERVICE:\n                manager = new CarTelemetryManager(this, binder);\n                break;\n            case CAR_ACTIVITY_SERVICE:\n                manager = new CarActivityManager(this, binder);\n                break;\n            case CAR_PERFORMANCE_SERVICE:\n                manager = new CarPerformanceManager(this, binder);\n                break;\n            case CAR_REMOTE_ACCESS_SERVICE:\n                manager = new CarRemoteAccessManager(this, binder);\n                break;\n            case CAR_OCCUPANT_CONNECTION_SERVICE:\n                manager = new CarOccupantConnectionManager(this, binder);\n                break;\n            case CAR_REMOTE_DEVICE_SERVICE:\n                manager = new CarRemoteDeviceManager(this, binder);\n                break;\n            default:\n                // \u5904\u7406\u5b9e\u9a8c\u6027\u6216\u4e0d\u5b58\u5728\u7684\u670d\u52a1\n                if (Flags.displayCompatibility()) {\n                    if (serviceName.equals(CAR_DISPLAY_COMPAT_SERVICE)) {\n                        manager = new CarDisplayCompatManager(this, binder);\n                        break;\n                    }\n                }\n                if (Flags.persistApSettings()) {\n                    if (serviceName.equals(CAR_WIFI_SERVICE)) {\n                        manager = new CarWifiManager(this, binder);\n                        break;\n                    }\n                }\n                String className = null;\n                try {\n                    synchronized (mLock) {\n                        className = mService.getCarManagerClassForFeature(serviceName);\n                    }\n                } catch (RemoteException e) {\n                    handleRemoteExceptionFromCarService(e);\n                    return null;\n                }\n                if (className == null) {\n                    Slog.e(TAG_CAR, \"\u65e0\u6cd5\u4e3a\u670d\u52a1\u6784\u5efa CarManager\uff1a\" + serviceName + \" : \u672a\u5b9a\u4e49\u7c7b\");\n                    return null;\n                }\n                manager = constructCarManager(className, binder);\n                break;\n        }\n        return manager;\n    }\n}\n</code></pre> <p>\u6839\u636e\u4f20\u5165\u7684\u670d\u52a1\u540d\u79f0\u548c <code>IBinder</code> \u5bf9\u8c61\uff0c\u521b\u5efa\u76f8\u5e94\u7684 <code>CarManagerBase</code> \u5b9e\u4f8b\u3002</p> <p>\u4ee5 <code>Car.POWER_SERVICE</code> \u4e3a\u4f8b\uff0c\u521b\u5efa <code>manager</code> \u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>manager = new CarPowerManager(this, binder);\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>binder</code> \u5b9e\u9645\u4e0a\u662f <code>ICarPower</code> \u63a5\u53e3\u7684\u5b9e\u73b0\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#carpowermanagergetpowerstate","title":"CarPowerManager.getPowerState()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/hardware/power/CarPowerManager.java\n\n\n/**\n * \u7528\u4e8e\u63a5\u6536\u7535\u6e90\u7b56\u7565\u66f4\u6539\u901a\u77e5\u7684 API\u3002\n */\npublic class CarPowerManager extends CarManagerBase {\n\n    // ICarPower \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u7535\u6e90\u670d\u52a1\u8fdb\u884c\u901a\u4fe1\n    private final ICarPower mService;\n\n    /**\n     * \u83b7\u53d6 CarPowerManager \u7684\u5b9e\u4f8b\u3002\n     *\n     * &lt;p&gt;\u4e0d\u5e94\u7531\u5ba2\u6237\u7aef\u76f4\u63a5\u83b7\u53d6\uff0c\u800c\u5e94\u4f7f\u7528 {@link Car#getCarManager(String)}\u3002\n     *\n     * @hide\n     */\n    public CarPowerManager(Car car, IBinder service) {\n        super(car); // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165 Car \u5b9e\u4f8b\n        // \u5c06 IBinder \u8f6c\u6362\u4e3a ICarPower \u63a5\u53e3\n        mService = ICarPower.Stub.asInterface(service);\n    }\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7684\u7535\u6e90\u72b6\u6001\u3002\n     *\n     * @return \u5728 {@link CarPowerStateListener} \u4e2d\u5b9a\u4e49\u7684\u503c\u4e4b\u4e00\u3002\n     *\n     * @hide\n     */\n    @SystemApi\n    @RequiresPermission(Car.PERMISSION_CAR_POWER)\n    public @CarPowerState int getPowerState() {\n        try {\n            // \u8c03\u7528 ICarPower \u63a5\u53e3\u7684\u65b9\u6cd5\u83b7\u53d6\u7535\u6e90\u72b6\u6001\n            return mService.getPowerState();\n        } catch (RemoteException e) {\n            // \u5904\u7406\u8fdc\u7a0b\u5f02\u5e38\uff0c\u5e76\u8fd4\u56de\u65e0\u6548\u72b6\u6001\n            return handleRemoteExceptionFromCarService(e, STATE_INVALID);\n        }\n    }\n}\n</code></pre> <p>\u901a\u8fc7 <code>IPC</code> \u8c03\u7528\u670d\u52a1\u7684 <code>getPowerState()</code> \u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#_4","title":"\u670d\u52a1\u7aef","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#carpowermanagementservicegetpowerstate","title":"CarPowerManagementService.getPowerState()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/power/CarPowerManagementService.java\n\n/**\n * \u6c7d\u8f66\u7684\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u7c7b\u3002\u63a7\u5236\u7535\u6e90\u72b6\u6001\u5e76\u4e0e\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u4ea4\u4e92\u4ee5\u786e\u4fdd\u5176\u81ea\u8eab\u72b6\u6001\u3002\n */\npublic class CarPowerManagementService extends ICarPower.Stub implements\n        CarServiceBase, PowerHalService.PowerEventListener {\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7684\u7535\u6e90\u72b6\u6001\u3002\n     *\n     * @return \u5728 {@link CarPowerManager.CarPowerState} \u4e2d\u5b9a\u4e49\u7684\u7535\u6e90\u72b6\u6001\u3002\n     */\n    @Override\n    public @CarPowerManager.CarPowerState int getPowerState() {\n        // \u786e\u4fdd\u8c03\u7528\u8005\u5177\u6709\u7535\u6e90\u6743\u9650\n        CarServiceUtils.assertPermission(mContext, Car.PERMISSION_CAR_POWER);\n        synchronized (mLock) { // \u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff0c\u9501\u5b9a mLock\n            // \u5982\u679c\u5f53\u524d\u72b6\u6001\u4e3a null\uff0c\u5219\u8fd4\u56de\u65e0\u6548\u72b6\u6001\uff1b\u5426\u5219\u8fd4\u56de\u5f53\u524d\u7684\u7535\u6e90\u72b6\u6001\n            return (mCurrentState == null) ? CarPowerManager.STATE_INVALID\n                    : mCurrentState.mCarPowerStateListenerState;\n        }\n    }\n}\n</code></pre> <p><code>CarPowerManagementService</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u7ba1\u7406\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u7684\u670d\u52a1\u7c7b\u3002\u7ee7\u627f\u81ea <code>ICarPower.Stub</code> \u5e76\u5b9e\u73b0\u76f8\u5173\u7684\u63a5\u53e3\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u72b6\u6001\u4fe1\u606f\u6765\u6e90\u4e8e <code>PowerHalService</code>\u3002\u7136\u800c\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u7684\u91cd\u70b9\u5728\u4e8e\u5206\u6790\u5ba2\u6237\u7aef\u5982\u4f55\u8c03\u7528\u5230 Java \u670d\u52a1\u7aef\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4e0d\u518d\u6df1\u5165\u63a2\u8ba8\u72b6\u6001\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/all-service/#_5","title":"\u540e\u7eed","text":"<p>\u901a\u8fc7\u4e09\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u4e86\u670d\u52a1\u8fdb\u7a0b\u7684\u542f\u52a8\u3001\u670d\u52a1\u7684\u521d\u59cb\u5316\u3001\u670d\u52a1\u5217\u8868\u7684\u4f7f\u7528\u4ee5\u53ca\u5ba2\u6237\u7aef\u5982\u4f55\u8c03\u7528\u670d\u52a1\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u5bf9 CarService \u670d\u52a1\u6709\u4e86\u4e00\u4e2a\u521d\u6b65\u7684\u4e86\u89e3\u3002\u5728\u8fdb\u4e00\u6b65\u6df1\u5165\u5206\u6790\u6bcf\u4e2a\u670d\u52a1\u7684\u5177\u4f53\u529f\u80fd\u3001\u63a5\u53e3\u8bbe\u8ba1\u53ca\u5176\u5b9e\u73b0\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u7528\u4e00\u7bc7\u6587\u7ae0\u6df1\u5165\u63a2\u8ba8 CarService \u5982\u4f55\u8c03\u7528 Vehicle HAL \u4ee5\u53ca\u5982\u4f55\u63a5\u6536 Vehicle HAL \u7684\u56de\u8c03\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/","title":"Android 15 CarService\u6e90\u780104-CarService\u4e0eVehicle HAL\u4ea4\u4e92","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_1","title":"\u80cc\u666f","text":"<p>\u5728 Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u4e2d\uff0c\u6211\u4eec\u4ec5\u7b80\u5355\u63d0\u5230\u901a\u8fc7\u8c03\u7528\u00a0<code>vehicle.newSubscriptionClient(this)</code>\u00a0\u6765\u8ba2\u9605\u4e8b\u4ef6\u56de\u8c03\uff0c\u4f46\u5e76\u672a\u8be6\u7ec6\u8bf4\u660e\u5176\u64cd\u4f5c\u8fc7\u7a0b\u3002\u6b64\u5916\uff0c\u5728\u00a0<code>CarServiceImpl.onCreate()</code>\u00a0\u4e2d\u521b\u5efa\u4e86\u00a0<code>VehicleStub</code>\uff0c\u5373\u00a0<code>AidlVehicleStub</code>\uff0c\u800c\u5728\u00a0<code>ICarImpl</code>\u4e2d\u53c8\u521b\u5efa\u4e86<code>VehicleHal</code>\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u4ec0\u4e48\uff1f\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u89e3\u91ca CarService \u5982\u4f55\u8c03\u7528 Vehicle HAL \u4ee5\u53ca\u5982\u4f55\u63a5\u6536 Vehicle HAL \u7684\u56de\u8c03\uff0c\u540c\u65f6\u68b3\u7406<code>VehicleStub</code>\u3001<code>AidlVehicleStub</code>\u3001<code>VehicleHal</code> \u7b49\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_2","title":"\u63a5\u53e3","text":"<p><code>VehicleStub</code>\u00a0\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5176\u5177\u4f53\u5b9e\u73b0\u662f\u00a0<code>AidlVehicleStub</code>\u3002<code>AidlVehicleStub</code>\u00a0\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u8fdb\u884c\u901a\u4fe1\u3002\u5728\u5206\u6790\u00a0<code>AidlVehicleStub</code>\u00a0\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3\u00a0<code>VehicleStub</code>\u00a0\u62bd\u8c61\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u54ea\u4e9b\u63a5\u53e3\u3002</p> <p>\u6211\u4eec\u56de\u987e Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u00a0<code>IVehicle.aidl</code>\u00a0\u548c\u00a0<code>IVehicleCallback.aidl</code>\u00a0\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u6784\u6210\u4e86 Vehicle HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u4e3a\u5176\u4ed6\u5ba2\u6237\u7aef\uff08\u5982 CarService\uff09\u63d0\u4f9b\u7684\u63a5\u53e3\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#ivehicleaidl","title":"IVehicle.aidl","text":"<pre><code>// hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicle.aidl\n\n// Vehicle HAL \u63a5\u53e3\uff0c\u5b9a\u4e49\u4e86\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002  \n@VintfStability  \ninterface IVehicle {  \n    /* \u4e00\u4e2a\u65e0\u6548\u7684\u5185\u5b58 ID\uff0c\u7528\u4e8e\u6807\u8bc6\u65e0\u6548\u7684\u5171\u4eab\u5185\u5b58\u3002 */\n    const long INVALID_MEMORY_ID = 0;\n\n    /* \u6bcf\u4e2a\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u6700\u5927\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\uff0c\u9650\u5236\u4e86\u6bcf\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u3002 */\n    const int MAX_SHARED_MEMORY_FILES_PER_CLIENT = 3;  \n\n    /**  \n     * \u8fd4\u56de\u8f66\u8f86 HAL \u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002  \n     *  \n     * @return \u4e00\u4e2a\u53ef\u6253\u5305\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u5305\u542b\u914d\u7f6e\u5217\u8868\u6216\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u914d\u7f6e\u5217\u8868\u8d85\u51fa\u4e86 binder \u5185\u5b58\u9650\u5236\uff09\u3002  \n     * \u5fc5\u987b\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684\u5bf9\u8c61\u3002  \n     */  \n    VehiclePropConfigs getAllPropConfigs();  \n\n    /**  \n     * \u8fd4\u56de\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u5217\u8868\u3002  \n     *  \n     * \u5982\u679c\u8bf7\u6c42\u7684\u5c5e\u6027\u4e2d\u6709\u672a\u627e\u5230\u7684\uff0c\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\uff0c  \n     * \u5426\u5219\u8fd4\u56de\u5305\u542b {@link StatusCode#OK} \u7684\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002  \n     *  \n     * @param props \u8981\u83b7\u53d6\u914d\u7f6e\u7684\u5c5e\u6027 ID \u5217\u8868\u3002  \n     * @return \u4e00\u4e2a\u53ef\u6253\u5305\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u5305\u542b\u914d\u7f6e\u5217\u8868\u6216\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u914d\u7f6e\u5217\u8868\u8d85\u51fa\u4e86 binder \u5185\u5b58\u9650\u5236\uff09\u3002  \n     * \u5fc5\u987b\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684\u5bf9\u8c61\u3002  \n     */  \n    VehiclePropConfigs getPropConfigs(in int[] props);  \n\n    /**  \n     * \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002  \n     *  \n     * \u5f53\u503c\u88ab\u83b7\u53d6\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onGetValues} \u65b9\u6cd5\u3002  \n     * \u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u4f20\u9012\u5df2\u83b7\u53d6\u7684\u5c5e\u6027\u7684\u5b50\u96c6\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u5c5e\u6027 [A, B, C]\uff0c\u56de\u8c03\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u4e24\u6b21\uff0c\u5206\u522b\u4f20\u9012 [A, C] \u548c [B]\u3002  \n     * \u8c03\u7528\u8005\u4e0d\u5e94\u671f\u671b {@link IVehicleCallback#onGetValues} \u7684\u8c03\u7528\u987a\u5e8f\u3002  \n     *  \n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u3002  \n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56de OK\uff0c\u4ecd\u7136\u6709\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u67d0\u4e9b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u72b6\u6001\u7531 {@link GetValueResult#status} \u6307\u793a\u3002  \n     *  \n     * \u5bf9\u4e8e {@link VehiclePropertyChangeMode#STATIC} \u5c5e\u6027\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u59cb\u7ec8\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002  \n     * \u5bf9\u4e8e {@link VehiclePropertyChangeMode#ON_CHANGE} \u5c5e\u6027\uff0c\u5fc5\u987b\u8fd4\u56de\u6700\u65b0\u53ef\u7528\u7684\u503c\u3002  \n     * \u5bf9\u4e8e\u53ef\u7f13\u5b58\u7684\u5c5e\u6027\uff0c\u5c06\u8fd4\u56de\u7f13\u5b58\u4e2d\u7684\u503c\uff0c\u800c\u65e0\u9700\u4e0e\u5b9e\u9645\u7684\u8f66\u8f86\u603b\u7ebf\u901a\u4fe1\u3002  \n     *  \n     * \u67d0\u4e9b\u5c5e\u6027\uff08\u5982 {@code RADIO_PRESET}\uff09\u9700\u8981\u5728 {@link VehiclePropValue} \u5bf9\u8c61\u4e2d\u4f20\u9012\u9644\u52a0\u6570\u636e\u3002  \n     *  \n     * \u5982\u679c\u5c1a\u65e0\u53ef\u7528\u6570\u636e\uff08\u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u521d\u59cb\u9636\u6bb5\uff09\uff0c{@link GetValueResult#status} \u5305\u542b {@link StatusCode#TRY_AGAIN}\u3002  \n     *  \n     * \u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f20\u9012\u4e00\u4e2a\u552f\u4e00\u7684 RequestID\uff0c\u5982\u679c\u4efb\u4f55\u7ed9\u5b9a\u7684\u8bf7\u6c42 ID \u4e0e\u6302\u8d77\u7684\u8bf7\u6c42 ID \u91cd\u590d\uff0c  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027 ID \u548c\u76f8\u540c\u7684\u533a\u57df ID\uff09\u3002  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u4e3a\u91cd\u590d\u5c5e\u6027\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u8bf7\u6c42\u4e2d\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5c06\u88ab\u5ffd\u7565\u3002  \n     * {@link GetValueResult} \u4e2d\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5fc5\u987b\u662f\u81ea\u542f\u52a8\u4ee5\u6765\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff0c  \n     * \u5f53\u503c\u53d1\u751f\u53d8\u5316\u65f6\u9002\u7528\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u6216\u6839\u636e\u8f6e\u8be2\u7387\u68c0\u67e5\u503c\u65f6\u9002\u7528\u4e8e CONTINUOUS \u5c5e\u6027\u3002  \n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e CONTINUOUS \u5c5e\u6027\uff0cVHAL \u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002  \n     *  \n     * @param callback \u4e00\u4e2a\u56de\u8c03\u63a5\u53e3\uff0c\u5728\u503c\u88ab\u83b7\u53d6\u540e\u8c03\u7528\u5176 'onGetValues'\u3002  \n     * \u8c03\u7528\u8005\u5e94\u4f7f\u7528 {@code android-automotive-large-parcelable} \u5e93\u6765\u89e3\u6790\u8fd4\u56de\u7684 {@link GetValueResult} \u5bf9\u8c61\u3002  \n     * @param requests \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b\u8bf7\u6c42\u7684\u5c5e\u6027\u5217\u8868\u6216\u5305\u542b\u5c5e\u6027\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002  \n     * \u8be5\u5bf9\u8c61\u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002  \n     */  \n    void getValues(IVehicleCallback callback, in GetValueRequests requests);  \n\n    /**  \n     * \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002  \n     *  \n     * \u5728\u503c\u8bbe\u7f6e\u8bf7\u6c42\u901a\u8fc7\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u6216\u8bbe\u7f6e\u5931\u8d25\u540e\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onSetValues} \u51fd\u6570\u3002  \n     * \u5982\u679c\u603b\u7ebf\u534f\u8bae\u652f\u6301\u786e\u8ba4\uff0c\u5219\u5728\u6536\u5230\u786e\u8ba4\u540e\u8c03\u7528\u56de\u8c03\u3002  \n     *  \n     * \u5bf9\u4e8e\u67d0\u4e9b\u4e0d\u652f\u6301\u786e\u8ba4\u7684\u8f66\u8f86\u603b\u7ebf\uff08\u5982 CAN \u603b\u7ebf\uff09\uff0cOnSetValues \u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u503c\u7684\u53d8\u5316\u4f1a\u7acb\u5373\u53cd\u6620\u5728 {@link #getValues} \u4e2d\u3002  \n     *  \n     * \u5982\u679c\u8f93\u51fa\u72b6\u6001\u5305\u542b\u9519\u8bef\uff0c\u5219\u8868\u793a\u6211\u4eec\u65e0\u6cd5\u8bbe\u7f6e\u6240\u6709\u5c5e\u6027\u3002  \n     * \u5982\u679c\u6211\u4eec\u65e0\u6cd5\u8bbe\u7f6e\u67d0\u4e9b\u503c\uff0c\u5b83\u4eec\u5c06\u53cd\u6620\u4e3a\u975e OK \u7684 {@link SetValueResult#status}\u3002  \n     *  \n     * \u8bf7\u6c42\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u7684\u8bbe\u7f6e\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\u5982\u679c\u8c03\u7528\u8005\u9700\u8981\u786e\u4fdd\u8bbe\u7f6e\u503c\u7684\u987a\u5e8f\uff0c\u8c03\u7528\u8005\u5e94\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff0c\u7b49\u5f85\u5176\u56de\u8c03\uff0c\u7136\u540e\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u503c\u3002  \n     *  \n     * \u6570\u636e\u7684\u65f6\u95f4\u6233\u5728\u8bbe\u7f6e\u64cd\u4f5c\u4e2d\u5fc5\u987b\u88ab\u5ffd\u7565\u3002  \n     *  \n     * \u8bbe\u7f6e\u67d0\u4e9b\u5c5e\u6027\u9700\u8981\u6709\u53ef\u7528\u7684\u521d\u59cb\u72b6\u6001\u3002\u5982\u679c\u521d\u59cb\u6570\u636e\u5c1a\u4e0d\u53ef\u7528\uff0c{@link SetValueResult#status} \u5fc5\u987b\u662f {@link StatusCode#TRY_AGAIN}\u3002  \n     * \u5bf9\u4e8e\u5177\u6709\u72ec\u7acb\u7535\u6e90\u63a7\u5236\u7684\u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u672a\u901a\u7535\uff0c{@link SetValueResult#status} \u5fc5\u987b\u662f {@link StatusCode#NOT_AVAILABLE}\u3002  \n     *  \n     * \u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f20\u9012\u4e00\u4e2a\u552f\u4e00\u7684 RequestID\uff0c\u5982\u679c\u4efb\u4f55\u7ed9\u5b9a\u7684\u8bf7\u6c42 ID \u4e0e\u6302\u8d77\u7684\u8bf7\u6c42 ID \u91cd\u590d\uff0c  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027 ID \u548c\u76f8\u540c\u7684\u533a\u57df ID\uff09\u3002  \n     * \u6b64\u51fd\u6570\u5fc5\u987b\u4e3a\u91cd\u590d\u5c5e\u6027\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * @param callback \u56de\u8c03\uff0c\u5728\u8bbe\u7f6e\u503c\u8bf7\u6c42\u53d1\u9001\u5230\u603b\u7ebf\u540e\u8c03\u7528\u5176 'onSetValues'\u3002  \n     * @param requests \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b {@link SetValueRequest} \u5217\u8868\u6216\u5b58\u50a8\u8bf7\u6c42\u5217\u8868\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff08\u5982\u679c\u5b83\u4eec\u8d85\u8fc7 binder \u5185\u5b58\u9650\u5236\uff09\uff0c  \n     * \u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002  \n     */  \n    void setValues(IVehicleCallback callback, in SetValueRequests requests);  \n\n    /**  \n     * \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n     *  \n     * \u5ba2\u6237\u7aef\u5fc5\u987b\u80fd\u591f\u6839\u636e options \u53c2\u6570\u4e2d\u63d0\u4f9b\u7684\u6570\u636e\u4e00\u6b21\u8ba2\u9605\u591a\u4e2a\u5c5e\u6027\u3002  \n     *  \n     * \u5bf9\u4e8e\u4e00\u4e2a\u56de\u8c03\uff0c\u4e00\u4e2a\u5c5e\u6027\u53ea\u6709\u4e00\u4e2a\u8ba2\u9605\u3002\u5177\u6709\u4e0d\u540c\u91c7\u6837\u7387\u7684\u65b0\u8ba2\u9605\u5c06\u8986\u76d6\u65e7\u8ba2\u9605\u3002  \n     * \u4e00\u4e2a\u5c5e\u6027\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u56de\u8c03\u591a\u6b21\u8ba2\u9605\u3002  \n     *  \n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u67d0\u4e9b\u5c5e\u6027\u8ba2\u9605\u5931\u8d25\u3002  \n     * \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u8ba2\u9605\u5df2\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002  \n     *  \n     * \u6307\u5b9a\u7684\u91c7\u6837\u7387\u53ea\u662f\u4e00\u4e2a\u6307\u5bfc\u3002\u6839\u636e\u8f6e\u8be2\u5237\u65b0\u7387\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u91c7\u6837\u7387\u662f\u53ef\u5b9e\u73b0\u7684\u3002  \n     * \u5b9e\u9645\u7684\u5c5e\u6027\u4e8b\u4ef6\u7387\u53ef\u80fd\u9ad8\u4e8e\u6216\u4f4e\u4e8e\u6307\u5b9a\u7684 sampleRate\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u8f6e\u8be2\u7387\u53ef\u4ee5\u662f\u6bcf\u79d2 5 \u6b21\u6216 10 \u6b21\uff0c\u8ba2\u9605 7 \u7684\u91c7\u6837\u7387\u53ef\u80fd\u4f1a\u4f7f\u7528\u6bcf\u79d2 5 \u6b21\u7684\u8f6e\u8be2\u7387\uff0c\u4ece\u800c\u751f\u6210\u6bcf\u79d2 5 \u6b21\u4e8b\u4ef6\u3002  \n     * \u6211\u4eec\u53ea\u8981\u6c42\u5e73\u5747\u800c\u8a00\uff0c{@code minSampleRate} \u548c {@code maxSampleRate} \u53ef\u4ee5\u5b9e\u73b0\uff0c  \n     * \u6240\u6709\u5728\u6700\u5c0f\u548c\u6700\u5927\u4e4b\u95f4\u7684 sampleRate \u5e73\u5747\u800c\u8a00\u751f\u6210\u4e8b\u4ef6\u7684\u901f\u7387 &gt;= {@code minSampleRate} \u4e14 &lt;= {@code maxSampleRate}\u3002  \n     *  \n     * \u6bcf\u4e2a\u5c5e\u6027\u4e8b\u4ef6\u7684 {@link VehiclePropValue#timestamp} \u5b57\u6bb5\u5fc5\u987b\u662f\u81ea\u542f\u52a8\u4ee5\u6765\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff0c  \n     * \u5f53\u503c\u53d1\u751f\u53d8\u5316\u65f6\u9002\u7528\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u6216\u6839\u636e\u8f6e\u8be2\u7387\u68c0\u67e5\u503c\u65f6\u9002\u7528\u4e8e CONTINUOUS \u5c5e\u6027\u3002  \n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e CONTINUOUS \u5c5e\u6027\uff0cVHAL \u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002  \n     * \u4f8b\u5982\uff0c\u5982\u679c\u5c5e\u6027\u7684\u8f6e\u8be2\u7387\u662f\u6bcf\u79d2 10 \u6b21\uff0c\u65e0\u8bba {@code options} \u4e2d\u6307\u5b9a\u7684 sampleRate \u662f\u4ec0\u4e48\uff0c\u65f6\u95f4\u6233\u6bcf\u79d2\u66f4\u65b0 10 \u6b21\u3002  \n     *  \n     * \u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u7535\u6e90\u72b6\u6001\u5173\u95ed\u800c\u65e0\u6cd5\u8bfb\u53d6\u5c5e\u6027\uff0c\u5219\u5728\u5c5e\u6027\u53ef\u7528\u4e4b\u524d\u53ef\u80fd\u4e0d\u4f1a\u751f\u6210\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\u3002  \n     * \u5bf9\u4e8e ON_CHANGE \u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u4ece NOT_AVAILABLE \u66f4\u6539\u4e3a OKAY \u4ee5\u8bfb\u53d6\u67d0\u4e9b\u6216\u6240\u6709\u533a\u57df\uff0c  \n     * \u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u4f9b\u8bfb\u53d6\u7684\u533a\u57df\uff0c\u5fc5\u987b\u751f\u6210\u4e00\u4e2a\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\u3002\u4e8b\u4ef6\u5fc5\u987b\u5305\u542b\u8be5\u533a\u57df\u7684\u5f53\u524d\u503c\u5e76\u5177\u6709 {@code AVAILABLE} \u72b6\u6001\u3002  \n     *  \n     * @param callback \u8ba2\u9605\u56de\u8c03\u3002  \n     *    \u5f53\u65b0\u5c5e\u6027\u4e8b\u4ef6\u5230\u8fbe\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onPropertyEvent}\u3002  \n     *    \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u5f02\u6b65\u5931\u8d25\u65f6\uff0c\u5c06\u8c03\u7528 {@link IVehicleCallback#onPropertySetError}\u3002  \n     *    \u8fd9\u901a\u5e38\u662f\u7531\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u7684\u5c5e\u6027\u8bbe\u7f6e\u5931\u8d25\u6d88\u606f\u5f15\u8d77\u7684\u3002  \n     * @param options \u8ba2\u9605\u9009\u9879\u5217\u8868\u3002SubscribeOption \u5305\u542b\u5c5e\u6027 ID\u3001\u533a\u57df ID\u3001\u91c7\u6837\u7387\u7b49\u4fe1\u606f\u3002  \n     *    \u5bf9\u4e8e\u8fde\u7eed\u5c5e\u6027\uff0c\u5fc5\u987b\u63d0\u4f9b\u91c7\u6837\u7387\u3002\u5982\u679c\u91c7\u6837\u7387\u5c0f\u4e8e {@link VehiclePropConfig#minSampleRate}\uff0c  \n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3a minSampleRate\u3002\u5982\u679c\u91c7\u6837\u7387\u5927\u4e8e {@link VehiclePropValue#maxSampleRate}\uff0c  \n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3a maxSampleRate\u3002  \n     * @param maxSharedMemoryFileCount \u4e3a\u6b64\u8ba2\u9605\u5728 VHAL \u4e2d\u5206\u914d\u7684\u6700\u5927\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u3002  \n     *    \u5f53\u5185\u5b58\u6587\u4ef6\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u65f6\uff0c\u5728\u8c03\u7528 returnSharedMemory \u5c06\u7f13\u51b2\u533a\u8fd4\u56de\u7ed9 VHAL \u4e4b\u524d\uff0c  \n     *    VHAL \u4e0d\u80fd\u4f7f\u7528\u8be5\u5185\u5b58\u6587\u4ef6\u6765\u4f20\u9012\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u3002\u8f83\u5927\u7684 maxSharedMemoryFileCount \u610f\u5473\u7740\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\u6027\u80fd\u66f4\u597d\uff0c  \n     *    \u4f46\u4e5f\u610f\u5473\u7740\u66f4\u5927\u7684\u5185\u5b58\u5360\u7528\u3002\u5982\u679c\u4e0d\u671f\u671b\u4e8b\u4ef6\u975e\u5e38\u9891\u7e41\u5730\u5230\u8fbe\uff0c\u5efa\u8bae\u503c\u4e3a 2\u3002\u503c\u4e3a 0 \u8868\u793a\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u5c5e\u6027\uff0c  \n     *    \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u7528\u4efb\u4f55\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\u8fd9\u4ec5\u5e94\u4e3a\u4e0d\u9891\u7e41\u7684\u4e8b\u4ef6\u6216\u5185\u5b58\u6709\u9650\u7684\u8bbe\u5907\u914d\u7f6e\u3002  \n     *    \u6b64\u503c\u5fc5\u987b &gt;=0 \u4e14 &lt; {@link MAX_SHARED_MEMORY_FILES_PER_CLIENT}\u3002  \n     */  \n    void subscribe(in IVehicleCallback callback, in SubscribeOptions[] options,  \n                   int maxSharedMemoryFileCount);  \n\n    /**  \n     * \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002  \n     *  \n     * \u5982\u679c 'callback' \u65e0\u6548\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     * \u5982\u679c\u6307\u5b9a\u7684 propId \u4e4b\u524d\u672a\u8ba2\u9605\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u5ffd\u7565\u8be5 propId\u3002  \n     *  \n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u67d0\u4e9b\u5c5e\u6027\u53d6\u6d88\u8ba2\u9605\u5931\u8d25\u3002  \n     * \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u53d6\u6d88\u8ba2\u9605\u5df2\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002  \n     *  \n     * @param callback \u5728\u5148\u524d\u8ba2\u9605\u4e2d\u4f7f\u7528\u7684\u56de\u8c03\u3002  \n     * @param propIds \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u7684 ID\u3002  \n     */  \n    void unsubscribe(in IVehicleCallback callback, in int[] propIds);  \n\n    /**  \n     * \u5c06\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u8fd4\u56de\u7ed9 VHAL \u4ee5\u4f9b\u56de\u6536\u3002  \n     *  \n     * \u5728\u5ba2\u6237\u7aef\u4e0d\u518d\u4f7f\u7528\u7531 {@link IVehicleCallback#onPropertyEvent} \u8fd4\u56de\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u540e\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002  \n     * \u901a\u5e38\u5728 'onPropertyEvent' \u7ed3\u675f\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\u3002  \n     *  \n     * \u5982\u679c 'callback' \u65e0\u6548\u6216 'sharedMemoryId' \u4e0e\u4f20\u9012\u7ed9 {@link IVehicleCallback#onPropertyEvent} \u7684  \n     * 'VehiclePropValues' \u4e2d\u7684\u4efb\u4f55 SharedMemoryId \u4e0d\u5339\u914d\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de {@link StatusCode#INVALID_ARG}\u3002  \n     *  \n     * @param callback \u5728\u8ba2\u9605\u4e2d\u4f7f\u7528\u7684\u56de\u8c03\u3002  \n     * @param sharedMemoryId \u7531 'onPropertyEvent' \u8fd4\u56de\u7684 ID\uff0c\u8868\u793a\u8981\u8fd4\u56de\u7684\u5df2\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002  \n     */  \n    void returnSharedMemory(in IVehicleCallback callback, long sharedMemoryId);  \n}\n</code></pre> <p>\u4ee5\u4e0a\u662f IVehicle.aidl \u4ee3\u7801\uff0c\u4ece\u5176\u63a5\u53e3\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u4e3b\u8981\u662f\u4e0e\u8f66\u8f86 HAL \u4ea4\u4e92\u7684\u6838\u5fc3\u63a5\u53e3\uff0c\u652f\u6301\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\uff0c\u5904\u7406\u5f02\u6b65\u64cd\u4f5c\u548c\u8d44\u6e90\u7ba1\u7406\u3002</p> <ul> <li> <p>getAllPropConfigs() \u8fd4\u56de\u8f66\u8f86 HAL \u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002</p> </li> <li> <p>getPropConfigs()\uff1a \u8fd4\u56de\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u5217\u8868\u3002</p> </li> <li> <p>getValues()\uff1a \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u80fd\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u5c5e\u6027\u7684\u5b50\u96c6\u3002\u652f\u6301\u4e0d\u540c\u7684\u5c5e\u6027\u53d8\u5316\u6a21\u5f0f\uff08\u9759\u6001\u3001\u53d8\u5316\u3001\u8fde\u7eed\uff09\uff0c\u5e76\u5904\u7406\u7f13\u5b58\u548c\u65f6\u95f4\u6233\u3002</p> </li> <li> <p>setValues()\uff1a \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u901a\u77e5\u8bbe\u7f6e\u7ed3\u679c\u3002\u5904\u7406\u8bbe\u7f6e\u987a\u5e8f\u3001\u786e\u8ba4\u673a\u5236\u3001\u521d\u59cb\u72b6\u6001\u9700\u6c42\u548c\u91cd\u590d\u8bf7\u6c42 ID \u7b49\u95ee\u9898\u3002</p> </li> <li> <p>subscribe()\uff1a \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002</p> </li> <li> <p>unsubscribe \u65b9\u6cd5\uff1a \u53d6\u6d88\u8ba2\u9605\u6307\u5b9a\u5c5e\u6027\u7684\u4e8b\u4ef6\u3002</p> </li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#ivehiclecallbackaidl","title":"IVehicleCallback.aidl","text":"<pre><code>// hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicleCallback.aidl\n\n// IVehicleCallback \u63a5\u53e3\uff0c\u5b9a\u4e49\u4e86\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08Vehicle HAL\uff09\u8fdb\u884c\u901a\u4fe1\u65f6\u7684\u56de\u8c03\u63a5\u53e3\u3002\n@VintfStability\ninterface IVehicleCallback {\n\n    /**\n     * {@link IVehicle#getValues} \u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53\u4e00\u4e9b\u8981\u83b7\u53d6\u7684\u503c\u51c6\u5907\u597d\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a 'getValues' \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u503c\u3002\u4fdd\u8bc1\u6240\u6709\u8bf7\u6c42\u7684\u503c\u90fd\u4f1a\u5728\u67d0\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u6bcf\u4e2a\u503c\u51c6\u5907\u597d\u7684\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\n     *\n     * @param responses \u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b {@link GetValueResult} \u7684\u5217\u8868\uff08\u5982\u679c\u5b83\u4eec\u7b26\u5408 binder \u5185\u5b58\u9650\u5236\uff09\u6216\u5305\u542b\u54cd\u5e94\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\n     * \u6bcf\u4e2a {@link GetValueResult} \u8981\u4e48\u5305\u542b\u5c5e\u6027\u503c\uff0c\u8981\u4e48\u5305\u542b\u83b7\u53d6\u503c\u65f6\u53d1\u751f\u7684\u9519\u8bef\u3002\n     *\n     * {@link GetValueResult} \u8fd8\u5305\u542b\u4e00\u4e2a requestId\uff0c\u6307\u793a\u8be5\u54cd\u5e94\u662f\u9488\u5bf9\u54ea\u4e2a\u8bf7\u6c42\u7684\u3002\n     * \u54cd\u5e94\u5bf9\u8c61\u5e94\u7531 {@code android-automotive-large-parcelable} \u5e93\u89e3\u6790\u3002\n     */\n    oneway void onGetValues(in GetValueResults responses);\n\n    /**\n     * {@link IVehicle#setValues} \u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53 VHAL \u5b8c\u6210\u5904\u7406\u4e00\u4e9b\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a 'setValues' \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u503c\u3002\u4fdd\u8bc1\u6240\u6709\u8bbe\u7f6e\u7684\u503c\u72b6\u6001\u90fd\u4f1a\u5728\u67d0\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u6bcf\u4e2a\u503c\u8bbe\u7f6e\u7684\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u3002\n     *\n     * @param responses {@link SetValueResult} \u7684\u5217\u8868\u3002\u6bcf\u4e2a SetValueResult \u5305\u542b\u4e00\u4e2a\u72b6\u6001\uff0c\u6307\u793a\u8bbe\u7f6e\u7279\u5b9a\u5c5e\u6027\u7684\u72b6\u6001\u3002\n     * requestId \u6307\u793a\u8be5\u54cd\u5e94\u662f\u9488\u5bf9\u54ea\u4e2a\u8bf7\u6c42\u7684\u3002\n     */\n    oneway void onSetValues(in SetValueResults responses);\n\n    /**\n     * \u5f53 API \u7528\u6237\u8ba2\u9605\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u9700\u8981\u62a5\u544a\u65f6\u53d1\u751f\u7684\u4e8b\u4ef6\u56de\u8c03\u3002\n     * \u8fd9\u53ef\u80fd\u7eaf\u7cb9\u57fa\u4e8e\u9608\u503c\u548c\u9891\u7387\uff08\u5e38\u89c4\u8ba2\u9605\uff0c\u53c2\u89c1 subscribe \u8c03\u7528\u7684\u53c2\u6570\uff09\u6216\u5f53\u8c03\u7528 {@link IVehicle#setValues} \u65b9\u6cd5\u5e76\u9700\u8981\u62a5\u544a\u5b9e\u9645\u66f4\u6539\u65f6\u3002\n     *\n     * @param propValues \u5305\u542b\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7684\u5bf9\u8c61\u3002\n     * \u5982\u679c\u5c5e\u6027\u5728 binder \u9650\u5236\u5185\uff0c\u5b83\u4eec\u5c06\u4f4d\u4e8e {@code propValues.payloads} \u4e2d\uff0c\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u4f4d\u4e8e\u5171\u4eab\u5185\u5b58\u6587\u4ef6 {@code propValues.sharedMemoryFd} \u4e2d\u3002\n     * \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7531 VHAL \u521b\u5efa\uff0c\u4f7f\u7528\u540e\u5fc5\u987b\u4f7f\u7528 {@link IVehicle#returnSharedMemory} \u8fd4\u56de\u7ed9 VHAL\u3002\n     * \u4e3a\u6bcf\u4e2a\u8ba2\u9605\u521b\u5efa\u7684\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u6709\u9650\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u8fd4\u56de\u5171\u4eab\u5185\u5b58\uff0c\u5ba2\u6237\u7aef\u53ef\u80fd\u65e0\u6cd5\u5728\u672a\u6765\u83b7\u5f97\u4e8b\u4ef6\u3002\n     * @param sharedMemoryFileCount \u4e3a\u6b64\u8ba2\u9605\u5206\u914d\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u91cf\u3002\n     * \u8be5\u503c\u53ef\u7528\u4e8e\u8c03\u6574 {@link IVehicle#subscribe} \u4e2d\u7684 {@code maxSharedMemoryFileCount}\u3002\n     * \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u901a\u5e38\u770b\u5230 sharedMemoryFileCount \u662f\u60a8\u8bbe\u7f6e\u7684 maxSharedMemoryFileCount\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u80fd\u9700\u8981\u589e\u52a0 maxSharedMemoryFileCount\u3002\n     */\n    oneway void onPropertyEvent(in VehiclePropValues propValues, int sharedMemoryFileCount);\n\n    /**\n     * \u8bbe\u7f6e\u5c5e\u6027\u503c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u5ba2\u6237\u7aef\u4ece {@link IVehicle#setValues} \u6536\u5230 {@link StatusCode#OK}\uff0c\n     * \u6216\u5728 {@link #onSetValues} \u4e2d\u6536\u5230 {@link StatusCode#OK}\uff0c\u8fd9\u5e76\u4e0d\u4fdd\u8bc1\u503c\u5df2\u6210\u529f\u4f20\u64ad\u5230\u8f66\u8f86\u7f51\u7edc\u3002\n     * \u5982\u679c\u53d1\u751f\u8fd9\u79cd\u7f55\u89c1\u4e8b\u4ef6\uff0c\u5219\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n     *\n     * @param errors \u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u7684\u5217\u8868\u3002\u5982\u679c VHAL \u5b9e\u73b0\u4e0d\u6279\u91cf\u5904\u7406\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u53ea\u5305\u542b\u4e00\u4e2a\u9519\u8bef\u3002\n     */\n    oneway void onPropertySetError(in VehiclePropErrors errors);\n}\n</code></pre> <ul> <li> <p>onGetValues()\uff1a \u7528\u4e8e\u5904\u7406 <code>IVehicle#getValues</code> \u8bf7\u6c42\u7684\u56de\u8c03\u3002\u5f53\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u51c6\u5907\u597d\u65f6\u8c03\u7528\uff0c\u53ef\u80fd\u4f1a\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\u3002</p> </li> <li> <p>onSetValues()\uff1a \u7528\u4e8e\u5904\u7406 <code>IVehicle#setValues</code> \u8bf7\u6c42\u7684\u56de\u8c03\u3002\u5f53\u8bf7\u6c42\u7684\u5c5e\u6027\u8bbe\u7f6e\u5b8c\u6210\u65f6\u8c03\u7528\uff0c\u53ef\u80fd\u4f1a\u591a\u6b21\u8c03\u7528\u4ee5\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\u3002</p> </li> <li> <p>onPropertyEvent()\uff1a \u5f53\u8ba2\u9605\u7684\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\u53ef\u80fd\u57fa\u4e8e\u8ba2\u9605\u7684\u9608\u503c\u548c\u9891\u7387\u6216\u5c5e\u6027\u8bbe\u7f6e\u7684\u53d8\u5316\u3002</p> </li> <li> <p>onPropertySetError()\uff1a \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\u65f6\u8c03\u7528\u3002\u5373\u4f7f\u4e4b\u524d\u7684\u64cd\u4f5c\u8fd4\u56de\u6210\u529f\u72b6\u6001\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u3002</p> </li> </ul> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ddf Vehicle HAL \u4ea4\u4e92\u7684\u4e3b\u8981\u63a5\u53e3\u4e86\uff0c\u6211\u4eec\u8fd4\u56de\u5230VehicleStub.newVehicleStub()\u4e2d\uff0c\u5176\u83b7\u53d6 Stable AIDL \u7248\u672c\u5c31\u662f\u521b\u5efa\u4e00\u4e2aAidlVehicleStub\u5b9e\u4f8b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclestub","title":"VehicleStub","text":"<p>\u5728\u8ba8\u8bba\u00a0<code>IVehicle.aidl</code>\u00a0\u548c\u00a0<code>IVehicleCallback.aidl</code>\u00a0\u65f6\uff0c\u6211\u4eec\u63d0\u5230\u8fd9\u4e9b\u662f Vehicle HAL \u63d0\u4f9b\u7ed9\u5916\u90e8\u7684\u63a5\u53e3\u3002\u7136\u800c\uff0c\u5728 CarService \u4e2d\u5177\u4f53\u4f7f\u7528\u4e86\u54ea\u4e9b\u63a5\u53e3\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u00a0<code>VehicleStub</code>\u00a0\u6765\u4e86\u89e3\u3002</p> <p><code>VehicleStub</code>\u00a0\u662f CarService \u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u7ec4\u4ef6\uff0c\u5b83\u5b9e\u73b0\u4e86\u00a0<code>IVehicle</code>\u00a0\u63a5\u53e3\uff0c\u5e76\u8d1f\u8d23\u5904\u7406\u6765\u81ea\u8f66\u8f86\u786c\u4ef6\u7684\u8bf7\u6c42\u548c\u56de\u8c03\u3002\u901a\u8fc7\u5206\u6790\u00a0<code>VehicleStub</code>\u00a0\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u660e\u786e CarService \u5b9e\u9645\u4e0a\u8c03\u7528\u4e86\u54ea\u4e9b\u63a5\u53e3\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u65b9\u6cd5\u662f\u5982\u4f55\u88ab\u5229\u7528\u7684\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/VehicleStub.java\n\n/**\n * VehicleStub \u8868\u793a\u4e00\u4e2a IVehicle \u670d\u52a1\u63a5\u53e3\uff0c\u53ef\u4ee5\u662f AIDL \u6216\u8005\u4f20\u7edf\u7684 HIDL \u7248\u672c\u3002\n * \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u4f7f\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u5173\u5fc3\u5e95\u5c42 IVehicle \u670d\u52a1\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u7248\u672c\u3002\n */\npublic abstract class VehicleStub {\n\n    /**\n     * SubscriptionClient \u8868\u793a\u4e00\u4e2a\u53ef\u4ee5\u8ba2\u9605/\u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u7684\u5ba2\u6237\u7aef\u3002\n     */\n    public interface SubscriptionClient {\n        /**\n         * \u8ba2\u9605\u4e00\u4e2a\u5c5e\u6027\u3002\n         *\n         * @param options \u8ba2\u9605\u9009\u9879\u7684\u5217\u8868\u3002\n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n         * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n         */\n        void subscribe(SubscribeOptions[] options) throws RemoteException, ServiceSpecificException;\n\n        /**\n         * \u53d6\u6d88\u8ba2\u9605\u4e00\u4e2a\u5c5e\u6027\u3002\n         *\n         * @param prop \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027ID\u3002\n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n         * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n         */\n        void unsubscribe(int prop) throws RemoteException, ServiceSpecificException;\n    }\n\n    /**\n     * \u7528\u4e8e {@link VehicleStub#getAsync} \u6216 {@link VehicleStub#setAsync} \u7684\u8bf7\u6c42\u3002\n     */\n    public static class AsyncGetSetRequest {\n        private final int mServiceRequestId; // \u670d\u52a1\u8bf7\u6c42ID\n        private final HalPropValue mHalPropValue; // HAL\u5c5e\u6027\u503c\n        private final long mTimeoutUptimeMs; // \u8d85\u65f6\u65f6\u95f4\n\n        public int getServiceRequestId() {\n            return mServiceRequestId;\n        }\n\n        public HalPropValue getHalPropValue() {\n            return mHalPropValue;\n        }\n\n        public long getTimeoutUptimeMs() {\n            return mTimeoutUptimeMs;\n        }\n\n        /**\n         * \u83b7\u53d6 AsyncGetSetRequest \u7684\u5b9e\u4f8b\u3002\n         */\n        public AsyncGetSetRequest(int serviceRequestId, HalPropValue halPropValue,\n                long timeoutUptimeMs) {\n            mServiceRequestId = serviceRequestId;\n            mHalPropValue = halPropValue;\n            mTimeoutUptimeMs = timeoutUptimeMs;\n        }\n    }\n\n    /**\n     * {@link VehicleStub#getAsync} \u7684\u7ed3\u679c\u3002\n     */\n    public static final class GetVehicleStubAsyncResult {\n        private final int mServiceRequestId; // \u670d\u52a1\u8bf7\u6c42ID\n        @Nullable\n        private final HalPropValue mHalPropValue; // HAL\u5c5e\u6027\u503c\n        private final CarPropertyErrorCodes mCarPropertyErrorCodes; // \u6c7d\u8f66\u5c5e\u6027\u9519\u8bef\u4ee3\u7801\n\n        public int getServiceRequestId() {\n            return mServiceRequestId;\n        }\n\n        @Nullable\n        public HalPropValue getHalPropValue() {\n            return mHalPropValue;\n        }\n\n        @CarPropMgrErrorCode\n        public int getErrorCode() {\n            return mCarPropertyErrorCodes.getCarPropertyManagerErrorCode();\n        }\n\n        public int getVendorErrorCode() {\n            return mCarPropertyErrorCodes.getVendorErrorCode();\n        }\n\n        public int getSystemErrorCode() {\n            return mCarPropertyErrorCodes.getSystemErrorCode();\n        }\n\n        public CarPropertyErrorCodes getCarPropertyErrorCodes() {\n            return mCarPropertyErrorCodes;\n        }\n\n        /**\n         * \u6784\u9020\u4e00\u4e2a\u6210\u529f\u8fd4\u56de\u7ed3\u679c\u7684 GetVehicleStubAsyncResult \u5b9e\u4f8b\u3002\n         */\n        public GetVehicleStubAsyncResult(int serviceRequestId, HalPropValue halPropValue) {\n            mServiceRequestId = serviceRequestId;\n            mHalPropValue = halPropValue;\n            mCarPropertyErrorCodes = CarPropertyErrorCodes.STATUS_OK_NO_ERROR;\n        }\n\n        /**\n         * \u6784\u9020\u4e00\u4e2a\u9519\u8bef\u8fd4\u56de\u7ed3\u679c\u7684 GetVehicleStubAsyncResult \u5b9e\u4f8b\u3002\n         */\n        public GetVehicleStubAsyncResult(int serviceRequestId, CarPropertyErrorCodes errorCodes) {\n            mServiceRequestId = serviceRequestId;\n            mHalPropValue = null;\n            mCarPropertyErrorCodes = errorCodes;\n        }\n    }\n\n    /**\n     * {@link VehicleStub#setAsync} \u7684\u7ed3\u679c\u3002\n     */\n    public static final class SetVehicleStubAsyncResult {\n        private final int mServiceRequestId; // \u670d\u52a1\u8bf7\u6c42ID\n        @CarPropMgrErrorCode\n        private final CarPropertyErrorCodes mCarPropertyErrorCodes; // \u6c7d\u8f66\u5c5e\u6027\u9519\u8bef\u4ee3\u7801\n\n        public int getServiceRequestId() {\n            return mServiceRequestId;\n        }\n\n        @CarPropMgrErrorCode\n        public int getErrorCode() {\n            return mCarPropertyErrorCodes.getCarPropertyManagerErrorCode();\n        }\n\n        public int getVendorErrorCode() {\n            return mCarPropertyErrorCodes.getVendorErrorCode();\n        }\n\n        public int getSystemErrorCode() {\n            return mCarPropertyErrorCodes.getSystemErrorCode();\n        }\n\n        public CarPropertyErrorCodes getCarPropertyErrorCodes() {\n            return mCarPropertyErrorCodes;\n        }\n\n        /**\n         * \u6784\u9020\u4e00\u4e2a\u6210\u529f\u7ed3\u679c\u7684\u5b9e\u4f8b\u3002\n         */\n        public SetVehicleStubAsyncResult(int serviceRequestId) {\n            mServiceRequestId = serviceRequestId;\n            mCarPropertyErrorCodes = CarPropertyErrorCodes.STATUS_OK_NO_ERROR;\n        }\n\n        /**\n         * \u6784\u9020\u4e00\u4e2a\u9519\u8bef\u7ed3\u679c\u7684\u5b9e\u4f8b\u3002\n         */\n        public SetVehicleStubAsyncResult(int serviceRequestId, CarPropertyErrorCodes errorCodes) {\n            mServiceRequestId = serviceRequestId;\n            mCarPropertyErrorCodes = errorCodes;\n        }\n    }\n\n    /**\n     * \u5f02\u6b65\u64cd\u4f5c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     */\n    public abstract static class VehicleStubCallbackInterface {\n        /**\n         * \u5f53 {@link getAsync} \u8fd4\u56de\u7ed3\u679c\u65f6\u8c03\u7528\u7684\u65b9\u6cd5\u3002\n         */\n        public abstract void onGetAsyncResults(\n                List&lt;GetVehicleStubAsyncResult&gt; getVehicleStubAsyncResults);\n\n        /**\n         * \u5f53 {@link setAsync} \u8fd4\u56de\u7ed3\u679c\u65f6\u8c03\u7528\u7684\u65b9\u6cd5\u3002\n         */\n        public abstract void onSetAsyncResults(\n                List&lt;SetVehicleStubAsyncResult&gt; setVehicleStubAsyncResults);\n\n        /**\n         * \u5f53\u5f02\u6b65\u8bf7\u6c42\u8d85\u65f6\u65f6\u8c03\u7528\u7684\u65b9\u6cd5\u3002\n         *\n         * \u5982\u679c\u56de\u8c03\u7684\u7ed1\u5b9a\u5df2\u7ecf\u6b7b\u4ea1\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528\u6b64\u51fd\u6570\u3002\n         */\n        public abstract void onRequestsTimeout(List&lt;Integer&gt; serviceRequestIds);\n    }\n\n    /**\n     * \u5f02\u6b65\u83b7\u53d6\u5c5e\u6027\u3002\n     */\n    public abstract void getAsync(List&lt;AsyncGetSetRequest&gt; getVehicleStubAsyncRequests,\n            VehicleStubCallbackInterface getVehicleStubAsyncCallback);\n\n    /**\n     * \u5f02\u6b65\u8bbe\u7f6e\u5c5e\u6027\u3002\n     */\n    public abstract void setAsync(List&lt;AsyncGetSetRequest&gt; setVehicleStubAsyncRequests,\n            VehicleStubCallbackInterface setVehicleStubAsyncCallback);\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa HalPropValue \u7684 HalPropValueBuilder\u3002\n     *\n     * @return \u4e00\u4e2a\u7528\u4e8e\u6784\u5efa HalPropValue \u7684\u6784\u5efa\u5668\u3002\n     */\n    public abstract HalPropValueBuilder getHalPropValueBuilder();\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u3002\n     *\n     * @return \u6240\u6709\u7684\u5c5e\u6027\u914d\u7f6e\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n     */\n    public abstract HalPropConfig[] getAllPropConfigs()\n            throws RemoteException, ServiceSpecificException;\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u65b0\u7684 {@code SubscriptionClient}\uff0c\u53ef\u4ee5\u7528\u4e8e\u8ba2\u9605/\u53d6\u6d88\u8ba2\u9605\u3002\n     *\n     * \u8c03\u7528\u8005\u5fc5\u987b\u5728\u4e22\u5f03\u5ba2\u6237\u7aef\u4e4b\u524d\u53d6\u6d88\u8ba2\u9605\u6240\u6709\u5df2\u8ba2\u9605\u7684\u5c5e\u6027\u4ee5\u9632\u6b62\u8d44\u6e90\u6cc4\u6f0f\u3002\n     *\n     * @param callback \u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u7684\u56de\u8c03\u3002\n     * @return \u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u8ba2\u9605/\u53d6\u6d88\u8ba2\u9605\u7684 {@code SubscriptionClient}\u3002\n     */\n    public abstract SubscriptionClient newSubscriptionClient(VehicleHalCallback callback);\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u5c5e\u6027\u3002\n     *\n     * @param requestedPropValue \u8981\u83b7\u53d6\u7684\u5c5e\u6027\u3002\n     * @return \u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n     */\n    @Nullable\n    public abstract HalPropValue get(HalPropValue requestedPropValue)\n            throws RemoteException, ServiceSpecificException;\n\n    /**\n     * \u8bbe\u7f6e\u4e00\u4e2a\u5c5e\u6027\u3002\n     *\n     * @param propValue \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c VHAL \u8fd4\u56de\u670d\u52a1\u7279\u5b9a\u9519\u8bef\u3002\n     */\n    public abstract void set(HalPropValue propValue)\n            throws RemoteException, ServiceSpecificException;\n\n    /**\n     * \u53d6\u6d88\u6240\u6709\u6b63\u5728\u8fdb\u884c\u7684\u5f02\u6b65\u8bf7\u6c42\u3002\n     *\n     * @param requestIds \u5f02\u6b65\u83b7\u53d6/\u8bbe\u7f6e\u8bf7\u6c42ID\u7684\u5217\u8868\u3002\n     */\n    public void cancelRequests(List&lt;Integer&gt; requestIds) {}\n}\n</code></pre> <p><code>VehicleStub</code>\u00a0\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u4ea4\u4e92\u7684\u63a5\u53e3\u3002\u5b83\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u7684\u5c5e\u6027\u83b7\u53d6\u548c\u8bbe\u7f6e\u64cd\u4f5c\uff0c\u5e76\u63d0\u4f9b\u4e86\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u7684\u529f\u80fd\u3002</p> <ul> <li>SubscriptionClient\uff1a\u7528\u4e8e\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u3002\u901a\u8fc7\u00a0<code>subscribe</code>\u00a0\u548c\u00a0<code>unsubscribe</code>\u00a0\u65b9\u6cd5\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76d1\u542c\u8f66\u8f86\u5c5e\u6027\u7684\u53d8\u5316\u3002</li> <li>AsyncGetSetRequest\uff1a\u8868\u793a\u5f02\u6b65\u83b7\u53d6\u6216\u8bbe\u7f6e\u8bf7\u6c42\u7684\u7c7b\uff0c\u5305\u542b\u8bf7\u6c42ID\u3001\u5c5e\u6027\u503c\u548c\u8d85\u65f6\u65f6\u95f4\u3002</li> <li>GetVehicleStubAsyncResult \u548c SetVehicleStubAsyncResult\uff1a\u7528\u4e8e\u8868\u793a\u5f02\u6b65\u83b7\u53d6\u548c\u8bbe\u7f6e\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u5305\u542b\u8bf7\u6c42ID\u548c\u9519\u8bef\u4ee3\u7801\u3002</li> <li>VehicleStubCallbackInterface\uff1a\u5b9a\u4e49\u4e86\u5f02\u6b65\u64cd\u4f5c\u7684\u56de\u8c03\u63a5\u53e3\uff0c\u5305\u62ec\u83b7\u53d6\u548c\u8bbe\u7f6e\u7ed3\u679c\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8d85\u65f6\u5904\u7406\u3002</li> <li>getAsync \u548c setAsync\uff1a\u7528\u4e8e\u5f02\u6b65\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u3002</li> <li>get \u548c set\uff1a\u7528\u4e8e\u540c\u6b65\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u3002</li> <li>getAllPropConfigs\uff1a\u83b7\u53d6\u6240\u6709\u8f66\u8f86\u5c5e\u6027\u7684\u914d\u7f6e\u3002</li> <li>newSubscriptionClient\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u3002</li> <li>cancelRequests\uff1a\u53d6\u6d88\u6b63\u5728\u8fdb\u884c\u7684\u5f02\u6b65\u8bf7\u6c42\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_3","title":"\u56de\u8c03","text":"<p><code>AidlVehicleStub</code>\u00a0\u7ee7\u81ea\u00a0<code>VehicleStub</code>\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u8fdb\u884c\u901a\u4fe1\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// AidlVehicleStub \u7c7b\u662f\u4e00\u4e2a\u6700\u7ec8\u7c7b\uff0c\u7ee7\u627f\u81ea VehicleStub\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86\u7684\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u8fdb\u884c\u901a\u4fe1\u3002\nfinal class AidlVehicleStub extends VehicleStub {\n\n    // \u5b9a\u4e49\u4e00\u4e2a\u5e38\u91cf\u5b57\u7b26\u4e32\uff0c\u8868\u793a AIDL VHAL\uff08\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u670d\u52a1\u7684\u540d\u79f0\u3002\n    private static final String AIDL_VHAL_SERVICE =\n            \"android.hardware.automotive.vehicle.IVehicle/default\";\n\n    // IVehicle \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e AIDL\uff08Android \u63a5\u53e3\u5b9a\u4e49\u8bed\u8a00\uff09\u8fdb\u884c\u901a\u4fe1\u3002\n    private final IVehicle mAidlVehicle;\n\n    // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u5165\u901a\u8fc7 getAidlVehicle() \u65b9\u6cd5\u83b7\u53d6\u7684 IVehicle \u5b9e\u4f8b\u3002\n    AidlVehicleStub() {\n        this(getAidlVehicle());\n    }\n\n    // \u6d4b\u8bd5\u53ef\u89c1\u7684\u6784\u9020\u51fd\u6570\uff0c\u5141\u8bb8\u4f20\u5165\u4e00\u4e2a IVehicle \u5b9e\u4f8b\u3002\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle) {\n        // \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u5165 IVehicle \u5b9e\u4f8b\u548c\u4e00\u4e2a\u65b0\u7684 HandlerThread\u3002\n        this(aidlVehicle,\n                CarServiceUtils.getHandlerThread(AidlVehicleStub.class.getSimpleName()));\n    }\n\n    // \u6d4b\u8bd5\u53ef\u89c1\u7684\u6784\u9020\u51fd\u6570\uff0c\u5141\u8bb8\u4f20\u5165\u4e00\u4e2a IVehicle \u5b9e\u4f8b\u548c\u4e00\u4e2a HandlerThread\u3002\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle, HandlerThread handlerThread) {\n        // \u521d\u59cb\u5316 mAidlVehicle \u4e3a\u4f20\u5165\u7684 aidlVehicle \u5b9e\u4f8b\u3002\n        mAidlVehicle = aidlVehicle;\n\n        // \u521d\u59cb\u5316 HalPropValueBuilder\uff0c\u7528\u4e8e\u6784\u5efa HAL \u5c5e\u6027\u503c\uff0c\u6807\u8bb0\u4e3a AIDL \u6a21\u5f0f\u3002\n        mPropValueBuilder = new HalPropValueBuilder(/*isAidl=*/true);\n\n        // \u521d\u59cb\u5316 mHandlerThread \u4e3a\u4f20\u5165\u7684 handlerThread\u3002\n        mHandlerThread = handlerThread;\n\n        // \u4f7f\u7528\u4f20\u5165\u7684 handlerThread \u7684 looper \u521d\u59cb\u5316 Handler\u3002\n        mHandler = new Handler(mHandlerThread.getLooper());\n\n        // \u521d\u59cb\u5316 GetSetValuesCallback\uff0c\u7528\u4e8e\u5904\u7406 get/set \u64cd\u4f5c\u7684\u56de\u8c03\u3002\n        mGetSetValuesCallback = new GetSetValuesCallback();\n\n        // \u521d\u59cb\u5316 PendingAsyncRequestPool\uff0c\u7528\u4e8e\u7ba1\u7406\u5f02\u6b65\u8bf7\u6c42\uff0c\u4f7f\u7528 handler \u7684 looper\u3002\n        mPendingAsyncRequestPool = new PendingAsyncRequestPool(mHandler.getLooper());\n    }\n\n    // \u79c1\u6709\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6 AIDL VHAL \u670d\u52a1\u7684 IVehicle \u5b9e\u4f8b\u3002\n    @Nullable\n    private static IVehicle getAidlVehicle() {\n        try {\n            // \u5c1d\u8bd5\u83b7\u53d6 AIDL VHAL \u670d\u52a1\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a IVehicle \u63a5\u53e3\u3002\n            return IVehicle.Stub.asInterface(\n                    ServiceManagerHelper.waitForDeclaredService(AIDL_VHAL_SERVICE));\n        } catch (RuntimeException e) {\n            // \u5982\u679c\u83b7\u53d6\u670d\u52a1\u5931\u8d25\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u3002\n            Slogf.w(TAG, \"Failed to get \\\"\" + AIDL_VHAL_SERVICE + \"\\\" service\", e);\n        }\n        // \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de null\u3002\n        return null;\n    }\n}\n</code></pre> <ul> <li><code>mAidlVehicle</code>\uff1a\u8fd9\u662f\u4e00\u4e2a\u00a0<code>IVehicle</code>\u00a0\u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e AIDL \u8fdb\u884c\u901a\u4fe1\u3002</li> <li><code>mGetSetValuesCallback</code>\uff1a\u7528\u4e8e\u5904\u7406 get / set \u64cd\u4f5c\u7684\u56de\u8c03\uff08\u540c\u6b65\u3001\u5f02\u6b65\uff09\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#getsetvaluescallback","title":"GetSetValuesCallback","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    // GetSetValuesCallback \u662f\u4e00\u4e2a\u5185\u90e8\u7c7b\uff0c\u7ee7\u627f\u81ea IVehicleCallback.Stub\uff0c\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u83b7\u53d6\u548c\u8bbe\u7f6e\u56de\u8c03\u3002\n    private final class GetSetValuesCallback extends IVehicleCallback.Stub {\n\n        // \u5904\u7406\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u56de\u8c03\n        @Override\n        public void onGetValues(GetValueResults responses) throws RemoteException {\n            // \u8c03\u7528\u5916\u90e8\u7c7b\u7684 onGetValues \u65b9\u6cd5\n            AidlVehicleStub.this.onGetValues(responses);\n        }\n\n        // \u5904\u7406\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u56de\u8c03\n        @Override\n        public void onSetValues(SetValueResults responses) throws RemoteException {\n            // \u8c03\u7528\u5916\u90e8\u7c7b\u7684 onSetValues \u65b9\u6cd5\n            AidlVehicleStub.this.onSetValues(responses);\n        }\n\n        // \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff1a\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\n        @Override\n        public void onPropertyEvent(VehiclePropValues propValues, int sharedMemoryFileCount)\n                throws RemoteException {\n            throw new UnsupportedOperationException(\n                    \"GetSetValuesCallback only support onGetValues or onSetValues\");\n        }\n\n        // \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff1a\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\n        @Override\n        public void onPropertySetError(VehiclePropErrors errors) throws RemoteException {\n            throw new UnsupportedOperationException(\n                    \"GetSetValuesCallback only support onGetValues or onSetValues\");\n        }\n\n        // \u83b7\u53d6\u63a5\u53e3\u7684\u54c8\u5e0c\u503c\n        @Override\n        public String getInterfaceHash() {\n            return IVehicleCallback.HASH;\n        }\n\n        // \u83b7\u53d6\u63a5\u53e3\u7684\u7248\u672c\u53f7\n        @Override\n        public int getInterfaceVersion() {\n            return IVehicleCallback.VERSION;\n        }\n    }\n\n    // \u5904\u7406\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u903b\u8f91\n    private void onGetValues(GetValueResults responses) {\n        // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onGetValues\");\n\n        // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL Parcelable \u5bf9\u8c61\n        GetValueResults origResponses = (GetValueResults)\n                LargeParcelable.reconstructStableAIDLParcelable(responses,\n                        /* keepSharedMemory= */ false);\n\n        // \u5904\u7406\u83b7\u53d6\u548c\u8bbe\u7f6e\u503c\u7684\u901a\u7528\u903b\u8f91\n        onGetSetValues(origResponses.payloads, new AsyncGetResultsHandler(mPropValueBuilder),\n                mPendingSyncGetValueRequestPool);\n\n        // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceEnd(TRACE_TAG);\n    }\n\n    // \u5904\u7406\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u903b\u8f91\n    private void onSetValues(SetValueResults responses) {\n        // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onSetValues\");\n\n        // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL Parcelable \u5bf9\u8c61\n        SetValueResults origResponses = (SetValueResults)\n                LargeParcelable.reconstructStableAIDLParcelable(responses,\n                        /* keepSharedMemory= */ false);\n\n        // \u5904\u7406\u83b7\u53d6\u548c\u8bbe\u7f6e\u503c\u7684\u901a\u7528\u903b\u8f91\n        onGetSetValues(origResponses.payloads, new AsyncSetResultsHandler(),\n                mPendingSyncSetValueRequestPool);\n\n        // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceEnd(TRACE_TAG);\n    }\n\n    /**\n     * \u5904\u7406 onGetValues \u548c onSetValues \u7684\u901a\u7528\u51fd\u6570\u3002\n     */\n    private &lt;VhalResultType&gt; void onGetSetValues(VhalResultType[] vhalResults,\n                                                 AsyncResultsHandler asyncResultsHandler,\n                                                 PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool) {\n        synchronized (mLock) {\n            for (VhalResultType result : vhalResults) {\n                long vhalRequestId = asyncResultsHandler.getVhalRequestId(result);\n                if (!mPendingAsyncRequestPool.contains(vhalRequestId)) {\n                    // \u5982\u679c\u5728\u5f02\u6b65\u8bf7\u6c42\u6c60\u4e2d\u627e\u4e0d\u5230\u8bf7\u6c42 ID\uff0c\u5219\u5047\u8bbe\u8fd9\u662f\u4e00\u4e2a\u540c\u6b65\u8bf7\u6c42\u3002\n                    completePendingSyncRequestLocked(pendingSyncRequestPool, vhalRequestId, result);\n                    continue;\n                }\n\n                // \u5b8c\u6210\u5f02\u6b65\u8bf7\u6c42\n                AsyncRequestInfo requestInfo = mPendingAsyncRequestPool.finishRequestIfFound(\n                        vhalRequestId);\n                if (requestInfo == null) {\n                    Slogf.w(TAG,\n                            \"No pending request for ID: %s, possibly already timed out, \"\n                                    + \"or cancelled, or the client already died\", vhalRequestId);\n                    continue;\n                }\n                // \u6dfb\u52a0\u8f66\u8f86\u5c5e\u6027\u7ed3\u679c\n                asyncResultsHandler.addVhalResult(requestInfo.getClientCallback(),\n                        requestInfo.getServiceRequestId(), result);\n            }\n        }\n        // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub call async result callback\");\n        // \u8c03\u7528\u8f66\u8f86\u5b58\u6839\u56de\u8c03\n        asyncResultsHandler.callVehicleStubCallback();\n        // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\n        Trace.traceEnd(TRACE_TAG);\n    }\n\n    @Override\n    void callVehicleStubCallback() {\n        // \u904d\u5386\u6240\u6709\u56de\u8c03\u63a5\u53e3\uff0c\u5e76\u8c03\u7528\u5176 onSetAsyncResults \u65b9\u6cd5\n        for (Map.Entry&lt;VehicleStubCallbackInterface, List&lt;SetVehicleStubAsyncResult&gt;&gt; entry :\n                mCallbackToResults.entrySet()) {\n            entry.getKey().onSetAsyncResults(entry.getValue());\n        }\n    }\n}\n</code></pre> <p>\u5185\u90e8\u7c7b\u00a0<code>GetSetValuesCallback</code>\u00a0\u662f\u4ece\u00a0<code>IVehicleCallback.Stub</code>\u00a0\u7ee7\u627f\u800c\u6765\u7684\uff0c\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u83b7\u53d6\u548c\u8bbe\u7f6e\u56de\u8c03\u3002\u5b83\u5b9e\u73b0\u4e86\u00a0<code>onGetValues</code>\u00a0\u548c\u00a0<code>onSetValues</code>\u00a0\u65b9\u6cd5\u3002\u5f53\u8fd9\u4e9b\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u4f1a\u89e6\u53d1\u00a0<code>AidlVehicleStub</code>\u00a0\u7c7b\u4e2d\u7684\u76f8\u5e94\u5904\u7406\u903b\u8f91\uff0c\u6700\u7ec8\u8c03\u7528\u00a0<code>callVehicleStubCallback()</code>\u00a0\u65b9\u6cd5\u3002</p> <p>\u5728\u00a0<code>callVehicleStubCallback()</code>\u00a0\u65b9\u6cd5\u4e2d\uff0c\u4f1a\u904d\u5386\u6240\u6709\u7684\u00a0<code>VehicleStubCallbackInterface</code>\u00a0\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b83\u4eec\u7684\u00a0<code>onSetAsyncResults</code>\u00a0\u65b9\u6cd5\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u952e\u7684\u90e8\u5206\u662f\u5bf9\u00a0<code>mCallbackToResults</code>\u00a0\u7684\u904d\u5386\uff0c\u8fd9\u4e2a\u90e8\u5206\u76ee\u524d\u8fd8\u6ca1\u6709\u8be6\u7ec6\u8bf4\u660e\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4eba\u611f\u5230\u6709\u4e9b\u56f0\u60d1\u3002\u4e0d\u8fc7\uff0c\u5728\u540e\u7eed\u5206\u6790\u5f02\u6b65\u00a0<code>get/set</code>\u00a0\u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e00\u90e8\u5206\u4f1a\u53d8\u5f97\u66f4\u52a0\u6e05\u6670\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlsubscriptionclient","title":"AidlSubscriptionClient","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u65b0\u7684 {@code SubscriptionClient}\uff0c\u7528\u4e8e\u8ba2\u9605\u6216\u53d6\u6d88\u8ba2\u9605\u3002\n     *\n     * @param callback \u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u7684\u56de\u8c03\u3002\n     * @return \u4e00\u4e2a {@code SubscriptionClient}\uff0c\u7528\u4e8e\u8ba2\u9605\u6216\u53d6\u6d88\u8ba2\u9605\u3002\n     */\n    @Override\n    public SubscriptionClient newSubscriptionClient(VehicleHalCallback callback) {\n        return new AidlSubscriptionClient(callback, mPropValueBuilder);\n    }\n\n    // AidlSubscriptionClient \u662f\u4e00\u4e2a\u5185\u90e8\u7c7b\uff0c\u5b9e\u73b0\u4e86 IVehicleCallback.Stub \u548c SubscriptionClient \u63a5\u53e3\u3002\n    private class AidlSubscriptionClient extends IVehicleCallback.Stub\n            implements SubscriptionClient {\n        private final VehicleHalCallback mCallback; // \u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7684\u56de\u8c03\u3002\n        private final HalPropValueBuilder mBuilder; // \u7528\u4e8e\u6784\u5efa HAL \u5c5e\u6027\u503c\u7684\u6784\u5efa\u5668\u3002\n\n        // \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u56de\u8c03\u548c\u6784\u5efa\u5668\u3002\n        AidlSubscriptionClient(VehicleHalCallback callback, HalPropValueBuilder builder) {\n            mCallback = callback;\n            mBuilder = builder;\n        }\n\n        // \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff1a\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\n        @Override\n        public void onGetValues(GetValueResults responses) throws RemoteException {\n            throw new UnsupportedOperationException(\n                    \"onGetValues should never be called on AidlSubscriptionClient\");\n        }\n\n        // \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff1a\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\n        @Override\n        public void onSetValues(SetValueResults responses) throws RemoteException {\n            throw new UnsupportedOperationException(\n                    \"onSetValues should never be called on AidlSubscriptionClient\");\n        }\n\n        // \u5904\u7406\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\n        @Override\n        public void onPropertyEvent(VehiclePropValues propValues, int sharedMemoryFileCount)\n                throws RemoteException {\n            // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL Parcelable \u5bf9\u8c61\n            VehiclePropValues origPropValues = (VehiclePropValues)\n                    LargeParcelable.reconstructStableAIDLParcelable(propValues,\n                            /* keepSharedMemory= */ false);\n            // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8 HAL \u5c5e\u6027\u503c\n            ArrayList&lt;HalPropValue&gt; values = new ArrayList&lt;&gt;(origPropValues.payloads.length);\n            for (VehiclePropValue value : origPropValues.payloads) {\n                values.add(mBuilder.build(value)); // \u4f7f\u7528\u6784\u5efa\u5668\u6784\u5efa HAL \u5c5e\u6027\u503c\n            }\n            mCallback.onPropertyEvent(values); // \u8c03\u7528\u56de\u8c03\u5904\u7406\u4e8b\u4ef6\n        }\n\n        // \u5904\u7406\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\n        @Override\n        public void onPropertySetError(VehiclePropErrors errors) throws RemoteException {\n            // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL Parcelable \u5bf9\u8c61\n            VehiclePropErrors origErrors = (VehiclePropErrors)\n                    LargeParcelable.reconstructStableAIDLParcelable(errors,\n                            /* keepSharedMemory= */ false);\n            // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u8f66\u8f86\u5c5e\u6027\u9519\u8bef\n            ArrayList&lt;VehiclePropError&gt; errorList = new ArrayList&lt;&gt;(origErrors.payloads.length);\n            for (VehiclePropError error : origErrors.payloads) {\n                errorList.add(error); // \u6dfb\u52a0\u9519\u8bef\u5230\u5217\u8868\n            }\n            mCallback.onPropertySetError(errorList); // \u8c03\u7528\u56de\u8c03\u5904\u7406\u9519\u8bef\n        }\n\n        // \u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\n        @Override\n        public void subscribe(SubscribeOptions[] options)\n                throws RemoteException, ServiceSpecificException {\n            mAidlVehicle.subscribe(this, options, /* maxSharedMemoryFileCount= */ 2);\n        }\n\n        // \u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\n        @Override\n        public void unsubscribe(int prop) throws RemoteException, ServiceSpecificException {\n            mAidlVehicle.unsubscribe(this, new int[]{prop});\n        }\n\n        // \u83b7\u53d6\u63a5\u53e3\u7684\u54c8\u5e0c\u503c\n        @Override\n        public String getInterfaceHash() {\n            return IVehicleCallback.HASH;\n        }\n\n        // \u83b7\u53d6\u63a5\u53e3\u7684\u7248\u672c\u53f7\n        @Override\n        public int getInterfaceVersion() {\n            return IVehicleCallback.VERSION;\n        }\n    }\n}\n</code></pre> <p><code>AidlSubscriptionClient</code>\u00a0\u548c\u00a0<code>GetSetValuesCallback</code>\u00a0\u90fd\u662f\u00a0<code>AidlVehicleStub</code>\u00a0\u7c7b\u7684\u5185\u90e8\u7c7b\uff0c\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\u00a0<code>IVehicleCallback.Stub</code>\uff0c\u4f46\u5b83\u4eec\u652f\u6301\u7684\u64cd\u4f5c\u4e0d\u540c\uff1a - <code>AidlSubscriptionClient</code>\u00a0\u53ea\u652f\u6301\u00a0<code>onPropertyEvent</code>\u00a0\u548c\u00a0<code>onPropertySetError</code>\u00a0\u65b9\u6cd5\uff0c\u4e0d\u652f\u6301\u00a0<code>onGetValues</code>\u00a0\u548c\u00a0<code>onSetValues</code>\u00a0\u65b9\u6cd5\u3002 - <code>GetSetValuesCallback</code>\u00a0\u53ea\u652f\u6301\u00a0<code>onGetValues</code>\u00a0\u548c\u00a0<code>onSetValues</code>\u00a0\u65b9\u6cd5\uff0c\u4e0d\u652f\u6301\u00a0<code>onPropertyEvent</code>\u00a0\u548c\u00a0<code>onPropertySetError</code>\u00a0\u65b9\u6cd5\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a Markdown \u8868\u683c\uff0c\u663e\u793a\u8fd9\u4e24\u4e2a\u5185\u90e8\u7c7b\u5206\u522b\u652f\u6301\u7684\u63a5\u53e3\uff1a</p> IVehicleCallback.Stub\u56de\u8c03\u65b9\u6cd5 AidlSubscriptionClient GetSetValuesCallback onGetValues \u4e0d\u652f\u6301 \u652f\u6301 onSetValues \u4e0d\u652f\u6301 \u652f\u6301 onPropertyEvent \u652f\u6301 \u4e0d\u652f\u6301 onPropertySetError \u652f\u6301 \u4e0d\u652f\u6301 <p>VehicleHalCallback \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHalCallback.java\n\n/**\n * VehicleHalCallback \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u4e86 VehicleHal \u652f\u6301\u7684\u56de\u8c03\u51fd\u6570\u3002\n */\npublic interface VehicleHalCallback {\n    /**\n     * \u5f53\u65b0\u7684\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     */\n    void onPropertyEvent(ArrayList&lt;HalPropValue&gt; values);\n\n    /**\n     * \u5f53\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     */\n    void onPropertySetError(ArrayList&lt;VehiclePropError&gt; errors);\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u00a0<code>AidlVehicleStub</code>\u00a0\u7684\u5206\u6790\u544a\u4e00\u6bb5\u843d\u3002\u867d\u7136\u00a0<code>AidlVehicleStub</code>\u00a0\u7c7b\u4e2d\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\uff0c\u4f46\u5982\u679c\u4ec5\u4ec5\u5bf9\u5176\u8fdb\u884c\u5168\u9762\u7684\u5206\u6790\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4eba\u611f\u5230\u56f0\u60d1\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9996\u5148\u5173\u6ce8\u5176\u56de\u8c03\u673a\u5236\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u5176\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u7ed3\u5408\u5177\u4f53\u7684\u4f7f\u7528\u573a\u666f\u8fdb\u884c\u5206\u4eab\u5982\u4f55\u8c03\u5230 VHAL\uff0c\u8fd9\u6837\u624d\u80fd\u5e2e\u52a9\u5927\u5bb6\u66f4\u5bb9\u6613\u5730\u7406\u89e3\u5176\u5b9e\u9645\u5e94\u7528\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehal","title":"VehicleHal","text":"<p>\u5728\u6df1\u5165\u8bb2\u89e3 VehicleHal \u5982\u4f55\u8c03\u7528 VHAL \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u8be6\u7ec6\u8bf4\u660e VehicleHal \u662f\u5982\u4f55\u63a5\u6536\u5230 AidlSubscriptionClient \u7684\u56de\u8c03\uff0c\u5373\u00a0<code>onPropertyEvent</code>\u00a0\u548c\u00a0<code>onPropertySetError</code>\u00a0\u65b9\u6cd5\u3002\u8fd9\u4e00\u6b65\u9aa4\u5bf9\u4e8e\u7406\u89e3\u6574\u4e2a\u6d41\u7a0b\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u6b64\u6211\u4eec\u8be6\u7ec6\u8bb2\u89e3\u8fd9\u4e00\u8fc7\u7a0b\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n/**\n * VehicleHal \u7c7b\u662f\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u7684\u62bd\u8c61\u3002\u8be5\u7c7b\u8d1f\u8d23\u5904\u7406\u4e0e\u672c\u5730 HAL \u7684\u63a5\u53e3\uff0c\u5e76\u5bf9\u63a5\u6536\u5230\u7684\u6570\u636e\u8fdb\u884c\u57fa\u672c\u89e3\u6790\uff08\u7c7b\u578b\u68c0\u67e5\uff09\u3002\n * \u6bcf\u4e2a\u4e8b\u4ef6\u4f1a\u88ab\u53d1\u9001\u5230\u76f8\u5e94\u7684 {@link HalServiceBase} \u5b9e\u73b0\uff0c\u7531 {@link HalServiceBase} \u8d1f\u8d23\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 Car*Service\uff0c\n * \u4ee5\u4fbf\u901a\u8fc7 Car*Manager API \u63d0\u4f9b\u7ed9\u4e0a\u5c42\u5e94\u7528\u4f7f\u7528\u3002\n */\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    private final SubscriptionClient mSubscriptionClient; // \u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u63a5\u6536\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u3002\n    private final VehicleStub mVehicleStub; // VehicleStub \u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u901a\u4fe1\u3002\n\n    private final HandlerThread mHandlerThread; // \u5904\u7406\u7ebf\u7a0b\uff0c\u7528\u4e8e\u5f02\u6b65\u5904\u7406\u4e8b\u4ef6\u3002\n    private final Handler mHandler; // Handler\uff0c\u7528\u4e8e\u5728\u5904\u7406\u7ebf\u7a0b\u4e0a\u8c03\u5ea6\u4efb\u52a1\u3002\n\n    /**\n     * \u6784\u9020\u4e00\u4e2a\u65b0\u7684 {@link VehicleHal} \u5bf9\u8c61\uff0c\u7ed9\u5b9a {@link Context} \u548c {@link VehicleStub}\u3002\n     */\n    public VehicleHal(Context context, VehicleStub vehicle) {\n        this(context, /* powerHal= */ null, /* propertyHal= */ null,\n                /* inputHal= */ null, /* vmsHal= */ null, /* userHal= */ null,\n                /* diagnosticHal= */ null, /* clusterHalService= */ null,\n                /* timeHalService= */ null,\n                CarServiceUtils.getHandlerThread(VehicleHal.class.getSimpleName()), vehicle);\n    }\n\n    /**\n     * \u6784\u9020\u4e00\u4e2a\u65b0\u7684 {@link VehicleHal} \u5bf9\u8c61\uff0c\u7ed9\u5b9a\u4f20\u9012\u7684\u670d\u52a1\u53c2\u6570\u3002\n     * \u6b64\u65b9\u6cd5\u4ec5\u4f9b\u6d4b\u8bd5\u4f7f\u7528\u3002\n     */\n    @VisibleForTesting\n    VehicleHal(Context context,\n               PowerHalService powerHal,\n               PropertyHalService propertyHal,\n               InputHalService inputHal,\n               VmsHalService vmsHal,\n               UserHalService userHal,\n               DiagnosticHalService diagnosticHal,\n               ClusterHalService clusterHalService,\n               TimeHalService timeHalService,\n               HandlerThread handlerThread,\n               VehicleStub vehicle) {\n\n        mHandlerThread = handlerThread;\n        mHandler = new Handler(mHandlerThread.getLooper());\n\n        mVehicleStub = vehicle;\n        mSubscriptionClient = vehicle.newSubscriptionClient(this); // \u521b\u5efa\u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u3002\n    }\n\n    /**\n     * \u5f53\u65b0\u7684\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     * @param propValues \u5305\u542b\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7684\u5217\u8868\u3002\n     */\n    @Override\n    public void onPropertyEvent(ArrayList&lt;HalPropValue&gt; propValues) {\n        // \u5c06\u4e8b\u4ef6\u7684\u5904\u7406\u4efb\u52a1\u63d0\u4ea4\u5230 Handler \u7684\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u5f02\u6b65\u6267\u884c\u3002\n        mHandler.post(() -&gt; handleOnPropertyEvent(propValues));\n    }\n\n    /**\n     * \u5f53\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     * @param errors \u5305\u542b\u8f66\u8f86\u5c5e\u6027\u9519\u8bef\u7684\u5217\u8868\u3002\n     */\n    @Override\n    public void onPropertySetError(ArrayList&lt;VehiclePropError&gt; errors) {\n        // \u5c06\u9519\u8bef\u7684\u5904\u7406\u4efb\u52a1\u63d0\u4ea4\u5230 Handler \u7684\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u5f02\u6b65\u6267\u884c\u3002\n        mHandler.post(() -&gt; handleOnPropertySetError(errors));\n    }\n\n    /**\n     * \u5904\u7406\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u3002\n     * @param propValues \u5305\u542b\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7684\u5217\u8868\u3002\n     */\n    private void handleOnPropertyEvent(List&lt;HalPropValue&gt; propValues) {\n        synchronized (mLock) { // \u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff0c\u9632\u6b62\u5e76\u53d1\u4fee\u6539\u5171\u4eab\u6570\u636e\u3002\n            for (int i = 0; i &lt; propValues.size(); i++) {\n                HalPropValue v = propValues.get(i); // \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u3002\n                int propId = v.getPropId(); // \u83b7\u53d6\u4e8b\u4ef6\u7684\u5c5e\u6027 ID\u3002\n\n                // \u6839\u636e\u5c5e\u6027 ID \u67e5\u627e\u5bf9\u5e94\u7684 HalServiceBase \u5b9e\u4f8b\u3002\n                HalServiceBase service = mPropertyHandlers.get(propId);\n                if (service == null) {\n                    // \u5982\u679c\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8df3\u8fc7\u8be5\u4e8b\u4ef6\u3002\n                    Slogf.e(CarLog.TAG_HAL, \"handleOnPropertyEvent: HalService not found for %s\", v);\n                    continue;\n                }\n\n                // \u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230\u670d\u52a1\u7684\u5206\u53d1\u5217\u8868\u4e2d\u3002\n                service.getDispatchList().add(v);\n                // \u5c06\u670d\u52a1\u6dfb\u52a0\u5230\u5f85\u5206\u53d1\u7684\u670d\u52a1\u5217\u8868\u4e2d\u3002\n                mServicesToDispatch.add(service);\n\n                // \u66f4\u65b0\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u7528\u4e8e\u8bb0\u5f55\u8be5\u5c5e\u6027\u7684\u4e8b\u4ef6\u4fe1\u606f\u3002\n                VehiclePropertyEventInfo info = mEventLog.get(propId);\n                if (info == null) {\n                    // \u5982\u679c\u8be5\u5c5e\u6027\u7684\u4e8b\u4ef6\u4fe1\u606f\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u7684\u4e8b\u4ef6\u4fe1\u606f\u5e76\u5b58\u50a8\u3002\n                    info = new VehiclePropertyEventInfo(v);\n                    mEventLog.put(propId, info);\n                } else {\n                    // \u5982\u679c\u4e8b\u4ef6\u4fe1\u606f\u5df2\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u65b0\u7684\u4e8b\u4ef6\u3002\n                    info.addNewEvent(v);\n                }\n            }\n        }\n\n        // \u904d\u5386\u6240\u6709\u5f85\u5206\u53d1\u7684\u670d\u52a1\uff0c\u8c03\u7528\u5176 onHalEvents \u65b9\u6cd5\u5904\u7406\u4e8b\u4ef6\u3002\n        for (HalServiceBase s : mServicesToDispatch) {\n            s.onHalEvents(s.getDispatchList()); // \u5904\u7406\u4e8b\u4ef6\u3002\n            s.getDispatchList().clear(); // \u6e05\u7a7a\u670d\u52a1\u7684\u5206\u53d1\u5217\u8868\u3002\n        }\n        // \u6e05\u7a7a\u5f85\u5206\u53d1\u7684\u670d\u52a1\u5217\u8868\u3002\n        mServicesToDispatch.clear();\n    }\n\n    /**\n     * \u5904\u7406\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u3002\n     * @param errors \u5305\u542b\u8f66\u8f86\u5c5e\u6027\u9519\u8bef\u7684\u5217\u8868\u3002\n     */\n    private void handleOnPropertySetError(List&lt;VehiclePropError&gt; errors) {\n        // \u6309\u5c5e\u6027 ID \u5bf9\u9519\u8bef\u8fdb\u884c\u5206\u7ec4\u3002\n        SparseArray&lt;ArrayList&lt;VehiclePropError&gt;&gt; errorsByPropId =\n                new SparseArray&lt;ArrayList&lt;VehiclePropError&gt;&gt;();\n        for (int i = 0; i &lt; errors.size(); i++) {\n            VehiclePropError error = errors.get(i); // \u83b7\u53d6\u5f53\u524d\u9519\u8bef\u3002\n            int errorCode = error.errorCode; // \u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u3002\n            int propId = error.propId; // \u83b7\u53d6\u5c5e\u6027 ID\u3002\n            int areaId = error.areaId; // \u83b7\u53d6\u533a\u57df ID\u3002\n\n            // \u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u3002\n            Slogf.w(CarLog.TAG_HAL, \"onPropertySetError, errorCode: %d, prop: 0x%x, area: 0x%x\",\n                    errorCode, propId, areaId);\n\n            // \u5982\u679c\u5c5e\u6027 ID \u65e0\u6548\uff0c\u5219\u8df3\u8fc7\u8be5\u9519\u8bef\u3002\n            if (propId == VehicleProperty.INVALID) {\n                continue;\n            }\n\n            // \u83b7\u53d6\u6216\u521b\u5efa\u8be5\u5c5e\u6027 ID \u5bf9\u5e94\u7684\u9519\u8bef\u5217\u8868\u3002\n            ArrayList&lt;VehiclePropError&gt; propErrors;\n            if (errorsByPropId.get(propId) == null) {\n                propErrors = new ArrayList&lt;VehiclePropError&gt;();\n                errorsByPropId.put(propId, propErrors);\n            } else {\n                propErrors = errorsByPropId.get(propId);\n            }\n            // \u5c06\u9519\u8bef\u6dfb\u52a0\u5230\u9519\u8bef\u5217\u8868\u4e2d\u3002\n            propErrors.add(error);\n        }\n\n        // \u904d\u5386\u6bcf\u4e2a\u5c5e\u6027 ID \u7684\u9519\u8bef\u5217\u8868\uff0c\u5e76\u8c03\u7528\u5bf9\u5e94\u670d\u52a1\u7684 onPropertySetError \u65b9\u6cd5\u3002\n        for (int i = 0; i &lt; errorsByPropId.size(); i++) {\n            int propId = errorsByPropId.keyAt(i); // \u83b7\u53d6\u5c5e\u6027 ID\u3002\n            HalServiceBase service;\n            synchronized (mLock) { // \u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002\n                service = mPropertyHandlers.get(propId); // \u83b7\u53d6\u5bf9\u5e94\u7684\u670d\u52a1\u3002\n            }\n            if (service == null) {\n                // \u5982\u679c\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8df3\u8fc7\u3002\n                Slogf.e(CarLog.TAG_HAL,\n                        \"handleOnPropertySetError: HalService not found for prop: 0x%x\", propId);\n                continue;\n            }\n\n            // \u83b7\u53d6\u8be5\u5c5e\u6027 ID \u7684\u9519\u8bef\u5217\u8868\uff0c\u5e76\u8c03\u7528\u670d\u52a1\u7684 onPropertySetError \u65b9\u6cd5\u5904\u7406\u9519\u8bef\u3002\n            ArrayList&lt;VehiclePropError&gt; propErrors = errorsByPropId.get(propId);\n            service.onPropertySetError(propErrors);\n        }\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684\u6d41\u7a0b\u5176\u5b9e\u5f88\u7b80\u5355\uff1a<code>VehicleHal</code>\u00a0\u63a5\u6536\u5230\u6765\u81ea\u00a0<code>AidlVehicleStub</code>\u00a0\u7684\u56de\u8c03\u540e\uff0c\u4f1a\u6839\u636e\u4e8b\u4ef6\u627e\u5230\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230\u8be5\u670d\u52a1\u7684\u5206\u53d1\u5217\u8868\u4e2d\uff0c\u5e76\u5c06\u670d\u52a1\u672c\u8eab\u6dfb\u52a0\u5230\u5f85\u5206\u53d1\u7684\u670d\u52a1\u5217\u8868\u4e2d\u3002\u63a5\u7740\uff0c<code>VehicleHal</code>\u00a0\u4f1a\u904d\u5386\u5f85\u5206\u53d1\u7684\u670d\u52a1\u5217\u8868\uff0c\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u7684\u00a0<code>onHalEvents</code>\u00a0\u65b9\u6cd5\u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u3002</p> <p>\u8fd9\u4e2a\u670d\u52a1\u5217\u8868\u662f\u5728 Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u4e2d VehicleHal.priorityInit() \u6709\u5206\u6790\u5230\uff0c\u6700\u7ec8\u662f\u4f1a\u6d3e\u53d1\u5230\u771f\u6b63\u7684\u670d\u52a1\u4e2d\uff0c\u5982\uff1a</p> <pre><code>public class InputHalService extends HalServiceBase {  \n    @Override  \n    public void onHalEvents(List&lt;HalPropValue&gt; values) {  \n        // \u5ffd\u7565\u4ee3\u7801  \n    }  \n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u4f1a\u4ea7\u751f\u7591\u95ee\uff1a\u5982\u679c\u6211\u662f\u00a0<code>PowerHalService</code>\uff0c\u800c\u6211\u4e0d\u9700\u8981\u5904\u7406\u8f93\u5165\u4e8b\u4ef6\uff0c\u90a3\u4e48\u5728\u00a0<code>PowerHalService</code>\u00a0\u7684\u00a0<code>onHalEvents()</code>\u00a0\u65b9\u6cd5\u4e2d\u662f\u5426\u4f1a\u63a5\u6536\u5230\u8f93\u5165\u4e8b\u4ef6\u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u5728 Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u4e2d\uff0c\u6211\u4eec\u5206\u6790\u4e86\u00a0<code>VehicleHal.priorityInit()</code>\u00a0\u65b9\u6cd5\uff0c\u4e86\u89e3\u5230\u7cfb\u7edf\u4f1a\u67e5\u8be2\u6bcf\u4e2a\u670d\u52a1\u652f\u6301\u7684\u5c5e\u6027\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5c5e\u6027\u4e0e\u76f8\u5e94\u7684\u670d\u52a1\u5173\u8054\u8d77\u6765\u3002\u5f53\u65f6\u6211\u4eec\u53ea\u662f\u7b80\u5355\u63d0\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u4ec5\u51ed\u90a3\u6bb5\u4ee3\u7801\u53ef\u80fd\u8fd8\u4e0d\u592a\u80fd\u7406\u89e3\u8fd9\u79cd\u8bbe\u8ba1\u601d\u8def\u7684\u6df1\u610f\u3002\u76f4\u5230\u73b0\u5728\uff0c\u6211\u4eec\u770b\u5230\u4e8b\u4ef6\u56de\u8c03\u7ed9\u6bcf\u4e2a\u670d\u52a1\u65f6\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u7684\u5408\u7406\u6027\u624d\u53d8\u5f97\u66f4\u52a0\u6e05\u6670\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6bcf\u4e2a\u670d\u52a1\u53ea\u4f1a\u63a5\u6536\u5230\u5b83\u6240\u5173\u5fc3\u7684\u4e8b\u4ef6\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684\u6548\u7387\u548c\u6a21\u5757\u5316\u7a0b\u5ea6\u3002</p> <p>\u73b0\u5728\uff0c\u80cc\u666f\u77e5\u8bc6\u5df2\u7ecf\u4ecb\u7ecd\u5b8c\u6bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6b63\u5f0f\u8fdb\u5165\u4e3b\u9898\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_4","title":"\u540c\u6b65\u83b7\u53d6\u5c5e\u6027","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalget","title":"VehicleHal.get()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u5bf9\u5e94\u7684 {@link HalPropValue}\u3002\n     *\n     * @param requestedPropValue \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n     * @return \u8bf7\u6c42\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     * @throws IllegalArgumentException \u5982\u679c\u53c2\u6570\u65e0\u6548\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fd4\u56de\u9519\u8bef\u3002\n     */\n    public HalPropValue get(HalPropValue requestedPropValue)\n            throws IllegalArgumentException, ServiceSpecificException {\n        return getValueWithRetry(requestedPropValue);\n    }\n\n    /**\n     * \u5c1d\u8bd5\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\uff0c\u652f\u6301\u91cd\u8bd5\u673a\u5236\u3002\n     *\n     * @param value \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n     * @return \u83b7\u53d6\u5230\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     */\n    private HalPropValue getValueWithRetry(HalPropValue value) {\n        return getValueWithRetry(value, /* maxRetries= */ 0);\n    }\n\n    /**\n     * \u5c1d\u8bd5\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\uff0c\u652f\u6301\u6307\u5b9a\u6b21\u6570\u7684\u91cd\u8bd5\u673a\u5236\u3002\n     *\n     * @param value \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n     * @param maxRetries \u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002\n     * @return \u83b7\u53d6\u5230\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     */\n    private HalPropValue getValueWithRetry(HalPropValue value, int maxRetries) {\n        HalPropValue result;\n        // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"VehicleStub#getValueWithRetry\"\n        Trace.traceBegin(TRACE_TAG, \"VehicleStub#getValueWithRetry\");\n        try {\n            // \u8c03\u7528\u53ef\u91cd\u8bd5\u7684\u83b7\u53d6\u65b9\u6cd5\n            result = invokeRetriable((requestValue) -&gt; {\n                // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"VehicleStub#get\"\n                Trace.traceBegin(TRACE_TAG, \"VehicleStub#get\");\n                try {\n                    // \u4ece\u8f66\u8f86\u5b58\u6839\u83b7\u53d6\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\n                    return mVehicleStub.get(requestValue);\n                } finally {\n                    // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\n                    Trace.traceEnd(TRACE_TAG);\n                }\n            }, \"get\", value, mMaxDurationForRetryMs, mSleepBetweenRetryMs, maxRetries);\n        } finally {\n            // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\n            Trace.traceEnd(TRACE_TAG);\n        }\n\n        // \u5982\u679c\u7ed3\u679c\u4e3a null\uff0c\u4e14\u72b6\u6001\u4e3a OKAY\uff0c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u8868\u793a\u5c5e\u6027\u503c\u4e0d\u53ef\u7528\n        if (result == null) {\n            throw new ServiceSpecificException(StatusCode.NOT_AVAILABLE,\n                    errorMessage(\"get\", value, \"VHAL returns null for property value\"));\n        }\n        return result;\n    }\n}\n</code></pre> <p>\u8fd9\u4e2a\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7 <code>get()</code> \u65b9\u6cd5\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\uff0c\u6700\u7ec8\u662f\u8c03\u5230\u4e86 <code>mVehicleStub.get()</code>\u3002\u6211\u4eec\u7ee7\u7eed\u770b\u8fd9\u4e2a <code>invokeRetriable()</code> \u65b9\u6cd5\u662f\u5e72\u4ec0\u4e48\u7684\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalinvokeretriable","title":"VehicleHal.invokeRetriable()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u8c03\u7528\u4e00\u4e2a\u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\u3002\n     *\n     * @param action \u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\u63a5\u53e3\u3002\n     * @param operation \u64cd\u4f5c\u540d\u79f0\uff0c\u7528\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u3002\n     * @param requestValue \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n     * @param maxDurationForRetryMs \u6700\u5927\u91cd\u8bd5\u6301\u7eed\u65f6\u95f4\uff08\u6beb\u79d2\uff09\u3002\n     * @param sleepBetweenRetryMs \u6bcf\u6b21\u91cd\u8bd5\u4e4b\u95f4\u7684\u4f11\u7720\u65f6\u95f4\uff08\u6beb\u79d2\uff09\u3002\n     * @param maxRetries \u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002\n     * @return \u64cd\u4f5c\u7ed3\u679c\u7684 {@link HalPropValue}\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u8fd4\u56de\u7279\u5b9a\u9519\u8bef\u3002\n     * @throws IllegalArgumentException \u5982\u679c\u53c2\u6570\u65e0\u6548\u3002\n     */\n    private static HalPropValue invokeRetriable(RetriableAction action,\n                                                String operation, HalPropValue requestValue, long maxDurationForRetryMs,\n                                                long sleepBetweenRetryMs, int maxRetries)\n            throws ServiceSpecificException, IllegalArgumentException {\n        // \u521b\u5efa Retrier \u5b9e\u4f8b\uff0c\u7528\u4e8e\u5904\u7406\u91cd\u8bd5\u903b\u8f91\u3002\n        Retrier retrier = new Retrier(action, operation, requestValue, maxDurationForRetryMs,\n                sleepBetweenRetryMs, maxRetries);\n        // \u8c03\u7528 Retrier \u7684 invokeAction \u65b9\u6cd5\u6267\u884c\u64cd\u4f5c\u3002\n        HalPropValue result = retrier.invokeAction();\n        if (DBG) {\n            // \u5982\u679c\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u5219\u8bb0\u5f55\u64cd\u4f5c\u4fe1\u606f\u3002\n            Slogf.d(CarLog.TAG_HAL,\n                    \"Invoked retriable action for %s - RequestValue: %s - ResultValue: %s, for \"\n                            + \"retrier: %s\",\n                    operation, requestValue, result, retrier);\n        }\n        return result;\n    }\n\n    /**\n     * RetriableAction \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\u3002\n     */\n    interface RetriableAction {\n        /**\n         * \u6267\u884c\u64cd\u4f5c\u3002\n         *\n         * @param requestValue \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n         * @return \u64cd\u4f5c\u7ed3\u679c\u7684 {@link HalPropValue}\u3002\n         * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u8fd4\u56de\u7279\u5b9a\u9519\u8bef\u3002\n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n         */\n        @Nullable HalPropValue run(HalPropValue requestValue)\n                throws ServiceSpecificException, RemoteException;\n    }\n\n    /**\n     * Retrier \u7c7b\u7528\u4e8e\u5904\u7406\u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\u3002\n     */\n    private static final class Retrier {\n        private final RetriableAction mAction; // \u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\u3002\n        private final String mOperation; // \u64cd\u4f5c\u540d\u79f0\u3002\n        private final HalPropValue mRequestValue; // \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n        private final long mMaxDurationForRetryMs; // \u6700\u5927\u91cd\u8bd5\u6301\u7eed\u65f6\u95f4\uff08\u6beb\u79d2\uff09\u3002\n        private final long mSleepBetweenRetryMs; // \u6bcf\u6b21\u91cd\u8bd5\u4e4b\u95f4\u7684\u4f11\u7720\u65f6\u95f4\uff08\u6beb\u79d2\uff09\u3002\n        private final int mMaxRetries; // \u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002\n        private final long mStartTime; // \u5f00\u59cb\u65f6\u95f4\uff0c\u7528\u4e8e\u8ba1\u7b97\u91cd\u8bd5\u6301\u7eed\u65f6\u95f4\u3002\n        private int mRetryCount = 0; // \u5f53\u524d\u91cd\u8bd5\u6b21\u6570\u3002\n\n        /**\n         * \u6784\u9020 Retrier \u5b9e\u4f8b\u3002\n         */\n        Retrier(RetriableAction action,\n                String operation, HalPropValue requestValue, long maxDurationForRetryMs,\n                long sleepBetweenRetryMs, int maxRetries) {\n            mAction = action;\n            mOperation = operation;\n            mRequestValue = requestValue;\n            mMaxDurationForRetryMs = maxDurationForRetryMs;\n            mSleepBetweenRetryMs = sleepBetweenRetryMs;\n            mMaxRetries = maxRetries;\n            mStartTime = uptimeMillis(); // \u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u542f\u52a8\u65f6\u95f4\u3002\n        }\n\n        /**\n         * \u6267\u884c\u64cd\u4f5c\u3002\n         *\n         * @return \u64cd\u4f5c\u7ed3\u679c\u7684 {@link HalPropValue}\u3002\n         * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u8fd4\u56de\u7279\u5b9a\u9519\u8bef\u3002\n         * @throws IllegalArgumentException \u5982\u679c\u53c2\u6570\u65e0\u6548\u3002\n         */\n        HalPropValue invokeAction()\n                throws ServiceSpecificException, IllegalArgumentException {\n            mRetryCount++; // \u589e\u52a0\u91cd\u8bd5\u8ba1\u6570\u3002\n\n            try {\n                // \u5c1d\u8bd5\u6267\u884c\u64cd\u4f5c\u3002\n                return mAction.run(mRequestValue);\n            } catch (ServiceSpecificException e) {\n                // \u6839\u636e\u9519\u8bef\u4ee3\u7801\u5904\u7406\u5f02\u5e38\u3002\n                switch (e.errorCode) {\n                    case StatusCode.INVALID_ARG:\n                        // \u5982\u679c\u662f\u65e0\u6548\u53c2\u6570\u9519\u8bef\uff0c\u629b\u51fa IllegalArgumentException\u3002\n                        throw new IllegalArgumentException(errorMessage(mOperation, mRequestValue,\n                                e.toString()));\n                    case StatusCode.TRY_AGAIN:\n                        // \u5982\u679c\u662f\u91cd\u8bd5\u9519\u8bef\uff0c\u8c03\u7528 sleepAndTryAgain \u65b9\u6cd5\u3002\n                        return sleepAndTryAgain(e);\n                    default:\n                        // \u5176\u4ed6\u9519\u8bef\uff0c\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u3002\n                        throw e;\n                }\n            } catch (RemoteException e) {\n                // \u5904\u7406\u8fdc\u7a0b\u5f02\u5e38\uff0c\u8c03\u7528 sleepAndTryAgain \u65b9\u6cd5\u3002\n                return sleepAndTryAgain(e);\n            }\n        }\n\n        /**\n         * \u4f11\u7720\u5e76\u91cd\u8bd5\u64cd\u4f5c\u3002\n         *\n         * @param e \u5f15\u53d1\u91cd\u8bd5\u7684\u5f02\u5e38\u3002\n         * @return \u64cd\u4f5c\u7ed3\u679c\u7684 {@link HalPropValue}\u3002\n         * @throws ServiceSpecificException \u5982\u679c\u670d\u52a1\u8fd4\u56de\u7279\u5b9a\u9519\u8bef\u3002\n         * @throws IllegalArgumentException \u5982\u679c\u53c2\u6570\u65e0\u6548\u3002\n         */\n        private HalPropValue sleepAndTryAgain(Exception e)\n                throws ServiceSpecificException, IllegalArgumentException {\n            // \u8bb0\u5f55\u91cd\u8bd5\u65e5\u5fd7\u3002\n            Slogf.d(CarLog.TAG_HAL, \"trying the request: \"\n                    + toPropertyIdString(mRequestValue.getPropId()) + \", \"\n                    + toAreaIdString(mRequestValue.getPropId(), mRequestValue.getAreaId())\n                    + \" again...\");\n            try {\n                // \u7ebf\u7a0b\u4f11\u7720\u6307\u5b9a\u65f6\u95f4\u3002\n                Thread.sleep(mSleepBetweenRetryMs);\n            } catch (InterruptedException interruptedException) {\n                // \u5904\u7406\u7ebf\u7a0b\u4e2d\u65ad\u5f02\u5e38\u3002\n                Thread.currentThread().interrupt();\n                Slogf.w(CarLog.TAG_HAL, \"Thread was interrupted while waiting for vehicle HAL.\",\n                        interruptedException);\n                throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                        errorMessage(mOperation, mRequestValue, interruptedException.toString()));\n            }\n\n            // \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002\n            if (mMaxRetries != 0) {\n                if (mMaxRetries == mRetryCount) {\n                    throw new ServiceSpecificException(StatusCode.TRY_AGAIN,\n                            errorMessage(mOperation, mRequestValue,\n                                    \"cannot get property after \" + mRetryCount + \" retries, \"\n                                            + \"last exception: \" + e));\n                }\n            } else if ((uptimeMillis() - mStartTime) &gt;= mMaxDurationForRetryMs) {\n                // \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6301\u7eed\u65f6\u95f4\u3002\n                throw new ServiceSpecificException(StatusCode.TRY_AGAIN,\n                        errorMessage(mOperation, mRequestValue,\n                                \"cannot get property within \" + mMaxDurationForRetryMs\n                                        + \"ms, last exception: \" + e));\n            }\n            // \u9012\u5f52\u8c03\u7528 invokeAction \u65b9\u6cd5\u8fdb\u884c\u91cd\u8bd5\u3002\n            return invokeAction();\n        }\n    }\n}\n</code></pre> <p><code>invokeRetriable()</code> \u65b9\u6cd5 \u63a5\u53d7\u4e00\u4e2a <code>RetriableAction</code>\u00a0\u63a5\u53e3\u7684\u5b9e\u4f8b\u3001\u64cd\u4f5c\u540d\u79f0\u3001\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3001\u6700\u5927\u91cd\u8bd5\u6301\u7eed\u65f6\u95f4\u3001\u6bcf\u6b21\u91cd\u8bd5\u4e4b\u95f4\u7684\u4f11\u7720\u65f6\u95f4\u548c\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4 <code>invokeRetriable()</code>\u00a0\u65b9\u6cd5\u4e3b\u8981\u662f\u6267\u884c\u4e00\u4e2a\u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\uff0c\u5e76\u5728\u64cd\u4f5c\u5931\u8d25\u65f6\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u8fdb\u884c\u91cd\u8bd5\u3002</p> <p>\u597d\u7684\u6211\u4eec\u56de\u987e\u5230\u4e3b\u7ebf\u4efb\u52a1\uff0c<code>getValueWithRetry()</code> \u91cc\u7684 <code>mVehicleStub</code> \u5c31\u662f <code>AidlVehicleStub</code> </p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubget","title":"AidlVehicleStub.get()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u3002\n     *\n     * @param requestedPropValue \u8981\u83b7\u53d6\u7684\u5c5e\u6027\u3002\n     * @return \u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fd4\u56de\u7279\u5b9a\u7684\u670d\u52a1\u9519\u8bef\u3002\n     */\n    @Override\n    @Nullable\n    public HalPropValue get(HalPropValue requestedPropValue)\n            throws RemoteException, ServiceSpecificException {\n        long currentTime = System.currentTimeMillis(); // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7528\u4e8e\u8ba1\u7b97\u64cd\u4f5c\u5ef6\u8fdf\u3002\n\n        // \u8c03\u7528 getOrSetSync \u65b9\u6cd5\u540c\u6b65\u83b7\u53d6\u5c5e\u6027\u503c\u3002\n        HalPropValue halPropValue = getOrSetSync(requestedPropValue,\n                mPendingSyncGetValueRequestPool, // \u540c\u6b65\u8bf7\u6c42\u6c60\u3002\n                new AsyncGetRequestsHandler(), // \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\u3002\n                (result) -&gt; { // \u5904\u7406\u83b7\u53d6\u7ed3\u679c\u7684\u56de\u8c03\u51fd\u6570\u3002\n                    if (result.status != StatusCode.OK) {\n                        // \u5982\u679c\u7ed3\u679c\u72b6\u6001\u4e0d\u662f OK\uff0c\u629b\u51fa ServiceSpecificException \u5f02\u5e38\u3002\n                        throw new ServiceSpecificException(result.status,\n                                \"failed to get value for \" + printPropIdAreaId(requestedPropValue));\n                    }\n                    if (result.prop == null) {\n                        // \u5982\u679c\u7ed3\u679c\u5c5e\u6027\u4e3a\u7a7a\uff0c\u8fd4\u56de null\u3002\n                        return null;\n                    }\n                    // \u4f7f\u7528\u5c5e\u6027\u503c\u6784\u5efa\u5668\u6784\u5efa\u5e76\u8fd4\u56de HalPropValue\u3002\n                    return mPropValueBuilder.build(result.prop);\n                });\n\n        // \u8bb0\u5f55\u540c\u6b65\u83b7\u53d6\u64cd\u4f5c\u7684\u5ef6\u8fdf\u65f6\u95f4\u3002\n        sVehicleHalGetSyncLatencyHistogram.logSample((float)\n                (System.currentTimeMillis() - currentTime));\n\n        return halPropValue; // \u8fd4\u56de\u83b7\u53d6\u5230\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n    }\n}\n</code></pre> <p>\u8c03\u7528 <code>getOrSetSync()</code> \u65b9\u6cd5\u540c\u6b65\u83b7\u53d6\u5c5e\u6027\u503c\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubgetorsetsync","title":"AidlVehicleStub.getOrSetSync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u7528\u4e8e {@link get} \u6216 {@link set} \u64cd\u4f5c\u7684\u901a\u7528\u51fd\u6570\u3002\n     *\n     * @param requestedPropValue \u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\n     * @param pendingSyncRequestPool \u540c\u6b65\u8bf7\u6c42\u6c60\uff0c\u7528\u4e8e\u7ba1\u7406\u540c\u6b65\u8bf7\u6c42\u3002\n     * @param requestsHandler \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u3002\n     * @param resultHandler \u7ed3\u679c\u5904\u7406\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u8fd4\u56de\u7684\u7ed3\u679c\u3002\n     * @return \u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u53d1\u751f\u7279\u5b9a\u7684\u670d\u52a1\u9519\u8bef\u3002\n     */\n    private &lt;VhalResultType&gt; HalPropValue getOrSetSync(\n            HalPropValue requestedPropValue,\n            PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool,\n            AsyncRequestsHandler requestsHandler,\n            Function&lt;VhalResultType, HalPropValue&gt; resultHandler)\n            throws RemoteException, ServiceSpecificException {\n        // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"AidlVehicleStub#getOrSetSync\"\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#getOrSetSync\");\n\n        // \u83b7\u53d6\u4e00\u4e2a\u552f\u4e00\u7684\u8bf7\u6c42 ID\u3002\n        long vhalRequestId = mRequestId.getAndIncrement();\n\n        // \u5c06\u8bf7\u6c42\u6dfb\u52a0\u5230\u540c\u6b65\u8bf7\u6c42\u6c60\u4e2d\uff0c\u5e76\u83b7\u53d6\u4e00\u4e2a AndroidFuture \u5bf9\u8c61\u3002\n        AndroidFuture&lt;VhalResultType&gt; resultFuture = pendingSyncRequestPool.addRequest(\n                vhalRequestId);\n\n        // \u5206\u914d VHAL \u8bf7\u6c42\u5927\u5c0f\u3002\n        requestsHandler.allocateVhalRequestSize(1);\n        // \u6dfb\u52a0 VHAL \u8bf7\u6c42\u3002\n        requestsHandler.addVhalRequest(vhalRequestId, requestedPropValue);\n        // \u53d1\u9001\u8bf7\u6c42\u5230 VHAL\u3002\n        requestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n\n        boolean gotResult = false; // \u6807\u8bb0\u662f\u5426\u6210\u529f\u83b7\u53d6\u7ed3\u679c\u3002\n\n        try {\n            // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"AidlVehicleStub#waitingForSyncResult\"\n            Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#waitingForSyncResult\");\n\n            // \u7b49\u5f85\u7ed3\u679c\u8fd4\u56de\uff0c\u8d85\u65f6\u65f6\u95f4\u4e3a mSyncOpTimeoutInMs \u6beb\u79d2\u3002\n            VhalResultType result = resultFuture.get(mSyncOpTimeoutInMs,\n                    TimeUnit.MILLISECONDS);\n            gotResult = true; // \u6210\u529f\u83b7\u53d6\u7ed3\u679c\u3002\n            return resultHandler.apply(result); // \u4f7f\u7528\u7ed3\u679c\u5904\u7406\u51fd\u6570\u5904\u7406\u7ed3\u679c\u5e76\u8fd4\u56de\u3002\n        } catch (InterruptedException e) {\n            // \u5982\u679c\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u6062\u590d\u4e2d\u65ad\u72b6\u6001\u5e76\u629b\u51fa\u5f02\u5e38\u3002\n            Thread.currentThread().interrupt();\n            throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                    \"thread interrupted, possibly exiting the thread\");\n        } catch (ExecutionException e) {\n            // \u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n            throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                    \"failed to resolve future, error: \" + e);\n        } catch (TimeoutException e) {\n            // \u5982\u679c\u8d85\u65f6\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n            throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                    \"get/set value request timeout for: \" + printPropIdAreaId(requestedPropValue));\n        } finally {\n            // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\u3002\n            Trace.traceEnd(TRACE_TAG);\n            if (!gotResult) {\n                // \u5982\u679c\u6ca1\u6709\u6210\u529f\u83b7\u53d6\u7ed3\u679c\uff0c\u4ece\u540c\u6b65\u8bf7\u6c42\u6c60\u4e2d\u5b8c\u6210\u8bf7\u6c42\u3002\n                resultFuture = pendingSyncRequestPool.finishRequestIfFound(vhalRequestId);\n                // \u53d6\u6d88\u672a\u4f7f\u7528\u7684 future\u3002\n                resultFuture.cancel(/* mayInterruptIfRunning= */ false);\n            }\n            // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\u3002\n            Trace.traceEnd(TRACE_TAG);\n        }\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 <code>AsyncRequestsHandler</code> \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\u3002\u5728\u4e0a\u4e00\u6b65\u4f20\u8fdb\u6765\u7684\u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\u662f <code>AsyncGetRequestsHandler</code>\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncgetrequestshandler","title":"AsyncGetRequestsHandler","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * AsyncGetRequestsHandler \u662f\u4e00\u4e2a\u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u8bf7\u6c42\u3002\n     * \u5b83\u7ee7\u627f\u81ea AsyncRequestsHandler\uff0c\u5e76\u5b9e\u73b0\u4e86\u5bf9 GetValueRequest \u548c GetValueRequests \u7684\u5904\u7406\u3002\n     */\n    private static final class AsyncGetRequestsHandler\n            extends AsyncRequestsHandler&lt;GetValueRequest, GetValueRequests&gt; {\n        private GetValueRequest[] mVhalRequestItems; // \u5b58\u50a8 VHAL \u8bf7\u6c42\u9879\u7684\u6570\u7ec4\u3002\n        private int mIndex; // \u5f53\u524d\u8bf7\u6c42\u9879\u7684\u7d22\u5f15\u3002\n\n        /**\n         * \u5206\u914d VHAL \u8bf7\u6c42\u9879\u7684\u6570\u7ec4\u5927\u5c0f\u3002\n         * @param size \u8bf7\u6c42\u9879\u7684\u6570\u91cf\u3002\n         */\n        @Override\n        public void allocateVhalRequestSize(int size) {\n            mVhalRequestItems = new GetValueRequest[size];\n        }\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2a VHAL \u8bf7\u6c42\u5230\u8bf7\u6c42\u9879\u6570\u7ec4\u4e2d\u3002\n         * @param vhalRequestId \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param halPropValue \u8bf7\u6c42\u7684\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n         */\n        @Override\n        public void addVhalRequest(long vhalRequestId, HalPropValue halPropValue) {\n            mVhalRequestItems[mIndex] = new GetValueRequest();\n            mVhalRequestItems[mIndex].requestId = vhalRequestId;\n            mVhalRequestItems[mIndex].prop = (VehiclePropValue) halPropValue.toVehiclePropValue();\n            mIndex++;\n        }\n\n        /**\n         * \u83b7\u53d6\u6240\u6709\u7684 VHAL \u8bf7\u6c42\u9879\u3002\n         * @return \u8bf7\u6c42\u9879\u6570\u7ec4\u3002\n         */\n        @Override\n        public GetValueRequest[] getRequestItems() {\n            return mVhalRequestItems;\n        }\n\n        /**\n         * \u53d1\u9001\u8bf7\u6c42\u5230\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u3002\n         * @param iVehicle IVehicle \u63a5\u53e3\u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e VHAL \u901a\u4fe1\u3002\n         * @param callbackForVhal \u7528\u4e8e VHAL \u7684\u56de\u8c03\u3002\n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u3002\n         * @throws ServiceSpecificException \u5982\u679c\u53d1\u751f\u7279\u5b9a\u7684\u670d\u52a1\u9519\u8bef\u3002\n         */\n        @Override\n        public void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n                throws RemoteException, ServiceSpecificException {\n            // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"Prepare LargeParcelable\"\n            Trace.traceBegin(TRACE_TAG, \"Prepare LargeParcelable\");\n\n            // \u521b\u5efa\u4e00\u4e2a GetValueRequests \u5bf9\u8c61\uff0c\u5e76\u5c06\u8bf7\u6c42\u9879\u6570\u7ec4\u4f5c\u4e3a\u5176\u8d1f\u8f7d\u3002\n            GetValueRequests largeParcelableRequest = new GetValueRequests();\n            largeParcelableRequest.payloads = mVhalRequestItems;\n\n            // \u5c06\u8bf7\u6c42\u8f6c\u6362\u4e3a\u5927\u5bf9\u8c61\u53ef\u6253\u5305\u7684\u5f62\u5f0f\u3002\n            // TODO: \u5982\u679c\u8bf7\u6c42\u5927\u5c0f\u592a\u5c0f\uff0c\u4e0d\u8981\u5c1d\u8bd5\u4f7f\u7528\u5927\u5bf9\u8c61\u53ef\u6253\u5305\u3002\n            largeParcelableRequest = (GetValueRequests) LargeParcelable.toLargeParcelable(\n                    largeParcelableRequest, () -&gt; {\n                        GetValueRequests newRequests = new GetValueRequests();\n                        newRequests.payloads = new GetValueRequest[0];\n                        return newRequests;\n                    });\n\n            // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\u3002\n            Trace.traceEnd(TRACE_TAG);\n\n            // \u5f00\u59cb\u8ddf\u8e2a\u6027\u80fd\uff0c\u6807\u8bb0\u4e3a \"IVehicle#getValues\"\n            Trace.traceBegin(TRACE_TAG, \"IVehicle#getValues\");\n\n            // \u8c03\u7528 IVehicle \u63a5\u53e3\u7684 getValues \u65b9\u6cd5\uff0c\u53d1\u9001\u8bf7\u6c42\u5230 VHAL\u3002\n            iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n\n            // \u7ed3\u675f\u8ddf\u8e2a\u6027\u80fd\u3002\n            Trace.traceEnd(TRACE_TAG);\n        }\n\n        /**\n         * \u83b7\u53d6 VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param request \u8bf7\u6c42\u5bf9\u8c61\u3002\n         * @return \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         */\n        @Override\n        public long getVhalRequestId(GetValueRequest request) {\n            return request.requestId;\n        }\n    }\n}\n</code></pre> <p><code>AsyncGetRequestsHandler</code>\u00a0\u662f\u4e00\u4e2a\u9759\u6001\u5185\u90e8\u7c7b\uff0c\u7ee7\u627f\u81ea\u00a0<code>AsyncRequestsHandler</code>\uff0c\u7528\u4e8e\u5904\u7406\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u5f02\u6b65\u8bf7\u6c42\u3002\u4e3b\u8981\u662f\u5904\u7406\u00a0<code>GetValueRequest</code>\u00a0\u548c\u00a0<code>GetValueRequests</code>\u00a0\u7c7b\u578b\u7684\u8bf7\u6c42\u3002</p> <p>\u8fd9\u91cc\u4e5f\u770b\u5230\u4e86\u5176\u771f\u6b63\u7684\u8c03\u7528\u4e86 VHAL \u7684\u63a5\u53e3\uff1a</p> <pre><code>iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#pendingsyncrequestpool","title":"PendingSyncRequestPool","text":"<p>\u597d\u7684\uff0c\u6211\u4eec\u518d\u56de\u5230 AidlVehicleStub.get()\uff0c\u8c03\u7528 getOrSetSync() \u4f20\u8fdb\u6765\u7684\u540c\u6b65\u8bf7\u6c42\u6c60 mPendingSyncGetValueRequestPool\u3002</p> <p>\u5176\u521d\u59cb\u5316:</p> <pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7528\u4e8e\u7ba1\u7406\u540c\u6b65\u83b7\u53d6\u8bf7\u6c42\u7684\u6c60\uff0c\u7c7b\u578b\u4e3a GetValueResult\n// \u8fd9\u4e2a\u6c60\u7528\u4e8e\u5b58\u50a8\u548c\u7ba1\u7406\u5f85\u5904\u7406\u7684\u540c\u6b65\u83b7\u53d6\u8bf7\u6c42\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u548c\u8bf7\u6c42\u7684\u6709\u5e8f\u5904\u7406\nprivate final PendingSyncRequestPool&lt;GetValueResult&gt; mPendingSyncGetValueRequestPool =  \n        new PendingSyncRequestPool&lt;&gt;();\n</code></pre> <p>PendingSyncRequestPool \u7c7b\u7684\u5b9e\u73b0\uff1a</p> <pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5f85\u5904\u7406\u540c\u6b65\u8bf7\u6c42\u6c60\u3002\n     * \u8fd9\u4e2a\u7c7b\u7528\u4e8e\u7ba1\u7406\u548c\u5904\u7406\u5f85\u5904\u7406\u7684\u540c\u6b65\u8bf7\u6c42\uff0c\u786e\u4fdd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u5b89\u5168\u6027\u3002\n     */\n    private static final class PendingSyncRequestPool&lt;VhalResultType&gt; {\n        // \u7528\u4e8e\u540c\u6b65\u7684\u9501\u5bf9\u8c61\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n        private final Object mSyncRequestPoolLock = new Object();\n\n        // \u4f7f\u7528\u6ce8\u89e3@GuardedBy\u6765\u6307\u660emPendingRequestsByVhalRequestId\u7684\u8bbf\u95ee\u9700\u8981\u6301\u6709mSyncRequestPoolLock\u9501\n        @GuardedBy(\"mSyncRequestPoolLock\")\n        // \u5b58\u50a8\u5f85\u5904\u7406\u8bf7\u6c42\u7684\u96c6\u5408\uff0c\u4f7f\u7528LongSparseArray\u6765\u9ad8\u6548\u5b58\u50a8\u957f\u6574\u578b\u952e\u503c\u5bf9\n        private final LongSparseArray&lt;AndroidFuture&lt;VhalResultType&gt;&gt;\n                mPendingRequestsByVhalRequestId = new LongSparseArray();\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2a\u8bf7\u6c42\u5230\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u4e2d\u3002\n         * @param vhalRequestId \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n         * @return \u8fd4\u56de\u4e00\u4e2aAndroidFuture\u5bf9\u8c61\uff0c\u7528\u4e8e\u83b7\u53d6\u8bf7\u6c42\u7684\u7ed3\u679c\n         */\n        AndroidFuture&lt;VhalResultType&gt; addRequest(long vhalRequestId) {\n            synchronized (mSyncRequestPoolLock) {\n                // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AndroidFuture\u5bf9\u8c61\u7528\u4e8e\u5b58\u50a8\u8bf7\u6c42\u7ed3\u679c\n                AndroidFuture&lt;VhalResultType&gt; resultFuture = new AndroidFuture();\n                // \u5c06\u8bf7\u6c42ID\u548c\u7ed3\u679c\u5bf9\u8c61\u5b58\u50a8\u5230\u96c6\u5408\u4e2d\n                mPendingRequestsByVhalRequestId.put(vhalRequestId, resultFuture);\n                return resultFuture;\n            }\n        }\n\n        /**\n         * \u5982\u679c\u627e\u5230\u8bf7\u6c42\uff0c\u5219\u5b8c\u6210\u8be5\u8bf7\u6c42\u5e76\u4ece\u6c60\u4e2d\u79fb\u9664\u3002\n         * @param vhalRequestId \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n         * @return \u8fd4\u56de\u627e\u5230\u7684\u8bf7\u6c42\u5bf9\u5e94\u7684AndroidFuture\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56denull\n         */\n        @Nullable AndroidFuture&lt;VhalResultType&gt; finishRequestIfFound(long vhalRequestId) {\n            synchronized (mSyncRequestPoolLock) {\n                // \u83b7\u53d6\u5f85\u5904\u7406\u8bf7\u6c42\n                AndroidFuture&lt;VhalResultType&gt; pendingRequest =\n                        mPendingRequestsByVhalRequestId.get(vhalRequestId);\n                // \u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u8bf7\u6c42\n                mPendingRequestsByVhalRequestId.remove(vhalRequestId);\n                return pendingRequest;\n            }\n        }\n\n        /**\n         * \u83b7\u53d6\u5f53\u524d\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u4e2d\u7684\u8bf7\u6c42\u6570\u91cf\u3002\n         * @return \u8fd4\u56de\u8bf7\u6c42\u6c60\u4e2d\u7684\u8bf7\u6c42\u6570\u91cf\n         */\n        int size() {\n            synchronized (mSyncRequestPoolLock) {\n                return mPendingRequestsByVhalRequestId.size();\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>LongSparseArray\uff1a\u7528\u4e8e\u5b58\u50a8\u8bf7\u6c42\u7684\u96c6\u5408\uff0c\u952e\u662f\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff08<code>vhalRequestId</code>\uff09\uff0c\u503c\u662f\u8bf7\u6c42\u7684\u7ed3\u679c\u5360\u4f4d\u7b26\uff08<code>AndroidFuture&lt;VhalResultType&gt;</code>\uff09\u3002</li> <li>mSyncRequestPoolLock\uff1a\u9501\u5bf9\u8c61\uff0c\u6240\u6709\u5bf9\u00a0<code>mPendingRequestsByVhalRequestId</code>\u00a0\u7684\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u540c\u6b65\u5757\u4e2d\u8fdb\u884c\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002</li> <li>addRequest\uff1a\u5c06\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\u6dfb\u52a0\u5230\u540c\u6b65\u8bf7\u6c42\u6c60\u4e2d\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u00a0<code>AndroidFuture</code>\u00a0\u5bf9\u8c61\uff0c\u4f9b\u8c03\u7528\u8005\u7b49\u5f85\u7ed3\u679c\u3002</li> <li>finishRequestIfFound\uff1a\u6839\u636e\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u67e5\u627e\u5bf9\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u627e\u5230\u5219\u4ece\u6c60\u4e2d\u79fb\u9664\u5e76\u8fd4\u56de\u7ed3\u679c\u5360\u4f4d\u7b26\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_5","title":"\u540c\u6b65\u8bbe\u7f6e\u5c5e\u6027","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalset","title":"VehicleHal.set()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u8bbe\u7f6e\u5c5e\u6027\u3002\n     *\n     * @param propValue \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u503c\n     * @throws IllegalArgumentException \u5982\u679c\u53c2\u6570\u65e0\u6548\n     * @throws ServiceSpecificException \u5982\u679c\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fd4\u56de\u9519\u8bef\n     */\n    public void set(HalPropValue propValue)\n            throws IllegalArgumentException, ServiceSpecificException {\n        // \u8c03\u7528\u5e26\u91cd\u8bd5\u673a\u5236\u7684\u8bbe\u7f6e\u65b9\u6cd5\n        setValueWithRetry(propValue);\n    }\n\n    /**\n     * \u5e26\u91cd\u8bd5\u673a\u5236\u7684\u8bbe\u7f6e\u5c5e\u6027\u65b9\u6cd5\u3002\n     *\n     * @param value \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u503c\n     */\n    private void setValueWithRetry(HalPropValue value) {\n        // \u8c03\u7528\u53ef\u91cd\u8bd5\u7684\u64cd\u4f5c\n        invokeRetriable((requestValue) -&gt; {\n            // \u5f00\u59cb\u8ffd\u8e2a\uff0c\u7528\u4e8e\u6027\u80fd\u5206\u6790\n            Trace.traceBegin(TRACE_TAG, \"VehicleStub#set\");\n            // \u8c03\u7528 mVehicleStub \u7684 set \u65b9\u6cd5\u8bbe\u7f6e\u5c5e\u6027\u503c\n            mVehicleStub.set(requestValue);\n            // \u7ed3\u675f\u8ffd\u8e2a\n            Trace.traceEnd(TRACE_TAG);\n            return null;\n        }, \"set\", value, mMaxDurationForRetryMs, mSleepBetweenRetryMs, /* maxRetries= */ 0);\n    }\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\u662f\u901a\u8fc7\u00a0<code>set()</code>\u00a0\u65b9\u6cd5\u6765\u8bbe\u7f6e\u8f66\u8f86\u7684\u5c5e\u6027\u503c\uff0c\u6700\u7ec8\u8c03\u7528\u00a0<code>mVehicleStub.set()</code>\u00a0\u6765\u6267\u884c\u5177\u4f53\u7684\u8bbe\u7f6e\u64cd\u4f5c\u3002\u5173\u4e8e\u00a0<code>invokeRetriable()</code>\u00a0\u65b9\u6cd5\u7684\u8be6\u7ec6\u5206\u6790\u5df2\u5728 \u540c\u6b65\u83b7\u53d6\u5c5e\u6027 \u90e8\u5206\u8fdb\u884c\u8fc7\uff0c\u8fd9\u91cc\u4e0d\u518d\u91cd\u590d\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubset","title":"AidlVehicleStub.set()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u8bbe\u7f6e\u4e00\u4e2a\u5c5e\u6027\u3002\n     *\n     * @param requestedPropValue \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u503c\u3002\n     * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u64cd\u4f5c\u5931\u8d25\u3002\n     * @throws ServiceSpecificException \u5982\u679c\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08VHAL\uff09\u8fd4\u56de\u7279\u5b9a\u7684\u670d\u52a1\u9519\u8bef\u3002\n     */\n    @Override\n    public void set(HalPropValue requestedPropValue) throws RemoteException,\n            ServiceSpecificException {\n        // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7528\u4e8e\u8ba1\u7b97\u64cd\u4f5c\u5ef6\u8fdf\n        long currentTime = System.currentTimeMillis();\n\n        // \u8c03\u7528\u540c\u6b65\u8bbe\u7f6e\u6216\u83b7\u53d6\u65b9\u6cd5\n        getOrSetSync(requestedPropValue, \n                     mPendingSyncSetValueRequestPool, // \u540c\u6b65\u8bf7\u6c42\u6c60\n                     new AsyncSetRequestsHandler(),   // \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\n                     (result) -&gt; {                    // \u7ed3\u679c\u5904\u7406\u56de\u8c03\n                         // \u5982\u679c\u7ed3\u679c\u72b6\u6001\u4e0d\u662fOK\uff0c\u629b\u51fa\u670d\u52a1\u7279\u5b9a\u5f02\u5e38\n                         if (result.status != StatusCode.OK) {\n                             throw new ServiceSpecificException(result.status,\n                                     \"failed to set value for \" + printPropIdAreaId(requestedPropValue));\n                         }\n                         return null;\n                     });\n\n        // \u8bb0\u5f55\u8bbe\u7f6e\u64cd\u4f5c\u7684\u540c\u6b65\u5ef6\u8fdf\u65f6\u95f4\n        sVehicleHalSetSyncLatencyHistogram.logSample((float)\n                (System.currentTimeMillis() - currentTime));\n    }\n}\n</code></pre> <p>\u4e0e\u4e4b\u524d\u5206\u6790\u7684 \u540c\u6b65\u83b7\u53d6\u5c5e\u6027 \u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e5f\u662f\u901a\u8fc7\u8c03\u7528\u00a0<code>getOrSetSync</code>\u00a0\u65b9\u6cd5\u6765\u540c\u6b65\u8bbe\u7f6e\u5c5e\u6027\u503c\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u4f20\u5165\u7684\u53c2\u6570\uff1a<code>mPendingSyncSetValueRequestPool</code>\u00a0\u548c\u00a0<code>new AsyncSetRequestsHandler()</code>\u3002</p> <p>\u5176\u4e2d <code>mPendingSyncSetValueRequestPool</code> \u521d\u59cb\u5316\uff1a</p> <pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7528\u4e8e\u7ba1\u7406\u540c\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7684\u6c60\uff0c\u7c7b\u578b\u4e3a SetValueResult\n// \u8fd9\u4e2a\u6c60\u7528\u4e8e\u5b58\u50a8\u548c\u7ba1\u7406\u5f85\u5904\u7406\u7684\u540c\u6b65\u8bbe\u7f6e\u8bf7\u6c42\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u548c\u8bf7\u6c42\u7684\u6709\u5e8f\u5904\u7406\nprivate final PendingSyncRequestPool&lt;SetValueResult&gt; mPendingSyncSetValueRequestPool =\n        new PendingSyncRequestPool&lt;&gt;();\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncsetrequestshandler","title":"AsyncSetRequestsHandler","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u5904\u7406\u5668\u3002\n     * \u8d1f\u8d23\u7ba1\u7406\u548c\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u3002\n     */\n    private static final class AsyncSetRequestsHandler\n            extends AsyncRequestsHandler&lt;SetValueRequest, SetValueRequests&gt; {\n\n        // \u5b58\u50a8\u5f85\u5904\u7406\u7684\u8bbe\u7f6e\u8bf7\u6c42\u6570\u7ec4\n        private SetValueRequest[] mVhalRequestItems;\n        // \u5f53\u524d\u8bf7\u6c42\u7684\u7d22\u5f15\n        private int mIndex;\n\n        /**\n         * \u5206\u914dVHAL\u8bf7\u6c42\u7684\u5927\u5c0f\u3002\n         * @param size \u8bf7\u6c42\u7684\u6570\u91cf\n         */\n        @Override\n        public void allocateVhalRequestSize(int size) {\n            // \u521d\u59cb\u5316\u8bf7\u6c42\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u6307\u5b9a\u7684\u8bf7\u6c42\u6570\u91cf\n            mVhalRequestItems = new SetValueRequest[size];\n        }\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2aVHAL\u8bf7\u6c42\u3002\n         * @param vhalRequestId \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n         * @param halPropValue \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u503c\n         */\n        @Override\n        public void addVhalRequest(long vhalRequestId, HalPropValue halPropValue) {\n            // \u521b\u5efa\u65b0\u7684\u8bbe\u7f6e\u8bf7\u6c42\u5bf9\u8c61\u5e76\u8d4b\u503c\n            mVhalRequestItems[mIndex] = new SetValueRequest();\n            mVhalRequestItems[mIndex].requestId = vhalRequestId;\n            mVhalRequestItems[mIndex].value = (VehiclePropValue) halPropValue.toVehiclePropValue();\n            // \u7d22\u5f15\u9012\u589e\n            mIndex++;\n        }\n\n        /**\n         * \u83b7\u53d6\u6240\u6709\u8bf7\u6c42\u9879\u3002\n         * @return \u8fd4\u56de\u5b58\u50a8\u7684\u8bf7\u6c42\u6570\u7ec4\n         */\n        @Override\n        public SetValueRequest[] getRequestItems() {\n            return mVhalRequestItems;\n        }\n\n        /**\n         * \u53d1\u9001\u8bf7\u6c42\u5230VHAL\u3002\n         * @param iVehicle \u8f66\u8f86\u63a5\u53e3\n         * @param callbackForVhal VHAL\u7684\u56de\u8c03\u63a5\u53e3\n         * @throws RemoteException \u5982\u679c\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\n         * @throws ServiceSpecificException \u5982\u679cVHAL\u8fd4\u56de\u7279\u5b9a\u7684\u670d\u52a1\u9519\u8bef\n         */\n        @Override\n        public void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n                throws RemoteException, ServiceSpecificException {\n            // \u521b\u5efa\u4e00\u4e2a\u5927\u7684\u53ef\u5e8f\u5217\u5316\u8bf7\u6c42\u5bf9\u8c61\n            SetValueRequests largeParcelableRequest = new SetValueRequests();\n            largeParcelableRequest.payloads = mVhalRequestItems;\n            // \u5c06\u8bf7\u6c42\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5927\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\n            largeParcelableRequest = (SetValueRequests) LargeParcelable.toLargeParcelable(\n                    largeParcelableRequest, () -&gt; {\n                        SetValueRequests newRequests = new SetValueRequests();\n                        newRequests.payloads = new SetValueRequest[0];\n                        return newRequests;\n                    });\n            // \u901a\u8fc7\u8f66\u8f86\u63a5\u53e3\u53d1\u9001\u8bf7\u6c42\n            iVehicle.setValues(callbackForVhal, largeParcelableRequest);\n        }\n\n        /**\n         * \u83b7\u53d6VHAL\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param request \u8bbe\u7f6e\u8bf7\u6c42\n         * @return \u8fd4\u56de\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n         */\n        @Override\n        public long getVhalRequestId(SetValueRequest request) {\n            return request.requestId;\n        }\n    }\n}\n</code></pre> <p><code>AsyncSetRequestsHandler</code>\u00a0\u7684\u529f\u80fd\u4e0e\u00a0<code>AsyncGetRequestsHandler</code>\u00a0\u7c7b\u4f3c\u3002\u5b83\u7ee7\u627f\u81ea\u00a0<code>AsyncRequestsHandler&lt;SetValueRequest, SetValueRequests&gt;</code>\uff0c\u5176\u4e2d\u6cdb\u578b\u53c2\u6570\u5206\u522b\u4ee3\u8868\u5355\u4e2a\u8bf7\u6c42\u548c\u8bf7\u6c42\u96c6\u5408\u7684\u7c7b\u578b\u3002\u5176\u4e3b\u8981\u804c\u8d23\u662f\u7ba1\u7406\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u3002</p> <p>\u8fd9\u91cc\u4e5f\u770b\u5230\u4e86\u5176\u771f\u6b63\u7684\u8c03\u7528\u4e86 VHAL \u7684\u63a5\u53e3\uff1a</p> <pre><code>iVehicle.setValues(callbackForVhal, largeParcelableRequest);\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_6","title":"\u540c\u6b65\u4e4b\u56de\u8c03","text":"<p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6574\u5206\u6790\u4e86 \u540c\u6b65\u83b7\u53d6\u5c5e\u6027 \u548c \u540c\u6b65\u8bbe\u7f6e\u5c5e\u6027 \u7684\u4e3b\u8981\u6d41\u7a0b\u3002\u7136\u800c\uff0c\u5728\u5206\u6790\u00a0<code>AidlVehicleStub.getOrSetSync()</code>\u00a0\u65f6\uff0c\u6709\u4e00\u4e2a\u7ec6\u8282\u6211\u4eec\u6682\u65f6\u8df3\u8fc7\uff0c\u4ee5\u514d\u6253\u65ad\u4e3b\u7ebf\u6d41\u7a0b\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u6df1\u5165\u5206\u6790\u8fd9\u4e2a\u7ec6\u8282\u3002</p> <p>\u5728 \u56de\u8c03 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u00a0<code>GetSetValuesCallback</code>\u00a0\u7528\u4e8e\u5904\u7406 get/set \u64cd\u4f5c\u7684\u56de\u8c03\u3002\u5f53\u65f6\u53ea\u662f\u7b80\u5355\u63d0\u53ca\uff0c\u6ca1\u6709\u6df1\u5165\u89e3\u91ca\u3002\u73b0\u5728\u6709\u4e86\u5177\u4f53\u7684\u6848\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u56de\u987e\u8fd9\u4e2a\u6982\u5ff5\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u5176\u4f5c\u7528\u3002</p> <p>\u9996\u5148\uff0cget/set \u64cd\u4f5c\u8c03\u7684\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code>iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n\niVehicle.setValues(callbackForVhal, largeParcelableRequest);\n</code></pre> <p>\u6211\u4eec\u5728 \u63a5\u53e3 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u00a0<code>IVehicle.aidl</code> \u6709\u4e24\u4e2a\u63a5\u53e3\uff1a</p> <pre><code>void getValues(IVehicleCallback callback, in GetValueRequests requests);\n\nvoid setValues(IVehicleCallback callback, in SetValueRequests requests);\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5012\u63a8\u56de\u53bb\uff0c\u770b <code>callbackForVhal</code> \u5230\u5e95\u662f\u4ec0\u4e48\uff1f</p> <p>\u4e5f\u5c31\u662f\u5728 <code>AidlVehicleStub.getOrSetSync()</code> \u4e2d\uff1a</p> <pre><code>requestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n</code></pre> <p><code>mGetSetValuesCallback</code> \u4e5f\u5c31\u662f <code>GetSetValuesCallback</code>\u00a0\u3002</p> <p>\u597d\u7684\uff0c\u6211\u4eec\u73b0\u5728\u91cd\u65b0\u5206\u6790\u00a0<code>GetSetValuesCallback</code>\u3002\u6839\u636e\u524d\u9762\u7684\u7ae0\u8282\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u00a0<code>GetSetValuesCallback.onSetValues()</code>\u00a0\u4f1a\u8c03\u7528\u00a0<code>AidlVehicleStub.onSetValues()</code>\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubonsetvalues","title":"AidlVehicleStub.onSetValues()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5904\u7406\u8bbe\u7f6e\u64cd\u4f5c\u7684\u7ed3\u679c\u3002\n     *\n     * @param responses \u5305\u542b\u8bbe\u7f6e\u64cd\u4f5c\u7ed3\u679c\u7684 SetValueResults \u5bf9\u8c61\u3002\n     */\n    private void onSetValues(SetValueResults responses) {\n        // \u5f00\u59cb\u6027\u80fd\u8ffd\u8e2a\uff0c\u6807\u8bb0\u64cd\u4f5c\u7684\u5f00\u59cb\uff0c\u7528\u4e8e\u6027\u80fd\u5206\u6790\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onSetValues\");\n\n        // \u91cd\u65b0\u6784\u5efa\u7a33\u5b9a\u7684 AIDL \u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\n        // \u8fd9\u91cc\u5c06\u4f20\u5165\u7684 responses \u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u4e2a\u65b0\u7684 SetValueResults \u5bf9\u8c61\n        // keepSharedMemory \u53c2\u6570\u4e3a false\uff0c\u8868\u793a\u4e0d\u4fdd\u7559\u5171\u4eab\u5185\u5b58\n        SetValueResults origResponses = (SetValueResults)\n                LargeParcelable.reconstructStableAIDLParcelable(responses,\n                        /* keepSharedMemory= */ false);\n\n        // \u8c03\u7528 onGetSetValues \u65b9\u6cd5\u5904\u7406\u7ed3\u679c\n        // \u4f20\u5165\u53c2\u6570\u5305\u62ec\u539f\u59cb\u54cd\u5e94\u7684\u6709\u6548\u8d1f\u8f7d\u3001\u5f02\u6b65\u7ed3\u679c\u5904\u7406\u5668\u548c\u540c\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u6c60\n        onGetSetValues(origResponses.payloads, new AsyncSetResultsHandler(),\n                mPendingSyncSetValueRequestPool);\n\n        // \u7ed3\u675f\u6027\u80fd\u8ffd\u8e2a\uff0c\u6807\u8bb0\u64cd\u4f5c\u7684\u7ed3\u675f\n        Trace.traceEnd(TRACE_TAG);\n    }\n}\n</code></pre> <p>\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u8be6\u7ec6\u5206\u6790 <code>onGetSetValues()</code> \uff0c\u8bf7\u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684 <code>new AsyncSetResultsHandler()</code></p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubongetsetvalues","title":"AidlVehicleStub.onGetSetValues()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u4e00\u4e2a\u901a\u7528\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406 {@link onGetValues} \u548c {@link onSetValues} \u7684\u7ed3\u679c\u3002\n     *\n     * @param vhalResults VHAL \u64cd\u4f5c\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u7ec4\u3002\n     * @param asyncResultsHandler \u5f02\u6b65\u7ed3\u679c\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\n     * @param pendingSyncRequestPool \u540c\u6b65\u8bf7\u6c42\u6c60\uff0c\u7528\u4e8e\u7ba1\u7406\u5f85\u5904\u7406\u7684\u540c\u6b65\u8bf7\u6c42\u3002\n     * @param &lt;VhalResultType&gt; VHAL \u7ed3\u679c\u7684\u7c7b\u578b\u3002\n     */\n    private &lt;VhalResultType&gt; void onGetSetValues(VhalResultType[] vhalResults,\n                                                 AsyncResultsHandler asyncResultsHandler,\n                                                 PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool) {\n        // \u4f7f\u7528\u540c\u6b65\u5757\uff0c\u786e\u4fdd\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n        synchronized (mLock) {\n            // \u904d\u5386\u6bcf\u4e2a VHAL \u7ed3\u679c\n            for (VhalResultType result : vhalResults) {\n                // \u83b7\u53d6 VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n                long vhalRequestId = asyncResultsHandler.getVhalRequestId(result);\n\n                // \u68c0\u67e5\u5f02\u6b65\u8bf7\u6c42\u6c60\u4e2d\u662f\u5426\u5305\u542b\u8be5\u8bf7\u6c42 ID\n                if (!mPendingAsyncRequestPool.contains(vhalRequestId)) {\n                    // \u5982\u679c\u5f02\u6b65\u8bf7\u6c42\u6c60\u4e2d\u627e\u4e0d\u5230\u8be5\u8bf7\u6c42 ID\uff0c\u5047\u8bbe\u5b83\u662f\u4e00\u4e2a\u540c\u6b65\u8bf7\u6c42\n                    completePendingSyncRequestLocked(pendingSyncRequestPool, vhalRequestId, result);\n                    continue;\n                }\n\n                // \u5b8c\u6210\u5f02\u6b65\u8bf7\u6c42\u6c60\u4e2d\u7684\u8bf7\u6c42\n                AsyncRequestInfo requestInfo = mPendingAsyncRequestPool.finishRequestIfFound(\n                        vhalRequestId);\n\n                // \u5982\u679c\u8bf7\u6c42\u4fe1\u606f\u4e3a\u7a7a\uff0c\u8bf4\u660e\u8bf7\u6c42\u53ef\u80fd\u5df2\u7ecf\u8d85\u65f6\u3001\u88ab\u53d6\u6d88\u6216\u5ba2\u6237\u7aef\u5df2\u7ec8\u6b62\n                if (requestInfo == null) {\n                    Slogf.w(TAG,\n                            \"No pending request for ID: %s, possibly already timed out, \"\n                                    + \"or cancelled, or the client already died\", vhalRequestId);\n                    continue;\n                }\n\n                // \u6dfb\u52a0 VHAL \u7ed3\u679c\u5230\u5f02\u6b65\u7ed3\u679c\u5904\u7406\u5668\n                asyncResultsHandler.addVhalResult(requestInfo.getClientCallback(),\n                        requestInfo.getServiceRequestId(), result);\n            }\n        }\n\n        // \u5f00\u59cb\u6027\u80fd\u8ffd\u8e2a\uff0c\u6807\u8bb0\u5f02\u6b65\u7ed3\u679c\u56de\u8c03\u7684\u8c03\u7528\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub call async result callback\");\n        // \u8c03\u7528\u5f02\u6b65\u7ed3\u679c\u5904\u7406\u5668\u7684\u56de\u8c03\u65b9\u6cd5\n        asyncResultsHandler.callVehicleStubCallback();\n        // \u7ed3\u675f\u6027\u80fd\u8ffd\u8e2a\n        Trace.traceEnd(TRACE_TAG);\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684\u00a0<code>asyncResultsHandler</code>\u00a0\u5b9e\u9645\u4e0a\u662f\u00a0<code>AsyncSetResultsHandler</code>\uff0c\u800c\u00a0<code>callVehicleStubCallback()</code>\u00a0\u5219\u662f\u7528\u4e8e\u89e6\u53d1\u56de\u8c03\u7684\u65b9\u6cd5\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncresultshandler","title":"AsyncResultsHandler","text":"<p><code>AsyncSetResultsHandler</code>\u00a0\u662f\u4e00\u4e2a\u5185\u90e8\u9759\u6001\u7c7b\uff0c\u7ee7\u627f\u81ea\u00a0<code>AsyncResultsHandler</code>\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u770b\u770b <code>AsyncResultsHandler</code> \u7c7b\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u6765\u81ea VHAL \u7684\u5f02\u6b65\u83b7\u53d6/\u8bbe\u7f6e\u503c\u7684\u7ed3\u679c\u3002\n     * \u6cdb\u578b\u53c2\u6570\uff1a\n     * - VhalResultType\uff1a\u8868\u793a VHAL \u8fd4\u56de\u7684\u7ed3\u679c\u7c7b\u578b\u3002\n     * - VehicleStubResultType\uff1a\u8868\u793a\u6700\u7ec8\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u7ed3\u679c\u7c7b\u578b\u3002\n     */\n    private abstract static class AsyncResultsHandler&lt;VhalResultType, VehicleStubResultType&gt; {\n\n        // \u5b58\u50a8\u56de\u8c03\u63a5\u53e3\u4e0e\u5bf9\u5e94\u7ed3\u679c\u5217\u8868\u7684\u6620\u5c04\u5173\u7cfb\n        protected Map&lt;VehicleStubCallbackInterface, List&lt;VehicleStubResultType&gt;&gt; mCallbackToResults;\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2a\u9519\u8bef\u7ed3\u679c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u901a\u8fc7\u56de\u8c03\u53d1\u9001\u7ed9 vehicleStub\u3002\n         *\n         * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u901a\u77e5\u5ba2\u6237\u7aef\u3002\n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param errorCodes \u9519\u8bef\u4ee3\u7801\uff0c\u8868\u793a\u64cd\u4f5c\u5931\u8d25\u7684\u539f\u56e0\u3002\n         */\n        abstract void addErrorResult(VehicleStubCallbackInterface callback, int serviceRequestId,\n                                     CarPropertyErrorCodes errorCodes);\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2a VHAL \u7ed3\u679c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u901a\u8fc7\u56de\u8c03\u53d1\u9001\u7ed9 vehicleStub\u3002\n         *\n         * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u901a\u77e5\u5ba2\u6237\u7aef\u3002\n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param result VHAL \u8fd4\u56de\u7684\u7ed3\u679c\u3002\n         */\n        abstract void addVhalResult(VehicleStubCallbackInterface callback, int serviceRequestId,\n                                    VhalResultType result);\n\n        /**\n         * \u5c06\u6240\u6709\u5b58\u50a8\u7684\u7ed3\u679c\u53d1\u9001\u7ed9 vehicleStub\u3002\n         */\n        abstract void callVehicleStubCallback();\n\n        /**\n         * \u83b7\u53d6\u7ed3\u679c\u7684\u8bf7\u6c42 ID\u3002\n         *\n         * @param vhalRequest VHAL \u8bf7\u6c42\u3002\n         * @return \u8fd4\u56de\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         */\n        abstract long getVhalRequestId(VhalResultType vhalRequest);\n\n        /**\n         * \u6dfb\u52a0\u4e00\u4e2a\u7ed3\u679c\u5230\u56de\u8c03\u63a5\u53e3\u7684\u7ed3\u679c\u5217\u8868\u4e2d\u3002\n         *\n         * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u901a\u77e5\u5ba2\u6237\u7aef\u3002\n         * @param vehicleStubResult \u8981\u6dfb\u52a0\u7684\u7ed3\u679c\u3002\n         */\n        protected void addVehicleStubResult(VehicleStubCallbackInterface callback,\n                                            VehicleStubResultType vehicleStubResult) {\n            // \u5982\u679c\u56de\u8c03\u63a5\u53e3\u7684\u7ed3\u679c\u5217\u8868\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5217\u8868\n            if (mCallbackToResults.get(callback) == null) {\n                mCallbackToResults.put(callback, new ArrayList&lt;&gt;());\n            }\n            // \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u56de\u8c03\u63a5\u53e3\u7684\u7ed3\u679c\u5217\u8868\u4e2d\n            mCallbackToResults.get(callback).add(vehicleStubResult);\n        }\n    }\n}\n</code></pre> <p><code>mCallbackToResults</code>\u00a0\u7528\u4e8e\u5b58\u50a8\u56de\u8c03\u63a5\u53e3\u4e0e\u5176\u5bf9\u5e94\u7ed3\u679c\u5217\u8868\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5728\u00a0<code>addVehicleStubResult()</code>\u00a0\u65b9\u6cd5\u4e2d\uff0c\u5c06\u4e00\u4e2a\u7ed3\u679c\u6dfb\u52a0\u5230\u76f8\u5e94\u56de\u8c03\u63a5\u53e3\u7684\u7ed3\u679c\u5217\u8868\u4e2d\u3002</p> <p>\u6211\u4eec\u5728\u56de\u5230 AsyncSetResultsHandler \u4e2d\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncsetresultshandler","title":"AsyncSetResultsHandler","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n\nfinal class AidlVehicleStub extends VehicleStub {  \n\n    /**  \n     * \u5f02\u6b65\u8bbe\u7f6e\u7ed3\u679c\u5904\u7406\u5668\u3002  \n     * \u7ee7\u627f\u81ea AsyncResultsHandler\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u64cd\u4f5c\u7684\u7ed3\u679c\u3002  \n     * \u6cdb\u578b\u53c2\u6570\uff1a  \n     * - SetValueResult\uff1a\u8868\u793a\u5355\u4e2a\u8bbe\u7f6e\u64cd\u4f5c\u7684\u7ed3\u679c\u3002  \n     * - SetVehicleStubAsyncResult\uff1a\u8868\u793a\u6700\u7ec8\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u5f02\u6b65\u7ed3\u679c\u3002  \n     */  \n    private static final class AsyncSetResultsHandler extends  \n            AsyncResultsHandler&lt;SetValueResult, SetVehicleStubAsyncResult&gt; {  \n\n        /**  \n         * \u6784\u9020\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u56de\u8c03\u63a5\u53e3\u4e0e\u7ed3\u679c\u7684\u6620\u5c04\u5173\u7cfb\u3002  \n         */  \n        AsyncSetResultsHandler() {  \n            // \u521d\u59cb\u5316\u4e00\u4e2a ArrayMap\uff0c\u7528\u4e8e\u5b58\u50a8\u56de\u8c03\u63a5\u53e3\u548c\u5bf9\u5e94\u7684\u5f02\u6b65\u7ed3\u679c\u5217\u8868\u3002  \n            mCallbackToResults = new ArrayMap&lt;VehicleStubCallbackInterface,  \n                    List&lt;SetVehicleStubAsyncResult&gt;&gt;();  \n        }  \n\n        /**  \n         * \u6dfb\u52a0\u9519\u8bef\u7ed3\u679c\u3002  \n         *  \n         * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u901a\u77e5\u5ba2\u6237\u7aef\u3002  \n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n         * @param errorCodes \u9519\u8bef\u4ee3\u7801\uff0c\u8868\u793a\u8bbe\u7f6e\u64cd\u4f5c\u5931\u8d25\u7684\u539f\u56e0\u3002  \n         */  \n        @Override  \n        void addErrorResult(VehicleStubCallbackInterface callback, int serviceRequestId,  \n                            CarPropertyErrorCodes errorCodes) {  \n            // \u5c06\u9519\u8bef\u7ed3\u679c\u5c01\u88c5\u4e3a SetVehicleStubAsyncResult\uff0c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u3002  \n            addVehicleStubResult(callback,  \n                    new SetVehicleStubAsyncResult(serviceRequestId, errorCodes));  \n        }  \n\n        /**  \n         * \u6dfb\u52a0 VHAL \u8fd4\u56de\u7684\u7ed3\u679c\u3002  \n         *  \n         * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u901a\u77e5\u5ba2\u6237\u7aef\u3002  \n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n         * @param result VHAL \u8fd4\u56de\u7684\u8bbe\u7f6e\u7ed3\u679c\u3002  \n         */  \n        @Override  \n        void addVhalResult(VehicleStubCallbackInterface callback, int serviceRequestId,  \n                           SetValueResult result) {  \n            // \u5c06 VHAL \u8fd4\u56de\u7684\u7ed3\u679c\u8f6c\u6362\u4e3a SetVehicleStubAsyncResult\uff0c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u3002  \n            addVehicleStubResult(callback, toVehicleStubResult(serviceRequestId, result));  \n        }  \n\n        /**  \n         * \u8c03\u7528\u56de\u8c03\u63a5\u53e3\uff0c\u5c06\u5f02\u6b65\u7ed3\u679c\u901a\u77e5\u5ba2\u6237\u7aef\u3002  \n         */  \n        @Override  \n        void callVehicleStubCallback() {  \n            // \u904d\u5386\u6240\u6709\u56de\u8c03\u63a5\u53e3\u548c\u5bf9\u5e94\u7684\u7ed3\u679c\u5217\u8868  \n            for (Map.Entry&lt;VehicleStubCallbackInterface, List&lt;SetVehicleStubAsyncResult&gt;&gt; entry :  \n                    mCallbackToResults.entrySet()) {  \n                // \u8c03\u7528\u56de\u8c03\u63a5\u53e3\u7684 onSetAsyncResults \u65b9\u6cd5\uff0c\u5c06\u7ed3\u679c\u5217\u8868\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef  \n                entry.getKey().onSetAsyncResults(entry.getValue());  \n            }  \n        }  \n\n        /**  \n         * \u83b7\u53d6 VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n         *  \n         * @param result \u5355\u4e2a\u8bbe\u7f6e\u64cd\u4f5c\u7684\u7ed3\u679c\u3002  \n         * @return \u8fd4\u56de VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n         */  \n        @Override  \n        long getVhalRequestId(SetValueResult result) {  \n            return result.requestId;  \n        }  \n\n        /**  \n         * \u5c06 VHAL \u8fd4\u56de\u7684\u7ed3\u679c\u8f6c\u6362\u4e3a VehicleStub \u7684\u5f02\u6b65\u7ed3\u679c\u3002  \n         *  \n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n         * @param vhalResult VHAL \u8fd4\u56de\u7684\u8bbe\u7f6e\u7ed3\u679c\u3002  \n         * @return \u8fd4\u56de\u5c01\u88c5\u540e\u7684 SetVehicleStubAsyncResult \u5bf9\u8c61\u3002  \n         */  \n        private SetVehicleStubAsyncResult toVehicleStubResult(int serviceRequestId,  \n                                                              SetValueResult vhalResult) {  \n            // \u5982\u679c VHAL \u8fd4\u56de\u7684\u72b6\u6001\u4e0d\u662f OK\uff0c\u5219\u5c06\u9519\u8bef\u4ee3\u7801\u8f6c\u6362\u4e3a CarPropertyErrorCodes            if (vhalResult.status != StatusCode.OK) {  \n                CarPropertyErrorCodes carPropertyErrorCodes =  \n                        convertVhalStatusCodeToCarPropertyManagerErrorCodes(vhalResult.status);  \n                // \u8fd4\u56de\u5305\u542b\u9519\u8bef\u4ee3\u7801\u7684\u5f02\u6b65\u7ed3\u679c\u5bf9\u8c61  \n                return new SetVehicleStubAsyncResult(serviceRequestId, carPropertyErrorCodes);  \n            }  \n            // \u5982\u679c\u72b6\u6001\u662f OK\uff0c\u5219\u8fd4\u56de\u6210\u529f\u7684\u5f02\u6b65\u7ed3\u679c\u5bf9\u8c61  \n            return new SetVehicleStubAsyncResult(serviceRequestId);  \n        }  \n    }  \n}\n</code></pre> <p><code>callVehicleStubCallback()</code>\u00a0\u65b9\u6cd5\u904d\u5386\u6240\u6709\u56de\u8c03\u63a5\u53e3\u53ca\u5176\u5bf9\u5e94\u7684\u7ed3\u679c\u5217\u8868\uff0c\u8c03\u7528\u6bcf\u4e2a\u63a5\u53e3\u7684\u00a0<code>onSetAsyncResults</code>\u00a0\u65b9\u6cd5\uff0c\u5c06\u7ed3\u679c\u5217\u8868\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u3002\u800c\u00a0<code>mCallbackToResults</code>\u00a0\u7684\u5185\u5bb9\u662f\u5728\u00a0<code>addVhalResult()</code>\u00a0\u65b9\u6cd5\u4e2d\u901a\u8fc7\u8c03\u7528\u00a0<code>addVehicleStubResult()</code>\u00a0\u6dfb\u52a0\u7684\u3002</p> <p>\u5728\u00a0<code>AidlVehicleStub.onGetSetValues()</code>\u00a0\u4e2d\uff0c\u7531\u4e8e\u8bf7\u6c42\u4fe1\u606f\u4e3a\u7a7a\uff0c<code>addVhalResult()</code>\u00a0\u65b9\u6cd5\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u5728\u540e\u7eed\u8c03\u7528\u00a0<code>callVehicleStubCallback()</code>\u00a0\u65f6\uff0c\u904d\u5386\u4e0d\u4f1a\u8fdb\u5165 for \u5faa\u73af\u3002</p> <p>\u901a\u8fc7\u5206\u6790\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u540c\u6b65\u00a0<code>get/set</code>\u00a0\u64cd\u4f5c\u4e0d\u4f1a\u89e6\u53d1\u56de\u8c03\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u5e76\u4e0d\u5173\u6ce8\u56de\u8c03\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5728\u8fd9\u91cc\u8be6\u7ec6\u5206\u6790\u8fd9\u4e2a\u8fc7\u7a0b\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u8fd9\u662f\u4e3a\u4e86\u4e3a\u540e\u7eed\u5f02\u6b65\u00a0<code>get/set</code>\u00a0\u7684\u5206\u6790\u505a\u597d\u51c6\u5907\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_7","title":"\u5f02\u6b65\u83b7\u53d6\u5c5e\u6027","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalgetasync","title":"VehicleHal.getAsync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u4f7f\u7528 GetVehicleHalRequest \u5bf9\u8c61\u5217\u8868\u67e5\u8be2 HalPropValue\u3002\n     *\n     * &lt;p&gt;\u6b64\u65b9\u6cd5\u4f7f\u7528\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6 HalPropValue\u3002\n     *\n     * @param getVehicleStubAsyncRequests \u5305\u542b\u5f02\u6b65\u8bf7\u6c42\u7684\u5217\u8868\u3002\n     * @param getVehicleStubAsyncCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7ed3\u679c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     */\n    public void getAsync(List&lt;VehicleStub.AsyncGetSetRequest&gt; getVehicleStubAsyncRequests,\n                         VehicleStub.VehicleStubCallbackInterface getVehicleStubAsyncCallback) {\n        // \u8c03\u7528 mVehicleStub \u7684 getAsync \u65b9\u6cd5\uff0c\u4f20\u9012\u5f02\u6b65\u8bf7\u6c42\u5217\u8868\u548c\u56de\u8c03\u63a5\u53e3\n        mVehicleStub.getAsync(getVehicleStubAsyncRequests, getVehicleStubAsyncCallback);\n    }\n}\n</code></pre> <p>\u5728 \u63a5\u53e3 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u00a0<code>AsyncGetSetRequest</code>\u00a0\u548c\u00a0<code>VehicleStubCallbackInterface</code>\u3002<code>getAsync()</code>\u00a0\u65b9\u6cd5\u7528\u4e8e\u5f02\u6b65\u67e5\u8be2\u8f66\u8f86\u5c5e\u6027\u503c\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubgetasync","title":"AidlVehicleStub.getAsync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     *\n     * @param getVehicleStubAsyncRequests \u5305\u542b\u5f02\u6b65\u8bf7\u6c42\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a AsyncGetSetRequest \u5bf9\u8c61\u3002\n     * @param getCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7ed3\u679c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     */\n    @Override\n    public void getAsync(List&lt;AsyncGetSetRequest&gt; getVehicleStubAsyncRequests,\n                         VehicleStubCallbackInterface getCallback) {\n        // \u8c03\u7528 getOrSetAsync \u65b9\u6cd5\uff0c\u4f20\u9012\u5f02\u6b65\u8bf7\u6c42\u5217\u8868\u3001\u56de\u8c03\u63a5\u53e3\u3001\u8bf7\u6c42\u5904\u7406\u5668\u548c\u7ed3\u679c\u5904\u7406\u5668\n        getOrSetAsync(getVehicleStubAsyncRequests, getCallback, new AsyncGetRequestsHandler(),\n                new AsyncGetResultsHandler(mPropValueBuilder));\n    }\n}\n</code></pre> <ul> <li>getCallback\uff1a\u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7684\u7ed3\u679c\u3002</li> <li>AsyncGetRequestsHandler\uff1a\u5904\u7406\u5f02\u6b65\u83b7\u53d6\u8bf7\u6c42\u7684\u5904\u7406\u5668\u3002</li> <li>AsyncGetResultsHandler\uff1a\u5904\u7406\u5f02\u6b65\u83b7\u53d6\u7ed3\u679c\u7684\u5904\u7406\u5668\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubgetorsetasync","title":"AidlVehicleStub.getOrSetAsync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u7528\u4e8e {@link getAsync} \u6216 {@link setAsync} \u7684\u901a\u7528\u51fd\u6570\u3002\n     *\n     * @param vehicleStubAsyncRequests \u5305\u542b\u5f02\u6b65\u8bf7\u6c42\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a AsyncGetSetRequest \u5bf9\u8c61\u3002\n     * @param vehicleStubCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7ed3\u679c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     * @param asyncRequestsHandler \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u548c\u53d1\u9001\u8bf7\u6c42\u3002\n     * @param asyncResultsHandler \u5f02\u6b65\u7ed3\u679c\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\n     * @param &lt;VhalRequestType&gt; VHAL \u8bf7\u6c42\u7684\u7c7b\u578b\u3002\n     * @param &lt;VhalRequestsType&gt; VHAL \u8bf7\u6c42\u5217\u8868\u7684\u7c7b\u578b\u3002\n     */\n    private &lt;VhalRequestType, VhalRequestsType&gt; void getOrSetAsync(\n            List&lt;AsyncGetSetRequest&gt; vehicleStubAsyncRequests,\n            VehicleStubCallbackInterface vehicleStubCallback,\n            AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler,\n            AsyncResultsHandler asyncResultsHandler) {\n\n        // \u51c6\u5907\u5e76\u8f6c\u6362\u5f02\u6b65\u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u548c\u56de\u8c03\u63a5\u53e3\u4f20\u9012\u7ed9\u8bf7\u6c42\u5904\u7406\u5668\n        prepareAndConvertAsyncRequests(vehicleStubAsyncRequests, vehicleStubCallback,\n                asyncRequestsHandler);\n\n        try {\n            // \u901a\u8fc7\u8bf7\u6c42\u5904\u7406\u5668\u5c06\u8bf7\u6c42\u53d1\u9001\u5230 VHAL\n            asyncRequestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n        } catch (RemoteException e) {\n            // \u5904\u7406\u6765\u81ea VHAL \u7684\u8fdc\u7a0b\u5f02\u5e38\n            // \u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u9519\u8bef\u4ee3\u7801\u5bf9\u8c61\n            handleAsyncExceptionFromVhal(\n                    asyncRequestsHandler,\n                    vehicleStubCallback,\n                    new CarPropertyErrorCodes(\n                            CarPropertyManager.STATUS_ERROR_INTERNAL_ERROR,\n                            /* vendorErrorCode= */ 0,\n                            /* systemErrorCode= */ 0),\n                    asyncResultsHandler);\n            return;\n        } catch (ServiceSpecificException e) {\n            // \u5904\u7406\u670d\u52a1\u7279\u5b9a\u5f02\u5e38\uff0c\u5c06 VHAL \u72b6\u6001\u7801\u8f6c\u6362\u4e3a CarPropertyManager \u9519\u8bef\u4ee3\u7801\n            CarPropertyErrorCodes carPropertyErrorCodes =\n                    convertVhalStatusCodeToCarPropertyManagerErrorCodes(e.errorCode);\n            handleAsyncExceptionFromVhal(asyncRequestsHandler, vehicleStubCallback,\n                    carPropertyErrorCodes, asyncResultsHandler);\n            return;\n        }\n    }\n}\n</code></pre> <p>\u8c03\u7528 prepareAndConvertAsyncRequests() \u65b9\u6cd5\uff0c\u51c6\u5907\u5e76\u8f6c\u6362\u5f02\u6b65\u8bf7\u6c42\u3002\u5c06\u8bf7\u6c42\u548c\u56de\u8c03\u63a5\u53e3\u4f20\u9012\u7ed9 asyncRequestsHandler \u8fdb\u884c\u5904\u7406\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubprepareandconvertasyncrequests","title":"AidlVehicleStub.prepareAndConvertAsyncRequests()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {  \n\n    /**  \n     * \u51c6\u5907\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u5f02\u6b65 get/set \u8bf7\u6c42\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a VHAL \u8bf7\u6c42\u3002  \n     *  \n     * &lt;p&gt; \u8be5\u65b9\u6cd5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a  \n     * &lt;ul&gt;  \n     * &lt;li&gt; \u6dfb\u52a0\u4e00\u4e2a\u5ba2\u6237\u7aef\u56de\u8c03\u6b7b\u4ea1\u76d1\u542c\u5668\uff0c\u5f53\u5ba2\u6237\u7aef\u6b7b\u4ea1\u65f6\u6e05\u9664\u6302\u8d77\u7684\u8bf7\u6c42\u3002  \n     * &lt;li&gt; \u5c06\u5f02\u6b65\u8bf7\u6c42\u5b58\u50a8\u5230\u6302\u8d77\u8bf7\u6c42\u6620\u5c04\u4e2d\u3002  \n     * &lt;li&gt; \u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u8bf7\u6c42\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 VHAL \u8bf7\u6c42 ID\uff0c\u5e76\u5c06\u8bf7\u6c42\u8f6c\u6362\u4e3a VHAL \u8bf7\u6c42\u7c7b\u578b\u3002  \n     * &lt;li&gt; \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8d85\u65f6\u4fe1\u606f\u5b58\u50a8\u5230\u6620\u5c04\u4e2d\uff0c\u4ee5\u4fbf\u7a0d\u540e\u6ce8\u518c\u8d85\u65f6\u5904\u7406\u7a0b\u5e8f\u3002  \n     * &lt;li&gt; \u5c06 VHAL \u8bf7\u6c42\u9879\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5927\u578b\u53ef\u5e8f\u5217\u5316\u7c7b\u3002  \n     * &lt;/ul&gt;  \n     *  \n     * @param vehicleStubRequests \u5305\u542b\u5f02\u6b65\u8bf7\u6c42\u7684\u5217\u8868\u3002  \n     * @param clientCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7ed3\u679c\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\u3002  \n     * @param asyncRequestsHandler \u5f02\u6b65\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u548c\u53d1\u9001\u8bf7\u6c42\u3002  \n     * @param &lt;VhalRequestType&gt; VHAL \u8bf7\u6c42\u7684\u7c7b\u578b\u3002  \n     * @param &lt;VhalRequestsType&gt; VHAL \u8bf7\u6c42\u5217\u8868\u7684\u7c7b\u578b\u3002  \n     */  \n    private &lt;VhalRequestType, VhalRequestsType&gt; void prepareAndConvertAsyncRequests(  \n            List&lt;AsyncGetSetRequest&gt; vehicleStubRequests,  \n            VehicleStubCallbackInterface clientCallback,  \n            AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler) {  \n\n        // \u4e3a VHAL \u8bf7\u6c42\u5206\u914d\u5927\u5c0f\uff0c\u51c6\u5907\u5904\u7406\u6307\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42  \n        asyncRequestsHandler.allocateVhalRequestSize(vehicleStubRequests.size());  \n\n        synchronized (mLock) {  \n            // \u6dfb\u52a0\u6b7b\u4ea1\u63a5\u6536\u8005\uff0c\u4ee5\u4fbf\u5728\u56de\u8c03\u6b7b\u4ea1\u65f6\u6e05\u9664\u6240\u6709\u5ba2\u6237\u7aef\u4fe1\u606f\u3002  \n            // \u6ce8\u610f\uff0c\u8fd9\u5fc5\u987b\u4e0e\u5b58\u50a8\u5ba2\u6237\u7aef\u4fe1\u606f\u5230\u6620\u5c04\u7684\u4ee3\u7801\u5728\u540c\u4e00\u4e2a\u4e34\u754c\u533a\u5185\u3002  \n            // \u8fd9\u786e\u4fdd\u5373\u4f7f\u5ba2\u6237\u7aef\u5728\u6dfb\u52a0\u5ba2\u6237\u7aef\u4fe1\u606f\u65f6\u4e2d\u9014\u6b7b\u4ea1\uff0c\u4e5f\u4f1a\u7b49\u5f85\u6240\u6709\u5ba2\u6237\u7aef\u88ab\u6dfb\u52a0\u540e\u518d\u79fb\u9664\u5b83\u4eec\u3002  \n            try {  \n                clientCallback.linkToDeath(() -&gt; {  \n                    // \u8be5\u51fd\u6570\u5c06\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e2d\u8c03\u7528\u3002\u9700\u8981\u901a\u8fc7\u9501\u8fdb\u884c\u4fdd\u62a4\uff0c\u4ee5\u786e\u4fdd\u5728\u79fb\u9664\u56de\u8c03\u4e4b\u524d  \n                    // 'prepareAndConvertAsyncRequests' \u5b8c\u6210\u3002  \n                    synchronized (mLock) {  \n                        mPendingAsyncRequestPool.removeRequestsForCallback(clientCallback);  \n                    }  \n                });  \n            } catch (RemoteException e) {  \n                // Binder \u5df2\u7ecf\u6b7b\u4ea1\u3002  \n                throw new IllegalStateException(\"\u65e0\u6cd5\u5c06\u56de\u8c03\u94fe\u63a5\u5230\u6b7b\u4ea1\u63a5\u6536\u8005\uff0c\u5ba2\u6237\u7aef\u53ef\u80fd\u5df2\u7ecf\u6b7b\u4ea1\");  \n            }  \n\n            List&lt;AsyncRequestInfo&gt; requestInfoList = new ArrayList&lt;&gt;();  \n            for (int i = 0; i &lt; vehicleStubRequests.size(); i++) {  \n                AsyncGetSetRequest vehicleStubRequest = vehicleStubRequests.get(i);  \n                // \u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 VHAL \u8bf7\u6c42 ID                long vhalRequestId = mRequestId.getAndIncrement();  \n                // \u5c06\u8bf7\u6c42\u6dfb\u52a0\u5230 VHAL \u8bf7\u6c42\u5904\u7406\u5668\u4e2d  \n                asyncRequestsHandler.addVhalRequest(vhalRequestId,  \n                        vehicleStubRequest.getHalPropValue());  \n                // \u521b\u5efa\u8bf7\u6c42\u4fe1\u606f\u5bf9\u8c61\uff0c\u5e76\u6dfb\u52a0\u5230\u8bf7\u6c42\u4fe1\u606f\u5217\u8868\u4e2d  \n                requestInfoList.add(new AsyncRequestInfo(  \n                        vhalRequestId, vehicleStubRequest.getServiceRequestId(), clientCallback,  \n                        vehicleStubRequest.getTimeoutUptimeMs()));  \n            }  \n            // \u5c06\u8bf7\u6c42\u4fe1\u606f\u5217\u8868\u6dfb\u52a0\u5230\u6302\u8d77\u7684\u5f02\u6b65\u8bf7\u6c42\u6c60\u4e2d  \n            mPendingAsyncRequestPool.addRequests(requestInfoList);  \n        }  \n    }  \n}\n</code></pre> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\uff0c\u5373\u00a0<code>vehicleStubRequests.size()</code>\uff0c\u6211\u4eec\u904d\u5386\u5e76\u8c03\u7528\u00a0<code>AsyncGetRequestsHandler.addVhalRequest</code>\u00a0\u65b9\u6cd5\uff0c\u5c06\u8bf7\u6c42\u6dfb\u52a0\u5230 VHAL \u8bf7\u6c42\u5904\u7406\u5668\u4e2d\u3002\u8fd9\u90e8\u5206\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u521b\u5efa\u00a0<code>AsyncRequestInfo</code>\u00a0\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u00a0<code>requestInfoList</code>\u00a0\u5217\u8868\u4e2d\u3002\u6700\u540e\uff0c\u5c06\u00a0<code>requestInfoList</code>\u00a0\u5217\u8868\u6dfb\u52a0\u5230\u00a0<code>mPendingAsyncRequestPool</code>\u00a0\u4e2d\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncrequestinfo","title":"AsyncRequestInfo","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5f02\u6b65\u8bf7\u6c42\u4fe1\u606f\u7c7b\uff0c\u7528\u4e8e\u5b58\u50a8\u5f02\u6b65\u8bf7\u6c42\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     * \u5b9e\u73b0\u4e86 LongRequestIdWithTimeout \u63a5\u53e3\uff0c\u63d0\u4f9b\u8bf7\u6c42 ID \u548c\u8d85\u65f6\u65f6\u95f4\u7684\u8bbf\u95ee\u65b9\u6cd5\u3002\n     */\n    private static class AsyncRequestInfo implements LongRequestIdWithTimeout {\n\n        // \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n        private final int mServiceRequestId;\n        // \u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u7ed3\u679c\n        private final VehicleStubCallbackInterface mClientCallback;\n        // \u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u4ee5\u7cfb\u7edf\u542f\u52a8\u65f6\u95f4\u4e3a\u57fa\u51c6\u7684\u6beb\u79d2\u6570\n        private final long mTimeoutUptimeMs;\n        // VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n        private final long mVhalRequestId;\n\n        /**\n         * \u6784\u9020\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u5f02\u6b65\u8bf7\u6c42\u4fe1\u606f\u5bf9\u8c61\u3002\n         *\n         * @param vhalRequestId VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param serviceRequestId \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         * @param clientCallback \u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\u3002\n         * @param timeoutUptimeMs \u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\u3002\n         */\n        private AsyncRequestInfo(\n                long vhalRequestId,\n                int serviceRequestId,\n                VehicleStubCallbackInterface clientCallback,\n                long timeoutUptimeMs) {\n            mVhalRequestId = vhalRequestId;\n            mServiceRequestId = serviceRequestId;\n            mClientCallback = clientCallback;\n            mTimeoutUptimeMs = timeoutUptimeMs;\n        }\n\n        /**\n         * \u83b7\u53d6 VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         *\n         * @return VHAL \u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         */\n        @Override\n        public long getRequestId() {\n            return mVhalRequestId;\n        }\n\n        /**\n         * \u83b7\u53d6\u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\u3002\n         *\n         * @return \u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u4ee5\u7cfb\u7edf\u542f\u52a8\u65f6\u95f4\u4e3a\u57fa\u51c6\u7684\u6beb\u79d2\u6570\u3002\n         */\n        @Override\n        public long getTimeoutUptimeMs() {\n            return mTimeoutUptimeMs;\n        }\n\n        /**\n         * \u83b7\u53d6\u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         *\n         * @return \u670d\u52a1\u8bf7\u6c42\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n         */\n        public int getServiceRequestId() {\n            return mServiceRequestId;\n        }\n\n        /**\n         * \u83b7\u53d6\u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\u3002\n         *\n         * @return \u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\u3002\n         */\n        public VehicleStubCallbackInterface getClientCallback() {\n            return mClientCallback;\n        }\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mClientCallback \u5176\u5b9e\u5c31\u662f\u524d\u9762 VehicleHal.getAsync() \u4f20\u8fdb\u6765\u7684 VehicleStubCallbackInterface \u3002</p> <p>\u56de\u5230 AidlVehicleStub.prepareAndConvertAsyncRequests() \u51fd\u6570\u4e2d\uff0c\u5c06\u00a0<code>requestInfoList</code>\u00a0\u5217\u8868\u6dfb\u52a0\u5230\u00a0<code>mPendingAsyncRequestPool</code>\u00a0\u4e2d\u6211\u4eec\u4e0d\u5c55\u5f00\u5206\u6790\u4e86\u3002</p> <p>\u90a3\u5c31\u7ee7\u7eed\u8fd4\u56de\u5230 AidlVehicleStub.getOrSetAsync()\uff0c\u8c03\u7528\u4e86\uff1a</p> <pre><code>asyncRequestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n</code></pre> <p>\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0c<code>asyncRequestsHandler</code> \u5c31\u662f<code>AsyncGetRequestsHandler</code>\uff0c\u8fd9\u91cc\u6211\u4eec\u53c8\u770b\u5230\u4e86 <code>mGetSetValuesCallback</code>\u3002 \u5173\u4e8e <code>mGetSetValuesCallback</code> \u56de\u987e \u540c\u6b65\u4e4b\u56de\u8c03 \u5373\u53ef\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#asyncgetrequestshandlersendrequeststovhal","title":"AsyncGetRequestsHandler.sendRequestsToVhal()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5f02\u6b65\u83b7\u53d6\u8bf7\u6c42\u5904\u7406\u5668\u7c7b\u3002\n     * \u7ee7\u627f\u81ea AsyncRequestsHandler\uff0c\u7528\u4e8e\u5904\u7406\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u5f02\u6b65\u8bf7\u6c42\u3002\n     */\n    private static final class AsyncGetRequestsHandler\n            extends AsyncRequestsHandler&lt;GetValueRequest, GetValueRequests&gt; {\n\n        /**\n         * \u5c06\u8bf7\u6c42\u53d1\u9001\u5230 VHAL\uff08\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u3002\n         *\n         * @param iVehicle VHAL \u63a5\u53e3\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u8fdb\u884c\u901a\u4fe1\u3002\n         * @param callbackForVhal \u7528\u4e8e\u5904\u7406 VHAL \u54cd\u5e94\u7684\u56de\u8c03\u63a5\u53e3\u3002\n         * @throws RemoteException \u5982\u679c\u4e0e VHAL \u7684\u901a\u4fe1\u53d1\u751f\u8fdc\u7a0b\u5f02\u5e38\u3002\n         * @throws ServiceSpecificException \u5982\u679c\u53d1\u751f\u670d\u52a1\u7279\u5b9a\u7684\u5f02\u5e38\u3002\n         */\n        @Override\n        public void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n                throws RemoteException, ServiceSpecificException {\n            // \u5f00\u59cb\u8ddf\u8e2a \"Prepare LargeParcelable\" \u64cd\u4f5c\n            Trace.traceBegin(TRACE_TAG, \"Prepare LargeParcelable\");\n\n            // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 GetValueRequests \u5bf9\u8c61\uff0c\u7528\u4e8e\u5b58\u50a8\u8bf7\u6c42\u7684\u6709\u6548\u8d1f\u8f7d\n            GetValueRequests largeParcelableRequest = new GetValueRequests();\n            largeParcelableRequest.payloads = mVhalRequestItems;\n\n            // TODO: \u5982\u679c\u8bf7\u6c42\u5927\u5c0f\u592a\u5c0f\uff0c\u4e0d\u8981\u5c1d\u8bd5\u4f7f\u7528\u5927\u578b\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\u3002\n            largeParcelableRequest = (GetValueRequests) LargeParcelable.toLargeParcelable(\n                    largeParcelableRequest, () -&gt; {\n                        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 GetValueRequests \u5bf9\u8c61\uff0c\u521d\u59cb\u5316\u4e3a\u7a7a\u7684\u6709\u6548\u8d1f\u8f7d\u6570\u7ec4\n                        GetValueRequests newRequests = new GetValueRequests();\n                        newRequests.payloads = new GetValueRequest[0];\n                        return newRequests;\n                    });\n\n            // \u7ed3\u675f\u8ddf\u8e2a \"Prepare LargeParcelable\" \u64cd\u4f5c\n            Trace.traceEnd(TRACE_TAG);\n\n            // \u5f00\u59cb\u8ddf\u8e2a \"IVehicle#getValues\" \u64cd\u4f5c\n            Trace.traceBegin(TRACE_TAG, \"IVehicle#getValues\");\n\n            // \u8c03\u7528 VHAL \u7684 getValues \u65b9\u6cd5\uff0c\u4f20\u9012\u56de\u8c03\u63a5\u53e3\u548c\u8bf7\u6c42\u5bf9\u8c61\n            iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n\n            // \u7ed3\u675f\u8ddf\u8e2a \"IVehicle#getValues\" \u64cd\u4f5c\n            Trace.traceEnd(TRACE_TAG);\n        }\n    }\n}\n</code></pre> <p>\u770b\u5230\u4e86\uff0c\u8fd9\u91cc\u8ddf\u524d\u9762 \u540c\u6b65\u83b7\u53d6\u5c5e\u6027 \u662f\u4e00\u6837\u7684\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u5728 AidlVehicleStub.prepareAndConvertAsyncRequests() \u65f6\u8bbe\u7f6e\u4e86\u56de\u8c03\u63a5\u53e3 VehicleStubCallbackInterface \u7ed9 mPendingAsyncRequestPool\u3002</p> <pre><code>iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n</code></pre> <p>\u56e0\u6b64\uff0c\u63a5\u4e0b\u6765\u5c06\u6309\u987a\u5e8f\u4f9d\u6b21\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <ol> <li><code>AidlVehicleStub.onSetValues()</code></li> <li><code>AidlVehicleStub.onGetSetValues()</code></li> <li><code>AsyncGetResultsHandler.callVehicleStubCallback()</code></li> <li><code>VehicleStubCallbackInterface.onGetAsyncResults()</code></li> </ol> <p>\u7531\u4e8e\u4e4b\u524d\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u00a0<code>VehicleStubCallbackInterface</code>\uff0c\u56e0\u6b64\u5728\u00a0<code>callVehicleStubCallback()</code>\u00a0\u904d\u5386\u65f6\u80fd\u591f\u627e\u5230\u5ba2\u6237\u7aef\uff0c\u4ece\u800c\u6210\u529f\u56de\u8c03\u5230\u00a0<code>onGetAsyncResults()</code>\u3002</p> <p>\u8be6\u60c5\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 \u540c\u6b65\u4e4b\u56de\u8c03 \u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_8","title":"\u5f02\u6b65\u8bbe\u7f6e\u5c5e\u6027","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalsetasync","title":"VehicleHal.setAsync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u5f02\u6b65\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     *\n     * @param setVehicleStubAsyncRequests \u5305\u542b\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a AsyncGetSetRequest \u5bf9\u8c61\u3002\n     * @param setVehicleStubAsyncCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7ed3\u679c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     */\n    public void setAsync(List&lt;VehicleStub.AsyncGetSetRequest&gt; setVehicleStubAsyncRequests,\n                         VehicleStub.VehicleStubCallbackInterface setVehicleStubAsyncCallback) {\n        // \u8c03\u7528 mVehicleStub \u7684 setAsync \u65b9\u6cd5\uff0c\u4f20\u9012\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u5217\u8868\u548c\u56de\u8c03\u63a5\u53e3\n        mVehicleStub.setAsync(setVehicleStubAsyncRequests, setVehicleStubAsyncCallback);\n    }\n}\n</code></pre> <p>\u540c VehicleHal.getAsync() \uff0c\u8fd9\u91cc\u4f9d\u7136\u4f20\u4e86\u4e00\u4e2a\u56de\u8c03\u8fdb\u53bb\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#aidlvehiclestubsetasync","title":"AidlVehicleStub.setAsync()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    /**\n     * \u5f02\u6b65\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     *\n     * @param setVehicleStubAsyncRequests \u5305\u542b\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u662f\u4e00\u4e2a AsyncGetSetRequest \u5bf9\u8c61\u3002\n     * @param setCallback \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7ed3\u679c\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     */\n    @Override\n    public void setAsync(List&lt;AsyncGetSetRequest&gt; setVehicleStubAsyncRequests,\n                         VehicleStubCallbackInterface setCallback) {\n        // \u8c03\u7528 getOrSetAsync \u65b9\u6cd5\uff0c\u4f20\u9012\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u5217\u8868\u3001\u56de\u8c03\u63a5\u53e3\u3001\u8bbe\u7f6e\u8bf7\u6c42\u5904\u7406\u5668\u548c\u7ed3\u679c\u5904\u7406\u5668\n        getOrSetAsync(setVehicleStubAsyncRequests, setCallback, new AsyncSetRequestsHandler(),\n                new AsyncSetResultsHandler());\n    }\n}\n</code></pre> <p>\u8ddf AidlVehicleStub.getAsync() \u4e00\u6837\u8c03\u7528\u540c\u6837\u7684\u63a5\u53e3 AidlVehicleStub.getOrSetAsync()\u3002\u4f46\u4f20\u7684\u53c2\u6570\u4e0d\u592a\u4e00\u6837\u3002 - setCallback\uff1a\u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u7684\u7ed3\u679c\u3002 - AsyncSetRequestsHandler\uff1a\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u8bf7\u6c42\u7684\u5904\u7406\u5668\u3002 - AsyncSetResultsHandler\uff1a\u7528\u4e8e\u5904\u7406\u5f02\u6b65\u8bbe\u7f6e\u7ed3\u679c\u7684\u5904\u7406\u5668\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u6d41\u7a0b\u8ddf \u5f02\u6b65\u83b7\u53d6\u5c5e\u6027 \u5927\u540c\u5c0f\u5f02\uff0c\u6700\u7ec8\u4f1a\u901a\u8fc7\u56de\u8c03\u8c03\u5230  <code>VehicleStubCallbackInterface.onSetAsyncResults()</code></p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_9","title":"\u8ba2\u9605","text":"<p>\u5728\u524d\u9762\u7684\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5728<code>VehicleHal</code>\u4e2d\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5bf9\u6b64\u8fdb\u884c\u8865\u5145\u8bf4\u660e\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalsubscribepropertysafe","title":"VehicleHal.subscribePropertySafe()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u5b89\u5168\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n     * \u8be5\u65b9\u6cd5\u7c7b\u4f3c\u4e8e {@link #subscribeProperty(HalServiceBase, int)}\uff0c\u4f46\u6355\u83b7\u5e76\u8bb0\u5f55\u6240\u6709\u5f02\u5e38\u3002\n     * \n     * @param service \u5b9e\u73b0\u4e86 HalServiceBase \u7684\u670d\u52a1\u5bf9\u8c61\uff0c\u7528\u4e8e\u5904\u7406\u8ba2\u9605\u7684\u5c5e\u6027\u3002\n     * @param property \u8981\u8ba2\u9605\u7684\u8f66\u8f86\u5c5e\u6027\u7684\u6807\u8bc6\u7b26\u3002\n     */\n    public void subscribePropertySafe(HalServiceBase service, int property) {\n        try {\n            // \u5c1d\u8bd5\u8ba2\u9605\u6307\u5b9a\u7684\u8f66\u8f86\u5c5e\u6027\n            subscribeProperty(service, property);\n        } catch (IllegalArgumentException | ServiceSpecificException e) {\n            // \u6355\u83b7 IllegalArgumentException \u548c ServiceSpecificException \u5f02\u5e38\n            // \u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\uff0c\u5305\u542b\u5931\u8d25\u7684\u5c5e\u6027\u6807\u8bc6\u7b26\u548c\u5f02\u5e38\u4fe1\u606f\n            Slogf.w(CarLog.TAG_HAL, \"Failed to subscribe for property: \"\n                    + VehiclePropertyIds.toString(property), e);\n        }\n    }\n}\n</code></pre> <p><code>subscribePropertySafe()</code> \u65b9\u6cd5\u7528\u4e8e\u5b89\u5168\u5730\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u3002\u4e0e<code>subscribeProperty()</code> \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u589e\u52a0\u4e86\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u5728\u8ba2\u9605\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\u65f6\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalsubscribeproperty","title":"VehicleHal.subscribeProperty()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u8ba2\u9605\u7ed9\u5b9a\u7684\u5c5e\u6027\uff0c\u91c7\u6837\u7387\u9ed8\u8ba4\u4e3a0\uff0c\u6ca1\u6709\u63d0\u4f9b\u7279\u6b8a\u6807\u5fd7\u3002\n     *\n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684HalService\n     * @param property \u8981\u8ba2\u9605\u7684\u5c5e\u6027ID\uff08VehicleProperty\uff09\n     * @throws IllegalArgumentException \u5982\u679c\u5c5e\u6027\u4e0d\u53d7VHAL\u652f\u6301\u65f6\u629b\u51fa\n     * @throws ServiceSpecificException \u5982\u679cVHAL\u8fd4\u56de\u9519\u8bef\u6216\u4e0eVHAL\u5931\u53bb\u8fde\u63a5\u65f6\u629b\u51fa\n     * @see #subscribeProperty(HalServiceBase, int, float)\n     */\n    public void subscribeProperty(HalServiceBase service, int property)\n            throws IllegalArgumentException, ServiceSpecificException {\n        // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u91c7\u6837\u7387\u4e3a0\n        subscribeProperty(service, property, /* samplingRateHz= */ 0f);\n    }\n\n    /**\n     * \u8ba2\u9605\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002\u53ea\u6709\u62e5\u6709\u8be5\u5c5e\u6027\u7684Hal\u670d\u52a1\u53ef\u4ee5\u8ba2\u9605\u5b83\u3002\n     *\n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684HalService\n     * @param property \u8981\u8ba2\u9605\u7684\u5c5e\u6027ID\uff08VehicleProperty\uff09\n     * @param samplingRateHz \u8fde\u7eed\u5c5e\u6027\u7684\u91c7\u6837\u7387\uff0c\u4ee5\u8d6b\u5179\u4e3a\u5355\u4f4d\n     * @throws IllegalArgumentException \u5982\u679c\u5c5e\u6027\u4e0d\u53d7VHAL\u652f\u6301\u65f6\u629b\u51fa\n     * @throws ServiceSpecificException \u5982\u679cVHAL\u8fd4\u56de\u9519\u8bef\u6216\u4e0eVHAL\u5931\u53bb\u8fde\u63a5\u65f6\u629b\u51fa\n     */\n    public void subscribeProperty(HalServiceBase service, int property, float samplingRateHz)\n            throws IllegalArgumentException, ServiceSpecificException {\n        // \u521b\u5efa\u8ba2\u9605\u9009\u9879\u5bf9\u8c61\uff0c\u5305\u542b\u5c5e\u6027ID\u548c\u91c7\u6837\u7387\n        HalSubscribeOptions options = new HalSubscribeOptions(property, new int[0], samplingRateHz);\n        // \u8c03\u7528\u53e6\u4e00\u4e2a\u91cd\u8f7d\u65b9\u6cd5\uff0c\u4f20\u9012\u8ba2\u9605\u9009\u9879\u5217\u8868\n        subscribeProperty(service, List.of(options));\n    }\n\n    /**\n     * \u8ba2\u9605\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002\u53ea\u6709\u62e5\u6709\u8be5\u5c5e\u6027\u7684Hal\u670d\u52a1\u53ef\u4ee5\u8ba2\u9605\u5b83\u3002\n     *\n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684HalService\n     * @param halSubscribeOptions \u8ba2\u9605VHAL\u6240\u9700\u7684\u4fe1\u606f\n     * @throws IllegalArgumentException \u5982\u679c\u5c5e\u6027\u4e0d\u53d7VHAL\u652f\u6301\u65f6\u629b\u51fa\n     * @throws ServiceSpecificException \u5982\u679cVHAL\u8fd4\u56de\u9519\u8bef\u6216\u4e0eVHAL\u5931\u53bb\u8fde\u63a5\u65f6\u629b\u51fa\n     */\n    public void subscribeProperty(HalServiceBase service, List&lt;HalSubscribeOptions&gt;\n            halSubscribeOptions) throws IllegalArgumentException, ServiceSpecificException {\n        // \u540c\u6b65\u5757\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n        synchronized (mLock) {\n            // \u514b\u9686\u5f53\u524d\u7684\u8ba2\u9605\u72b6\u6001\uff0c\u4ee5\u4fbf\u5728\u5931\u8d25\u65f6\u6062\u590d\n            PairSparseArray&lt;RateInfo&gt; previousState = cloneState(mRateInfoByPropIdAreaId);\n            // \u521b\u5efaVHAL\u8ba2\u9605\u9009\u9879\n            SubscribeOptions[] subscribeOptions = createVhalSubscribeOptionsLocked(\n                    service, halSubscribeOptions);\n            // \u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u8ba2\u9605\u9009\u9879\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\u5e76\u8fd4\u56de\n            if (subscribeOptions.length == 0) {\n                if (DBG) {\n                    Slogf.d(CarLog.TAG_HAL,\n                            \"Ignore the subscribeProperty request, SubscribeOptions is length 0\");\n                }\n                return;\n            }\n            try {\n                // \u5c1d\u8bd5\u8ba2\u9605\u5c5e\u6027\n                mSubscriptionClient.subscribe(subscribeOptions);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u53d1\u751f\u8fdc\u7a0b\u5f02\u5e38\uff0c\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u5e76\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\n                mRateInfoByPropIdAreaId = previousState;\n                Slogf.w(CarLog.TAG_HAL, \"Failed to subscribe, connection to VHAL failed\", e);\n                // \u5c06RemoteException\u8f6c\u6362\u4e3aServiceSpecificException\uff0c\u4ee5\u4fbf\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\n                throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                        \"Failed to subscribe, connection to VHAL failed, error: \" + e);\n            } catch (ServiceSpecificException e) {\n                // \u5982\u679c\u53d1\u751f\u7279\u5b9a\u670d\u52a1\u5f02\u5e38\uff0c\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u5e76\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\n                mRateInfoByPropIdAreaId = previousState;\n                Slogf.w(CarLog.TAG_HAL, \"Failed to subscribe, received error from VHAL\", e);\n                throw e;\n            }\n        }\n    }\n}\n</code></pre> <p><code>subscribeProperty()</code> \u63d0\u4f9b\u4e86\u591a\u79cd\u91cd\u8f7d\u65b9\u6cd5\uff0c\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u8ba2\u9605\u9700\u6c42\uff08\u4f8b\u5982\u4e0d\u540c\u7684\u91c7\u6837\u7387\uff09\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalcreatevhalsubscribeoptionslocked","title":"VehicleHal.createVhalSubscribeOptionsLocked()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u5c06 {@link HalSubscribeOptions} \u8f6c\u6362\u4e3a {@link SubscribeOptions}\uff0c\u540e\u8005\u662f VHAL \u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002\n     * \n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684 HalService\n     * @param halSubscribeOptions \u5305\u542b\u8ba2\u9605\u4fe1\u606f\u7684 HalSubscribeOptions \u5217\u8868\n     * @return \u8f6c\u6362\u540e\u7684 SubscribeOptions \u6570\u7ec4\n     * @throws IllegalArgumentException \u5982\u679c\u5c5e\u6027\u4e0d\u53d7\u652f\u6301\u6216\u65e0\u6cd5\u8ba2\u9605\u65f6\u629b\u51fa\n     */\n    @GuardedBy(\"mLock\")\n    private SubscribeOptions[] createVhalSubscribeOptionsLocked(HalServiceBase service,\n                                                                List&lt;HalSubscribeOptions&gt; halSubscribeOptions) throws IllegalArgumentException {\n        // \u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u521b\u5efa\u8ba2\u9605\u9009\u9879\u7684\u65e5\u5fd7\n        if (DBG) {\n            Slogf.d(CarLog.TAG_HAL, \"creating subscribeOptions from HalSubscribeOptions of size: \"\n                    + halSubscribeOptions.size());\n        }\n        // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u8ba2\u9605\u9009\u9879\u7684\u5217\u8868\n        List&lt;SubscribeOptions&gt; subscribeOptionsList = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; halSubscribeOptions.size(); i++) {\n            // \u83b7\u53d6\u5f53\u524d\u7684 HalSubscribeOptions\n            HalSubscribeOptions halSubscribeOption = halSubscribeOptions.get(i);\n            int property = halSubscribeOption.getHalPropId(); // \u83b7\u53d6\u5c5e\u6027ID\n            int[] areaIds = halSubscribeOption.getAreaId(); // \u83b7\u53d6\u533a\u57dfID\n            float samplingRateHz = halSubscribeOption.getUpdateRateHz(); // \u83b7\u53d6\u91c7\u6837\u7387\n            boolean enableVariableUpdateRate = halSubscribeOption.isVariableUpdateRateEnabled(); // \u662f\u5426\u542f\u7528\u53ef\u53d8\u66f4\u65b0\u7387\n            float resolution = halSubscribeOption.getResolution(); // \u83b7\u53d6\u5206\u8fa8\u7387\n\n            // \u4ece\u6240\u6709\u5c5e\u6027\u4e2d\u83b7\u53d6\u5f53\u524d\u5c5e\u6027\u7684\u914d\u7f6e\n            HalPropConfig config = mAllProperties.get(property);\n\n            // \u5982\u679c\u914d\u7f6e\u4e3a\u7a7a\uff0c\u629b\u51fa\u5f02\u5e38\n            if (config == null) {\n                throw new IllegalArgumentException(\"subscribe error: \"\n                        + toPropertyIdString(property) + \" is not supported\");\n            }\n\n            // \u68c0\u67e5\u662f\u5426\u542f\u7528\u53ef\u53d8\u66f4\u65b0\u7387\n            if (enableVariableUpdateRate) {\n                // \u5982\u679c\u5c5e\u6027\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u7981\u7528\u53ef\u53d8\u66f4\u65b0\u7387\n                if (config.getChangeMode() != VehiclePropertyChangeMode.CONTINUOUS) {\n                    enableVariableUpdateRate = false;\n                    Slogf.w(CarLog.TAG_HAL, \"VUR is always off for non-continuous property: \"\n                            + toPropertyIdString(property));\n                }\n                // \u5982\u679c\u7279\u6027\u6807\u5fd7\u4e0d\u652f\u6301\u53ef\u53d8\u66f4\u65b0\u7387\uff0c\u7981\u7528\u53ef\u53d8\u66f4\u65b0\u7387\n                if (!mFeatureFlags.variableUpdateRate()) {\n                    enableVariableUpdateRate = false;\n                    Slogf.w(CarLog.TAG_HAL, \"VUR feature is not enabled, VUR is always off\");\n                }\n            }\n\n            // \u68c0\u67e5\u5206\u8fa8\u7387\n            if (resolution != 0.0f) {\n                // \u5982\u679c\u5c5e\u6027\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8bbe\u7f6e\u5206\u8fa8\u7387\u4e3a0\n                if (config.getChangeMode() != VehiclePropertyChangeMode.CONTINUOUS) {\n                    resolution = 0.0f;\n                    Slogf.w(CarLog.TAG_HAL, \"resolution is always 0 for non-continuous property: \"\n                            + toPropertyIdString(property));\n                }\n                // \u5982\u679c\u7279\u6027\u6807\u5fd7\u4e0d\u652f\u6301\u5206\u8fa8\u7387\uff0c\u8bbe\u7f6e\u5206\u8fa8\u7387\u4e3a0\n                if (!mFeatureFlags.subscriptionWithResolution()) {\n                    resolution = 0.0f;\n                    Slogf.w(CarLog.TAG_HAL,\n                            \"Resolution feature is not enabled, resolution is always 0\");\n                }\n            }\n\n            // \u5982\u679c\u5c5e\u6027\u662f\u9759\u6001\u7684\uff0c\u5ffd\u7565\u8ba2\u9605\u8bf7\u6c42\n            if (isStaticProperty(config)) {\n                Slogf.w(CarLog.TAG_HAL, \"Ignore subscribing to static property: \"\n                        + toPropertyIdString(property));\n                continue;\n            }\n\n            // \u68c0\u67e5\u533a\u57dfID\n            if (areaIds.length == 0) {\n                // \u5982\u679c\u5c5e\u6027\u4e0d\u53ef\u8ba2\u9605\uff0c\u629b\u51fa\u5f02\u5e38\n                if (!isPropertySubscribable(config)) {\n                    throw new IllegalArgumentException(\"Property: \" + toPropertyIdString(property)\n                            + \" is not subscribable\");\n                }\n                // \u83b7\u53d6\u6240\u6709\u533a\u57dfID\n                areaIds = getAllAreaIdsFromPropertyId(config);\n            } else {\n                // \u68c0\u67e5\u6bcf\u4e2a\u533a\u57dfID\u7684\u53ef\u8bbf\u95ee\u6027\n                for (int j = 0; j &lt; areaIds.length; j++) {\n                    Integer access = mAccessByPropIdAreaId.get(config.getPropId(), areaIds[j]);\n                    if (access == null) {\n                        throw new IllegalArgumentException(\n                                \"Cannot subscribe to \" + toPropertyIdString(property)\n                                        + \" at areaId \" + toAreaIdString(property, areaIds[j])\n                                        + \" the property does not have the requested areaId\");\n                    }\n                    if (!isPropIdAreaIdReadable(config, access.intValue())) {\n                        throw new IllegalArgumentException(\n                                \"Cannot subscribe to \" + toPropertyIdString(property)\n                                        + \" at areaId \" + toAreaIdString(property, areaIds[j])\n                                        + \" the property's access mode does not contain READ\");\n                    }\n                }\n            }\n\n            // \u521b\u5efa\u8ba2\u9605\u9009\u9879\u5bf9\u8c61\n            SubscribeOptions opts = new SubscribeOptions();\n            opts.propId = property;\n            opts.sampleRate = samplingRateHz;\n            opts.enableVariableUpdateRate = enableVariableUpdateRate;\n            opts.resolution = resolution;\n\n            // \u521b\u5efa\u901f\u7387\u4fe1\u606f\u5bf9\u8c61\n            RateInfo rateInfo = new RateInfo(samplingRateHz, enableVariableUpdateRate, resolution);\n            // \u8fc7\u6ee4\u5177\u6709\u76f8\u540c\u901f\u7387\u4fe1\u606f\u7684\u533a\u57dfID\n            int[] filteredAreaIds = filterAreaIdsWithSameRateInfo(property, areaIds, rateInfo);\n            opts.areaIds = filteredAreaIds;\n\n            // \u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u533a\u57dfID\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\u5e76\u7ee7\u7eed\n            if (opts.areaIds.length == 0) {\n                if (DBG) {\n                    Slogf.d(CarLog.TAG_HAL, \"property: \" + VehiclePropertyIds.toString(property)\n                            + \" is already subscribed at rate: \" + samplingRateHz + \" hz\");\n                }\n                continue;\n            }\n\n            // \u786e\u4fdd\u670d\u52a1\u662f\u5c5e\u6027\u7684\u6240\u6709\u8005\n            assertServiceOwnerLocked(service, property);\n\n            // \u66f4\u65b0\u6bcf\u4e2a\u533a\u57dfID\u7684\u8ba2\u9605\u901f\u7387\u4fe1\u606f\n            for (int j = 0; j &lt; filteredAreaIds.length; j++) {\n                if (DBG) {\n                    Slogf.d(CarLog.TAG_HAL, \"Update subscription rate for propertyId:\"\n                                    + \" %s, areaId: %d, SampleRateHz: %f, enableVur: %b,\"\n                                    + \" resolution: %f\",\n                            VehiclePropertyIds.toString(opts.propId), filteredAreaIds[j],\n                            samplingRateHz, enableVariableUpdateRate, resolution);\n                }\n                mRateInfoByPropIdAreaId.put(property, filteredAreaIds[j], rateInfo);\n            }\n\n            // \u5c06\u8ba2\u9605\u9009\u9879\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            subscribeOptionsList.add(opts);\n        }\n\n        // \u8fd4\u56de\u8ba2\u9605\u9009\u9879\u6570\u7ec4\n        return subscribeOptionsList.toArray(new SubscribeOptions[0]);\n    }\n}\n</code></pre> <p><code>createVhalSubscribeOptionsLocked()</code> \u65b9\u6cd5\u7528\u4e8e\u5c06 <code>HalSubscribeOptions</code> \u8f6c\u6362\u4e3a <code>SubscribeOptions</code> \uff0c\u540e\u8005\u662fVHAL\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u56de\u5230 <code>VehicleHal.subscribeProperty()</code> \u4e2d\uff0c\u8c03\u7528 <code>mSubscriptionClient.subscribe(subscribeOptions)</code> \u8ba2\u9605\u5c5e\u6027\uff0c\u63a5\u6536AidlSubscriptionClient\u7684onPropertyEvent()\u56de\u8c03\u3002\u5173\u4e8e\u5176\u63a5\u6536\u673a\u5236\u4ee5\u53ca\u5982\u4f55\u56de\u8c03\u5230 HalServiceBase \u7684\u8be6\u7ec6\u5206\u6790\uff0c\u8bf7\u53c2\u89c1\u524d\u9762\u7684 VehicleHal \u7ae0\u8282\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#_10","title":"\u53d6\u6d88\u8ba2\u9605","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalunsubscribepropertysafe","title":"VehicleHal.unsubscribePropertySafe()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u5b89\u5168\u5730\u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n     * \u8be5\u65b9\u6cd5\u7c7b\u4f3c\u4e8e {@link unsubscribeProperty}\uff0c\u4f46\u4f1a\u8bb0\u5f55\u53d1\u751f\u7684\u5f02\u5e38\u3002\n     * \n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684 HalService\n     * @param property \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027ID\uff08VehicleProperty\uff09\n     */\n    public void unsubscribePropertySafe(HalServiceBase service, int property) {\n        try {\n            // \u5c1d\u8bd5\u53d6\u6d88\u8ba2\u9605\u6307\u5b9a\u7684\u8f66\u8f86\u5c5e\u6027\n            unsubscribeProperty(service, property);\n        } catch (ServiceSpecificException e) {\n            // \u6355\u83b7 ServiceSpecificException \u5f02\u5e38\n            // \u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\uff0c\u5305\u542b\u5931\u8d25\u7684\u5c5e\u6027\u6807\u8bc6\u7b26\u548c\u5f02\u5e38\u4fe1\u606f\n            Slogf.w(CarLog.TAG_SERVICE, \"Failed to unsubscribe: \"\n                    + toPropertyIdString(property), e);\n        }\n    }\n}\n</code></pre> <p><code>unsubscribePropertySafe()</code> \u65b9\u6cd5\u7528\u4e8e\u5b89\u5168\u5730\u53d6\u6d88\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u3002\u4e0e<code>unsubscribeProperty()</code> \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u589e\u52a0\u4e86\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u5728\u53d6\u6d88\u8ba2\u9605\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\u65f6\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/carservice-call-vhal/#vehiclehalunsubscribeproperty","title":"VehicleHal.unsubscribeProperty()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    /**\n     * \u53d6\u6d88\u8ba2\u9605\u6307\u5b9a\u5c5e\u6027\u7684\u901a\u77e5\uff0c\u5e76\u4f20\u5165\u76f8\u5173\u7684 HAL \u670d\u52a1\u3002\n     * \n     * @param service \u62e5\u6709\u8be5\u5c5e\u6027\u7684 HalService\n     * @param property \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027ID\uff08VehicleProperty\uff09\n     * @throws ServiceSpecificException \u5982\u679c\u4e0eVHAL\u7684\u8fde\u63a5\u5931\u8d25\u6216VHAL\u8fd4\u56de\u9519\u8bef\u65f6\u629b\u51fa\n     */\n    public void unsubscribeProperty(HalServiceBase service, int property)\n            throws ServiceSpecificException {\n        // \u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u53d6\u6d88\u8ba2\u9605\u7684\u65e5\u5fd7\n        if (DBG) {\n            Slogf.d(CarLog.TAG_HAL, \"unsubscribeProperty, service:\" + service\n                    + \", \" + toPropertyIdString(property));\n        }\n\n        // \u540c\u6b65\u5757\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n        synchronized (mLock) {\n            // \u83b7\u53d6\u5c5e\u6027\u7684\u914d\u7f6e\n            HalPropConfig config = mAllProperties.get(property);\n            // \u5982\u679c\u914d\u7f6e\u4e0d\u5b58\u5728\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n            if (config == null) {\n                Slogf.w(CarLog.TAG_HAL, \"unsubscribeProperty \" + toPropertyIdString(property)\n                        + \" does not exist\");\n                return;\n            }\n            // \u5982\u679c\u5c5e\u6027\u662f\u9759\u6001\u7684\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n            if (isStaticProperty(config)) {\n                Slogf.w(CarLog.TAG_HAL, \"Unsubscribe to a static property: \"\n                        + toPropertyIdString(property) + \", do nothing\");\n                return;\n            }\n\n            // \u786e\u4fdd\u670d\u52a1\u662f\u5c5e\u6027\u7684\u6240\u6709\u8005\n            assertServiceOwnerLocked(service, property);\n\n            // \u83b7\u53d6\u5c5e\u6027\u7684\u533a\u57df\u914d\u7f6e\n            HalAreaConfig[] halAreaConfigs = config.getAreaConfigs();\n            boolean isSubscribed = false; // \u6807\u8bb0\u662f\u5426\u5df2\u8ba2\u9605\n            // \u514b\u9686\u5f53\u524d\u7684\u8ba2\u9605\u72b6\u6001\uff0c\u4ee5\u4fbf\u5728\u5931\u8d25\u65f6\u6062\u590d\n            PairSparseArray&lt;RateInfo&gt; previousState = cloneState(mRateInfoByPropIdAreaId);\n\n            // \u5982\u679c\u6ca1\u6709\u533a\u57df\u914d\u7f6e\uff0c\u68c0\u67e5\u5168\u5c40\u5c5e\u6027\u7684\u8ba2\u9605\u72b6\u6001\n            if (halAreaConfigs.length == 0) {\n                int index = mRateInfoByPropIdAreaId.indexOfKeyPair(property, 0);\n                if (hasReadAccess(config.getAccess()) &amp;&amp; index &gt;= 0) {\n                    mRateInfoByPropIdAreaId.removeAt(index);\n                    isSubscribed = true;\n                }\n            } else {\n                // \u68c0\u67e5\u6bcf\u4e2a\u533a\u57df\u7684\u8ba2\u9605\u72b6\u6001\n                for (int i = 0; i &lt; halAreaConfigs.length; i++) {\n                    // \u5982\u679c\u533a\u57df\u4e0d\u53ef\u8bfb\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u7ee7\u7eed\n                    if (!isPropIdAreaIdReadable(config, halAreaConfigs[i].getAccess())) {\n                        Slogf.w(CarLog.TAG_HAL,\n                                \"Cannot unsubscribe to \" + toPropertyIdString(property)\n                                        + \" at areaId \" + toAreaIdString(property,\n                                        halAreaConfigs[i].getAreaId())\n                                        + \" the property's access mode does not contain READ\");\n                        continue;\n                    }\n                    // \u68c0\u67e5\u5e76\u79fb\u9664\u8ba2\u9605\n                    int index = mRateInfoByPropIdAreaId.indexOfKeyPair(property,\n                            halAreaConfigs[i].getAreaId());\n                    if (index &gt;= 0) {\n                        mRateInfoByPropIdAreaId.removeAt(index);\n                        isSubscribed = true;\n                    }\n                }\n            }\n\n            // \u5982\u679c\u6ca1\u6709\u8ba2\u9605\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\u5e76\u8fd4\u56de\n            if (!isSubscribed) {\n                if (DBG) {\n                    Slogf.d(CarLog.TAG_HAL, \"Property \" + toPropertyIdString(property)\n                            + \" was not subscribed, do nothing\");\n                }\n                return;\n            }\n\n            try {\n                // \u5c1d\u8bd5\u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\n                mSubscriptionClient.unsubscribe(property);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u53d1\u751f\u8fdc\u7a0b\u5f02\u5e38\uff0c\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u5e76\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\n                mRateInfoByPropIdAreaId = previousState;\n                Slogf.w(CarLog.TAG_HAL, \"Failed to unsubscribe, connection to VHAL failed\", e);\n                // \u5c06RemoteException\u8f6c\u6362\u4e3aServiceSpecificException\uff0c\u4ee5\u4fbf\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\n                throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                        \"Failed to unsubscribe, connection to VHAL failed, error: \" + e);\n            } catch (ServiceSpecificException e) {\n                // \u5982\u679c\u53d1\u751f\u7279\u5b9a\u670d\u52a1\u5f02\u5e38\uff0c\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u5e76\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\n                mRateInfoByPropIdAreaId = previousState;\n                Slogf.w(CarLog.TAG_HAL, \"Failed to unsubscribe, received error from VHAL\", e);\n                throw e;\n            }\n        }\n    }\n}\n</code></pre> <p><code>unsubscribeProperty()</code> \u65b9\u6cd5\u7528\u4e8e\u53d6\u6d88\u8ba2\u9605\u6307\u5b9a\u7684\u8f66\u8f86\u5c5e\u6027\u901a\u77e5\u3002</p> <ul> <li>\u65b9\u6cd5\u9996\u5148\u68c0\u67e5\u5c5e\u6027\u7684\u914d\u7f6e\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5c5e\u6027\u662f\u5426\u4e3a\u9759\u6001\u3002</li> <li>\u786e\u4fdd\u670d\u52a1\u662f\u5c5e\u6027\u7684\u6240\u6709\u8005\u3002</li> <li>\u68c0\u67e5\u5c5e\u6027\u7684\u533a\u57df\u914d\u7f6e\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u79fb\u9664\u8ba2\u9605\u3002</li> <li>\u5982\u679c\u5c5e\u6027\u6ca1\u6709\u88ab\u8ba2\u9605\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\u5e76\u8fd4\u56de\u3002</li> <li>\u5982\u679c\u5c5e\u6027\u5df2\u88ab\u8ba2\u9605\uff0c\u5c1d\u8bd5\u901a\u8fc7<code>mSubscriptionClient</code>\u53d6\u6d88\u8ba2\u9605\u3002</li> </ul>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/","title":"Android 15 CarService\u6e90\u780105-SystemInterface","text":"","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#_1","title":"\u80cc\u666f","text":"<p>\u4e0a\u4e00\u7bc7\u5185\u5bb9\u7a0d\u5fae\u590d\u6742\uff0c\u53ef\u80fd\u4f1a\u8ba9\u5927\u5bb6\u89c9\u5f97\u6709\u4e9b\u7d2f\uff0c\u5176\u5b9e\u6211\u5199\u8d77\u6765\u4e5f\u633a\u8d39\u52b2\u7684\u3002\u8fd9\u7bc7\u5c31\u7b80\u5355\u4e00\u4e9b\uff0c\u4ee5\u540e\u6211\u4eec\u4f1a\u5c3d\u91cf\u4ea4\u66ff\u5199\u4e00\u4e9b\u96be\u5ea6\u9002\u4e2d\u7684\u5185\u5bb9\u3002</p> <p>\u52a0\u4e0a\u5728\u8fdb\u7a0b\u8d77\u6765\u540e\u5c31\u521d\u59cb\u5316\u4e86 <code>SystemInterface</code> \uff0c\u4e4b\u524d\u6709\u4e9b\u670b\u53cb\u4e5f\u95ee\u6211\u8fd9\u4e2a <code>SystemInterface</code> \u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u90a3\u6211\u4eec\u8fd9\u6b21\u5c31\u9009\u62e9\u5206\u6790 <code>SystemInterface</code> \u5427\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#_2","title":"\u7c7b\u56fe","text":"<pre>47906dad-19a4-4552-8a8d-9666dea1871d</pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#_3","title":"\u7b80\u4ecb","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/SystemStateInterface.java\n\n/**\n * \u8be5\u7c7b\u5305\u542b\u4e86CarService\u4e0eAndroid OS API\u4e4b\u95f4\u7684\u6240\u6709\u4e0d\u540c\u5305\u88c5\u63a5\u53e3\u7684\u5f15\u7528\u3002\n */\npublic class SystemInterface implements ActivityManagerInterface,\n        DisplayInterface, IOInterface, StorageMonitoringInterface,\n        SystemStateInterface, TimeInterface,\n        WakeLockInterface {\n\n}\n</code></pre> <p><code>SystemInterface</code>\u7c7b\u901a\u8fc7\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\uff0c\u6210\u4e3a\u4e00\u4e2a\u591a\u529f\u80fd\u7684\u7cfb\u7edf\u63a5\u53e3\u7c7b\uff0c\u80fd\u591f\u5904\u7406\u4e0eAndroid\u7cfb\u7edf\u7684\u591a\u79cd\u4ea4\u4e92\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#_4","title":"\u521d\u59cb\u5316","text":"<p>\u5728\u524d\u9762\u7684 Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u4e2d\u63d0\u5230\uff0c\u5728\u6784\u5efa\u4e00\u4e2a\u00a0<code>ICarImpl</code>\u00a0\u5bf9\u8c61\u65f6\uff0c\u4f1a\u540c\u65f6\u521b\u5efa\u4e00\u4e2a\u7cfb\u7edf\u63a5\u53e3\u5b9e\u4f8b\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\nmICarImpl = new ICarImpl.Builder()  \n            .setServiceContext(this)  \n            .setBuiltInContext(getBuiltinPackageContext())  \n            .setVehicle(mVehicle)  \n            .setSystemInterface(SystemInterface.Builder.defaultSystemInterface(this).build())  \n            .setVehicleInterfaceName(mVehicleInterfaceName)  \n            .build();\n</code></pre> <p>\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u53e5\uff1a</p> <pre><code>SystemInterface.Builder.defaultSystemInterface(this).build()\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#systeminterfacebuilderdefaultsysteminterface","title":"SystemInterface.Builder.defaultSystemInterface()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/SystemStateInterface.java\n\npublic class SystemInterface implements ActivityManagerInterface,\n        DisplayInterface, IOInterface, StorageMonitoringInterface,\n        SystemStateInterface, TimeInterface,\n        WakeLockInterface {\n\n    /**\n     * SystemInterface\u7684\u6784\u5efa\u5668\u7c7b\uff0c\u7528\u4e8e\u521b\u5efaSystemInterface\u5b9e\u4f8b\n     */\n    public final static class Builder {\n        // \u5404\u79cd\u63a5\u53e3\u7684\u5b9e\u4f8b\u53d8\u91cf\n        private ActivityManagerInterface mActivityManagerInterface;\n        private DisplayInterface mDisplayInterface;\n        private IOInterface mIOInterface;\n        private StorageMonitoringInterface mStorageMonitoringInterface;\n        private SystemStateInterface mSystemStateInterface;\n        private TimeInterface mTimeInterface;\n        private WakeLockInterface mWakeLockInterface;\n\n        // \u79c1\u6709\u6784\u9020\u51fd\u6570\uff0c\u9632\u6b62\u5916\u90e8\u76f4\u63a5\u5b9e\u4f8b\u5316\n        private Builder() {}\n\n        /**\n         * \u521b\u5efa\u4e00\u4e2a\u65b0\u7684Builder\u5b9e\u4f8b\n         * @return \u65b0\u7684Builder\u5bf9\u8c61\n         */\n        public static Builder newSystemInterface() {\n            return new Builder();\n        }\n\n        /**\n         * \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684Builder\u5b9e\u4f8b\n         * @param context \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u4e0d\u80fd\u4e3anull\n         * @return \u914d\u7f6e\u4e86\u9ed8\u8ba4\u5b9e\u73b0\u7684Builder\u5bf9\u8c61\n         */\n        public static Builder defaultSystemInterface(Context context) {\n            // \u786e\u4fddcontext\u4e0d\u4e3anull\n            Objects.requireNonNull(context);\n            // \u521b\u5efa\u65b0\u7684Builder\u5b9e\u4f8b\n            Builder builder = newSystemInterface();\n            // \u914d\u7f6eActivityManagerInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n            builder.withActivityManagerInterface(new ActivityManagerInterface.DefaultImpl(context));\n            // \u914d\u7f6eWakeLockInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n            builder.withWakeLockInterface(new WakeLockInterface.DefaultImpl(context));\n            // \u914d\u7f6eDisplayInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u4f9d\u8d56\u4e8eWakeLockInterface\n            builder.withDisplayInterface(new DisplayInterface.DefaultImpl(context,\n                    builder.mWakeLockInterface));\n            // \u914d\u7f6eIOInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n            builder.withIOInterface(new IOInterface.DefaultImpl());\n            // \u914d\u7f6eStorageMonitoringInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n            builder.withStorageMonitoringInterface(new StorageMonitoringInterface.DefaultImpl());\n            // \u914d\u7f6eSystemStateInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n            builder.withSystemStateInterface(new SystemStateInterface.DefaultImpl(context));\n            // \u914d\u7f6eTimeInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\u5e76\u8fd4\u56deBuilder\n            return builder.withTimeInterface(new TimeInterface.DefaultImpl());\n        }\n\n        // \u4ee5\u4e0b\u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e\u5404\u4e2a\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u5e76\u8fd4\u56deBuilder\u81ea\u8eab\u4ee5\u652f\u6301\u94fe\u5f0f\u8c03\u7528\n\n        public Builder withActivityManagerInterface(ActivityManagerInterface\n                                                            activityManagerInterface) {\n            mActivityManagerInterface = activityManagerInterface;\n            return this;\n        }\n\n        public Builder withDisplayInterface(DisplayInterface displayInterface) {\n            mDisplayInterface = displayInterface;\n            return this;\n        }\n\n        public Builder withIOInterface(IOInterface ioInterface) {\n            mIOInterface = ioInterface;\n            return this;\n        }\n\n        public Builder withStorageMonitoringInterface(StorageMonitoringInterface\n                                                              storageMonitoringInterface) {\n            mStorageMonitoringInterface = storageMonitoringInterface;\n            return this;\n        }\n\n        public Builder withSystemStateInterface(SystemStateInterface systemStateInterface) {\n            mSystemStateInterface = systemStateInterface;\n            return this;\n        }\n\n        public Builder withTimeInterface(TimeInterface timeInterface) {\n            mTimeInterface = timeInterface;\n            return this;\n        }\n\n        public Builder withWakeLockInterface(WakeLockInterface wakeLockInterface) {\n            mWakeLockInterface = wakeLockInterface;\n            return this;\n        }\n    }\n}\n</code></pre> <p><code>Builder</code>\u662f\u4e00\u4e2a\u9759\u6001\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa<code>SystemInterface</code>\u7684\u5b9e\u4f8b\u3002<code>Builder</code>\u7684\u6784\u9020\u65b9\u6cd5\u662f\u79c1\u6709\u7684\uff0c\u9632\u6b62\u5916\u90e8\u76f4\u63a5\u5b9e\u4f8b\u5316\u3002\u53ea\u80fd\u901a\u8fc7\u9759\u6001\u65b9\u6cd5<code>newSystemInterface()</code>\u548c<code>defaultSystemInterface(Context context)</code>\u6765\u521b\u5efa\u5b9e\u4f8b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#systeminterfacebuilderbuild","title":"SystemInterface.Builder.build()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/SystemStateInterface.java\n\npublic class SystemInterface implements ActivityManagerInterface,\n        DisplayInterface, IOInterface, StorageMonitoringInterface,\n        SystemStateInterface, TimeInterface,\n        WakeLockInterface {\n\n    // \u5404\u79cd\u63a5\u53e3\u7684\u79c1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u63a5\u53e3\u7684\u5177\u4f53\u5b9e\u73b0\n    private final ActivityManagerInterface mActivityManagerInterface;\n    private final DisplayInterface mDisplayInterface;\n    private final IOInterface mIOInterface;\n    private final StorageMonitoringInterface mStorageMonitoringInterface;\n    private final SystemStateInterface mSystemStateInterface;\n    private final TimeInterface mTimeInterface;\n    private final WakeLockInterface mWakeLockInterface;\n\n    /**\n     * SystemInterface\u7684\u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u6240\u6709\u63a5\u53e3\u7684\u5b9e\u73b0\n     *\n     * @param activityManagerInterface \u6d3b\u52a8\u7ba1\u7406\u5668\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param displayInterface \u663e\u793a\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param ioInterface IO\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param storageMonitoringInterface \u5b58\u50a8\u76d1\u63a7\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param systemStateInterface \u7cfb\u7edf\u72b6\u6001\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param timeInterface \u65f6\u95f4\u63a5\u53e3\u7684\u5b9e\u73b0\n     * @param wakeLockInterface \u5524\u9192\u9501\u63a5\u53e3\u7684\u5b9e\u73b0\n     */\n    SystemInterface(ActivityManagerInterface activityManagerInterface,\n                    DisplayInterface displayInterface,\n                    IOInterface ioInterface,\n                    StorageMonitoringInterface storageMonitoringInterface,\n                    SystemStateInterface systemStateInterface,\n                    TimeInterface timeInterface,\n                    WakeLockInterface wakeLockInterface) {\n        // \u521d\u59cb\u5316\u5404\u4e2a\u63a5\u53e3\u7684\u5b9e\u73b0\n        mActivityManagerInterface = activityManagerInterface;\n        mDisplayInterface = displayInterface;\n        mIOInterface = ioInterface;\n        mStorageMonitoringInterface = storageMonitoringInterface;\n        mSystemStateInterface = systemStateInterface;\n        mTimeInterface = timeInterface;\n        mWakeLockInterface = wakeLockInterface;\n    }\n\n    // \u83b7\u53d6\u6d3b\u52a8\u7ba1\u7406\u5668\u63a5\u53e3\u7684\u5b9e\u73b0\n    public ActivityManagerInterface getActivityManagerInterface() {\n        return mActivityManagerInterface;\n    }\n\n    // \u83b7\u53d6\u663e\u793a\u63a5\u53e3\u7684\u5b9e\u73b0\n    public DisplayInterface getDisplayInterface() { \n        return mDisplayInterface; \n    }\n\n    // \u83b7\u53d6IO\u63a5\u53e3\u7684\u5b9e\u73b0\n    public IOInterface getIOInterface() { \n        return mIOInterface; \n    }\n\n    // \u83b7\u53d6\u7cfb\u7edf\u72b6\u6001\u63a5\u53e3\u7684\u5b9e\u73b0\n    public SystemStateInterface getSystemStateInterface() { \n        return mSystemStateInterface; \n    }\n\n    // \u83b7\u53d6\u65f6\u95f4\u63a5\u53e3\u7684\u5b9e\u73b0\n    public TimeInterface getTimeInterface() { \n        return mTimeInterface; \n    }\n\n    // \u83b7\u53d6\u5524\u9192\u9501\u63a5\u53e3\u7684\u5b9e\u73b0\n    public WakeLockInterface getWakeLockInterface() { \n        return mWakeLockInterface; \n    }\n\n    /**\n     * SystemInterface\u7684\u6784\u5efa\u5668\u7c7b\uff0c\u7528\u4e8e\u521b\u5efaSystemInterface\u5b9e\u4f8b\n     */\n    public final static class Builder {\n        // \u5404\u79cd\u63a5\u53e3\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u63a5\u53e3\u7684\u5177\u4f53\u5b9e\u73b0\n        private ActivityManagerInterface mActivityManagerInterface;\n        private DisplayInterface mDisplayInterface;\n        private IOInterface mIOInterface;\n        private StorageMonitoringInterface mStorageMonitoringInterface;\n        private SystemStateInterface mSystemStateInterface;\n        private TimeInterface mTimeInterface;\n        private WakeLockInterface mWakeLockInterface;\n\n        /**\n         * \u6784\u5efaSystemInterface\u5b9e\u4f8b\n         *\n         * @return \u914d\u7f6e\u597d\u7684SystemInterface\u5bf9\u8c61\n         * @throws NullPointerException \u5982\u679c\u4efb\u4f55\u63a5\u53e3\u5b9e\u73b0\u4e3anull\n         */\n        public SystemInterface build() {\n            // \u4f7f\u7528\u975e\u7a7a\u68c0\u67e5\u786e\u4fdd\u6240\u6709\u63a5\u53e3\u90fd\u6709\u5b9e\u73b0\n            return new SystemInterface(Objects.requireNonNull(mActivityManagerInterface),\n                    Objects.requireNonNull(mDisplayInterface),\n                    Objects.requireNonNull(mIOInterface),\n                    Objects.requireNonNull(mStorageMonitoringInterface),\n                    Objects.requireNonNull(mSystemStateInterface),\n                    Objects.requireNonNull(mTimeInterface),\n                    Objects.requireNonNull(mWakeLockInterface));\n        }\n    }\n}\n</code></pre> <p><code>build()</code>\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa<code>SystemInterface</code>\u5b9e\u4f8b\u3002\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\uff0c\u4f7f\u7528<code>Objects.requireNonNull()</code>\u65b9\u6cd5\u786e\u4fdd\u6240\u6709\u63a5\u53e3\u5b9e\u73b0\u90fd\u4e0d\u4e3a<code>null</code>\uff0c\u5426\u5219\u4f1a\u629b\u51fa<code>NullPointerException</code>\u3002</p> <p>\u6211\u4eec\u56de\u5230 SystemInterface.Builder.defaultSystemInterface() \u4e00\u4e2a\u4e00\u4e2a\u5206\u6790\u5176\u521d\u59cb\u5316\u8fc7\u7a0b\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#activitymanagerinterfacedefaultimpl","title":"ActivityManagerInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/ActivityManagerInterface.java\n\n/**\n * \u62bd\u8c61\u6d3b\u52a8\u7ba1\u7406\u5668\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface ActivityManagerInterface {\n    /**\n     * ActivityManagerInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements ActivityManagerInterface {\n        // \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90\u548c\u670d\u52a1\n        private final Context mContext;\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316DefaultImpl\u5b9e\u4f8b\n         *\n         * @param context \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u4e0d\u80fd\u4e3anull\n         */\n        DefaultImpl(Context context) {\n            // \u5c06\u4f20\u5165\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cfmContext\n            mContext = context;\n        }\n\n    }\n}\n</code></pre> <p>\u5f88\u7b80\u5355\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a<code>Context</code>\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cf<code>mContext</code>\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#wakelockinterfacedefaultimpl","title":"WakeLockInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/WakeLockInterface.java\n\n/**\n * \u62bd\u8c61\u5524\u9192\u9501\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface WakeLockInterface {\n\n    /**\n     * WakeLockInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements WakeLockInterface {\n        // \u65e5\u5fd7\u6807\u7b7e\uff0c\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa\n        private static final String TAG = WakeLockInterface.class.getSimpleName();\n\n        // \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u670d\u52a1\n        private final Context mContext;\n        // \u9501\u5bf9\u8c61\uff0c\u7528\u4e8e\u540c\u6b65\n        private final Object mLock = new Object();\n        // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u663e\u793a\u5668\u7684\u5524\u9192\u9501\u5bf9\uff08\u5168\u5524\u9192\u9501\u548c\u90e8\u5206\u5524\u9192\u9501\uff09\n        @GuardedBy(\"mLock\")\n        private final SparseArray&lt;Pair&lt;/* Full */WakeLock, /* Partial */WakeLock&gt;&gt;\n                mPerDisplayWakeLocks = new SparseArray&lt;&gt;();\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316DefaultImpl\u5b9e\u4f8b\n         *\n         * @param context \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u4e0d\u80fd\u4e3anull\n         */\n        DefaultImpl(Context context) {\n            // \u5c06\u4f20\u5165\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cfmContext\n            mContext = context;\n            // \u83b7\u53d6DisplayManager\u670d\u52a1\n            DisplayManager displayManager = mContext.getSystemService(DisplayManager.class);\n            // \u6ce8\u518c\u663e\u793a\u76d1\u542c\u5668\n            displayManager.registerDisplayListener(mDisplayListener, /* handler= */ null);\n\n            // \u4e3a\u6bcf\u4e2a\u663e\u793a\u5668\u521b\u5efa\u5524\u9192\u9501\u5bf9\n            for (Display display : displayManager.getDisplays()) {\n                int displayId = display.getDisplayId();\n                Pair&lt;WakeLock, WakeLock&gt; wakeLockPair = createWakeLockPair(displayId);\n                // \u540c\u6b65\u5b58\u50a8\u5524\u9192\u9501\u5bf9\n                synchronized (mLock) {\n                    mPerDisplayWakeLocks.put(displayId, wakeLockPair);\n                }\n            }\n        }\n\n        /**\n         * \u521b\u5efa\u4e00\u4e2a\u5524\u9192\u9501\u5bf9\uff08\u5168\u5524\u9192\u9501\u548c\u90e8\u5206\u5524\u9192\u9501\uff09\n         *\n         * @param displayId \u663e\u793a\u5668ID\n         * @return \u5524\u9192\u9501\u5bf9\n         */\n        private Pair&lt;WakeLock, WakeLock&gt; createWakeLockPair(int displayId) {\n            // \u6784\u5efa\u5524\u9192\u9501\u7684\u6807\u7b7e\n            StringBuilder tag = new StringBuilder(CarLog.TAG_POWER).append(\":\")\n                    .append(displayId);\n            // \u521b\u5efa\u5168\u5524\u9192\u9501\n            WakeLock fullWakeLock = PowerManagerHelper.newWakeLock(mContext,\n                    PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,\n                    tag.toString(), displayId);\n            // \u521b\u5efa\u90e8\u5206\u5524\u9192\u9501\n            WakeLock partialWakeLock = PowerManagerHelper.newWakeLock(mContext,\n                    PowerManager.PARTIAL_WAKE_LOCK, tag.toString(), displayId);\n            // \u8f93\u51fa\u65e5\u5fd7\u4fe1\u606f\n            Slogf.d(TAG, \"createWakeLockPair displayId=%d\", displayId);\n            // \u8fd4\u56de\u5524\u9192\u9501\u5bf9\n            return Pair.create(fullWakeLock, partialWakeLock);\n        }\n    }\n}\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a<code>Context</code>\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cf<code>mContext</code>\u3002\u83b7\u53d6<code>DisplayManager</code>\u670d\u52a1\u5e76\u6ce8\u518c\u663e\u793a\u76d1\u542c\u5668\u3002\u4e3a\u6bcf\u4e2a\u663e\u793a\u5668\u521b\u5efa\u5524\u9192\u9501\u5bf9\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728<code>mPerDisplayWakeLocks</code>\u4e2d\u3002</p> <p><code>createWakeLockPair()</code>\u65b9\u6cd5\u7528\u4e8e\u4e3a\u6307\u5b9a\u7684\u663e\u793a\u5668ID\u521b\u5efa\u4e00\u4e2a\u5524\u9192\u9501\u5bf9\uff0c\u5305\u62ec\u5168\u5524\u9192\u9501\u548c\u90e8\u5206\u5524\u9192\u9501\u3002\u8fd9\u4e2a\u662f\u5e72\u4ec0\u4e48\u7684\u6682\u65f6\u4e0d\u6e05\u695a\uff0c\u7559\u4e2a\u7591\u95ee\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#displayinterfacedefaultimpl","title":"DisplayInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/DisplayInterface.java\n\n/**\n * \u62bd\u8c61\u663e\u793a\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface DisplayInterface {\n    /**\n     * \u663e\u793a\u64cd\u4f5c\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements DisplayInterface {\n        // \u65e0\u6548\u7684\u663e\u793a\u4eae\u5ea6\u503c\u5e38\u91cf\n        private static final int INVALID_DISPLAY_BRIGHTNESS = -1;\n\n        // \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u670d\u52a1\n        private final Context mContext;\n        // \u663e\u793a\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u663e\u793a\u8bbe\u5907\n        private final DisplayManager mDisplayManager;\n        // \u9501\u5bf9\u8c61\uff0c\u7528\u4e8e\u540c\u6b65\n        private final Object mLock = new Object();\n        // \u6700\u5927\u80cc\u5149\u4eae\u5ea6\n        private final int mMaximumBacklight;\n        // \u6700\u5c0f\u80cc\u5149\u4eae\u5ea6\n        private final int mMinimumBacklight;\n        // \u5524\u9192\u9501\u63a5\u53e3\uff0c\u7528\u4e8e\u7ba1\u7406\u5524\u9192\u9501\n        private final WakeLockInterface mWakeLockInterface;\n\n        // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u663e\u793a\u5668\u7684\u72b6\u6001\uff08\u5f00/\u5173\uff09\n        @GuardedBy(\"mLock\")\n        private final SparseBooleanArray mDisplayStateSet = new SparseBooleanArray();\n        // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u663e\u793a\u5668\u7684\u4eae\u5ea6\u503c\n        @GuardedBy(\"mLock\")\n        private final SparseIntArray mDisplayBrightnessSet = new SparseIntArray();\n        // \u7528\u6237\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u7528\u6237\u4fe1\u606f\n        private final UserManager mUserManager;\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316DefaultImpl\u5b9e\u4f8b\n         *\n         * @param context \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u4e0d\u80fd\u4e3anull\n         * @param wakeLockInterface \u5524\u9192\u9501\u63a5\u53e3\u7684\u5b9e\u73b0\n         */\n        DefaultImpl(Context context, WakeLockInterface wakeLockInterface) {\n            // \u5c06\u4f20\u5165\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cfmContext\n            mContext = context;\n            // \u83b7\u53d6DisplayManager\u670d\u52a1\n            mDisplayManager = context.getSystemService(DisplayManager.class);\n            // \u83b7\u53d6\u6700\u5927\u548c\u6700\u5c0f\u5c4f\u5e55\u4eae\u5ea6\u8bbe\u7f6e\n            mMaximumBacklight = PowerManagerHelper.getMaximumScreenBrightnessSetting(context);\n            mMinimumBacklight = PowerManagerHelper.getMinimumScreenBrightnessSetting(context);\n            // \u5c06\u4f20\u5165\u7684\u5524\u9192\u9501\u63a5\u53e3\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cfmWakeLockInterface\n            mWakeLockInterface = wakeLockInterface;\n            // \u540c\u6b65\u521d\u59cb\u5316\u663e\u793a\u5668\u72b6\u6001\u548c\u4eae\u5ea6\n            synchronized (mLock) {\n                for (Display display : mDisplayManager.getDisplays()) {\n                    int displayId = display.getDisplayId();\n                    // \u521d\u59cb\u5316\u663e\u793a\u5668\u72b6\u6001\n                    mDisplayStateSet.put(displayId, isDisplayOn(displayId));\n                    // \u521d\u59cb\u5316\u663e\u793a\u5668\u4eae\u5ea6\u4e3a\u65e0\u6548\u503c\n                    mDisplayBrightnessSet.put(displayId, INVALID_DISPLAY_BRIGHTNESS);\n                }\n            }\n            // \u83b7\u53d6UserManager\u670d\u52a1\n            mUserManager = context.getSystemService(UserManager.class);\n        }\n    }\n}\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u00a0<code>Context</code>\u00a0\u5bf9\u8c61\u548c\u4e00\u4e2a\u00a0<code>WakeLockInterface</code>\u00a0\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u3002\u901a\u8fc7\u00a0<code>Context</code>\u00a0\u521d\u59cb\u5316\u663e\u793a\u7ba1\u7406\u5668\u00a0<code>mDisplayManager</code>\u3001\u6700\u5927\u4eae\u5ea6\u00a0<code>mMaximumBacklight</code>\u00a0\u548c\u6700\u5c0f\u4eae\u5ea6\u00a0<code>mMinimumBacklight</code>\uff0c\u4ee5\u53ca\u5524\u9192\u9501\u63a5\u53e3\u00a0<code>mWakeLockInterface</code>\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u540c\u6b65\u673a\u5236\u521d\u59cb\u5316\u6bcf\u4e2a\u663e\u793a\u5668\u7684\u72b6\u6001\u00a0<code>mDisplayStateSet</code>\u00a0\u548c\u4eae\u5ea6\u00a0<code>mDisplayBrightnessSet</code>\uff0c\u5e76\u83b7\u53d6\u7528\u6237\u7ba1\u7406\u5668\u670d\u52a1\u00a0<code>mUserManager</code>\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#iointerfacedefaultimpl","title":"IOInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/IOInterface.java\n\n/**\n * \u62bd\u8c61I/O\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface IOInterface {\n\n    /**\n     * IOInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements IOInterface {\n        // \u7528\u4e8e\u5b58\u50a8\u7cfb\u7edf\u8f66\u8f7d\u76ee\u5f55\u7684File\u5bf9\u8c61\n        private final File mSystemCarDir;\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316DefaultImpl\u5b9e\u4f8b\n         */\n        DefaultImpl() {\n            // \u521d\u59cb\u5316mSystemCarDir\u4e3a\u7cfb\u7edf\u8f66\u8f7d\u76ee\u5f55\u7684\u8def\u5f84\n            mSystemCarDir = new File(\"/data/system/car\");\n        }\n    }\n}\n</code></pre> <p>\u76f4\u63a5\u521d\u59cb\u5316<code>mSystemCarDir</code>\u4e3a<code>/data/system/car</code>\u8def\u5f84\u7684<code>File</code>\u5bf9\u8c61\u3002\u8fd9\u8868\u793a\u8be5\u5b9e\u73b0\u9ed8\u8ba4\u5c06I/O\u64cd\u4f5c\u6307\u5411\u7cfb\u7edf\u7684\u8f66\u8f7d\u76ee\u5f55\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#storagemonitoringinterfacedefaultimpl","title":"StorageMonitoringInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/StorageMonitoringInterface.java\n\n/**\n * \u62bd\u8c61\u5b58\u50a8\u76d1\u63a7\u64cd\u4f5c\u7684\u63a5\u53e3\n */\n@ExcludeFromCodeCoverageGeneratedReport(reason = BOILERPLATE_CODE)\npublic interface StorageMonitoringInterface {\n\n    /**\n     * \u83b7\u53d6\u95ea\u5b58\u78e8\u635f\u4fe1\u606f\u63d0\u4f9b\u8005\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     *\n     * @param lifetimePath \u751f\u547d\u5468\u671f\u8def\u5f84\n     * @param eolPath \u4f7f\u7528\u5bff\u547d\u7ec8\u6b62\u8def\u5f84\n     * @return WearInformationProvider\u6570\u7ec4\uff0c\u5305\u542b\u4e0d\u540c\u7684\u78e8\u635f\u4fe1\u606f\u63d0\u4f9b\u8005\n     */\n    default WearInformationProvider[] getFlashWearInformationProviders(\n            String lifetimePath, String eolPath) {\n        return new WearInformationProvider[] {\n                // eMMC\u78e8\u635f\u4fe1\u606f\u63d0\u4f9b\u8005\n                new EMmcWearInformationProvider(\n                        new File(lifetimePath), new File(eolPath)),\n                // UFS\u78e8\u635f\u4fe1\u606f\u63d0\u4f9b\u8005\n                new UfsWearInformationProvider(),\n                // \u5065\u5eb7\u670d\u52a1\u78e8\u635f\u4fe1\u606f\u63d0\u4f9b\u8005\n                new HealthServiceWearInfoProvider()\n        };\n    }\n\n    /**\n     * \u83b7\u53d6UID I/O\u7edf\u8ba1\u4fe1\u606f\u63d0\u4f9b\u8005\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     *\n     * @return UidIoStatsProvider\u5b9e\u4f8b\n     */\n    default UidIoStatsProvider getUidIoStatsProvider() {\n        return new ProcfsUidIoStatsProvider();\n    }\n\n    /**\n     * \u83b7\u53d6\u751f\u547d\u5468\u671f\u5199\u5165\u4fe1\u606f\u63d0\u4f9b\u8005\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     *\n     * @return LifetimeWriteInfoProvider\u5b9e\u4f8b\n     */\n    default LifetimeWriteInfoProvider getLifetimeWriteInfoProvider() {\n        return new SysfsLifetimeWriteInfoProvider();\n    }\n\n    /**\n     * StorageMonitoringInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements StorageMonitoringInterface {}\n}\n</code></pre> <p><code>DefaultImpl</code>\u662f<code>StorageMonitoringInterface</code>\u7684\u4e00\u4e2a\u9759\u6001\u5185\u90e8\u7c7b\uff0c\u63d0\u4f9b\u4e86\u63a5\u53e3\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002\u4e5f\u5c31\u662f\u8bf4\u8be5\u7c7b\u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\u6216\u6210\u5458\u53d8\u91cf\uff0c\u76f4\u63a5\u7ee7\u627f\u63a5\u53e3\u7684\u9ed8\u8ba4\u65b9\u6cd5\u5b9e\u73b0\u3002</p> <p>\u4e09\u4e2a\u9ed8\u8ba4\u7684\u65b9\u6cd5\u53ef\u53c2\u8003\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#systemstateinterfacedefaultimpl","title":"SystemStateInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/SystemStateInterface.java\n\n/**\n * \u62bd\u8c61\u7cfb\u7edf\u72b6\u6001\uff08\u5982\u542f\u52a8\u3001\u4f11\u7720\u7b49\uff09\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface SystemStateInterface {\n\n    /**\n     * \u5185\u90e8\u4f7f\u7528\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    @VisibleForTesting\n    class DefaultImpl implements SystemStateInterface {\n\n        // \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90\u548c\u670d\u52a1\n        private final Context mContext;\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316DefaultImpl\u5b9e\u4f8b\n         *\n         * @param context \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u4e0d\u80fd\u4e3anull\n         */\n        @VisibleForTesting\n        public DefaultImpl(Context context) {\n            // \u5c06\u4f20\u5165\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cfmContext\n            mContext = context;\n        }\n    }\n}\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a<code>Context</code>\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u6210\u5458\u53d8\u91cf<code>mContext</code>\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#timeinterfacedefaultimpl","title":"TimeInterface.DefaultImpl","text":"<pre><code>// packages/services/Car/service/src/com/android/car/systeminterface/TimeInterface.java\n\n/**\n * \u62bd\u8c61\u65f6\u95f4\u64cd\u4f5c\u7684\u63a5\u53e3\n */\npublic interface TimeInterface {\n\n    /**\n     * TimeInterface\u7684\u9ed8\u8ba4\u5b9e\u73b0\n     */\n    class DefaultImpl implements TimeInterface {\n        // \u5f53\u524d\u7c7b\u6ca1\u6709\u5b9a\u4e49\u6784\u9020\u51fd\u6570\n    }\n}\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#_5","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u7ed3\u5408\u524d\u9762 SystemInterface.Builder.defaultSystemInterface() \u548c SystemInterface.Builder.build() \u7684\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053\u4e86 <code>SystemInterface</code> \u6210\u5458\u53d8\u91cf <code>mActivityManagerInterface</code> \u5176\u5b9e\u5c31\u662f <code>ActivityManagerInterface.DefaultImpl</code>\uff0c\u5176\u4ed6\u6210\u50cf\u53d8\u91cf\u7c7b\u4f3c\u3002</p> <p>\u6240\u6709\u901a\u8fc7 <code>SystemInterface</code> \u5c31\u53ef\u4ee5\u8c03\u5230\u771f\u6b63\u7684\u5b9e\u73b0\u63a5\u53e3\u4e86\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#systeminterfacesendbroadcastasuser","title":"SystemInterface.sendBroadcastAsUser()","text":"<pre><code>public class SystemInterface implements ActivityManagerInterface,  \n        DisplayInterface, IOInterface, StorageMonitoringInterface,  \n        SystemStateInterface, TimeInterface,  \n        WakeLockInterface {  \n\n    private final ActivityManagerInterface mActivityManagerInterface;  \n\n    @Override  \n    public void sendBroadcastAsUser(Intent intent, UserHandle user) {  \n        mActivityManagerInterface.sendBroadcastAsUser(intent, user);  \n    }  \n\n}\n</code></pre>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/system-interface/#activitymanagerinterfacedefaultimplsendbroadcastasuser","title":"ActivityManagerInterface.DefaultImpl.sendBroadcastAsUser()","text":"<pre><code>public interface ActivityManagerInterface {  \n\n    void sendBroadcastAsUser(Intent intent, UserHandle user);  \n\n    class DefaultImpl implements ActivityManagerInterface {  \n        private final Context mContext;  \n\n        DefaultImpl(Context context) {  \n            mContext = context;  \n        }  \n\n        @Override  \n        public void sendBroadcastAsUser(@RequiresPermission Intent intent, UserHandle user) {  \n            mContext.sendBroadcastAsUser(intent, user);  \n        }  \n    }  \n}\n</code></pre> <p>\u7531\u4e8e\u5176\u4ed6\u63a5\u53e3\u7684\u5b9e\u73b0\u65b9\u5f0f\u7c7b\u4f3c\u4e14\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u6b64\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u8be6\u7ec6\u5206\u6790\u3002</p>","tags":["Android","car","CarService"]},{"location":"android/car/carservice/car-input-service/","title":"Android 15 CarService\u6e90\u780106-CarInputService","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_1","title":"\u63a5\u53e3","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#icarinput","title":"ICarInput","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/input/ICarInput.aidl\n\n/**\n * CarInputManager \u7684 Binder API\n *\n * @hide\n */\ninterface ICarInput {\n    /**\n     * \u8bf7\u6c42\u6355\u83b7\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u6355\u83b7\u4e8b\u4ef6\u3002\n     * @param inputTypes \u8981\u6355\u83b7\u7684\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\u3002\n     * @param requestFlags \u8bf7\u6c42\u6807\u5fd7\uff0c\u7528\u4e8e\u6307\u5b9a\u6355\u83b7\u884c\u4e3a\u7684\u9644\u52a0\u9009\u9879\u3002\n     * @return \u8bf7\u6c42\u7684\u7ed3\u679c\u72b6\u6001\u3002\n     *\n     * \u53c2\u89c1 {@code CarInputManager.requestInputEventCapture(...)}\n     */\n    int requestInputEventCapture(in ICarInputCallback callback, int targetDisplayType,\n        in int[] inputTypes, int requestFlags) = 1;\n\n    /**\n     * \u91ca\u653e\u8f93\u5165\u4e8b\u4ef6\u6355\u83b7\u3002\n     *\n     * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\u63a5\u53e3\u3002\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u91ca\u653e\u4e8b\u4ef6\u6355\u83b7\u3002\n     *\n     * \u53c2\u89c1 {@code CarInputManager.requestInputEventCapture(...)}\n     */\n    void releaseInputEventCapture(in ICarInputCallback callback, int targetDisplayType) = 2;\n\n    /**\n     * \u6ce8\u5165\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u8981\u6ce8\u5165\u7684\u6309\u952e\u4e8b\u4ef6\u3002\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u6ce8\u5165\u4e8b\u4ef6\u3002\n     *\n     * \u53c2\u89c1 {@code CarInputManager.injectKeyEvent(...)}\n     */\n    void injectKeyEvent(in KeyEvent event, int targetDisplayType) = 3;\n}\n</code></pre> <p><code>ICarInput</code> \u63a5\u53e3\u63d0\u4f9b\u4e86\u4e0e\u6c7d\u8f66\u8f93\u5165\u7ba1\u7406\u5668\u4ea4\u4e92\u7684\u529f\u80fd\uff0c\u5141\u8bb8\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u91ca\u653e\u8f93\u5165\u4e8b\u4ef6\u7684\u6355\u83b7\uff0c\u4ee5\u53ca\u6ce8\u5165\u6309\u952e\u4e8b\u4ef6\u3002</p> <ul> <li><code>requestInputEventCapture</code><ul> <li>\u8bf7\u6c42\u6355\u83b7\u7279\u5b9a\u7c7b\u578b\u7684\u8f93\u5165\u4e8b\u4ef6\u3002</li> <li>\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u63a5\u53e3 <code>ICarInputCallback</code>\uff0c\u7528\u4e8e\u63a5\u6536\u6355\u83b7\u7684\u8f93\u5165\u4e8b\u4ef6\u3002</li> <li><code>targetDisplayType</code> \u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u6355\u83b7\u4e8b\u4ef6\u3002</li> <li><code>inputTypes</code> \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6307\u5b9a\u8981\u6355\u83b7\u7684\u8f93\u5165\u7c7b\u578b\u3002</li> <li><code>requestFlags</code> \u7528\u4e8e\u6307\u5b9a\u6355\u83b7\u884c\u4e3a\u7684\u9644\u52a0\u9009\u9879\u3002</li> <li>\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8bf7\u6c42\u7684\u7ed3\u679c\u72b6\u6001\u3002</li> </ul> </li> <li><code>releaseInputEventCapture</code><ul> <li>\u91ca\u653e\u4e4b\u524d\u8bf7\u6c42\u7684\u8f93\u5165\u4e8b\u4ef6\u6355\u83b7\u3002</li> <li>\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u63a5\u53e3 <code>ICarInputCallback</code> \u548c <code>targetDisplayType</code>\uff0c\u7528\u4e8e\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u91ca\u653e\u4e8b\u4ef6\u6355\u83b7\u3002</li> </ul> </li> <li><code>injectKeyEvent</code> <ul> <li>\u6ce8\u5165\u4e00\u4e2a\u6309\u952e\u4e8b\u4ef6\u5230\u6307\u5b9a\u7684\u663e\u793a\u8bbe\u5907\u3002</li> <li>\u63a5\u53d7\u4e00\u4e2a <code>KeyEvent</code> \u5bf9\u8c61\uff0c\u8868\u793a\u8981\u6ce8\u5165\u7684\u6309\u952e\u4e8b\u4ef6\uff0c\u4ee5\u53ca <code>targetDisplayType</code>\uff0c\u6307\u5b9a\u4e8b\u4ef6\u6ce8\u5165\u7684\u76ee\u6807\u663e\u793a\u8bbe\u5907\u3002</li> </ul> </li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#icarinputcallback","title":"ICarInputCallback","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/input/ICarInputCallback.aidl\n\n/**\n * \u8f93\u5165\u670d\u52a1\u7684 Binder API\u3002\n *\n * @hide\n */\noneway interface ICarInputCallback {\n    /**\n     * \u5f53\u6309\u952e\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u53d1\u751f\u4e8b\u4ef6\u3002\n     * @param keyEvents \u53d1\u751f\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u3002\n     */\n    void onKeyEvents(int targetDisplayType, in List&lt;KeyEvent&gt; keyEvents) = 1;\n\n    /**\n     * \u5f53\u65cb\u8f6c\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u53d1\u751f\u4e8b\u4ef6\u3002\n     * @param events \u53d1\u751f\u7684\u65cb\u8f6c\u4e8b\u4ef6\u5217\u8868\u3002\n     */\n    void onRotaryEvents(int targetDisplayType, in List&lt;RotaryEvent&gt; events) = 2;\n\n    /**\n     * \u5f53\u8f93\u5165\u6355\u83b7\u72b6\u6001\u6539\u53d8\u65f6\u8c03\u7528\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u53d1\u751f\u72b6\u6001\u6539\u53d8\u3002\n     * @param activeInputTypes \u5f53\u524d\u6d3b\u52a8\u7684\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\u3002\n     */\n    void onCaptureStateChanged(int targetDisplayType, in int[] activeInputTypes) = 3;\n\n    /**\n     * \u5f53\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u5b9a\u5728\u54ea\u4e2a\u663e\u793a\u8bbe\u5907\u4e0a\u53d1\u751f\u4e8b\u4ef6\u3002\n     * @param events \u53d1\u751f\u7684\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u5217\u8868\u3002\n     */\n    void onCustomInputEvents(int targetDisplayType, in List&lt;CustomInputEvent&gt; events) = 4;\n}\n</code></pre> <ul> <li><code>onKeyEvents</code>\uff1a\u5f53\u6309\u952e\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002</li> <li><code>onRotaryEvents</code>\uff1a\u5f53\u65cb\u8f6c\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002</li> <li><code>onCaptureStateChanged</code>\uff1a\u5f53\u8f93\u5165\u6355\u83b7\u72b6\u6001\u6539\u53d8\u65f6\u8c03\u7528\u3002</li> <li><code>onCustomInputEvents</code>\uff1a\u5f53\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputmanager","title":"CarInputManager","text":"<p><code>CarInputManager</code> \u901a\u8fc7 <code>ICarInput</code> \u63a5\u53e3\u8c03\u7528 <code>CarInputService</code>\uff0c\u5e76\u901a\u8fc7 <code>ICarInputCallback</code> \u63a5\u53e3\u76d1\u542c <code>CarInputService</code> \u7684\u56de\u8c03\u3002\u7531\u4e8e\u91cd\u70b9\u4e0d\u5728\u6b64\uff0c\u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\u3002</p> <p><code>CarInputManager</code> \u5982\u4f55\u80fd\u8c03\u7528\u5230 <code>CarInputService</code>\uff0c\u53ef\u4ee5\u53c2\u8003 Android 15 CarService\u6e90\u780103-\u670d\u52a1\u53ca\u63a5\u53e3 \u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_2","title":"\u521d\u59cb\u5316","text":"<p>\u6839\u636e Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u7684\u5206\u6790\uff0cCarService \u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p>Native\u670d\u52a1\u7684\u521d\u59cb\u5316\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u6784\u5efa\u6bcf\u4e2a <code>HalService</code> \u5b9e\u4f8b\u3002</li> <li>\u7136\u540e\uff0c\u8c03\u7528 <code>HalService</code> \u7684 <code>takeProperties()</code> \u65b9\u6cd5\u3002</li> <li>\u63a5\u7740\uff0c\u8c03\u7528 <code>HalService</code> \u7684 <code>init()</code> \u65b9\u6cd5\u3002</li> </ul> </li> <li> <p>Java\u670d\u52a1\u7684\u521d\u59cb\u5316\uff1a</p> <ul> <li>\u6784\u5efa\u6bcf\u4e2a <code>CarSystemService</code> \u5b9e\u4f8b\u3002</li> <li>\u8c03\u7528 <code>CarSystemService</code> \u7684 <code>init()</code> \u65b9\u6cd5\u3002</li> <li>\u6700\u540e\uff0c\u8c03\u7528 <code>CarSystemService</code> \u7684 <code>onInitComplete()</code> \u65b9\u6cd5\u3002</li> </ul> </li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u4ece <code>InputHalService</code> \u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservice","title":"InputHalService","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservice_1","title":"InputHalService\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\n/**\n * \u5c06 HAL \u8f93\u5165\u4e8b\u4ef6\u8f6c\u6362\u4e3ainput\u670d\u52a1\u3002\n */\npublic class InputHalService extends HalServiceBase {\n\n    // VehicleHal \u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\u8fdb\u884c\u4ea4\u4e92\n    private final VehicleHal mHal;\n\n    /**\n     * \u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u7d22\u5f53\u524d\u7cfb\u7edf\u7684\u8fd0\u884c\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09 - \u53ef\u66ff\u6362\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u3002\n     */\n    private final LongSupplier mUptimeSupplier;\n\n    /**\n     * InputHalService \u7684\u6784\u9020\u51fd\u6570\u3002\n     *\n     * @param hal VehicleHal \u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u8fdb\u884c\u4ea4\u4e92\u3002\n     */\n    public InputHalService(VehicleHal hal) {\n        this(hal, SystemClock::uptimeMillis); // \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u7528\u7cfb\u7edf\u65f6\u949f\u7684\u8fd0\u884c\u65f6\u95f4\n    }\n\n    /**\n     * \u7528\u4e8e\u6d4b\u8bd5\u7684 InputHalService \u6784\u9020\u51fd\u6570\u3002\n     *\n     * @param hal VehicleHal \u5b9e\u4f8b\uff0c\u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u8fdb\u884c\u4ea4\u4e92\u3002\n     * @param uptimeSupplier \u4e00\u4e2a LongSupplier\uff0c\u7528\u4e8e\u63d0\u4f9b\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\u3002\n     */\n    @VisibleForTesting\n    InputHalService(VehicleHal hal, LongSupplier uptimeSupplier) {\n        super(); // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\n        mHal = hal; // \u521d\u59cb\u5316 mHal\n        mUptimeSupplier = uptimeSupplier; // \u521d\u59cb\u5316 mUptimeSupplier\n    }\n}\n</code></pre> <p><code>InputHalService</code> \u662f\u4e00\u4e2a\u670d\u52a1\u7c7b\uff0c\u7528\u4e8e\u5c06\u6765\u81ea\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u7684\u8f93\u5165\u4e8b\u4ef6\u8f6c\u6362\u6210input\u670d\u52a1\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicetakeproperties","title":"InputHalService.takeProperties()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    // \u7528\u4e8e\u7ebf\u7a0b\u540c\u6b65\u7684\u9501\u5bf9\u8c61\n    private final Object mLock = new Object();\n\n    // \u4ee5\u4e0b\u53d8\u91cf\u7528\u4e8e\u6807\u8bc6\u662f\u5426\u652f\u6301\u7279\u5b9a\u7c7b\u578b\u7684\u8f93\u5165\u529f\u80fd\uff0c\u53d7 mLock \u4fdd\u62a4\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n    @GuardedBy(\"mLock\")\n    private boolean mKeyInputSupported; // \u662f\u5426\u652f\u6301\u786c\u4ef6\u6309\u952e\u8f93\u5165\n\n    @GuardedBy(\"mLock\")\n    private boolean mKeyInputV2Supported; // \u662f\u5426\u652f\u6301\u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c 2\uff09\n\n    @GuardedBy(\"mLock\")\n    private boolean mMotionInputSupported; // \u662f\u5426\u652f\u6301\u8fd0\u52a8\u8f93\u5165\uff08\u5982\u89e6\u6478\u677f\u6216\u624b\u52bf\uff09\n\n    @GuardedBy(\"mLock\")\n    private boolean mRotaryInputSupported; // \u662f\u5426\u652f\u6301\u65cb\u8f6c\u8f93\u5165\uff08\u5982\u65cb\u94ae\uff09\n\n    @GuardedBy(\"mLock\")\n    private boolean mCustomInputSupported; // \u662f\u5426\u652f\u6301\u81ea\u5b9a\u4e49\u8f93\u5165\n\n    /**\n     * \u5904\u7406 HAL \u5c5e\u6027\u914d\u7f6e\uff0c\u5224\u65ad\u652f\u6301\u54ea\u4e9b\u8f93\u5165\u529f\u80fd\u3002\n     *\n     * @param properties HAL \u5c5e\u6027\u914d\u7f6e\u7684\u96c6\u5408\u3002\n     */\n    @Override\n    public void takeProperties(Collection&lt;HalPropConfig&gt; properties) {\n        synchronized (mLock) { // \u4f7f\u7528 mLock \u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n            for (HalPropConfig property : properties) { // \u904d\u5386\u6240\u6709\u5c5e\u6027\u914d\u7f6e\n                switch (property.getPropId()) { // \u6839\u636e\u5c5e\u6027 ID \u5224\u65ad\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\n                    case HW_KEY_INPUT: // \u786c\u4ef6\u6309\u952e\u8f93\u5165\n                        mKeyInputSupported = true;\n                        break;\n                    case HW_KEY_INPUT_V2: // \u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c 2\uff09\n                        mKeyInputV2Supported = true;\n                        break;\n                    case HW_MOTION_INPUT: // \u8fd0\u52a8\u8f93\u5165\uff08\u5982\u89e6\u6478\u677f\u6216\u624b\u52bf\uff09\n                        mMotionInputSupported = true;\n                        break;\n                    case HW_ROTARY_INPUT: // \u65cb\u8f6c\u8f93\u5165\uff08\u5982\u65cb\u94ae\uff09\n                        mRotaryInputSupported = true;\n                        break;\n                    case HW_CUSTOM_INPUT: // \u81ea\u5b9a\u4e49\u8f93\u5165\n                        mCustomInputSupported = true;\n                        break;\n                    default: // \u672a\u77e5\u7684\u5c5e\u6027 ID\uff0c\u5ffd\u7565\n                        break;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\uff1a - <code>HW_KEY_INPUT</code>\uff1a\u786c\u4ef6\u6309\u952e\u8f93\u5165\u3002 - <code>HW_KEY_INPUT_V2</code>\uff1a\u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c 2\uff09\u3002 - <code>HW_MOTION_INPUT</code>\uff1a\u8fd0\u52a8\u8f93\u5165\uff08\u5982\u89e6\u6478\u677f\u6216\u624b\u52bf\uff09\u3002 - <code>HW_ROTARY_INPUT</code>\uff1a\u65cb\u8f6c\u8f93\u5165\uff08\u5982\u65cb\u94ae\uff09\u3002 - <code>HW_CUSTOM_INPUT</code>\uff1a\u81ea\u5b9a\u4e49\u8f93\u5165\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalserviceinit","title":"InputHalService.init()","text":"<p>\u8fd9\u91cc\u7684 <code>init()</code> \u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicegetallsupportedproperties","title":"InputHalService.getAllSupportedProperties()","text":"<p>\u5b9e\u9645\u4e0a\uff0c\u5728 <code>VehicleHal.priorityInit()</code> \u8c03\u7528 <code>fetchAllPropConfigs()</code> \u83b7\u53d6\u6240\u6709\u914d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u901a\u8fc7\u8c03\u7528\u5177\u4f53\u670d\u52a1\u7684 <code>getAllSupportedProperties()</code> \u65b9\u6cd5\u6765\u8fdb\u884c\u5224\u65ad\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    // \u5b9a\u4e49\u652f\u6301\u7684\u5c5e\u6027\u6570\u7ec4\uff0c\u5305\u62ec\u5404\u79cd\u8f93\u5165\u7c7b\u578b\n    private static final int[] SUPPORTED_PROPERTIES = new int[]{\n        HW_KEY_INPUT,       // \u786c\u4ef6\u6309\u952e\u8f93\u5165\n        HW_KEY_INPUT_V2,    // \u786c\u4ef6\u6309\u952e\u8f93\u5165\uff08\u7248\u672c 2\uff09\n        HW_MOTION_INPUT,    // \u8fd0\u52a8\u8f93\u5165\uff08\u5982\u89e6\u6478\u677f\u6216\u624b\u52bf\uff09\n        HW_ROTARY_INPUT,    // \u65cb\u8f6c\u8f93\u5165\uff08\u5982\u65cb\u94ae\uff09\n        HW_CUSTOM_INPUT     // \u81ea\u5b9a\u4e49\u8f93\u5165\n    };\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u652f\u6301\u7684\u5c5e\u6027\u3002\n     *\n     * @return \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5305\u542b\u6240\u6709\u652f\u6301\u7684\u5c5e\u6027 ID\u3002\n     */\n    @Override\n    int[] getAllSupportedProperties() {\n        return SUPPORTED_PROPERTIES; // \u8fd4\u56de\u652f\u6301\u7684\u5c5e\u6027\u6570\u7ec4\n    }\n}\n</code></pre> <p><code>InputHalService</code> \u7c7b\u901a\u8fc7\u5b9a\u4e49 <code>SUPPORTED_PROPERTIES</code> \u6570\u7ec4\u548c\u5b9e\u73b0 <code>getAllSupportedProperties()</code> \u65b9\u6cd5\uff0c\u660e\u786e\u4e86\u8be5\u670d\u52a1\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservice","title":"CarInputService","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservice_1","title":"CarInputService\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\n/**\n * CarInputService \u8d1f\u8d23\u901a\u8fc7\u8f66\u8f86 HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u76d1\u63a7\u548c\u5904\u7406\u8f93\u5165\u4e8b\u4ef6\u3002\n * \u5b83\u7ee7\u627f\u4e86 ICarInput.Stub\uff0c\u5e76\u5b9e\u73b0\u4e86 CarServiceBase \u548c InputHalService.InputListener \u63a5\u53e3\u3002\n * \u8be5\u7c7b\u4e3b\u8981\u7528\u4e8e\u7ba1\u7406\u6c7d\u8f66\u73af\u5883\u4e2d\u7684\u8f93\u5165\u4e8b\u4ef6\uff0c\u4f8b\u5982\u6309\u952e\u4e8b\u4ef6\u548c\u89e6\u6478\u4e8b\u4ef6\u3002\n */\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u7528\u4e8e\u5904\u7406\u8bed\u97f3\u6309\u952e\u957f\u6309\u4e8b\u4ef6\u7684\u8ba1\u65f6\u5668\n    private final KeyPressTimer mVoiceKeyTimer;\n    // \u7528\u4e8e\u5904\u7406\u547c\u53eb\u6309\u952e\u957f\u6309\u4e8b\u4ef6\u7684\u8ba1\u65f6\u5668\n    private final KeyPressTimer mCallKeyTimer;\n\n    // \u4e3b\u663e\u793a\u6309\u952e\u4e8b\u4ef6\u7684\u9ed8\u8ba4\u5904\u7406\u5668\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 InputManager \u5c06\u4e8b\u4ef6\u6ce8\u5165\u8f93\u5165\u961f\u5217\uff0c\u4f46\u53ef\u4ee5\u5728\u6d4b\u8bd5\u4e2d\u91cd\u5199\u3002\n    private final KeyEventListener mDefaultKeyHandler;\n    // \u4e3b\u663e\u793a\u89e6\u6478\u4e8b\u4ef6\u7684\u9ed8\u8ba4\u5904\u7406\u5668\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 InputManager \u5c06\u4e8b\u4ef6\u6ce8\u5165\u8f93\u5165\u961f\u5217\uff0c\u4f46\u53ef\u4ee5\u5728\u6d4b\u8bd5\u4e2d\u91cd\u5199\u3002\n    private final MotionEventListener mDefaultMotionHandler;\n\n    // \u7528\u4e8e\u786e\u5b9a\u6309\u4e0b\u547c\u53eb\u6309\u94ae\u662f\u5426\u5e94\u7ed3\u675f\u6b63\u5728\u8fdb\u884c\u7684\u901a\u8bdd\u7684\u5e03\u5c14\u503c\u63d0\u4f9b\u8005\n    private final BooleanSupplier mShouldCallButtonEndOngoingCallSupplier;\n\n    /**\n     * CarInputService \u7684\u4e3b\u6784\u9020\u51fd\u6570\u3002\n     * \n     * @param context \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u670d\u52a1\u548c\u8d44\u6e90\u3002\n     * @param inputHalService \u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u901a\u4fe1\u7684\u670d\u52a1\u3002\n     * @param userService \u7ba1\u7406\u7528\u6237\u76f8\u5173\u529f\u80fd\u7684\u670d\u52a1\u3002\n     * @param occupantZoneService \u7ba1\u7406\u8f66\u8f86\u5ea7\u4f4d\u533a\u57df\u7684\u670d\u52a1\u3002\n     * @param bluetoothService \u7ba1\u7406\u8f66\u8f86\u84dd\u7259\u529f\u80fd\u7684\u670d\u52a1\u3002\n     * @param carPowerService \u7ba1\u7406\u8f66\u8f86\u7535\u6e90\u72b6\u6001\u7684\u670d\u52a1\u3002\n     * @param systemInterface \u63d0\u4f9b\u7cfb\u7edf\u63a5\u53e3\u7684\u62bd\u8c61\u5c42\u3002\n     */\n    public CarInputService(Context context, InputHalService inputHalService,\n                           CarUserService userService, CarOccupantZoneService occupantZoneService,\n                           CarBluetoothService bluetoothService, CarPowerManagementService carPowerService,\n                           SystemInterface systemInterface) {\n        // \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u9012\u989d\u5916\u7684\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002\n        this(context, inputHalService, userService, occupantZoneService, bluetoothService,\n                carPowerService, systemInterface,\n                new Handler(getCommonHandlerThread().getLooper()), // \u7528\u4e8e\u5904\u7406\u6d88\u606f\u7684 Handler\n                context.getSystemService(TelecomManager.class), // TelecomManager\uff0c\u7528\u4e8e\u7ba1\u7406\u901a\u4fe1\u76f8\u5173\u4efb\u52a1\n                new KeyEventListener() { // \u9ed8\u8ba4\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n                    @Override\n                    public void onKeyEvent(KeyEvent event, @DisplayTypeEnum int displayType,\n                                           @VehicleAreaSeat.Enum int seat) {\n                        // \u5c06\u6309\u952e\u4e8b\u4ef6\u6ce8\u5165\u5230 InputManager \u4e2d\n                        InputManagerHelper.injectInputEvent(\n                                context.getSystemService(InputManager.class), event);\n                    }\n                },\n                /* defaultMotionHandler= */ event -&gt; InputManagerHelper.injectInputEvent(\n                        context.getSystemService(InputManager.class), event), // \u9ed8\u8ba4\u89e6\u6478\u4e8b\u4ef6\u5904\u7406\u5668\n                /* lastCalledNumberSupplier= */ () -&gt; Calls.getLastOutgoingCall(context), // \u83b7\u53d6\u6700\u540e\u62e8\u6253\u7684\u7535\u8bdd\u53f7\u7801\n                /* longPressDelaySupplier= */ () -&gt; getViewLongPressDelay(context), // \u83b7\u53d6\u957f\u6309\u5ef6\u8fdf\u65f6\u95f4\n                /* shouldCallButtonEndOngoingCallSupplier= */ () -&gt; context.getResources()\n                        .getBoolean(R.bool.config_callButtonEndsOngoingCall), // \u914d\u7f6e\u662f\u5426\u6309\u4e0b\u547c\u53eb\u6309\u94ae\u7ed3\u675f\u5f53\u524d\u901a\u8bdd\n                new InputCaptureClientController(context), // \u8f93\u5165\u6355\u83b7\u5ba2\u6237\u7aef\u63a7\u5236\u5668\n                sDefaultShowCallback); // \u9ed8\u8ba4\u7684\u8bed\u97f3\u4ea4\u4e92\u663e\u793a\u56de\u8c03\n    }\n\n    /**\n     * CarInputService \u7684\u5185\u90e8\u6784\u9020\u51fd\u6570\uff0c\u63d0\u4f9b\u66f4\u7ec6\u7c92\u5ea6\u7684\u53c2\u6570\u63a7\u5236\u3002\n     * \n     * @param context \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u3002\n     * @param inputHalService \u7528\u4e8e\u4e0e\u8f66\u8f86 HAL \u901a\u4fe1\u7684\u670d\u52a1\u3002\n     * @param userService \u7ba1\u7406\u7528\u6237\u76f8\u5173\u529f\u80fd\u7684\u670d\u52a1\u3002\n     * @param occupantZoneService \u7ba1\u7406\u8f66\u8f86\u5ea7\u4f4d\u533a\u57df\u7684\u670d\u52a1\u3002\n     * @param bluetoothService \u7ba1\u7406\u8f66\u8f86\u84dd\u7259\u529f\u80fd\u7684\u670d\u52a1\u3002\n     * @param carPowerService \u7ba1\u7406\u8f66\u8f86\u7535\u6e90\u72b6\u6001\u7684\u670d\u52a1\u3002\n     * @param systemInterface \u63d0\u4f9b\u7cfb\u7edf\u63a5\u53e3\u7684\u62bd\u8c61\u5c42\u3002\n     * @param handler \u7528\u4e8e\u5904\u7406\u5f02\u6b65\u4efb\u52a1\u7684 Handler\u3002\n     * @param telecomManager \u7ba1\u7406\u901a\u4fe1\u529f\u80fd\u7684\u670d\u52a1\u3002\n     * @param defaultKeyHandler \u9ed8\u8ba4\u7684\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\u3002\n     * @param defaultMotionHandler \u9ed8\u8ba4\u7684\u89e6\u6478\u4e8b\u4ef6\u5904\u7406\u5668\u3002\n     * @param lastCalledNumberSupplier \u63d0\u4f9b\u6700\u540e\u62e8\u6253\u53f7\u7801\u7684\u63a5\u53e3\u3002\n     * @param longPressDelaySupplier \u63d0\u4f9b\u957f\u6309\u5ef6\u8fdf\u65f6\u95f4\u7684\u63a5\u53e3\u3002\n     * @param shouldCallButtonEndOngoingCallSupplier \u63d0\u4f9b\u662f\u5426\u6309\u4e0b\u547c\u53eb\u6309\u94ae\u7ed3\u675f\u901a\u8bdd\u7684\u63a5\u53e3\u3002\n     * @param captureController \u8f93\u5165\u6355\u83b7\u5ba2\u6237\u7aef\u63a7\u5236\u5668\u3002\n     * @param showCallback \u8bed\u97f3\u4ea4\u4e92\u663e\u793a\u56de\u8c03\u3002\n     */\n    @VisibleForTesting\n    CarInputService(Context context, InputHalService inputHalService, CarUserService userService,\n                    CarOccupantZoneService occupantZoneService, CarBluetoothService bluetoothService,\n                    CarPowerManagementService carPowerService, SystemInterface systemInterface,\n                    Handler handler, TelecomManager telecomManager,\n                    KeyEventListener defaultKeyHandler, MotionEventListener defaultMotionHandler,\n                    Supplier&lt;String&gt; lastCalledNumberSupplier, IntSupplier longPressDelaySupplier,\n                    BooleanSupplier shouldCallButtonEndOngoingCallSupplier,\n                    InputCaptureClientController captureController,\n                    VoiceInteractionSessionShowCallbackHelper showCallback) {\n        super(); // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570\n        mContext = context; // \u4fdd\u5b58\u4e0a\u4e0b\u6587\n        mCaptureController = captureController; // \u521d\u59cb\u5316\u8f93\u5165\u6355\u83b7\u63a7\u5236\u5668\n        mInputHalService = inputHalService; // \u521d\u59cb\u5316\u8f93\u5165 HAL \u670d\u52a1\n        mUserService = userService; // \u521d\u59cb\u5316\u7528\u6237\u670d\u52a1\n        mCarOccupantZoneService = occupantZoneService; // \u521d\u59cb\u5316\u5ea7\u4f4d\u533a\u57df\u670d\u52a1\n        mCarBluetoothService = bluetoothService; // \u521d\u59cb\u5316\u84dd\u7259\u670d\u52a1\n        mCarPowerService = carPowerService; // \u521d\u59cb\u5316\u7535\u6e90\u7ba1\u7406\u670d\u52a1\n        mSystemInterface = systemInterface; // \u521d\u59cb\u5316\u7cfb\u7edf\u63a5\u53e3\n        mTelecomManager = telecomManager; // \u521d\u59cb\u5316\u901a\u4fe1\u7ba1\u7406\u670d\u52a1\n        mDefaultKeyHandler = defaultKeyHandler; // \u521d\u59cb\u5316\u9ed8\u8ba4\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\n        mDefaultMotionHandler = defaultMotionHandler; // \u521d\u59cb\u5316\u9ed8\u8ba4\u89e6\u6478\u4e8b\u4ef6\u5904\u7406\u5668\n        mLastCalledNumberSupplier = lastCalledNumberSupplier; // \u521d\u59cb\u5316\u6700\u540e\u62e8\u6253\u53f7\u7801\u63d0\u4f9b\u8005\n        mLongPressDelaySupplier = longPressDelaySupplier; // \u521d\u59cb\u5316\u957f\u6309\u5ef6\u8fdf\u65f6\u95f4\u63d0\u4f9b\u8005\n        mShowCallback = showCallback; // \u521d\u59cb\u5316\u8bed\u97f3\u4ea4\u4e92\u663e\u793a\u56de\u8c03\n\n        // \u521d\u59cb\u5316\u8bed\u97f3\u6309\u952e\u8ba1\u65f6\u5668\uff0c\u7528\u4e8e\u5904\u7406\u8bed\u97f3\u52a9\u624b\u7684\u957f\u6309\u4e8b\u4ef6\n        mVoiceKeyTimer = new KeyPressTimer(\n                handler, longPressDelaySupplier, this::handleVoiceAssistLongPress);\n\n        // \u521d\u59cb\u5316\u547c\u53eb\u6309\u952e\u8ba1\u65f6\u5668\uff0c\u7528\u4e8e\u5904\u7406\u547c\u53eb\u6309\u94ae\u7684\u957f\u6309\u4e8b\u4ef6\n        mCallKeyTimer = new KeyPressTimer(handler, longPressDelaySupplier,\n                this::handleCallLongPress);\n\n        // \u4ece\u8d44\u6e90\u4e2d\u83b7\u53d6\u65cb\u94ae\u670d\u52a1\u7ec4\u4ef6\u7684\u540d\u79f0\n        mRotaryServiceComponentName = mContext.getString(R.string.rotaryService);\n\n        // \u521d\u59cb\u5316\u662f\u5426\u6309\u4e0b\u547c\u53eb\u6309\u94ae\u7ed3\u675f\u901a\u8bdd\u7684\u63d0\u4f9b\u8005\n        mShouldCallButtonEndOngoingCallSupplier = shouldCallButtonEndOngoingCallSupplier;\n\n        // \u6ce8\u518c\u9ed8\u8ba4\u7684\u7279\u6b8a\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u76d1\u542c HOME \u548c POWER \u6309\u952e\n        registerKeyEventListener(mDefaultSpecialKeyHandler,\n                Arrays.asList(KeyEvent.KEYCODE_HOME, KeyEvent.KEYCODE_POWER));\n    }\n}\n</code></pre> <ul> <li><code>mVoiceKeyTimer</code> \uff1a\u5904\u7406\u8bed\u97f3\u52a9\u624b\u4e8b\u4ef6\u3002</li> <li><code>mCallKeyTimer</code> \uff1a\u5904\u7406\u547c\u53eb\u6309\u94ae\u7684\u957f\u6309\u4e8b\u4ef6\u3002</li> <li><code>mDefaultKeyHandler</code> \uff1a\u5904\u7406\u9ed8\u8ba4\u7684\u6309\u952e\u4e8b\u4ef6\u4e8b\u4ef6\u3002</li> <li><code>mDefaultMotionHandler</code> \uff1a\u5904\u7406\u9ed8\u8ba4\u7684\u89e6\u6478\u4e8b\u4ef6\u3002</li> <li>\u4f7f\u7528 <code>registerKeyEventListener</code> \u6ce8\u518c\u4e86\u7279\u6b8a\u6309\u952e\u7684\u76d1\u542c\u5668\uff08\u4f8b\u5982 HOME \u548c POWER \u6309\u952e\uff09\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceinit","title":"CarInputService.init()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e\u8f93\u5165\u670d\u52a1\u548c\u7528\u6237\u751f\u547d\u5468\u671f\u76d1\u542c\u5668\u3002\n     * \u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u542f\u52a8\u65f6\u8c03\u7528\uff0c\u786e\u4fdd\u8f93\u5165\u4e8b\u4ef6\u7684\u6b63\u786e\u5904\u7406\u3002\n     */\n    @Override\n    public void init() {\n        // \u68c0\u67e5\u8f93\u5165 HAL \u670d\u52a1\u662f\u5426\u652f\u6301\u6309\u952e\u8f93\u5165\n        if (!mInputHalService.isKeyInputSupported()) {\n            // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.w(TAG, \"Hal does not support key input.\");\n            return;\n        }\n        // \u5982\u679c\u652f\u6301\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n        Slogf.d(TAG, \"Hal supports key input.\");\n\n        // \u8bbe\u7f6e\u5f53\u524d\u5bf9\u8c61\u4e3a\u8f93\u5165 HAL \u670d\u52a1\u7684\u76d1\u542c\u5668\uff0c\u4ee5\u4fbf\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\n        mInputHalService.setInputListener(this);\n\n        // \u521b\u5efa\u7528\u6237\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u8fc7\u6ee4\u5668\uff0c\u76d1\u542c\u7528\u6237\u5207\u6362\u4e8b\u4ef6\n        UserLifecycleEventFilter userSwitchingEventFilter = new UserLifecycleEventFilter.Builder()\n                .addEventType(USER_LIFECYCLE_EVENT_TYPE_SWITCHING).build();\n\n        // \u5c06\u7528\u6237\u751f\u547d\u5468\u671f\u76d1\u542c\u5668\u6dfb\u52a0\u5230\u7528\u6237\u670d\u52a1\u4e2d\uff0c\u4ee5\u4fbf\u5728\u7528\u6237\u5207\u6362\u65f6\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\n        mUserService.addUserLifecycleListener(userSwitchingEventFilter, mUserLifecycleListener);\n\n        // \u83b7\u53d6\u9a7e\u9a76\u5458\u5ea7\u4f4d\u4fe1\u606f\n        mDriverSeat = mCarOccupantZoneService.getDriverSeat();\n\n        // \u5224\u65ad\u662f\u5426\u6709\u9a7e\u9a76\u5458\u5ea7\u4f4d\n        mHasDriver = (mDriverSeat != VehicleAreaSeat.SEAT_UNKNOWN);\n    }\n}\n</code></pre> <p>\u8c03\u7528<code>mInputHalService.setInputListener(this)</code>\uff0c\u5c06\u5f53\u524d\u5bf9\u8c61\u8bbe\u7f6e\u4e3a\u8f93\u5165\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\uff0c\u4ee5\u4fbf\u63a5\u6536\u6765\u81eaHAL\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5206\u6790\uff0c\u540e\u7eed\u5728\u56de\u8c03\u7ae0\u8282\u4e2d\u518d\u8be6\u7ec6\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceoninitcomplete","title":"CarInputService.onInitComplete()","text":"<p>\u8fd9\u91cc\u7684 CarInputService \u4e0d\u91cd CarSystemService.onInitComplete() \u65b9\u6cd5\u800c\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u73b0\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalserviceinputlistener","title":"InputHalService.InputListener","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u7528\u4e8e\u5904\u7406\u6765\u81ea HAL\uff08\u786c\u4ef6\u62bd\u8c61\u5c42\uff09\u7684\u8f93\u5165\u4e8b\u4ef6\u7684\u63a5\u53e3\u3002\n     * \u8be5\u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u7ec4\u56de\u8c03\u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\n     * \u901a\u8fc7\u5b9e\u73b0\u8be5\u63a5\u53e3\uff0c\u670d\u52a1\u53ef\u4ee5\u63a5\u6536\u5e76\u5904\u7406\u6765\u81ea\u8f66\u8f86\u786c\u4ef6\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\n     */\n    public interface InputListener {\n        /**\n         * \u5f53\u6536\u5230\u6309\u952e\u4e8b\u4ef6\u65f6\u8c03\u7528\u3002\n         * \n         * @param event \u6309\u952e\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u6309\u952e\u7684\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\u6309\u4e0b\u3001\u91ca\u653e\u7b49\uff09\u3002\n         * @param targetDisplay \u76ee\u6807\u663e\u793a\u5c4f\u7684\u6807\u8bc6\u7b26\uff0c\u8868\u793a\u8be5\u4e8b\u4ef6\u7684\u76ee\u6807\u663e\u793a\u5c4f\u3002\n         */\n        void onKeyEvent(KeyEvent event, int targetDisplay);\n\n        /**\n         * \u5f53\u6536\u5230\u6309\u952e\u4e8b\u4ef6\uff08\u9488\u5bf9\u7279\u5b9a\u5ea7\u4f4d\uff09\u65f6\u8c03\u7528\u3002\n         * \n         * @param event \u6309\u952e\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u6309\u952e\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n         * @param targetDisplay \u76ee\u6807\u663e\u793a\u5c4f\u7684\u6807\u8bc6\u7b26\u3002\n         * @param seat \u5ea7\u4f4d\u533a\u57df\u6807\u8bc6\u7b26\uff0c\u8868\u793a\u8be5\u4e8b\u4ef6\u7684\u6765\u6e90\u5ea7\u4f4d\u3002\n         */\n        void onKeyEvent(KeyEvent event, int targetDisplay, int seat);\n\n        /**\n         * \u5f53\u6536\u5230\u89e6\u6478\u4e8b\u4ef6\uff08\u9488\u5bf9\u7279\u5b9a\u5ea7\u4f4d\uff09\u65f6\u8c03\u7528\u3002\n         * \n         * @param event \u89e6\u6478\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u89e6\u6478\u7684\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\u5750\u6807\u3001\u52a8\u4f5c\u7c7b\u578b\u7b49\uff09\u3002\n         * @param targetDisplay \u76ee\u6807\u663e\u793a\u5c4f\u7684\u6807\u8bc6\u7b26\u3002\n         * @param seat \u5ea7\u4f4d\u533a\u57df\u6807\u8bc6\u7b26\uff0c\u8868\u793a\u8be5\u4e8b\u4ef6\u7684\u6765\u6e90\u5ea7\u4f4d\u3002\n         */\n        void onMotionEvent(MotionEvent event, int targetDisplay, int seat);\n\n        /**\n         * \u5f53\u6536\u5230\u65cb\u94ae\u4e8b\u4ef6\u65f6\u8c03\u7528\u3002\n         * \n         * @param event \u65cb\u94ae\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u65cb\u94ae\u7684\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\u65cb\u8f6c\u65b9\u5411\u3001\u65cb\u8f6c\u91cf\u7b49\uff09\u3002\n         * @param targetDisplay \u76ee\u6807\u663e\u793a\u5c4f\u7684\u6807\u8bc6\u7b26\u3002\n         */\n        void onRotaryEvent(RotaryEvent event, int targetDisplay);\n\n        /**\n         * \u5f53\u6536\u5230 OEM\uff08\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546\uff09\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u65f6\u8c03\u7528\u3002\n         * \n         * @param event \u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n         */\n        void onCustomInputEvent(CustomInputEvent event);\n    }\n}\n</code></pre> <ul> <li><code>onKeyEvent(KeyEvent event, int targetDisplay)</code>\uff1a\u7528\u4e8e\u5904\u7406\u6309\u952e\u4e8b\u4ef6\uff0c<code>targetDisplay</code>\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u8be5\u4e8b\u4ef6\u7684\u76ee\u6807\u663e\u793a\u5c4f\uff08\u4f8b\u5982\u4e3b\u663e\u793a\u5c4f\u6216\u526f\u663e\u793a\u5c4f\uff09\u3002</li> <li><code>onKeyEvent(KeyEvent event, int targetDisplay, int seat)</code>\uff1a\u7528\u4e8e\u5904\u7406\u6309\u952e\u4e8b\u4ef6\uff0c\u4f46\u9488\u5bf9\u7279\u5b9a\u7684\u5ea7\u4f4d\u533a\u57df\u3002<code>seat</code>\u53c2\u6570\u8868\u793a\u4e8b\u4ef6\u7684\u6765\u6e90\u5ea7\u4f4d\uff08\u4f8b\u5982\u9a7e\u9a76\u5458\u5ea7\u4f4d\u6216\u4e58\u5ba2\u5ea7\u4f4d\uff09\u3002</li> <li><code>onMotionEvent(MotionEvent event, int targetDisplay, int seat)</code>\uff1a\u7528\u4e8e\u5904\u7406\u89e6\u6478\u4e8b\u4ef6\uff08\u4f8b\u5982\u5c4f\u5e55\u89e6\u6478\u3001\u6ed1\u52a8\u7b49\uff09\uff0c<code>seat</code>\u53c2\u6570\u8868\u793a\u4e8b\u4ef6\u7684\u6765\u6e90\u5ea7\u4f4d\u3002</li> <li><code>onRotaryEvent(RotaryEvent event, int targetDisplay)</code>\uff1a\u7528\u4e8e\u5904\u7406\u65cb\u94ae\u4e8b\u4ef6\uff0c\u65cb\u94ae\u4e8b\u4ef6\u901a\u5e38\u7528\u4e8e\u63a7\u5236\u97f3\u91cf\u3001\u83dc\u5355\u5bfc\u822a\u7b49\u529f\u80fd\u3002<code>RotaryEvent</code>\u5bf9\u8c61\u5305\u542b\u65cb\u94ae\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f8b\u5982\u65cb\u8f6c\u65b9\u5411\u548c\u65cb\u8f6c\u91cf\u3002</li> <li><code>onCustomInputEvent(CustomInputEvent event)</code>\uff1a\u7528\u4e8e\u5904\u7406OEM\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservice_2","title":"CarInputService \u76d1\u542c\u8f93\u5165\u4e8b\u4ef6","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub  \n        implements CarServiceBase, InputHalService.InputListener {  \n\n    // \u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u4ea4\u4e92\u7684\u8f93\u5165\u670d\u52a1  \n    private final InputHalService mInputHalService;  \n\n\n    @Override  \n    public void init() {  \n        // \u5c06\u5f53\u524d\u5bf9\u8c61\uff08CarInputService\uff09\u8bbe\u7f6e\u4e3a\u8f93\u5165\u670d\u52a1\u7684\u76d1\u542c\u5668  \n        // \u8fd9\u6837\uff0cCarInputService \u5c31\u53ef\u4ee5\u63a5\u6536\u5e76\u5904\u7406\u6765\u81ea InputHalService \u7684\u8f93\u5165\u4e8b\u4ef6  \n        mInputHalService.setInputListener(this);  \n    }  \n}\n</code></pre>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicesetinputlistener","title":"InputHalService.setInputListener()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    // \u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u4ea4\u4e92\u7684\u5bf9\u8c61\n    private final VehicleHal mHal;\n\n    // \u8f93\u5165\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u53d7mLock\u4fdd\u62a4\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n    @GuardedBy(\"mLock\")\n    private InputListener mListener;\n\n    /**\n     * \u8bbe\u7f6e\u8f93\u5165\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\n     * \u8be5\u65b9\u6cd5\u7528\u4e8e\u4e3a\u670d\u52a1\u6ce8\u518c\u4e00\u4e2a\u8f93\u5165\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4ee5\u4fbf\u5904\u7406\u6765\u81ea\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u7684\u5404\u79cd\u8f93\u5165\u4e8b\u4ef6\u3002\n     * \n     * @param listener \u5b9e\u73b0\u4e86 InputListener \u63a5\u53e3\u7684\u76d1\u542c\u5668\u5bf9\u8c61\u3002\n     */\n    public void setInputListener(InputListener listener) {\n        // \u5b9a\u4e49\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\u7684\u6807\u5fd7\u53d8\u91cf\n        boolean keyInputSupported;\n        boolean keyInputV2Supported;\n        boolean motionInputSupported;\n        boolean rotaryInputSupported;\n        boolean customInputSupported;\n\n        // \u540c\u6b65\u5757\uff0c\u7528\u4e8e\u7ebf\u7a0b\u5b89\u5168\u5730\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\n        synchronized (mLock) {\n            // \u68c0\u67e5\u662f\u5426\u652f\u6301\u6309\u952e\u8f93\u5165\u3001\u65cb\u94ae\u8f93\u5165\u548c\u81ea\u5b9a\u4e49\u8f93\u5165\n            if (!mKeyInputSupported &amp;&amp; !mRotaryInputSupported &amp;&amp; !mCustomInputSupported) {\n                // \u5982\u679c\u90fd\u4e0d\u652f\u6301\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n                Slogf.w(TAG, \"input listener set while rotary and key input not supported\");\n                return;\n            }\n            // \u8bbe\u7f6e\u76d1\u542c\u5668\n            mListener = listener;\n            // \u8bb0\u5f55\u5f53\u524d\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\n            keyInputSupported = mKeyInputSupported;\n            keyInputV2Supported = mKeyInputV2Supported;\n            motionInputSupported = mMotionInputSupported;\n            rotaryInputSupported = mRotaryInputSupported;\n            customInputSupported = mCustomInputSupported;\n        }\n\n        // \u6839\u636e\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\uff0c\u8ba2\u9605\u76f8\u5e94\u7684\u786c\u4ef6\u5c5e\u6027\n        if (keyInputSupported) {\n            mHal.subscribePropertySafe(this, HW_KEY_INPUT);\n        }\n        if (keyInputV2Supported) {\n            mHal.subscribePropertySafe(this, HW_KEY_INPUT_V2);\n        }\n        if (motionInputSupported) {\n            mHal.subscribePropertySafe(this, HW_MOTION_INPUT);\n        }\n        if (rotaryInputSupported) {\n            mHal.subscribePropertySafe(this, HW_ROTARY_INPUT);\n        }\n        if (customInputSupported) {\n            mHal.subscribePropertySafe(this, HW_CUSTOM_INPUT);\n        }\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u68c0\u67e5\u652f\u6301\u7684\u8f93\u5165\u7c7b\u578b\uff0c\u5e76\u6839\u636e\u652f\u6301\u7684\u7c7b\u578b\u8ba2\u9605\u76f8\u5e94\u7684\u786c\u4ef6\u5c5e\u6027\uff0c\u786e\u4fdd\u670d\u52a1\u80fd\u591f\u6b63\u786e\u5904\u7406\u6765\u81eaHAL\u7684\u8f93\u5165\u4e8b\u4ef6\u3002</p> <p><code>mHal</code> \u5373\u4e3a <code>VehicleHal</code> \uff0c\u56e0\u6b64\u8c03\u7528\u4e86 <code>VehicleHal.subscribePropertySafe()</code> \u65b9\u6cd5\u6765\u8ba2\u9605\u5c5e\u6027\u3002\u5173\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5728\u524d\u9762\u7684 Android 15 CarService\u6e90\u780104-CarService\u4e0eVehicle HAL\u4ea4\u4e92 \u4e2d\u5df2\u6709\u8be6\u7ec6\u5206\u6790\uff0c\u5e76\u63d0\u5230\u5176\u6700\u7ec8\u4f1a\u56de\u8c03\u5230 <code>onHalEvents()</code> \u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u518d\u91cd\u590d\u8bf4\u660e\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalserviceonhalevents","title":"InputHalService.onHalEvents()","text":"<p><code>InputHalService.setInputListener()</code> \u65b9\u6cd5\u4e2d\u8c03\u7528 <code>VehicleHal.subscribePropertySafe()</code> \u65b9\u6cd5\u6765\u8ba2\u9605\u5c5e\u6027\u540e\uff0c\u4e8b\u4ef6\u56de\u8c03\u5230 <code>InputHalService.onHalEvents()</code> \u65b9\u6cd5\u4e2d\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u6765\u81ea\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u7684\u4e8b\u4ef6\u3002\n     * \u8be5\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5c5e\u6027\u503c\u7684\u5217\u8868\uff0c\u5e76\u6839\u636e\u5c5e\u6027ID\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76f8\u5e94\u7684\u5904\u7406\u65b9\u6cd5\u3002\n     * \n     * @param values \u5305\u542b\u591a\u4e2aHalPropValue\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u8f93\u5165\u4e8b\u4ef6\u3002\n     */\n    @Override\n    public void onHalEvents(List&lt;HalPropValue&gt; values) {\n        InputListener listener;\n        // \u540c\u6b65\u5757\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u5730\u8bbf\u95ee\u76d1\u542c\u5668\n        synchronized (mLock) {\n            listener = mListener;\n        }\n        // \u5982\u679c\u76d1\u542c\u5668\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n        if (listener == null) {\n            Slogf.w(TAG, \"Input event while listener is null\");\n            return;\n        }\n        // \u904d\u5386\u4e8b\u4ef6\u5217\u8868\uff0c\u5904\u7406\u6bcf\u4e2a\u4e8b\u4ef6\n        for (int i = 0; i &lt; values.size(); i++) {\n            HalPropValue value = values.get(i);\n            // \u6839\u636e\u5c5e\u6027ID\u5206\u53d1\u4e8b\u4ef6\n            switch (value.getPropId()) {\n                case HW_KEY_INPUT:\n                    // \u5904\u7406\u6309\u952e\u8f93\u5165\u4e8b\u4ef6\n                    dispatchKeyInput(listener, value);\n                    break;\n                case HW_KEY_INPUT_V2:\n                    // \u5904\u7406\u6309\u952e\u8f93\u5165V2\u4e8b\u4ef6\n                    dispatchKeyInputV2(listener, value);\n                    break;\n                case HW_MOTION_INPUT:\n                    // \u5904\u7406\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6\n                    dispatchMotionInput(listener, value);\n                    break;\n                case HW_ROTARY_INPUT:\n                    // \u5904\u7406\u65cb\u94ae\u8f93\u5165\u4e8b\u4ef6\n                    dispatchRotaryInput(listener, value);\n                    break;\n                case HW_CUSTOM_INPUT:\n                    // \u5904\u7406\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\n                    dispatchCustomInput(listener, value);\n                    break;\n                default:\n                    // \u5982\u679c\u5c5e\u6027ID\u4e0d\u5339\u914d\u4efb\u4f55\u5df2\u77e5\u7c7b\u578b\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n                    Slogf.e(TAG, \"Wrong event dispatched, prop:0x%x\", value.getPropId());\n                    break;\n            }\n        }\n    }\n}\n</code></pre> <p><code>mListener</code>\u662f\u901a\u8fc7\u4e4b\u524d\u8c03\u7528<code>InputHalService.setInputListener()</code>\u65b9\u6cd5\u8bbe\u7f6e\u7684\u3002<code>onHalEvents</code>\u65b9\u6cd5\u904d\u5386\u8f93\u5165\u4e8b\u4ef6\u5217\u8868\uff0c\u5e76\u6839\u636e\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u5c5e\u6027ID\uff08<code>propId</code>\uff09\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76f8\u5e94\u7684\u5904\u7406\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u9010\u4e00\u5206\u6790\u8fd9\u4e9b\u5904\u7406\u65b9\u6cd5\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchkeyinput","title":"InputHalService.dispatchKeyInput()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u6309\u952e\u8f93\u5165\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\n     * \u8be5\u65b9\u6cd5\u4ece`HalPropValue`\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6309\u952e\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002\n     * \n     * @param listener \u7528\u4e8e\u63a5\u6536\u548c\u5904\u7406\u4e8b\u4ef6\u7684\u8f93\u5165\u76d1\u542c\u5668\n     * @param value \u5305\u542b\u6309\u952e\u4e8b\u4ef6\u6570\u636e\u7684`HalPropValue`\u5bf9\u8c61\n     */\n    private void dispatchKeyInput(InputListener listener, HalPropValue value) {\n        int action; // \u6309\u952e\u52a8\u4f5c\uff08\u6309\u4e0b\u6216\u62ac\u8d77\uff09\n        int code; // \u6309\u952e\u4ee3\u7801\n        int vehicleDisplay; // \u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n        int indentsCount; // \u6309\u952e\u7f29\u8fdb\u8ba1\u6570\n\n        try {\n            // \u4ece`HalPropValue`\u4e2d\u63d0\u53d6\u6309\u952e\u52a8\u4f5c\n            action = (value.getInt32Value(0) == VehicleHwKeyInputAction.ACTION_DOWN)\n                    ? KeyEvent.ACTION_DOWN\n                    : KeyEvent.ACTION_UP;\n            // \u63d0\u53d6\u6309\u952e\u4ee3\u7801\n            code = value.getInt32Value(1);\n            // \u63d0\u53d6\u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n            vehicleDisplay = value.getInt32Value(2);\n            // \u63d0\u53d6\u6309\u952e\u7f29\u8fdb\u8ba1\u6570\uff0c\u5982\u679c\u672a\u63d0\u4f9b\u5219\u9ed8\u8ba4\u4e3a1\n            indentsCount = value.getInt32ValuesSize() &lt; 4 ? 1 : value.getInt32Value(3);\n\n            // \u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\uff0c\u663e\u793a\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n            Slogf.d(TAG, \"hal event code: %d, action: %d, display: %d, number of indents: %d\",\n                    code, action, vehicleDisplay, indentsCount);\n        } catch (Exception e) {\n            // \u5982\u679c\u63d0\u53d6\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.e(TAG, \"Invalid hal key input event received, int32Values: \"\n                    + value.dumpInt32Values(), e);\n            return;\n        }\n\n        // \u6839\u636e\u7f29\u8fdb\u8ba1\u6570\u5206\u53d1\u6309\u952e\u4e8b\u4ef6\n        while (indentsCount &gt; 0) {\n            indentsCount--;\n            // \u8c03\u7528`dispatchKeyEvent`\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\n            dispatchKeyEvent(listener, action, code, convertDisplayType(vehicleDisplay));\n        }\n    }\n}\n</code></pre> <p>\u4ece <code>HalPropValue</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5faa\u73af\u8c03\u7528<code>dispatchKeyEvent</code>\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchkeyevent","title":"InputHalService.dispatchKeyEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u4f7f\u7528{@link #mUptimeSupplier}\u63d0\u4f9b\u7684\u4e8b\u4ef6\u65f6\u95f4\u5206\u53d1\u4e00\u4e2aKeyEvent\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\n     * @param action KeyEvent\u7684\u52a8\u4f5c\uff08\u6309\u4e0b\u6216\u62ac\u8d77\uff09\n     * @param code KeyEvent\u7684\u6309\u952e\u4ee3\u7801\n     * @param display \u4e8b\u4ef6\u5173\u8054\u7684\u76ee\u6807\u663e\u793a\u5668\n     */\n    private void dispatchKeyEvent(InputListener listener, int action, int code,\n                                  @DisplayTypeEnum int display) {\n        // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\uff0c\u4f7f\u7528\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\u4f5c\u4e3a\u4e8b\u4ef6\u65f6\u95f4\n        dispatchKeyEvent(listener, action, code, display, mUptimeSupplier.getAsLong());\n    }\n\n    /**\n     * \u5206\u53d1\u4e00\u4e2aKeyEvent\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\n     * @param action KeyEvent\u7684\u52a8\u4f5c\uff08\u6309\u4e0b\u6216\u62ac\u8d77\uff09\n     * @param code KeyEvent\u7684\u6309\u952e\u4ee3\u7801\n     * @param display \u4e8b\u4ef6\u5173\u8054\u7684\u76ee\u6807\u663e\u793a\u5668\n     * @param eventTime \u4e8b\u4ef6\u53d1\u751f\u65f6\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff08\u6beb\u79d2\uff09\n     */\n    private void dispatchKeyEvent(InputListener listener, int action, int code,\n                                  @DisplayTypeEnum int display, long eventTime) {\n        long downTime; // \u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\n        int repeat; // \u6309\u952e\u91cd\u590d\u8ba1\u6570\n\n        // \u540c\u6b65\u5757\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u5730\u8bbf\u95ee\u6309\u952e\u72b6\u6001\n        synchronized (mKeyStates) {\n            // \u83b7\u53d6\u6309\u952e\u72b6\u6001\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u65b0\u7684\u72b6\u6001\n            KeyState state = mKeyStates.get(code);\n            if (state == null) {\n                state = new KeyState();\n                mKeyStates.put(code, state);\n            }\n\n            // \u5904\u7406\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\n            if (action == KeyEvent.ACTION_DOWN) {\n                downTime = eventTime; // \u8bbe\u7f6e\u6309\u4e0b\u65f6\u95f4\u4e3a\u4e8b\u4ef6\u65f6\u95f4\n                repeat = state.mRepeatCount++; // \u589e\u52a0\u91cd\u590d\u8ba1\u6570\n                state.mLastKeyDownTimestamp = eventTime; // \u66f4\u65b0\u6700\u540e\u6309\u4e0b\u65f6\u95f4\u6233\n            } else {\n                // \u5904\u7406\u6309\u952e\u62ac\u8d77\u4e8b\u4ef6\n                // \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\u6309\u4e0b\u4e8b\u4ef6\uff0c\u5c06\u6309\u4e0b\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e8b\u4ef6\u65f6\u95f4\n                // \u8fd9\u5728\u5b9e\u9645\u4e2d\u4e0d\u5e94\u8be5\u53d1\u751f\uff0c\u4f46\u53ef\u4ee5\u9632\u6b62HAL\u7684\u5f02\u5e38\u60c5\u51b5\n                downTime =\n                        (state.mLastKeyDownTimestamp == -1)\n                                ? eventTime\n                                : state.mLastKeyDownTimestamp;\n                repeat = 0; // \u91cd\u7f6e\u91cd\u590d\u8ba1\u6570\n                state.mRepeatCount = 0; // \u91cd\u7f6e\u6309\u952e\u72b6\u6001\u7684\u91cd\u590d\u8ba1\u6570\n            }\n        }\n\n        // \u521b\u5efaKeyEvent\u5bf9\u8c61\uff0c\u5305\u542b\u6309\u952e\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n        KeyEvent event = new KeyEvent(\n                downTime,\n                eventTime,\n                action,\n                code,\n                repeat,\n                0 /* deviceId */,\n                0 /* scancode */,\n                0 /* flags */,\n                InputDevice.SOURCE_CLASS_BUTTON);\n\n        // \u4e8b\u4ef6\u7684displayId\u5c06\u5728CarInputService#onKeyEvent\u4e2d\u8bbe\u7f6e\n        listener.onKeyEvent(event, display);\n    }\n}\n</code></pre> <p>\u521b\u5efa <code>KeyEvent</code> \u5bf9\u8c61\uff0c\u5305\u542b\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u8c03\u7528\u76d1\u542c\u5668\u7684 <code>onKeyEvent()</code> \u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u4f20\u9012\u7ed9\u76d1\u542c\u5668\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u4f1a\u56de\u8c03\u5230 <code>CarInputService.onKeyEvent()</code>\uff0c\u540e\u9762\u518d\u5206\u6790 <code>CarInputService.onKeyEvent()</code>\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchkeyinputv2","title":"InputHalService.dispatchKeyInputV2()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u6309\u952e\u8f93\u5165\u4e8b\u4ef6\uff08\u7248\u672c2\uff09\u7684\u65b9\u6cd5\u3002\n     * \u8be5\u65b9\u6cd5\u4ece`HalPropValue`\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6309\u952e\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002\n     * \n     * @param listener \u7528\u4e8e\u63a5\u6536\u548c\u5904\u7406\u4e8b\u4ef6\u7684\u8f93\u5165\u76d1\u542c\u5668\n     * @param value \u5305\u542b\u6309\u952e\u4e8b\u4ef6\u6570\u636e\u7684`HalPropValue`\u5bf9\u8c61\n     */\n    private void dispatchKeyInputV2(InputListener listener, HalPropValue value) {\n        final int int32ValuesSize = 4; // \u671f\u671b\u7684int32\u6570\u7ec4\u5927\u5c0f\n        final int int64ValuesSize = 1; // \u671f\u671b\u7684int64\u6570\u7ec4\u5927\u5c0f\n        int seat; // \u5ea7\u4f4dID\n        int vehicleDisplay; // \u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n        int keyCode; // \u6309\u952e\u4ee3\u7801\n        int action; // \u6309\u952e\u52a8\u4f5c\n        int repeatCount; // \u6309\u952e\u91cd\u590d\u8ba1\u6570\n        long elapsedDownTimeNanos; // \u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\uff08\u7eb3\u79d2\uff09\n        long elapsedEventTimeNanos; // \u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\uff08\u7eb3\u79d2\uff09\n        int convertedAction; // \u8f6c\u6362\u540e\u7684\u6309\u952e\u52a8\u4f5c\n        int convertedVehicleDisplay; // \u8f6c\u6362\u540e\u7684\u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n\n        try {\n            // \u83b7\u53d6\u5ea7\u4f4dID\n            seat = value.getAreaId();\n\n            // \u68c0\u67e5int32\u6570\u7ec4\u5927\u5c0f\u662f\u5426\u7b26\u5408\u9884\u671f\n            if (value.getInt32ValuesSize() &lt; int32ValuesSize) {\n                Slogf.e(TAG, \"Wrong int32 array size for key input v2 from vhal: %d\",\n                        value.getInt32ValuesSize());\n                return;\n            }\n\n            // \u63d0\u53d6\u6309\u952e\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n            vehicleDisplay = value.getInt32Value(0);\n            keyCode = value.getInt32Value(1);\n            action = value.getInt32Value(2);\n            repeatCount = value.getInt32Value(3);\n\n            // \u68c0\u67e5int64\u6570\u7ec4\u5927\u5c0f\u662f\u5426\u7b26\u5408\u9884\u671f\n            if (value.getInt64ValuesSize() &lt; int64ValuesSize) {\n                Slogf.e(TAG, \"Wrong int64 array size for key input v2 from vhal: %d\",\n                        value.getInt64ValuesSize());\n                return;\n            }\n\n            // \u63d0\u53d6\u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\n            elapsedDownTimeNanos = value.getInt64Value(0);\n\n            // \u5982\u679c\u65e5\u5fd7\u7ea7\u522b\u4e3aDEBUG\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n            if (Slogf.isLoggable(TAG, Log.DEBUG)) {\n                Slogf.d(TAG, \"hal event keyCode: %d, action: %d, display: %d, repeatCount: %d\"\n                                + \", elapsedDownTimeNanos: %d\", keyCode, action, vehicleDisplay,\n                        repeatCount, elapsedDownTimeNanos);\n            }\n\n            // \u8f6c\u6362\u6309\u952e\u52a8\u4f5c\u548c\u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n            convertedAction = convertToKeyEventAction(action);\n            convertedVehicleDisplay = convertDisplayType(vehicleDisplay);\n        } catch (Exception e) {\n            // \u5982\u679c\u63d0\u53d6\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.e(TAG, \"Invalid hal key input event received, int32Values: \"\n                    + value.dumpInt32Values() + \", int64Values: \" + value.dumpInt64Values(), e);\n            return;\n        }\n\n        // \u786e\u5b9a\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\n        if (action == VehicleHwKeyInputAction.ACTION_DOWN) {\n            // \u5bf9\u4e8e\u6309\u4e0b\u52a8\u4f5c\uff0c\u786e\u4fdd\u4e8b\u4ef6\u65f6\u95f4\u548c\u6309\u4e0b\u65f6\u95f4\u76f8\u540c\uff0c\u4ee5\u4fdd\u6301KeyEvent.java\u4e2d\u5b9a\u4e49\u7684\u4e0d\u53d8\u6027\n            elapsedEventTimeNanos = elapsedDownTimeNanos;\n        } else {\n            // \u5bf9\u4e8e\u5176\u4ed6\u52a8\u4f5c\uff0c\u4f7f\u7528\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\n            elapsedEventTimeNanos = value.getTimestamp();\n        }\n\n        // \u5206\u53d1\u6309\u952e\u4e8b\u4ef6\uff08\u7248\u672c2\uff09\n        dispatchKeyEventV2(listener, convertedAction, keyCode, convertedVehicleDisplay,\n                toUpTimeMillis(elapsedEventTimeNanos), toUpTimeMillis(elapsedDownTimeNanos),\n                repeatCount, seat);\n    }\n}\n</code></pre> <p>\u4ece <code>HalPropValue</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u5206\u53d1\u7ed9\u8f93\u5165\u76d1\u542c\u5668\u3002 \u6211\u4eec\u7a0d\u5fae\u770b\u4e0b <code>convertDisplayType()</code> \u65b9\u6cd5\u3002</p> <pre><code>/**\n * \u5c06\u8f66\u8f86\u663e\u793a\u7c7b\u578b\uff08\u5982 {@link VehicleDisplay#MAIN} \u548c {@link VehicleDisplay#INSTRUMENT_CLUSTER}\uff09\n * \u8f6c\u6362\u4e3a {@link CarOccupantZoneManager} \u4e2d\u5bf9\u5e94\u7684\u663e\u793a\u7c7b\u578b\n * \uff08\u5982 {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN} \u548c\n * {@link CarOccupantZoneManager#DISPLAY_TYPE_INSTRUMENT_CLUSTER}\uff09\u3002\n *\n * @param vehicleDisplayType \u8f66\u8f86\u663e\u793a\u7c7b\u578b\n * @return \u5bf9\u5e94\u7684\u663e\u793a\u7c7b\u578b\uff08\u5b9a\u4e49\u5728 {@link CarOccupantZoneManager} \u4e2d\uff09\uff0c\n * \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u503c\u4e0d\u5bf9\u5e94\u4e8e\u9a7e\u9a76\u5458\u7684\u663e\u793a\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\n * {@link CarOccupantZoneManager#DISPLAY_TYPE_UNKNOWN}\n * @hide\n */\n@DisplayTypeEnum\npublic static int convertDisplayType(int vehicleDisplayType) {\n    switch (vehicleDisplayType) {\n        case VehicleDisplay.MAIN:\n            // \u5982\u679c\u8f66\u8f86\u663e\u793a\u7c7b\u578b\u662f\u4e3b\u663e\u793a\u5668\uff0c\u8fd4\u56de\u4e3b\u663e\u793a\u5668\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_MAIN;\n        case VehicleDisplay.INSTRUMENT_CLUSTER:\n            // \u5982\u679c\u8f66\u8f86\u663e\u793a\u7c7b\u578b\u662f\u4eea\u8868\u76d8\uff0c\u8fd4\u56de\u4eea\u8868\u76d8\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_INSTRUMENT_CLUSTER;\n        case VehicleDisplay.HUD:\n            // \u5982\u679c\u8f66\u8f86\u663e\u793a\u7c7b\u578b\u662f\u62ac\u5934\u663e\u793a\u5668\uff0c\u8fd4\u56de\u62ac\u5934\u663e\u793a\u5668\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_HUD;\n        case VehicleDisplay.INPUT:\n            // \u5982\u679c\u8f66\u8f86\u663e\u793a\u7c7b\u578b\u662f\u8f93\u5165\u663e\u793a\u5668\uff0c\u8fd4\u56de\u8f93\u5165\u663e\u793a\u5668\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_INPUT;\n        case VehicleDisplay.AUXILIARY:\n            // \u5982\u679c\u8f66\u8f86\u663e\u793a\u7c7b\u578b\u662f\u8f85\u52a9\u663e\u793a\u5668\uff0c\u8fd4\u56de\u8f85\u52a9\u663e\u793a\u5668\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_AUXILIARY;\n        default:\n            // \u5982\u679c\u4f20\u5165\u7684\u663e\u793a\u7c7b\u578b\u4e0d\u5339\u914d\u4efb\u4f55\u5df2\u77e5\u7c7b\u578b\uff0c\u8fd4\u56de\u672a\u77e5\u663e\u793a\u7c7b\u578b\n            return CarOccupantZoneManager.DISPLAY_TYPE_UNKNOWN;\n    }\n}\n</code></pre> <p><code>CarOccupantZoneManager</code> \u7c7b\u63d0\u4f9b\u4e86\u8f66\u8f86\u4e2d\u663e\u793a\u5668\u7684\u76f8\u5173\u4fe1\u606f\uff1a</p> <ul> <li><code>DISPLAY_TYPE_MAIN</code>\uff1a\u4e3b\u663e\u793a\u5668\uff0c\u7528\u6237\u4e3b\u8981\u4e0e\u5176\u4ea4\u4e92\uff0c\u9ed8\u8ba4UI\u4f1a\u542f\u52a8\u5230\u6b64\u663e\u793a\u5668\u3002</li> <li><code>DISPLAY_TYPE_INSTRUMENT_CLUSTER</code>\uff1a\u4eea\u8868\u76d8\u663e\u793a\u5668\uff0c\u901a\u5e38\u4ec5\u5b58\u5728\u4e8e\u9a7e\u9a76\u5458\u533a\u57df\u3002</li> <li><code>DISPLAY_TYPE_HUD</code>\uff1a\u62ac\u5934\u663e\u793a\u5668\uff08HUD\uff09\uff0c\u901a\u5e38\u4ec5\u5b58\u5728\u4e8e\u9a7e\u9a76\u5458\u533a\u57df\u3002</li> <li><code>DISPLAY_TYPE_INPUT</code>\uff1a\u4e13\u7528\u4e8e\u663e\u793a\u8f93\u5165\u6cd5\uff08IME\uff09\u7684\u663e\u793a\u5668\u3002</li> <li><code>DISPLAY_TYPE_AUXILIARY</code>\uff1a\u8f85\u52a9\u663e\u793a\u5668\uff0c\u4e3a\u4e3b\u663e\u793a\u5668\u63d0\u4f9b\u989d\u5916\u7684\u5c4f\u5e55\u3002</li> <li><code>DISPLAY_TYPE_AUXILIARY_2</code> ~ <code>DISPLAY_TYPE_AUXILIARY_5</code>\uff1a\u5176\u4ed6\u8f85\u52a9\u663e\u793a\u5668\u7c7b\u578b\uff0c\u9690\u85cf\u5e38\u91cf\uff08<code>@hide</code>\uff09\uff0c\u53ef\u80fd\u7528\u4e8e\u5185\u90e8\u6269\u5c55\u3002</li> <li><code>DISPLAY_TYPE_DISPLAY_COMPATIBILITY</code>\uff1a\u4e13\u7528\u4e8e\u663e\u793a\u517c\u5bb9\u6027\u5e94\u7528\u7a0b\u5e8f\u7684\u663e\u793a\u5668\uff0c\u9690\u85cf\u5e38\u91cf\uff08<code>@hide</code>\uff09\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchkeyinputv2_1","title":"InputHalService.dispatchKeyInputV2()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5c06\u4e00\u4e2a{@link KeyEvent}\u5206\u53d1\u5230\u6307\u5b9a\u7684\u5ea7\u4f4d\u533a\u57df\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\n     * @param action \u6309\u952e\u4e8b\u4ef6\u7684\u52a8\u4f5c\uff08\u6309\u4e0b\u6216\u62ac\u8d77\uff09\n     * @param code \u6309\u952e\u4e8b\u4ef6\u7684\u6309\u952e\u4ee3\u7801\n     * @param display \u4e8b\u4ef6\u5173\u8054\u7684\u76ee\u6807\u663e\u793a\u5668\n     * @param eventTime \u4e8b\u4ef6\u53d1\u751f\u65f6\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff08\u6beb\u79d2\uff09\n     * @param downTime \u6309\u952e\u6309\u4e0b\u65f6\u7684\u65f6\u95f4\uff08\u6beb\u79d2\uff09\n     * @param repeat \u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\u7684\u91cd\u590d\u8ba1\u6570\u3002\u5bf9\u4e8e\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\uff0c\u8fd9\u662f\u4ece0\u5f00\u59cb\u7684\u91cd\u590d\u8ba1\u6570\u3002\n     *               \u5bf9\u4e8e\u6309\u952e\u62ac\u8d77\u4e8b\u4ef6\uff0c\u8be5\u503c\u59cb\u7ec8\u4e3a0\u3002\n     * @param seat \u4e8b\u4ef6\u53d1\u751f\u7684\u533a\u57dfID\n     */\n    private void dispatchKeyEventV2(InputListener listener, int action, int code,\n                                    @DisplayTypeEnum int display, long eventTime, long downTime, int repeat, int seat) {\n        // \u521b\u5efa\u4e00\u4e2aKeyEvent\u5bf9\u8c61\uff0c\u5305\u542b\u6309\u952e\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n        KeyEvent event = new KeyEvent(\n                downTime, // \u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\n                eventTime, // \u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\n                action, // \u6309\u952e\u52a8\u4f5c\n                code, // \u6309\u952e\u4ee3\u7801\n                repeat, // \u91cd\u590d\u8ba1\u6570\n                0 /* metaState */, // \u5143\u72b6\u6001\uff0c\u9ed8\u8ba4\u4e3a0\n                0 /* deviceId */, // \u8bbe\u5907ID\uff0c\u9ed8\u8ba4\u4e3a0\n                0 /* scancode */, // \u626b\u63cf\u7801\uff0c\u9ed8\u8ba4\u4e3a0\n                0 /* flags */, // \u6807\u5fd7\uff0c\u9ed8\u8ba4\u4e3a0\n                InputDevice.SOURCE_CLASS_BUTTON); // \u8f93\u5165\u8bbe\u5907\u6e90\u7c7b\u578b\n\n        // event.displayId\u5c06\u5728CarInputService#onKeyEvent\u4e2d\u8bbe\u7f6e\n        listener.onKeyEvent(event, display, seat); // \u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\n        saveV2KeyInputEventInHistory(event); // \u5c06\u4e8b\u4ef6\u4fdd\u5b58\u5230\u5386\u53f2\u8bb0\u5f55\u4e2d\n    }\n\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a <code>KeyEvent</code> \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u8f93\u5165\u76d1\u542c\u5668\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u4f1a\u56de\u8c03\u5230 <code>CarInputService.onKeyEvent()</code>\uff0c\u540e\u9762\u518d\u5206\u6790 <code>CarInputService.onKeyEvent()</code>\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchmotioninput","title":"InputHalService.dispatchMotionInput()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u5e76\u5206\u53d1\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * \u8be5\u65b9\u6cd5\u4ece`HalPropValue`\u5bf9\u8c61\u4e2d\u63d0\u53d6\u89e6\u6478\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a`MotionEvent`\u5bf9\u8c61\uff0c\n     * \u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u548c\u5904\u7406\u4e8b\u4ef6\u7684\u8f93\u5165\u76d1\u542c\u5668\n     * @param value \u5305\u542b\u89e6\u6478\u4e8b\u4ef6\u6570\u636e\u7684`HalPropValue`\u5bf9\u8c61\n     */\n    private void dispatchMotionInput(InputListener listener, HalPropValue value) {\n        // \u5b9a\u4e49\u5e38\u91cf\uff0c\u7528\u4e8e\u89e3\u6790\u6570\u636e\n        final int firstInt32ArrayOffset = 5; // int32\u6570\u7ec4\u7684\u8d77\u59cb\u504f\u79fb\u91cf\n        final int int64ValuesSize = 1; // \u671f\u671b\u7684int64\u6570\u7ec4\u5927\u5c0f\n        final int numInt32Arrays = 2; // \u6bcf\u4e2a\u6307\u9488\u7684int32\u6570\u7ec4\u6570\u91cf\n        final int numFloatArrays = 4; // \u6bcf\u4e2a\u6307\u9488\u7684float\u6570\u7ec4\u6570\u91cf\n\n        // \u5b9a\u4e49\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u89e3\u6790\u540e\u7684\u6570\u636e\n        int seat; // \u5ea7\u4f4d\u533a\u57dfID\n        int vehicleDisplay; // \u8f66\u8f86\u663e\u793a\u5668\u6807\u8bc6\n        int inputSource; // \u8f93\u5165\u6e90\u7c7b\u578b\n        int action; // \u52a8\u4f5c\u7c7b\u578b\n        int buttonStateFlag; // \u6309\u94ae\u72b6\u6001\u6807\u5fd7\n        int pointerCount; // \u6307\u9488\u6570\u91cf\n        int[] pointerIds; // \u6307\u9488ID\u6570\u7ec4\n        int[] toolTypes; // \u5de5\u5177\u7c7b\u578b\u6570\u7ec4\n        float[] xData; // X\u5750\u6807\u6570\u7ec4\n        float[] yData; // Y\u5750\u6807\u6570\u7ec4\n        float[] pressureData; // \u538b\u529b\u6570\u636e\u6570\u7ec4\n        float[] sizeData; // \u5927\u5c0f\u6570\u636e\u6570\u7ec4\n        long elapsedDownTimeNanos; // \u6309\u4e0b\u65f6\u95f4\uff08\u7eb3\u79d2\uff09\n        PointerProperties[] pointerProperties; // \u6307\u9488\u5c5e\u6027\u6570\u7ec4\n        PointerCoords[] pointerCoords; // \u6307\u9488\u5750\u6807\u6570\u7ec4\n        int convertedInputSource; // \u8f6c\u6362\u540e\u7684\u8f93\u5165\u6e90\u7c7b\u578b\n        int convertedAction; // \u8f6c\u6362\u540e\u7684\u52a8\u4f5c\u7c7b\u578b\n        int convertedButtonStateFlag; // \u8f6c\u6362\u540e\u7684\u6309\u94ae\u72b6\u6001\u6807\u5fd7\n\n        try {\n            // \u63d0\u53d6\u5ea7\u4f4d\u533a\u57dfID\n            seat = value.getAreaId();\n\n            // \u68c0\u67e5int32\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5426\u8db3\u591f\n            if (value.getInt32ValuesSize() &lt; firstInt32ArrayOffset) {\n                Slogf.e(TAG, \"int32\u6570\u7ec4\u5927\u5c0f\u4e0d\u8db3\uff0c\u6765\u81eaVHAL\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6: %d\", value.getInt32ValuesSize());\n                return;\n            }\n\n            // \u63d0\u53d6\u89e6\u6478\u4e8b\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\n            vehicleDisplay = value.getInt32Value(0);\n            inputSource = value.getInt32Value(1);\n            action = value.getInt32Value(2);\n            buttonStateFlag = value.getInt32Value(3);\n            pointerCount = value.getInt32Value(4);\n\n            // \u68c0\u67e5\u6307\u9488\u6570\u91cf\u662f\u5426\u6709\u6548\n            if (pointerCount &lt; 1) {\n                Slogf.e(TAG, \"\u6307\u9488\u6570\u91cf\u65e0\u6548\uff0c\u6765\u81eaVHAL\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6: %d\", pointerCount);\n                return;\n            }\n\n            // \u521d\u59cb\u5316\u6307\u9488\u76f8\u5173\u6570\u7ec4\n            pointerIds = new int[pointerCount];\n            toolTypes = new int[pointerCount];\n            xData = new float[pointerCount];\n            yData = new float[pointerCount];\n            pressureData = new float[pointerCount];\n            sizeData = new float[pointerCount];\n\n            // \u68c0\u67e5int32\u6570\u7ec4\u548cfloat\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5426\u8db3\u591f\n            if (value.getInt32ValuesSize() &lt; firstInt32ArrayOffset + pointerCount * numInt32Arrays) {\n                Slogf.e(TAG, \"int32\u6570\u7ec4\u5927\u5c0f\u4e0d\u8db3\uff0c\u6765\u81eaVHAL\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6: %d\", value.getInt32ValuesSize());\n                return;\n            }\n            if (value.getFloatValuesSize() &lt; pointerCount * numFloatArrays) {\n                Slogf.e(TAG, \"float\u6570\u7ec4\u5927\u5c0f\u4e0d\u8db3\uff0c\u6765\u81eaVHAL\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6: %d\", value.getFloatValuesSize());\n                return;\n            }\n\n            // \u63d0\u53d6\u6bcf\u4e2a\u6307\u9488\u7684\u8be6\u7ec6\u4fe1\u606f\n            for (int i = 0; i &lt; pointerCount; i++) {\n                pointerIds[i] = value.getInt32Value(firstInt32ArrayOffset + i);\n                toolTypes[i] = value.getInt32Value(firstInt32ArrayOffset + pointerCount + i);\n                xData[i] = value.getFloatValue(i);\n                yData[i] = value.getFloatValue(pointerCount + i);\n                pressureData[i] = value.getFloatValue(2 * pointerCount + i);\n                sizeData[i] = value.getFloatValue(3 * pointerCount + i);\n            }\n\n            // \u68c0\u67e5int64\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5426\u8db3\u591f\n            if (value.getInt64ValuesSize() &lt; int64ValuesSize) {\n                Slogf.e(TAG, \"int64\u6570\u7ec4\u5927\u5c0f\u4e0d\u8db3\uff0c\u6765\u81eaVHAL\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6: %d\", value.getInt64ValuesSize());\n                return;\n            }\n\n            // \u63d0\u53d6\u6309\u4e0b\u65f6\u95f4\n            elapsedDownTimeNanos = value.getInt64Value(0);\n\n            // \u5982\u679c\u65e5\u5fd7\u7ea7\u522b\u4e3aDEBUG\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n            if (Slogf.isLoggable(TAG, Log.DEBUG)) {\n                Slogf.d(TAG, \"\u89e6\u6478\u4e8b\u4ef6\u4fe1\u606f: \u8f93\u5165\u6e90: %d, \u52a8\u4f5c: %d, \u663e\u793a\u5668: %d, \u6309\u94ae\u72b6\u6001: %d, \u6307\u9488\u6570\u91cf: %d, \u6309\u4e0b\u65f6\u95f4: %d\",\n                        inputSource, action, vehicleDisplay, buttonStateFlag, pointerCount, elapsedDownTimeNanos);\n            }\n\n            // \u521b\u5efa\u6307\u9488\u5c5e\u6027\u548c\u5750\u6807\u6570\u7ec4\n            pointerProperties = createPointerPropertiesArray(pointerCount);\n            pointerCoords = createPointerCoordsArray(pointerCount);\n\n            // \u586b\u5145\u6307\u9488\u5c5e\u6027\u548c\u5750\u6807\u6570\u7ec4\n            for (int i = 0; i &lt; pointerCount; i++) {\n                pointerProperties[i].id = pointerIds[i];\n                pointerProperties[i].toolType = convertToolType(toolTypes[i]);\n                pointerCoords[i].x = xData[i];\n                pointerCoords[i].y = yData[i];\n                pointerCoords[i].pressure = pressureData[i];\n                pointerCoords[i].size = sizeData[i];\n            }\n\n            // \u8f6c\u6362\u52a8\u4f5c\u7c7b\u578b\u3001\u6309\u94ae\u72b6\u6001\u548c\u8f93\u5165\u6e90\n            convertedAction = convertMotionAction(action);\n            convertedButtonStateFlag = convertButtonStateFlag(buttonStateFlag);\n            convertedInputSource = convertInputSource(inputSource);\n        } catch (Exception e) {\n            // \u5982\u679c\u89e3\u6790\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.e(TAG, \"\u65e0\u6548\u7684\u89e6\u6478\u8f93\u5165\u4e8b\u4ef6\uff0cint32Values: \" + value.dumpInt32Values()\n                    + \", floatValues: \" + value.dumpFloatValues()\n                    + \", int64Values: \" + value.dumpInt64Values(), e);\n            return;\n        }\n\n        // \u521b\u5efaMotionEvent\u5bf9\u8c61\n        MotionEvent event = MotionEvent.obtain(\n                toUpTimeMillis(elapsedDownTimeNanos), // \u6309\u4e0b\u65f6\u95f4\n                toUpTimeMillis(value.getTimestamp()), // \u4e8b\u4ef6\u53d1\u751f\u65f6\u95f4\n                convertedAction, // \u8f6c\u6362\u540e\u7684\u52a8\u4f5c\u7c7b\u578b\n                pointerCount, // \u6307\u9488\u6570\u91cf\n                pointerProperties, // \u6307\u9488\u5c5e\u6027\u6570\u7ec4\n                pointerCoords, // \u6307\u9488\u5750\u6807\u6570\u7ec4\n                0 /* metaState */, // \u5143\u72b6\u6001\n                convertedButtonStateFlag, // \u8f6c\u6362\u540e\u7684\u6309\u94ae\u72b6\u6001\n                0f /* xPrecision */, // X\u8f74\u7cbe\u5ea6\n                0f /* yPrecision */, // Y\u8f74\u7cbe\u5ea6\n                0 /* deviceId */, // \u8bbe\u5907ID\n                0 /* edgeFlags */, // \u8fb9\u7f18\u6807\u5fd7\n                convertedInputSource, // \u8f6c\u6362\u540e\u7684\u8f93\u5165\u6e90\n                0 /* flags */); // \u6807\u5fd7\n\n        // \u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\n        listener.onMotionEvent(event, convertDisplayType(vehicleDisplay), seat);\n\n        // \u5c06\u4e8b\u4ef6\u4fdd\u5b58\u5230\u5386\u53f2\u8bb0\u5f55\u4e2d\n        saveMotionEventInHistory(event);\n    }\n\n}\n</code></pre> <p>\u4ece <code>HalPropValue</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u89e6\u6478\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a<code>MotionEvent</code>\u5bf9\u8c61\uff0c\u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u4f1a\u56de\u8c03\u5230 <code>CarInputService.onMotionEvent()</code>\uff0c\u540e\u9762\u518d\u5206\u6790 <code>CarInputService.onMotionEvent()</code>\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchrotaryinput","title":"InputHalService.dispatchRotaryInput()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u5e76\u5206\u53d1\u65cb\u94ae\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * \u8be5\u65b9\u6cd5\u4ece`HalPropValue`\u5bf9\u8c61\u4e2d\u63d0\u53d6\u65cb\u94ae\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a`RotaryEvent`\u5bf9\u8c61\uff0c\n     * \u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u548c\u5904\u7406\u4e8b\u4ef6\u7684\u8f93\u5165\u76d1\u542c\u5668\n     * @param value \u5305\u542b\u65cb\u94ae\u4e8b\u4ef6\u6570\u636e\u7684`HalPropValue`\u5bf9\u8c61\n     */\n    private void dispatchRotaryInput(InputListener listener, HalPropValue value) {\n        int timeValuesIndex = 3;  // \u5269\u4f59\u7684\u503c\u662f\u65f6\u95f4\u589e\u91cf\uff08\u7eb3\u79d2\uff09\n\n        // \u68c0\u67e5int32\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5426\u8db3\u591f\n        if (value.getInt32ValuesSize() &lt; timeValuesIndex) {\n            Slogf.e(TAG, \"\u6765\u81eaVHAL\u7684\u65cb\u94ae\u8f93\u5165int32\u6570\u7ec4\u5927\u5c0f\u9519\u8bef: %d\", value.getInt32ValuesSize());\n            return;\n        }\n\n        // \u63d0\u53d6\u65cb\u94ae\u4e8b\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\n        int rotaryInputType = value.getInt32Value(0);\n        int detentCount = value.getInt32Value(1);\n        int vehicleDisplay = value.getInt32Value(2);\n        long timestamp = value.getTimestamp();  // \u7b2c\u4e00\u4e2a\u523b\u5ea6\u7684\u65f6\u95f4\u6233\uff08\u7eb3\u79d2\uff09\n\n        // \u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n        Slogf.d(TAG, \"hal\u65cb\u94ae\u8f93\u5165\u7c7b\u578b: %d, \u523b\u5ea6\u6570\u91cf: %d, \u663e\u793a\u5668: %d\", rotaryInputType, detentCount, vehicleDisplay);\n\n        // \u5224\u65ad\u65cb\u8f6c\u65b9\u5411\n        boolean clockwise = detentCount &gt; 0;\n        detentCount = Math.abs(detentCount);\n\n        // \u68c0\u67e5\u523b\u5ea6\u6570\u91cf\u662f\u5426\u6709\u6548\n        if (detentCount == 0) {\n            Slogf.e(TAG, \"\u6765\u81eaVHAL\u7684\u523b\u5ea6\u6570\u91cf\u4e3a\u96f6\uff0c\u5ffd\u7565\u4e8b\u4ef6\");\n            return;\n        }\n\n        // \u68c0\u67e5\u523b\u5ea6\u6570\u91cf\u662f\u5426\u5728\u6709\u6548\u8303\u56f4\u5185\n        if (detentCount &lt; 0 || detentCount &gt; Integer.MAX_VALUE - detentCount + 1) {\n            Slogf.e(TAG, \"\u6765\u81eaVHAL\u7684\u65e0\u6548\u523b\u5ea6\u6570\u91cf: %d\uff0c\u5ffd\u7565\u4e8b\u4ef6\", detentCount);\n        }\n\n        // \u68c0\u67e5\u663e\u793a\u5668\u7c7b\u578b\u662f\u5426\u6709\u6548\n        if (vehicleDisplay != VehicleDisplay.MAIN &amp;&amp; vehicleDisplay != VehicleDisplay.INSTRUMENT_CLUSTER) {\n            Slogf.e(TAG, \"\u6765\u81eaVHAL\u7684\u65cb\u94ae\u8f93\u5165\u663e\u793a\u5668\u7c7b\u578b\u9519\u8bef: %d\", vehicleDisplay);\n            return;\n        }\n\n        // \u68c0\u67e5int32\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u5426\u4e0e\u523b\u5ea6\u6570\u91cf\u5339\u914d\n        if (value.getInt32ValuesSize() != (timeValuesIndex + detentCount - 1)) {\n            Slogf.e(TAG, \"\u6765\u81eaVHAL\u7684\u65cb\u94ae\u8f93\u5165int32\u6570\u7ec4\u5927\u5c0f\u9519\u8bef: %d\", value.getInt32ValuesSize());\n            return;\n        }\n\n        // \u786e\u5b9a\u65cb\u94ae\u8f93\u5165\u7c7b\u578b\n        int carInputManagerType;\n        switch (rotaryInputType) {\n            case ROTARY_INPUT_TYPE_SYSTEM_NAVIGATION:\n                carInputManagerType = CarInputManager.INPUT_TYPE_ROTARY_NAVIGATION;\n                break;\n            case ROTARY_INPUT_TYPE_AUDIO_VOLUME:\n                carInputManagerType = CarInputManager.INPUT_TYPE_ROTARY_VOLUME;\n                break;\n            default:\n                Slogf.e(TAG, \"\u672a\u77e5\u7684\u65cb\u94ae\u8f93\u5165\u7c7b\u578b: %d\", rotaryInputType);\n                return;\n        }\n\n        // \u8ba1\u7b97\u6bcf\u4e2a\u523b\u5ea6\u7684\u65f6\u95f4\u6233\n        long[] timestamps = new long[detentCount];\n        long uptimeToElapsedTimeDelta = CarServiceUtils.getUptimeToElapsedTimeDeltaInMillis();\n        long startUptime = TimeUnit.NANOSECONDS.toMillis(timestamp) - uptimeToElapsedTimeDelta;\n        timestamps[0] = startUptime;\n        for (int i = 0; i &lt; timestamps.length - 1; i++) {\n            timestamps[i + 1] = timestamps[i] + TimeUnit.NANOSECONDS.toMillis(\n                    value.getInt32Value(timeValuesIndex + i));\n        }\n\n        // \u521b\u5efaRotaryEvent\u5bf9\u8c61\n        RotaryEvent event = new RotaryEvent(carInputManagerType, clockwise, timestamps);\n\n        // \u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\n        listener.onRotaryEvent(event, convertDisplayType(vehicleDisplay));\n    }\n}\n</code></pre> <p>\u4ece <code>HalPropValue</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u65cb\u94ae\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a<code>RotaryEvent</code>\u5bf9\u8c61\uff0c\u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\uff0c\u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002</p> <p>\u6240\u4ee5\u6700\u7ec8\u4f1a\u56de\u8c03\u5230 <code>CarInputService.onRotaryEvent()</code>\uff0c\u540e\u9762\u518d\u5206\u6790 <code>CarInputService.onRotaryEvent()</code>\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputhalservicedispatchcustominput","title":"InputHalService.dispatchCustomInput()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/hal/InputHalService.java\n\npublic class InputHalService extends HalServiceBase {\n\n    /**\n     * \u5904\u7406\u5e76\u5206\u53d1\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * \u8be5\u65b9\u6cd5\u4ece`HalPropValue`\u5bf9\u8c61\u4e2d\u63d0\u53d6\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a`CustomInputEvent`\u5bf9\u8c61\uff0c\n     * \u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002\n     *\n     * @param listener \u7528\u4e8e\u63a5\u6536\u548c\u5904\u7406\u4e8b\u4ef6\u7684\u8f93\u5165\u76d1\u542c\u5668\n     * @param value \u5305\u542b\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u6570\u636e\u7684`HalPropValue`\u5bf9\u8c61\n     */\n    private void dispatchCustomInput(InputListener listener, HalPropValue value) {\n        // \u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\uff0c\u663e\u793a\u76d1\u542c\u5668\u548c\u4e8b\u4ef6\u503c\u7684\u4fe1\u606f\n        Slogf.d(TAG, \"\u6b63\u5728\u5206\u53d1\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\uff0c\u76d1\u542c\u5668: %s\uff0c\u503c: %s\", listener, value);\n\n        int inputCode; // \u8f93\u5165\u4ee3\u7801\n        int targetDisplayType; // \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n        int repeatCounter; // \u91cd\u590d\u8ba1\u6570\u5668\n\n        try {\n            // \u4ece`HalPropValue`\u4e2d\u63d0\u53d6\u8f93\u5165\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n            inputCode = value.getInt32Value(0); // \u83b7\u53d6\u8f93\u5165\u4ee3\u7801\n            targetDisplayType = convertDisplayType(value.getInt32Value(1)); // \u8f6c\u6362\u663e\u793a\u5668\u7c7b\u578b\n            repeatCounter = value.getInt32Value(2); // \u83b7\u53d6\u91cd\u590d\u8ba1\u6570\u5668\n        } catch (Exception e) {\n            // \u5982\u679c\u63d0\u53d6\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.e(TAG, \"\u63a5\u6536\u5230\u65e0\u6548\u7684HAL\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\", e);\n            return;\n        }\n\n        // \u521b\u5efaCustomInputEvent\u5bf9\u8c61\uff0c\u5305\u542b\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n        CustomInputEvent event = new CustomInputEvent(inputCode, targetDisplayType, repeatCounter);\n\n        // \u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u76d1\u542c\u5668\n        listener.onCustomInputEvent(event);\n    }\n}\n</code></pre> <p>\u4ece <code>HalPropValue</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a<code>CustomInputEvent</code>\u5bf9\u8c61\uff0c\u7136\u540e\u5206\u53d1\u7ed9\u76d1\u542c\u5668\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputmanagerrequestinputeventcapture","title":"CarInputManager.requestInputEventCapture()","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/input/CarInputManager.java\n\n/**\n * \u8be5API\u5141\u8bb8\u6355\u83b7\u9009\u5b9a\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\n */\npublic final class CarInputManager extends CarManagerBase {\n\n    /**\n     * \u8bf7\u6c42\u4e3a\u6307\u5b9a\u7684\u663e\u793a\u5668\u6355\u83b7\u6240\u6709\u8bf7\u6c42\u7684\u8f93\u5165\u7c7b\u578b\u7684\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * &lt;p&gt;\u5982\u679c\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u5ba2\u6237\u7aef\u6301\u6709\u8be5\u8bf7\u6c42\uff0c\u5219\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728{@code requestFlags}\u4e2d\u8bbe\u7f6e\n     * {@link #CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT}\u4ee5\u7b49\u5f85\u5f53\u524d\u9ad8\u4f18\u5148\u7ea7\u5ba2\u6237\u7aef\u91ca\u653e\u5b83\u3002\n     *\n     * &lt;p&gt;\u5982\u679c\u53ea\u6709\u90e8\u5206\u6307\u5b9a\u7684\u8f93\u5165\u7c7b\u578b\u53ef\u7528\uff0c\u8bf7\u6c42\u5c06\uff1a\n     * &lt;ul&gt;\n     * &lt;li&gt;\u5931\u8d25\uff0c\u8fd4\u56de{@link #INPUT_CAPTURE_RESPONSE_FAILED}\uff0c\u6216\n     * &lt;li&gt;\u88ab\u5ef6\u8fdf\uff0c\u8fd4\u56de{@link #INPUT_CAPTURE_RESPONSE_DELAYED}\uff0c\u5982\u679c\u4f7f\u7528\u4e86\n     * {@link #CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT}\u6807\u5fd7\u3002\n     * &lt;/ul&gt;\n     *\n     * &lt;p&gt;\u5728\u8fd4\u56de{@link #INPUT_CAPTURE_RESPONSE_DELAYED}\u540e\uff0c\u76f4\u5230\u5ba2\u6237\u7aef\u6536\u5230\u5e26\u6709\u6709\u6548\u8f93\u5165\u7c7b\u578b\u7684\n     * {@link CarInputCaptureCallback#onCaptureStateChanged(int, int[])}\u8c03\u7528\u4e4b\u524d\uff0c\u4e0d\u4f1a\u6355\u83b7\u4efb\u4f55\u8f93\u5165\u7c7b\u578b\u3002\n     *\n     * &lt;p&gt;\u53c2\u6570targetDisplayType\u5fc5\u987b\u4ec5\u5305\u542b\u9a7e\u9a76\u5458\u663e\u793a\u7c7b\u578b\uff08\u5373\n     * {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN}\u548c\n     * {@link CarOccupantZoneManager#DISPLAY_TYPE_INSTRUMENT_CLUSTER}\uff09\u3002\n     *\n     * &lt;p&gt;\u56de\u8c03\u6309\u663e\u793a\u7c7b\u578b\u5206\u7ec4\u548c\u5806\u53e0\u3002\u53ea\u6709\u6700\u8fd1\u6ce8\u518c\u7684\u56de\u8c03\u4f1a\u63a5\u6536\u5173\u8054\u663e\u793a\u5668\u548c\u8f93\u5165\u7c7b\u578b\u7684\u4f20\u5165\u4e8b\u4ef6\u3002\n     * \u4f8b\u5982\uff0c\u5982\u679c\u5728\u540c\u4e00\u4e2a{@link CarInputManager}\u5b9e\u4f8b\u4e2d\u9488\u5bf9\u540c\u4e00\u663e\u793a\u7c7b\u578b\u6ce8\u518c\u4e86\u4e24\u4e2a\u56de\u8c03\uff0c\n     * \u5219\u53ea\u6709\u6700\u540e\u6ce8\u518c\u7684\u56de\u8c03\u4f1a\u63a5\u6536\u4e8b\u4ef6\uff0c\u5373\u4f7f\u5b83\u4eec\u662f\u4e3a\u4e0d\u540c\u7684\u8f93\u5165\u4e8b\u4ef6\u7c7b\u578b\u6ce8\u518c\u7684\u3002\n     *\n     * @throws SecurityException \u5982\u679c\u8c03\u7528\u8005\u6ca1\u6709\u6388\u4e88\u4ee5\u4e0b\u6743\u9650\u4e4b\u4e00\uff1a\n     *                           {@code android.car.permission.CAR_MONITOR_INPUT}\u6216\n     *                           {@code android.Manifest.permission.MONITOR_INPUT}\n     * @throws IllegalArgumentException \u5982\u679ctargetDisplayType\u53c2\u6570\u5bf9\u5e94\u4e8e\u4e0d\u652f\u6301\u7684\u663e\u793a\u7c7b\u578b\n     * @throws IllegalArgumentException \u5982\u679cinputTypes\u53c2\u6570\u5305\u542b\u65e0\u6548\u6216\u4e0d\u652f\u6301\u7684\u503c\n     * @param targetDisplayType \u8981\u6ce8\u518c\u56de\u8c03\u7684\u663e\u793a\u7c7b\u578b\n     * @param inputTypes \u8981\u6ce8\u518c\u56de\u8c03\u7684\u8f93\u5165\u7c7b\u578b\n     * @param requestFlags \u6355\u83b7\u8bf7\u6c42\u6807\u5fd7\n     * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\n     * @return \u8f93\u5165\u6355\u83b7\u54cd\u5e94\uff0c\u6307\u793a\u6ce8\u518c\u662f\u6210\u529f\u3001\u5931\u8d25\u8fd8\u662f\u5ef6\u8fdf\n     *\n     * @hide\n     */\n    @SystemApi\n    @RequiresPermission(anyOf = {PERMISSION_FRAMEWORK_MONITOR_INPUT,\n            Car.PERMISSION_CAR_MONITOR_INPUT})\n    @InputCaptureResponseEnum\n    public int requestInputEventCapture(@DisplayTypeEnum int targetDisplayType,\n                                        @NonNull @InputTypeEnum int[] inputTypes,\n                                        @CaptureRequestFlags int requestFlags,\n                                        @NonNull CarInputCaptureCallback callback) {\n        Handler handler = getEventHandler();\n        return requestInputEventCapture(targetDisplayType, inputTypes, requestFlags, handler::post,\n                callback);\n    }\n\n    /**\n     * \u7c7b\u4f3c\u4e8e{@link CarInputManager#requestInputEventCapture(int, int[], int,\n     * CarInputCaptureCallback)}\uff0c\u4f46\u56de\u8c03\u4f7f\u7528\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u6267\u884c\u5668\u8c03\u7528\u3002\n     *\n     * @throws SecurityException \u5982\u679c\u8c03\u7528\u8005\u6ca1\u6709\u6388\u4e88\u4ee5\u4e0b\u6743\u9650\u4e4b\u4e00\uff1a\n     *                           {@code android.car.permission.CAR_MONITOR_INPUT}\u6216\n     *                           {@code android.Manifest.permission.MONITOR_INPUT}\n     * @param targetDisplayType \u8981\u6ce8\u518c\u56de\u8c03\u7684\u663e\u793a\u7c7b\u578b\n     * @param inputTypes \u8981\u6ce8\u518c\u56de\u8c03\u7684\u8f93\u5165\u7c7b\u578b\n     * @param requestFlags \u6355\u83b7\u8bf7\u6c42\u6807\u5fd7\n     * @param executor \u5904\u7406\u56de\u8c03\u7684{@link Executor}\n     * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\n     * @return \u8f93\u5165\u6355\u83b7\u54cd\u5e94\uff0c\u6307\u793a\u6ce8\u518c\u662f\u6210\u529f\u3001\u5931\u8d25\u8fd8\u662f\u5ef6\u8fdf\n     * @see CarInputManager#requestInputEventCapture(int, int[], int, CarInputCaptureCallback)\n     *\n     * @hide\n     */\n    @SystemApi\n    @RequiresPermission(anyOf = {PERMISSION_FRAMEWORK_MONITOR_INPUT,\n            Car.PERMISSION_CAR_MONITOR_INPUT})\n    @InputCaptureResponseEnum\n    public int requestInputEventCapture(@DisplayTypeEnum int targetDisplayType,\n                                        @NonNull @InputTypeEnum int[] inputTypes,\n                                        @CaptureRequestFlags int requestFlags,\n                                        @NonNull @CallbackExecutor Executor executor,\n                                        @NonNull CarInputCaptureCallback callback) {\n        Objects.requireNonNull(executor);\n        Objects.requireNonNull(callback);\n\n        synchronized (mLock) {\n            mCarInputCaptureCallbacks.put(targetDisplayType,\n                    new CallbackHolder(callback, executor));\n        }\n        try {\n            return mService.requestInputEventCapture(mServiceCallback, targetDisplayType,\n                    inputTypes, requestFlags);\n        } catch (RemoteException e) {\n            return handleRemoteExceptionFromCarService(e, INPUT_CAPTURE_RESPONSE_FAILED);\n        }\n    }\n}\n</code></pre> <p><code>requestInputEventCapture()</code> \u65b9\u6cd5\u7528\u4e8e\u8bf7\u6c42\u8f93\u5165\u4e8b\u4ef6\uff0c\u5e76\u901a\u8fc7 <code>CarInputCaptureCallback</code> \u63a5\u6536\u56de\u8c03\u4e8b\u4ef6\u3002\u5176\u6700\u7ec8\u901a\u8fc7 IPC \u8c03\u7528\u5230 <code>CarInputService.requestInputEventCapture()</code></p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicerequestinputeventcapture","title":"CarInputService.requestInputEventCapture()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u8f93\u5165\u6355\u83b7\u5ba2\u6237\u7aef\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u8f93\u5165\u4e8b\u4ef6\u6355\u83b7\u8bf7\u6c42\n    private final InputCaptureClientController mCaptureController;\n\n    /**\n     * \u8bf7\u6c42\u6355\u83b7\u8f93\u5165\u4e8b\u4ef6\u3002\n     *\n     * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\u63a5\u53e3\n     * @param targetDisplayType \u8981\u6355\u83b7\u8f93\u5165\u4e8b\u4ef6\u7684\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     * @param inputTypes \u8981\u6355\u83b7\u7684\u8f93\u5165\u4e8b\u4ef6\u7c7b\u578b\u6570\u7ec4\n     * @param requestFlags \u6355\u83b7\u8bf7\u6c42\u6807\u5fd7\n     * @return \u8f93\u5165\u6355\u83b7\u54cd\u5e94\uff0c\u6307\u793a\u6ce8\u518c\u662f\u6210\u529f\u3001\u5931\u8d25\u8fd8\u662f\u5ef6\u8fdf\n     */\n    @Override\n    public int requestInputEventCapture(ICarInputCallback callback,\n                                        @DisplayTypeEnum int targetDisplayType,\n                                        int[] inputTypes, int requestFlags) {\n        // \u8c03\u7528mCaptureController\u7684requestInputEventCapture\u65b9\u6cd5\u6765\u5904\u7406\u8bf7\u6c42\n        return mCaptureController.requestInputEventCapture(callback, targetDisplayType, inputTypes,\n                requestFlags);\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>mCaptureController</code> \u6307\u7684\u662f <code>InputCaptureClientController</code> \uff0c\u5b83\u662f\u5728 <code>CarInputService</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7 <code>mCaptureController = new InputCaptureClientController(context)</code> \u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrollerrequestinputeventcapture","title":"InputCaptureClientController.requestInputEventCapture()","text":"<p>\u5728\u5206\u6790 <code>requestInputEventCapture()</code> \u4e4b\u524d\uff0c\u6211\u4eec\u5148\u4e86\u89e3 <code>ClientInfoForDisplay</code> \u548c <code>ClientsToDispatch</code> \u7684\u6570\u636e\u7ed3\u6784\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u8868\u793a\u4e0e\u7279\u5b9a\u663e\u793a\u5668\u76f8\u5173\u7684\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u5b9e\u73b0\u4e86IBinder.DeathRecipient\u63a5\u53e3\u3002\n     * \u5f53\u7ed1\u5b9a\u7684\u5ba2\u6237\u7aef\u8fdb\u7a0b\u6b7b\u4ea1\u65f6\uff0c\u80fd\u591f\u63a5\u6536\u5230\u901a\u77e5\u3002\n     */\n    private final class ClientInfoForDisplay implements IBinder.DeathRecipient {\n        private final int mUid; // \u5ba2\u6237\u7aef\u7684\u7528\u6237ID\n        private final int mPid; // \u5ba2\u6237\u7aef\u7684\u8fdb\u7a0bID\n        private final ICarInputCallback mCallback; // \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\u63a5\u53e3\n        private final int mTargetDisplayType; // \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n        private final int[] mInputTypes; // \u8bf7\u6c42\u7684\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\n        private final int mFlags; // \u8bf7\u6c42\u6807\u5fd7\n        private final ArrayList&lt;Integer&gt; mGrantedTypes; // \u5df2\u6388\u4e88\u7684\u8f93\u5165\u7c7b\u578b\u5217\u8868\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u5ba2\u6237\u7aef\u4fe1\u606f\u3002\n         *\n         * @param uid \u5ba2\u6237\u7aef\u7684\u7528\u6237ID\n         * @param pid \u5ba2\u6237\u7aef\u7684\u8fdb\u7a0bID\n         * @param callback \u7528\u4e8e\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u7684\u56de\u8c03\u63a5\u53e3\n         * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n         * @param inputTypes \u8bf7\u6c42\u7684\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\n         * @param flags \u8bf7\u6c42\u6807\u5fd7\n         */\n        private ClientInfoForDisplay(int uid, int pid, @NonNull ICarInputCallback callback,\n                                     int targetDisplayType, int[] inputTypes, int flags) {\n            mUid = uid;\n            mPid = pid;\n            mCallback = callback;\n            mTargetDisplayType = targetDisplayType;\n            mInputTypes = inputTypes;\n            mFlags = flags;\n            mGrantedTypes = new ArrayList&lt;&gt;(inputTypes.length);\n        }\n\n        /**\n         * \u94fe\u63a5\u5230\u5ba2\u6237\u7aef\u7684\u6b7b\u4ea1\u901a\u77e5\u3002\n         *\n         * @throws RemoteException \u5982\u679c\u94fe\u63a5\u5931\u8d25\n         */\n        private void linkToDeath() throws RemoteException {\n            mCallback.asBinder().linkToDeath(this, 0);\n        }\n\n        /**\n         * \u89e3\u9664\u4e0e\u5ba2\u6237\u7aef\u7684\u6b7b\u4ea1\u901a\u77e5\u94fe\u63a5\u3002\n         */\n        private void unlinkToDeath() {\n            mCallback.asBinder().unlinkToDeath(this, 0);\n        }\n\n        /**\n         * \u5f53\u5ba2\u6237\u7aef\u8fdb\u7a0b\u6b7b\u4ea1\u65f6\u8c03\u7528\u3002\n         */\n        @Override\n        public void binderDied() {\n            onClientDeath(this);\n        }\n    }\n\n    /**\n     * \u7528\u4e8e\u5b58\u50a8\u9700\u8981\u5206\u53d1\u7684\u5ba2\u6237\u7aef\u4fe1\u606f\u3002\n     * \u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u591a\u6b21\u6dfb\u52a0\uff0c\u4ec5\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u6dfb\u52a0\u7684\u4fe1\u606f\u3002\n     */\n    private static final class ClientsToDispatch {\n        private final ArrayMap&lt;ICarInputCallback, int[]&gt; mClientsToDispatch = new ArrayMap&lt;&gt;();\n        private final int mDisplayType; // \u663e\u793a\u5668\u7c7b\u578b\n\n        /**\n         * \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u663e\u793a\u5668\u7c7b\u578b\u3002\n         *\n         * @param displayType \u663e\u793a\u5668\u7c7b\u578b\n         */\n        private ClientsToDispatch(int displayType) {\n            mDisplayType = displayType;\n        }\n\n        /**\n         * \u6dfb\u52a0\u5ba2\u6237\u7aef\u4fe1\u606f\u5230\u5206\u53d1\u5217\u8868\u3002\n         *\n         * @param client \u5ba2\u6237\u7aef\u4fe1\u606f\n         */\n        private void add(ClientInfoForDisplay client) {\n            int[] inputTypesToDispatch;\n            if (client.mGrantedTypes.isEmpty()) {\n                inputTypesToDispatch = EMPTY_INPUT_TYPES; // \u5982\u679c\u6ca1\u6709\u6388\u4e88\u7684\u7c7b\u578b\uff0c\u4f7f\u7528\u7a7a\u6570\u7ec4\n            } else {\n                inputTypesToDispatch = CarServiceUtils.toIntArray(client.mGrantedTypes); // \u8f6c\u6362\u4e3a\u6570\u7ec4\n            }\n            mClientsToDispatch.put(client.mCallback, inputTypesToDispatch);\n        }\n    }\n}\n</code></pre> <p><code>ClientInfoForDisplay</code> \u548c<code>ClientsToDispatch</code> \u662f <code>InputCaptureClientController</code> \u7c7b\u4e2d\u7684\u4e24\u4e2a\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u5ba2\u6237\u7aef\u4fe1\u606f\u548c\u5206\u53d1\u8f93\u5165\u4e8b\u4ef6\u3002</p> <ul> <li><code>ClientInfoForDisplay</code>\u7c7b\uff1a<ul> <li>\u7528\u4e8e\u5b58\u50a8\u4e0e\u7279\u5b9a\u663e\u793a\u5668\u76f8\u5173\u7684\u5ba2\u6237\u7aef\u4fe1\u606f\u3002</li> <li>\u5b9e\u73b0\u4e86 <code>IBinder.DeathRecipient</code> \u63a5\u53e3\uff0c\u4ee5\u4fbf\u5728\u5ba2\u6237\u7aef\u8fdb\u7a0b\u6b7b\u4ea1\u65f6\u63a5\u6536\u5230\u901a\u77e5\u3002</li> <li>\u5305\u542b\u5ba2\u6237\u7aef\u7684\u7528\u6237ID\u3001\u8fdb\u7a0bID\u3001\u56de\u8c03\u63a5\u53e3\u3001\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u3001\u8bf7\u6c42\u7684\u8f93\u5165\u7c7b\u578b\u3001\u8bf7\u6c42\u6807\u5fd7\u548c\u5df2\u6388\u4e88\u7684\u8f93\u5165\u7c7b\u578b\u5217\u8868\u3002</li> <li>\u63d0\u4f9b\u4e86\u65b9\u6cd5\u6765\u94fe\u63a5\u548c\u89e3\u9664\u4e0e\u5ba2\u6237\u7aef\u7684\u6b7b\u4ea1\u901a\u77e5\u3002</li> </ul> </li> <li><code>ClientsToDispatch</code>\u7c7b\uff1a<ul> <li>\u7528\u4e8e\u5b58\u50a8\u9700\u8981\u5206\u53d1\u7684\u5ba2\u6237\u7aef\u4fe1\u606f\u3002</li> <li>\u4f7f\u7528 <code>ArrayMap</code> \u5b58\u50a8\u5ba2\u6237\u7aef\u7684\u56de\u8c03\u63a5\u53e3\u548c\u5bf9\u5e94\u7684\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\u3002</li> <li>\u63d0\u4f9b\u4e86\u65b9\u6cd5\u6765\u6dfb\u52a0\u5ba2\u6237\u7aef\u4fe1\u606f\u5230\u5206\u53d1\u5217\u8868\u4e2d\u3002</li> </ul> </li> </ul> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {  \n\n    /**  \n     * \u53c2\u89c1  \n     * {@link CarInputManager#requestInputEventCapture(CarInputManager.CarInputCaptureCallback,  \n     * int, int[], int)}.     */    public int requestInputEventCapture(ICarInputCallback callback,  \n                                        @DisplayTypeEnum int targetDisplayType,  \n                                        int[] inputTypes, int requestFlags) {  \n        // \u786e\u4fdd\u8c03\u7528\u8005\u5177\u6709\u5fc5\u8981\u7684\u6743\u9650  \n        CarServiceUtils.assertAnyPermission(mContext,  \n                Car.PERMISSION_CAR_MONITOR_INPUT, PermissionHelper.MONITOR_INPUT);  \n\n        // \u68c0\u67e5\u663e\u793a\u5668\u7c7b\u578b\u662f\u5426\u53d7\u652f\u6301  \n        Preconditions.checkArgument(SUPPORTED_DISPLAY_TYPES.contains(targetDisplayType),  \n                \"Display not supported yet:\" + targetDisplayType);  \n\n        // \u68c0\u67e5\u662f\u5426\u8bf7\u6c42\u6355\u83b7\u6240\u6709\u4e8b\u4ef6  \n        boolean isRequestingAllEvents =  \n                (requestFlags &amp; CarInputManager.CAPTURE_REQ_FLAGS_TAKE_ALL_EVENTS_FOR_DISPLAY) != 0;  \n        if (isRequestingAllEvents) {  \n            // \u5bf9\u4e8e\u975e\u4eea\u8868\u76d8\u663e\u793a\u5668\uff0c\u786e\u4fdd\u8c03\u7528\u6765\u81ea\u7cfb\u7edf\u8fdb\u7a0b\u6216\u81ea\u8eab  \n            if (targetDisplayType != CarOccupantZoneManager.DISPLAY_TYPE_INSTRUMENT_CLUSTER) {  \n                CarServiceUtils.assertCallingFromSystemProcessOrSelf();  \n            } else {  // \u5bf9\u4e8eDISPLAY_TYPE_INSTRUMENT_CLUSTER  \n                if (!CarServiceUtils.isCallingFromSystemProcessOrSelf()) {  \n                    CarServiceUtils.checkCalledByPackage(mContext, mClusterHomePackage);  \n                }  \n            }  \n            // \u786e\u4fdd\u8f93\u5165\u7c7b\u578b\u4e3aINPUT_TYPE_ALL_INPUTS  \n            if (inputTypes.length != 1 || inputTypes[0] != CarInputManager.INPUT_TYPE_ALL_INPUTS) {  \n                throw new IllegalArgumentException(\"Input type should be INPUT_TYPE_ALL_INPUTS\"  \n                        + \" for CAPTURE_REQ_FLAGS_TAKE_ALL_EVENTS_FOR_DISPLAY\");  \n            }  \n        }  \n        // \u9a8c\u8bc1\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u662f\u5426\u4e3a\u5df2\u8bc6\u522b\u7684\u7c7b\u578b  \n        if (targetDisplayType != CarOccupantZoneManager.DISPLAY_TYPE_INSTRUMENT_CLUSTER  \n                &amp;&amp; targetDisplayType != CarOccupantZoneManager.DISPLAY_TYPE_MAIN) {  \n            throw new IllegalArgumentException(\"Unrecognized display type:\" + targetDisplayType);  \n        }  \n        // \u786e\u4fdd\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\u4e0d\u4e3a\u7a7a  \n        if (inputTypes == null) {  \n            throw new IllegalArgumentException(\"inputTypes cannot be null\");  \n        }  \n        // \u9a8c\u8bc1\u8f93\u5165\u7c7b\u578b\u7684\u6709\u6548\u6027  \n        assertInputTypeValid(inputTypes);  \n        // \u5bf9\u8f93\u5165\u7c7b\u578b\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f  \n        Arrays.sort(inputTypes);  \n        // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684IBinder\u5bf9\u8c61  \n        IBinder clientBinder = callback.asBinder();  \n        // \u68c0\u67e5\u662f\u5426\u5141\u8bb8\u5ef6\u8fdf\u6388\u4e88  \n        boolean allowsDelayedGrant =  \n                (requestFlags &amp; CarInputManager.CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT) != 0;  \n        int ret = CarInputManager.INPUT_CAPTURE_RESPONSE_SUCCEEDED;  \n        // \u5982\u679c\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u5219\u8bb0\u5f55\u8bf7\u6c42\u4fe1\u606f  \n        if (DBG_CALLS) {  \n            Slogf.i(TAG,  \n                    \"requestInputEventCapture callback:\" + callback  \n                            + \", display:\" + targetDisplayType  \n                            + \", inputTypes:\" + Arrays.toString(inputTypes)  \n                            + \", flags:\" + requestFlags);  \n        }  \n        // \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5206\u53d1\u7684\u5ba2\u6237\u7aef\u96c6\u5408  \n        ClientsToDispatch clientsToDispatch = new ClientsToDispatch(targetDisplayType);  \n        synchronized (mLock) {  \n            // \u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7684\u6240\u6709\u5ba2\u6237\u7aef\u4fe1\u606f  \n            HashMap&lt;IBinder, ClientInfoForDisplay&gt; allClientsForDisplay = mAllClients.get(  \n                    targetDisplayType);  \n            if (allClientsForDisplay == null) {  \n                allClientsForDisplay = new HashMap&lt;IBinder, ClientInfoForDisplay&gt;();  \n                mAllClients.put(targetDisplayType, allClientsForDisplay);  \n            }  \n            // \u79fb\u9664\u65e7\u7684\u5ba2\u6237\u7aef\u4fe1\u606f  \n            ClientInfoForDisplay oldClientInfo = allClientsForDisplay.remove(clientBinder);  \n\n            // \u83b7\u53d6\u5168\u6355\u83b7\u5ba2\u6237\u7aef\u7684\u5806\u6808  \n            LinkedList&lt;ClientInfoForDisplay&gt; fullCapturersStack = mFullDisplayEventCapturers.get(  \n                    targetDisplayType);  \n            if (fullCapturersStack == null) {  \n                fullCapturersStack = new LinkedList&lt;ClientInfoForDisplay&gt;();  \n                mFullDisplayEventCapturers.put(targetDisplayType, fullCapturersStack);  \n            }  \n\n            // \u5982\u679c\u5f53\u524d\u6709\u5168\u6355\u83b7\u6d3b\u52a8\u4e14\u4e0d\u5141\u8bb8\u5ef6\u8fdf\u6388\u4e88\uff0c\u5219\u8fd4\u56de\u5931\u8d25  \n            if (!isRequestingAllEvents &amp;&amp; fullCapturersStack.size() &gt; 0  \n                    &amp;&amp; fullCapturersStack.getFirst() != oldClientInfo &amp;&amp; !allowsDelayedGrant) {  \n                return CarInputManager.INPUT_CAPTURE_RESPONSE_FAILED;  \n            }  \n            // \u6ce8\u518c\u65b0\u5ba2\u6237\u7aef\uff0c\u5e76\u8fdb\u884c\u6b7b\u4ea1\u76d1\u63a7  \n            ClientInfoForDisplay newClient = new ClientInfoForDisplay(Binder.getCallingUid(),  \n                    Binder.getCallingPid(), callback, targetDisplayType,  \n                    inputTypes, requestFlags);  \n            try {  \n                newClient.linkToDeath();  \n            } catch (RemoteException e) {  \n                // \u5ba2\u6237\u7aef\u6b7b\u4ea1  \n                Slogf.i(TAG, \"requestInputEventCapture, cannot linkToDeath to client, pid:\"  \n                        + Binder.getCallingUid());  \n                return CarInputManager.INPUT_CAPTURE_RESPONSE_FAILED;  \n            }  \n\n            // \u83b7\u53d6\u6bcf\u4e2a\u8f93\u5165\u7c7b\u578b\u7684\u6355\u83b7\u8005\u5806\u6808  \n            SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt; perInputStacks =  \n                    mPerInputTypeCapturers.get(targetDisplayType);  \n            if (perInputStacks == null) {  \n                perInputStacks = new SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt;();  \n                mPerInputTypeCapturers.put(targetDisplayType, perInputStacks);  \n            }  \n\n            if (isRequestingAllEvents) {  \n                // \u5982\u679c\u8bf7\u6c42\u6355\u83b7\u6240\u6709\u4e8b\u4ef6  \n                if (!fullCapturersStack.isEmpty()) {  \n                    ClientInfoForDisplay oldCapturer = fullCapturersStack.getFirst();  \n                    if (oldCapturer != oldClientInfo) {  \n                        oldCapturer.mGrantedTypes.clear();  \n                        clientsToDispatch.add(oldCapturer);  \n                    }  \n                    fullCapturersStack.remove(oldClientInfo);  \n                } else {  \n                    // \u901a\u77e5\u6bcf\u4e2a\u8f93\u5165\u7c7b\u578b\u7684\u9876\u90e8\u5806\u6808\u5ba2\u6237\u7aef  \n                    for (int i = 0; i &lt; perInputStacks.size(); i++) {  \n                        LinkedList&lt;ClientInfoForDisplay&gt; perTypeStack = perInputStacks.valueAt(i);  \n                        if (!perTypeStack.isEmpty()) {  \n                            ClientInfoForDisplay topClient = perTypeStack.getFirst();  \n                            if (topClient != oldClientInfo) {  \n                                topClient.mGrantedTypes.clear();  \n                                clientsToDispatch.add(topClient);  \n                            }  \n                            perTypeStack.remove(oldClientInfo);  \n                        }  \n                    }  \n                }  \n                fullCapturersStack.addFirst(newClient);  \n\n            } else {  \n                // \u5904\u7406\u975e\u5168\u6355\u83b7\u8bf7\u6c42  \n                boolean hadFullCapture = false;  \n                boolean fullCaptureActive = false;  \n                if (fullCapturersStack.size() &gt; 0) {  \n                    if (fullCapturersStack.getFirst() == oldClientInfo) {  \n                        fullCapturersStack.remove(oldClientInfo);  \n                        if (fullCapturersStack.size() &gt; 0) {  \n                            fullCaptureActive = true;  \n                            ret = CarInputManager.INPUT_CAPTURE_RESPONSE_DELAYED;  \n                            ClientInfoForDisplay topClient = fullCapturersStack.getFirst();  \n                            topClient.mGrantedTypes.clear();  \n                            topClient.mGrantedTypes.add(CarInputManager.INPUT_TYPE_ALL_INPUTS);  \n                            clientsToDispatch.add(topClient);  \n                        } else {  \n                            hadFullCapture = true;  \n                        }  \n                    } else {  \n                        fullCaptureActive = true;  \n                        ret = CarInputManager.INPUT_CAPTURE_RESPONSE_DELAYED;  \n                    }  \n                }  \n                for (int i = 0; i &lt; perInputStacks.size(); i++) {  \n                    LinkedList&lt;ClientInfoForDisplay&gt; perInputStack = perInputStacks.valueAt(i);  \n                    perInputStack.remove(oldClientInfo);  \n                }  \n                // \u904d\u5386\u6bcf\u4e2a\u8f93\u5165\u7c7b\u578b\u7684\u5806\u6808  \n                for (int inputType : inputTypes) {  \n                    LinkedList&lt;ClientInfoForDisplay&gt; perInputStack = perInputStacks.get(  \n                            inputType);  \n                    if (perInputStack == null) {  \n                        perInputStack = new LinkedList&lt;ClientInfoForDisplay&gt;();  \n                        perInputStacks.put(inputType, perInputStack);  \n                    }  \n                    if (perInputStack.size() &gt; 0) {  \n                        ClientInfoForDisplay oldTopClient = perInputStack.getFirst();  \n                        if (oldTopClient.mGrantedTypes.remove(Integer.valueOf(inputType))) {  \n                            clientsToDispatch.add(oldTopClient);  \n                        }  \n                    }  \n                    if (!fullCaptureActive) {  \n                        newClient.mGrantedTypes.add(inputType);  \n                    }  \n                    perInputStack.addFirst(newClient);  \n                }  \n                if (!fullCaptureActive &amp;&amp; hadFullCapture) {  \n                    for (int i = 0; i &lt; perInputStacks.size(); i++) {  \n                        int inputType = perInputStacks.keyAt(i);  \n                        LinkedList&lt;ClientInfoForDisplay&gt; perInputStack = perInputStacks.valueAt(  \n                                i);  \n                        if (perInputStack.size() &gt; 0) {  \n                            ClientInfoForDisplay topStackClient = perInputStack.getFirst();  \n                            if (topStackClient == newClient) {  \n                                continue;  \n                            }  \n                            if (!topStackClient.mGrantedTypes.contains(inputType)) {  \n                                topStackClient.mGrantedTypes.add(inputType);  \n                                clientsToDispatch.add(topStackClient);  \n                            }  \n                        }  \n                    }  \n                }  \n            }  \n            // \u5c06\u65b0\u5ba2\u6237\u7aef\u4fe1\u606f\u5b58\u50a8\u5230\u6240\u6709\u5ba2\u6237\u7aef\u4fe1\u606f\u4e2d  \n            allClientsForDisplay.put(clientBinder, newClient);  \n            // \u5206\u53d1\u5ba2\u6237\u7aef\u56de\u8c03  \n            dispatchClientCallbackLocked(clientsToDispatch);  \n        }  \n        return ret;  \n    }  \n\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u975e\u5e38\u957f\uff0c\u524d\u9762\u4e3b\u8981\u662f\u68c0\u67e5\u4e00\u4e9b\u6743\u9650\uff0c\u540e\u9762\u662f\u628a\u5ba2\u6237\u7aef\u4fe1\u606f\u5b58\u50a8\u8d77\u6765\u3002 \u6211\u4eec\u73b0\u5728\u6765\u5206\u6790 <code>mPerInputTypeCapturers</code> \u548c <code>mFullDisplayEventCapturers</code> \u3002</p> <pre><code>public class InputCaptureClientController {\n\n    /**\n     * \u7528\u4e8e\u5b58\u50a8\u5168\u663e\u793a\u5668\u4e8b\u4ef6\u6355\u83b7\u8005\u7684\u7ed3\u6784\u3002\n     * \u952e\uff1a\u663e\u793a\u5668\u7c7b\u578b\uff0c\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u5ba2\u6237\u7aef\u3002\n     * LinkedList\u7528\u4e8e\u5b9e\u73b0\u5806\u6808\u7ed3\u6784\u3002\u7b2c\u4e00\u4e2a\u6761\u76ee\u662f\u5806\u6808\u7684\u9876\u90e8\u3002\n     */\n    @GuardedBy(\"mLock\")\n    private final SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt; mFullDisplayEventCapturers =\n            new SparseArray&lt;&gt;(2);\n\n    // \u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u5168\u6355\u83b7\u8005\u5806\u6808\n    LinkedList&lt;ClientInfoForDisplay&gt; fullCapturersStack = mFullDisplayEventCapturers.get(\n            targetDisplayType);\n    if (fullCapturersStack == null) {\n        // \u5982\u679c\u5806\u6808\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684LinkedList\u5e76\u653e\u5165SparseArray\u4e2d\n        fullCapturersStack = new LinkedList&lt;ClientInfoForDisplay&gt;();\n        mFullDisplayEventCapturers.put(targetDisplayType, fullCapturersStack);\n    }\n}\n</code></pre> <p><code>mFullDisplayEventCapturers</code> \u662f\u4e00\u4e2a <code>SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt;</code>\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u663e\u793a\u5668\u7c7b\u578b\u7684\u5168\u4e8b\u4ef6\u6355\u83b7\u8005\u3002</p> <pre><code>public class InputCaptureClientController {\n\n    /**\n     * \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u8f93\u5165\u7c7b\u578b\u7684\u6355\u83b7\u8005\u7684\u7ed3\u6784\u3002\n     * \u952e\uff1a\u663e\u793a\u5668\u7c7b\u578b -&gt; \u8f93\u5165\u7c7b\u578b\uff0c\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u5ba2\u6237\u7aef\u3002\n     * LinkedList\u7528\u4e8e\u5b9e\u73b0\u5806\u6808\u7ed3\u6784\u3002\u7b2c\u4e00\u4e2a\u6761\u76ee\u662f\u5806\u6808\u7684\u9876\u90e8\u3002\n     */\n    @GuardedBy(\"mLock\")\n    private final SparseArray&lt;SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt;&gt;\n            mPerInputTypeCapturers = new SparseArray&lt;&gt;(2);\n    }\n\n    // \u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u8f93\u5165\u7c7b\u578b\u6355\u83b7\u8005\u5806\u6808\n    SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt; perInputStacks =\n            mPerInputTypeCapturers.get(targetDisplayType);\n    if (perInputStacks == null) {\n        // \u5982\u679c\u5806\u6808\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684SparseArray\u5e76\u653e\u5165mPerInputTypeCapturers\u4e2d\n        perInputStacks = new SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt;();\n        mPerInputTypeCapturers.put(targetDisplayType, perInputStacks);\n    }\n}\n</code></pre> <p><code>mPerInputTypeCapturers</code> \u662f\u4e00\u4e2a\u5d4c\u5957\u7684 <code>SparseArray</code> \u7ed3\u6784\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u663e\u793a\u5668\u7c7b\u578b\u4e0b\u7684\u6bcf\u4e2a\u8f93\u5165\u7c7b\u578b\u7684\u6355\u83b7\u8005\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrollergetclientforinputtypelocked","title":"InputCaptureClientController.getClientForInputTypeLocked()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5728\u9501\u5b9a\u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u7279\u5b9a\u663e\u793a\u5668\u7c7b\u578b\u548c\u8f93\u5165\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     * @param inputType \u8f93\u5165\u7c7b\u578b\n     * @return \u5bf9\u5e94\u7684ICarInputCallback\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5219\u8fd4\u56denull\n     */\n    @GuardedBy(\"mLock\")\n    ICarInputCallback getClientForInputTypeLocked(int targetDisplayType, int inputType) {\n        // \u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u5168\u6355\u83b7\u8005\u5806\u6808\n        LinkedList&lt;ClientInfoForDisplay&gt; fullCapturersStack = mFullDisplayEventCapturers.get(\n                targetDisplayType);\n        // \u5982\u679c\u5168\u6355\u83b7\u8005\u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8fd4\u56de\u5806\u6808\u9876\u90e8\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n        if (fullCapturersStack != null &amp;&amp; fullCapturersStack.size() &gt; 0) {\n            return fullCapturersStack.getFirst().mCallback;\n        }\n\n        // \u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u8f93\u5165\u7c7b\u578b\u6355\u83b7\u8005\u5806\u6808\n        SparseArray&lt;LinkedList&lt;ClientInfoForDisplay&gt;&gt; perInputStacks =\n                mPerInputTypeCapturers.get(targetDisplayType);\n        // \u5982\u679c\u8f93\u5165\u7c7b\u578b\u5806\u6808\u4e0d\u5b58\u5728\uff0c\u8fd4\u56denull\n        if (perInputStacks == null) {\n            return null;\n        }\n\n        // \u83b7\u53d6\u7279\u5b9a\u8f93\u5165\u7c7b\u578b\u7684\u6355\u83b7\u8005\u5806\u6808\n        LinkedList&lt;ClientInfoForDisplay&gt; perInputStack = perInputStacks.get(inputType);\n        // \u5982\u679c\u6355\u83b7\u8005\u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8fd4\u56de\u5806\u6808\u9876\u90e8\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n        if (perInputStack != null &amp;&amp; perInputStack.size() &gt; 0) {\n            return perInputStack.getFirst().mCallback;\n        }\n\n        // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u5ba2\u6237\u7aef\u56de\u8c03\uff0c\u8fd4\u56denull\n        return null;\n    }\n\n}\n</code></pre> <p>\u83b7\u53d6\u7279\u5b9a\u663e\u793a\u5668\u7c7b\u578b\u548c\u8f93\u5165\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002</p> <ul> <li>\u9996\u5148\u4ece <code>mFullDisplayEventCapturers</code> \u4e2d\u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u5168\u4e8b\u4ef6\u6355\u83b7\u8005\u5806\u6808\u3002</li> <li>\u5982\u679c\u5168\u4e8b\u4ef6\u6355\u83b7\u8005\u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8fd4\u56de\u5806\u6808\u9876\u90e8\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002</li> <li>\u5982\u679c\u5168\u4e8b\u4ef6\u6355\u83b7\u8005\u5806\u6808\u4e3a\u7a7a\uff0c\u4ece <code>mPerInputTypeCapturers</code> \u4e2d\u83b7\u53d6\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u7684\u8f93\u5165\u7c7b\u578b\u6355\u83b7\u8005\u5806\u6808\u3002</li> <li>\u5982\u679c\u8f93\u5165\u7c7b\u578b\u6355\u83b7\u8005\u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8fd4\u56de\u5806\u6808\u9876\u90e8\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002</li> <li>\u5982\u679c\u90fd\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u5ba2\u6237\u7aef\u56de\u8c03\uff0c\u8fd4\u56de<code>null</code>\u3002 </li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_3","title":"\u5904\u7406\u4e8b\u4ef6","text":"<p><code>InputHalService.onHalEvents()</code> \u65b9\u6cd5\u4f1a\u904d\u5386\u8f93\u5165\u4e8b\u4ef6\u5217\u8868\uff0c\u5e76\u6839\u636e\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u5c5e\u6027ID\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u81f3\u5bf9\u5e94\u7684\u5904\u7406\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4ece <code>CarInputService</code> \u5165\u624b\uff0c\u9010\u4e00\u5206\u6790\u5176\u5728\u63a5\u6536\u5230\u4e8b\u4ef6\u540e\u7684\u5904\u7406\u6d41\u7a0b\u3002</p> <p>\u5728\u8fd9\u4e4b\u524d\u6211\u4eec\u5148\u770b\u4e0b\u4e8b\u4ef6\u662f\u5982\u4f55\u6ce8\u518c\u7684\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_4","title":"\u9884\u5907\u77e5\u8bc6","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceregisterkeyeventlistener","title":"CarInputService.registerKeyEventListener()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u7528\u4e8e\u540c\u6b65\u7684\u9501\u5bf9\u8c61\n    private final Object mLock = new Object();\n\n    // \u5b58\u50a8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u6570\u7ec4\uff0c\u4f7f\u7528\u6309\u952e\u4ee3\u7801\u4f5c\u4e3a\u952e\n    @GuardedBy(\"mLock\")\n    private final SparseArray&lt;KeyEventListener&gt; mListeners = new SparseArray&lt;&gt;();\n\n    /**\n     * \u6ce8\u518c\u4e00\u4e2a\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u5176\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param listener           \u8981\u6ce8\u518c\u7684\u76d1\u542c\u5668\n     * @param keyCodesOfInterest \u76d1\u542c\u5668\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u4ee3\u7801\u5217\u8868\n     * @throws IllegalArgumentException \u5f53\u67d0\u4e2a\u4e8b\u4ef6\u5df2\u7ecf\u6ce8\u518c\u5230\u53e6\u4e00\u4e2a\u76d1\u542c\u5668\u65f6\u629b\u51fa\n     */\n    public void registerKeyEventListener(KeyEventListener listener,\n                                         List&lt;Integer&gt; keyCodesOfInterest) {\n        // \u68c0\u67e5\u76d1\u542c\u5668\u662f\u5426\u4e3a\u7a7a\n        requireNonNull(listener, \"\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u4e0d\u80fd\u4e3a\u7a7a\");\n        // \u68c0\u67e5\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n        requireNonNull(keyCodesOfInterest, \"\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\");\n        // \u68c0\u67e5\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n        checkArgument(!keyCodesOfInterest.isEmpty(), \"\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        synchronized (mLock) {\n            // \u68c0\u67e5\u662f\u5426\u6709\u65e0\u6548\u7684\u6309\u952e\u4ee3\u7801\n            for (int i = 0; i &lt; keyCodesOfInterest.size(); i++) {\n                int keyCode = keyCodesOfInterest.get(i);\n                if (mListeners.contains(keyCode)\n                        &amp;&amp; mListeners.get(keyCode) != mDefaultSpecialKeyHandler) {\n                    throw new IllegalArgumentException(\"\u4e8b\u4ef6 \"\n                            + KeyEvent.keyCodeToString(keyCode)\n                            + \" \u5df2\u7ecf\u6ce8\u518c\u5230\u53e6\u4e00\u4e2a\u76d1\u542c\u5668\");\n                }\n            }\n            // \u5c06\u76d1\u542c\u5668\u6ce8\u518c\u5230\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u4ee3\u7801\u4e2d\n            for (int i = 0; i &lt; keyCodesOfInterest.size(); i++) {\n                mListeners.put(keyCodesOfInterest.get(i), listener);\n            }\n        }\n    }\n}\n</code></pre> <p>\u6ce8\u518c\u4e00\u4e2a\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u5176\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u3002\u5982\u679c\u67d0\u4e2a\u6309\u952e\u4ee3\u7801\u5df2\u7ecf\u6ce8\u518c\u5230\u5176\u4ed6\u76d1\u542c\u5668\uff0c\u629b\u51fa\u5f02\u5e38\u3002</p> <p>KeyEventListener\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u63a5\u53e3\u7528\u4e8e\u63a5\u6536{@link KeyEvent}\u4e8b\u4ef6\u3002\n     */\n    public interface KeyEventListener {\n\n        /**\n         * \u5f53\u6309\u952e\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u3002\n         * \n         * @deprecated \u8be5\u65b9\u6cd5\u4e0d\u518d\u9700\u8981\uff0c\u8bf7\u4f7f\u7528\u5e26\u6709\u5ea7\u4f4d\u4fe1\u606f\u7684onKeyEvent\u65b9\u6cd5\u3002\n         */\n        // TODO(b/247170915): \u8be5\u65b9\u6cd5\u4e0d\u518d\u9700\u8981\uff0c\u8bf7\u79fb\u9664\u5e76\u4f7f\u7528\n        // onKeyEvent(KeyEvent event, int displayType, int seat)\n        default void onKeyEvent(KeyEvent event) {\n            // \u9ed8\u8ba4\u5b9e\u73b0\u4e3a\u7a7a\u64cd\u4f5c\n        }\n\n        /**\n         * \u5f53\u6309\u952e\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\uff0c\u5e76\u5305\u542b\u5ea7\u4f4d\u4fe1\u606f\u3002\n         *\n         * @param event       \u53d1\u751f\u7684\u6309\u952e\u4e8b\u4ef6\n         * @param displayType \u4e8b\u4ef6\u5173\u8054\u7684\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\uff0c\u5e94\u4e3a\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n         *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN},\n         *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_INSTRUMENT_CLUSTER},\n         *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_HUD},\n         *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_INPUT},\n         *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_AUXILIARY}\n         * @param seat        \u4e8b\u4ef6\u53d1\u751f\u7684\u533a\u57dfID\n         */\n        default void onKeyEvent(KeyEvent event, @DisplayTypeEnum int displayType,\n                                @VehicleAreaSeat.Enum int seat) {\n            // \u9ed8\u8ba4\u5b9e\u73b0\u4e3a\u7a7a\u64cd\u4f5c\n        }\n    }\n\n}\n</code></pre>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicesetinstrumentclusterkeylistener","title":"CarInputService.setInstrumentClusterKeyListener()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u7528\u4e8e\u540c\u6b65\u7684\u9501\u5bf9\u8c61\n    private final Object mLock = new Object();\n\n    // \u5b58\u50a8\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n    @GuardedBy(\"mLock\")\n    private KeyEventListener mInstrumentClusterKeyListener;\n\n    /**\n     * \u8bbe\u7f6e\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\n     *\n     * @param listener \u8981\u8bbe\u7f6e\u7684\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n     */\n    public void setInstrumentClusterKeyListener(KeyEventListener listener) {\n        // \u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u5bf9\u76d1\u542c\u5668\u7684\u8bbf\u95ee\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n        synchronized (mLock) {\n            mInstrumentClusterKeyListener = listener;\n        }\n    }\n}\n</code></pre> <p>\u5168\u5c40\u641c\u7d22\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\u662f\u5728 <code>InstrumentClusterService.init()</code> \u4e2d\u8bbe\u7f6e\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\u8fd9\u6709\u673a\u4f1a\u518d\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicesetprojectionkeyeventhandler","title":"CarInputService.setProjectionKeyEventHandler()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u7528\u4e8e\u540c\u6b65\u7684\u9501\u5bf9\u8c61\n    private final Object mLock = new Object();\n\n    // \u5b58\u50a8CarProjectionService\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\n    @GuardedBy(\"mLock\")\n    private CarProjectionManager.ProjectionKeyEventHandler mProjectionKeyEventHandler;\n\n    /**\n     * \u8bbe\u7f6eCarProjectionService\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\u5982\u679c\u4f20\u5165null\uff0c\u5219\u53d6\u6d88\u6ce8\u518c\u76d1\u542c\u5668\u3002\n     *\n     * @param listener \u8981\u8bbe\u7f6e\u7684CarProjectionService\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n     * @param events   \u8981\u8ba2\u9605\u7684\u6309\u952e\u4e8b\u4ef6\u96c6\u5408\n     */\n    public void setProjectionKeyEventHandler(\n            @Nullable CarProjectionManager.ProjectionKeyEventHandler listener,\n            @Nullable BitSet events) {\n        // \u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u5bf9\u76d1\u542c\u5668\u548c\u4e8b\u4ef6\u96c6\u5408\u7684\u8bbf\u95ee\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n        synchronized (mLock) {\n            // \u8bbe\u7f6eCarProjectionService\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\n            mProjectionKeyEventHandler = listener;\n            // \u6e05\u9664\u5f53\u524d\u8ba2\u9605\u7684\u6309\u952e\u4e8b\u4ef6\u96c6\u5408\n            mProjectionKeyEventsSubscribed.clear();\n            // \u5982\u679c\u4f20\u5165\u7684\u4e8b\u4ef6\u96c6\u5408\u4e0d\u4e3a\u7a7a\uff0c\u5219\u66f4\u65b0\u8ba2\u9605\u7684\u4e8b\u4ef6\u96c6\u5408\n            if (events != null) {\n                mProjectionKeyEventsSubscribed.or(events);\n            }\n        }\n    }\n}\n</code></pre> <p>\u5168\u5c40\u641c\u7d22\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\u662f\u5728 <code>CarProjectionService.registerKeyEventHandler()</code> \u4e2d\u8bbe\u7f6e\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\u8fd9\u6709\u673a\u4f1a\u518d\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_5","title":"\u6309\u952e\u4e8b\u4ef6","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceonkeyevent","title":"CarInputService.onKeyEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u6309\u952e\u4e8b\u4ef6\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u9a7e\u9a76\u5458\u5ea7\u4f4d\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     */\n    @Override\n    public void onKeyEvent(KeyEvent event, @DisplayTypeEnum int targetDisplayType) {\n        // \u8c03\u7528\u5e26\u6709\u5ea7\u4f4d\u4fe1\u606f\u7684onKeyEvent\u65b9\u6cd5\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u9a7e\u9a76\u5458\u5ea7\u4f4d\n        onKeyEvent(event, targetDisplayType, mDriverSeat);\n    }\n\n    /**\n     * \u5904\u7406\u6309\u952e\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     * @param seat \u4e8b\u4ef6\u53d1\u751f\u7684\u5ea7\u4f4d\u533a\u57dfID\n     * @throws IllegalArgumentException \u5982\u679c\u4f20\u5165\u7684\u5ea7\u4f4d\u662f\u672a\u77e5\u5ea7\u4f4d\u4e14\u9a7e\u9a76\u5458\u5ea7\u4f4d\u4e0d\u662f\u672a\u77e5\u5ea7\u4f4d\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n     */\n    @Override\n    public void onKeyEvent(KeyEvent event, @DisplayTypeEnum int targetDisplayType,\n                           @VehicleAreaSeat.Enum int seat) {\n        // \u68c0\u67e5\u5ea7\u4f4d\u4fe1\u606f\u7684\u6709\u6548\u6027\n        if (mHasDriver &amp;&amp; seat == VehicleAreaSeat.SEAT_UNKNOWN) {\n            // \u4e3a\u4e86\u652f\u6301onKeyEvent(KeyEvent, int)\uff0c\u9700\u8981\u68c0\u67e5\u9a7e\u9a76\u5458\u662f\u5426\u5b58\u5728\u3002\n            // \u4f8b\u5982\uff0c\u5bf9\u4e8e\u4ec5\u6709\u4e58\u5ba2\u7684\u7cfb\u7edf\uff0c\u9a7e\u9a76\u5458\u5ea7\u4f4d\u53ef\u80fd\u662fSEAT_UNKNOWN\u3002\n            // \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u629b\u51fa\u5f02\u5e38\u3002\n            throw new IllegalArgumentException(\"\u672a\u77e5\u5ea7\u4f4d\");\n        }\n\n        // \u66f4\u65b0\u7528\u6237\u6d3b\u52a8\u4fe1\u606f\u5230\u6c7d\u8f66\u7535\u6e90\u7ba1\u7406\u670d\u52a1\n        notifyUserActivity(event, targetDisplayType, seat);\n\n        // \u9a7e\u9a76\u5458\u7684\u6309\u952e\u4e8b\u4ef6\u4e0e\u786c\u4ef6\u6309\u952e\u8f93\u5165\u76f8\u540c\u5904\u7406\n        if (seat == mDriverSeat) {\n            // \u5206\u53d1\u9a7e\u9a76\u5458\u7684\u6309\u952e\u4e8b\u4ef6\n            dispatchKeyEventForDriver(event, targetDisplayType);\n            return;\n        }\n\n        // \u901a\u77e5\u76d1\u542c\u5668\u6309\u952e\u4e8b\u4ef6\n        notifyKeyEventListener(event, targetDisplayType, seat);\n    }\n}\n</code></pre> <p><code>InputHalService.dispatchKeyInput()</code>\u4e8b\u4ef6\u88ab\u5206\u53d1\u5230<code>onKeyEvent(KeyEvent event, @DisplayTypeEnum int targetDisplayType)</code>\u65b9\u6cd5\uff0c\u800c<code>InputHalService.dispatchKeyInputV2()</code>\u4e8b\u4ef6\u5219\u88ab\u5206\u53d1\u5230<code>onKeyEvent(KeyEvent event, @DisplayTypeEnum int targetDisplayType, @VehicleAreaSeat.Enum int seat)</code>\u65b9\u6cd5\u3002</p> <ul> <li>\u5728\u6709\u9a7e\u9a76\u5458\u7684\u7cfb\u7edf\u4e2d\uff0c\u786e\u4fdd\u5ea7\u4f4d\u4fe1\u606f\u7684\u6709\u6548\u6027\u3002</li> <li>\u5c06\u7528\u6237\u6d3b\u52a8\u4fe1\u606f\u540c\u6b65\u5230 <code>CarPowerManagementService</code> \u670d\u52a1\u3002</li> <li>\u5982\u679c\u4e8b\u4ef6\u53d1\u751f\u5728\u9a7e\u9a76\u5458\u5ea7\u4f4d\uff0c\u8c03\u7528 <code>dispatchKeyEventForDriver</code> \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u5426\u5219\uff0c\u8c03\u7528 <code>notifyKeyEventListener</code> \u65b9\u6cd5\u901a\u77e5\u76d1\u542c\u5668\u5904\u7406\u6309\u952e\u4e8b\u4ef6\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicedispatchkeyeventfordriver","title":"CarInputService.dispatchKeyEventForDriver()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u4e3a\u9a7e\u9a76\u5458\u5904\u7406\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     */\n    private void dispatchKeyEventForDriver(KeyEvent event, @DisplayTypeEnum int targetDisplayType) {\n        // \u9488\u5bf9\u6c7d\u8f66\u7684\u7279\u6b8a\u201c\u957f\u6309\u201d\u5904\u7406\u7684\u7279\u6b8a\u6309\u952e\u4ee3\u7801\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_VOICE_ASSIST:\n                // TODO: b/288107028 - \u5f53\u4e58\u5ba2\u663e\u793a\u5668\u652f\u6301\u8bed\u97f3\u8f85\u52a9\u952e\u65f6\uff0c\u5c06\u76ee\u6807\u663e\u793a\u7c7b\u578b\u4f20\u9012\u7ed9handleVoiceAssistKey()\n                handleVoiceAssistKey(event, targetDisplayType);\n                return;\n            case KeyEvent.KEYCODE_CALL:\n                handleCallKey(event);\n                return;\n            default:\n                break;\n        }\n\n        // \u4e3a\u4e8b\u4ef6\u5206\u914d\u663e\u793a\u5668ID\n        assignDisplayId(event, targetDisplayType);\n\n        // \u5141\u8bb8\u7279\u5b9a\u76ee\u6807\u7684\u6309\u952e\u88ab\u8def\u7531\u5230\u4eea\u8868\u76d8\n        if (targetDisplayType == CarOccupantZoneManager.DISPLAY_TYPE_INSTRUMENT_CLUSTER\n                &amp;&amp; handleInstrumentClusterKey(event)) {\n            return;\n        }\n\n        // \u5982\u679cCaptureController\u5904\u7406\u4e86\u4e8b\u4ef6\uff0c\u5219\u8fd4\u56de\n        if (mCaptureController.onKeyEvent(targetDisplayType, event)) {\n            return;\n        }\n\n        // \u4f7f\u7528\u9ed8\u8ba4\u952e\u5904\u7406\u5668\u5904\u7406\u4e8b\u4ef6\n        mDefaultKeyHandler.onKeyEvent(event, targetDisplayType, mDriverSeat);\n    }\n\n}\n</code></pre> <p>\u9a7e\u9a76\u5458\u5904\u7406\u6309\u952e\u4e8b\u4ef6\u3002</p> <ul> <li>\u8bed\u97f3\u6309\u952e\uff0c\u8c03\u7528<code>handleVoiceAssistKey</code>\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u901a\u8bdd\u6309\u952e\uff0c\u8c03\u7528<code>handleCallKey</code>\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u5982\u679c\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u662f\u4eea\u8868\u76d8\uff0c\u5e76\u4e14 <code>handleInstrumentClusterKey()</code> \u65b9\u6cd5\u5904\u7406\u4e86\u4e8b\u4ef6\uff0c\u5219\u8fd4\u56de\u3002</li> <li>\u5982\u679cInputCaptureClientController\u5904\u7406\u4e86\u4e8b\u4ef6\uff0c\u5219\u8fd4\u56de\u3002</li> <li>\u5982\u679c\u4e0a\u8ff0\u5904\u7406\u5747\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u4f7f\u7528<code>mDefaultKeyHandler</code> \u8fdb\u884c\u9ed8\u8ba4\u5904\u7406\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicehandlevoiceassistkey","title":"CarInputService.handleVoiceAssistKey()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u8bed\u97f3\u8f85\u52a9\u952e\u7684\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     */\n    private void handleVoiceAssistKey(KeyEvent event, @DisplayTypeEnum int targetDisplayType) {\n        int action = event.getAction(); // \u83b7\u53d6\u6309\u952e\u52a8\u4f5c\n\n        // \u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u6309\u4e0b\uff0c\u5e76\u4e14\u91cd\u590d\u8ba1\u6570\u4e3a0\uff08\u5373\u9996\u6b21\u6309\u4e0b\uff09\n        if (action == KeyEvent.ACTION_DOWN &amp;&amp; event.getRepeatCount() == 0) {\n            mVoiceKeyTimer.keyDown(); // \u8bb0\u5f55\u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\n            dispatchProjectionKeyEvent(CarProjectionManager.KEY_EVENT_VOICE_SEARCH_KEY_DOWN); // \u5206\u53d1\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\n        } else if (action == KeyEvent.ACTION_UP) { // \u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u62ac\u8d77\n            if (mVoiceKeyTimer.keyUp()) {\n                // \u957f\u6309\u5df2\u7ecf\u7531handleVoiceAssistLongPress()\u5904\u7406\uff0c\u65e0\u9700\u518d\u505a\u5904\u7406\u3002\n                // \u5982\u679cCarProjectionService\u611f\u5174\u8da3\uff0c\u5219\u5c06\u4e8b\u4ef6\u4ea4\u7ed9CarProjectionService\u5904\u7406\uff0c\u5426\u5219\u5904\u7406\u7ed3\u675f\u3002\n                dispatchProjectionKeyEvent(\n                        CarProjectionManager.KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_UP);\n                return;\n            }\n\n            // \u5982\u679c\u77ed\u6309\u4e8b\u4ef6\u88ab\u6295\u5f71\u5904\u7406\uff0c\u5219\u8fd4\u56de\n            if (dispatchProjectionKeyEvent(\n                    CarProjectionManager.KEY_EVENT_VOICE_SEARCH_SHORT_PRESS_KEY_UP)) {\n                return;\n            }\n\n            // TODO: b/288107028 - \u5f53\u4e58\u5ba2\u663e\u793a\u5668\u652f\u6301\u8bed\u97f3\u8f85\u52a9\u952e\u65f6\uff0c\u5c06\u5b9e\u9645\u76ee\u6807\u663e\u793a\u7c7b\u578b\u4f20\u9012\u7ed9onKeyEvent\n            if (mCaptureController.onKeyEvent(targetDisplayType, event)) {\n                return;\n            }\n\n            // \u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u5904\u7406\u7a0b\u5e8f\n            launchDefaultVoiceAssistantHandler();\n        }\n    }\n\n}\n</code></pre> <p>\u8bed\u97f3\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u6d41\u7a0b\uff1a</p> <ul> <li>\u6309\u952e\u6309\u4e0b\uff1a<ul> <li>\u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u6309\u4e0b\uff0c\u5e76\u4e14\u91cd\u590d\u8ba1\u6570\u4e3a0\uff08\u5373\u9996\u6b21\u6309\u4e0b\uff09\uff0c\u8bb0\u5f55\u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\uff0c\u5e76\u5206\u53d1\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\u3002</li> </ul> </li> <li>\u6309\u952e\u62ac\u8d77\uff1a<ul> <li>\u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u62ac\u8d77\uff0c\u9996\u5148\u68c0\u67e5\u662f\u5426\u4e3a\u957f\u6309\u4e8b\u4ef6\u3002</li> <li>\u5982\u679c\u662f\u957f\u6309\u4e8b\u4ef6\uff0c\u5206\u53d1\u957f\u6309\u62ac\u8d77\u4e8b\u4ef6\u7ed9 CarProjectionService \u5904\u7406\u3002</li> <li>\u5982\u679c\u662f\u77ed\u6309\u4e8b\u4ef6\uff0c\u68c0\u67e5\u662f\u5426\u88ab CarProjectionService \u5904\u7406\uff0c\u5982\u679c\u662f\u5219\u8fd4\u56de\u3002</li> <li>\u5982\u679c\u4e0a\u8ff0\u5904\u7406\u5747\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u8c03\u7528 <code>mCaptureController</code> \u5904\u7406\u4e8b\u4ef6\u3002</li> <li>\u5982\u679c\u4ecd\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u5904\u7406\u7a0b\u5e8f\u3002</li> </ul> </li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicedispatchprojectionkeyevent","title":"CarInputService.dispatchProjectionKeyEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5206\u53d1\u6295\u5f71\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u8981\u5206\u53d1\u7684\u6309\u952e\u4e8b\u4ef6\u7f16\u53f7\n     * @return \u5982\u679c\u4e8b\u4ef6\u6210\u529f\u5206\u53d1\u7ed9\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\n     */\n    private boolean dispatchProjectionKeyEvent(@CarProjectionManager.KeyEventNum int event) {\n        CarProjectionManager.ProjectionKeyEventHandler projectionKeyEventHandler;\n\n        // \u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u5bf9\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u8bbf\u95ee\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n        synchronized (mLock) {\n            // \u83b7\u53d6\u5f53\u524d\u7684\u6295\u5f71\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\n            projectionKeyEventHandler = mProjectionKeyEventHandler;\n            // \u5982\u679c\u6ca1\u6709\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u6216\u8005\u4e8b\u4ef6\u5904\u7406\u5668\u4e0d\u8ba2\u9605\u8be5\u4e8b\u4ef6\uff0c\u5219\u8fd4\u56defalse\n            if (projectionKeyEventHandler == null || !mProjectionKeyEventsSubscribed.get(event)) {\n                // \u6ca1\u6709\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u6216\u8005\u4e8b\u4ef6\u5904\u7406\u5668\u4e0d\u9700\u8981\u8be5\u4e8b\u4ef6\u2014\u2014\u5904\u7406\u7ed3\u675f\u3002\n                return false;\n            }\n        }\n\n        // \u8c03\u7528\u4e8b\u4ef6\u5904\u7406\u5668\u7684onKeyEvent\u65b9\u6cd5\u5904\u7406\u4e8b\u4ef6\n        projectionKeyEventHandler.onKeyEvent(event);\n        return true;\n    }\n}\n</code></pre> <p>\u6211\u4eec\u5728 CarInputService.setProjectionKeyEventHandler() \u63d0\u5230 <code>CarProjectionService.registerKeyEventHandler()</code> \u4e2d\u8bbe\u7f6e\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\u6240\u4ee5\u4e8b\u4ef6\u90fd\u4ea4\u7531 CarProjectionService \u6765\u51fa\u6765\u3002 \u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u540e\u7eed\u8bb2\u5230 CarProjectionService \u518d\u8be6\u7ec6\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrolleronkeyevent","title":"InputCaptureClientController.onKeyEvent()","text":"<p>\u6211\u4eec\u56de\u5230 CarInputService.handleVoiceAssistKey() \u65b9\u6cd5\uff0c\u8ba8\u8bba<code>mCaptureController.onKeyEvent()</code>\u5904\u7406\u7684\u60c5\u5f62\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub  \n        implements CarServiceBase, InputHalService.InputListener {  \n\n    private final InputCaptureClientController mCaptureController;  \n\n    private void handleVoiceAssistKey(KeyEvent event, @DisplayTypeEnum int targetDisplayType) {  \n        int action = event.getAction();  \n        if (action == KeyEvent.ACTION_DOWN &amp;&amp; event.getRepeatCount() == 0) {  \n            ...  \n        } else if (action == KeyEvent.ACTION_UP) {  \n            ...  \n\n            // TODO: b/288107028 - Pass the actual target display type to onKeyEvent  \n            // when passenger displays support voice assist keys            if (mCaptureController.onKeyEvent(targetDisplayType, event)) {  \n                return;  \n            }  \n\n            ...  \n        }  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>mCaptureController</code> \u6307\u7684\u662f <code>InputCaptureClientController</code> \uff0c\u5b83\u662f\u5728 <code>CarInputService</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7 <code>mCaptureController = new InputCaptureClientController(context)</code> \u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\n/**\n * \u7ba1\u7406\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8f93\u5165\u6355\u83b7\u8bf7\u6c42\n */\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u7ed9\u5b9a\u7684{@code KeyEvent}\u5206\u53d1\u7ed9\u6355\u83b7\u7684\u5ba2\u6237\u7aef\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n     *\n     * @param displayType \u663e\u793a\u5668\u7c7b\u578b\uff0c\u7531{@code CarInputManager}\u5b9a\u4e49\uff0c\u4f8b\u5982\n     *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN}\n     * @param event       \u8981\u5904\u7406\u7684\u6309\u952e\u4e8b\u4ef6\n     * @return \u5982\u679c\u4e8b\u4ef6\u88ab\u6d88\u8d39\uff0c\u8fd4\u56detrue\u3002\n     */\n    public boolean onKeyEvent(@DisplayTypeEnum int displayType, KeyEvent event) {\n        // \u68c0\u67e5\u663e\u793a\u5668\u7c7b\u578b\u662f\u5426\u53d7\u652f\u6301\n        if (!SUPPORTED_DISPLAY_TYPES.contains(displayType)) {\n            return false; // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8fd4\u56defalse\n        }\n\n        // \u6839\u636e\u6309\u952e\u4ee3\u7801\u83b7\u53d6\u8f93\u5165\u7c7b\u578b\n        Integer inputType = KEY_EVENT_TO_INPUT_TYPE.get(event.getKeyCode());\n        if (inputType == null) { // \u5982\u679c\u6309\u952e\u4e0d\u53d7\u652f\u6301\n            inputType = CarInputManager.INPUT_TYPE_ALL_INPUTS; // \u8bbe\u7f6e\u4e3a\u6240\u6709\u8f93\u5165\u7c7b\u578b\n        }\n\n        ICarInputCallback callback;\n        synchronized (mLock) {\n            // \u83b7\u53d6\u4e0e\u8f93\u5165\u7c7b\u578b\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n            callback = getClientForInputTypeLocked(displayType, inputType);\n            if (callback == null) {\n                return false; // \u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\uff0c\u8fd4\u56defalse\n            }\n            mNumKeyEventsDispatched++; // \u589e\u52a0\u5df2\u5206\u53d1\u7684\u6309\u952e\u4e8b\u4ef6\u8ba1\u6570\n        }\n\n        // \u5206\u53d1\u6309\u952e\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u56de\u8c03\n        dispatchKeyEvent(displayType, event, callback);\n        return true; // \u8fd4\u56detrue\u8868\u793a\u4e8b\u4ef6\u88ab\u6d88\u8d39\n    }\n}\n</code></pre> <p>\u6839\u636e CarInputManager.requestInputEventCapture() \u7684\u5206\u6790\uff0c\u8fd9\u91cc\u62ff\u5230\u7684 <code>callback</code> \u5c31\u662f\u5ba2\u6237\u7aef\u6ce8\u518c\u65f6\u4f20\u8fdb\u6765\u7684\u56de\u8c03\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrollerdispatchkeyevent","title":"InputCaptureClientController.dispatchKeyEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5206\u53d1\u6309\u952e\u4e8b\u4ef6\u5230\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     * @param event \u8981\u5206\u53d1\u7684\u6309\u952e\u4e8b\u4ef6\n     * @param callback \u7528\u4e8e\u63a5\u6536\u6309\u952e\u4e8b\u4ef6\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\n     */\n    private void dispatchKeyEvent(int targetDisplayType, KeyEvent event,\n                                  ICarInputCallback callback) {\n        // \u5728\u901a\u7528\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u4e8b\u4ef6\u5206\u53d1\u903b\u8f91\n        CarServiceUtils.runOnCommon(() -&gt; {\n            // \u6e05\u7a7a\u4e34\u65f6\u5217\u8868\u4ee5\u51c6\u5907\u65b0\u7684\u4e8b\u4ef6\n            mKeyEventDispatchScratchList.clear();\n            // \u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230\u4e34\u65f6\u5217\u8868\u4e2d\n            mKeyEventDispatchScratchList.add(event);\n            try {\n                // \u8c03\u7528\u5ba2\u6237\u7aef\u56de\u8c03\u7684onKeyEvents\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u5ba2\u6237\u7aef\n                callback.onKeyEvents(targetDisplayType, mKeyEventDispatchScratchList);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u5206\u53d1\u5931\u8d25\u4e14\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\n                if (DBG_DISPATCH) {\n                    Slogf.e(TAG, \"Failed to dispatch KeyEvent \" + event, e);\n                }\n            }\n        });\n    }\n\n}\n</code></pre> <p>\u5c06\u6309\u952e\u4e8b\u4ef6\u5206\u53d1\u5230\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002 \u6211\u4eec\u7ee7\u7eed\u56de\u5230 CarInputService.handleVoiceAssistKey() \u4e2d\uff0c\u5982\u679c\u4ecd\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u5904\u7406\u7a0b\u5e8f\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicelaunchdefaultvoiceassistanthandler","title":"CarInputService.launchDefaultVoiceAssistantHandler()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u5904\u7406\u7a0b\u5e8f\u3002\n     */\n    private void launchDefaultVoiceAssistantHandler() {\n        // \u8bb0\u5f55\u65e5\u5fd7\uff0c\u6307\u793a\u8bed\u97f3\u952e\u88ab\u89e6\u53d1\u5e76\u8c03\u7528AssistUtilsHelper\n        Slogf.d(TAG, \"voice key, invoke AssistUtilsHelper\");\n\n        // \u8c03\u7528AssistUtilsHelper\u7684showPushToTalkSessionForActiveService\u65b9\u6cd5\n        // \u5982\u679c\u65e0\u6cd5\u68c0\u7d22\u5f53\u524d\u7528\u6237\u7684\u8f85\u52a9\u7ec4\u4ef6\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\n        if (!AssistUtilsHelper.showPushToTalkSessionForActiveService(mContext, mShowCallback)) {\n            Slogf.w(TAG, \"Unable to retrieve assist component for current user\");\n        }\n    }\n}\n</code></pre> <p>\u901a\u8fc7 IPC \u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u5904\u7406\u7a0b\u5e8f\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_6","title":"\u603b\u7ed3","text":"<p>\u8bed\u97f3\u6309\u952e\u4e8b\u4ef6\u9996\u5148\u7531<code>CarProjectionService</code>\u670d\u52a1\u8fdb\u884c\u5904\u7406\uff1b\u5982\u679c<code>CarProjectionService</code>\u672a\u80fd\u6210\u529f\u5904\u7406\uff0c\u5219\u4ea4\u7531\u5ba2\u6237\u7aef\u8fdb\u7a0b\u5904\u7406\uff1b\u82e5\u5ba2\u6237\u7aef\u8fdb\u7a0b\u4e5f\u672a\u80fd\u5904\u7406\uff0c\u5219\u542f\u52a8\u9ed8\u8ba4\u7684\u8bed\u97f3\u52a9\u624b\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicehandlecallkey","title":"CarInputService.handleCallKey()","text":"<p>\u56de\u5230 CarInputService.dispatchKeyEventForDriver() \u5f00\u59cb\u5904\u7406 handleCallKey()\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u7535\u8bdd\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     */\n    private void handleCallKey(KeyEvent event) {\n        int action = event.getAction(); // \u83b7\u53d6\u6309\u952e\u52a8\u4f5c\n\n        // \u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u6309\u4e0b\uff0c\u5e76\u4e14\u91cd\u590d\u8ba1\u6570\u4e3a0\uff08\u5373\u9996\u6b21\u6309\u4e0b\uff09\n        if (action == KeyEvent.ACTION_DOWN &amp;&amp; event.getRepeatCount() == 0) {\n            mCallKeyTimer.keyDown(); // \u8bb0\u5f55\u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\n            dispatchProjectionKeyEvent(CarProjectionManager.KEY_EVENT_CALL_KEY_DOWN); // \u5206\u53d1\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\n        } else if (action == KeyEvent.ACTION_UP) { // \u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u62ac\u8d77\n            if (mCallKeyTimer.keyUp()) {\n                // \u957f\u6309\u5df2\u7ecf\u7531handleCallLongPress()\u5904\u7406\uff0c\u65e0\u9700\u518d\u505a\u5904\u7406\u3002\n                // \u5982\u679c\u6295\u5f71\u611f\u5174\u8da3\uff0c\u5219\u5c06\u4e8b\u4ef6\u4ea4\u7ed9\u6295\u5f71\u5904\u7406\uff0c\u5426\u5219\u5904\u7406\u7ed3\u675f\u3002\n                dispatchProjectionKeyEvent(CarProjectionManager.KEY_EVENT_CALL_LONG_PRESS_KEY_UP);\n                return;\n            }\n\n            // \u5982\u679c\u7535\u8bdd\u6b63\u5728\u54cd\u94c3\uff0c\u63a5\u542c\u7535\u8bdd\n            if (acceptCallIfRinging()) {\n                // \u5df2\u63a5\u542c\u54cd\u94c3\u7535\u8bdd\uff0c\u65e0\u9700\u518d\u505a\u5904\u7406\u3002\n                return;\n            }\n\n            // \u5982\u679c\u6b63\u5728\u8fdb\u884c\u901a\u8bdd\u4e14\u5e94\u7ed3\u675f\u901a\u8bdd\uff0c\u5219\u7ed3\u675f\u901a\u8bdd\n            if (mShouldCallButtonEndOngoingCallSupplier.getAsBoolean() &amp;&amp; endCall()) {\n                // \u5df2\u7ed3\u675f\u6b63\u5728\u8fdb\u884c\u7684\u901a\u8bdd\uff0c\u65e0\u9700\u518d\u505a\u5904\u7406\u3002\n                return;\n            }\n\n            // \u5982\u679c\u77ed\u6309\u4e8b\u4ef6\u88ab\u6295\u5f71\u5904\u7406\uff0c\u5219\u8fd4\u56de\n            if (dispatchProjectionKeyEvent(\n                    CarProjectionManager.KEY_EVENT_CALL_SHORT_PRESS_KEY_UP)) {\n                return;\n            }\n\n            // \u542f\u52a8\u62e8\u53f7\u7a0b\u5e8f\u5904\u7406\u7a0b\u5e8f\n            launchDialerHandler();\n        }\n    }\n}\n</code></pre> <p>\u7535\u8bdd\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u6d41\u7a0b\uff1a</p> <ul> <li>\u6309\u952e\u6309\u4e0b\uff1a<ul> <li>\u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u6309\u4e0b\uff0c\u5e76\u4e14\u91cd\u590d\u8ba1\u6570\u4e3a0\uff08\u5373\u9996\u6b21\u6309\u4e0b\uff09\uff0c\u8bb0\u5f55\u6309\u952e\u6309\u4e0b\u7684\u65f6\u95f4\uff0c\u5e76\u5206\u53d1\u6309\u952e\u6309\u4e0b\u4e8b\u4ef6\u3002</li> </ul> </li> <li>\u6309\u952e\u62ac\u8d77\uff1a<ul> <li>\u5982\u679c\u6309\u952e\u52a8\u4f5c\u662f\u62ac\u8d77\uff0c\u9996\u5148\u68c0\u67e5\u662f\u5426\u4e3a\u957f\u6309\u4e8b\u4ef6\u3002</li> <li>\u5982\u679c\u662f\u957f\u6309\u4e8b\u4ef6\uff0c\u5206\u53d1\u957f\u6309\u62ac\u8d77\u4e8b\u4ef6\u7ed9 CarProjectionService \u5904\u7406\u3002</li> <li>\u5982\u679c\u7535\u8bdd\u6b63\u5728\u54cd\u94c3\uff0c\u8c03\u7528<code>acceptCallIfRinging</code>\u65b9\u6cd5\u63a5\u542c\u7535\u8bdd\u3002</li> <li>\u5982\u679c\u6b63\u5728\u8fdb\u884c\u901a\u8bdd\u4e14\u5e94\u7ed3\u675f\u901a\u8bdd\uff0c\u8c03\u7528<code>endCall</code>\u65b9\u6cd5\u7ed3\u675f\u901a\u8bdd\u3002</li> <li>\u5982\u679c\u4e0a\u8ff0\u5904\u7406\u5747\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u8c03\u7528<code>dispatchProjectionKeyEvent</code>\u65b9\u6cd5\u5904\u7406\u77ed\u6309\u4e8b\u4ef6\u3002</li> <li>\u5982\u679c\u4ecd\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u542f\u52a8\u62e8\u53f7\u7a0b\u5e8f\u5904\u7406\u7a0b\u5e8f\u3002</li> </ul> </li> </ul> <p>\u5728\u8fd9\u4e2a\u6d41\u7a0b\u4e2d\uff0c<code>CarProjectionService</code>\u7684\u5904\u7406\u65b9\u5f0f\u4e0e\u8bed\u97f3\u6309\u952e\u4e8b\u4ef6\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u91cd\u590d\u8bf4\u660e\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceacceptcallifringing","title":"CarInputService.acceptCallIfRinging()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5982\u679c\u7535\u8bdd\u6b63\u5728\u54cd\u94c3\uff0c\u5219\u63a5\u542c\u7535\u8bdd\u3002\n     *\n     * @return \u5982\u679c\u7535\u8bdd\u6b63\u5728\u54cd\u94c3\u5e76\u6210\u529f\u63a5\u542c\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\u3002\n     */\n    private boolean acceptCallIfRinging() {\n        // \u68c0\u67e5mTelecomManager\u662f\u5426\u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u7535\u8bdd\u662f\u5426\u6b63\u5728\u54cd\u94c3\n        if (mTelecomManager != null &amp;&amp; mTelecomManager.isRinging()) {\n            // \u8bb0\u5f55\u65e5\u5fd7\uff0c\u6307\u793a\u5728\u7535\u8bdd\u54cd\u94c3\u65f6\u6309\u4e0b\u4e86\u63a5\u542c\u952e\uff0c\u5e76\u63a5\u542c\u7535\u8bdd\n            Slogf.i(TAG, \"call key while ringing. Answer the call!\");\n            // \u63a5\u542c\u54cd\u94c3\u7535\u8bdd\n            mTelecomManager.acceptRingingCall();\n            return true; // \u8fd4\u56detrue\u8868\u793a\u7535\u8bdd\u5df2\u88ab\u63a5\u542c\n        }\n        return false; // \u8fd4\u56defalse\u8868\u793a\u7535\u8bdd\u672a\u54cd\u94c3\u6216\u672a\u63a5\u542c\n    }\n}\n</code></pre> <p>\u7535\u8bdd\u54cd\u94c3\u65f6\u63a5\u542c\u7535\u8bdd\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceendcall","title":"CarInputService.endCall()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u7ed3\u675f\u5f53\u524d\u901a\u8bdd\u3002\n     *\n     * @return \u5982\u679c\u6210\u529f\u7ed3\u675f\u901a\u8bdd\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\u3002\n     */\n    private boolean endCall() {\n        // \u68c0\u67e5mTelecomManager\u662f\u5426\u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u5f53\u524d\u662f\u5426\u6b63\u5728\u901a\u8bdd\n        if (mTelecomManager != null &amp;&amp; mTelecomManager.isInCall()) {\n            // \u8bb0\u5f55\u65e5\u5fd7\uff0c\u6307\u793a\u7ed3\u675f\u901a\u8bdd\n            Slogf.i(TAG, \"End the call!\");\n            // \u8c03\u7528mTelecomManager\u7684endCall\u65b9\u6cd5\u7ed3\u675f\u901a\u8bdd\n            mTelecomManager.endCall();\n            return true; // \u8fd4\u56detrue\u8868\u793a\u901a\u8bdd\u5df2\u7ed3\u675f\n        }\n        return false; // \u8fd4\u56defalse\u8868\u793a\u6ca1\u6709\u6b63\u5728\u8fdb\u884c\u7684\u901a\u8bdd\u6216\u65e0\u6cd5\u7ed3\u675f\u901a\u8bdd\n    }\n}\n</code></pre> <p>\u5728\u901a\u8bdd\u8fc7\u7a0b\u4e2d\u7ed3\u675f\u901a\u8bdd\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicelaunchdialerhandler","title":"CarInputService.launchDialerHandler()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub  \n        implements CarServiceBase, InputHalService.InputListener {  \n\n    private void launchDialerHandler() {  \n        Slogf.i(TAG, \"call key, launch dialer intent\");  \n        Intent dialerIntent = new Intent(Intent.ACTION_DIAL);  \n        mContext.startActivityAsUser(dialerIntent, UserHandle.CURRENT);  \n    }  \n}\n</code></pre> <p>\u542f\u52a8\u62e8\u53f7\u754c\u9762\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicehandleinstrumentclusterkey","title":"CarInputService.handleInstrumentClusterKey()","text":"<p>\u56de\u5230 CarInputService.dispatchKeyEventForDriver() \u5f00\u59cb\u5904\u7406 handleInstrumentClusterKey()\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event \u6309\u952e\u4e8b\u4ef6\n     * @return \u5982\u679c\u6309\u952e\u4e8b\u4ef6\u6ca1\u6709\u88ab\u6d88\u8d39\uff08\u56e0\u4e3a\u6ca1\u6709InstrumentClusterKeyListener\uff09\uff0c\u8fd4\u56defalse\u3002\n     */\n    private boolean handleInstrumentClusterKey(KeyEvent event) {\n        KeyEventListener listener;\n        // \u5728\u540c\u6b65\u5757\u4e2d\u83b7\u53d6\u5f53\u524d\u7684\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n        synchronized (mLock) {\n            listener = mInstrumentClusterKeyListener;\n        }\n        // \u5982\u679c\u6ca1\u6709\u76d1\u542c\u5668\uff0c\u8fd4\u56defalse\uff0c\u8868\u793a\u4e8b\u4ef6\u672a\u88ab\u6d88\u8d39\n        if (listener == null) {\n            return false;\n        }\n        // \u8c03\u7528\u76d1\u542c\u5668\u7684onKeyEvent\u65b9\u6cd5\u5904\u7406\u4e8b\u4ef6\n        listener.onKeyEvent(event);\n        return true; // \u8fd4\u56detrue\uff0c\u8868\u793a\u4e8b\u4ef6\u5df2\u88ab\u6d88\u8d39\n    }\n}\n</code></pre> <p>\u5982\u679c\u6709\u6ce8\u518c\u4eea\u8868\u76d8\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u5219\u5c06\u4e8b\u4ef6\u4f20\u9012\u7ed9\u76d1\u542c\u5668\u8fdb\u884c\u5904\u7406\u3002\u53c2\u8003 CarInputService.setInstrumentClusterKeyListener() \u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrolleronkeyevent_1","title":"InputCaptureClientController.onKeyEvent()","text":"<p>\u56de\u5230 CarInputService.dispatchKeyEventForDriver() \u5f00\u59cb\u5904\u7406 InputCaptureClientController.onKeyEvent()\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n    /**\n     * \u5c06\u7ed9\u5b9a\u7684{@code KeyEvent}\u5206\u53d1\u7ed9\u6355\u83b7\u7684\u5ba2\u6237\u7aef\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n     *\n     * @param displayType \u663e\u793a\u5668\u7c7b\u578b\uff0c\u7531{@code CarInputManager}\u5b9a\u4e49\uff0c\u4f8b\u5982\n     *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN}\n     * @param event       \u8981\u5904\u7406\u7684\u6309\u952e\u4e8b\u4ef6\n     * @return \u5982\u679c\u4e8b\u4ef6\u88ab\u6d88\u8d39\uff0c\u8fd4\u56detrue\u3002\n     */\n    public boolean onKeyEvent(@DisplayTypeEnum int displayType, KeyEvent event) {\n        // \u68c0\u67e5\u663e\u793a\u5668\u7c7b\u578b\u662f\u5426\u53d7\u652f\u6301\n        if (!SUPPORTED_DISPLAY_TYPES.contains(displayType)) {\n            return false; // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8fd4\u56defalse\n        }\n\n        // \u6839\u636e\u6309\u952e\u4ee3\u7801\u83b7\u53d6\u8f93\u5165\u7c7b\u578b\n        Integer inputType = KEY_EVENT_TO_INPUT_TYPE.get(event.getKeyCode());\n        if (inputType == null) { // \u5982\u679c\u6309\u952e\u4e0d\u53d7\u652f\u6301\n            inputType = CarInputManager.INPUT_TYPE_ALL_INPUTS; // \u8bbe\u7f6e\u4e3a\u6240\u6709\u8f93\u5165\u7c7b\u578b\n        }\n\n        ICarInputCallback callback;\n        synchronized (mLock) {\n            // \u83b7\u53d6\u4e0e\u8f93\u5165\u7c7b\u578b\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n            callback = getClientForInputTypeLocked(displayType, inputType);\n            if (callback == null) {\n                return false; // \u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\uff0c\u8fd4\u56defalse\n            }\n            mNumKeyEventsDispatched++; // \u589e\u52a0\u5df2\u5206\u53d1\u7684\u6309\u952e\u4e8b\u4ef6\u8ba1\u6570\n        }\n\n        // \u5206\u53d1\u6309\u952e\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u56de\u8c03\n        dispatchKeyEvent(displayType, event, callback);\n        return true; // \u8fd4\u56detrue\u8868\u793a\u4e8b\u4ef6\u88ab\u6d88\u8d39\n    }\n}\n</code></pre> <p>\u5728\u524d\u9762\u7684\u7ae0\u8282 CarInputManager.requestInputEventCapture() \u6211\u4eec\u63d0\u5230\u4e86\u5982\u4f55\u83b7\u53d6 <code>callback</code> InputCaptureClientController.getClientForInputTypeLocked() \u3002</p> <p>\u8fd9\u91cc\u83b7\u53d6\u5230\u7684 <code>callback</code> \u5c31\u662f\u5ba2\u6237\u7aef\u8fdb\u7a0b\u6ce8\u518c\u8fdb\u6765\u7684\u56de\u8c03\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u6309\u952e\u4e8b\u4ef6\u5206\u53d1\u5230\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\n     * @param event \u8981\u5206\u53d1\u7684\u6309\u952e\u4e8b\u4ef6\n     * @param callback \u7528\u4e8e\u63a5\u6536\u6309\u952e\u4e8b\u4ef6\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\n     */\n    private void dispatchKeyEvent(int targetDisplayType, KeyEvent event,\n                                  ICarInputCallback callback) {\n        // \u4f7f\u7528CarServiceUtils\u5728\u901a\u7528\u7ebf\u7a0b\u6c60\u4e0a\u8fd0\u884c\u4e8b\u4ef6\u5206\u53d1\u903b\u8f91\uff0c\u786e\u4fdd\u5f02\u6b65\u6267\u884c\n        CarServiceUtils.runOnCommon(() -&gt; {\n            // \u6e05\u7a7a\u4e34\u65f6\u5217\u8868\u4ee5\u51c6\u5907\u65b0\u7684\u4e8b\u4ef6\n            mKeyEventDispatchScratchList.clear();\n            // \u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230\u4e34\u65f6\u5217\u8868\u4e2d\n            mKeyEventDispatchScratchList.add(event);\n            try {\n                // \u8c03\u7528\u5ba2\u6237\u7aef\u56de\u8c03\u7684onKeyEvents\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u548c\u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\n                callback.onKeyEvents(targetDisplayType, mKeyEventDispatchScratchList);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u5728\u8c03\u7528\u56de\u8c03\u65f6\u53d1\u751fRemoteException\uff0c\u5e76\u4e14\u542f\u7528\u4e86\u8c03\u8bd5\u65e5\u5fd7\uff0c\u5219\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\n                if (DBG_DISPATCH) {\n                    Slogf.e(TAG, \"Failed to dispatch KeyEvent \" + event, e);\n                }\n            }\n        });\n    }\n}\n</code></pre> <p>\u5c06\u6309\u952e\u4e8b\u4ef6\u5206\u53d1\u5230\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#mdefaultkeyhandleronkeyevent","title":"mDefaultKeyHandler.onKeyEvent()","text":"<p>\u56de\u5230 CarInputService.dispatchKeyEventForDriver() \u5f00\u59cb\u5904\u7406 InputCaptureClientController.onKeyEvent()\u3002</p> <p>\u5176\u4ee3\u7801\u5982\uff1a</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub  \n        implements CarServiceBase, InputHalService.InputListener {  \n\n    private void dispatchKeyEventForDriver(KeyEvent event, @DisplayTypeEnum int targetDisplayType) {  \n        ...  \n        mDefaultKeyHandler.onKeyEvent(event, targetDisplayType, mDriverSeat);  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc <code>mDefaultKeyHandler</code> \u5c31\u662f <code>KeyEventListener</code> \u5176\u521d\u59cb\u5316\u662f\u5728 <code>CarInputService</code> \u6784\u9020\u51fd\u6570\u91cc\uff0c\u5176\u4e3b\u8981\u7684\u529f\u80fd\u662f\u89c1\u5230\u6309\u952e\u4e8b\u4ef6\u540e\u901a\u8fc7 <code>InputManagerHelper.injectInputEvent(context.getSystemService(InputManager.class), event)</code> \u628a\u4e8b\u4ef6\u53d1\u7ed9 <code>system_server</code> \u8fdb\u7a0b\u7684 <code>Input\u6a21\u5757</code>\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u9ed8\u8ba4\u7684\u4e3b\u663e\u793a\u5668\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u5668\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7InputManager\u5c06\u4e8b\u4ef6\u6ce8\u5165\u8f93\u5165\u961f\u5217\uff0c\n    // \u4f46\u53ef\u4ee5\u88ab\u8986\u76d6\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u3002\n    private final KeyEventListener mDefaultKeyHandler;\n\n    // CarInputService\u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u670d\u52a1\n    public CarInputService(Context context, InputHalService inputHalService,\n                           CarUserService userService, CarOccupantZoneService occupantZoneService,\n                           CarBluetoothService bluetoothService, CarPowerManagementService carPowerService,\n                           SystemInterface systemInterface) {\n        this(...,\n                new KeyEventListener() {\n                    @Override\n                    public void onKeyEvent(KeyEvent event, @DisplayTypeEnum int displayType,\n                                           @VehicleAreaSeat.Enum int seat) {\n                        // \u4f7f\u7528InputManager\u5c06\u4e8b\u4ef6\u6ce8\u5165\u8f93\u5165\u961f\u5217\n                        InputManagerHelper.injectInputEvent(\n                                context.getSystemService(InputManager.class), event);\n                    }\n                },\n                ...);\n    }\n\n    @VisibleForTesting\n    CarInputService(...,\n                    KeyEventListener defaultKeyHandler,\n                    ...) {\n        super();\n        // \u521d\u59cb\u5316\u9ed8\u8ba4\u6309\u952e\u5904\u7406\u5668\n        mDefaultKeyHandler = defaultKeyHandler;\n    }\n}\n</code></pre> <p>\u5728 <code>dispatchKeyEventForDriver()</code> \u65b9\u6cd5\u4e2d\uff0c\u7ecf\u8fc7\u524d\u9762\u7684\u5c42\u5c42\u5224\u65ad\u540e\uff0c\u5982\u679c\u67d0\u4e2a\u6309\u952e\u4e8b\u4ef6\u6ca1\u6709\u88ab\u7279\u6b8a\u5904\u7406\u5668\u62e6\u622a\u5e76\u5904\u7406\uff0c\u6700\u7ec8\u5c06\u4ea4\u7531<code>mDefaultKeyHandler</code>\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u610f\u5473\u7740\u8be5\u4e8b\u4ef6\u4f1a\u88ab\u76f4\u63a5\u6ce8\u5165\u5230<code>system_server</code>\u8fdb\u7a0b\u7684<code>Input\u6a21\u5757</code>\uff0c\u4ece\u800c\u6309\u7167\u624b\u673a\u7684\u6807\u51c6\u6d41\u7a0b\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u53ef\u80fd\u5ffd\u7565\u4e86\u8f66\u8f7d\u7cfb\u7edf\u4e2d\u7279\u6b8a\u6309\u952e\u7684\u72ec\u7279\u9700\u6c42\u3002 \u6211\u7684\u7591\u95ee\u662f\uff1a \u5728\u975e\u9a7e\u9a76\u5458\u5ea7\u4f4d\u53d1\u51fa\u7684\u6309\u952e\u90fd\u8981\u8c03\u7528 <code>notifyKeyEventListener()</code> \u901a\u77e5\u5230\u76d1\u542c\u65b9\u3002\u4e5f\u5c31\u662f\u5728 <code>mDefaultKeyHandler.onKeyEvent()</code> \u5904\u7406\u7684\u4e4b\u540e\u52a0\u4e86\u4e00\u4e9b\u7279\u6b8a\u6309\u952e\u7684\u5904\u7406\uff0c\u5982\uff1a</p> <ul> <li>POWER\u3001HOME\u6309\u952e</li> <li>VOLUME\u6309\u952e</li> <li>MEDIA\u6309\u952e</li> </ul> <p>\u90a3\u4e48\u5982\u679c\u9a7e\u9a76\u5458\u6309\u4e0b\u4e86 VOLUME\u6309\u952e \uff0c\u8fd9\u4e2a\u4e8b\u4ef6\u662f <code>dispatchKeyEventForDriver()</code> \u65b9\u6cd5\u4e2d\u901a\u8fc7 <code>mDefaultKeyHandler.onKeyEvent()</code> \u6700\u540e\u6ce8\u5165\u5230<code>system_server</code>\u8fdb\u7a0b\u7684<code>Input\u6a21\u5757</code> \uff0c\u90a3\u4e3a\u4ec0\u4e48\u975e\u9a7e\u9a76\u5458\u8981\u7ecf\u8fc7 CarService \u5904\u7406\u8fd9\u4e9b\u7279\u6b8a\u6309\u94ae\u800c\u9a7e\u9a76\u5458\u4e0d\u9700\u8981\u5462\uff1f</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_7","title":"\u7279\u6b8a\u6309\u952e","text":"<p>\u5728\u524d\u9762\u7684 CarInputService.registerKeyEventListener() \u5206\u6790\u5230\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4e3b\u8981\u529f\u80fd\u662f\u6ce8\u518c\u4e00\u4e2a\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u5176\u611f\u5174\u8da3\u7684\u6309\u952e\u4e8b\u4ef6\u3002\u5982\u679c\u67d0\u4e2a\u6309\u952e\u4ee3\u7801\u5df2\u7ecf\u6ce8\u518c\u5230\u5176\u4ed6\u76d1\u542c\u5668\uff0c\u629b\u51fa\u5f02\u5e38\u3002</p> <p>\u90a3\u5176\u6d3e\u53d1\u662f\u5728\u54ea\u91cc\u7684\u5462\uff1f\u6211\u4eec\u56de\u5230 CarInputService.onKeyEvent() \u4e2d\uff0c\u5728\u975e\u9a7e\u9a76\u5458\u5ea7\u4f4d\u53d1\u51fa\u7684\u6309\u952e\u90fd\u8981\u8c03\u7528 <code>notifyKeyEventListener()</code> \u901a\u77e5\u5230\u76d1\u542c\u65b9\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u901a\u77e5\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\u5904\u7406\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param event         \u6309\u952e\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u6309\u952e\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     * @param targetDisplay \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\uff0c\u6307\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u663e\u793a\u5668\u4e0a\u3002\n     * @param seat          \u5ea7\u4f4d\u533a\u57df\uff0c\u6307\u793a\u4e8b\u4ef6\u4e0e\u54ea\u4e2a\u5ea7\u4f4d\u76f8\u5173\u3002\n     */\n    private void notifyKeyEventListener(KeyEvent event, int targetDisplay, int seat) {\n        KeyEventListener keyEventListener;\n        // \u4f7f\u7528\u540c\u6b65\u5757\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u5730\u8bbf\u95ee\u76d1\u542c\u5668\u96c6\u5408\n        synchronized (mLock) {\n            // \u4ece\u76d1\u542c\u5668\u96c6\u5408\u4e2d\u83b7\u53d6\u4e0e\u6309\u952e\u4ee3\u7801\u5bf9\u5e94\u7684\u76d1\u542c\u5668\n            keyEventListener = mListeners.get(event.getKeyCode());\n        }\n\n        // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\n        if (keyEventListener == null) {\n            // \u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n            if (DBG) {\n                Slogf.d(TAG, \"Key event listener not found for event %s\",\n                        KeyEvent.keyCodeToString(event.getKeyCode()));\n            }\n            // \u5982\u679c\u6ca1\u6709\u76d1\u542c\u5668\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u6309\u952e\u5904\u7406\u5668\n            keyEventListener = mDefaultKeyHandler;\n        }\n\n        // \u4e3a\u5ea7\u4f4d\u5206\u914d\u663e\u793aID\uff0c\u786e\u4fdd\u4e8b\u4ef6\u88ab\u6b63\u786e\u8def\u7531\u5230\u76f8\u5e94\u7684\u663e\u793a\u5668\n        assignDisplayIdForSeat(event, targetDisplay, seat);\n        // \u8c03\u7528\u76d1\u542c\u5668\u7684onKeyEvent\u65b9\u6cd5\u5904\u7406\u6309\u952e\u4e8b\u4ef6\n        keyEventListener.onKeyEvent(event, targetDisplay, seat);\n    }\n}\n</code></pre>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#powerhome","title":"POWER\u3001HOME\u6309\u952e","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    // \u9ed8\u8ba4\u7684\u7279\u6b8a\u6309\u952e\u5904\u7406\u5668\u3002\u5728\u6b64\u670d\u52a1\u4e2d\u5b9e\u73b0\u6309\u952e\u7684\u884c\u4e3a\u3002\u53ef\u4ee5\u901a\u8fc7registerKeyEventListener\u65b9\u6cd5\u8986\u76d6\u3002\n    private final KeyEventListener mDefaultSpecialKeyHandler = new KeyEventListener() {\n        @Override\n        public void onKeyEvent(KeyEvent event, @DisplayTypeEnum int displayType,\n                               @VehicleAreaSeat.Enum int seat) {\n            // \u6839\u636e\u6309\u952e\u7684\u952e\u7801\u8fdb\u884c\u5904\u7406\n            switch (event.getKeyCode()) {\n                case KeyEvent.KEYCODE_HOME:\n                    // \u5904\u7406Home\u952e\u4e8b\u4ef6\n                    handleHomeKey(event, displayType, seat);\n                    break;\n                case KeyEvent.KEYCODE_POWER:\n                    // \u5904\u7406\u7535\u6e90\u952e\u4e8b\u4ef6\n                    handlePowerKey(event, displayType, seat);\n                    break;\n                default:\n                    // \u5982\u679c\u6309\u952e\u4e0d\u88ab\u7279\u6b8a\u6309\u952e\u5904\u7406\u5668\u652f\u6301\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n                    Slogf.e(TAG, \"Key event %s is not supported by special key handler\",\n                            KeyEvent.keyCodeToString(event.getKeyCode()));\n                    break;\n            }\n        }\n    };\n\n    @VisibleForTesting\n    CarInputService(...) {\n        super();\n\n        // \u6ce8\u518c\u7279\u6b8a\u6309\u952e\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u76d1\u542cHome\u952e\u548c\u7535\u6e90\u952e\n        registerKeyEventListener(mDefaultSpecialKeyHandler,\n                Arrays.asList(KeyEvent.KEYCODE_HOME, KeyEvent.KEYCODE_POWER));\n    }\n}\n</code></pre> <p>Home\u952e\u7684\u5904\u7406\u6d41\u7a0b\u76f8\u5bf9\u7b80\u5355\uff0c\u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u6839\u636e<code>userId</code>\u548c<code>displayId</code>\u542f\u52a8\u76f8\u5e94\u663e\u793a\u5668\u7684\u4e3b\u9875\u754c\u9762\u3002</p> <p>\u76f8\u6bd4\u4e4b\u4e0b\uff0cPower\u952e\u7684\u5904\u7406\u6d41\u7a0b\u5219\u590d\u6742\u5f97\u591a\uff0c\u5b83\u6d89\u53ca\u5230<code>CarPowerManagementService</code>\u3001<code>CarOccupantZoneService</code>\u7b49\u591a\u4e2a\u670d\u52a1\u7684\u534f\u8c03\u4e0e\u4ea4\u4e92\u3002\u7531\u4e8e\u5176\u590d\u6742\u6027\uff0c\u6211\u4eec\u5c06\u5728\u540e\u7eed\u5bf9<code>CarPowerManagementService</code>\u7684\u5206\u6790\u4e2d\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e00\u6d41\u7a0b\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#volume","title":"VOLUME\u6309\u952e","text":"<pre><code>// packages/services/Car/service/src/com/android/car/audio/CarAudioService.java\n\npublic final class CarAudioService extends ICarAudio.Stub implements CarServiceBase {  \n\n    private static final List&lt;Integer&gt; KEYCODES_OF_INTEREST = List.of(  \n            KEYCODE_VOLUME_DOWN,  \n            KEYCODE_VOLUME_UP,  \n            KEYCODE_VOLUME_MUTE  \n    );  \n\n    mCarInputService.registerKeyEventListener(mCarKeyEventListener,  \n    KEYCODES_OF_INTEREST);  \n}\n</code></pre> <p>CarAudioService \u670d\u52a1\u6ce8\u518c\u76d1\u542c\u97f3\u91cf\u6309\u952e\uff0c\u8fd9\u91cc\u4e5f\u4e0d\u518d\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#media","title":"MEDIA\u6309\u952e","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarMediaService.java\n\n\npublic final class CarMediaService extends ICarMedia.Stub implements CarServiceBase {  \n    private void setKeyEventListener() {  \n        int maxKeyCode = KeyEvent.getMaxKeyCode();  \n        ArrayList&lt;Integer&gt; mediaKeyCodes = new ArrayList&lt;&gt;(15);  \n        for (int key = 1; key &lt;= maxKeyCode; key++) {  \n            if (KeyEvent.isMediaSessionKey(key)) {  \n                mediaKeyCodes.add(key);  \n            }  \n        }  \n\n        CarLocalServices.getService(CarInputService.class)  \n                .registerKeyEventListener(new MediaKeyEventListener(), mediaKeyCodes);  \n    }  \n}\n</code></pre> <p>\u7ee7\u7eed\u770b KeyEvent.isMediaSessionKey()</p> <pre><code>// frameworks/base/core/java/android/view/KeyEvent.java\n\npublic class KeyEvent extends InputEvent implements Parcelable {  \n\n    public static final boolean isMediaSessionKey(int keyCode) {  \n        switch (keyCode) {  \n            case KeyEvent.KEYCODE_MEDIA_PLAY:  \n            case KeyEvent.KEYCODE_MEDIA_PAUSE:  \n            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:  \n            case KeyEvent.KEYCODE_HEADSETHOOK:  \n            case KeyEvent.KEYCODE_MEDIA_STOP:  \n            case KeyEvent.KEYCODE_MEDIA_NEXT:  \n            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:  \n            case KeyEvent.KEYCODE_MEDIA_REWIND:  \n            case KeyEvent.KEYCODE_MEDIA_RECORD:  \n            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:  \n                return true;  \n        }  \n        return false;  \n    }\n\n}\n</code></pre> <p>CarMediaService \u670d\u52a1\u6ce8\u518c\u76d1\u542c\u591a\u5a92\u4f53\u6309\u952e\uff0c\u8fd9\u91cc\u4e5f\u4e0d\u518d\u6df1\u5165\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_8","title":"\u89e6\u6478\u4e8b\u4ef6","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceonmotionevent","title":"CarInputService.onMotionEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u8fd0\u52a8\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\n     * @param event \u8fd0\u52a8\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u89e6\u6478\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u663e\u793a\u5668\u4e0a\u3002\n     * @param seat \u5ea7\u4f4d\u533a\u57df\uff0c\u6307\u793a\u4e8b\u4ef6\u4e0e\u54ea\u4e2a\u5ea7\u4f4d\u76f8\u5173\u3002\n     */\n    @Override\n    public void onMotionEvent(MotionEvent event, @DisplayTypeEnum int targetDisplayType,\n                              @VehicleAreaSeat.Enum int seat) {\n        // \u5982\u679c\u5ea7\u4f4d\u4fe1\u606f\u672a\u77e5\uff0c\u629b\u51fa\u975e\u6cd5\u53c2\u6570\u5f02\u5e38\n        if (seat == VehicleAreaSeat.SEAT_UNKNOWN) {\n            throw new IllegalArgumentException(\"Unknown seat\");\n        }\n\n        // \u901a\u77e5\u7528\u6237\u6d3b\u52a8\uff0c\u53ef\u80fd\u7528\u4e8e\u5524\u9192\u7cfb\u7edf\u6216\u91cd\u7f6e\u5c4f\u5e55\u8d85\u65f6\u8ba1\u65f6\u5668\n        notifyUserActivity(event, targetDisplayType, seat);\n\n        // \u4e3a\u5ea7\u4f4d\u5206\u914d\u663e\u793aID\uff0c\u786e\u4fdd\u4e8b\u4ef6\u88ab\u6b63\u786e\u8def\u7531\u5230\u76f8\u5e94\u7684\u663e\u793a\u5668\n        assignDisplayIdForSeat(event, targetDisplayType, seat);\n\n        // \u4f7f\u7528\u9ed8\u8ba4\u7684\u8fd0\u52a8\u4e8b\u4ef6\u5904\u7406\u5668\u5904\u7406\u4e8b\u4ef6\n        mDefaultMotionHandler.onMotionEvent(event);\n    }\n\n}\n</code></pre> <p>\u9996\u5148\uff0c\u901a\u8fc7 <code>notifyUserActivity()</code> \u65b9\u6cd5\u901a\u77e5 <code>CarPowerManagementService</code> \u670d\u52a1\u66f4\u65b0 <code>DisplayPowerInfo</code> \u4e2d\u7684 <code>mLastUserActivityTime</code> \uff0c\u5373\u8bbe\u7f6e\u5c4f\u5e55\u7684\u6700\u540e\u89e6\u6478\u65f6\u95f4\u3002\u8fd9\u4e00\u65f6\u95f4\u7528\u4e8e\u91cd\u7f6e\u5c4f\u5e55\u8d85\u65f6\u8ba1\u65f6\u5668\uff0c\u786e\u4fdd\u5728\u7528\u6237\u4ea4\u4e92\u65f6\u5c4f\u5e55\u4fdd\u6301\u5524\u9192\u72b6\u6001\u3002</p> <p>\u5176\u6b21\uff0c\u8c03\u7528 <code>assignDisplayIdForSeat()</code> \u65b9\u6cd5\u4e3a\u5ea7\u4f4d\u5206\u914d\u6b63\u786e\u7684 <code>displayId</code>\uff0c\u786e\u4fdd\u4e8b\u4ef6\u88ab\u51c6\u786e\u5730\u8def\u7531\u5230\u76f8\u5e94\u7684\u663e\u793a\u5668\u4e0a\u3002</p> <p>\u6700\u540e\uff0c\u8c03\u7528 <code>mDefaultMotionHandler.onMotionEvent(event)</code> \u6765\u5904\u7406\u8fd0\u52a8\u4e8b\u4ef6\u3002</p> <p>\u5728 <code>mDefaultMotionHandler</code> \u5c31\u662f <code>MotionEventListener</code> \u5176\u521d\u59cb\u5316\u662f\u5728 <code>CarInputService</code> \u6784\u9020\u51fd\u6570\u91cc\uff0c\u5176\u4e3b\u8981\u7684\u529f\u80fd\u662f\u63a5\u5230\u89e6\u6478\u4e8b\u4ef6\u540e\u901a\u8fc7 <code>InputManagerHelper.injectInputEvent(context.getSystemService(InputManager.class), event)</code> \u628a\u4e8b\u4ef6\u53d1\u7ed9 <code>system_server</code> \u8fdb\u7a0b\u7684 <code>Input\u6a21\u5757</code>\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub  \n        implements CarServiceBase, InputHalService.InputListener {  \n\n    // The default handler for main-display motion events. By default, injects the events into  \n    // the input queue via InputManager, but can be overridden for testing.    private final MotionEventListener mDefaultMotionHandler;  \n\n    public CarInputService(Context context, InputHalService inputHalService,  \n                           CarUserService userService, CarOccupantZoneService occupantZoneService,  \n                           CarBluetoothService bluetoothService, CarPowerManagementService carPowerService,  \n                           SystemInterface systemInterface) {  \n        this(...,  \n                /* defaultMotionHandler= */ event -&gt; InputManagerHelper.injectInputEvent(  \n                        context.getSystemService(InputManager.class), event),  \n            ...);  \n    }  \n\n    @VisibleForTesting  \n    CarInputService(...,  \n                    MotionEventListener defaultMotionHandler,  \n                    ...) {  \n        super();  \n        mDefaultMotionHandler = defaultMotionHandler;  \n    }  \n\n    /** An interface to receive {@link MotionEvent}s as they occur. */  \n    public interface MotionEventListener {  \n        /** Called when a motion event occurs. */  \n        void onMotionEvent(MotionEvent event);  \n    }  \n}\n</code></pre> <p>\u8fd9\u91cc\u53d1\u73b0\u89e6\u6478\u4e8b\u4ef6\u7684\u5904\u7406\u6bd4\u6309\u952e\u4e8b\u4ef6\u7b80\u5355\u5f88\u591a\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_9","title":"\u65cb\u94ae\u4e8b\u4ef6","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceonrotaryevent","title":"CarInputService.onRotaryEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u65cb\u94ae\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\n     * @param event \u65cb\u94ae\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u65cb\u94ae\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     * @param targetDisplay \u76ee\u6807\u663e\u793a\u7c7b\u578b\uff0c\u6307\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u663e\u793a\u5668\u4e0a\u3002\n     */\n    @Override\n    public void onRotaryEvent(RotaryEvent event, @DisplayTypeEnum int targetDisplay) {\n        // \u9996\u5148\u5c1d\u8bd5\u901a\u8fc7\u6355\u83b7\u63a7\u5236\u5668\u5904\u7406\u65cb\u94ae\u4e8b\u4ef6\n        if (!mCaptureController.onRotaryEvent(targetDisplay, event)) {\n            // \u5982\u679c\u6355\u83b7\u63a7\u5236\u5668\u672a\u5904\u7406\u4e8b\u4ef6\uff0c\u5c06\u65cb\u94ae\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u6309\u952e\u4e8b\u4ef6\u5217\u8868\n            List&lt;KeyEvent&gt; keyEvents = rotaryEventToKeyEvents(event);\n            // \u904d\u5386\u8f6c\u6362\u540e\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\n            for (KeyEvent keyEvent : keyEvents) {\n                // \u8c03\u7528\u6309\u952e\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\u5904\u7406\u6bcf\u4e2a\u6309\u952e\u4e8b\u4ef6\n                onKeyEvent(keyEvent, targetDisplay);\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>\u9996\u5148\uff0c\u5c1d\u8bd5\u901a\u8fc7<code>mCaptureController</code>\u5904\u7406\u65cb\u94ae\u4e8b\u4ef6\u3002\u5982\u679c<code>mCaptureController.onRotaryEvent(targetDisplay, event)</code>\u8fd4\u56de<code>false</code>\uff0c\u8868\u793a\u4e8b\u4ef6\u672a\u88ab\u5904\u7406\u3002</li> <li>\u5982\u679c\u4e8b\u4ef6\u672a\u88ab\u6355\u83b7\u63a7\u5236\u5668\u5904\u7406\uff0c\u5219\u8c03\u7528<code>rotaryEventToKeyEvents(event)</code>\u65b9\u6cd5\u5c06\u65cb\u94ae\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u3002\u8fd9\u662f\u56e0\u4e3a\u67d0\u4e9b\u65cb\u94ae\u64cd\u4f5c\u53ef\u4ee5\u6620\u5c04\u4e3a\u4e00\u7cfb\u5217\u6309\u952e\u64cd\u4f5c\u3002</li> <li>\u904d\u5386\u8f6c\u6362\u540e\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\uff0c\u5e76\u8c03\u7528<code>onKeyEvent(keyEvent, targetDisplay)</code>\u65b9\u6cd5\u9010\u4e2a\u5904\u7406\u6bcf\u4e2a\u6309\u952e\u4e8b\u4ef6\u3002\u8fd9\u786e\u4fdd\u4e86\u5373\u4f7f\u65cb\u94ae\u4e8b\u4ef6\u672a\u88ab\u76f4\u63a5\u5904\u7406\uff0c\u4e5f\u80fd\u901a\u8fc7\u6309\u952e\u4e8b\u4ef6\u7684\u5f62\u5f0f\u95f4\u63a5\u5904\u7406\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrolleronrotaryevent","title":"InputCaptureClientController.onRotaryEvent()","text":"<p>\u8fd9\u91cc\u7684 <code>mCaptureController</code> \u6307\u7684\u662f <code>InputCaptureClientController</code> \uff0c\u5b83\u662f\u5728 <code>CarInputService</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7 <code>mCaptureController = new InputCaptureClientController(context)</code> \u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u7ed9\u5b9a\u7684{@code RotaryEvent}\u5206\u53d1\u7ed9\u6355\u83b7\u7684\u5ba2\u6237\u7aef\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n     *\n     * @param displayType \u663e\u793a\u7c7b\u578b\uff0c\u5728{@code CarInputManager}\u4e2d\u5b9a\u4e49\uff0c\u4f8b\u5982\n     *                    {@link CarOccupantZoneManager#DISPLAY_TYPE_MAIN}\n     * @param event       \u8981\u5904\u7406\u7684\u65cb\u94ae\u4e8b\u4ef6\n     * @return \u5982\u679c\u4e8b\u4ef6\u88ab\u6d88\u8d39\u5219\u8fd4\u56detrue\u3002\n     */\n    public boolean onRotaryEvent(@DisplayTypeEnum int displayType, RotaryEvent event) {\n        // \u68c0\u67e5\u663e\u793a\u7c7b\u578b\u662f\u5426\u652f\u6301\n        if (!SUPPORTED_DISPLAY_TYPES.contains(displayType)) {\n            // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56defalse\n            Slogf.w(TAG, \"onRotaryEvent for not supported display:\" + displayType);\n            return false;\n        }\n\n        // \u83b7\u53d6\u65cb\u94ae\u4e8b\u4ef6\u7684\u8f93\u5165\u7c7b\u578b\n        int inputType = event.getInputType();\n        // \u68c0\u67e5\u8f93\u5165\u7c7b\u578b\u662f\u5426\u6709\u6548\n        if (!VALID_ROTARY_TYPES.contains(inputType)) {\n            // \u5982\u679c\u65e0\u6548\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56defalse\n            Slogf.w(TAG, \"onRotaryEvent for not supported input type:\" + inputType);\n            return false;\n        }\n\n        ICarInputCallback callback;\n        // \u540c\u6b65\u9501\u5b9a\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n        synchronized (mLock) {\n            // \u83b7\u53d6\u4e0e\u8f93\u5165\u7c7b\u578b\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n            callback = getClientForInputTypeLocked(displayType, inputType);\n            if (callback == null) {\n                // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\uff0c\u8bb0\u5f55\u4fe1\u606f\u65e5\u5fd7\uff08\u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff09\u5e76\u8fd4\u56defalse\n                if (DBG_DISPATCH) {\n                    Slogf.i(TAG, \"onRotaryEvent no client for input type:\" + inputType);\n                }\n                return false;\n            }\n            // \u8bb0\u5f55\u5df2\u5206\u53d1\u7684\u65cb\u94ae\u4e8b\u4ef6\u6570\u91cf\n            mNumRotaryEventsDispatched++;\n        }\n\n        // \u5206\u53d1\u65cb\u94ae\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u56de\u8c03\n        dispatchRotaryEvent(displayType, event, callback);\n        // \u8fd4\u56detrue\u8868\u793a\u4e8b\u4ef6\u5df2\u88ab\u6d88\u8d39\n        return true;\n    }\n}\n</code></pre> <p>\u83b7\u53d6\u5ba2\u6237\u7aef\u53ef\u4ee5\u53c2\u8003 InputCaptureClientController.getClientForInputTypeLocked() \uff0c\u83b7\u53d6\u5230\u5ba2\u6237\u7aef\u540e\u5c31\u5206\u53d1\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u65cb\u94ae\u4e8b\u4ef6\u5206\u53d1\u7ed9\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\uff0c\u6307\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u663e\u793a\u5668\u4e0a\u3002\n     * @param event             \u8981\u5206\u53d1\u7684\u65cb\u94ae\u4e8b\u4ef6\u3002\n     * @param callback          \u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u3002\n     */\n    private void dispatchRotaryEvent(int targetDisplayType, RotaryEvent event,\n                                     ICarInputCallback callback) {\n        // \u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u5206\u53d1\u7684\u65cb\u94ae\u4e8b\u4ef6\u65e5\u5fd7\n        if (DBG_DISPATCH) {\n            Slogf.i(TAG, \"dispatchRotaryEvent:\" + event);\n        }\n\n        // TODO(b/159623196): \u4f7f\u7528HandlerThread\u6765\u5206\u53d1\u4e8b\u4ef6\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4e3b\u7ebf\u7a0b\u3002\n        //     \u9700\u8981\u5728\u6b64\u5904\u548c\u5176\u4ed6\u5206\u53d1\u65b9\u6cd5\u4e2d\u8fdb\u884c\u4fee\u6539\u3002\n        CarServiceUtils.runOnCommon(() -&gt; {\n            // \u6e05\u7a7a\u4e34\u65f6\u4e8b\u4ef6\u5217\u8868\uff0c\u786e\u4fdd\u4e0d\u4f1a\u643a\u5e26\u65e7\u6570\u636e\n            mRotaryEventDispatchScratchList.clear();\n            // \u5c06\u5f53\u524d\u4e8b\u4ef6\u6dfb\u52a0\u5230\u4e34\u65f6\u4e8b\u4ef6\u5217\u8868\u4e2d\n            mRotaryEventDispatchScratchList.add(event);\n            try {\n                // \u8c03\u7528\u5ba2\u6237\u7aef\u56de\u8c03\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u5ba2\u6237\u7aef\n                callback.onRotaryEvents(targetDisplayType, mRotaryEventDispatchScratchList);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u5206\u53d1\u5931\u8d25\u4e14\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n                if (DBG_DISPATCH) {\n                    Slogf.e(TAG, \"Failed to dispatch RotaryEvent \" + event, e);\n                }\n            }\n        });\n    }\n}\n</code></pre>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputservicerotaryeventtokeyevents","title":"CarInputService.rotaryEventToKeyEvents()","text":"<p>\u56de\u5230 CarInputService.onRotaryEvent() \u5982\u679c\u65cb\u94ae\u4e8b\u4ef6\u6ca1\u6709\u5ba2\u6237\u7aef\u5904\u7406\uff0c\u5219\u8f6c\u6362\u6210\u6309\u952e\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5c06\u65cb\u94ae\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u3002\n     *\n     * @param event \u65cb\u94ae\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u65cb\u94ae\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     * @return \u8f6c\u6362\u540e\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\u3002\n     */\n    private static List&lt;KeyEvent&gt; rotaryEventToKeyEvents(RotaryEvent event) {\n        // \u83b7\u53d6\u65cb\u94ae\u4e8b\u4ef6\u4e2d\u7684\u70b9\u51fb\u6b21\u6570\n        int numClicks = event.getNumberOfClicks();\n        // \u6bcf\u6b21\u70b9\u51fb\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6309\u4e0b\u548c\u4e00\u4e2a\u62ac\u8d77\u4e8b\u4ef6\uff0c\u56e0\u6b64\u4e8b\u4ef6\u6570\u91cf\u662f\u70b9\u51fb\u6b21\u6570\u7684\u4e24\u500d\n        int numEvents = numClicks * 2;\n        // \u5224\u65ad\u65cb\u94ae\u65cb\u8f6c\u65b9\u5411\u662f\u5426\u4e3a\u987a\u65f6\u9488\n        boolean clockwise = event.isClockwise();\n        int keyCode;\n\n        // \u6839\u636e\u8f93\u5165\u7c7b\u578b\u786e\u5b9a\u5bf9\u5e94\u7684\u6309\u952e\u4ee3\u7801\n        switch (event.getInputType()) {\n            case CarInputManager.INPUT_TYPE_ROTARY_NAVIGATION:\n                // \u5bfc\u822a\u7c7b\u578b\u7684\u65cb\u94ae\u4e8b\u4ef6\uff0c\u987a\u65f6\u9488\u4e3a\u4e0b\u4e00\u4e2a\uff0c\u9006\u65f6\u9488\u4e3a\u4e0a\u4e00\u4e2a\n                keyCode = clockwise\n                        ? KeyEvent.KEYCODE_NAVIGATE_NEXT\n                        : KeyEvent.KEYCODE_NAVIGATE_PREVIOUS;\n                break;\n            case CarInputManager.INPUT_TYPE_ROTARY_VOLUME:\n                // \u97f3\u91cf\u7c7b\u578b\u7684\u65cb\u94ae\u4e8b\u4ef6\uff0c\u987a\u65f6\u9488\u4e3a\u97f3\u91cf\u589e\u52a0\uff0c\u9006\u65f6\u9488\u4e3a\u97f3\u91cf\u51cf\u5c11\n                keyCode = clockwise\n                        ? KeyEvent.KEYCODE_VOLUME_UP\n                        : KeyEvent.KEYCODE_VOLUME_DOWN;\n                break;\n            default:\n                // \u672a\u77e5\u7684\u65cb\u94ae\u8f93\u5165\u7c7b\u578b\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de\u7a7a\u5217\u8868\n                Slogf.e(TAG, \"Unknown rotary input type: %d\", event.getInputType());\n                return Collections.EMPTY_LIST;\n        }\n\n        // \u521b\u5efa\u7528\u4e8e\u5b58\u50a8\u6309\u952e\u4e8b\u4ef6\u7684\u5217\u8868\n        ArrayList&lt;KeyEvent&gt; keyEvents = new ArrayList&lt;&gt;(numEvents);\n        // \u904d\u5386\u6bcf\u6b21\u70b9\u51fb\uff0c\u751f\u6210\u5bf9\u5e94\u7684\u6309\u4e0b\u548c\u62ac\u8d77\u4e8b\u4ef6\n        for (int i = 0; i &lt; numClicks; i++) {\n            // \u83b7\u53d6\u6bcf\u6b21\u70b9\u51fb\u7684\u65f6\u95f4\u6233\n            long uptime = event.getUptimeMillisForClick(i);\n            // \u521b\u5efa\u6309\u4e0b\u4e8b\u4ef6\n            KeyEvent downEvent = createKeyEvent(/* down= */ true, uptime, uptime, keyCode);\n            // \u521b\u5efa\u62ac\u8d77\u4e8b\u4ef6\n            KeyEvent upEvent = createKeyEvent(/* down= */ false, uptime, uptime, keyCode);\n            // \u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            keyEvents.add(downEvent);\n            keyEvents.add(upEvent);\n        }\n        // \u8fd4\u56de\u751f\u6210\u7684\u6309\u952e\u4e8b\u4ef6\u5217\u8868\n        return keyEvents;\n    }\n\n    /**\n     * \u521b\u5efa\u6309\u952e\u4e8b\u4ef6\u3002\n     *\n     * @param down      \u6307\u793a\u662f\u6309\u4e0b\u4e8b\u4ef6\u8fd8\u662f\u62ac\u8d77\u4e8b\u4ef6\u3002\n     * @param downTime  \u6309\u4e0b\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\u3002\n     * @param eventTime \u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\u3002\n     * @param keyCode   \u6309\u952e\u4ee3\u7801\uff0c\u8868\u793a\u54ea\u4e2a\u6309\u952e\u88ab\u6309\u4e0b\u6216\u62ac\u8d77\u3002\n     * @return \u521b\u5efa\u7684\u6309\u952e\u4e8b\u4ef6\u5bf9\u8c61\u3002\n     */\n    private static KeyEvent createKeyEvent(boolean down, long downTime, long eventTime,\n                                           int keyCode) {\n        return new KeyEvent(\n                downTime, // \u6309\u4e0b\u65f6\u95f4\n                eventTime, // \u4e8b\u4ef6\u65f6\u95f4\n                /* action= */ down ? KeyEvent.ACTION_DOWN : KeyEvent.ACTION_UP, // \u4e8b\u4ef6\u7c7b\u578b\uff1a\u6309\u4e0b\u6216\u62ac\u8d77\n                keyCode, // \u6309\u952e\u4ee3\u7801\n                /* repeat= */ 0, // \u91cd\u590d\u6b21\u6570\n                /* metaState= */ 0, // \u5143\u72b6\u6001\n                /* deviceId= */ 0, // \u8bbe\u5907ID\n                /* scancode= */ 0, // \u626b\u63cf\u7801\n                /* flags= */ 0, // \u6807\u5fd7\n                InputDevice.SOURCE_CLASS_BUTTON // \u8f93\u5165\u8bbe\u5907\u6e90\u7c7b\u578b\n        );\n    }\n}\n</code></pre> <p>\u6839\u636e\u65cb\u94ae\u4e8b\u4ef6\u7684\u8f93\u5165\u7c7b\u578b\uff08\u5982\u5bfc\u822a\u6216\u97f3\u91cf\uff09\uff0c\u786e\u5b9a\u5bf9\u5e94\u7684\u6309\u952e\u4ee3\u7801\u3002</p> <ul> <li>\u5bfc\u822a\u7c7b\u578b\uff1a\u987a\u65f6\u9488\u65cb\u8f6c\u5bf9\u5e94<code>KEYCODE_NAVIGATE_NEXT</code>\uff0c\u9006\u65f6\u9488\u5bf9\u5e94<code>KEYCODE_NAVIGATE_PREVIOUS</code>\u3002</li> <li>\u97f3\u91cf\u7c7b\u578b\uff1a\u987a\u65f6\u9488\u65cb\u8f6c\u5bf9\u5e94<code>KEYCODE_VOLUME_UP</code>\uff0c\u9006\u65f6\u9488\u5bf9\u5e94<code>KEYCODE_VOLUME_DOWN</code>\u3002</li> </ul>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#_10","title":"\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6","text":"","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#carinputserviceoncustominputevent","title":"CarInputService.onCustomInputEvent()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/CarInputService.java\n\npublic class CarInputService extends ICarInput.Stub\n        implements CarServiceBase, InputHalService.InputListener {\n\n    /**\n     * \u5904\u7406\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\n     *\n     * @param event \u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u4e8b\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n     */\n    @Override\n    public void onCustomInputEvent(CustomInputEvent event) {\n        // \u5c1d\u8bd5\u901a\u8fc7\u6355\u83b7\u63a7\u5236\u5668\u5904\u7406\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\n        if (!mCaptureController.onCustomInputEvent(event)) {\n            // \u5982\u679c\u6355\u83b7\u63a7\u5236\u5668\u672a\u6210\u529f\u5904\u7406\u4e8b\u4ef6\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56de\n            Slogf.w(TAG, \"Failed to propagate (%s)\", event);\n            return;\n        }\n        // \u5982\u679c\u4e8b\u4ef6\u6210\u529f\u5904\u7406\uff0c\u8bb0\u5f55\u8c03\u8bd5\u65e5\u5fd7\n        Slogf.d(TAG, \"Succeed injecting (%s)\", event);\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>mCaptureController</code> \u6307\u7684\u662f <code>InputCaptureClientController</code> \uff0c\u5b83\u662f\u5728 <code>CarInputService</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7 <code>mCaptureController = new InputCaptureClientController(context)</code> \u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002</p> <p>\u5904\u7406\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u5904\u7406\u6d41\u7a0b\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7 <code>InputCaptureClientController</code> \u628a\u4e8b\u4ef6\u56de\u8c03\u7ed9\u5ba2\u6237\u7aef\u3002</p>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-input-service/#inputcaptureclientcontrolleronrotaryevent_1","title":"InputCaptureClientController.onRotaryEvent()","text":"<p>\u8fd9\u91cc\u7684 <code>mCaptureController</code> \u6307\u7684\u662f <code>InputCaptureClientController</code> \uff0c\u5b83\u662f\u5728 <code>CarInputService</code> \u7684\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7 <code>mCaptureController = new InputCaptureClientController(context)</code> \u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u7ed9\u5b9a\u7684{@link CustomInputEvent}\u5206\u53d1\u7ed9\u6355\u83b7\u7684\u5ba2\u6237\u7aef\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n     * \u5982\u679c\u6ca1\u6709\u4e3a\u4f20\u5165\u4e8b\u4ef6\u6ce8\u518c\u56de\u8c03\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u64cd\u4f5c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de{@code false}\u3002\n     * &lt;p&gt;\n     * \u5982\u679c\u6709\u591a\u4e2a\u5ba2\u6237\u7aef\u4e3a\u6b64\u4e8b\u4ef6\u6ce8\u518c\uff0c\u5219\u53ea\u6709\u7b2c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4f1a\u6536\u5230\u901a\u77e5\u3002\n     *\n     * @param event \u8981\u5206\u53d1\u7684{@link CustomInputEvent}\n     * @return \u5982\u679c\u4e8b\u4ef6\u88ab\u6d88\u8d39\u5219\u8fd4\u56de{@code true}\u3002\n     */\n    public boolean onCustomInputEvent(CustomInputEvent event) {\n        // \u83b7\u53d6\u4e8b\u4ef6\u7684\u76ee\u6807\u663e\u793a\u7c7b\u578b\n        int displayType = event.getTargetDisplayType();\n        // \u68c0\u67e5\u663e\u793a\u7c7b\u578b\u662f\u5426\u5728\u652f\u6301\u7684\u663e\u793a\u7c7b\u578b\u5217\u8868\u4e2d\n        if (!SUPPORTED_DISPLAY_TYPES.contains(displayType)) {\n            // \u5982\u679c\u4e0d\u652f\u6301\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56defalse\n            Slogf.w(TAG, \"onCustomInputEvent for not supported display:\" + displayType);\n            return false;\n        }\n\n        ICarInputCallback callback;\n        // \u4f7f\u7528\u540c\u6b65\u5757\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n        synchronized (mLock) {\n            // \u83b7\u53d6\u4e0e\u8f93\u5165\u7c7b\u578b\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\n            callback = getClientForInputTypeLocked(displayType,\n                    CarInputManager.INPUT_TYPE_CUSTOM_INPUT_EVENT);\n            if (callback == null) {\n                // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u56de\u8c03\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\u5e76\u8fd4\u56defalse\n                Slogf.w(TAG, \"No client for input: \" + CarInputManager.INPUT_TYPE_CUSTOM_INPUT_EVENT\n                        + \" and display: \" + displayType);\n                return false;\n            }\n        }\n\n        // \u5206\u53d1\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u56de\u8c03\n        dispatchCustomInputEvent(displayType, event, callback);\n        // \u8fd4\u56detrue\u8868\u793a\u4e8b\u4ef6\u5df2\u88ab\u6d88\u8d39\n        return true;\n    }\n}\n</code></pre> <p>\u83b7\u53d6\u5ba2\u6237\u7aef\u53ef\u4ee5\u53c2\u8003 InputCaptureClientController.getClientForInputTypeLocked() \uff0c\u83b7\u53d6\u5230\u5ba2\u6237\u7aef\u540e\u5c31\u5206\u53d1\u4e8b\u4ef6\u7ed9\u5ba2\u6237\u7aef\u3002</p> <pre><code>// packages/services/Car/service/src/com/android/car/InputCaptureClientController.java\n\npublic class InputCaptureClientController {\n\n    /**\n     * \u5c06\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u5206\u53d1\u7ed9\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\u56de\u8c03\u3002\n     *\n     * @param targetDisplayType \u76ee\u6807\u663e\u793a\u5668\u7c7b\u578b\uff0c\u6307\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u663e\u793a\u5668\u4e0a\u3002\n     * @param event             \u8981\u5206\u53d1\u7684\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u3002\n     * @param callback          \u5ba2\u6237\u7aef\u56de\u8c03\u63a5\u53e3\uff0c\u7528\u4e8e\u63a5\u6536\u4e8b\u4ef6\u3002\n     */\n    private void dispatchCustomInputEvent(@DisplayTypeEnum int targetDisplayType,\n                                          CustomInputEvent event,\n                                          ICarInputCallback callback) {\n        // \u5982\u679c\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u5206\u53d1\u7684\u81ea\u5b9a\u4e49\u8f93\u5165\u4e8b\u4ef6\u65e5\u5fd7\n        if (DBG_DISPATCH) {\n            Slogf.d(TAG, \"dispatchCustomInputEvent:\" + event);\n        }\n\n        // \u4f7f\u7528CarServiceUtils.runOnCommon\u65b9\u6cd5\u5c06\u5206\u53d1\u903b\u8f91\u5c01\u88c5\u4e3a\u5f02\u6b65\u4efb\u52a1\n        CarServiceUtils.runOnCommon(() -&gt; {\n            // \u6e05\u7a7a\u4e34\u65f6\u4e8b\u4ef6\u5217\u8868\uff0c\u786e\u4fdd\u4e0d\u4f1a\u643a\u5e26\u65e7\u6570\u636e\n            mCustomInputEventDispatchScratchList.clear();\n            // \u5c06\u5f53\u524d\u4e8b\u4ef6\u6dfb\u52a0\u5230\u4e34\u65f6\u4e8b\u4ef6\u5217\u8868\u4e2d\n            mCustomInputEventDispatchScratchList.add(event);\n            try {\n                // \u8c03\u7528\u5ba2\u6237\u7aef\u56de\u8c03\u65b9\u6cd5\uff0c\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u5ba2\u6237\u7aef\n                callback.onCustomInputEvents(targetDisplayType,\n                        mCustomInputEventDispatchScratchList);\n            } catch (RemoteException e) {\n                // \u5982\u679c\u5206\u53d1\u5931\u8d25\u4e14\u8c03\u8bd5\u6a21\u5f0f\u5f00\u542f\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n                if (DBG_DISPATCH) {\n                    Slogf.e(TAG, \"Failed to dispatch CustomInputEvent \" + event, e);\n                }\n            }\n        });\n    }\n}\n</code></pre>","tags":["Android","car","CarService","CarInputService"]},{"location":"android/car/carservice/car-wifi-service/","title":"Android 15 CarService\u6e90\u780107-CarWifiService","text":"","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#_1","title":"\u63a5\u53e3","text":"","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#icarwifiaidl","title":"ICarWifi.aidl","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/wifi/ICarWifi.aidl\n\n/**\n * ICarWifi \u662f\u4e00\u4e2a\u5185\u90e8 Binder \u63a5\u53e3\uff0c\u7528\u4e8e\u5b9a\u4e49 CarWifiService \u7684\u529f\u80fd\u3002\n * \u8be5\u63a5\u53e3\u7531 CarWifiManager \u4f7f\u7528\uff0c\u7528\u4e8e\u4e0e CarWifiService \u8fdb\u884c\u901a\u4fe1\u3002\n *\n * \u4f5c\u7528\uff1a\n * 1. \u63d0\u4f9b\u4e0e CarWifiService \u7684\u901a\u4fe1\u6865\u6881\u3002\n * 2. \u5b9a\u4e49 CarWifiService \u63d0\u4f9b\u7684\u529f\u80fd\uff08\u5982\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\uff09\u3002\n *\n * \u6ce8\u610f\uff1a\n * - \u8be5\u63a5\u53e3\u4f7f\u7528 AIDL\uff08Android Interface Definition Language\uff09\u5b9a\u4e49\u3002\n * - \u7531\u4e8e\u6807\u8bb0\u4e86 `@hide`\uff0c\u8be5\u63a5\u53e3\u4ec5\u4f9b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\uff0c\u4e0d\u4f1a\u66b4\u9732\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002\n */\ninterface ICarWifi {\n    /**\n     * \u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002\n     *\n     * \u4f5c\u7528\uff1a\n     * - \u8be5\u65b9\u6cd5\u7531 CarWifiManager \u8c03\u7528\uff0c\u7528\u4e8e\u68c0\u67e5\u5f53\u524d\u7cfb\u7edf\u662f\u5426\u652f\u6301\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002\n     * - \u8fd4\u56de\u503c\u4e3a\u5e03\u5c14\u503c\uff0c`true` \u8868\u793a\u652f\u6301\uff0c`false` \u8868\u793a\u4e0d\u652f\u6301\u3002\n     *\n     * \u4f7f\u7528\u573a\u666f\uff1a\n     * - CarWifiManager \u5728\u5c1d\u8bd5\u66f4\u6539\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u4e4b\u524d\uff0c\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\u8fdb\u884c\u6743\u9650\u68c0\u67e5\u3002\n     *\n     * @return {@code true} \u5982\u679c\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\uff1b\u5426\u5219\u8fd4\u56de {@code false}\u3002\n     */\n    boolean canControlPersistTetheringSettings();\n}\n</code></pre> <p><code>ICarWifi</code>\u00a0\u662f\u4e00\u4e2a\u00a0AIDL \u63a5\u53e3\uff0c\u7528\u4e8e\u5b9a\u4e49\u00a0<code>CarWifiService</code>\u00a0\u63d0\u4f9b\u7684\u529f\u80fd\u3002\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u4f5c\u4e3a\u00a0<code>CarWifiService</code>\u00a0\u548c\u00a0<code>CarWifiManager</code>\u00a0\u4e4b\u95f4\u7684\u901a\u4fe1\u6865\u6881\u3002</p> <p>\u901a\u8fc7\u00a0<code>ICarWifi</code>\u00a0\u63a5\u53e3\uff0c<code>CarWifiManager</code>\u00a0\u53ef\u4ee5\u8c03\u7528\u00a0<code>CarWifiService</code>\u00a0\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002</p> <p><code>canControlPersistTetheringSettings()</code> \u68c0\u67e5\u5f53\u524d\u7cfb\u7edf\u662f\u5426\u5141\u8bb8\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002 - <code>true</code>\uff1a\u8868\u793a\u7cfb\u7edf\u652f\u6301\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\uff0c\u5e76\u4e14\u5f53\u524d\u7528\u6237\u6709\u6743\u9650\u63a7\u5236\u5b83\u3002 - <code>false</code>\uff1a\u8868\u793a\u7cfb\u7edf\u4e0d\u652f\u6301\u8be5\u529f\u80fd\uff0c\u6216\u8005\u5f53\u524d\u7528\u6237\u65e0\u6743\u9650\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifimanager","title":"CarWifiManager","text":"<pre><code>// packages/services/Car/car-lib/src/android/car/wifi/CarWifiManager.java\n\n/**\n * CarWifiManager \u63d0\u4f9b API\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u4e0e Wi-Fi \u76f8\u5173\u7684\u64cd\u4f5c\u3002\n * \n * \u4e3b\u8981\u529f\u80fd\uff1a\n * 1. \u4f5c\u4e3a\u5ba2\u6237\u7aef\u63a5\u53e3\uff0c\u4e0e CarWifiService \u901a\u4fe1\u3002\n * 2. \u63d0\u4f9b\u9ad8\u5c42\u6b21\u7684 API\uff0c\u4f9b\u7cfb\u7edf\u5185\u7684\u6a21\u5757\u6216\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u3002\n * 3. \u5c01\u88c5\u4e86\u4e0e CarWifiService \u7684\u4ea4\u4e92\u7ec6\u8282\uff0c\u7b80\u5316\u4e86\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\u3002\n */\n@SystemApi\n@FlaggedApi(Flags.FLAG_PERSIST_AP_SETTINGS)\npublic final class CarWifiManager extends CarManagerBase {\n\n    // ICarWifi \u662f CarWifiService \u7684 AIDL \u63a5\u53e3\uff0c\u7528\u4e8e\u4e0e CarWifiService \u8fdb\u884c\u901a\u4fe1\u3002\n    private final ICarWifi mService;\n\n    /**\n     * \u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316 CarWifiManager\u3002\n     * \n     * @param car    CarBase \u5bf9\u8c61\uff0c\u7528\u4e8e\u7ba1\u7406\u4e0e\u8f66\u8f7d\u670d\u52a1\u7684\u8fde\u63a5\u3002\n     * @param service IBinder \u5bf9\u8c61\uff0c\u8868\u793a CarWifiService \u7684\u8fdc\u7a0b\u670d\u52a1\u63a5\u53e3\u3002\n     * \n     * \u4f5c\u7528\uff1a\n     * - \u5c06 IBinder \u8f6c\u6362\u4e3a ICarWifi \u63a5\u53e3\uff0c\u4f9b\u540e\u7eed\u8c03\u7528\u3002\n     * - \u901a\u8fc7\u7236\u7c7b CarManagerBase \u521d\u59cb\u5316\u4e0e\u8f66\u8f7d\u670d\u52a1\u7684\u8fde\u63a5\u3002\n     * \n     * @hide\n     */\n    public CarWifiManager(ICarBase car, IBinder service) {\n        super(car); // \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u4e0e\u8f66\u8f7d\u670d\u52a1\u7684\u57fa\u672c\u8fde\u63a5\u3002\n        mService = ICarWifi.Stub.asInterface(service); // \u5c06 IBinder \u8f6c\u6362\u4e3a ICarWifi \u63a5\u53e3\u3002\n    }\n\n    /**\n     * \u5f53\u4e0e\u8f66\u8f7d\u670d\u52a1\u7684\u8fde\u63a5\u65ad\u5f00\u65f6\u8c03\u7528\u3002\n     * \n     * \u4f5c\u7528\uff1a\n     * - \u8fd9\u662f\u4e00\u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406\u4e0e\u8f66\u8f7d\u670d\u52a1\u65ad\u5f00\u8fde\u63a5\u7684\u573a\u666f\u3002\n     * - \u5f53\u524d\u5b9e\u73b0\u4e3a\u7a7a\uff0c\u8868\u793a\u4e0d\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\n     * \n     * @hide\n     */\n    @Override\n    public void onCarDisconnected() {}\n\n    /**\n     * \u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002\n     * \n     * \u4f5c\u7528\uff1a\n     * - \u8c03\u7528 CarWifiService \u63d0\u4f9b\u7684 `canControlPersistTetheringSettings()` \u65b9\u6cd5\u3002\n     * - \u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u8868\u793a\u5f53\u524d\u7cfb\u7edf\u662f\u5426\u652f\u6301\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u63a7\u5236\u3002\n     * \n     * \u4f7f\u7528\u573a\u666f\uff1a\n     * - \u7cfb\u7edf\u6a21\u5757\u6216\u5e94\u7528\u7a0b\u5e8f\u5728\u5c1d\u8bd5\u66f4\u6539\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u4e4b\u524d\uff0c\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\u8fdb\u884c\u68c0\u67e5\u3002\n     * \n     * \u6743\u9650\u8981\u6c42\uff1a\n     * - \u8c03\u7528\u6b64\u65b9\u6cd5\u9700\u8981 `Car.PERMISSION_READ_PERSIST_TETHERING_SETTINGS` \u6743\u9650\u3002\n     * \n     * @return {@code true} \u5982\u679c\u53ef\u4ee5\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\uff1b\u5426\u5219\u8fd4\u56de {@code false}\u3002\n     * \n     * @hide\n     */\n    @SystemApi\n    @FlaggedApi(Flags.FLAG_PERSIST_AP_SETTINGS)\n    @RequiresPermission(Car.PERMISSION_READ_PERSIST_TETHERING_SETTINGS)\n    public boolean canControlPersistTetheringSettings() {\n        try {\n            // \u8c03\u7528 CarWifiService \u7684 AIDL \u63a5\u53e3\u65b9\u6cd5\u3002\n            return mService.canControlPersistTetheringSettings();\n        } catch (RemoteException e) {\n            // \u5982\u679c\u53d1\u751f\u8fdc\u7a0b\u901a\u4fe1\u5f02\u5e38\uff0c\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5\u5904\u7406\u5f02\u5e38\u5e76\u8fd4\u56de\u9ed8\u8ba4\u503c\uff08false\uff09\u3002\n            return handleRemoteExceptionFromCarService(e, false);\n        }\n    }\n}\n</code></pre> <p><code>CarWifiManager</code>\u00a0\u662f\u4e00\u4e2a\u00a0\u5ba2\u6237\u7aef\u7ba1\u7406\u7c7b\uff0c\u7528\u4e8e\u4e0e\u00a0<code>CarWifiService</code>\u00a0\u4ea4\u4e92\u3002 <code>canControlPersistTetheringSettings()</code> \u7528\u4e8e\u68c0\u67e5\u5f53\u524d\u7cfb\u7edf\u662f\u5426\u652f\u6301\u63a7\u5236\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#_2","title":"\u521d\u59cb\u5316","text":"<p>\u6839\u636e Android 15 CarService\u6e90\u780102-\u670d\u52a1\u521d\u59cb\u5316 \u7684\u5206\u6790\uff0cCarService \u670d\u52a1\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p>Native\u670d\u52a1\u7684\u521d\u59cb\u5316\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u6784\u5efa\u6bcf\u4e2a\u00a0<code>HalService</code>\u00a0\u5b9e\u4f8b\u3002</li> <li>\u7136\u540e\uff0c\u8c03\u7528\u00a0<code>HalService</code>\u00a0\u7684\u00a0<code>takeProperties()</code>\u00a0\u65b9\u6cd5\u3002</li> <li>\u63a5\u7740\uff0c\u8c03\u7528\u00a0<code>HalService</code>\u00a0\u7684\u00a0<code>init()</code>\u00a0\u65b9\u6cd5\u3002</li> </ul> </li> <li> <p>Java\u670d\u52a1\u7684\u521d\u59cb\u5316\uff1a</p> <ul> <li>\u6784\u5efa\u6bcf\u4e2a\u00a0<code>CarSystemService</code>\u00a0\u5b9e\u4f8b\u3002</li> <li>\u8c03\u7528\u00a0<code>CarSystemService</code>\u00a0\u7684\u00a0<code>init()</code>\u00a0\u65b9\u6cd5\u3002</li> <li>\u6700\u540e\uff0c\u8c03\u7528\u00a0<code>CarSystemService</code>\u00a0\u7684\u00a0<code>onInitComplete()</code>\u00a0\u65b9\u6cd5\u3002</li> </ul> </li> </ul> <p><code>CarWifiService</code>\u00a0\u4e0d\u9700\u8981\u4e0e\u00a0<code>VehicleHal</code>\u00a0\u8fdb\u884c\u4ea4\u4e92\uff0c\u56e0\u6b64\u6ca1\u6709\u76f8\u5173\u7684\u00a0<code>HalService</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece\u00a0<code>CarWifiService</code>\u00a0\u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiservice","title":"CarWifiService","text":"","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiservice_1","title":"CarWifiService\u6784\u9020\u51fd\u6570","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java  \n\n/**  \n * CarWifiService \u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u8f66\u8f7d\u7cfb\u7edf\u8bbe\u8ba1\u7684\u670d\u52a1\uff0c\u8d1f\u8d23\u7ba1\u7406 Wi-Fi \u70ed\u70b9\u529f\u80fd\u3002  \n * \u5b83\u80fd\u591f\u6839\u636e\u6c7d\u8f66\u7684\u7535\u6e90\u72b6\u6001\u3001\u7528\u6237\u8bbe\u7f6e\u4ee5\u53ca\u7cfb\u7edf\u914d\u7f6e\u6765\u542f\u7528\u6216\u7981\u7528 Wi-Fi \u70ed\u70b9\u3002  \n * \u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a  \n * 1. \u6301\u4e45\u5316 Wi-Fi \u70ed\u70b9\u7684\u72b6\u6001\uff08\u542f\u7528\u6216\u7981\u7528\uff09\u3002  \n * 2. \u5728\u7cfb\u7edf\u542f\u52a8\u6216\u7528\u6237\u89e3\u9501\u540e\uff0c\u6839\u636e\u6301\u4e45\u5316\u7684\u72b6\u6001\u81ea\u52a8\u6062\u590d Wi-Fi \u70ed\u70b9\u3002  \n * 3. \u76d1\u542c\u7cfb\u7edf\u914d\u7f6e\u7684\u53d8\u5316\uff0c\u4f8b\u5982\u662f\u5426\u542f\u7528\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u529f\u80fd\u3002  \n * 4. \u4e0e\u6c7d\u8f66\u7535\u6e90\u7ba1\u7406\u548c\u7528\u6237\u7ba1\u7406\u670d\u52a1\u96c6\u6210\uff0c\u786e\u4fdd\u70ed\u70b9\u529f\u80fd\u5728\u5408\u9002\u7684\u65f6\u673a\u542f\u52a8\u6216\u5173\u95ed\u3002  \n */  \npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {  \n    // \u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u670d\u52a1\u548c\u8d44\u6e90\u3002  \n    private final Context mContext;  \n    // \u662f\u5426\u542f\u7528\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u529f\u80fd\uff08\u4ece\u8d44\u6e90\u914d\u7f6e\u4e2d\u8bfb\u53d6\uff09\u3002  \n    private final boolean mIsPersistTetheringCapabilitiesEnabled;  \n    // \u662f\u5426\u542f\u7528\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\uff08\u4ece\u7cfb\u7edf\u8bbe\u7f6e\u4e2d\u8bfb\u53d6\uff09\u3002  \n    private final boolean mIsPersistTetheringSettingEnabled;  \n    // Wi-Fi \u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u7ba1\u7406 Wi-Fi \u70ed\u70b9\u3002  \n    private final WifiManager mWifiManager;  \n    // \u7f51\u7edc\u5171\u4eab\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u542f\u52a8\u6216\u505c\u6b62\u7f51\u7edc\u5171\u4eab\u529f\u80fd\u3002  \n    private final TetheringManager mTetheringManager;  \n    // \u6c7d\u8f66\u7535\u6e90\u7ba1\u7406\u670d\u52a1\uff0c\u7528\u4e8e\u76d1\u542c\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u3002  \n    private final CarPowerManagementService mCarPowerManagementService;  \n    // \u6c7d\u8f66\u7528\u6237\u670d\u52a1\uff0c\u7528\u4e8e\u76d1\u542c\u7cfb\u7edf\u7528\u6237\u7684\u89e3\u9501\u72b6\u6001\u3002  \n    private final CarUserService mCarUserService;  \n\n    public CarWifiService(Context context) {  \n        mContext = context;  \n        // \u4ece\u8d44\u6e90\u914d\u7f6e\u4e2d\u8bfb\u53d6\u662f\u5426\u542f\u7528\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u529f\u80fd\u3002  \n        mIsPersistTetheringCapabilitiesEnabled = context.getResources().getBoolean(R.bool.config_enablePersistTetheringCapabilities);  \n        // \u4ece\u7cfb\u7edf\u8bbe\u7f6e\u4e2d\u8bfb\u53d6\u662f\u5426\u542f\u7528\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u3002  \n        mIsPersistTetheringSettingEnabled = mFeatureFlags.persistApSettings() &amp;&amp;  \n                TextUtils.equals(\"true\", Settings.Global.getString(context.getContentResolver(), ENABLE_PERSISTENT_TETHERING));  \n        // \u521d\u59cb\u5316 Wi-Fi \u548c\u7f51\u7edc\u5171\u4eab\u7ba1\u7406\u5668\u3002  \n        mWifiManager = context.getSystemService(WifiManager.class);  \n        mTetheringManager = context.getSystemService(TetheringManager.class);  \n        // \u521d\u59cb\u5316\u6c7d\u8f66\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u548c\u7528\u6237\u670d\u52a1\u3002  \n        mCarPowerManagementService = CarLocalServices.getService(CarPowerManagementService.class);  \n        mCarUserService = CarLocalServices.getService(CarUserService.class);  \n    }  \n}\n</code></pre> <p><code>CarWifiService</code>\u00a0\u4e3b\u8981\u7528\u4e8e\u7ba1\u7406 Wi-Fi \u70ed\u70b9\u529f\u80fd\u3002\u6784\u9020\u51fd\u6570\u4e3b\u8981\u662f\u521d\u59cb\u5316\u670d\u52a1\u6240\u9700\u7684\u7cfb\u7edf\u670d\u52a1\u548c\u914d\u7f6e\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiserviceinit","title":"CarWifiService.init()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java  \n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {  \n\n    @Override  \n    public void init() {  \n        if (!mIsPersistTetheringCapabilitiesEnabled) {  \n            Slogf.w(TAG, \"Persist tethering capability is not enabled\");  \n            return;  \n        }  \n        // \u6ce8\u518c Wi-Fi \u70ed\u70b9\u72b6\u6001\u56de\u8c03\u3002  \n        mWifiManager.registerSoftApCallback(mHandler::post, mSoftApCallback);  \n        // \u5728\u7528\u6237 0 \u89e3\u9501\u65f6\u6267\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002  \n        mCarUserService.runOnUser0Unlock(this::onSystemUserUnlocked);  \n        // \u6ce8\u518c\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u76d1\u542c\u5668\u3002  \n        mCarPowerManagementService.registerListener(mCarPowerStateListener);  \n\n        if (mFeatureFlags.persistApSettings()) {  \n            // \u6ce8\u518c\u5185\u5bb9\u89c2\u5bdf\u8005\uff0c\u76d1\u542c\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u53d8\u5316\u3002  \n            mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(  \n                    ENABLE_PERSISTENT_TETHERING), false, mPersistTetheringObserver);  \n        }  \n    }  \n}\n</code></pre> <p><code>init()</code> \u65b9\u6cd5\u4e3b\u8981\u662f\u6ce8\u518c Wi-Fi \u70ed\u70b9\u72b6\u6001\u56de\u8c03\u3001\u7535\u6e90\u72b6\u6001\u76d1\u542c\u5668\u548c\u5185\u5bb9\u89c2\u5bdf\u8005\uff0c\u4ee5\u4fbf\u5728\u7cfb\u7edf\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#softapcallback","title":"SoftApCallback","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java\n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {  \n\n    // Soft AP\uff08Wi-Fi \u70ed\u70b9\uff09\u72b6\u6001\u56de\u8c03\uff0c\u7528\u4e8e\u76d1\u542c\u70ed\u70b9\u72b6\u6001\u7684\u53d8\u5316\u3002  \n    private final SoftApCallback mSoftApCallback = new SoftApCallback() {  \n        @Override  \n        public void onStateChanged(int state, int failureReason) {  \n            switch (state) {  \n                case WIFI_AP_STATE_ENABLED -&gt; {  \n                    // \u5f53 Wi-Fi \u70ed\u70b9\u6210\u529f\u542f\u7528\u65f6\uff1a  \n                    Slogf.i(TAG, \"AP enabled successfully\");  \n                    synchronized (mLock) {  \n                        if (mSharedPreferences != null) {  \n                            // \u5c06\u70ed\u70b9\u542f\u7528\u72b6\u6001\u4fdd\u5b58\u5230 SharedPreferences \u4e2d\u3002  \n                            Slogf.i(TAG, \"WIFI_AP_STATE_ENABLED received, saving state in SharedPreferences store\");  \n                            mSharedPreferences.edit().putBoolean(KEY_PERSIST_TETHERING_ENABLED_LAST, true).apply();  \n                        }  \n                    }  \n                    // \u5982\u679c\u6301\u4e45\u5316\u529f\u80fd\u548c\u8bbe\u7f6e\u5747\u542f\u7528\uff0c\u5219\u7981\u7528\u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002  \n                    if (mIsPersistTetheringCapabilitiesEnabled &amp;&amp; mIsPersistTetheringSettingEnabled) {  \n                        setSoftApAutoShutdownEnabled(false);  \n                    }  \n                }  \n                case WIFI_AP_STATE_DISABLED -&gt; {  \n                    // \u5f53 Wi-Fi \u70ed\u70b9\u88ab\u7981\u7528\u65f6\uff1a  \n                    synchronized (mLock) {  \n                        if (mSharedPreferences != null) {  \n                            // \u5c06\u70ed\u70b9\u7981\u7528\u72b6\u6001\u4fdd\u5b58\u5230 SharedPreferences \u4e2d\u3002  \n                            Slogf.i(TAG, \"WIFI_AP_STATE_DISABLED received, saving state in SharedPreferences store\");  \n                            mSharedPreferences.edit().putBoolean(KEY_PERSIST_TETHERING_ENABLED_LAST, false).apply();  \n                        }  \n                    }  \n                }  \n                case WIFI_AP_STATE_FAILED -&gt; {  \n                    // \u5f53 Wi-Fi \u70ed\u70b9\u542f\u7528\u5931\u8d25\u65f6\uff1a  \n                    Slogf.w(TAG, \"WIFI_AP_STATE_FAILED state received\");  \n                    // \u6b64\u65f6\u4e0d\u66f4\u6539 SharedPreferences \u4e2d\u7684\u72b6\u6001\uff0c\u4fdd\u6301\u4e4b\u524d\u7684\u8bbe\u7f6e\u3002  \n                }  \n                default -&gt; {  \n                    // \u5176\u4ed6\u72b6\u6001\u4e0d\u5904\u7406\u3002  \n                }  \n            }  \n        }  \n    };  \n}\n</code></pre> <p><code>SoftApCallback</code>\u00a0\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u7528\u4e8e\u76d1\u542c Wi-Fi \u70ed\u70b9\uff08Soft AP\uff09\u7684\u72b6\u6001\u53d8\u5316\u3002</p> <ul> <li>WIFI_AP_STATE_ENABLED\uff1a\u5c06\u70ed\u70b9\u542f\u7528\u72b6\u6001\u4fdd\u5b58\u5230\u00a0<code>SharedPreferences</code>\u00a0\u4e2d\u3002</li> <li>WIFI_AP_STATE_DISABLED\uff1a\u5c06\u70ed\u70b9\u7981\u7528\u72b6\u6001\u4fdd\u5b58\u5230\u00a0<code>SharedPreferences</code>\u00a0\u4e2d\u3002</li> <li>WIFI_AP_STATE_FAILED\uff1a\u70ed\u70b9\u542f\u7528\u5931\u8d25\u65f6\u7684\u5904\u7406\u3002\u4e0d\u66f4\u6539\u00a0<code>SharedPreferences</code>\u00a0\u4e2d\u7684\u72b6\u6001\uff0c\u4fdd\u6301\u4e4b\u524d\u7684\u8bbe\u7f6e\u3002</li> </ul>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiserviceonsystemuserunlocked","title":"CarWifiService.onSystemUserUnlocked()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java\n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {  \n\n    /**  \n     * \u5f53\u7cfb\u7edf\u7528\u6237 0 \u89e3\u9501\u65f6\u8c03\u7528\u3002  \n     */  \n    private void onSystemUserUnlocked() {  \n        synchronized (mLock) {  \n            // \u521d\u59cb\u5316 SharedPreferences\uff0c\u7528\u4e8e\u5b58\u50a8 Wi-Fi \u70ed\u70b9\u72b6\u6001\u3002  \n            mSharedPreferences = mContext.getSharedPreferences(SHARED_PREF_NAME, Context.MODE_PRIVATE);  \n        }  \n\n        if (mCarPowerManagementService.getPowerState() == CarPowerManager.STATE_ON) {  \n            startTethering();  \n        }  \n    }  \n}\n</code></pre> <p>\u7cfb\u7edf\u7528\u6237 0 \u89e3\u9501\u65f6\u521d\u59cb\u5316 Wi-Fi \u70ed\u70b9\u72b6\u6001\u7684\u5b58\u50a8\uff0c\u5e76\u6839\u636e\u5f53\u524d\u7684\u7535\u6e90\u72b6\u6001\u51b3\u5b9a\u662f\u5426\u542f\u52a8\u7f51\u7edc\u5171\u4eab\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiservicestarttethering","title":"CarWifiService.startTethering()","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java\n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {\n\n    /**\n     * \u542f\u52a8 Wi-Fi \u70ed\u70b9\uff08\u5982\u679c\u4e4b\u524d\u542f\u7528\u4e86\u6301\u4e45\u5316\u8bbe\u7f6e\uff09\u3002\n     * \u8be5\u65b9\u6cd5\u4f1a\u68c0\u67e5\u7cfb\u7edf\u914d\u7f6e\u548c\u7528\u6237\u8bbe\u7f6e\uff0c\u4ee5\u51b3\u5b9a\u662f\u5426\u542f\u52a8 Wi-Fi \u70ed\u70b9\u3002\n     */\n    private void startTethering() {\n        // \u68c0\u67e5\u662f\u5426\u542f\u7528\u4e86\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u529f\u80fd\u548c\u8bbe\u7f6e\u3002\n        // \u5982\u679c\u7cfb\u7edf\u4e0d\u652f\u6301\u6301\u4e45\u5316\u529f\u80fd\u6216\u7528\u6237\u672a\u542f\u7528\u6301\u4e45\u5316\u8bbe\u7f6e\uff0c\u5219\u4e0d\u542f\u52a8\u70ed\u70b9\u3002\n        if (!mIsPersistTetheringCapabilitiesEnabled || !mIsPersistTetheringSettingEnabled) {\n            return; // \u9000\u51fa\u65b9\u6cd5\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n        }\n\n        // \u68c0\u67e5\u5f53\u524d Wi-Fi \u70ed\u70b9\u662f\u5426\u5df2\u7ecf\u542f\u7528\u3002\n        // \u5982\u679c\u70ed\u70b9\u5df2\u7ecf\u542f\u7528\uff0c\u5219\u4e0d\u9700\u8981\u518d\u6b21\u542f\u52a8\u3002\n        if (mWifiManager.isWifiApEnabled()) {\n            return; // \u9000\u51fa\u65b9\u6cd5\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n        }\n\n        // \u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u5730\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90 mSharedPreferences\u3002\n        synchronized (mLock) {\n            // \u68c0\u67e5 SharedPreferences \u662f\u5426\u5df2\u521d\u59cb\u5316\uff0c\u4ee5\u53ca\u4e4b\u524d\u7684\u70ed\u70b9\u72b6\u6001\u662f\u5426\u4e3a\u542f\u7528\u3002\n            // \u5982\u679c SharedPreferences \u672a\u521d\u59cb\u5316\u6216\u4e4b\u524d\u7684\u72b6\u6001\u4e3a\u672a\u542f\u7528\uff0c\u5219\u4e0d\u542f\u52a8\u70ed\u70b9\u3002\n            if (mSharedPreferences == null || !mSharedPreferences.getBoolean(\n                    KEY_PERSIST_TETHERING_ENABLED_LAST, false)) {\n                Slogf.d(TAG, \"Tethering was not enabled last\");\n                return; // \u9000\u51fa\u65b9\u6cd5\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n            }\n        }\n\n        // \u4f7f\u7528 TetheringManager \u542f\u52a8 Wi-Fi \u70ed\u70b9\u3002\n        // TETHERING_WIFI \u6307\u5b9a\u8981\u542f\u52a8\u7684\u7f51\u7edc\u5171\u4eab\u7c7b\u578b\u4e3a Wi-Fi\u3002\n        // mHandler::post \u7528\u4e8e\u5728\u6307\u5b9a\u7684\u5904\u7406\u5668\u4e0a\u6267\u884c\u56de\u8c03\u3002\n        mTetheringManager.startTethering(TETHERING_WIFI, mHandler::post, new StartTetheringCallback() {\n            @Override\n            public void onTetheringFailed(int error) {\n                // \u5982\u679c\u542f\u52a8\u5931\u8d25\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u3002\n                Slogf.e(TAG, \"Starting tethering failed: %d\", error);\n            }\n        });\n    }\n}\n</code></pre> <p><code>startTethering()</code>\u00a0\u65b9\u6cd5\u901a\u8fc7\u4e00\u7cfb\u5217\u6761\u4ef6\u68c0\u67e5\uff0c\u786e\u4fdd\u53ea\u6709\u5728\u9002\u5f53\u7684\u60c5\u51b5\u4e0b\u624d\u542f\u52a8 Wi-Fi \u70ed\u70b9\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#icarpowerstatelistener","title":"ICarPowerStateListener","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java\n\n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {  \n\n    // \u7535\u6e90\u72b6\u6001\u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u7684\u53d8\u5316\u3002  \n    private final ICarPowerStateListener mCarPowerStateListener = new ICarPowerStateListener.Stub() {  \n        @Override  \n        public void onStateChanged(int state, long expirationTimeMs) {  \n            // \u5f53\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u53d8\u4e3a \"ON\" \u65f6\uff0c\u8c03\u7528 onStateOn \u65b9\u6cd5\u3002  \n            if (state == CarPowerManager.STATE_ON) {  \n                onStateOn();  \n            }  \n        }  \n    };  \n\n    /**  \n     * \u5f53\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u53d8\u4e3a \"ON\" \u65f6\u8c03\u7528\u3002  \n     */  \n    private void onStateOn() {  \n        synchronized (mLock) {  \n            if (mSharedPreferences == null) {  \n                Slogf.d(TAG, \"SharedPreferences store has not been initialized\");  \n                return;  \n            }  \n        }  \n        startTethering();  \n    }  \n}\n</code></pre> <p>\u5f53\u6c7d\u8f66\u7535\u6e90\u72b6\u6001\u53d8\u4e3a \"ON\" \u65f6\u8c03\u7528 <code>startTethering()</code> \u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#mpersisttetheringobserver","title":"mPersistTetheringObserver","text":"<pre><code>// packages/services/Car/service/src/com/android/car/wifi/CarWifiService.java\n\npublic final class CarWifiService extends ICarWifi.Stub implements CarServiceBase {\n\n    // \u5185\u5bb9\u89c2\u5bdf\u8005\uff0c\u7528\u4e8e\u76d1\u542c\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u53d8\u5316\u3002\n    // \u5f53\u7528\u6237\u6216\u7cfb\u7edf\u6539\u53d8\u4e86\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u65f6\uff0c\u8be5\u89c2\u5bdf\u8005\u4f1a\u88ab\u89e6\u53d1\u3002\n    private final ContentObserver mPersistTetheringObserver = new ContentObserver(mHandler) {\n        @Override\n        public void onChange(boolean selfChange) {\n            // \u8bb0\u5f55\u65e5\u5fd7\uff0c\u6307\u793a\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u5df2\u53d1\u751f\u53d8\u5316\u3002\n            Slogf.i(TAG, \"%s setting has changed\", ENABLE_PERSISTENT_TETHERING);\n\n            // \u68c0\u67e5\u5f53\u524d\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u662f\u5426\u542f\u7528\u3002\n            // mFeatureFlags.persistApSettings() \u68c0\u67e5\u7cfb\u7edf\u662f\u5426\u652f\u6301\u6301\u4e45\u5316\u8bbe\u7f6e\u3002\n            // Settings.Global.getString() \u4ece\u5168\u5c40\u8bbe\u7f6e\u4e2d\u83b7\u53d6\u6301\u4e45\u5316\u8bbe\u7f6e\u7684\u5f53\u524d\u503c\uff0c\u5e76\u4e0e \"true\" \u6bd4\u8f83\u3002\n            boolean persistTetheringSettingEnabled = mFeatureFlags.persistApSettings() &amp;&amp;\n                    TextUtils.equals(\"true\", Settings.Global.getString(mContext.getContentResolver(), ENABLE_PERSISTENT_TETHERING));\n\n            // \u6839\u636e\u6301\u4e45\u5316\u8bbe\u7f6e\u7684\u72b6\u6001\uff0c\u542f\u7528\u6216\u7981\u7528\u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002\n            // \u5982\u679c\u6301\u4e45\u5316\u8bbe\u7f6e\u88ab\u5173\u95ed\uff0c\u5219\u542f\u7528\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002\n            setSoftApAutoShutdownEnabled(!persistTetheringSettingEnabled);\n        }\n    };\n\n    /**\n     * \u8bbe\u7f6e Wi-Fi \u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002\n     * @param enable \u5982\u679c\u4e3a true\uff0c\u5219\u542f\u7528\u81ea\u52a8\u5173\u95ed\u529f\u80fd\uff1b\u5982\u679c\u4e3a false\uff0c\u5219\u7981\u7528\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002\n     */\n    private void setSoftApAutoShutdownEnabled(boolean enable) {\n        // \u83b7\u53d6\u5f53\u524d\u7684\u70ed\u70b9\u914d\u7f6e\uff0c\u5e76\u4f7f\u7528 Builder \u6a21\u5f0f\u521b\u5efa\u65b0\u7684\u914d\u7f6e\u3002\n        SoftApConfiguration config = new SoftApConfiguration.Builder(\n                mWifiManager.getSoftApConfiguration())\n                // \u8bbe\u7f6e\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u7684\u542f\u7528\u72b6\u6001\u3002\n                .setAutoShutdownEnabled(enable)\n                // \u6784\u5efa\u65b0\u7684\u70ed\u70b9\u914d\u7f6e\u3002\n                .build();\n\n        // \u5c06\u65b0\u7684\u914d\u7f6e\u5e94\u7528\u5230 Wi-Fi \u70ed\u70b9\u3002\n        mWifiManager.setSoftApConfiguration(config);\n    }\n}\n</code></pre> <p>\u5185\u5bb9\u89c2\u5bdf\u8005\u00a0<code>mPersistTetheringObserver</code>\u00a0\u76d1\u542c\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u53d8\u5316\uff0c\u5e76\u6839\u636e\u8bbe\u7f6e\u7684\u72b6\u6001\u8c03\u6574 Wi-Fi \u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#carwifiserviceoninitcomplete","title":"CarWifiService.onInitComplete()","text":"<p>\u8fd9\u91cc\u7684 CarWifiService \u4e0d\u91cd CarSystemService.onInitComplete() \u65b9\u6cd5\u800c\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u73b0\u3002</p>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/carservice/car-wifi-service/#_3","title":"\u603b\u7ed3","text":"<p><code>CarWifiService</code>\u00a0\u7c7b\u7684\u4e3b\u8981\u529f\u80fd\u662f\u7ba1\u7406\u548c\u63a7\u5236\u6c7d\u8f66\u4e2d\u7684 Wi-Fi \u70ed\u70b9\uff08Soft AP\uff09\u529f\u80fd\u3002</p> <ul> <li>\u63d0\u4f9b\u542f\u52a8\u548c\u505c\u6b62 Wi-Fi \u70ed\u70b9\u7684\u529f\u80fd\u3002</li> <li>\u901a\u8fc7\u00a0<code>startTethering()</code>\u00a0\u65b9\u6cd5\uff0c\u6839\u636e\u7cfb\u7edf\u914d\u7f6e\u548c\u7528\u6237\u8bbe\u7f6e\u542f\u52a8 Wi-Fi \u70ed\u70b9\u3002</li> <li>\u76d1\u542c\u548c\u54cd\u5e94\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u53d8\u5316\u3002</li> <li>\u4f7f\u7528\u00a0<code>ContentObserver</code>\u00a0\u76d1\u542c\u7cfb\u7edf\u4e2d\u6301\u4e45\u5316\u7f51\u7edc\u5171\u4eab\u8bbe\u7f6e\u7684\u53d8\u5316\uff0c\u5f53\u8bbe\u7f6e\u6539\u53d8\u65f6\uff0c\u8c03\u6574 Wi-Fi \u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002</li> <li>\u6839\u636e\u6301\u4e45\u5316\u8bbe\u7f6e\u7684\u72b6\u6001\uff0c\u542f\u7528\u6216\u7981\u7528 Wi-Fi \u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u529f\u80fd\u3002</li> <li>\u4f7f\u7528\u00a0<code>setSoftApAutoShutdownEnabled()</code>\u00a0\u65b9\u6cd5\u8bbe\u7f6e\u70ed\u70b9\u7684\u81ea\u52a8\u5173\u95ed\u914d\u7f6e\u3002</li> <li>\u901a\u8fc7\u00a0<code>SharedPreferences</code>\u00a0\u4fdd\u5b58\u548c\u6062\u590d Wi-Fi \u70ed\u70b9\u7684\u72b6\u6001\uff0c\u786e\u4fdd\u5728\u7cfb\u7edf\u91cd\u542f\u6216\u7528\u6237\u5207\u6362\u540e\u80fd\u591f\u6062\u590d\u4e4b\u524d\u7684\u70ed\u70b9\u72b6\u6001\u3002</li> </ul>","tags":["Android","car","CarService","CarWifiService"]},{"location":"android/car/vehicle/android-s-hal-intro/","title":"Android-S Vehicle HAL\u67b6\u6784","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehal","title":"VehicleHAL \u7b80\u4ecb","text":"<ul> <li> <p>\u6e90\u7801\u4f4d\u7f6e : hardware/interfaces/automotive/vehicle/2.0/</p> </li> <li> <p>VehicleHAL \u7c7b\u56fe </p> </li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#_1","title":"\u63a5\u53e3\u6587\u4ef6","text":"<ul> <li>types.hal \u5b9a\u4e49\u7684\u662f\u4e00\u4e9b\u6570\u636e\u7ed3\u6784</li> <li>IVehicle.hal \u5b9a\u4e49\u7684\u662f\u4ece CarService \u5f80 HAL \u8c03\u7528\u7684\u63a5\u53e3</li> <li>IVehicleCallback.hal \u5219\u662f HAL \u5f80 CarService \u4e0a\u62a5\u56de\u8c03\u7684\u63a5\u53e3</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#2-vehiclehal","title":"2. VehicleHal\u521d\u59cb\u5316\u6d41\u7a0b","text":"<p>\u521d\u59cb\u5316\u4ece\u6267\u884c hardware/interfaces/automotive/vehicle/2.0/default/VehicleService.cpp \u7684main\u51fd\u6570\u5f00\u59cb\uff1a</p> <ul> <li>\u521b\u5efa VehiclePropertyStore \u5bf9\u8c61</li> <li>\u521b\u5efa EmulatedVehicleConnector \u5bf9\u8c61</li> <li>\u521b\u5efa EmulatedUserHal \u5bf9\u8c61</li> <li>\u521b\u5efa EmulatedVehicleHal \u5bf9\u8c61</li> <li>\u521b\u5efa VehicleEmulator \u5bf9\u8c61</li> <li>\u521b\u5efa VehicleHalManager \u5bf9\u8c61</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/VehicleService.cpp\n\nint main(int /* argc */, char* /* argv */ []) {\n    //1.  \u521b\u5efa\u4e00\u4e2a VehiclePropertyStore \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528std::make_unique\u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\n    auto store = std::make_unique&lt;VehiclePropertyStore&gt;();\n    //2. \u521b\u5efa\u4e00\u4e2a EmulatedVehicleConnector \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528std::make_unique\u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\n    auto connector = std::make_unique&lt;impl::EmulatedVehicleConnector&gt;();\n    // \u8f7d\u5165\u914d\u7f6e\u58f0\u660e\n    connector-&gt;LoadConfigDeclarations(impl::kVehicleProperties);\n    //3. \u83b7\u53d6 EmulatedUserHal \u5bf9\u8c61\n    auto userHal = connector-&gt;getEmulatedUserHal();\n    //4. \u521b\u5efa\u4e00\u4e2a EmulatedVehicleHal \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528std::make_unique\u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\n    auto hal = std::make_unique&lt;impl::EmulatedVehicleHal&gt;(store.get(), connector.get(), userHal);\n    //5. \u521b\u5efa\u4e00\u4e2a VehicleEmulator \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528std::make_unique\u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\n    auto emulator = std::make_unique&lt;impl::VehicleEmulator&gt;(hal.get());\n    // \u521b\u5efa\u4e00\u4e2a VehicleHalManager \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528std::make_unique\u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\n    auto service = std::make_unique&lt;VehicleHalManager&gt;(hal.get());\n    // \u8bbe\u7f6econnector\u7684value pool\n    connector-&gt;setValuePool(hal-&gt;getValuePool());\n    // \u914d\u7f6eRPC\u7ebf\u7a0b\u6c60\n    configureRpcThreadpool(4, true /* callerWillJoin */);\n\n    ALOGI(\"Registering as service...\");\n    // \u6ce8\u518c\u4e3a\u670d\u52a1\n    status_t status = service-&gt;registerAsService();\n\n    if (status != OK) {\n        ALOGE(\"Unable to register vehicle service (%d)\", status);\n        return 1;\n    }\n\n    ALOGI(\"Ready\");\n    // \u52a0\u5165RPC\u7ebf\u7a0b\u6c60\n    joinRpcThreadpool();\n\n    return 1;\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertystore","title":"VehiclePropertyStore","text":"<p>VehiclePropertyStore\u7684\u7c7b\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u8bbf\u95ee\u8f66\u8f86\u5c5e\u6027\u7684\u914d\u7f6e\u548c\u503c\u3002</p> <ul> <li>registerProperty\uff1a\u6ce8\u518c\u8f66\u8f86\u5c5e\u6027\u7684\u914d\u7f6e\u3002</li> <li>writeValue\uff1a\u5b58\u50a8\u63d0\u4f9b\u7684\u5c5e\u6027\u503c\u3002</li> <li>removeValue\uff1a\u5220\u9664\u6307\u5b9a\u7684\u5c5e\u6027\u503c\u3002</li> <li>removeValuesForProperty\uff1a\u5220\u9664\u6307\u5b9a\u5c5e\u6027\u7684\u6240\u6709\u503c\u3002</li> <li>readAllValues\uff1a\u8bfb\u53d6\u6240\u6709\u5c5e\u6027\u7684\u503c\u3002</li> <li>readValuesForProperty\uff1a\u8bfb\u53d6\u6307\u5b9a\u5c5e\u6027\u7684\u6240\u6709\u503c\u3002</li> <li>readValueOrNull\uff1a\u6839\u636e\u8bf7\u6c42\u8bfb\u53d6\u5c5e\u6027\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u7a7a\u6307\u9488\u3002</li> <li>getConfigOrNull\uff1a\u6839\u636e\u5c5e\u6027ID\u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u7a7a\u6307\u9488\u3002</li> <li>getConfigOrDie\uff1a\u6839\u636e\u5c5e\u6027ID\u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38\u3002</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/include/vhal_v2_0/VehiclePropertyStore.h\n\nclass VehiclePropertyStore {\n\npublic:\n    void registerProperty(const VehiclePropConfig&amp; config, TokenFunction tokenFunc = nullptr);\n\n    /* Stores provided value. Returns true if value was written returns false if config for\n     * example wasn't registered. */\n    bool writeValue(const VehiclePropValue&amp; propValue, bool updateStatus);\n\n    void removeValue(const VehiclePropValue&amp; propValue);\n    void removeValuesForProperty(int32_t propId);\n\n    std::vector&lt;VehiclePropValue&gt; readAllValues() const;\n    std::vector&lt;VehiclePropValue&gt; readValuesForProperty(int32_t propId) const;\n    std::unique_ptr&lt;VehiclePropValue&gt; readValueOrNull(const VehiclePropValue&amp; request) const;\n    std::unique_ptr&lt;VehiclePropValue&gt; readValueOrNull(int32_t prop, int32_t area = 0,\n                                                      int64_t token = 0) const;\n\n    std::vector&lt;VehiclePropConfig&gt; getAllConfigs() const;\n    const VehiclePropConfig* getConfigOrNull(int32_t propId) const;\n    const VehiclePropConfig* getConfigOrDie(int32_t propId) const;\n\n    ...\n\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulatedvehicleconnector","title":"EmulatedVehicleConnector","text":"<p>EmulatedVehicleConnector \u7ee7\u627f\u81ea IPassThroughConnector\uff0c\u662fAndroid\u6c7d\u8f66HAL\uff08Hardware Abstraction Layer\uff09\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u6a21\u62df\u8f66\u8f86\u8fde\u63a5\u5668\u3002 <p>\u8be5\u4ee3\u7801\u7684\u529f\u80fd\u662f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6a21\u62df\u8f66\u8f86\u8fde\u63a5\u5668\uff0c\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u5c5e\u6027\u7684\u8bbe\u7f6e\u548c\u8f6c\u50a8\u8bf7\u6c42\uff0c\u5e76\u4e0e EmulatedUserHal \u8fdb\u884c\u4ea4\u4e92\u3002</p> <ul> <li>getEmulatedUserHal() \u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a EmulatedUserHal \u7c7b\u578b\u7684\u6307\u9488\u3002</li> <li>\u5b9e\u73b0\u4e86 VehicleHalServer \u63a5\u53e3\u4e2d\u7684 triggerSendAllValues() \u51fd\u6570\u3002\u7528\u4e8e\u89e6\u53d1\u5c06\u6240\u6709\u503c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002</li> <li>\u5b9e\u73b0\u4e86 VehicleHalServer \u63a5\u53e3\u4e2d\u7684 onSetProperty() \u51fd\u6570\u3002\u7528\u4e8e\u5904\u7406\u8bbe\u7f6e\u5c5e\u6027\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u5c5e\u6027\u7531 EmulatedUserHal \u652f\u6301\uff0c\u5219\u8c03\u7528 EmulatedUserHal \u7684 onSetProperty() \u51fd\u6570\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u503c\u66f4\u65b0\u5c5e\u6027\u7684\u503c\u3002</li> <li>\u5b9e\u73b0\u4e86 VehicleHalServer \u63a5\u53e3\u4e2d\u7684 onDump() \u51fd\u6570\u3002</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleConnector.h\n\nclass EmulatedVehicleConnector : public IPassThroughConnector&lt;VehicleHalClient, VehicleHalServer&gt; {\n  public:\n    EmulatedVehicleConnector() = default;\n\n    EmulatedUserHal* getEmulatedUserHal();\n\n    // Methods from VehicleHalServer\n    void triggerSendAllValues() override;\n\n    StatusCode onSetProperty(const VehiclePropValue&amp; value, bool updateStatus) override;\n\n    bool onDump(const hidl_handle&amp; fd, const hidl_vec&lt;hidl_string&gt;&amp; options) override;\n\n  private:\n    EmulatedUserHal mEmulatedUserHal;\n};\n\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleConnector.cpp\n...\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalserverloadconfigdeclarations","title":"VehicleHalServer::LoadConfigDeclarations()","text":"<p>\u6211\u4eec\u5728 EmulatedVehicleConnector \u91cc\u5e76\u6ca1\u6709\u770b\u5230 LoadConfigDeclarations() \u51fd\u6570\uff0c\u90a3\u4e48\u662f\u5728\u54ea\u91cc\u5462\uff1f</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/VehicleService.cpp\n\nauto connector = std::make_unique&lt;impl::EmulatedVehicleConnector&gt;();  \nconnector-&gt;LoadConfigDeclarations(impl::kVehicleProperties);\n</code></pre> <p>\u524d\u9762\u4ec0\u4e48\u63d0\u5230\u8fc7 EmulatedVehicleConnector \u7ee7\u627f\u81ea IPassThroughConnector <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleConnector.h\n\nclass EmulatedVehicleConnector : public IPassThroughConnector&lt;VehicleHalClient, VehicleHalServer&gt; {\n}\n</code></pre> <p>\u679c\u7136\uff0c\u6211\u4eec\u5728 VehicleHalServer \u91cc\u627e\u5230\u51fd\u6570 LoadConfigDeclarations()</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleHalServer.h\n\nclass VehicleHalServer : public IVehicleServer {\n    void LoadConfigDeclarations(const std::vector&lt;ConfigDeclaration&gt; additionalProperties);\n}\n</code></pre> <p>\u628a hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/DefaultConfig.h \u91cc\u58f0\u660e\u7684 kVehicleProperties \u914d\u7f6e\u5168\u90e8\u52a0\u8f7d\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulateduserhal","title":"EmulatedUserHal","text":"<p>EmulatedUserHal \u7528\u4e8e\u6a21\u62df\u7528\u6237 HAL \u7684\u884c\u4e3a\uff0c\u901a\u8fc7\u4f7f\u7528 lshal \u8c03\u8bd5\u8bf7\u6c42\u6765\u5b9e\u73b0\u3002</p> <ul> <li>isSupported()\uff1a\u68c0\u67e5\u6a21\u62df\u5668\u662f\u5426\u652f\u6301\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002</li> <li>onSetProperty()\uff1a\u5141\u8bb8\u6a21\u62df\u5668\u8bbe\u7f6e\u5c5e\u6027\uff0c\u5e76\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u5c5e\u6027\u548c\u72b6\u6001\u7801\u3002</li> <li>onGetProperty()\uff1a\u4ece\u6a21\u62df\u5668\u83b7\u53d6\u5c5e\u6027\u503c\uff0c\u5e76\u8fd4\u56de\u5c5e\u6027\u503c\u548c\u72b6\u6001\u7801\u3002</li> <li>dump()\uff1alshal \u547d\u4ee4 dump</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedUserHal.h\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedUserHal.cpp\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulatedvehiclehal","title":"EmulatedVehicleHal","text":"<p>EmulatedVehicleHal \u7c7b\u662f EmulatedVehicleHalIface\u3001VehicleHal \u7684\u5b9e\u73b0 \u7528\u4e8e\u8fde\u63a5\u5230\u6a21\u62df\u5668\u800c\u4e0d\u662f\u771f\u5b9e\u7684\u8f66\u8f86\u7f51\u7edc\u3002</p> <ul> <li>initStaticConfig() : \u7528\u4e8e\u521d\u59cb\u5316\u9759\u6001\u914d\u7f6e\u3002</li> <li>\u5b9e\u73b0 VehicleHal \u63a5\u53e3\u7684\u65b9\u6cd5 : onCreate()\u3001listProperties()\u3001get()\u3001set()\u3001subscribe()\u3001unsubscribe() \u548c dump()\u3002</li> <li>\u5b9e\u73b0 EmulatedVehicleHalIface \u63a5\u53e3\u7684\u65b9\u6cd5 : setPropertyFromVehicle()\u3001getAllProperties() \u548c getAllPropertiesOverride()\u3002</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleEmulator.h\nclass EmulatedVehicleHalIface : public VehicleHal {\n}\n\n\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.h\n\n/** Implementation of VehicleHal that connected to emulator instead of real vehicle network. */\nclass EmulatedVehicleHal : public EmulatedVehicleHalIface {\npublic:\n    EmulatedVehicleHal(VehiclePropertyStore* propStore, VehicleHalClient* client,\n                       EmulatedUserHal* emulatedUserHal = nullptr);\n\n    //  Methods from VehicleHal\n    void onCreate() override;\n    std::vector&lt;VehiclePropConfig&gt; listProperties() override;\n    VehiclePropValuePtr get(const VehiclePropValue&amp; requestedPropValue,\n                            StatusCode* outStatus) override;\n    StatusCode set(const VehiclePropValue&amp; propValue) override;\n    StatusCode subscribe(int32_t property, float sampleRate) override;\n    StatusCode unsubscribe(int32_t property) override;\n    bool dump(const hidl_handle&amp; fd, const hidl_vec&lt;hidl_string&gt;&amp; options) override;\n\n    //  Methods from EmulatedVehicleHalIface\n    bool setPropertyFromVehicle(const VehiclePropValue&amp; propValue) override;\n    std::vector&lt;VehiclePropValue&gt; getAllProperties() const override;\n    void getAllPropertiesOverride();\n\nprivate:\n\n    VehiclePropertyStore* mPropStore;\n    VehicleHalClient* mVehicleClient;\n    EmulatedUserHal* mEmulatedUserHal;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehicleemulator","title":"VehicleEmulator","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleEmulator.h\n\nclass VehicleEmulator : public MessageProcessor {\n   public:\n    VehicleEmulator(EmulatedVehicleHalIface* hal);\n\nprivate:\n    EmulatedVehicleHalIface* mHal;\n    std::unique_ptr&lt;SocketComm&gt; mSocketComm;\n    std::unique_ptr&lt;PipeComm&gt; mPipeComm;\n};\n\n\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleEmulator.cpp\n\nVehicleEmulator::VehicleEmulator(EmulatedVehicleHalIface* hal) : mHal{hal} {\n    mHal-&gt;registerEmulator(this);\n\n    ALOGI(\"Starting SocketComm\");\n    mSocketComm = std::make_unique&lt;SocketComm&gt;(this);\n    mSocketComm-&gt;start();\n\n    if (isInEmulator()) {\n        ALOGI(\"Starting PipeComm\");\n        mPipeComm = std::make_unique&lt;PipeComm&gt;(this);\n        mPipeComm-&gt;start();\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalmanager","title":"VehicleHalManager","text":"<ul> <li>\u91cd\u7f6e HidlVecOfVehiclePropValuePool HIDL\u5c5e\u6027\u5bf9\u8c61\u6c60\u5927\u5c0f</li> <li>\u5f00\u542f\u4e8b\u4ef6\u6d88\u8d39\u7740\u961f\u5217</li> <li>VehicleHal \u521d\u59cb\u5316</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/include/vhal_v2_0/VehicleHalManager.h\n\nclass VehicleHalManager : public IVehicle {\npublic:\n    VehicleHalManager(VehicleHal* vehicleHal)\n        : mHal(vehicleHal),\n         // 1. mSubscriptionManager\u6210\u5458\u53d8\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u7ed1\u5b9a\u5230onAllClientsUnsubscribed\u65b9\u6cd5\u7684\u51fd\u6570\u5bf9\u8c61\u3002\n         // \u8be5\u51fd\u6570\u5bf9\u8c61\u4f7f\u7528std::bind\u7ed1\u5b9a\u4e86this\u6307\u9488\u548cstd::placeholders::_1\u5360\u4f4d\u7b26\u3002\n          mSubscriptionManager(std::bind(&amp;VehicleHalManager::onAllClientsUnsubscribed,\n                                         this, std::placeholders::_1)) {\n        init();\n    }\n\n    ...\n}\n\n\nhardware/interfaces/automotive/vehicle/2.0/default/common/src/VehicleHalManager.cpp\n\nvoid VehicleHalManager::init() {\n    ALOGI(\"VehicleHalManager::init\");\n\n    // \u8c03\u6574 mHidlVecOfVehiclePropValuePool \u7684\u5927\u5c0f\u4e3a 20\n    // constexpr auto kMaxHidlVecOfVehiclePropValuePoolSize = 20;\n    mHidlVecOfVehiclePropValuePool.resize(kMaxHidlVecOfVehiclePropValuePoolSize);\n\n    // \u5f00\u542f\u4e8b\u4ef6\u6d88\u8d39\u7740\u961f\u5217\n    mBatchingConsumer.run(&amp;mEventQueue, // \u542f\u52a8\u6279\u5904\u7406\u6d88\u8d39\u8005\u7ebf\u7a0b\n                          kHalEventBatchingTimeWindow, // \u6279\u5904\u7406\u65f6\u95f4\u7a97\u53e3\n                          std::bind(&amp;VehicleHalManager::onBatchHalEvent, // \u7ed1\u5b9a onBatchHalEvent \u51fd\u6570\n                                    this, _1));\n\n    // \u521d\u59cb\u5316 VehicleHal\n    mHal-&gt;init(&amp;mValueObjectPool,\n               std::bind(&amp;VehicleHalManager::onHalEvent, this, _1), // \u7ed1\u5b9a onHalEvent \u51fd\u6570\n               std::bind(&amp;VehicleHalManager::onHalPropertySetError, this, // \u7ed1\u5b9a onHalPropertySetError \u51fd\u6570\n                         _1, _2, _3));\n\n    // \u521d\u59cb\u5316\u4ece VehicleHal \u6536\u5230\u7684 vehicle \u5c5e\u6027\u7684\u7d22\u5f15\n    auto supportedPropConfigs = mHal-&gt;listProperties(); // \u83b7\u53d6\u652f\u6301\u7684\u5c5e\u6027\u914d\u7f6e\u5217\u8868\n    mConfigIndex.reset(new VehiclePropConfigIndex(supportedPropConfigs)); // \u4f7f\u7528\u652f\u6301\u7684\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u521b\u5efaVehiclePropConfigIndex\u5bf9\u8c61\n\n    std::vector&lt;int32_t&gt; supportedProperties( // \u521b\u5efa\u652f\u6301\u7684\u5c5e\u6027\u5217\u8868\n        supportedPropConfigs.size());\n    for (const auto&amp; config : supportedPropConfigs) {\n        supportedProperties.push_back(config.prop); // \u5c06\u652f\u6301\u7684\u5c5e\u6027\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalinit","title":"VehicleHal.init()","text":"<p>VehicleHal.h \u521d\u59cb\u5316\u505a\u4e86\u4ee5\u4e0b\u64cd\u4f5c\uff1a   - \u521d\u59cb\u5316 mValuePool  - \u521d\u59cb\u5316 mOnHalEvent  - \u521d\u59cb\u5316 mOnHalPropertySetError \u53d8\u91cf  - \u8c03\u7528 onCreate()</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/include/vhal_v2_0/VehicleHal.h\n\nclass VehicleHal {\n\n    ...\n\n    /**  \n    * Override this method if you need to do one-time initialization.  \n    */  \n    virtual void onCreate() {}\n\n    void init(\n        VehiclePropValuePool* valueObjectPool,\n        const HalEventFunction&amp; onHalEvent,\n        const HalErrorFunction&amp; onHalError) {\n        mValuePool = valueObjectPool;\n        mOnHalEvent = onHalEvent;\n        mOnHalPropertySetError = onHalError;\n\n        onCreate();\n    }\n\n    ...\n\n}\n</code></pre> <p>\u8c03\u7528 onCreate() \u51fd\u6570\uff0c\u904d\u5386\u5c5e\u6027\u5217\u8868\u5e76\u4ee5 mPropStore\uff0c\u5373 VehiclePropertyStore \u4fdd\u5b58\u5f53\u524d\u503c</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleEmulator.h\nclass EmulatedVehicleHalIface : public VehicleHal {\n}\n\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.h\nclass EmulatedVehicleHal : public EmulatedVehicleHalIface {\n    // Methods from VehicleHal  \n    void onCreate() override;\n}\n\nhardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.cpp\n// \u89e3\u6790\u652f\u6301\u7684\u5c5e\u6027\u5217\u8868\u5e76\u751f\u6210\u5305\u542b\u5f53\u524d\u503c\u7684\u5c5e\u6027\u503c\u5411\u91cf\u3002 \nvoid EmulatedVehicleHal::onCreate() {\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehal_1","title":"VehicleHal\u542f\u52a8\u5e8f\u5217\u56fe","text":"<pre><code>\nsequenceDiagram\n\nVehicleService -&gt;&gt; VehicleService:main()\n    Note over VehicleService : \u8fdb\u7a0b\u4e3b\u5165\u53e3\uff0c\u521d\u59cb\u5316 VehicleHal \u7b49\uff0c\u5e76\u6ce8\u518c\u670d\u52a1\n\nVehicleService -&gt;&gt; VehiclePropertyStore:EmulatedVehicleHal() \nNote over VehiclePropertyStore : \u5e76\u4f7f\u7528 std::make_unique \u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\uff0c\u5e76\u8fd4\u56de\u5bf9\u8c61 store\n\nVehicleService -&gt;&gt; EmulatedVehicleConnector:EmulatedVehicleConnector()\nNote over EmulatedVehicleConnector : \u5e76\u4f7f\u7528 std::make_unique \u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\uff0c\u5e76\u8fd4\u56de\u5bf9\u8c61 connector\n\nVehicleService -&gt;&gt; EmulatedVehicleHal:EmulatedVehicleHal()\nNote over EmulatedVehicleHal : \u5e76\u4f7f\u7528 std::make_unique \u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\uff0c\u6784\u9020\u51fd\u6570\u4f20\u5165VehiclePropertyStore\u3001VehicleHalClient\u3001EmulatedUserHal\uff0c\u5e76\u8fd4\u56de\u5bf9\u8c61 hal\n\nVehicleService -&gt;&gt; VehicleEmulator::VehicleEmulator(EmulatedVehicleHalIface* hal)\nNote over VehicleEmulator : \u5e76\u4f7f\u7528 std::make_unique \u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\uff0c\u6784\u9020\u51fd\u6570\u4f20\u5165EmulatedVehicleHalIface\uff0c\u5e76\u8fd4\u56de\u5bf9\u8c61 emulator\n\nVehicleService -&gt;&gt; VehicleHalManager::VehicleHalManager(VehicleHal* vehicleHal)\nNote over VehicleHalManager : \u5e76\u4f7f\u7528 std::make_unique \u8fdb\u884c\u667a\u80fd\u6307\u9488\u7684\u521d\u59cb\u5316\uff0cVehicleHal\uff0c\u5e76\u8fd4\u56de\u5bf9\u8c61 service\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#typeshal","title":"types.hal","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertytype","title":"VehiclePropertyType","text":"<p>\u8f66\u8f86\u5c5e\u6027\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u679a\u4e3e\u652f\u6301\u7684\u8f66\u8f86\u5c5e\u6027\u6570\u636e\u7c7b\u578b\u3002\n * \n * \u7528\u4e8e\u5728VehicleProperty\u679a\u4e3e\u4e2d\u521b\u5efa\u5c5e\u6027ID\u3002\n */\nenum VehiclePropertyType : int32_t {\n    STRING          = 0x00100000, // \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c1048576\n    BOOLEAN         = 0x00200000, // \u5e03\u5c14\u7c7b\u578b\uff0c2097152\n    INT32           = 0x00400000, // 32\u4f4d\u6574\u6570\u7c7b\u578b\uff0c4194304\n    INT32_VEC       = 0x00410000, // 32\u4f4d\u6574\u6570\u5411\u91cf\u7c7b\u578b\uff0c4259840\n    INT64           = 0x00500000, // 64\u4f4d\u6574\u6570\u7c7b\u578b\uff0c5242880\n    INT64_VEC       = 0x00510000, // 64\u4f4d\u6574\u6570\u5411\u91cf\u7c7b\u578b\uff0c5308416\n    FLOAT           = 0x00600000, // \u6d6e\u70b9\u6570\u7c7b\u578b\uff0c6291456\n    FLOAT_VEC       = 0x00610000, // \u6d6e\u70b9\u6570\u5411\u91cf\u7c7b\u578b\uff0c6356992\n    BYTES           = 0x00700000, // \u5b57\u8282\u7c7b\u578b\uff0c7340032\n\n    /**     \n     * \u6807\u91cf\u6216\u5411\u91cf\u7c7b\u578b\u7684\u4efb\u610f\u7ec4\u5408\u3002\u5177\u4f53\u683c\u5f0f\u5fc5\u987b\u5728\u5c5e\u6027\u7684\u63cf\u8ff0\u4e2d\u63d0\u4f9b\u3002\n     *     \n     * \u5bf9\u4e8e\u4f9b\u5e94\u5546\u7684\u6df7\u5408\u7c7b\u578b\u5c5e\u6027\uff0cconfigArray\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u7ed3\u6784\u8fdb\u884c\u683c\u5f0f\u5316\u3002\n     *      \n     * configArray[0]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u5b57\u7b26\u4e32\u503c\n     * configArray[1]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u5e03\u5c14\u503c\u3002\n     * configArray[2]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u6574\u6570\u503c\u3002\n     * configArray[3]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u6574\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[4]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u957f\u6574\u6570\u503c\u3002\n     * configArray[5]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u957f\u6574\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[6]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u6d6e\u70b9\u6570\u503c\u3002\n     * configArray[7]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[8]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u5b57\u8282\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * \u4f8b\u5982\uff1a\n     * {@code configArray = {1, 1, 1, 3, 0, 0, 0, 0, 0}} \u8868\u793a\u5c5e\u6027\u5177\u6709\n     * \u5b57\u7b26\u4e32\u503c\u3001\u5e03\u5c14\u503c\u3001\u6574\u6570\u503c\u548c\u4e00\u4e2a\u5305\u542b3\u4e2a\u6574\u6570\u7684\u6570\u7ec4\u3002\n     */\n    MIXED           = 0x00e00000, // \u6df7\u5408\u7c7b\u578b\uff0c14680064\n\n    MASK            = 0x00ff0000 // \u5c5e\u6027\u7c7b\u578b\u63a9\u7801\uff0c16711680\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclearea","title":"VehicleArea","text":"<p>\u8f66\u8f86\u533a\u57df\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u8f66\u8f86\u533a\u57df\n * \u7528\u4e8e\u6784\u5efa VehicleProperty \u679a\u4e3e\u4e2d\u7684\u5c5e\u6027ID\u3002\n *\n * \u4e00\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0e\u7279\u5b9a\u7684\u8f66\u8f86\u533a\u57df\u76f8\u5173\u8054\u3002\u4f8b\u5982\uff0cVehicleProperty:DOOR_LOCK \u5c5e\u6027\u5fc5\u987b\u4e0e\u7279\u5b9a\u7684\u8f66\u95e8\u76f8\u5173\u8054\uff0c\n * \u56e0\u6b64\u8be5\u5c5e\u6027\u5fc5\u987b\u6807\u8bb0\u4e3a VehicleArea:DOOR \u6807\u5fd7\u3002\n *\n * \u5176\u4ed6\u5c5e\u6027\u53ef\u80fd\u4e0e\u7279\u5b9a\u7684\u8f66\u8f86\u533a\u57df\u65e0\u5173\u3002\u8fd9\u4e9b\u5c5e\u6027\u5fc5\u987b\u5177\u6709 VehicleArea:GLOBAL \u6807\u5fd7\u3002\n *\n * [\u5b9a\u4e49] \u533a\u57df\uff1a\u533a\u57df\u8868\u793a AreaType \u7684\u4e00\u4e2a\u552f\u4e00\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c AreaType \u662f WINDOW \uff0c\u5219\u4e00\u4e2a\u533a\u57df\u53ef\u4ee5\u662f FRONT_WINDSHIELD \u3002\n *\n * [\u5b9a\u4e49] \u533a\u57dfID\uff1a\u533a\u57dfID \u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u533a\u57df\u7684\u7ec4\u5408\uff0c\u4f7f\u7528 Area \u679a\u4e3e\u7684\u4f4d\u63a9\u7801\u8868\u793a\u3002\u4e0d\u540c\u7684 AreaType \u4e0d\u80fd\u5728\u4e00\u4e2a\u5355\u72ec\u7684 AreaID \u4e2d\u6df7\u5408\u3002\n * \u4f8b\u5982\uff0c\u7a97\u53e3\u533a\u57df\u4e0d\u80fd\u4e0e\u5ea7\u4f4d\u533a\u57df\u7ec4\u5408\u5728\u4e00\u4e2a AreaID \u4e2d\u3002\n *\n * \u6620\u5c04\u5206\u533a\u5c5e\u6027\u5230\u533a\u57dfID \u7684\u89c4\u5219\uff1a\n *  - \u5c5e\u6027\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2a\u5728\u5c5e\u6027\u503c\u66f4\u6539\u65f6\u53d7\u5f71\u54cd\u7684 AreaID \u6570\u7ec4\u3002\n *  - \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u8868\u793a\u4e00\u4e2a AreaID \uff0c\u5728\u8be5 AreaID \u4e2d\uff0c\u5c5e\u6027\u503c\u53ea\u80fd\u5728 AreaID \u4e2d\u7684\u6240\u6709\u533a\u57df\u4e2d\u540c\u65f6\u66f4\u6539\uff0c\u800c\u4e0d\u80fd\u72ec\u7acb\u66f4\u6539\u3002\n *    \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5c5e\u6027\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\u4e2d\u66f4\u6539\u65f6\uff0c\u5b83\u5fc5\u987b\u81ea\u52a8\u5728 AreaID \u4e2d\u7684\u6240\u6709\u5176\u4ed6\u533a\u57df\u4e2d\u66f4\u6539\u3002\n *  - \u5c5e\u6027\u503c\u5fc5\u987b\u5728\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684 AreaID \u4e2d\u72ec\u7acb\u53ef\u63a7\u3002\n *  - \u533a\u57df\u5728 AreaID \u6570\u7ec4\u4e2d\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u533a\u57df\u53ea\u80fd\u662f AreaID \u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\u3002\n *\n * [\u5b9a\u4e49] \u5168\u5c40\u5c5e\u6027\uff1a\u9002\u7528\u4e8e\u6574\u4e2a\u8f66\u8f86\u5e76\u4e14\u4e0d\u4e0e\u7279\u5b9a\u533a\u57df\u76f8\u5173\u8054\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0cFUEL_LEVEL\uff0cHVAC_STEERING_WHEEL_HEAT\u3002\n *\n * \u6620\u5c04\u5168\u5c40\u5c5e\u6027\u5230\u533a\u57dfID \u7684\u89c4\u5219\uff1a\n *  - \u5168\u5c40\u5c5e\u6027\u4e0d\u5f97\u6620\u5c04\u5230\u533a\u57dfID\u3002\n*/\nenum VehicleArea : int32_t {\n    GLOBAL      = 0x01000000, // 16777216\n    WINDOW      = 0x03000000, // WINDOW\u6620\u5c04\u5230VehicleAreaWindow\u679a\u4e3e\uff0c50331648\n    MIRROR      = 0x04000000, // MIRROR\u6620\u5c04\u5230VehicleAreaMirror\u679a\u4e3e\uff0c67108864\n    SEAT        = 0x05000000, // SEAT\u6620\u5c04\u5230VehicleAreaSeat\u679a\u4e3e\uff0c83886080\n    DOOR        = 0x06000000, // DOOR\u6620\u5c04\u5230VehicleAreaDoor\u679a\u4e3e\uff0c100663296\n    WHEEL       = 0x07000000, // WHEEL\u6620\u5c04\u5230VehicleAreaWheel\u679a\u4e3e\uff0c117440512\n\n    MASK        = 0x0f000000, //251658240\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertygroup","title":"VehiclePropertyGroup","text":"<p>\u8f66\u8f86\u5c5e\u6027\u5206\u7ec4\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u5b9a\u4e49\u4e86\u5c5e\u6027\u7ec4\u7684\u679a\u4e3e\u7c7b\u578b\u3002\n *\n * \u7528\u4e8e\u5728VehicleProperty\u679a\u4e3e\u4e2d\u521b\u5efa\u5c5e\u6027ID\u3002\n */\nenum VehiclePropertyGroup : int32_t {\n    /**\n     * \n     */\n    SYSTEM      = 0x10000000, // \u5728AOSP\u4e2d\u58f0\u660e\u7684\u5c5e\u6027\u5fc5\u987b\u4f7f\u7528\u6b64\u6807\u5fd7\uff0c 268435456\n\n    /**\n     * \n     */\n    VENDOR      = 0x20000000, // \u7531\u4f9b\u5e94\u5546\u58f0\u660e\u7684\u5c5e\u6027\u5fc5\u987b\u4f7f\u7528\u6b64\u6807\u5fd7\uff0c 536870912\n\n    MASK        = 0xf0000000, // -268435456 ?\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehicleareawindow","title":"VehicleAreaWindow","text":"<p>\u8f66\u8f86\u7a97\u6237\u533a\u57df\u5c5e\u6027</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u5b9a\u4e49\u4e86\u8f66\u8f86\u4e2d\u7684\u5404\u79cd\u6321\u98ce\u73bb\u7483/\u7a97\u6237\u3002\n */\nenum VehicleAreaWindow : int32_t {\n    FRONT_WINDSHIELD  = 0x00000001,  // \u524d\u6321\u98ce\u73bb\u7483\uff0c1\n    REAR_WINDSHIELD   = 0x00000002,  // \u540e\u6321\u98ce\u73bb\u7483\uff0c2\n    ROW_1_LEFT        = 0x00000010,  // \u7b2c\u4e00\u6392\u5de6\u4fa7\u7a97\u6237\uff0c16\n    ROW_1_RIGHT       = 0x00000040,  // \u7b2c\u4e00\u6392\u53f3\u4fa7\u7a97\u6237\uff0c64\n    ROW_2_LEFT        = 0x00000100,  // \u7b2c\u4e8c\u6392\u5de6\u4fa7\u7a97\u6237\uff0c256\n    ROW_2_RIGHT       = 0x00000400,  // \u7b2c\u4e8c\u6392\u53f3\u4fa7\u7a97\u6237\uff0c1024\n    ROW_3_LEFT        = 0x00001000,  // \u7b2c\u4e09\u6392\u5de6\u4fa7\u7a97\u6237\uff0c4096\n    ROW_3_RIGHT       = 0x00004000,  // \u7b2c\u4e09\u6392\u53f3\u4fa7\u7a97\u6237\uff0c16384\n\n    ROOF_TOP_1        = 0x00010000,  // \u9876\u90e81\u53f7\u7a97\u6237\uff0c65536\n    ROOF_TOP_2        = 0x00020000,  // \u9876\u90e82\u53f7\u7a97\u6237\uff0c131072\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertyaccess","title":"VehiclePropertyAccess","text":"<p>\u8f66\u8f86\u5c5e\u6027\u8bbf\u95ee\u6743\u9650</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * Property config \u5b9a\u4e49\u4e86\u5b83\u7684\u529f\u80fd\u3002API\u7684\u7528\u6237\u5fc5\u987b\u9996\u5148\u83b7\u53d6 property config\uff0c\n * \u4ee5\u4e86\u89e3 get() \u547d\u4ee4\u7684\u8f93\u51fa\uff0c\u5e76\u786e\u4fdd set() \u6216 events \u547d\u4ee4\u4e0e\u9884\u671f\u8f93\u51fa\u540c\u6b65\u3002\n */\nenum VehiclePropertyAccess : int32_t {\n    NONE = 0x00, // \u6ca1\u6709\u8bbf\u95ee\u6743\u9650\uff0c0\n    READ = 0x01, // \u53ea\u8bfb\u6743\u9650\uff0c1\n    WRITE = 0x02, // \u53ea\u5199\u6743\u9650\uff0c2\n    READ_WRITE = 0x03, // \u8bfb\u5199\u6743\u9650\uff0c3\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertychangemode","title":"VehiclePropertyChangeMode","text":"<p>\u8f66\u8f86\u5c5e\u6027\u53d8\u5316\u6a21\u5f0f</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u63cf\u8ff0\u5c5e\u6027\u503c\u5982\u4f55\u53d8\u5316\u7684\u679a\u4e3e\u7c7b\u578b\n */\nenum VehiclePropertyChangeMode : int32_t {\n    /**     \n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u4e0d\u80fd\u88ab\u66f4\u6539\u3002\u4e0d\u652f\u6301\u5bf9\u8fd9\u4e9b\u5c5e\u6027\u8fdb\u884c subscribe \u8ba2\u9605\u3002\u53ea\u80fd IVehicle.get() \u83b7\u53d6\n     */\n    STATIC = 0x00,\n\n    /**\n     * ON_CHANGE \u8fd9\u4e2a\u7c7b\u578b\u7684\u5c5e\u6027\u5f53\u53d8\u5316\u65f6\u5fc5\u987b\u4e0a\u62a5\n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u5728\u53d1\u751f\u53d8\u5316\u65f6\u5fc5\u987b\u62a5\u544a\u3002 IVehicle.get() \u8c03\u7528\u5fc5\u987b\u8fd4\u56de\u5f53\u524d\u503c\u3002\n     * \u5bf9\u4e8e\u6b64\u5c5e\u6027\u7684\u8bbe\u7f6e\u64cd\u4f5c\u88ab\u5047\u5b9a\u4e3a\u5f02\u6b65\u7684\u3002\u5f53\u5728 IVehicle.set() \u4e4b\u540e\u8bfb\u53d6\u5c5e\u6027\uff08\u4f7f\u7528 IVehicle.get() \uff09\u65f6\uff0c\n     * \u5b83\u53ef\u80fd\u4ecd\u7136\u8fd4\u56de\u65e7\u503c\uff0c\u76f4\u5230\u652f\u6301\u6b64\u5c5e\u6027\u7684\u5e95\u5c42\u786c\u4ef6\u5b9e\u9645\u4e0a\u6539\u53d8\u4e86\u72b6\u6001\u3002\u4e00\u65e6\u72b6\u6001\u6539\u53d8\uff0c\u5c5e\u6027\u5fc5\u987b\u4f5c\u4e3a\u4e8b\u4ef6\u5206\u53d1\u5df2\u66f4\u6539\u7684\u503c\u3002\n     */\n    ON_CHANGE = 0x01,\n\n    /**\n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u8fde\u7eed\u53d8\u5316\uff0c\u5e76\u4e14\u9700\u8981\u56fa\u5b9a\u7684\u91c7\u6837\u7387\u6765\u68c0\u7d22\u6570\u636e\u3002\u5b9e\u73b0\u8005\u53ef\u4ee5\u9009\u62e9\u5728\u91cd\u8981\u7684\u503c\u53d8\u5316\u65f6\u53d1\u9001\u989d\u5916\u7684\u901a\u77e5\u3002\n     */\n    CONTINUOUS = 0x02,\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#subscribeoptions","title":"SubscribeOptions","text":"<p>\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u8ba2\u9605\u4fe1\u606f</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u5c01\u88c5\u4e86\u6709\u5173\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\n */\nstruct SubscribeOptions {\n    /** \u8981\u8ba2\u9605\u7684\u5c5e\u6027 */\n    int32_t propId;\n\n    /**\n     * \u91c7\u6837\u7387\uff0c\u4ee5\u8d6b\u5179(Hz)\u4e3a\u5355\u4f4d\u3002\n     *\n     * \u5bf9\u4e8e\u5177\u6709 VehiclePropertyChangeMode::CONTINUOUS \u7684\u5c5e\u6027\uff0c\u5fc5\u987b\u63d0\u4f9b\u3002\n     * \u8be5\u503c\u5fc5\u987b\u5728\u7ed9\u5b9a\u5c5e\u6027\u7684 VehiclePropConfig#minSamplingRate .. VehiclePropConfig#maxSamplingRate \u8303\u56f4\u5185\u3002\n     * \u6b64\u503c\u8868\u793a\u5ba2\u6237\u7aef\u5e0c\u671b\u6bcf\u79d2\u63a5\u6536\u591a\u5c11\u6b21\u66f4\u65b0\u3002\n     */\n    float sampleRate;\n\n    /** \u6307\u793a\u8981\u76d1\u542c\u54ea\u4e9b\u4e8b\u4ef6\u6e90\u7684\u6807\u5fd7\u3002 */\n    SubscribeFlags flags;\n};\n\nenum SubscribeFlags : int32_t {\n    UNDEFINED = 0x0,\n\n    /**\n     * \u8ba2\u9605\u6765\u81ea\u8f66\u8f86HAL\u7684\u4e8b\u4ef6\n     * \uff08\u5f88\u53ef\u80fd\u662f\u8f66\u8f86\u672c\u8eab\u4ea7\u751f\u7684\u4e8b\u4ef6\uff09\u3002\n     */\n    EVENTS_FROM_CAR = 0x1,\n\n    /**\n     * \u4f7f\u7528\u6b64\u6807\u5fd7\u8ba2\u9605\u5f53\u8f66\u8f86HAL\u7684\u5ba2\u6237\u7aef\uff08\u4f8b\u5982Car Service\uff09\u8c03\u7528 IVehicle.set\uff08...\uff09 \u65f6\u7684\u4e8b\u4ef6\u3002\n     */\n    EVENTS_FROM_ANDROID = 0x2,\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehicleareaseat","title":"VehicleAreaSeat","text":"<p>\u8f66\u8f86\u5ea7\u6905\u5c5e\u6027</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u4e0d\u540c\u7684\u8f66\u8f86\u5ea7\u4f4d\u3002\n */\nenum VehicleAreaSeat : int32_t {\n    ROW_1_LEFT   = 0x0001,   // \u7b2c\u4e00\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 1\n    ROW_1_CENTER = 0x0002,   // \u7b2c\u4e00\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 2\n    ROW_1_RIGHT  = 0x0004,   // \u7b2c\u4e00\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 4\n    ROW_2_LEFT   = 0x0010,   // \u7b2c\u4e8c\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 16\n    ROW_2_CENTER = 0x0020,   // \u7b2c\u4e8c\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 32\n    ROW_2_RIGHT  = 0x0040,   // \u7b2c\u4e8c\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 64\n    ROW_3_LEFT   = 0x0100,   // \u7b2c\u4e09\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 256\n    ROW_3_CENTER = 0x0200,   // \u7b2c\u4e09\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 512\n    ROW_3_RIGHT  = 0x0400    // \u7b2c\u4e09\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 1024\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#statuscode","title":"StatusCode","text":"<p>\u63a5\u53e3\u8c03\u7528\u72b6\u6001\u503c</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/** \n * \u8f66\u8f86HAL\u63a5\u53e3\u4e2d\u4f7f\u7528\u7684\u9519\u8bef\u4ee3\u7801\u3002\n */\nenum StatusCode : int32_t {\n    OK = 0,\n\n    // \u518d\u8bd5\u4e00\u6b21\n    TRY_AGAIN = 1,\n\n    // \u63d0\u4f9b\u7684\u53c2\u6570\u65e0\u6548\n    INVALID_ARG = 2,\n\n    // \u5f53\u4e0e\u8f66\u8f86\u5c5e\u6027\u5173\u8054\u7684\u8bbe\u5907\u4e0d\u53ef\u7528\u65f6\uff0c\u5fc5\u987b\u8fd4\u56de\u6b64\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5f53\u5ba2\u6237\u7aef\u5c1d\u8bd5\u5728\u6574\u4e2aHVAC\u5355\u5143\u5173\u95ed\u65f6\u8bbe\u7f6eHVAC\u6e29\u5ea6\u3002     \n    NOT_AVAILABLE = 3,\n\n    // \u8bbf\u95ee\u88ab\u62d2\u7edd\n    ACCESS_DENIED = 4,\n\n    // \u5728\u8f66\u8f86HAL\u4e2d\u53d1\u751f\u4e86\u610f\u5916\u60c5\u51b5\n    INTERNAL_ERROR = 5,\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#ivehiclehal","title":"IVehicle.hal","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/IVehicle.hal\n\ninterface IVehicle {\n  /**\n   * \u8fd4\u56de\u6b64\u8f66\u8f86HAL\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002\n   */\n  getAllPropConfigs() generates (vec&lt;VehiclePropConfig&gt; propConfigs);\n\n  /**\n   * \u8fd4\u56de\u7ed9\u5b9a\u5c5e\u6027\u7684\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002\n   *\n   * \u5982\u679c\u672a\u627e\u5230\u8bf7\u6c42\u7684 VehicleProperty \uff0c\u5219\u5fc5\u987b\u8fd4\u56de StatusCode::INVALID_ARG\uff0c\n   * \u5426\u5219\u8fd4\u56de\u5e26\u6709 StatusCode::OK \u7684\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002\n   */\n  getPropConfigs(vec&lt;int32_t&gt; props)\n          generates (StatusCode status, vec&lt;VehiclePropConfig&gt; propConfigs);\n\n  /**\n   * \u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n   *\n   * \u5bf9\u4e8e VehiclePropertyChangeMode::STATIC \u5c5e\u6027\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u59cb\u7ec8\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\n   * \u5bf9\u4e8e VehiclePropertyChangeMode::ON_CHANGE \u5c5e\u6027\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u6700\u65b0\u53ef\u7528\u7684\u503c\u3002\n   *\n   * \u4e00\u4e9b\u5c5e\u6027\uff08\u5982 RADIO_PRESET \uff09\u9700\u8981\u5728GET\u8bf7\u6c42\u4e2d\u4f20\u9012 VehiclePropValue \u5bf9\u8c61\u4e2d\u7684\u9644\u52a0\u6570\u636e\u3002\n   *\n   * \u5982\u679c\u5c1a\u65e0\u53ef\u7528\u6570\u636e\uff0c\u5373\u5728\u521d\u59cb\u9636\u6bb5\u53ef\u80fd\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\uff0c\u6b64\u8c03\u7528\u5fc5\u987b\u7acb\u5373\u8fd4\u56de StatusCode::TRY_AGAIN \u7684\u9519\u8bef\u4ee3\u7801\u3002\n   */\n  get(VehiclePropValue requestedPropValue)\n          generates (StatusCode status, VehiclePropValue propValue);\n\n  /**\n   * \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n   *\n   * \u5ffd\u7565\u6570\u636e\u7684\u65f6\u95f4\u6233\u3002\n   *\n   * \u8bbe\u7f6e\u67d0\u4e9b\u5c5e\u6027\u9700\u8981\u6709\u521d\u59cb\u72b6\u6001\u53ef\u7528\u3002\u5982\u679c\u521d\u59cb\u6570\u636e\u5c1a\u4e0d\u53ef\u7528\uff0c\u5219\u6b64\u8c03\u7528\u5fc5\u987b\u8fd4\u56de StatusCode::TRY_AGAIN\u3002\n   * \u5bf9\u4e8e\u5177\u6709\u5355\u72ec\u7535\u6e90\u63a7\u5236\u7684\u5c5e\u6027\uff0c\u5982\u679c\u672a\u542f\u52a8\u5c5e\u6027\uff0c\u5219\u6b64\u8c03\u7528\u5fc5\u987b\u8fd4\u56de StatusCode::NOT_AVAILABLE\u9519\u8bef\u3002\n   */\n  set(VehiclePropValue propValue) generates (StatusCode status);\n\n  /**\n   * \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002\n   *\n   * \u5ba2\u6237\u7aef\u5fc5\u987b\u80fd\u591f\u6839\u636e\u9009\u9879\u53c2\u6570\u4e2d\u63d0\u4f9b\u7684\u6570\u636e\u8ba2\u9605\u591a\u4e2a\u5c5e\u6027\u3002\n   *\n   * @param listener \u6b64\u5ba2\u6237\u7aef\u5fc5\u987b\u5728\u9002\u5f53\u7684\u4e8b\u4ef6\u4e0a\u88ab\u8c03\u7528\u3002\n   * @param options \u8ba2\u9605\u7684\u9009\u9879\u5217\u8868\u3002SubscribeOption\u5305\u542b\u8bf8\u5982\u5c5e\u6027Id\u3001\u533a\u57dfId\u3001\u91c7\u6837\u7387\u7b49\u4fe1\u606f\u3002\n   */\n  subscribe(IVehicleCallback callback, vec&lt;SubscribeOptions&gt; options)\n          generates (StatusCode status);\n\n  /**\n   * \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002\n   *\n   * \u5982\u679c\u6b64\u5ba2\u6237\u7aef\u672a\u8ba2\u9605\u7ed9\u5b9a\u5c5e\u6027\uff0c\u5219\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56deStatusCode::INVALID_ARG\u3002\n   */\n  unsubscribe(IVehicleCallback callback, int32_t propId)\n          generates (StatusCode status);\n\n  /**\n   * \u6253\u5370\u8f66\u8f86HAL\u7684\u8c03\u8bd5\u72b6\u6001\u3002\n   */\n  debugDump() generates (string s);\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#ivehiclecallbackhal","title":"IVehicleCallback.hal","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/IVehicleCallback.hal\n\ninterface IVehicleCallback {\n\n    /**\n     * \u5f53API\u7528\u6237\u8ba2\u9605\u7684\u53d8\u91cf\u9700\u8981\u62a5\u544a\u65f6\uff0c\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u56de\u8c03\u3002\u8fd9\u53ef\u80fd\u662f\u57fa\u4e8e\u9608\u503c\u548c\u9891\u7387\uff08\u5e38\u89c4\u8ba2\u9605\uff0c\u53c2\u89c1subscribe\u8c03\u7528\u7684\u53c2\u6570\uff09\uff0c\n     * \u6216\u8005\u5f53\u8c03\u7528 IVehicle.set() \u65b9\u6cd5\u5e76\u4e14\u9700\u8981\u62a5\u544a\u5b9e\u9645\u66f4\u6539\u65f6\u3002\n     *\n     * \u8fd9\u4e9b\u56de\u8c03\u662f\u5206\u5757\u7684\u3002\n     *\n     * @param values \u66f4\u65b0\u7684\u503c\u3002\n     */\n    oneway onPropertyEvent(vec&lt;VehiclePropValue&gt; propValues);\n\n    /**\n     * \u5982\u679c\u5ba2\u6237\u7aef\u4f7f\u7528 SubscribeFlags::EVENTS_FROM_ANDROID \u6807\u5fd7\u8ba2\u9605\u4e86\u5c5e\u6027\uff0c\u5e76\u4e14\u8c03\u7528\u4e86 IVehicle.set(...) \u65b9\u6cd5\uff0c\n     * \u5219\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n     *\n     * \u8fd9\u4e9b\u4e8b\u4ef6\u5fc5\u987b\u7acb\u5373\u4f20\u9012\u7ed9\u8ba2\u9605\u8005\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u6279\u5904\u7406\u3002\n     *\n     * @param value \u5ba2\u6237\u7aef\u8bbe\u7f6e\u7684\u503c\u3002\n     */\n    oneway onPropertySet(VehiclePropValue propValue);\n\n    /**\n     * \u8bbe\u7f6e\u5c5e\u6027\u503c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u5ba2\u6237\u7aef\u4eceIVehicle::set(...)\u6536\u5230StatusCode::OK\uff0c\n     * \u8fd9\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u8be5\u503c\u5df2\u6210\u529f\u4f20\u64ad\u5230\u8f66\u8f86\u7f51\u7edc\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u7f55\u89c1\u7684\u4e8b\u4ef6\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n     *\n     * @param errorCode - StatusCode\u679a\u4e3e\u4e2d\u7684\u4efb\u4f55\u503c\u3002\n     * @param property - \u53d1\u751f\u9519\u8bef\u7684\u5c5e\u6027\u3002\n     * @param areaId - \u6307\u5b9a\u53d1\u751f\u95ee\u9898\u7684\u533a\u57df\u7684\u4f4d\u63a9\u7801\uff0c\u5bf9\u4e8e\u5168\u5c40\u5c5e\u6027\u5fc5\u987b\u4e3a0\u3002\n     */\n    oneway onPropertySetError(StatusCode errorCode,\n                              int32_t propId,\n                              int32_t areaId);\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehal_2","title":"VehicleHal \u83b7\u53d6\uff08\u8bbe\u7f6e\uff09\u5c5e\u6027","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#subscribe","title":"subscribe\u8ba2\u9605\u5c5e\u6027","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#carserviceoncreate","title":"CarService.onCreate()","text":"<p>CarService \u5728 onCreate() \u4e2d\u521b\u5efa ICarImpl</p> <pre><code>packages/services/Car/service/src/com/android/car/CarService.java\n\n@Override\npublic void onCreate() {\n    ...\n\n    mVehicle = getVehicle();\n\n    mICarImpl = new ICarImpl(this,\n            mVehicle,\n            SystemInterface.Builder.defaultSystemInterface(this).build(),\n            mVehicleInterfaceName);\n    mICarImpl.init();\n\n    ...\n}\n</code></pre> <p>\u521b\u5efa ICarImpl \u7684\u65f6\u5019\u4f20\u4e86 mVehicle \u8fdb\u53bb\uff0c\u4e5f\u5c31\u662f IVehicle \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/CarService.java\n\n@Nullable\nprivate static IVehicle getVehicle() {\n    final String instanceName = SystemProperties.get(\"ro.vehicle.hal\", \"default\");\n\n    try {\n        return android.hardware.automotive.vehicle.V2_0.IVehicle.getService(instanceName);\n    } catch (RemoteException e) {\n        Slog.e(CarLog.TAG_SERVICE, \"Failed to get IVehicle/\" + instanceName + \" service\", e);\n    } catch (NoSuchElementException e) {\n        Slog.e(CarLog.TAG_SERVICE, \"IVehicle/\" + instanceName + \" service not registered yet\");\n    }\n    return null;\n}\n</code></pre> <p>\u597d\u5bb6\u4f19\uff0c\u5c31\u662f VehicleHAl \u670d\u52a1\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#icarimpl","title":"ICarImpl\u6784\u9020\u51fd\u6570","text":"<p>\u6784\u9020\u51fd\u6570\u4e2d new VehicleHal \u5bf9\u8c61\uff0c\u7136\u540e\u53c8\u5728 CarImpl \u7684 init() \u51fd\u6570\u4e2d\u8c03\u7528 VehicleHal \u5bf9\u8c61\u7684 init() \u51fd\u6570</p> <pre><code>packages/services/Car/service/src/com/android/car/ICarImpl.java\n\npublic ICarImpl(Context serviceContext, IVehicle vehicle, SystemInterface systemInterface,\n        String vehicleInterfaceName) {\n    this(serviceContext, vehicle, systemInterface, vehicleInterfaceName,\n            /* carUserService= */ null, /* carWatchdogService= */ null,\n            /* powerPolicyDaemon= */ null);\n}\n\n@VisibleForTesting\nICarImpl(Context serviceContext, IVehicle vehicle, SystemInterface systemInterface,\n        String vehicleInterfaceName,\n        @Nullable CarUserService carUserService,\n        @Nullable CarWatchdogService carWatchdogService,\n        @Nullable ICarPowerPolicySystemNotification powerPolicyDaemon) {\n\n    ...\n\n    mHal = constructWithTrace(t, VehicleHal.class,\n            () -&gt; new VehicleHal(serviceContext, vehicle));\n\n    ...\n}\n\n@MainThread\nvoid init() {\n    ...\n    mHal.init();\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehal_3","title":"VehicleHal","text":"<p>\u6784\u9020\u51fd\u6570new\u5404\u4e2aHalService\uff08\u7ee7\u627f\u4e8e HalServiceBase \uff09\uff0c\u5e76\u4e14 new HalClient \u5ba2\u6237\u7aef\u5bf9\u8c61\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic VehicleHal(Context context, IVehicle vehicle) {\n    mHandlerThread = CarServiceUtils.getHandlerThread(\n            VehicleHal.class.getSimpleName());\n    mHandler = new Handler(mHandlerThread.getLooper());\n    mPowerHal = new PowerHalService(this);\n    mPropertyHal = new PropertyHalService(this);\n    mInputHal = new InputHalService(this);\n    mVmsHal = new VmsHalService(context, this);\n    mUserHal = new UserHalService(this);\n    mDiagnosticHal = new DiagnosticHalService(this);\n    mClusterHalService = new ClusterHalService(this);\n    mEvsHal = new EvsHalService(this);\n    mTimeHalService = new TimeHalService(context, this);\n    //TODO(b/202396546): Dedupe this assignment with the other one in constructor below\n    mAllServices.addAll(Arrays.asList(mPowerHal,\n            mInputHal,\n            mDiagnosticHal,\n            mVmsHal,\n            mUserHal,\n            mClusterHalService,\n            mEvsHal,\n            mTimeHalService,\n            mPropertyHal)); // mPropertyHal should be the last.\n    mHalClient = new HalClient(vehicle, mHandlerThread.getLooper(),\n            /* callback= */ this);\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#getallpropconfigs","title":"getAllPropConfigs()","text":"<p>mHalClient.getAllPropConfigs() \u4ece Vehicle HAL(IVehicle.hal) \u83b7\u53d6\u6240\u6709\u7684\u5c5e\u6027\u3002 \u8c03\u7528\u5230VehicleHalManager.cpp \u7684 getAllPropConfigs() \u51fd\u6570\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void init() {\n    fetchAllPropConfigs();\n\n    ...\n}\n\nprivate void fetchAllPropConfigs() {\n    synchronized (mLock) {\n        if (!mAllProperties.isEmpty()) { // already set\n            Slog.i(CarLog.TAG_HAL, \"fetchAllPropConfigs already fetched\");\n            return;\n        }\n    }\n    ArrayList&lt;VehiclePropConfig&gt; configs;\n    try {\n        configs = mHalClient.getAllPropConfigs();\n        if (configs == null || configs.size() == 0) {\n            Slog.e(CarLog.TAG_HAL, \"getAllPropConfigs returned empty configs\");\n            return;\n        }\n    } catch (RemoteException e) {\n        throw new RuntimeException(\"Unable to retrieve vehicle property configuration\", e);\n    }\n\n    synchronized (mLock) {\n        // Create map of all properties\n        for (VehiclePropConfig p : configs) {\n            if (DBG) {\n                Slog.i(CarLog.TAG_HAL, \"Add config for prop:\" + Integer.toHexString(p.prop)\n                        + \" config:\" + p);\n            }\n            mAllProperties.put(p.prop, p);\n        }\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalinit_1","title":"VehicleHal.init()","text":"<p>\u5728 init() \u4e2d\u8c03\u7528 fetchAllPropConfigs() \u83b7\u53d6\u5230\u6240\u6709\u7684\u5c5e\u6027\uff0c\u5e76\u4fdd\u5b58\u5728 mAllProperties \u53d8\u91cf\u4e2d\u3002 \u63a5\u7740\u8fd8\u6709\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\u662f\uff0c\u7ed9\u6bcf\u4e2a\u670d\u52a1\u66f4\u65b0\u5bf9\u5e94\u7684\u5c5e\u6027\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void init() {\n    fetchAllPropConfigs();\n\n    // PropertyHalService will take most properties, so make it big enough.\n    ArrayList&lt;VehiclePropConfig&gt; configsForService = new ArrayList&lt;&gt;(mAllServices.size());\n    for (int i = 0; i &lt; mAllServices.size(); i++) {\n        HalServiceBase service = mAllServices.get(i);\n        int[] supportedProps =  service.getAllSupportedProperties();\n        configsForService.clear();\n        synchronized (mLock) {\n            if (supportedProps.length == 0) {\n                for (Integer propId : mAllProperties.keySet()) {\n                    if (service.isSupportedProperty(propId)) {\n                        VehiclePropConfig config = mAllProperties.get(propId);\n                        mPropertyHandlers.append(propId, service);\n                        configsForService.add(config);\n                    }\n                }\n            } else {\n                for (int prop : supportedProps) {\n                    VehiclePropConfig config = mAllProperties.get(prop);\n                    if (config == null) {\n                        continue;\n                    }\n                    mPropertyHandlers.append(prop, service);\n                    configsForService.add(config);\n                }\n            }\n        }\n        service.takeProperties(configsForService);\n        service.init();\n    }\n}\n</code></pre> <p>\u6839\u636e\u7b7e\u540d\u7684\u6784\u9020\u51fd\u6570\uff0c\u6211\u4eec\u77e5\u9053 mAllServices \u5c31\u662f\u5404\u4e2a HalService\uff0c\u8fd9\u91cc\u6211\u4eec\u62ff PowerHalService \u4e3e\u4f8b\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#powerhalservicegetallsupportedproperties","title":"PowerHalService.getAllSupportedProperties()","text":"<p>PowerHalService\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u662f\uff1a - AP_POWER_STATE_REQ - AP_POWER_STATE_REPORT - DISPLAY_BRIGHTNESS</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {    \n\n    private static final int[] SUPPORTED_PROPERTIES = new int[]{\n            AP_POWER_STATE_REQ,\n            AP_POWER_STATE_REPORT,\n            DISPLAY_BRIGHTNESS\n    };\n\n    @Override\n    public int[] getAllSupportedProperties() {\n        return SUPPORTED_PROPERTIES;\n    }\n\n}\n</code></pre> <p>\u5728\u56de\u5230\u524d\u9762\u7684 init() \u51fd\u6570\uff0c\u4ece PowerHalService.getAllSupportedProperties() \u662f\u6709\u83b7\u53d6\u5230\u652f\u6301\u5c5e\u6027\u7684\uff1b\u6240\u4ee5\u63a5\u7740\u4ece mAllProperties \u53bb\u5bfb\u627e\u662f\u5426\u6709\u914d\u7f6e\uff0c\u6700\u540e\u8c03\u7528 PowerHalService.takeProperties(configsForService) \u66f4\u65b0</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void init() {\n    ...\n\n    // PropertyHalService will take most properties, so make it big enough.\n    ArrayList&lt;VehiclePropConfig&gt; configsForService = new ArrayList&lt;&gt;(mAllServices.size());\n    for (int i = 0; i &lt; mAllServices.size(); i++) {\n        HalServiceBase service = mAllServices.get(i);\n        int[] supportedProps =  service.getAllSupportedProperties();//\u6709\u5c5e\u6027\n        configsForService.clear();\n        synchronized (mLock) {\n            if (supportedProps.length == 0) {//\u6240\u4ee5\u4e0d\u8fdb\u8fd9\u91cc\n                for (Integer propId : mAllProperties.keySet()) {\n                    if (service.isSupportedProperty(propId)) {\n                        VehiclePropConfig config = mAllProperties.get(propId);\n                        mPropertyHandlers.append(propId, service);\n                        configsForService.add(config);\n                    }\n                }\n            } else {\n                for (int prop : supportedProps) {\n                    //\u4ece hal \u91cc\u67e5\u5230\u662f\u5426\u6709\u5339\u914d\u7684\n                    VehiclePropConfig config = mAllProperties.get(prop);\n                    if (config == null) {\n                        continue;\n                    }\n                    // \u6709\u5219\u6dfb\u52a0\u5230 configsForService \n                    mPropertyHandlers.append(prop, service);\n                    configsForService.add(config);\n                }\n            }\n        }\n\n        service.takeProperties(configsForService);\n        service.init();\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#powerhalservicetakeproperties","title":"PowerHalService.takeProperties()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {\n\n    @GuardedBy(\"mLock\")\n    private final HashMap&lt;Integer, VehiclePropConfig&gt; mProperties = new HashMap&lt;&gt;();\n\n    @Override\n    public void takeProperties(Collection&lt;VehiclePropConfig&gt; properties) {\n        if (properties.isEmpty()) {\n            return;\n        }\n        synchronized (mLock) {\n            for (VehiclePropConfig config : properties) {\n                mProperties.put(config.prop, config);\n            }\n        }\n    }\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#powerhalserviceinit","title":"PowerHalService.init()","text":"<p>\u8c03\u7528 mHal.subscribeProperty(this, config.prop); \u8ba2\u9605\u5c5e\u6027\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {\n\n    @Override\n    public void init() {\n        synchronized (mLock) {\n            for (VehiclePropConfig config : mProperties.values()) {\n                if (VehicleHal.isPropertySubscribable(config)) {\n                    mHal.subscribeProperty(this, config.prop);\n                }\n            }\n            VehiclePropConfig brightnessProperty = mProperties.get(DISPLAY_BRIGHTNESS);\n            if (brightnessProperty != null) {\n                mMaxDisplayBrightness = brightnessProperty.areaConfigs.size() &gt; 0\n                        ? brightnessProperty.areaConfigs.get(0).maxInt32Value : 0;\n                if (mMaxDisplayBrightness &lt;= 0) {\n                    Slog.w(CarLog.TAG_POWER, \"Max display brightness from vehicle HAL is invalid:\"\n                            + mMaxDisplayBrightness);\n                    mMaxDisplayBrightness = 1;\n                }\n            }\n        }\n    }\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalsubscribeproperty","title":"VehicleHal.subscribeProperty()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n/**\n * Subscribes given properties with sampling rate defaults to 0 and no special flags provided.\n *\n * @see #subscribeProperty(HalServiceBase, int, float, int)\n */\npublic void subscribeProperty(HalServiceBase service, int property)\n        throws IllegalArgumentException {\n    subscribeProperty(service, property, /* samplingRateHz= */ 0f,\n            SubscribeFlags.EVENTS_FROM_CAR);\n}\n\n\npublic void subscribeProperty(HalServiceBase service, int property,\n        float samplingRateHz, int flags) throws IllegalArgumentException {\n    if (DBG) {\n        Slog.i(CarLog.TAG_HAL, \"subscribeProperty, service:\" + service\n                + \", \" + toCarPropertyLog(property));\n    }\n    VehiclePropConfig config;\n    synchronized (mLock) {\n        config = mAllProperties.get(property);\n    }\n\n    if (config == null) {\n        throw new IllegalArgumentException(\"subscribe error: config is null for property 0x\"\n                + toHexString(property));\n    } else if (isPropertySubscribable(config)) {\n        SubscribeOptions opts = new SubscribeOptions();\n        opts.propId = property;\n        opts.sampleRate = samplingRateHz;\n        opts.flags = flags;\n        synchronized (mLock) {\n            assertServiceOwnerLocked(service, property);\n            mSubscribedProperties.put(property, opts);\n        }\n        try {\n            mHalClient.subscribe(opts);\n        } catch (RemoteException e) {\n            Slog.e(CarLog.TAG_HAL, \"Failed to subscribe to \" + toCarPropertyLog(property),\n                    e);\n        }\n    } else {\n        Slog.e(CarLog.TAG_HAL, \"Cannot subscribe to \" + toCarPropertyLog(property));\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#halclientsubscribe","title":"HalClient.subscribe()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\npublic void subscribe(SubscribeOptions... options) throws RemoteException {\n    mVehicle.subscribe(mInternalCallback, new ArrayList&lt;&gt;(Arrays.asList(options)));\n}\n</code></pre> <p>\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 IVehicle.hal \u7684 subscribe()\uff0c\u4e5f\u5c31\u662f VehicleHalManager.cpp \u7684 subscribe()</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalmanagersubscribe","title":"VehicleHalManager.subscribe()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehicleHalManager.cpp\n\nReturn&lt;StatusCode&gt; VehicleHalManager::subscribe(const sp&lt;IVehicleCallback&gt; &amp;callback,\n                                                const hidl_vec&lt;SubscribeOptions&gt; &amp;options) {\n    hidl_vec&lt;SubscribeOptions&gt; verifiedOptions(options);  // \u521b\u5efa\u4e00\u4e2a\u4e0eoptions\u76f8\u540c\u7684verifiedOptions\u5411\u91cf\n\n    for (size_t i = 0; i &lt; verifiedOptions.size(); i++) {  // \u904d\u5386verifiedOptions\u5411\u91cf\n        SubscribeOptions&amp; ops = verifiedOptions[i];  // \u83b7\u53d6\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\n        auto prop = ops.propId;  // \u83b7\u53d6ops\u7684propId\u5c5e\u6027\n\n        const auto* config = getPropConfigOrNull(prop);  // \u6839\u636epropId\u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\u4fe1\u606f\n        if (config == nullptr) {\n            ALOGE(\"Failed to subscribe: config not found, property: 0x%x\", prop);\n            return StatusCode::INVALID_ARG;  // \u8fd4\u56de\u65e0\u6548\u53c2\u6570\u9519\u8bef\u7801\n        }\n\n        if (ops.flags == SubscribeFlags::UNDEFINED) {  // \u5982\u679cops\u7684flags\u5c5e\u6027\u4e3a\u672a\u5b9a\u4e49\n            ALOGE(\"Failed to subscribe: undefined flag in options provided\");  // \u6253\u5370\u9519\u8bef\u4fe1\u606f\n            return StatusCode::INVALID_ARG;  // \u8fd4\u56de\u65e0\u6548\u53c2\u6570\u9519\u8bef\u7801\n        }\n\n        if (!isSubscribable(*config, ops.flags)) {  // \u5982\u679c\u5c5e\u6027\u4e0d\u53ef\u8ba2\u9605\n            ALOGE(\"Failed to subscribe: property 0x%x is not subscribable\", prop);  // \u6253\u5370\u9519\u8bef\u4fe1\u606f\n            return StatusCode::INVALID_ARG;  // \u8fd4\u56de\u65e0\u6548\u53c2\u6570\u9519\u8bef\u7801\n        }\n\n        ops.sampleRate = checkSampleRate(*config, ops.sampleRate);  // \u68c0\u67e5\u5e76\u66f4\u65b0ops\u7684sampleRate\u5c5e\u6027\n    }\n\n    std::list&lt;SubscribeOptions&gt; updatedOptions;  // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684updatedOptions\u5217\u8868\n    auto res = mSubscriptionManager.addOrUpdateSubscription(getClientId(callback),\n                                                            callback, verifiedOptions,\n                                                            &amp;updatedOptions);  // \u6dfb\u52a0\u6216\u66f4\u65b0\u8ba2\u9605\u4fe1\u606f\uff0c\u5e76\u5c06\u66f4\u65b0\u540e\u7684\u9009\u9879\u5b58\u50a8\u5728updatedOptions\u5217\u8868\u4e2d\n    if (StatusCode::OK != res) {\n        ALOGW(\"%s failed to subscribe, error code: %d\", __func__, res);\n        return res;  // \u8fd4\u56de\u9519\u8bef\u7801\n    }\n\n    for (auto opt : updatedOptions) {  // \u904d\u5386updatedOptions\u5217\u8868\n        mHal-&gt;subscribe(opt.propId, opt.sampleRate);  // \u8c03\u7528mHal\u7684subscribe\u65b9\u6cd5\u8ba2\u9605\u5c5e\u6027\n    }\n\n    return StatusCode::OK;  // \u8fd4\u56de\u6210\u529f\u72b6\u6001\u7801\n}\n</code></pre> <p>\u5148\u68c0\u67e5\u8fd9\u5c5e\u6027\u7684\u914d\u7f6e\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u9519\u8bef\u3002\u63a5\u7740 SubscriptionManager.addOrUpdateSubscription() \u6dfb\u52a0\u6216\u66f4\u65b0\u8ba2\u9605\u4fe1\u606f\u3002</p> <p>\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0cmHal \u5c31\u662f EmulatedVehicleHal \uff0c \u6240\u4ee5 mHal-&gt;subscribe(opt.propId, opt.sampleRate) \u5c31\u662f EmulatedVehicleHal.subscribe()</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulatedvehiclehalsubscribe","title":"EmulatedVehicleHal.subscribe()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.cpp\n\nStatusCode EmulatedVehicleHal::subscribe(int32_t property, float sampleRate) {\n    ALOGI(\"%s propId: 0x%x, sampleRate: %f\", __func__, property, sampleRate);\n\n    if (isContinuousProperty(property)) {\n        mRecurrentTimer.registerRecurrentEvent(hertzToNanoseconds(sampleRate), property);\n    }\n    return StatusCode::OK;\n}\n</code></pre> <p>isContinuousProperty() \u6539\u53d8 VehiclePropConfig \u7684 changemode \u4e3a CONTINUOUS\uff08\u5373\u4e0d\u65ad\u7684\u5468\u671f\u6027\u7684\u53d1\u9001\u53d8\u5316\uff09</p> <p>\u4ee5\u4e0a\u6211\u4eec\u53ea\u662f\u62ff PowerHalService \uff0c\u5728 VehicleHal.init() \u4e2d\u4f1a\u904d\u5386\u6240\u4ee5\u7684 HalService \u53bb\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5 \u6240\u6709\u5c5e\u6027\u90fdsubscribe\uff0cCarService\u5c31\u53ef\u4ee5\u6240\u6709\u63a5\u6536\u5230Vehicle HAL\u53d1\u4e0a\u6765\u7684\u6240\u6709\u5c5e\u6027\u53d8\u5316</p> <p>\u540c\u7406\uff0cunsubscribe\u6ce8\u9500\u8ba2\u9605\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#set","title":"set \u8bbe\u7f6e\u5c5e\u6027","text":"<p>\u6211\u4eec\u8fd8\u662f\u4ee5 PowerHalService \u4e3a\u4f8b\uff0c\u5982\u4e0b\uff1a</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\nprivate void setPowerState(int state, int additionalParam) {\n    if (isPowerStateSupported()) {\n        int[] values = { state, additionalParam };\n        try {\n            mHal.set(VehicleProperty.AP_POWER_STATE_REPORT, 0).to(values);\n            Slog.i(CarLog.TAG_POWER, \"setPowerState=\" + powerStateReportName(state)\n                    + \" param=\" + additionalParam\n                    + \" VehicleProperty.AP_POWER_STATE_REPORT=\" + VehicleProperty.AP_POWER_STATE_REPORT);\n        } catch (ServiceSpecificException e) {\n            Slog.e(CarLog.TAG_POWER, \"cannot set to AP_POWER_STATE_REPORT\", e);\n        }\n    }\n}\n</code></pre> <p>mHal \u662f VehicleHal\uff0c\u6240\u4ee5\u4f1a\u8c03\u5230 VehicleHal.set() \u3002\u770b\u5230\u8c03\u5230\u7684 VehicleHal.set() \u4e4b\u540e\uff0c\u6211\u7a81\u7136\u89c9\u5f97\u7528\u8fd9\u4e2a\u4f8b\u5b50\u6765\u4e3e\u4f8b\u4e0d\u592a\u597d\u3002 \u8fd9\u91cc\u6211\u5c31\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u7801\u6d41\u7a0b\u6765\u4e3e\u4f8b\u975e car-service \u8fdb\u7a0b\u600e\u4e48\u8bbe\u7f6e\u5c5e\u6027\u7684\u3002</p> <ul> <li>CarHvacManager.setBooleanProperty()</li> </ul> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/hvac/CarHvacManager.java\n\npublic void setBooleanProperty(@PropertyId int propertyId, int area, boolean val) {\n    if (mHvacPropertyIds.contains(propertyId)) {\n        mCarPropertyMgr.setBooleanProperty(propertyId, area, val);\n    }\n}\n</code></pre> <ul> <li>CarPropertyManager.setProperty()</li> </ul> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\npublic void setBooleanProperty(int prop, int areaId, boolean val) {\n    setProperty(Boolean.class, prop, areaId, val);\n}\n\npublic &lt;E&gt; void setProperty(@NonNull Class&lt;E&gt; clazz, int propId, int areaId, @NonNull E val) {\n    ...\n\n    try {\n        mService.setProperty(new CarPropertyValue&lt;&gt;(propId, areaId, val),\n                mCarPropertyEventToService);\n    ...\n}\n</code></pre> <ul> <li>CarPropertyService.setProperty()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/CarPropertyService.java\n\n@Override\npublic void setProperty(CarPropertyValue prop, ICarPropertyEventListener listener) {\n    ...\n    mHal.setProperty(prop);\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mHal \u662f PropertyHalService </p> <ul> <li>PropertyHalService.set()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\npublic void setProperty(CarPropertyValue prop) {\n    ...\n    mVehicleHal.set(halProp);\n}\n</code></pre> <ul> <li>VehicleHal.setValue()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\nprotected void set(VehiclePropValue propValue) {\n    mHalClient.setValue(propValue);\n}\n</code></pre> <ul> <li>HalClient.set()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\npublic void setValue(VehiclePropValue propValue) {\n    return mVehicle.set(propValue);\n}\n</code></pre> <p>\u597d\uff0c\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\u3002\u6211\u4eec\u8fd8\u662f\u56de\u5230\u521a\u624d\u7684\u4f8b\u5b50\u5f53\u4e2d\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalset","title":"VehicleHal.set()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n@CheckResult\nVehiclePropValueSetter set(int propId, int areaId) {\n    return new VehiclePropValueSetter(mHalClient, propId, areaId);\n}\n\npackages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\nfinal class VehiclePropValueSetter {\n    final WeakReference&lt;HalClient&gt; mClient;\n    final VehiclePropValue mPropValue;\n\n    private VehiclePropValueSetter(HalClient client, int propId, int areaId) {\n        mClient = new WeakReference&lt;&gt;(client);\n        mPropValue = new VehiclePropValue();\n        mPropValue.prop = propId;\n        mPropValue.areaId = areaId;\n    }\n\n    void to(boolean value) {\n        to(value ? 1 : 0);\n    }\n\n    void to(int value) {\n        mPropValue.value.int32Values.add(value);\n        submit();\n    }\n\n    void to(int[] values) {\n        for (int value : values) {\n            mPropValue.value.int32Values.add(value);\n        }\n        submit();\n    }\n\n    void to(Collection&lt;Integer&gt; values) {\n        mPropValue.value.int32Values.addAll(values);\n        submit();\n    }\n\n    void submit() {\n        HalClient client =  mClient.get();\n        if (client != null) {\n            if (DBG) {\n                Slog.i(CarLog.TAG_HAL, \"set, \" + toCarPropertyLog(mPropValue.prop)\n                        + toCarAreaLog(mPropValue.areaId));\n            }\n            client.setValue(mPropValue);\n        }\n    }\n}\n</code></pre> <p>VehicleHal \u91cc\u6709\u51e0\u4e2a set() \u51fd\u6570\uff0c\u4e0d\u7ba1\u662f\u90a3\u4e2a set() \u51fd\u6570\uff0c\u6700\u7ec8\u90fd\u662f\u8c03 mHalClient.setValue(propValue) \u8bbe\u7f6e\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#halclientsetvalue","title":"HalClient.setValue()","text":"<p>\u8fd8\u8bb0\u5f97\u4e4b\u524d\u5728 VehicleHal \u6784\u9020\u51fd\u6570\u91cc\u7684 vehicle \u662f\u4ece\u54ea\u91cc\u6765\u7684\u5417\uff1f \u5176\u5b9e CarService.getVehicle() \u83b7\u53d6\u5230\u5e76\u901a\u8fc7\u6784\u9020 ICarImpl \u4e00\u6b65\u4e00\u6b65\u4f20\u8fdb\u6765\u7684\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic VehicleHal(Context context, IVehicle vehicle) {\n    ...\n    mHalClient = new HalClient(vehicle, mHandlerThread.getLooper(),\n            /* callback= */ this);\n}\n</code></pre> <p>\u6240\u4ee5 mVehicle \u5c31\u662f VehicleHal \u3002\u4e5f\u5c31\u662f IVehicle.hal \u7684 set() \u63a5\u53e3\u3002 \u6700\u7ec8\u662f\u8c03\u5230 VehicleHalManager.cpp \u7684 set() \u63a5\u53e3\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\npublic void setValue(VehiclePropValue propValue) {\n    ...\n    return mVehicle.set(propValue);\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalmanagerset","title":"VehicleHalManager.set()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehicleHalManager.cpp\n\n/**\n * @brief \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\n * @param value \u8981\u8bbe\u7f6e\u7684\u5c5e\u6027\u503c\n * @return \u8fd4\u56de\u8bbe\u7f6e\u7ed3\u679c\u7684\u72b6\u6001\u7801\n */\nReturn&lt;StatusCode&gt; VehicleHalManager::set(const VehiclePropValue &amp;value) {\n    auto prop = value.prop; // \u83b7\u53d6\u5c5e\u6027\n    const auto* config = getPropConfigOrNull(prop); // \u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\n\n    if (config == nullptr) { // \u5982\u679c\u914d\u7f6e\u4e3a\u7a7a\n        ALOGE(\"Failed to set value: config not found, property: 0x%x\", prop);\n        return StatusCode::INVALID_ARG;\n    }\n\n    if (!checkWritePermission(*config)) { // \u5982\u679c\u6ca1\u6709\u5199\u6743\u9650\n        return StatusCode::ACCESS_DENIED;\n    }\n\n    handlePropertySetEvent(value); // \u5904\u7406\u5c5e\u6027\u8bbe\u7f6e\u4e8b\u4ef6\n\n    auto status = mHal-&gt;set(value); // \u8c03\u7528mHal\u7684set\u65b9\u6cd5\u8bbe\u7f6e\u5c5e\u6027\u503c\n\n    return Return&lt;StatusCode&gt;(status); // \u8fd4\u56de\u8bbe\u7f6e\u7ed3\u679c\u7684\u72b6\u6001\u7801\n}\n</code></pre> <p>\u5176\u4e2d\u8fd9\u91cc\u7684 handlePropertySetEvent() \u51fd\u6570\u975e\u5e38\u91cd\u8981\uff0c\u4e3b\u8981\u662f\u7528\u6765\u8c03\u7528  SubscriptionManager \u628a\u4e8b\u4ef6\u56de\u8c03\u5230\u5ba2\u6237\u7aef\u7684\uff1b\u5173\u4e8e\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u540e\u9762\u4f1a\u5206\u6790\u3002</p> <p>\u73b0\u5728\u5148\u770b mHal-&gt;set(value) \uff0c\u8fd8\u662f\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0cmHal \u5c31\u662f EmulatedVehicleHal\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulatedvehiclehalset","title":"EmulatedVehicleHal.set()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.cpp\n\nStatusCode EmulatedVehicleHal::set(const VehiclePropValue&amp; propValue) {\n     ...\n\n    // \u5c06\u503c\u53d1\u9001\u7ed9\u8f66\u8f86\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u5c06\u4e0e\uff08\u771f\u5b9e\u6216\u6a21\u62df\u7684\uff09\u6c7d\u8f66\u901a\u4fe1\n    auto setValueStatus = mVehicleClient-&gt;setProperty(propValue, updateStatus);\n    if (setValueStatus != StatusCode::OK) {\n        return setValueStatus;\n    }\n\n    return StatusCode::OK;\n}\n</code></pre> <p>\u901a\u8fc7 VehicleHal \u521d\u59cb\u5316\u7684\u6d41\u7a0b\u5176\u5b9e\u53ef\u4ee5\u77e5\u9053\uff0cmVehicleClient \u5c31\u662f VehicleHalClient \u3002\u4f46\u8fd9\u91cc\u663e\u7136\u662f\u9884\u7559\u7684\u5382\u5546\u5b9e\u73b0\u7684\u3002 \u6211\u4eec\u901a\u8fc7\u5382\u5546\u7684\u4ee3\u7801\u53ef\u4ee5\u77e5\u9053 mVehicleClient \u662f VehicleClientImpl \u3002</p> <pre><code>StatusCode VehicleClientImpl::setProperty(const VehiclePropValue&amp; value, bool updateStatus) {  \n    return mVehicleServer-&gt;onSetProperty(value);  \n}\n</code></pre> <pre><code>StatusCode VehicleHalServer::onSetProperty(const VehiclePropValue&amp; value) {\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u5382\u5546\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\u4e86\uff0c\u800c\u4ece\u8fd9\u91cc\u6211\u4eec\u4e5f\u77e5\u9053\u4e86\uff0caosp \u91cc VehicleService \u521d\u59cb\u5316\u65f6\uff0c\u5e76\u6ca1\u6709\u521b\u5efa VehicleHalClient\u3001VehicleHalServer\uff1b\u800c\u662f\u9700\u8981\u5382\u5546\u81ea\u5df1\u7684\u521b\u5efa\u3002</p> <pre><code>1. class VehicleHalServer : public property::IPropertyTransfer\n\n2. \u5728 VehicleHalServer::initAllProperties() \u91cc\uff0c\u4f1a\u8c03\u7528 prop-&gt;init(this)\uff0c\n\n3. void Property::init(IPropertyTransfer* transfer) {\n    mProperty-&gt;registerWritePropValueListener(  \n                [transfer](const VehiclePropValue&amp; value, CommitMode mode, bool updateStatus) {  \n                transfer-&gt;onPropertyValue(value, mode, updateStatus);  \n              });\n}\n\n4. mReportQueue.push(propValue);\n\n5.  PropValueStore::PropValueStore() : mReportQueue(true) {\n        mBatchTaskConsumer.run(&amp;mReportQueue, std::bind(&amp;PropValueStore::onVehiclePropertyValueFromStore,this,std::placeholders::_1), \"ReportConsumer\");\n    }\n\nVehicleHalServer::onSetProperty() -&gt;\n    IProperty::onSetPropertyValue() -&gt;\n        Area::onSetPropertyAreaValue -&gt;\n            IProperty::writeToStore() -&gt;\n                (\u75311,2,3\u53ef\u77e5)\n                VehicleHalServer::onPropertyValue() -&gt;\n                    PropValueStore::writeValue() -&gt;\n                        (\u75314,5\u53ef\u77e5)\n                        PropValueStore::onVehiclePropertyValueFromStore() -&gt;\n                            VehicleHalClient::onPropertyValue()\n                            DHUVehicleHal::onPropertyValue()\n\n\u6700\u7ec8\u4f1a\u8c03\u5230 VehiclePropertyStore \u53bb\u5199\u5c5e\u6027\u3002\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertystorewritevalue","title":"VehiclePropertyStore.writeValue()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehiclePropertyStore.cpp\n\nbool VehiclePropertyStore::writeValue(const VehiclePropValue&amp; propValue,\n                                        bool updateStatus) {\n    MuxGuard g(mLock);\n\n    // \u5c5e\u6027id\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5f53\u524d\u5c5e\u6027id\u6ca1\u6709\u6ce8\u518c\uff0c\u5219\u8fd4\u56defalse\uff0c\u5199\u5165\u5931\u8d25\u3002\n    if (!mConfigs.count(propValue.prop)) return false;\n\n\n    RecordId recId = getRecordIdLocked(propValue); // \u83b7\u53d6\u8bb0\u5f55ID\n    VehiclePropValue* valueToUpdate = const_cast&lt;VehiclePropValue*&gt;(getValueOrNullLocked(recId)); // \u83b7\u53d6\u8981\u66f4\u65b0\u7684\u503c\n\n    // \u5982\u679c\u5f53\u524d\u6ca1\u6709\u4fdd\u5b58\u8be5\u5c5e\u6027\uff0c\u5219\u52a0\u5165\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\n    if (valueToUpdate == nullptr) {\n        mPropertyValues.insert({ recId, propValue });\n        return true;\n    }\n\n    // \u5982\u679c\u8981\u66f4\u65b0\u7684\u503c\u7684\u65f6\u95f4\u6233\u5927\u4e8epropValue\u7684\u65f6\u95f4\u6233\uff0c\u5219\u8fd4\u56defalse\n    if (valueToUpdate-&gt;timestamp &gt; propValue.timestamp) {\n        return false;\n    }\n\n    // \u66f4\u65b0valueToUpdate\u7684\u65f6\u95f4\u6233\u548c\u503c\n    // propertyStore\u4e2d\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u53ea\u7531\u670d\u52a1\u5668\u7aef\u66f4\u65b0\uff0c\u5b83\u8868\u793a\u670d\u52a1\u5668\u751f\u6210\u4e8b\u4ef6\u7684\u65f6\u95f4\n    valueToUpdate-&gt;timestamp = propValue.timestamp;\n    valueToUpdate-&gt;value = propValue.value;\n\n    // \u5982\u679c\u9700\u8981\u66f4\u65b0\u72b6\u6001\uff0c\u5219\u66f4\u65b0valueToUpdate\u7684\u72b6\u6001\n    if (updateStatus) {\n        valueToUpdate-&gt;status = propValue.status;\n    }\n\n    return true;\n}\n</code></pre> <ul> <li>\u5982\u679c\u8981\u5199\u7684\u5c5e\u6027id \u8fd8\u6ca1\u6709\u6ce8\u518c\uff0c\u5219\u4e0d\u5199\u5165\u503c\uff0c\u8fd4\u56de\u5931\u8d25</li> <li>\u5982\u679c\u8981\u5199\u7684\u5c5e\u6027id \u8fd8\u6ca1\u6709\u4fdd\u5b58\u8fc7\uff0c\u8fd9\u4fdd\u5b58\u5728 mPropertyValues \u4e2d</li> <li>\u5982\u679c\u8981\u66f4\u65b0\u7684\u503c\u7684\u65f6\u95f4\u6233\u5c0f\u4e8e propValue \u7684\u65f6\u95f4\u6233\uff0c\u5219\u66f4\u65b0</li> </ul> <p>\u8fd9\u91cc\u6709\u4e2a\u7591\u95ee\uff0c\u66f4\u65b0\u7684\u503c\u5e76\u6ca1\u6709\u66f4\u65b0\u5230 mPropertyValues\uff0c\u90a3\u4e0b\u6b21\u901a\u8fc7 get() \u83b7\u53d6\u4e0d\u5c31\u6709\u95ee\u9898\u4e48\uff1f</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalmanagerhandlepropertysetevent","title":"VehicleHalManager.handlePropertySetEvent()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehicleHalManager.cpp\n\nvoid VehicleHalManager::handlePropertySetEvent(const VehiclePropValue&amp; value) {\n    auto clients =\n        mSubscriptionManager.getSubscribedClients(value.prop, SubscribeFlags::EVENTS_FROM_ANDROID);\n    for (const auto&amp; client : clients) {\n        client-&gt;getCallback()-&gt;onPropertySet(value);\n    }\n}\n\nhardware/interfaces/automotive/vehicle/2.0/default/common/src/SubscriptionManager.cpp\n\nstd::list&lt;sp&lt;HalClient&gt;&gt; SubscriptionManager::getSubscribedClients(int32_t propId,\n                                                                   SubscribeFlags flags) const {\n    MuxGuard g(mLock);\n    return getSubscribedClientsLocked(propId, flags);\n}\n\nstd::list&lt;sp&lt;HalClient&gt;&gt; SubscriptionManager::getSubscribedClientsLocked(\n    int32_t propId, SubscribeFlags flags) const {\n    std::list&lt;sp&lt;HalClient&gt;&gt; subscribedClients;\n\n    sp&lt;HalClientVector&gt; propClients = getClientsForPropertyLocked(propId);\n    if (propClients.get() != nullptr) {\n        for (size_t i = 0; i &lt; propClients-&gt;size(); i++) {\n            const auto&amp; client = propClients-&gt;itemAt(i);\n            if (client-&gt;isSubscribed(propId, flags)) {\n                subscribedClients.push_back(client);\n            }\n        }\n    }\n\n    return subscribedClients;\n}\n</code></pre> <p>handlePropertySetEvent \u8c03\u7528 SubscriptionManager.getSubscribedClients() \u8fd4\u56de\u8ba2\u9605\u7684HalClient\u5bf9\u8c61list\u5217\u8868\uff1b\u7136\u540e\u4f1a\u904d\u5386 HalClient \u8c03\u7528\u5176 onPropertySet(value) \u56de\u8c03\u63a5\u53e3\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclecallback","title":"VehicleCallback","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\nfinal class HalClient {\n\n    private final IVehicleCallback mInternalCallback;\n\n    HalClient(IVehicle vehicle, Looper looper, IVehicleCallback callback,\n            int waitCapMs, int sleepMs) {\n        mInternalCallback = new VehicleCallback(handler);\n    }\n\n    private static final class VehicleCallback extends IVehicleCallback.Stub {\n        private final Handler mHandler;\n\n        VehicleCallback(Handler handler) {\n            mHandler = handler;\n        }\n\n        @Override\n        public void onPropertyEvent(ArrayList&lt;VehiclePropValue&gt; propValues) {\n            mHandler.sendMessage(Message.obtain(\n                    mHandler, CallbackHandler.MSG_ON_PROPERTY_EVENT, propValues));\n        }\n\n        @Override\n        public void onPropertySet(VehiclePropValue propValue) {\n            mHandler.sendMessage(Message.obtain(\n                    mHandler, CallbackHandler.MSG_ON_PROPERTY_SET, propValue));\n        }\n\n        @Override\n        public void onPropertySetError(int errorCode, int propId, int areaId) {\n            mHandler.sendMessage(Message.obtain(\n                    mHandler, CallbackHandler.MSG_ON_SET_ERROR,\n                    new PropertySetError(errorCode, propId, areaId)));\n        }\n    }\n}\n</code></pre> <p>\u56de\u8c03 onPropertySet() \u88ab\u89e6\u53d1\u540e\uff0c\u901a\u8fc7sendMessage()\uff0c\u7136\u540e handlemessage() \u5904\u7406\u6d88\u606f\u3002 \u6700\u540e\u8c03\u56de\u5230 VehicleHal.onPropertySet() \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n@Override  \npublic void onPropertySet(VehiclePropValue value) {  \n    // No need to handle on-property-set events in HAL service yet.  \n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#get","title":"get \u83b7\u53d6\u5c5e\u6027","text":"<p>\u6211\u4eec\u8fd8\u662f\u4ee5 PowerHalService \u4e3a\u4f8b\uff0c\u5982\u4e0b\uff1a</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\n@Nullable\npublic PowerState getCurrentPowerState() {\n    int[] state;\n    try {\n        state = mHal.get(int[].class, VehicleProperty.AP_POWER_STATE_REQ);\n    } catch (ServiceSpecificException e) {\n        Slog.e(CarLog.TAG_POWER, \"Cannot get AP_POWER_STATE_REQ\", e);\n        return null;\n    }\n    return new PowerState(state[VehicleApPowerStateReqIndex.STATE],\n            state[VehicleApPowerStateReqIndex.ADDITIONAL]);\n}\n</code></pre> <p>mHal \u662f VehicleHal\uff0c\u6240\u4ee5\u4f1a\u8c03\u5230 VehicleHal.get() \u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u8fd8\u662f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u7801\u6d41\u7a0b\u6765\u4e3e\u4f8b\u975e car-service \u8fdb\u7a0b\u600e\u4e48\u83b7\u53d6\u5c5e\u6027\u7684\u3002</p> <ul> <li>CarHvacManager.getIntProperty()</li> </ul> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/hvac/CarHvacManager.java\n\npublic int getIntProperty(@PropertyId int propertyId, int area) {\n    return mCarPropertyMgr.getIntProperty(propertyId, area);\n}\n</code></pre> <ul> <li>CarPropertyManager.getProperty()</li> </ul> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\npublic int getIntProperty(int prop, int area) {\n    checkSupportedProperty(prop);\n    CarPropertyValue&lt;Integer&gt; carProp = getProperty(Integer.class, prop, area);\n    return handleNullAndPropertyStatus(carProp, area, 0);\n}\n\n@Nullable\npublic &lt;E&gt; CarPropertyValue&lt;E&gt; getProperty(@NonNull Class&lt;E&gt; clazz, int propId, int areaId) {\n    ...\n\n    try {\n        CarPropertyValue&lt;E&gt; propVal = mService.getProperty(propId, areaId);\n        ...\n        return propVal;\n    ...\n}\n</code></pre> <ul> <li>CarPropertyService.getProperty()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/CarPropertyService.java\n\n@Override\npublic CarPropertyValue getProperty(int prop, int zone) {\n    ...\n    return mHal.getProperty(prop, zone);\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mHal \u662f PropertyHalService </p> <ul> <li>PropertyHalService.get()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n@Nullable\npublic CarPropertyValue getProperty(int mgrPropId, int areaId) throws ServiceSpecificException {\n    ...\n    VehiclePropValue value = mVehicleHal.get(halPropId, areaId);\n    ...\n}\n</code></pre> <ul> <li>VehicleHal.get()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n public VehiclePropValue get(int propertyId, int areaId) {\n    ...\n    return mHalClient.getValue(createPropValue(propertyId, areaId));\n}\n</code></pre> <ul> <li>HalClient.getValue()</li> </ul> <pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\nVehiclePropValue getValue(VehiclePropValue requestedPropValue) {\n    ...\n    ValueResult res = internalGet(requestedPropValue);\n    ...\n}\n\n\nprivate ValueResult internalGet(VehiclePropValue requestedPropValue) {\n    ...\n    try {\n        mVehicle.get(requestedPropValue,\n                (status, propValue) -&gt; {\n                    result.status = status;\n                    result.propValue = propValue;\n                });\n    } \n    ...\n}\n</code></pre> <p>\u597d\uff0c\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\u3002\u6211\u4eec\u8fd8\u662f\u56de\u5230\u521a\u624d\u7684\u4f8b\u5b50\u5f53\u4e2d\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalget","title":"VehicleHal.get()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic &lt;T&gt; T get(Class clazz, VehiclePropValue requestedPropValue) {\n    VehiclePropValue propValue;\n    propValue = mHalClient.getValue(requestedPropValue);\n\n    if (clazz == Long.class || clazz == long.class) {\n        return (T) propValue.value.int64Values.get(0);\n    } else if (clazz == Integer.class || clazz == int.class) {\n        return (T) propValue.value.int32Values.get(0);\n    } else if (clazz == Boolean.class || clazz == boolean.class) {\n        return (T) Boolean.valueOf(propValue.value.int32Values.get(0) == 1);\n    } else if (clazz == Float.class || clazz == float.class) {\n        return (T) propValue.value.floatValues.get(0);\n    } else if (clazz == Long[].class) {\n        Long[] longArray = new Long[propValue.value.int64Values.size()];\n        return (T) propValue.value.int32Values.toArray(longArray);\n    } else if (clazz == Integer[].class) {\n        Integer[] intArray = new Integer[propValue.value.int32Values.size()];\n        return (T) propValue.value.int32Values.toArray(intArray);\n    } else if (clazz == Float[].class) {\n        Float[] floatArray = new Float[propValue.value.floatValues.size()];\n        return (T) propValue.value.floatValues.toArray(floatArray);\n    } else if (clazz == long[].class) {\n        return (T) toLongArray(propValue.value.int64Values);\n    } else if (clazz == int[].class) {\n        return (T) toIntArray(propValue.value.int32Values);\n    } else if (clazz == float[].class) {\n        return (T) toFloatArray(propValue.value.floatValues);\n    } else if (clazz == byte[].class) {\n        return (T) toByteArray(propValue.value.bytes);\n    } else if (clazz == String.class) {\n        return (T) propValue.value.stringValue;\n    } else {\n        throw new IllegalArgumentException(\"Unexpected type: \" + clazz);\n    }\n}\n</code></pre> <p>VehicleHal \u91cc\u6709\u51e0\u4e2a get() \u51fd\u6570\uff0c\u4e0d\u7ba1\u662f\u90a3\u4e2a get() \u51fd\u6570\uff0c\u6700\u7ec8\u90fd\u662f\u8c03 mHalClient.getValue() \u83b7\u53d6\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#halclientgetvalue","title":"HalClient.getValue()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/HalClient.java\n\nVehiclePropValue getValue(VehiclePropValue requestedPropValue) {\n    final ObjectWrapper&lt;VehiclePropValue&gt; valueWrapper = new ObjectWrapper&lt;&gt;();\n    int status = invokeRetriable(() -&gt; {\n        ValueResult res = internalGet(requestedPropValue);\n        valueWrapper.object = res.propValue;\n        return res.status;\n    }, mWaitCapMs, mSleepMs);\n\n    ...\n}\n\nprivate ValueResult internalGet(VehiclePropValue requestedPropValue) {\n    final ValueResult result = new ValueResult();\n    try {\n        mVehicle.get(requestedPropValue,\n                (status, propValue) -&gt; {\n                    result.status = status;\n                    result.propValue = propValue;\n                });\n    } catch (RemoteException e) {\n        Slogf.e(TAG, getValueErrorMessage(\"get\", requestedPropValue), e);\n        result.status = StatusCode.TRY_AGAIN;\n    }\n\n    return result;\n}\n</code></pre> <p>\u6839\u636e\u524d\u9762\u7684\u5206\u6790 mVehicle \u662f VehicleHal \u3002\u4e5f\u5c31\u662f IVehicle.hal \u7684 get() \u63a5\u53e3\u3002 \u6700\u7ec8\u662f\u8c03\u5230 VehicleHalManager.cpp \u7684 get() \u63a5\u53e3\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclehalmanagerget","title":"VehicleHalManager.get()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehicleHalManager.cpp\n\nReturn&lt;void&gt; VehicleHalManager::get(const VehiclePropValue&amp; requestedPropValue, get_cb _hidl_cb) {\n    const auto* config = getPropConfigOrNull(requestedPropValue.prop);  // \u83b7\u53d6\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u4fe1\u606f\n    if (config == nullptr) {\n        ALOGE(\"Failed to get value: config not found, property: 0x%x\", requestedPropValue.prop);\n        _hidl_cb(StatusCode::INVALID_ARG, kEmptyValue);\n        return Void();\n    }\n\n    if (!checkReadPermission(*config)) {  // \u5982\u679c\u6ca1\u6709\u8bfb\u53d6\u6743\u9650\n        _hidl_cb(StatusCode::ACCESS_DENIED, kEmptyValue);  // \u56de\u8c03ACCESS_DENIED\u9519\u8bef\u7801\u548c\u7a7a\u503c\n        return Void();  // \u8fd4\u56de\u7a7a\u503c\n    }\n\n    StatusCode status;\n    auto value = mHal-&gt;get(requestedPropValue, &amp;status);  // \u8c03\u7528mHal\u7684get\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\u503c\n    _hidl_cb(status, value.get() ? *value : kEmptyValue);  // \u56de\u8c03\u83b7\u53d6\u7684\u72b6\u6001\u7801\u548c\u5c5e\u6027\u503c\uff08\u5982\u679c\u6709\uff09\n\n    return Void();  // \u8fd4\u56de\u7a7a\u503c\n}\n</code></pre> <p>\u8fd8\u662f\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0cmHal \u5c31\u662f EmulatedVehicleHal\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#emulatedvehiclehalget","title":"EmulatedVehicleHal.get()","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.cpp\n\nVehicleHal::VehiclePropValuePtr EmulatedVehicleHal::get(\n        const VehiclePropValue&amp; requestedPropValue, StatusCode* outStatus) {\n    auto propId = requestedPropValue.prop;\n    ALOGV(\"get(%d)\", propId);\n\n    auto&amp; pool = *getValuePool();\n    VehiclePropValuePtr v = nullptr; // \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411VehiclePropValue\u7684\u667a\u80fd\u6307\u9488v\uff0c\u5e76\u521d\u59cb\u5316\u4e3anullptr\n\n    // \u6839\u636epropId\u6765\u83b7\u53d6\u503c\n    // OBD2_FREEZE_FRAME \u662f 0BD \u68c0\u6d4b\u5230\u6545\u969c\u4fe1\u606f\n    // OBD2_FREEZE_FRAME_INFO \u662f\u6545\u969c\u68c0\u6d4b\u5230\u5f97\u65f6\u95f4\u6233\n    // \u4e00\u822c\u8981\u83b7\u53d6 OBD2_FREEZE_FRAME \u7684\u6570\u636e\u4e4b\u524d\uff0c\u90fd\u8981\u901a\u8fc7 OBD2_FREEZE_FRAME_INFO \u83b7\u53d6\u65f6\u95f4\u6233\u3002\n    //\u9664\u4e86\u8fd9\u4e24\u4e2a\u5c5e\u6027\u503c\uff0c\u5176\u4ed6\u7684\u90fd\u76f4\u63a5\u4ece\u4e34\u65f6\u7684Store\u91cc\u9762\u83b7\u53d6\u5f53\u524d\u5c5e\u6027\u7684\u72b6\u6001\u503c\u3002\n    switch (propId) {\n        case OBD2_FREEZE_FRAME:\n            v = pool.obtainComplex();\n            *outStatus = fillObd2FreezeFrame(requestedPropValue, v.get());\n            break;\n        case OBD2_FREEZE_FRAME_INFO:\n            v = pool.obtainComplex();\n            *outStatus = fillObd2DtcInfo(v.get());\n            break;\n        default:\n            // \u5982\u679c EmulatedUserHal \u652f\u6301\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5219\u8c03\u7528 EmulatedUserHal.onGetProperty() \u51fd\u6570\u83b7\u53d6\u5c5e\u6027\u503c\n            if (mEmulatedUserHal != nullptr &amp;&amp; mEmulatedUserHal-&gt;isSupported(propId)) {\n                ALOGI(\"get(): getting value for prop %d from User HAL\", propId);\n                const auto&amp; ret = mEmulatedUserHal-&gt;onGetProperty(requestedPropValue);\n                if (!ret.ok()) {\n                    ALOGE(\"get(): User HAL returned error: %s\", ret.error().message().c_str());\n                    *outStatus = StatusCode(ret.error().code()); \n                } else {\n                    auto value = ret.value().get();\n                    if (value != nullptr) {\n                        ALOGI(\"get(): User HAL returned value: %s\", toString(*value).c_str());\n                        v = getValuePool()-&gt;obtain(*value);\n                        *outStatus = StatusCode::OK;\n                    } else {\n                        ALOGE(\"get(): User HAL returned null value\");\n                        *outStatus = StatusCode::INTERNAL_ERROR;\n                    }\n                }\n                break;\n            }\n\n            // \u7a7a\u8c03\u7535\u6e90\u5c5e\u6027 \n            if (mHvacPowerProps.count(propId)) {\n                auto hvacPowerOn = mPropStore-&gt;readValueOrNull(\n                    toInt(VehicleProperty::HVAC_POWER_ON),\n                    (VehicleAreaSeat::ROW_1_LEFT | VehicleAreaSeat::ROW_1_RIGHT |\n                    VehicleAreaSeat::ROW_2_LEFT | VehicleAreaSeat::ROW_2_CENTER |\n                    VehicleAreaSeat::ROW_2_RIGHT));\n                if (hvacPowerOn &amp;&amp; hvacPowerOn-&gt;value.int32Values.size() == 1\n                        &amp;&amp; hvacPowerOn-&gt;value.int32Values[0] == 0) {\n                    *outStatus = StatusCode::NOT_AVAILABLE; // \u5c06\u72b6\u6001\u7801\u8bbe\u7f6e\u4e3aNOT_AVAILABLE\n                    break;\n                }\n            }\n\n            // mPropStore \u5c31\u662f VehiclePropertyStore \uff0c\u4e5f\u5c31\u662f\u4ece VehiclePropertyStore \u83b7\u53d6\u5c5e\u6027\n            auto internalPropValue = mPropStore-&gt;readValueOrNull(requestedPropValue);\n            if (internalPropValue != nullptr) {\n                v = getValuePool()-&gt;obtain(*internalPropValue);\n            }\n\n            if (!v) {\n                *outStatus = StatusCode::INVALID_ARG;\n            } else if (v-&gt;status == VehiclePropertyStatus::AVAILABLE) {\n                *outStatus = StatusCode::OK;\n            } else {\n                *outStatus = StatusCode::TRY_AGAIN;\n            }\n            break;\n    }\n    if (v.get()) {\n        v-&gt;timestamp = elapsedRealtimeNano();\n    }\n    return v;\n}\n</code></pre> <p>\u8fd9\u91cc\u5176\u5b9e\u5f88\u7b80\u5355\uff1a - \u6545\u969c \u76f8\u5173\u7684\u5c5e\u6027\uff0c\u5219\u76f8\u5173\u51fd\u6570\u5355\u72ec\u51fa\u6765\uff0c\u4f46\u6700\u7ec8\u90fd\u8fd8\u662f\u8c03\u7528\u5230 VehiclePropertyStore \u91cc\u83b7\u53d6\u7684\u3002 - EmulatedUserHal \u652f\u6301\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5219\u4ece EmulatedUserHal \u83b7\u53d6 - \u7a7a\u8c03\u7535\u6e90\u5c5e\u6027\uff0c\u5355\u72ec\u5904\u7406 - \u5982\u679c\u4ee5\u4e0a\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5219\u6b63\u5e38\u4ece VehiclePropertyStore \u83b7\u53d6\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#vehiclepropertystore_1","title":"VehiclePropertyStore","text":"<pre><code>hardware/interfaces/automotive/vehicle/2.0/default/common/src/VehiclePropertyStore.cpp\n\nstd::unique_ptr&lt;VehiclePropValue&gt; VehiclePropertyStore::readValueOrNull(\n        const VehiclePropValue&amp; request) const {\n    MuxGuard g(mLock);\n    RecordId recId = getRecordIdLocked(request);\n    const VehiclePropValue* internalValue = getValueOrNullLocked(recId);\n    return internalValue ? std::make_unique&lt;VehiclePropValue&gt;(*internalValue) : nullptr;\n}\n\nstd::unique_ptr&lt;VehiclePropValue&gt; VehiclePropertyStore::readValueOrNull(\n        int32_t prop, int32_t area, int64_t token) const {\n    RecordId recId = {prop, isGlobalProp(prop) ? 0 : area, token };\n    MuxGuard g(mLock);\n    const VehiclePropValue* internalValue = getValueOrNullLocked(recId);\n    return internalValue ? std::make_unique&lt;VehiclePropValue&gt;(*internalValue) : nullptr;\n}\n\nconst VehiclePropValue* VehiclePropertyStore::getValueOrNullLocked(\n        const VehiclePropertyStore::RecordId&amp; recId) const  {\n    auto it = mPropertyValues.find(recId);\n    return it == mPropertyValues.end() ? nullptr : &amp;it-&gt;second;\n}\n</code></pre> <p>\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u6765\uff0cVehicleHal \u914d\u7f6e\u7684\u8fd9\u4e9b\u8f66\u8f86\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709\u901a\u8fc7\u6570\u636e\u5e93\u6216\u8005\u6587\u4ef6\u8fdb\u7a0b\u5b58\u50a8\u3002\u800c\u662f\u901a\u8fc7 VehiclePropertyStore \u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 </p> <p>\u5176\u5b9e\u524d\u9762\u6211\u4eec\u63d0\u5230 VehiclePropertyStore \u7684\u7c7b\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a registerProperty() \u51fd\u6570\uff0c\u5c31\u662f\u6bcf\u6b21\u8fdb\u7a0b\u8d77\u6765\u7684\u65f6\u5019\u628a\u6240\u6709\u7684\u5c5e\u6027\u90fd\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002</p> <pre><code>//hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/VehicleEmulator.h\nclass EmulatedVehicleHalIface : public VehicleHal{.....}\n\n//hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.h\nclass EmulatedVehicleHal : public EmulatedVehicleHalIface{....}\n\n//hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/EmulatedVehicleHal.cpp\nVehicleHal::VehiclePropValuePtr EmulatedVehicleHal::get(\n        const VehiclePropValue&amp; requestedPropValue, StatusCode* outStatus) {\n    auto propId = requestedPropValue.prop;\n    auto&amp; pool = *getValuePool();\n    VehiclePropValuePtr v = nullptr;\n\n    switch (propId) {\n        case OBD2_FREEZE_FRAME:\n            v = pool.obtainComplex();\n            *outStatus = fillObd2FreezeFrame(requestedPropValue, v.get());\n            break;\n        case OBD2_FREEZE_FRAME_INFO:\n            v = pool.obtainComplex();\n            *outStatus = fillObd2DtcInfo(v.get());\n            break;\n        default:\n            auto internalPropValue = mPropStore-&gt;readValueOrNull(requestedPropValue);\n            if (internalPropValue != nullptr) {\n                v = getValuePool()-&gt;obtain(*internalPropValue);\n            }\n            *outStatus = v != nullptr ? StatusCode::OK : StatusCode::INVALID_ARG;\n            break;\n    }\n    return v;\n}\n</code></pre> <ul> <li> <p>VehiclePropertyStore.cpp - readValueOrNull</p> </li> <li> <p>getRecordIdLocked \u6839\u636e\u5165\u53c2VehiclePropValue\u83b7\u53d6RecordId\uff0c\u5173\u4e8eVehiclePropValue\u5bf9\u8c61\u53ef\u67e5\u770b\u4e0a\u5c42VehicleHal.java\u7684get\u51fd\u6570\u7684\u6d41\u7a0b</p> </li> <li> <p>\u8c03\u7528getValueOrNullLocked\uff0c\u6839\u636eRecordId\u4eceVehiclePropertyStore\u4e2d\u8bfb\u53d6</p> </li> </ul> <pre><code>//VehiclePropertyStore.cpp\nVehiclePropertyStore::RecordId VehiclePropertyStore::getRecordIdLocked(\n        const VehiclePropValue&amp; valuePrototype) const {\n    RecordId recId = {\n        .prop = valuePrototype.prop,\n        .area = isGlobalProp(valuePrototype.prop) ? 0 : valuePrototype.areaId,\n        .token = 0\n    };\n\n    auto it = mConfigs.find(recId.prop);\n    if (it == mConfigs.end()) return {};\n\n    if (it-&gt;second.tokenFunction != nullptr) {\n        recId.token = it-&gt;second.tokenFunction(valuePrototype);\n    }\n    return recId;\n}\n\nconst VehiclePropValue* VehiclePropertyStore::getValueOrNullLocked(\n        const VehiclePropertyStore::RecordId&amp; recId) const  {\n    auto it = mPropertyValues.find(recId);\n    return it == mPropertyValues.end() ? nullptr : &amp;it-&gt;second;\n}\n\n\n//VehiclePropertyStore.h\nclass VehiclePropertyStore {\n    ...\n    struct RecordId {\n        int32_t prop;\n        int32_t area;\n        int64_t token;\n\n        bool operator==(const RecordId&amp; other) const;\n        bool operator&lt;(const RecordId&amp; other) const;\n    };\n\n    using PropertyMap = std::map&lt;RecordId, VehiclePropValue&gt;;\n    .....\n    PropertyMap mPropertyValues;\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-s-hal-intro/#_2","title":"\u9644\u5f55","text":"<p>\u6587\u4e2d\u63d0\u5230\u7684\u4e00\u4e2a\u63a5\u53e3\u6587\u4ef6\u4f1a\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u81ea\u52a8\u751f\u6210\uff0c\u4e3b\u8981\u76ee\u5f55\u662f\u5728\uff1a</p> <pre><code>out/soong/.intermediates/hardware/interfaces/automotive/vehicle/2.0\n\nandroid.hardware.automotive.vehicle@2.0_genc++\nandroid.hardware.automotive.vehicle@2.0_genc++_headers\nandroid.hardware.automotive.vehicle-V2.0-java_gen_java\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/","title":"Android-U Vehicle HAL\u67b6\u6784","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehal","title":"VehicleHAL \u7b80\u4ecb","text":"<ul> <li>\u6e90\u7801\u4f4d\u7f6e : hardware/interfaces/automotive/vehicle/2.0/</li> <li>\u7c7b\u56fe\uff1a\u7565</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#_1","title":"\u63a5\u53e3\u6587\u4ef6","text":"<ul> <li> <p>\u6e90\u7801\u4f4d\u7f6e : hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle</p> <p>\u4ece Android T \u5f00\u59cb\uff0cVehicle HAL\u5df2\u7ecf\u6539\u6210 stable aidl \u7684\u65b9\u5f0f\u4e86\u3002 \u5982\u4e0b Android.bp\uff1a</p> </li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/aidl/Android.bp\n\naidl_interface {\n    name: \"android.hardware.automotive.vehicle\",\n    vendor_available: true,\n    srcs: [\n        \"android/hardware/automotive/vehicle/*.aidl\",\n    ],\n    frozen: true,\n    stability: \"vintf\",\n    backend: {\n        cpp: {\n            enabled: false,\n        },\n        java: {\n            sdk_version: \"module_current\",\n            min_sdk_version: \"31\",\n            apex_available: [\n                \"//apex_available:platform\",\n                \"com.android.car.framework\",\n            ],\n        },\n    },\n    versions_with_info: [\n        {\n            version: \"1\",\n            imports: [],\n        },\n        {\n            version: \"2\",\n            imports: [],\n        },\n\n    ],\n\n}\n</code></pre> <ul> <li>IVehicle.aidl     \u5b9a\u4e49\u7684\u662f\u4ece CarService \u5f80 HAL \u8c03\u7528\u7684\u63a5\u53e3</li> <li>IVehicleCallback.aidl     HAL \u5f80 CarService \u4e0a\u62a5\u56de\u8c03\u7684\u63a5\u53e3</li> <li>VehicleHalProto.proto     hardware/interfaces/automotive/vehicle/proto/VehicleHalProto.proto     \u5b9a\u4e49\u7684\u662f\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u5728\u6a21\u62df\u5668VHAL\u548c\u6a21\u62df\u5668\u4e4b\u95f4\u4f20\u9012\u6d88\u606f\u3002</li> <li>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#ivehicleaidl","title":"IVehicle.aidl","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicle.aidl\n\n@VintfStability\ninterface IVehicle {\n    /* \u65e0\u6548\u7684\u5185\u5b58ID\u3002 */\n    const long INVALID_MEMORY_ID = 0;\n    /* \u6bcf\u4e2a\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\u3002 */\n    const int MAX_SHARED_MEMORY_FILES_PER_CLIENT = 3;\n\n    /**\n     * \u8fd4\u56de\u6b64\u8f66\u8f86HAL\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u5217\u8868\u3002\n     *\n     * @return \u4e00\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u914d\u7f6e\u5217\u8868\uff08\u5982\u679c\u5b83\u4eec\u7b26\u5408binder\u5185\u5b58\u9650\u5236\uff09\u6216\u5305\u542b\u914d\u7f6e\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\n     * \u5fc5\u987b\u4f7f\u7528{@code android-automotive-large-parcelable}\u5e93\u8fdb\u884c\u89e3\u6790\u3002\n     */\n    VehiclePropConfigs getAllPropConfigs();\n\n    /**\n     * \u8fd4\u56de\u7ed9\u5b9a\u5c5e\u6027\u7684\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002\n     *\n     * \u5982\u679c\u672a\u627e\u5230\u8bf7\u6c42\u7684VehicleProperty\u4e4b\u4e00\uff0c\u5219\u5fc5\u987b\u8fd4\u56de{@link StatusCode#INVALID_ARG}\uff0c\n     * \u5426\u5219\u8fd4\u56de\u5e26\u6709{@link StatusCode#OK}\u7684\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u5217\u8868\u3002\n     *\n     * @param props \u8981\u83b7\u53d6\u914d\u7f6e\u7684\u5c5e\u6027ID\u7684\u5217\u8868\u3002\n     * @return \u4e00\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u914d\u7f6e\u5217\u8868\uff08\u5982\u679c\u5b83\u4eec\u7b26\u5408binder\u5185\u5b58\u9650\u5236\uff09\u6216\u5305\u542b\u914d\u7f6e\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\n     * \u5fc5\u987b\u4f7f\u7528{@code android-automotive-large-parcelable}\u5e93\u8fdb\u884c\u89e3\u6790\u3002\n     */\n    VehiclePropConfigs getPropConfigs(in int[] props);\n\n    /**\n     * \u5f02\u6b65\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     *\n     * \u5f53\u83b7\u53d6\u5230\u503c\u65f6\uff0c\u5c06\u8c03\u7528{@link IVehicleCallback#onGetValues}\u65b9\u6cd5\u3002\n     * \u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u90fd\u4f1a\u83b7\u53d6\u5230\u4e00\u90e8\u5206\u5df2\u83b7\u53d6\u7684\u5c5e\u6027\u3002\n     * \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u5c5e\u6027[A\uff0cB\uff0cC]\uff0c\u5219\u56de\u8c03\u53ef\u80fd\u4f1a\u4e24\u6b21\u8c03\u7528\uff0c\u4e00\u6b21\u8c03\u7528[A\uff0cC]\uff0c\u4e00\u6b21\u8c03\u7528[B]\u3002\n     * \u8c03\u7528\u8005\u4e0d\u5e94\u5bf9{@link IVehicleCallback#onGetValues}\u7684\u987a\u5e8f\u6709\u4efb\u4f55\u671f\u671b\u3002\n     *\n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u672a\u80fd\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u3002\n     * \u5982\u679c\u6b64\u65b9\u6cd5\u8fd4\u56deOK\uff0c\u5219\u4ecd\u7136\u6709\u53ef\u80fd\u672a\u80fd\u83b7\u53d6\u67d0\u4e9b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7531{@link GetValueResult#status}\u6307\u793a\u3002\n     *\n     * \u5bf9\u4e8e{@link VehiclePropertyChangeMode#STATIC}\u5c5e\u6027\uff0c\u6b64\u65b9\u6cd5\u5fc5\u987b\u59cb\u7ec8\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\n     * \u5bf9\u4e8e{@link VehiclePropertyChangeMode#ON_CHANGE}\u5c5e\u6027\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u6700\u65b0\u7684\u53ef\u7528\u503c\u3002\n     * \u5bf9\u4e8e\u53ef\u7f13\u5b58\u7684\u5c5e\u6027\uff0c\u5c06\u8fd4\u56de\u7f13\u5b58\u4e2d\u7684\u503c\uff0c\u800c\u65e0\u9700\u4e0e\u5b9e\u9645\u7684\u8f66\u8f86\u603b\u7ebf\u901a\u4fe1\u3002\n     *\n     * \u4e00\u4e9b\u5c5e\u6027\uff08\u5982{@code RADIO_PRESET}\uff09\u9700\u8981\u5728{@link VehiclePropValue}\u5bf9\u8c61\u4e2d\u4f20\u9012\u9644\u52a0\u6570\u636e\u3002\n     *\n     * \u5982\u679c\u5c1a\u65e0\u53ef\u7528\u6570\u636e\uff0c\u8fd9\u5728\u521d\u59cb\u9636\u6bb5\u53ef\u80fd\u53d1\u751f\uff0c{@link GetValueResult#status}\u5c06\u5305\u542b{@link StatusCode#TRY_AGAIN}\u3002\n     *\n     * \u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u4f20\u9012\u552f\u4e00\u7684RequestID\uff0c\u5982\u679c\u7ed9\u5b9a\u7684\u8bf7\u6c42ID\u4e0e\u5f85\u5904\u7406\u7684\u8bf7\u6c42ID\u4e4b\u4e00\u91cd\u590d\uff0c\n     * \u5219\u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de{@link StatusCode#INVALID_ARG}\u3002\n     *\n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5728\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027ID\u548c\u76f8\u540c\u7684\u533a\u57dfID\uff09\u3002\n     * \u5bf9\u4e8e\u91cd\u590d\u7684\u5c5e\u6027\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de{@link StatusCode#INVALID_ARG}\u3002\n     *\n     * \u8bf7\u6c42\u4e2d\u7684{@link VehiclePropValue#timestamp}\u5b57\u6bb5\u5c06\u88ab\u5ffd\u7565\u3002\n     * {@link GetValueResult}\u4e2d\u7684{@link VehiclePropValue#timestamp}\u5b57\u6bb5\u5fc5\u987b\u662f\u4ece\u542f\u52a8\u65f6\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\u5f00\u59cb\u8ba1\u7b97\u7684\uff0c\n     * \u5f53ON_CHANGE\u5c5e\u6027\u7684\u503c\u53d1\u751f\u53d8\u5316\u6216\u6839\u636e\u8f6e\u8be2\u901f\u7387\u68c0\u67e5\u503c\u65f6\u3002\n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u8fde\u7eed\u5c5e\u6027\uff0cVHAL\u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002\n     *\n     * @param callback \u56de\u8c03\u63a5\u53e3\uff0c\u5728\u83b7\u53d6\u5230\u503c\u540e\u5c06\u8c03\u7528\u5176'onGetValues'\u65b9\u6cd5\u3002\n     *    \u8c03\u7528\u8005\u5e94\u4f7f\u7528{@code android-automotive-large-parcelable}\u5e93\u89e3\u6790\u8fd4\u56de\u7684{@link GetValueResult}\u5bf9\u8c61\u3002\n     * @param requests \u5305\u542b\u8bf7\u6c42\u5c5e\u6027\u5217\u8868\u6216\u5305\u542b\u5c5e\u6027\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n     *    \u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002\n     */\n    void getValues(IVehicleCallback callback, in GetValueRequests requests);\n\n    /**\n     * \u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3002\n     *\n     * \u5728\u901a\u8fc7\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u8bbe\u7f6e\u503c\u8bf7\u6c42\u6216\u8bbe\u7f6e\u5931\u8d25\u540e\uff0c\u5c06\u8c03\u7528{@link IVehicleCallback\uff03onSetValues}\u51fd\u6570\u3002\n     * \u5982\u679c\u603b\u7ebf\u534f\u8bae\u652f\u6301\u786e\u8ba4\uff0c\u5c06\u5728\u6536\u5230\u786e\u8ba4\u540e\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\n     *\n     * \u5bf9\u4e8e\u67d0\u4e9b\u8f66\u8f86\u603b\u7ebf\uff08\u4f8b\u5982CAN\u603b\u7ebf\uff09\uff0c\u4e0d\u652f\u6301\u786e\u8ba4\uff0cOnSetValues\u5e76\u4e0d\u610f\u5473\u7740\u503c\u7684\u66f4\u6539\u4f1a\u7acb\u5373\u53cd\u6620\u5728{@link #getValues}\u4e2d\u3002\n     *\n     * \u5982\u679c\u8f93\u51fa\u72b6\u6001\u5305\u542b\u9519\u8bef\uff0c\u5219\u8868\u793a\u6211\u4eec\u65e0\u6cd5\u8bbe\u7f6e\u6240\u6709\u5c5e\u6027\u3002\u5982\u679c\u65e0\u6cd5\u8bbe\u7f6e\u67d0\u4e9b\u503c\uff0c\u5219\u5b83\u4eec\u5c06\u4f5c\u4e3a\u975eOK\u7684{@link SetValueResult\uff03status}\u53cd\u6620\u51fa\u6765\u3002\n     *\n     * \u8bf7\u6c42\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u7684\u8bbe\u7f6e\u987a\u5e8f\u4e0d\u80fd\u4fdd\u8bc1\u3002\u5982\u679c\u8c03\u7528\u8005\u9700\u8981\u786e\u4fdd\u5728\u8bbe\u7f6e\u503c\u65f6\u6709\u7279\u5b9a\u7684\u987a\u5e8f\uff0c\u8c03\u7528\u8005\u5e94\u5148\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff0c\u7b49\u5f85\u5176\u56de\u8c03\uff0c\u7136\u540e\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u503c\u3002\n     *\n     * \u5bf9\u4e8e\u8bbe\u7f6e\u64cd\u4f5c\uff0c\u6570\u636e\u7684\u65f6\u95f4\u6233\u5fc5\u987b\u88ab\u5ffd\u7565\u3002\n     *\n     * \u8bbe\u7f6e\u67d0\u4e9b\u5c5e\u6027\u9700\u8981\u6709\u521d\u59cb\u72b6\u6001\u53ef\u7528\u3002\u5982\u679c\u521d\u59cb\u6570\u636e\u5c1a\u4e0d\u53ef\u7528\uff0c\u5219{@link SetValueResult\uff03status}\u5fc5\u987b\u4e3a{@link StatusCode\uff03TRY_AGAIN}\u3002\n     * \u5bf9\u4e8e\u5177\u6709\u5355\u72ec\u7535\u6e90\u63a7\u5236\u7684\u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u672a\u4e0a\u7535\uff0c\u5219{@link SetValueResult\uff03status}\u5fc5\u987b\u4e3a{@link StatusCode\uff03NOT_AVAILABLE}\u3002\n     *\n     * \u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f20\u9012\u4e00\u4e2a\u552f\u4e00\u7684RequestID\uff0c\u5982\u679c\u7ed9\u5b9a\u7684\u8bf7\u6c42ID\u4e4b\u4e00\u4e0e\u5f85\u5904\u7406\u7684\u8bf7\u6c42ID\u4e4b\u4e00\u91cd\u590d\uff0c\u5219\u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de{@link StatusCode\uff03INVALID_ARG}\u3002\n     *\n     * \u4e3a\u9632\u6b62\u6df7\u6dc6\uff0c\u5728\u5355\u4e2a\u8c03\u7528\u4e2d\u4e0d\u5141\u8bb8\u91cd\u590d\u5c5e\u6027\uff08\u76f8\u540c\u7684\u5c5e\u6027ID\u548c\u76f8\u540c\u7684\u533a\u57dfID\uff09\u3002\u5bf9\u4e8e\u91cd\u590d\u5c5e\u6027\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u8fd4\u56de{@link StatusCode\uff03INVALID_ARG}\u3002\n     *\n     * @param callback \u56de\u8c03\u51fd\u6570\uff0c\u5728\u5c06\u8bbe\u7f6e\u503c\u8bf7\u6c42\u53d1\u9001\u5230\u603b\u7ebf\u540e\u5c06\u8c03\u7528\u5176'onSetValues'\u3002\n     * @param requests \u5305\u542b{@link SetValueRequest}\u5217\u8868\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u5982\u679c\u5b83\u4eec\u8d85\u8fc7binder\u5185\u5b58\u9650\u5236\uff0c\u5219\u5b58\u50a8\u8bf7\u6c42\u5217\u8868\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff0c\u5fc5\u987b\u4f7f\u7528\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u8f85\u52a9\u5e93\u8fdb\u884c\u89e3\u6790\u3002\n     */\n    void setValues(IVehicleCallback callback, in SetValueRequests requests);\n\n    /**\n     * \u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002\n     *\n     * \u5ba2\u6237\u7aef\u53ef\u4ee5\u6839\u636e\u9009\u9879\u53c2\u6570\u63d0\u4f9b\u7684\u6570\u636e\u8ba2\u9605\u591a\u4e2a\u5c5e\u6027\u3002\n     *\n     * \u5bf9\u4e8e\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u5c5e\u6027\u7684\u8ba2\u9605\u3002\n     * \u4f7f\u7528\u4e0d\u540c\u7684\u91c7\u6837\u7387\u8fdb\u884c\u65b0\u7684\u8ba2\u9605\u4f1a\u8986\u76d6\u65e7\u7684\u8ba2\u9605\u3002\n     * \u4e00\u4e2a\u5c5e\u6027\u53ef\u4ee5\u591a\u6b21\u8ba2\u9605\uff0c\u7528\u4e8e\u4e0d\u540c\u7684\u56de\u8c03\u51fd\u6570\u3002\n     *\n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u4e00\u4e9b\u5c5e\u6027\u8ba2\u9605\u5931\u8d25\u3002\n     * \u8c03\u7528\u8005\u53ef\u4ee5\u518d\u6b21\u5c1d\u8bd5\uff0c\u56e0\u4e3a\u5bf9\u5df2\u7ecf\u8ba2\u9605\u7684\u5c5e\u6027\u8fdb\u884c\u8ba2\u9605\u662f\u53ef\u4ee5\u7684\u3002\n     *\n     * \u6307\u5b9a\u7684\u91c7\u6837\u7387\u53ea\u662f\u4e00\u4e2a\u6307\u5bfc\u3002\u65e0\u6cd5\u4fdd\u8bc1\u5b9e\u9645\u7684\u5c5e\u6027\u4e8b\u4ef6\u901f\u7387\u662f\u5426\u53ef\u8fbe\u5230\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8f6e\u8be2\u5237\u65b0\u7387\u3002\n     * \u5b9e\u9645\u7684\u5c5e\u6027\u4e8b\u4ef6\u901f\u7387\u53ef\u80fd\u9ad8\u4e8e\u6216\u4f4e\u4e8e\u6307\u5b9a\u7684\u91c7\u6837\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f6e\u8be2\u901f\u7387\u4e3a\u6bcf\u79d25\u6b21\u6216\u6bcf\u79d210\u6b21\uff0c\n     * \u8ba2\u9605\u91c7\u6837\u7387\u4e3a7\u53ef\u80fd\u4f1a\u4f7f\u7528\u6bcf\u79d25\u6b21\u7684\u8f6e\u8be2\u901f\u7387\uff0c\u4ece\u800c\u751f\u6210\u6bcf\u79d25\u4e2a\u4e8b\u4ef6\u3002\u6211\u4eec\u53ea\u8981\u6c42\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\n     * \u53ef\u4ee5\u5b9e\u73b0minSampleRate\u548cmaxSampleRate\u4e4b\u95f4\u7684\u6240\u6709\u91c7\u6837\u7387\uff0c\u751f\u6210\u7684\u4e8b\u4ef6\u901f\u7387&gt;=minSampleRate\u4e14&lt;=maxSampleRate\u3002\n     *\n     * \u6bcf\u4e2a\u5c5e\u6027\u4e8b\u4ef6\u7684{@link VehiclePropValue#timestamp}\u5b57\u6bb5\u5fc5\u987b\u662f\u7cfb\u7edf\u542f\u52a8\u540e\u7684\u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4\uff0c\n     * \u5f53\u503c\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5bf9\u4e8eON_CHANGE\u5c5e\u6027\uff0c\u6216\u8005\u6839\u636e\u8f6e\u8be2\u901f\u7387\u68c0\u67e5\u503c\u65f6\uff0c\u5bf9\u4e8eCONTINUOUS\u5c5e\u6027\u3002\n     * \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8eCONTINUOUS\u5c5e\u6027\uff0cVHAL\u5ba2\u6237\u7aef\u5728\u8f6e\u8be2\u95f4\u9694\u5185\u591a\u6b21\u8bfb\u53d6\u5c5e\u6027\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u65f6\u95f4\u6233\u3002\n     * \u4f8b\u5982\uff0c\u5982\u679c\u5c5e\u6027\u7684\u8f6e\u8be2\u901f\u7387\u4e3a\u6bcf\u79d210\u6b21\uff0c\u65e0\u8bba\u5728{@code options}\u4e2d\u6307\u5b9a\u7684\u91c7\u6837\u7387\u662f\u591a\u5c11\uff0c\n     * \u65f6\u95f4\u6233\u90fd\u4f1a\u4ee5\u6bcf\u79d210\u6b21\u66f4\u65b0\u3002\n     *\n     * \u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u7535\u6e90\u72b6\u6001\u5173\u95ed\u800c\u65e0\u6cd5\u8bfb\u53d6\u5c5e\u6027\uff0c\u5219\u53ef\u80fd\u4e0d\u4f1a\u751f\u6210\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\uff0c\n     * \u76f4\u5230\u5c5e\u6027\u53d8\u4e3a\u53ef\u7528\u4e3a\u6b62\u3002\u5bf9\u4e8eON_CHANGE\u5c5e\u6027\uff0c\u5982\u679c\u5c5e\u6027\u4eceNOT_AVAILABLE\u66f4\u6539\u4e3aOKAY\uff0c\n     * \u4ee5\u8bfb\u53d6\u67d0\u4e9b\u6216\u6240\u6709\u533a\u57df\u7684\u67d0\u4e2a\u5c5e\u6027\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u53d8\u4e3a\u53ef\u8bfb\u7684\u533a\u57df\uff0c\u5fc5\u987b\u751f\u6210\u4e00\u4e2a\u5c5e\u6027\u66f4\u6539\u4e8b\u4ef6\u3002\n     * \u4e8b\u4ef6\u5fc5\u987b\u5305\u542b\u8be5\u533a\u57df\u7684\u5f53\u524d\u503c\uff0c\u5e76\u4e14\u5fc5\u987b\u5177\u6709{@code AVAILABLE}\u72b6\u6001\u3002\n     *\n     * @param callback \u8ba2\u9605\u7684\u56de\u8c03\u51fd\u6570\u3002\n     *    \u5f53\u65b0\u7684\u5c5e\u6027\u4e8b\u4ef6\u5230\u8fbe\u65f6\uff0c\u5c06\u8c03\u7528{@link IVehicleCallback#onPropertyEvent}\u3002\n     *    \u5f53\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u5931\u8d25\u65f6\uff0c\u5c06\u8c03\u7528{@link IVehicleCallback#onPropertySetError}\u3002\n     *    \u8fd9\u901a\u5e38\u662f\u7531\u8f66\u8f86\u603b\u7ebf\u53d1\u9001\u7684\u5c5e\u6027\u8bbe\u7f6e\u5931\u8d25\u6d88\u606f\u5f15\u8d77\u7684\u3002\n     * @param options \u8ba2\u9605\u7684\u9009\u9879\u5217\u8868\u3002SubscribeOption\u5305\u542b\u5c5e\u6027ID\u3001\u533a\u57dfID\u3001\u91c7\u6837\u7387\u7b49\u4fe1\u606f\u3002\n     *    \u5bf9\u4e8e\u8fde\u7eed\u5c5e\u6027\uff0c\u5fc5\u987b\u63d0\u4f9b\u91c7\u6837\u7387\u3002\u5982\u679c\u91c7\u6837\u7387\u5c0f\u4e8e{@link VehiclePropConfig#minSampleRate}\uff0c\n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3aminSampleRate\u3002\u5982\u679c\u91c7\u6837\u7387\u5927\u4e8e{@link VehiclePropValue#maxSampleRate}\uff0c\n     *    \u5219\u91c7\u6837\u7387\u5c06\u4e3amaxSampleRate\u3002\n     * @param maxSharedMemoryFileCount \u5728VHAL\u4e2d\u4e3a\u6b64\u8ba2\u9605\u5206\u914d\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\u3002\n     *    \u5f53\u4e00\u4e2a\u5185\u5b58\u6587\u4ef6\u88ab\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u65f6\uff0c\u76f4\u5230\u901a\u8fc7\u8c03\u7528returnSharedMemory\u5c06\u7f13\u51b2\u533a\u8fd4\u56de\u7ed9VHAL\uff0c\n     *    VHAL\u624d\u80fd\u518d\u6b21\u4f7f\u7528\u5b83\u6765\u4f20\u9012\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u3002\u8f83\u5927\u7684maxSharedMemoryFileCount\u610f\u5473\u7740\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\u6027\u80fd\u66f4\u597d\uff0c\n     *    \u4f46\u4e5f\u610f\u5473\u7740\u5185\u5b58\u5360\u7528\u66f4\u5927\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u9891\u7e41\u5230\u8fbe\u4e8b\u4ef6\uff0c\u5efa\u8bae\u503c\u4e3a2\u3002\u503c\u4e3a0\u8868\u793a\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u5c5e\u6027\uff0c\n     *    \u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u7528\u4efb\u4f55\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\u8fd9\u4ec5\u9002\u7528\u4e8e\u4e0d\u9891\u7e41\u5230\u8fbe\u7684\u4e8b\u4ef6\u6216\u5185\u5b58\u6709\u9650\u7684\u8bbe\u5907\u3002\n     *    \u6b64\u503c\u5fc5\u987b&gt;=0\u4e14&lt;{@link MAX_SHARED_MEMORY_FILES_PER_CLIENT}\u3002\n     */\n    void subscribe(in IVehicleCallback callback, in SubscribeOptions[] options,\n            int maxSharedMemoryFileCount);\n\n    /**\n     * \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u4e8b\u4ef6\u3002\n     *\n     * \u5982\u679c'callback'\u65e0\u6548\uff0c\u5219\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de{@link StatusCode#INVALID_ARG}\u3002\n     * \u5982\u679c\u4e4b\u524d\u672a\u8ba2\u9605\u6307\u5b9a\u7684propId\uff0c\u5219\u6b64\u65b9\u6cd5\u5fc5\u987b\u5ffd\u7565\u8be5propId\u3002\n     *\n     * \u5982\u679c\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u8868\u793a\u4e00\u4e9b\u5c5e\u6027\u53d6\u6d88\u8ba2\u9605\u5931\u8d25\u3002\n     * \u8c03\u7528\u8005\u53ef\u4ee5\u518d\u6b21\u5c1d\u8bd5\uff0c\u56e0\u4e3a\u53d6\u6d88\u8ba2\u9605\u5df2\u7ecf\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002\n     *\n     * @param callback \u4e4b\u524d\u8ba2\u9605\u65f6\u4f7f\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002\n     * @param propIds \u8981\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u7684ID\u3002\n     */\n    void unsubscribe(in IVehicleCallback callback, in int[] propIds);\n\n    /**\n     * \u5c06\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u8fd4\u56de\u7ed9VHAL\u4ee5\u8fdb\u884c\u56de\u6536\u3002\n     *\n     * \u5728{@link IVehicleCallback#onPropertyEvent}\u8fd4\u56de\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u4e0d\u518d\u88ab\u5ba2\u6237\u7aef\u4f7f\u7528\u65f6\uff0c\n     * \u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\u8fd9\u901a\u5e38\u5728'onPropertyEvent'\u7684\u672b\u5c3e\u8c03\u7528\u3002\n     *\n     * \u5982\u679c'callback'\u65e0\u6548\u6216'sharedMemoryId'\u4e0e\u4f20\u9012\u7ed9{@link IVehicleCallback#onPropertyEvent}\u7684\n     * 'VehiclePropValues'\u4e2d\u7684\u4efb\u4f55SharedMemoryId\u4e0d\u5339\u914d\uff0c\u5219\u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de{@link StatusCode#INVALID_ARG}\u3002\n     *\n     * @param callback \u8ba2\u9605\u65f6\u4f7f\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002\n     * @param sharedMemoryId \u7531'onPropertyEvent'\u8fd4\u56de\u7684\u8868\u793a\u8981\u8fd4\u56de\u7684\u5df2\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7684ID\u3002\n     */\n    void returnSharedMemory(in IVehicleCallback callback, long sharedMemoryId);\n\n}    \n</code></pre> <p>\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3aIVehicle\u7684\u63a5\u53e3\uff0c\u4ece CarService \u5f80 HAL \u8c03\u7528\u7684\u63a5\u53e3\u3002 \u8be5\u63a5\u53e3\u7528\u4e8e\u4e0e\u8f66\u8f86\u786c\u4ef6\u4ea4\u4e92\uff0c\u63d0\u4f9b\u4e86\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u914d\u7f6e\u3001\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u3001\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u3001\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7b49\u529f\u80fd\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#ivehiclecallbackaidl","title":"IVehicleCallback.aidl","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/IVehicleCallback.aidl\n\n@VintfStability\ninterface IVehicleCallback {\n    /**\n     * {@link IVehicle#getValues}\u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53\u4e00\u4e9b\u8981\u83b7\u53d6\u7684\u503c\u51c6\u5907\u597d\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a'getValues'\u8bf7\u6c42\uff0c\u53ef\u80fd\u4f1a\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u8bf7\u6c42\u7684\u503c\u7684\u4e00\u90e8\u5206\u3002\u4fdd\u8bc1\u6240\u6709\u8bf7\u6c42\u7684\u503c\u90fd\u4f1a\u5728\u5176\u4e2d\u4e00\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u662f\u6bcf\u4e2a\u503c\u51c6\u5907\u597d\u7684\u987a\u5e8f\u4e0d\u80fd\u4fdd\u8bc1\u3002\n     *\n     * @param responses \u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a{@link GetValueResult}\u5217\u8868\uff0c\u5982\u679c\u5b83\u4eec\u7b26\u5408Binder\u5185\u5b58\u9650\u5236\uff0c\u6216\u8005\u5305\u542b\u4e00\u4e2a\u5305\u542b\u54cd\u5e94\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u3002\n     *    \u6bcf\u4e2a{@link GetValueResult}\u8981\u4e48\u5305\u542b\u5c5e\u6027\u503c\uff0c\u8981\u4e48\u5305\u542b\u83b7\u53d6\u503c\u65f6\u53d1\u751f\u7684\u9519\u8bef\u3002\n     *\n     *    {@link GetValueResult}\u8fd8\u5305\u542b\u4e00\u4e2arequestId\uff0c\u6307\u793a\u6b64\u54cd\u5e94\u6240\u5c5e\u7684\u8bf7\u6c42\u3002\u54cd\u5e94\u5bf9\u8c61\u5e94\u8be5\u7531{@code android-automotive-large-parcelable}\u5e93\u89e3\u6790\u3002\n     */\n    oneway void onGetValues(in GetValueResults responses);\n\n    /**\n     * {@link IVehicle#setValues}\u51fd\u6570\u7684\u56de\u8c03\u3002\n     *\n     * \u5f53VHAL\u5b8c\u6210\u5904\u7406\u4e00\u4e9b\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u65f6\u8c03\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a'setValues'\u8bf7\u6c42\uff0c\u53ef\u80fd\u4f1a\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002\n     * \u6bcf\u4e2a\u56de\u8c03\u5305\u542b\u8bf7\u6c42\u7684\u503c\u7684\u4e00\u90e8\u5206\u3002\u4fdd\u8bc1\u6240\u6709\u8bbe\u7f6e\u503c\u7684\u72b6\u6001\u90fd\u4f1a\u5728\u5176\u4e2d\u4e00\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u662f\u6bcf\u4e2a\u503c\u8bbe\u7f6e\u7684\u987a\u5e8f\u4e0d\u80fd\u4fdd\u8bc1\u3002\n     *\n     * @param responses \u4e00\u4e2a{@link SetValueResult}\u5217\u8868\u3002\u6bcf\u4e2aSetValueResult\u5305\u542b\u4e00\u4e2a\u6307\u793a\u8bbe\u7f6e\u7279\u5b9a\u5c5e\u6027\u72b6\u6001\u7684\u72b6\u6001\u3002\n     *    requestId\u6307\u793a\u54cd\u5e94\u6240\u5c5e\u7684\u8bf7\u6c42\u3002\n     */\n    oneway void onSetValues(in SetValueResults responses);\n\n    /**\n     * \u5f53API\u7528\u6237\u8ba2\u9605\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u9700\u8981\u62a5\u544a\u65f6\u53d1\u751f\u4e8b\u4ef6\u56de\u8c03\u3002\u8fd9\u53ef\u80fd\u662f\u57fa\u4e8e\u9608\u503c\u548c\u9891\u7387\uff08\u4e00\u4e2a\u5e38\u89c4\u8ba2\u9605\uff0c\u53c2\u89c1subscribe\u8c03\u7528\u7684\u53c2\u6570\uff09\uff0c\n     * \u6216\u8005\u5f53\u8c03\u7528{@link IVehicle#setValues}\u65b9\u6cd5\u5e76\u4e14\u9700\u8981\u62a5\u544a\u5b9e\u9645\u66f4\u6539\u65f6\u53d1\u751f\u3002\n     *\n     * @param propValues \u5305\u88c5\u5728\u5bf9\u8c61\u4e2d\u7684\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u3002\n     *    \u5982\u679c\u5c5e\u6027\u7b26\u5408Binder\u9650\u5236\uff0c\u5b83\u4eec\u5c06\u5728{@code propValues.payloads}\u4e2d\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u5728\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6587\u4ef6{@code propValues.sharedMemoryFd}\u4e2d\u3002\n     *    \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u7531VHAL\u521b\u5efa\uff0c\u5e76\u5728\u4f7f\u7528\u540e\u5fc5\u987b\u901a\u8fc7{@link IVehicle#returnSharedMemory}\u8fd4\u56de\u7ed9VHAL\u3002\n     *    \u6bcf\u4e2a\u8ba2\u9605\u53ea\u521b\u5efa\u6709\u9650\u6570\u91cf\u7684\u5185\u5b58\u6587\u4ef6\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u8fd4\u56de\u5171\u4eab\u5185\u5b58\uff0c\u5219\u5ba2\u6237\u7aef\u53ef\u80fd\u65e0\u6cd5\u5728\u5c06\u6765\u6536\u5230\u4e8b\u4ef6\u3002\n     * @param sharedMemoryFileCount \u4e3a\u6b64\u8ba2\u9605\u5206\u914d\u7684\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\u3002\u6b64\u503c\u53ef\u7528\u4e8e\u8c03\u6574{@link IVehicle#subscribe}\u4e2d\u7684{@code maxSharedMemoryFileCount}\u3002\n     *    \u4f8b\u5982\uff0c\u5982\u679c\u901a\u5e38\u770b\u5230sharedMemoryFileCount\u7b49\u4e8e\u60a8\u8bbe\u7f6e\u7684maxSharedMemoryFileCount\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u80fd\u9700\u8981\u589e\u52a0maxSharedMemoryFileCount\u3002\n     */\n    oneway void onPropertyEvent(in VehiclePropValues propValues, int sharedMemoryFileCount);\n\n    /**\n     * \u8bbe\u7f6e\u5c5e\u6027\u503c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u5ba2\u6237\u7aef\u4ece{@link IVehicle#setValues}\u63a5\u6536\u5230{@link StatusCode#OK}\uff0c\n     * \u6216\u8005\u5728{@link #onSetValues}\u4e2d\u63a5\u6536\u5230{@link StatusCode#OK}\uff0c\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u8be5\u503c\u5df2\u6210\u529f\u4f20\u64ad\u5230\u8f66\u8f86\u7f51\u7edc\u3002\n     * \u5982\u679c\u53d1\u751f\u8fd9\u79cd\u7f55\u89c1\u4e8b\u4ef6\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n     *\n     * @param errors \u4e00\u4e2a\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u5217\u8868\u3002\u5982\u679cVHAL\u5b9e\u73b0\u6ca1\u6709\u6279\u5904\u7406\u9519\u8bef\uff0c\u53ef\u80fd\u53ea\u5305\u542b\u4e00\u4e2a\u9519\u8bef\u3002\n     */\n    oneway void onPropertySetError(in VehiclePropErrors errors);\n}\n</code></pre> <p>\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3<code>IVehicleCallback</code>\uff0c\u7528\u4e8e\u5904\u7406\u8f66\u8f86\u76f8\u5173\u7684\u56de\u8c03\u51fd\u6570\uff08HAL \u5f80 CarService \u56de\u8c03\u7684\u63a5\u53e3\uff09\u3002\u5b83\u5305\u542b\u4e86\u56db\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5206\u522b\u662f\uff1a - onGetValues     \u5f53\u83b7\u53d6\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u8bf7\u6c42\u5b8c\u6210\u65f6\u8c03\u7528\u3002\u8be5\u56de\u8c03\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\uff0c\u6bcf\u6b21\u56de\u8c03\u90fd\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\u6240\u6709\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u90fd\u4f1a\u5728\u5176\u4e2d\u4e00\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u5c5e\u6027\u503c\u7684\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u4e00\u81f4\u3002</p> <ul> <li> <p>onSetValues     \u5f53\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u8bf7\u6c42\u5b8c\u6210\u65f6\u8c03\u7528\u3002\u8be5\u56de\u8c03\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\u6216\u591a\u6b21\uff0c\u6bcf\u6b21\u56de\u8c03\u90fd\u5305\u542b\u90e8\u5206\u8bf7\u6c42\u7684\u5c5e\u6027\u503c\u3002\u6240\u6709\u8bbe\u7f6e\u5c5e\u6027\u503c\u7684\u72b6\u6001\u90fd\u4f1a\u5728\u5176\u4e2d\u4e00\u4e2a\u56de\u8c03\u4e2d\u8fd4\u56de\uff0c\u4f46\u5c5e\u6027\u503c\u7684\u8bbe\u7f6e\u987a\u5e8f\u4e0d\u4fdd\u8bc1\u4e00\u81f4\u3002</p> </li> <li> <p>onPropertyEvent     \u5f53\u8ba2\u9605\u7684\u5c5e\u6027\u503c\u9700\u8981\u62a5\u544a\u65f6\u8c03\u7528\u3002\u8fd9\u53ef\u80fd\u662f\u57fa\u4e8e\u9608\u503c\u548c\u9891\u7387\u7684\u5b9a\u671f\u8ba2\u9605\uff0c\u4e5f\u53ef\u80fd\u662f\u5728\u8c03\u7528\u4e86<code>IVehicle#setValues</code>\u65b9\u6cd5\u540e\u9700\u8981\u62a5\u544a\u5b9e\u9645\u66f4\u6539\u7684\u60c5\u51b5\u3002</p> </li> <li> <p>onPropertySetError     \u5f53\u8bbe\u7f6e\u5c5e\u6027\u503c\u7684\u64cd\u4f5c\u65e0\u6cd5\u6210\u529f\u4f20\u64ad\u5230\u8f66\u8f86\u7f51\u7edc\u65f6\u8c03\u7528\u3002\u8fd9\u662f\u4e00\u4e2a\u7a00\u6709\u4e8b\u4ef6\uff0c\u5373\u4f7f\u5ba2\u6237\u7aef\u4ece<code>IVehicle#setValues</code>\u6216<code>onSetValues</code>\u4e2d\u6536\u5230<code>StatusCode#OK</code>\uff0c\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u5c5e\u6027\u503c\u5df2\u6210\u529f\u4f20\u64ad\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\u3002</p> </li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#_2","title":"\u6570\u636e\u7c7b\u578b","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertytype","title":"VehiclePropertyType","text":"<p>\u8f66\u8f86\u5c5e\u6027\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl_property/android/hardware/automotive/vehicle/VehiclePropertyType.aidl\n\n/**\n * \u679a\u4e3e\u652f\u6301\u7684\u8f66\u8f86\u5c5e\u6027\u6570\u636e\u7c7b\u578b\u3002\n * \n * \u7528\u4e8e\u5728VehicleProperty\u679a\u4e3e\u4e2d\u521b\u5efa\u5c5e\u6027ID\u3002\n */\n@VintfStability\n@Backing(type=\"int\")\nenum VehiclePropertyType {\n    STRING          = 0x00100000, // \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c1048576\n    BOOLEAN         = 0x00200000, // \u5e03\u5c14\u7c7b\u578b\uff0c2097152\n    INT32           = 0x00400000, // 32\u4f4d\u6574\u6570\u7c7b\u578b\uff0c4194304\n    INT32_VEC       = 0x00410000, // 32\u4f4d\u6574\u6570\u5411\u91cf\u7c7b\u578b\uff0c4259840\n    INT64           = 0x00500000, // 64\u4f4d\u6574\u6570\u7c7b\u578b\uff0c5242880\n    INT64_VEC       = 0x00510000, // 64\u4f4d\u6574\u6570\u5411\u91cf\u7c7b\u578b\uff0c5308416\n    FLOAT           = 0x00600000, // \u6d6e\u70b9\u6570\u7c7b\u578b\uff0c6291456\n    FLOAT_VEC       = 0x00610000, // \u6d6e\u70b9\u6570\u5411\u91cf\u7c7b\u578b\uff0c6356992\n    BYTES           = 0x00700000, // \u5b57\u8282\u7c7b\u578b\uff0c7340032\n\n    /**     \n     * \u6807\u91cf\u6216\u5411\u91cf\u7c7b\u578b\u7684\u4efb\u610f\u7ec4\u5408\u3002\u5177\u4f53\u683c\u5f0f\u5fc5\u987b\u5728\u5c5e\u6027\u7684\u63cf\u8ff0\u4e2d\u63d0\u4f9b\u3002\n     *     \n     * \u5bf9\u4e8e\u4f9b\u5e94\u5546\u7684\u6df7\u5408\u7c7b\u578b\u5c5e\u6027\uff0cconfigArray\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u7ed3\u6784\u8fdb\u884c\u683c\u5f0f\u5316\u3002\n     *      \n     * configArray[0]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u5b57\u7b26\u4e32\u503c\n     * configArray[1]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u5e03\u5c14\u503c\u3002\n     * configArray[2]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u6574\u6570\u503c\u3002\n     * configArray[3]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u6574\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[4]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u957f\u6574\u6570\u503c\u3002\n     * configArray[5]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u957f\u6574\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[6]\uff0c1\u8868\u793a\u5c5e\u6027\u5177\u6709\u6d6e\u70b9\u6570\u503c\u3002\n     * configArray[7]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * configArray[8]\uff0c\u6570\u5b57\u8868\u793a\u5c5e\u6027\u4e2d\u5b57\u8282\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n     * \u4f8b\u5982\uff1a\n     * {@code configArray = {1, 1, 1, 3, 0, 0, 0, 0, 0}} \u8868\u793a\u5c5e\u6027\u5177\u6709\n     * \u5b57\u7b26\u4e32\u503c\u3001\u5e03\u5c14\u503c\u3001\u6574\u6570\u503c\u548c\u4e00\u4e2a\u5305\u542b3\u4e2a\u6574\u6570\u7684\u6570\u7ec4\u3002\n     */\n    MIXED           = 0x00e00000, // \u6df7\u5408\u7c7b\u578b\uff0c14680064\n\n    MASK            = 0x00ff0000 // \u5c5e\u6027\u7c7b\u578b\u63a9\u7801\uff0c16711680\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclearea","title":"VehicleArea","text":"<p>\u8f66\u8f86\u533a\u57df\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/2.0/types.hal\n\n/**\n * \u8f66\u8f86\u533a\u57df\n * \u7528\u4e8e\u6784\u5efa VehicleProperty \u679a\u4e3e\u4e2d\u7684\u5c5e\u6027ID\u3002\n *\n * \u4e00\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0e\u7279\u5b9a\u7684\u8f66\u8f86\u533a\u57df\u76f8\u5173\u8054\u3002\u4f8b\u5982\uff0cVehicleProperty:DOOR_LOCK \u5c5e\u6027\u5fc5\u987b\u4e0e\u7279\u5b9a\u7684\u8f66\u95e8\u76f8\u5173\u8054\uff0c\n * \u56e0\u6b64\u8be5\u5c5e\u6027\u5fc5\u987b\u6807\u8bb0\u4e3a VehicleArea:DOOR \u6807\u5fd7\u3002\n *\n * \u5176\u4ed6\u5c5e\u6027\u53ef\u80fd\u4e0e\u7279\u5b9a\u7684\u8f66\u8f86\u533a\u57df\u65e0\u5173\u3002\u8fd9\u4e9b\u5c5e\u6027\u5fc5\u987b\u5177\u6709 VehicleArea:GLOBAL \u6807\u5fd7\u3002\n *\n * [\u5b9a\u4e49] \u533a\u57df\uff1a\u533a\u57df\u8868\u793a AreaType \u7684\u4e00\u4e2a\u552f\u4e00\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c AreaType \u662f WINDOW \uff0c\u5219\u4e00\u4e2a\u533a\u57df\u53ef\u4ee5\u662f FRONT_WINDSHIELD \u3002\n *\n * [\u5b9a\u4e49] \u533a\u57dfID\uff1a\u533a\u57dfID \u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u533a\u57df\u7684\u7ec4\u5408\uff0c\u4f7f\u7528 Area \u679a\u4e3e\u7684\u4f4d\u63a9\u7801\u8868\u793a\u3002\u4e0d\u540c\u7684 AreaType \u4e0d\u80fd\u5728\u4e00\u4e2a\u5355\u72ec\u7684 AreaID \u4e2d\u6df7\u5408\u3002\n * \u4f8b\u5982\uff0c\u7a97\u53e3\u533a\u57df\u4e0d\u80fd\u4e0e\u5ea7\u4f4d\u533a\u57df\u7ec4\u5408\u5728\u4e00\u4e2a AreaID \u4e2d\u3002\n *\n * \u6620\u5c04\u5206\u533a\u5c5e\u6027\u5230\u533a\u57dfID \u7684\u89c4\u5219\uff1a\n *  - \u5c5e\u6027\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2a\u5728\u5c5e\u6027\u503c\u66f4\u6539\u65f6\u53d7\u5f71\u54cd\u7684 AreaID \u6570\u7ec4\u3002\n *  - \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u8868\u793a\u4e00\u4e2a AreaID \uff0c\u5728\u8be5 AreaID \u4e2d\uff0c\u5c5e\u6027\u503c\u53ea\u80fd\u5728 AreaID \u4e2d\u7684\u6240\u6709\u533a\u57df\u4e2d\u540c\u65f6\u66f4\u6539\uff0c\u800c\u4e0d\u80fd\u72ec\u7acb\u66f4\u6539\u3002\n *    \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5c5e\u6027\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\u4e2d\u66f4\u6539\u65f6\uff0c\u5b83\u5fc5\u987b\u81ea\u52a8\u5728 AreaID \u4e2d\u7684\u6240\u6709\u5176\u4ed6\u533a\u57df\u4e2d\u66f4\u6539\u3002\n *  - \u5c5e\u6027\u503c\u5fc5\u987b\u5728\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684 AreaID \u4e2d\u72ec\u7acb\u53ef\u63a7\u3002\n *  - \u533a\u57df\u5728 AreaID \u6570\u7ec4\u4e2d\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u533a\u57df\u53ea\u80fd\u662f AreaID \u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\u3002\n *\n * [\u5b9a\u4e49] \u5168\u5c40\u5c5e\u6027\uff1a\u9002\u7528\u4e8e\u6574\u4e2a\u8f66\u8f86\u5e76\u4e14\u4e0d\u4e0e\u7279\u5b9a\u533a\u57df\u76f8\u5173\u8054\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0cFUEL_LEVEL\uff0cHVAC_STEERING_WHEEL_HEAT\u3002\n *\n * \u6620\u5c04\u5168\u5c40\u5c5e\u6027\u5230\u533a\u57dfID \u7684\u89c4\u5219\uff1a\n *  - \u5168\u5c40\u5c5e\u6027\u4e0d\u5f97\u6620\u5c04\u5230\u533a\u57dfID\u3002\n*/\nenum VehicleArea {\n    GLOBAL      = 0x01000000, // 16777216\n    WINDOW      = 0x03000000, // WINDOW\u6620\u5c04\u5230VehicleAreaWindow\u679a\u4e3e\uff0c50331648\n    MIRROR      = 0x04000000, // MIRROR\u6620\u5c04\u5230VehicleAreaMirror\u679a\u4e3e\uff0c67108864\n    SEAT        = 0x05000000, // SEAT\u6620\u5c04\u5230VehicleAreaSeat\u679a\u4e3e\uff0c83886080\n    DOOR        = 0x06000000, // DOOR\u6620\u5c04\u5230VehicleAreaDoor\u679a\u4e3e\uff0c100663296\n    WHEEL       = 0x07000000, // WHEEL\u6620\u5c04\u5230VehicleAreaWheel\u679a\u4e3e\uff0c117440512\n\n    MASK        = 0x0f000000, //251658240\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertygroup","title":"VehiclePropertyGroup","text":"<p>\u8f66\u8f86\u5c5e\u6027\u5206\u7ec4\u7c7b\u578b</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl_property/android/hardware/automotive/vehicle/VehiclePropertyGroup.aidl\n\n/**\n * \u5b9a\u4e49\u4e86\u5c5e\u6027\u7ec4\u7684\u679a\u4e3e\u7c7b\u578b\u3002\n *\n * \u7528\u4e8e\u5728VehicleProperty\u679a\u4e3e\u4e2d\u521b\u5efa\u5c5e\u6027ID\u3002\n */\nenum VehiclePropertyGroup {\n    /**\n     * \n     */\n    SYSTEM      = 0x10000000, // \u5728AOSP\u4e2d\u58f0\u660e\u7684\u5c5e\u6027\u5fc5\u987b\u4f7f\u7528\u6b64\u6807\u5fd7\uff0c 268435456\n\n    /**\n     * \n     */\n    VENDOR      = 0x20000000, // \u7531\u4f9b\u5e94\u5546\u58f0\u660e\u7684\u5c5e\u6027\u5fc5\u987b\u4f7f\u7528\u6b64\u6807\u5fd7\uff0c 536870912\n\n    MASK        = 0xf0000000, // -268435456 ?\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehicleareawindow","title":"VehicleAreaWindow","text":"<p>\u8f66\u8f86\u7a97\u6237\u533a\u57df\u5c5e\u6027</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl_property/android/hardware/automotive/vehicle/VehicleAreaWindow.aidl\n\n/**\n * \u5b9a\u4e49\u4e86\u8f66\u8f86\u4e2d\u7684\u5404\u79cd\u6321\u98ce\u73bb\u7483/\u7a97\u6237\u3002\n */\n@VintfStability\n@Backing(type=\"int\")\nenum VehicleAreaWindow {\n    FRONT_WINDSHIELD  = 0x00000001,  // \u524d\u6321\u98ce\u73bb\u7483\uff0c1\n    REAR_WINDSHIELD   = 0x00000002,  // \u540e\u6321\u98ce\u73bb\u7483\uff0c2\n    ROW_1_LEFT        = 0x00000010,  // \u7b2c\u4e00\u6392\u5de6\u4fa7\u7a97\u6237\uff0c16\n    ROW_1_RIGHT       = 0x00000040,  // \u7b2c\u4e00\u6392\u53f3\u4fa7\u7a97\u6237\uff0c64\n    ROW_2_LEFT        = 0x00000100,  // \u7b2c\u4e8c\u6392\u5de6\u4fa7\u7a97\u6237\uff0c256\n    ROW_2_RIGHT       = 0x00000400,  // \u7b2c\u4e8c\u6392\u53f3\u4fa7\u7a97\u6237\uff0c1024\n    ROW_3_LEFT        = 0x00001000,  // \u7b2c\u4e09\u6392\u5de6\u4fa7\u7a97\u6237\uff0c4096\n    ROW_3_RIGHT       = 0x00004000,  // \u7b2c\u4e09\u6392\u53f3\u4fa7\u7a97\u6237\uff0c16384\n\n    ROOF_TOP_1        = 0x00010000,  // \u9876\u90e81\u53f7\u7a97\u6237\uff0c65536\n    ROOF_TOP_2        = 0x00020000,  // \u9876\u90e82\u53f7\u7a97\u6237\uff0c131072\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertyaccess","title":"VehiclePropertyAccess","text":"<p>\u8f66\u8f86\u5c5e\u6027\u8bbf\u95ee\u6743\u9650</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/VehiclePropertyAccess.aidl\n\n/**\n * VehiclePropertyAccess\u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u7528\u4e8e\u5b9a\u4e49\u8f66\u8f86\u5c5e\u6027\u7684\u8bbf\u95ee\u6743\u9650\u3002\n * \u7528\u6237\u5728\u4f7f\u7528API\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u83b7\u53d6\u5c5e\u6027\u914d\u7f6e\uff0c\u4ee5\u4e86\u89e3\u4eceget()\u547d\u4ee4\u83b7\u53d6\u7684\u8f93\u51fa\uff0c\n * \u5e76\u786e\u4fddset()\u6216\u4e8b\u4ef6\u547d\u4ee4\u4e0e\u9884\u671f\u8f93\u51fa\u540c\u6b65\u3002\n */\n@VintfStability\n@Backing(type=\"int\")\nenum VehiclePropertyAccess {\n    /**\n     * \u8868\u793a\u65e0\u8bbf\u95ee\u6743\u9650\n     */\n    NONE = 0x00,\n\n    /**\n     * \u8868\u793a\u53ea\u8bfb\u6743\u9650\n     */\n    READ = 0x01,\n\n    /**\n     * \u8868\u793a\u53ea\u5199\u6743\u9650\n     */\n    WRITE = 0x02,\n\n    /**\n     * \u8868\u793a\u8bfb\u5199\u6743\u9650\n     */\n    READ_WRITE = 0x03,\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertychangemode","title":"VehiclePropertyChangeMode","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/VehiclePropertyChangeMode.aidl\n\n/**\n * \u63cf\u8ff0\u5c5e\u6027\u503c\u5982\u4f55\u53d8\u5316\u7684\u679a\u4e3e\u7c7b\u578b\n */\n@VintfStability\n@Backing(type=\"int\")\nenum VehiclePropertyChangeMode {\n    /**     \n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u4e0d\u80fd\u88ab\u66f4\u6539\u3002\u4e0d\u652f\u6301\u5bf9\u8fd9\u4e9b\u5c5e\u6027\u8fdb\u884c subscribe \u8ba2\u9605\u3002\u53ea\u80fd IVehicle.get() \u83b7\u53d6\n     */\n    STATIC = 0x00,\n\n    /**\n     * ON_CHANGE \u8fd9\u4e2a\u7c7b\u578b\u7684\u5c5e\u6027\u5f53\u53d8\u5316\u65f6\u5fc5\u987b\u4e0a\u62a5\n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u5728\u53d1\u751f\u53d8\u5316\u65f6\u5fc5\u987b\u62a5\u544a\u3002 IVehicle.get() \u8c03\u7528\u5fc5\u987b\u8fd4\u56de\u5f53\u524d\u503c\u3002\n     * \u5bf9\u4e8e\u6b64\u5c5e\u6027\u7684\u8bbe\u7f6e\u64cd\u4f5c\u88ab\u5047\u5b9a\u4e3a\u5f02\u6b65\u7684\u3002\u5f53\u5728 IVehicle.set() \u4e4b\u540e\u8bfb\u53d6\u5c5e\u6027\uff08\u4f7f\u7528 IVehicle.get() \uff09\u65f6\uff0c\n     * \u5b83\u53ef\u80fd\u4ecd\u7136\u8fd4\u56de\u65e7\u503c\uff0c\u76f4\u5230\u652f\u6301\u6b64\u5c5e\u6027\u7684\u5e95\u5c42\u786c\u4ef6\u5b9e\u9645\u4e0a\u6539\u53d8\u4e86\u72b6\u6001\u3002\u4e00\u65e6\u72b6\u6001\u6539\u53d8\uff0c\u5c5e\u6027\u5fc5\u987b\u4f5c\u4e3a\u4e8b\u4ef6\u5206\u53d1\u5df2\u66f4\u6539\u7684\u503c\u3002\n     */\n    ON_CHANGE = 0x01,\n\n    /**\n     * \u6b64\u7c7b\u578b\u7684\u5c5e\u6027\u8fde\u7eed\u53d8\u5316\uff0c\u5e76\u4e14\u9700\u8981\u56fa\u5b9a\u7684\u91c7\u6837\u7387\u6765\u68c0\u7d22\u6570\u636e\u3002\u5b9e\u73b0\u8005\u53ef\u4ee5\u9009\u62e9\u5728\u91cd\u8981\u7684\u503c\u53d8\u5316\u65f6\u53d1\u9001\u989d\u5916\u7684\u901a\u77e5\u3002\n     */\n    CONTINUOUS = 0x02,\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscribeoptions","title":"SubscribeOptions","text":"<p>\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u8ba2\u9605\u4fe1\u606f</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/SubscribeOptions.aidl\u3001\n\n/**\n * \u5c01\u88c5\u4e86\u6709\u5173\u8ba2\u9605\u8f66\u8f86\u5c5e\u6027\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\n */\n@VintfStability\n@JavaDerive(equals=true, toString=true)\nparcelable SubscribeOptions {\n\n    /**\n     * \u8981\u8ba2\u9605\u7684\u5c5e\u6027\u3002\n     */    \n    int propId;\n\n    /**\n     * \u53ef\u9009\u7684\u8ba2\u9605\u6b64\u5c5e\u6027\u7684\u533a\u57df\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u8ba2\u9605\u4e3a\u6b64\u5c5e\u6027\u914d\u7f6e\u7684\u6240\u6709\u533a\u57df\u3002\n     */\n    int[] areaIds;\n\n    /**\n     * \u91c7\u6837\u7387\uff0c\u4ee5\u8d6b\u5179(Hz)\u4e3a\u5355\u4f4d\u3002\n     *\n     * \u5bf9\u4e8e\u5177\u6709 VehiclePropertyChangeMode::CONTINUOUS \u7684\u5c5e\u6027\uff0c\u5fc5\u987b\u63d0\u4f9b\u3002\n     * \u8be5\u503c\u5fc5\u987b\u5728\u7ed9\u5b9a\u5c5e\u6027\u7684 VehiclePropConfig#minSamplingRate .. VehiclePropConfig#maxSamplingRate \u8303\u56f4\u5185\u3002\n     * \u6b64\u503c\u8868\u793a\u5ba2\u6237\u7aef\u5e0c\u671b\u6bcf\u79d2\u63a5\u6536\u591a\u5c11\u6b21\u66f4\u65b0\u3002\n     */\n    float sampleRate;\n}\n</code></pre> <p>\u5982\u679c\u4e86\u89e3 Android S \u4ee3\u7801\u53ef\u4ee5\u77e5\u9053\uff0c\u5728 SubscribeOptions \u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a SubscribeFlags \u7684 flags\uff0c\u4e5f\u5c31\u662f\uff1a</p> <pre><code>enum SubscribeFlags : int32_t {\n    UNDEFINED = 0x0,\n\n    /**\n     * \u8ba2\u9605\u6765\u81ea\u8f66\u8f86HAL\u7684\u4e8b\u4ef6\n     * \uff08\u5f88\u53ef\u80fd\u662f\u8f66\u8f86\u672c\u8eab\u4ea7\u751f\u7684\u4e8b\u4ef6\uff09\u3002\n     */\n    EVENTS_FROM_CAR = 0x1,\n\n    /**\n     * \u4f7f\u7528\u6b64\u6807\u5fd7\u8ba2\u9605\u5f53\u8f66\u8f86HAL\u7684\u5ba2\u6237\u7aef\uff08\u4f8b\u5982Car Service\uff09\u8c03\u7528 IVehicle.set\uff08...\uff09 \u65f6\u7684\u4e8b\u4ef6\u3002\n     */\n    EVENTS_FROM_ANDROID = 0x2,\n};\n</code></pre> <p>\u4f46\u662f\u5728 Android U \u4e2d\uff0c\u5df2\u7ecf\u6ca1\u6709 flags \u4e86\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehicleareaseat","title":"VehicleAreaSeat","text":"<p>\u8f66\u8f86\u5ea7\u6905\u5c5e\u6027</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl_property/android/hardware/automotive/vehicle/VehicleAreaSeat.aidl\n\n/**\n * \u4e0d\u540c\u7684\u8f66\u8f86\u5ea7\u4f4d\u3002\n */\n@VintfStability\n@Backing(type=\"int\")\nenum VehicleAreaSeat {\n    ROW_1_LEFT   = 0x0001,   // \u7b2c\u4e00\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 1\n    ROW_1_CENTER = 0x0002,   // \u7b2c\u4e00\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 2\n    ROW_1_RIGHT  = 0x0004,   // \u7b2c\u4e00\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 4\n    ROW_2_LEFT   = 0x0010,   // \u7b2c\u4e8c\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 16\n    ROW_2_CENTER = 0x0020,   // \u7b2c\u4e8c\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 32\n    ROW_2_RIGHT  = 0x0040,   // \u7b2c\u4e8c\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 64\n    ROW_3_LEFT   = 0x0100,   // \u7b2c\u4e09\u6392\u5de6\u4fa7\u5ea7\u4f4d\uff0c 256\n    ROW_3_CENTER = 0x0200,   // \u7b2c\u4e09\u6392\u4e2d\u95f4\u5ea7\u4f4d\uff0c 512\n    ROW_3_RIGHT  = 0x0400    // \u7b2c\u4e09\u6392\u53f3\u4fa7\u5ea7\u4f4d\uff0c 1024\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#statuscode","title":"StatusCode","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/android/hardware/automotive/vehicle/StatusCode.aidl\n\n/**\n * \u8f66\u8f86HAL\u63a5\u53e3\u4e2d\u4f7f\u7528\u7684\u9519\u8bef\u4ee3\u7801\u3002\n */\n@VintfStability\n@Backing(type=\"int\")\nenum StatusCode {\n    OK = 0, // \u8868\u793a\u64cd\u4f5c\u6210\u529f\n\n    TRY_AGAIN = 1, // \u8868\u793a\u8c03\u7528\u8005\u5e94\u8be5\u91cd\u8bd5\n\n    INVALID_ARG = 2, // \u8868\u793a\u63d0\u4f9b\u7684\u53c2\u6570\u65e0\u6548\n\n    NOT_AVAILABLE = 3, // \u8868\u793a\u5c5e\u6027\u5f53\u524d\u4e0d\u53ef\u7528\n\n    ACCESS_DENIED = 4, // \u8868\u793a\u8bbf\u95ee\u88ab\u62d2\u7edd\n\n    INTERNAL_ERROR = 5, // \u8868\u793a\u53d1\u751f\u4e86\u610f\u5916\u9519\u8bef\n\n    NOT_AVAILABLE_DISABLED = 6, // \u8868\u793a\u7531\u4e8e\u5e95\u5c42\u529f\u80fd\u88ab\u7981\u7528\u800c\u4e0d\u53ef\u7528\n\n    NOT_AVAILABLE_SPEED_LOW = 7, // \u8868\u793a\u7531\u4e8e\u8f66\u901f\u8fc7\u4f4e\u800c\u4e0d\u53ef\u7528\n\n    NOT_AVAILABLE_SPEED_HIGH = 8, // \u8868\u793a\u7531\u4e8e\u8f66\u901f\u8fc7\u9ad8\u800c\u4e0d\u53ef\u7528\n\n    NOT_AVAILABLE_POOR_VISIBILITY = 9, // \u8868\u793a\u7531\u4e8e\u76f8\u673a\u6216\u4f20\u611f\u5668\u7684\u53ef\u89c1\u6027\u5dee\u800c\u4e0d\u53ef\u7528\n\n    NOT_AVAILABLE_SAFETY = 10, // \u8868\u793a\u7531\u4e8e\u5b89\u5168\u539f\u56e0\u65e0\u6cd5\u8bbf\u95ee\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#2-vehiclehal","title":"2. VehicleHal\u521d\u59cb\u5316","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehicleservicemain","title":"VehicleService::main()","text":"<p>\u521d\u59cb\u5316\u4ece\u6267\u884c hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/VehicleService.cpp \u7684main\u51fd\u6570\u5f00\u59cb\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/VehicleService.cpp\n\nint main(int /* argc */, char* /* argv */[]) {    \n    ALOGI(\"Starting thread pool...\");\n\n    if (!ABinderProcess_setThreadPoolMaxThreadCount(4)) {\n        ALOGE(\"%s\", \"failed to set thread pool max thread count\");\n        return 1;\n    }\n\n    ABinderProcess_startThreadPool();\n\n    // \u521b\u5efa\u4e00\u4e2a FakeVehicleHardware \u5bf9\u8c61\u7684\u667a\u80fd\u6307\u9488\n    std::unique_ptr&lt;FakeVehicleHardware&gt; hardware = std::make_unique&lt;FakeVehicleHardware&gt;();\n    // \u521b\u5efa\u4e00\u4e2a DefaultVehicleHal \u5bf9\u8c61\u7684\u5171\u4eab\u6307\u9488\uff0c\u5e76\u4f20\u5165 FakeVehicleHardware \u5bf9\u8c61\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\n    std::shared_ptr&lt;DefaultVehicleHal&gt; vhal =\n            ::ndk::SharedRefBase::make&lt;DefaultVehicleHal&gt;(std::move(hardware));\n\n    ALOGI(\"Registering as service...\");\n    // \u5c06 DefaultVehicleHal \u5bf9\u8c61\u6ce8\u518c\u4e3a\u540d\u4e3a \"android.hardware.automotive.vehicle.IVehicle/default\" \u7684\u670d\u52a1\n    binder_exception_t err = AServiceManager_addService(\n            vhal-&gt;asBinder().get(), \"android.hardware.automotive.vehicle.IVehicle/default\");\n    // \u5982\u679c\u6ce8\u518c\u5931\u8d25\uff0c\u5219\u6253\u5370\u9519\u8bef\u65e5\u5fd7\u5e76\u8fd4\u56de1\n    if (err != EX_NONE) {\n        ALOGE(\"failed to register android.hardware.automotive.vehicle service, exception: %d\", err);\n        return 1;\n    }\n\n    ALOGI(\"Vehicle Service Ready\");\n\n    ABinderProcess_joinThreadPool();\n\n    ALOGI(\"Vehicle Service Exiting\");\n\n    return 0;\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#fakevehiclehardware","title":"FakeVehicleHardware","text":"<p>FakeVehicleHardware \u7ee7\u627f\u81ea IVehicleHardware \u63a5\u53e3\u3002\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u6765\u83b7\u53d6\u548c\u8bbe\u7f6e\u8f66\u8f86\u5c5e\u6027\u7684\u503c\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8f85\u52a9\u65b9\u6cd5\u6765\u5904\u7406\u548c\u751f\u6210\u865a\u62df\u6570\u636e\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/include/FakeVehicleHardware.h\n\nclass FakeVehicleHardware : public IVehicleHardware {\n  public:\n\n    std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropConfig&gt;\n    getAllPropertyConfigs() const override;\n\n    aidl::android::hardware::automotive::vehicle::StatusCode setValues(\n            std::shared_ptr&lt;const SetValuesCallback&gt; callback,\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::SetValueRequest&gt;&amp;\n                    requests) override;\n\n    aidl::android::hardware::automotive::vehicle::StatusCode getValues(\n            std::shared_ptr&lt;const GetValuesCallback&gt; callback,\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::GetValueRequest&gt;&amp;\n                    requests) const override;\n\n    ...\n};\n</code></pre> <p>IVehicleHardware \u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/hardware/include/IVehicleHardware.h\n\n/ \u4e00\u4e2a\u7528\u4e8e\u8bbf\u95ee\u8f66\u8f86\u786c\u4ef6\u7684\u62bd\u8c61\u63a5\u53e3\u3002\n// \u5bf9\u4e8e\u865a\u62df\u5316\u7684 VHAL\uff0cGrpcVehicleHardware\u5c06\u901a\u8fc7GRPC\u4e0e\u53e6\u4e00\u4e2a\u865a\u62df\u673a\u4e2d\u7684VehicleHardware\u5b9e\u73b0\u8fdb\u884c\u901a\u4fe1\u3002\u5bf9\u4e8e\u975e\u865a\u62df\u5316\u7684VHAL\uff0cVHAL\u76f4\u63a5\u901a\u8fc7\u8be5\u63a5\u53e3\u4e0eVehicleHardware\u8fdb\u884c\u901a\u4fe1\u3002\nclass IVehicleHardware {\n  public:\n    using SetValuesCallback = std::function&lt;void(\n            std::vector&lt;aidl::android::hardware::automotive::vehicle::SetValueResult&gt;)&gt;;\n    using GetValuesCallback = std::function&lt;void(\n            std::vector&lt;aidl::android::hardware::automotive::vehicle::GetValueResult&gt;)&gt;;\n    using PropertyChangeCallback = std::function&lt;void(\n            std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropValue&gt;)&gt;;\n    using PropertySetErrorCallback = std::function&lt;void(std::vector&lt;SetValueErrorEvent&gt;)&gt;;\n\n    virtual ~IVehicleHardware() = default;\n\n    // \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u7684\u914d\u7f6e\u3002\n    virtual std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropConfig&gt;\n    getAllPropertyConfigs() const = 0;\n\n    // \u5f02\u6b65\u8bbe\u7f6e\u5c5e\u6027\u503c\u3002\u670d\u52a1\u5668\u53ef\u80fd\u5728\u5c5e\u6027\u8bbe\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230\u8f66\u8f86\u603b\u7ebf\u4e4b\u524d\u6216\u63a5\u6536\u5230\u5c5e\u6027\u8bbe\u7f6e\u786e\u8ba4\u4e4b\u524d\u8fd4\u56de\u3002\u56de\u8c03\u51fd\u6570\u5728\u51fd\u6570\u8fd4\u56de\u540e\u53ef\u4ee5\u5b89\u5168\u5730\u8c03\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e2d\u8c03\u7528\u3002\n    virtual aidl::android::hardware::automotive::vehicle::StatusCode setValues(\n            std::shared_ptr&lt;const SetValuesCallback&gt; callback,\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::SetValueRequest&gt;&amp;\n                    requests) = 0;\n\n    // \u5f02\u6b65\u83b7\u53d6\u5c5e\u6027\u503c\u3002\u670d\u52a1\u5668\u53ef\u80fd\u5728\u5c5e\u6027\u503c\u51c6\u5907\u597d\u4e4b\u524d\u8fd4\u56de\u3002\u56de\u8c03\u51fd\u6570\u5728\u51fd\u6570\u8fd4\u56de\u540e\u53ef\u4ee5\u5b89\u5168\u5730\u8c03\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e2d\u8c03\u7528\u3002\n    virtual aidl::android::hardware::automotive::vehicle::StatusCode getValues(\n            std::shared_ptr&lt;const GetValuesCallback&gt; callback,\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::GetValueRequest&gt;&amp;\n                    requests) const = 0;\n\n    // \u5982\u679c\u670d\u52a1\u5668\u652f\u6301\uff0c\u66f4\u65b0\u6307\u5b9a\u5c5e\u6027\u548c\u6307\u5b9a\u533a\u57dfID\uff08\u5168\u5c40\u5c5e\u6027\u4e3a0\uff09\u7684\u91c7\u6837\u7387\u3002\u5c5e\u6027\u5fc5\u987b\u662f\u8fde\u7eed\u5c5e\u6027\u3002\n    // sampleRate\u8868\u793a\u5bf9\u4e8e\u8be5\u7279\u5b9a\u5c5e\u6027\uff0c\u670d\u52a1\u5668\u5fc5\u987b\u6bcf\u79d2\u751f\u6210\u81f3\u5c11\u8fd9\u4e48\u591a\u4e2aOnPropertyChange\u4e8b\u4ef6\u3002\n    // sampleRate\u4e3a0\u8868\u793a\u4e0d\u518d\u8ba2\u9605\u8be5\u5c5e\u6027\uff0c\u670d\u52a1\u5668\u4e0d\u9700\u8981\u4e3a\u8be5\u5c5e\u6027\u751f\u6210\u4efb\u4f55onPropertyEvent\u3002\n    // \u5982\u679c\u4e3a\u8ba2\u9605\u8005\u66f4\u65b0\u4e86\u91c7\u6837\u7387\u3001\u6dfb\u52a0\u4e86\u65b0\u7684\u8ba2\u9605\u8005\u6216\u5220\u9664\u4e86\u73b0\u6709\u7684\u8ba2\u9605\u8005\uff0c\u5219\u4f1a\u8c03\u7528\u6b64\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n    // 1. \u5bf9\u4e8e\u901f\u5ea6\uff0c\u6211\u4eec\u6ca1\u6709\u8ba2\u9605\u8005\u3002\n    // 2. \u4e00\u4e2a\u65b0\u7684\u8ba2\u9605\u8005\u6b63\u5728\u4ee510\u6b21/\u79d2\u7684\u901f\u5ea6\u8ba2\u9605\u901f\u5ea6\uff0cupdateSampleRate\u5c06\u4ee510\u4e3asampleRate\u8fdb\u884c\u8c03\u7528\u3002\u5b9e\u73b0\u73b0\u5728\u6b63\u5728\u4ee510\u6b21/\u79d2\u7684\u9891\u7387\u4ece\u603b\u7ebf\u8f6e\u8be2\u8f66\u901f\u3002\n    // 3. \u4e00\u4e2a\u65b0\u7684\u8ba2\u9605\u8005\u6b63\u5728\u4ee55\u6b21/\u79d2\u7684\u901f\u5ea6\u8ba2\u9605\u901f\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5c0f\u4e8e10\u6b21/\u79d2\uff0c\u4e0d\u4f1a\u8c03\u7528updateSampleRate\u3002\n    // 4. \u5220\u9664\u521d\u59cb\u8ba2\u9605\u8005\uff0cupdateSampleRate\u5c06\u4ee55\u4e3asampleRate\u8fdb\u884c\u8c03\u7528\uff0c\u56e0\u4e3a\u73b0\u5728\u53ea\u9700\u8981\u62a5\u544a5\u6b21/\u79d2\u7684\u4e8b\u4ef6\u3002\u5b9e\u73b0\u73b0\u5728\u53ef\u4ee5\u4ee55\u6b21/\u79d2\u7684\u9891\u7387\u8f6e\u8be2\u8f66\u901f\u3002\u5982\u679c\u5b9e\u73b0\u4ecd\u7136\u4ee510\u6b21/\u79d2\u7684\u9891\u7387\u8f6e\u8be2\uff0c\u90a3\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u8981\u8f6e\u8be2\u901f\u7387\u5927\u4e8e5\u6b21/\u79d2\u3002DefaultVehicleHal\u5c06\u5ffd\u7565\u989d\u5916\u7684\u4e8b\u4ef6\u3002\n    // 5. \u5220\u9664\u7b2c\u4e8c\u4e2a\u8ba2\u9605\u8005\uff0cupdateSampleRate\u5c06\u4ee50\u4e3asampleRate\u8fdb\u884c\u8c03\u7528\u3002\u5b9e\u73b0\u53ef\u4ee5\u9009\u62e9\u7981\u7528\u8f66\u901f\u7684\u8f6e\u8be2\u3002\n    //\n    // \u5982\u679c\u5b9e\u73b0\u59cb\u7ec8\u4ee5\u914d\u7f6e\u4e2d\u6307\u5b9a\u7684maxSampleRate\u8fdb\u884c\u8f6e\u8be2\uff0c\u5219\u6b64\u51fd\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u7a7a\u64cd\u4f5c\u3002\n    virtual aidl::android::hardware::automotive::vehicle::StatusCode updateSampleRate(\n            [[maybe_unused]] int32_t propId, [[maybe_unused]] int32_t areaId,\n            [[maybe_unused]] float sampleRate) {\n        return aidl::android::hardware::automotive::vehicle::StatusCode::OK;\n    }\n\n    // \u5728\u670d\u52a1\u5668\u4e2d\u8f6c\u50a8\u8c03\u8bd5\u4fe1\u606f\u3002\n    virtual DumpResult dump(const std::vector&lt;std::string&gt;&amp; options) = 0;\n\n    // \u68c0\u67e5\u7cfb\u7edf\u662f\u5426\u5065\u5eb7\uff0c\u5bf9\u4e8e\u5065\u5eb7\u7684\u60c5\u51b5\u8fd4\u56deStatusCode::OK\u3002\n    virtual aidl::android::hardware::automotive::vehicle::StatusCode checkHealth() = 0;\n\n    // \u6ce8\u518c\u5728\u6709\u8f66\u8f86\u5c5e\u6027\u53d8\u5316\u4e8b\u4ef6\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002\u5728\u521d\u59cb\u5316\u671f\u95f4\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u3002\n    virtual void registerOnPropertyChangeEvent(\n            std::unique_ptr&lt;const PropertyChangeCallback&gt; callback) = 0;\n\n    // \u6ce8\u518c\u5728\u6709\u8f66\u8f86\u5c5e\u6027\u8bbe\u7f6e\u9519\u8bef\u4e8b\u4ef6\u65f6\u8c03\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002\u5728\u521d\u59cb\u5316\u671f\u95f4\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u3002\n    virtual void registerOnPropertySetErrorEvent(\n            std::unique_ptr&lt;const PropertySetErrorCallback&gt; callback) = 0;\n};\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u6765\u770b FakeVehicleHardware \u521d\u59cb\u5316\u90fd\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nFakeVehicleHardware::FakeVehicleHardware()\n    : FakeVehicleHardware(DEFAULT_CONFIG_DIR, OVERRIDE_CONFIG_DIR, false) {}\n\nFakeVehicleHardware::FakeVehicleHardware(std::string defaultConfigDir,\n                                         std::string overrideConfigDir, bool forceOverride)\n    : mValuePool(std::make_unique&lt;VehiclePropValuePool&gt;()),  // \u521b\u5efa\u4e00\u4e2aVehiclePropValuePool\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\n      mServerSidePropStore(new VehiclePropertyStore(mValuePool)),  // \u521b\u5efa\u4e00\u4e2aVehiclePropertyStore\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\n      mFakeObd2Frame(new obd2frame::FakeObd2Frame(mServerSidePropStore)),  // \u521b\u5efa\u4e00\u4e2aFakeObd2Frame\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\n      mFakeUserHal(new FakeUserHal(mValuePool)),  // \u521b\u5efa\u4e00\u4e2aFakeUserHal\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\n      mRecurrentTimer(new RecurrentTimer()),  // \u521b\u5efa\u4e00\u4e2aRecurrentTimer\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\n      mGeneratorHub(new GeneratorHub(\n              [this](const VehiclePropValue&amp; value) { eventFromVehicleBus(value); })),  // \u521b\u5efa\u4e00\u4e2aGeneratorHub\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\uff0c\u540c\u65f6\u4f20\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\n      mPendingGetValueRequests(this),  // \u521b\u5efa\u4e00\u4e2aPendingRequests\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\u8fdb\u884c\u521d\u59cb\u5316\n      mPendingSetValueRequests(this),  // \u521b\u5efa\u4e00\u4e2aPendingRequests\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\u8fdb\u884c\u521d\u59cb\u5316\n      mDefaultConfigDir(defaultConfigDir),  // \u521d\u59cb\u5316mDefaultConfigDir\u6210\u5458\u53d8\u91cf\n      mOverrideConfigDir(overrideConfigDir),  // \u521d\u59cb\u5316mOverrideConfigDir\u6210\u5458\u53d8\u91cf\n      mForceOverride(forceOverride) {  // \u521d\u59cb\u5316mForceOverride\u6210\u5458\u53d8\u91cf\n    init();  // \u8c03\u7528init()\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\n}\n</code></pre> <ul> <li> <p>mValuePool     \u521b\u5efa VehiclePropValuePool \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/VehicleObjectPool.h</p> </li> <li> <p>mServerSidePropStore     \u521b\u5efa\u4e00\u4e2a VehiclePropertyStore \u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u6307\u9488\u8fdb\u884c\u7ba1\u7406\u3002     \u521b\u5efa VehiclePropertyStore \u65f6\uff0c\u628a mValuePool \u4f20\u8fdb\u53bb\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/VehiclePropertyStore.h hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/VehiclePropertyStore.cpp</p> </li> <li> <p>mFakeObd2Frame     FakeObd2Frame \u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u6765\u586b\u5145\u548c\u64cd\u4f5c OBD-II\uff08On-Board Diagnostics\uff09\u4f20\u611f\u5668\u6570\u636e\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/obd2frame/include/FakeObd2Frame.h hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/obd2frame/src/FakeObd2Frame.cpp</p> </li> <li> <p>mFakeUserHal     \u7528\u4e8e\u6a21\u62df\u771f\u5b9e\u7684\u7528\u6237HAL\u884c\u4e3a\u3002\u5982\uff1a\u68c0\u67e5\u6a21\u62df\u5668\u662f\u5426\u652f\u6301\u67d0\u4e2a\u5c5e\u6027\u3001\u5141\u8bb8\u6a21\u62df\u5668\u8bbe\u7f6e\u5c5e\u6027\u3001\u4ece\u6a21\u62df\u5668\u83b7\u53d6\u5c5e\u6027\u503c\u7b49\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/userhal/include/FakeUserHal.h hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/userhal/src/FakeUserHal.cpp</p> </li> <li> <p>mRecurrentTimer     \u5b9e\u73b0\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5faa\u73af\u5b9a\u65f6\u5668\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/RecurrentTimer.h hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/RecurrentTimer.cpp</p> </li> <li> <p>mGeneratorHub     \u6240\u6709VHAL\u4e8b\u4ef6\u751f\u6210\u5668\u7684\u8c03\u5ea6\u5668\u3002\u7ba1\u7406\u6240\u6709\u751f\u6210\u5668\uff0c\u5e76\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u6765\u7ef4\u62a4\u6309\u65f6\u95f4\u6233\u6392\u5e8f\u7684\u751f\u6210\u7684\u4e8b\u4ef6\u3002\u8c03\u5ea6\u5668\u4f7f\u7528\u5355\u4e2a\u7ebf\u7a0b\u6765\u67e5\u8be2\u548c\u66f4\u65b0\u4e8b\u4ef6\u961f\u5217\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u751f\u6210\u5668\u7684\u4e8b\u4ef6\u6309\u987a\u5e8f\u4ea7\u751f\u3002</p> <p>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/GeneratorHub/include/GeneratorHub.h hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/GeneratorHub/src/GeneratorHub.cpp</p> </li> <li> <p>mPendingGetValueRequests     \u4f7f\u7528\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u5904\u7406 getValue \u8bf7\u6c42\u3002</p> </li> <li> <p>mPendingSetValueRequests     \u4f7f\u7528\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u5904\u7406 setValue \u8bf7\u6c42\u3002</p> </li> <li> <p>mDefaultConfigDir     /vendor/etc/automotive/vhalconfig/</p> </li> <li> <p>mOverrideConfigDir     /vendor/etc/automotive/vhaloverride/</p> </li> <li> <p>init()     \u76ee\u5f55 mDefaultConfigDir \uff08\u6216\u8005 mOverrideConfigDir \uff09\u8bfb\u53d6 json \u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u5168\u90e8\u52a0\u8f7d\u3002</p> </li> </ul> <p>\u5728 Android S \u4e2d\u3002\u662f\u628a hardware/interfaces/automotive/vehicle/2.0/default/impl/vhal_v2_0/DefaultConfig.h \u91cc\u58f0\u660e\u7684 kVehicleProperties \u914d\u7f6e\u5168\u90e8\u52a0\u8f7d\u3002</p> <p>Android U \uff08\u6ca1\u770b\u8fc7 Android T\uff0c\u4e5f\u884c\u662f\u5728 T \u4e0a\u5c31\u6539\u4e86\uff09\u6539\u6210\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u81ea\u5b9a\u4e49\u5ea6\u9ad8\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u5148\u6765\u5206\u6790\u5173\u952e\u7684\u90e8\u5206\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertyvalue","title":"VehiclePropertyValue","text":"<p>VehiclePropertyValue \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u7528\u6237\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u5b83\u53ea\u6709\u4e00\u4e2a\u91cd\u8f7d\u7684\u516c\u5171\u65b9\u6cd5 - obtain(...)\uff0c\u5f53\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u65f6\uff0c\u7528\u6237\u5fc5\u987b\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5e76\u63d0\u4f9b VehiclePropertyType \u548c vector \u5927\u5c0f\uff08\u5bf9\u4e8evector\u5c5e\u6027\uff09\u3002 \u793a\u4f8b\u7528\u6cd5\uff1a</p> <pre><code>VehiclePropValuePool pool;\nauto v = pool.obtain(VehiclePropertyType::INT32);\nv-&gt;propId = VehicleProperty::HVAC_FAN_SPEED;\nv-&gt;areaId = VehicleAreaSeat::ROW_1_LEFT;\nv-&gt;timestamp = elapsedRealtimeNano();\nv-&gt;value-&gt;int32Values[0] = 42;\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclepropertystore","title":"VehiclePropertyStore","text":"<p>VehiclePropertyStore\u7684\u7c7b\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u8bbf\u95ee\u8f66\u8f86\u5c5e\u6027\u7684\u914d\u7f6e\u548c\u503c\u3002</p> <ul> <li>registerProperty\uff1a\u6ce8\u518c\u8f66\u8f86\u5c5e\u6027\u7684\u914d\u7f6e\u3002</li> <li>writeValue\uff1a\u5b58\u50a8\u63d0\u4f9b\u7684\u5c5e\u6027\u503c\u3002</li> <li>removeValue\uff1a\u5220\u9664\u6307\u5b9a\u7684\u5c5e\u6027\u503c\u3002</li> <li>removeValuesForProperty\uff1a\u5220\u9664\u6307\u5b9a\u5c5e\u6027\u7684\u6240\u6709\u503c\u3002</li> <li>readAllValues\uff1a\u8bfb\u53d6\u6240\u6709\u5c5e\u6027\u7684\u503c\u3002</li> <li>readValuesForProperty\uff1a\u8bfb\u53d6\u6307\u5b9a\u5c5e\u6027\u7684\u6240\u6709\u503c\u3002</li> <li>readValue\uff1a\u8bfb\u53d6\u6307\u5b9a\u5c5e\u6027\u7684\u5c5e\u6027\u503c\u3002</li> <li>getAllConfigs\uff1a\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u7684\u914d\u7f6e\u4fe1\u606f\u3002</li> <li>getConfig\uff1a\u83b7\u53d6\u6307\u5b9a\u5c5e\u6027\u7684\u914d\u7f6e\u4fe1\u606f\u3002</li> <li>setOnValueChangeCallback\uff1a\u8bbe\u7f6e\u5c5e\u6027\u503c\u66f4\u65b0\u65f6\u7684\u56de\u8c03\u51fd\u6570\u3002</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/VehiclePropertyStore.h\nhardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/VehiclePropertyStore.cpp\n\nclass VehiclePropertyStore final {\n  public:\n    ...\n\n    void registerProperty(\n            const aidl::android::hardware::automotive::vehicle::VehiclePropConfig&amp; config,\n            TokenFunction tokenFunc = nullptr);\n\n\n    VhalResult&lt;void&gt; writeValue(VehiclePropValuePool::RecyclableType propValue,\n                                bool updateStatus = false,\n                                EventMode mode = EventMode::ON_VALUE_CHANGE);\n\n    void removeValue(\n            const aidl::android::hardware::automotive::vehicle::VehiclePropValue&amp; propValue);\n\n    void removeValuesForProperty(int32_t propId);\n\n    std::vector&lt;VehiclePropValuePool::RecyclableType&gt; readAllValues() const;\n\n    ValuesResultType readValuesForProperty(int32_t propId) const;\n\n    ValueResultType readValue(\n            const aidl::android::hardware::automotive::vehicle::VehiclePropValue&amp; request) const;\n\n    ValueResultType readValue(int32_t prop, int32_t area = 0, int64_t token = 0) const;\n\n    std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropConfig&gt; getAllConfigs()\n            const;\n\n    android::base::Result&lt;const aidl::android::hardware::automotive::vehicle::VehiclePropConfig*,\n                          VhalError&gt;\n    getConfig(int32_t propId) const;\n\n    void setOnValueChangeCallback(const OnValueChangeCallback&amp; callback);\n\n    inline std::shared_ptr&lt;VehiclePropValuePool&gt; getValuePool() { return mValuePool; }\n\n    ...\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#fakeuserhal","title":"FakeUserHal","text":"<p>FakeUserHal \u7528\u4e8e\u6a21\u62df\u7528\u6237 HAL \u7684\u884c\u4e3a\uff0c\u901a\u8fc7\u4f7f\u7528 lshal \u8c03\u8bd5\u8bf7\u6c42\u6765\u5b9e\u73b0\u3002</p> <p>\u5bf9\u5e94\u7684\u662f Android S \u7684 EmulatedUserHal</p> <ul> <li>isSupported()\uff1a\u68c0\u67e5\u6a21\u62df\u5668\u662f\u5426\u652f\u6301\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002</li> <li>onSetProperty()\uff1a\u5141\u8bb8\u6a21\u62df\u5668\u8bbe\u7f6e\u5c5e\u6027\uff0c\u5e76\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u5c5e\u6027\u548c\u72b6\u6001\u7801\u3002</li> <li>onGetProperty()\uff1a\u4ece\u6a21\u62df\u5668\u83b7\u53d6\u5c5e\u6027\u503c\uff0c\u5e76\u8fd4\u56de\u5c5e\u6027\u503c\u548c\u72b6\u6001\u7801\u3002</li> <li>dump()\uff1alshal \u547d\u4ee4 dump</li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/userhal/include/FakeUserHal.h\nhardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/userhal/src/FakeUserHal.cpp\n\n// \u7528\u4e8e\u901a\u8fc7lshal\u8c03\u8bd5\u8bf7\u6c42\u6a21\u62df\u771f\u5b9eUser HAL\u884c\u4e3a\u7684\u7c7b\u3002\nclass FakeUserHal final {\n  public:\n    ...\n\n    // \u68c0\u67e5\u6a21\u62df\u5668\u662f\u5426\u80fd\u5904\u7406\u8be5\u5c5e\u6027\u3002\n    static bool isSupported(int32_t prop);\n\n    // \u5141\u8bb8\u6a21\u62df\u5668\u8bbe\u7f6e\u5c5e\u6027\u3002\n    //\n    // @return \u66f4\u65b0\u540e\u7684\u5c5e\u6027\u548cStatusCode\n    ValueResultType onSetProperty(\n            const aidl::android::hardware::automotive::vehicle::VehiclePropValue&amp; value);\n\n    // \u4ece\u6a21\u62df\u5668\u83b7\u53d6\u5c5e\u6027\u503c\u3002\n    //\n    // @return \u5c5e\u6027\u503c\u548cStatusCode\n    ValueResultType onGetProperty(\n            const aidl::android::hardware::automotive::vehicle::VehiclePropValue&amp; value) const;\n\n    // \u663e\u793aUser HAL\u6a21\u62df\u5e2e\u52a9\u3002\n    std::string showDumpHelp() const;\n\n    // \u8f6c\u50a8\u5176\u5185\u5bb9\u3002\n    std::string dump() const;\n\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#fakevehiclehardwareinit","title":"FakeVehicleHardware::init()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nstd::unordered_map&lt;int32_t, ConfigDeclaration&gt; FakeVehicleHardware::loadConfigDeclarations() {\n    std::unordered_map&lt;int32_t, ConfigDeclaration&gt; configsByPropId;\n    loadPropConfigsFromDir(mDefaultConfigDir, &amp;configsByPropId);\n    if (mForceOverride ||\n        android::base::GetBoolProperty(OVERRIDE_PROPERTY, /*default_value=*/false)) {\n        loadPropConfigsFromDir(mOverrideConfigDir, &amp;configsByPropId);\n    }\n    return configsByPropId;\n}\n\n// \u4ece\u6307\u5b9a\u76ee\u5f55\u52a0\u8f7d\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6\nvoid FakeVehicleHardware::loadPropConfigsFromDir(\n        const std::string&amp; dirPath,\n        std::unordered_map&lt;int32_t, ConfigDeclaration&gt;* configsByPropId) {\n    ALOGI(\"loading properties from %s\", dirPath.c_str());\n    if (auto dir = opendir(dirPath.c_str()); dir != NULL) {\n        // \u521b\u5efa\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5339\u914d\u4ee5.json\u7ed3\u5c3e\u7684\u6587\u4ef6\n        std::regex regJson(\".*[.]json\", std::regex::icase);\n\n        // \u904d\u5386\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\n        while (auto f = readdir(dir)) {\n            // \u5982\u679c\u6587\u4ef6\u540d\u4e0d\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5219\u8df3\u8fc7\u8be5\u6587\u4ef6\n            if (!std::regex_match(f-&gt;d_name, regJson)) {\n                continue;\n            }\n\n            // \u6784\u5efa\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n            std::string filePath = dirPath + \"/\" + std::string(f-&gt;d_name);\n            ALOGI(\"loading properties from %s\", filePath.c_str());\n            // \u8c03\u7528mLoader\u5bf9\u8c61\u7684loadPropConfig\u65b9\u6cd5\u52a0\u8f7d\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6\n            auto result = mLoader.loadPropConfig(filePath);\n            if (!result.ok()) {\n                ALOGE(\"failed to load config file: %s, error: %s\", filePath.c_str(),\n                      result.error().message().c_str());\n                continue;  // \u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u6587\u4ef6\n            }\n            // \u904d\u5386\u52a0\u8f7d\u6210\u529f\u7684\u5c5e\u6027\u914d\u7f6e\n            for (auto&amp; [propId, configDeclaration] : result.value()) {\n                // \u5c06\u5c5e\u6027\u914d\u7f6e\u6dfb\u52a0\u5230configsByPropId\u4e2d\n                (*configsByPropId)[propId] = std::move(configDeclaration);\n            }\n        }\n        closedir(dir);  // \u5173\u95ed\u76ee\u5f55\n    }\n}\n\nvoid FakeVehicleHardware::init() {\n    // \u52a0\u8f7d\u914d\u7f6e\u58f0\u660e\u5e76\u904d\u5386\n    for (auto&amp; [_, configDeclaration] : loadConfigDeclarations()) {\n        VehiclePropConfig cfg = configDeclaration.config;\n        VehiclePropertyStore::TokenFunction tokenFunction = nullptr;\n\n        // \u5982\u679c\u5c5e\u6027\u662f AP_POWER_STATE_REQ\n        if (cfg.prop == toInt(VehicleProperty::AP_POWER_STATE_REQ)) {\n            // \u83b7\u53d6 POWER_STATE_REQ_CONFIG_PROPERTY \u7684\u503c\u4f5c\u4e3a\u914d\u7f6e\n            int config = GetIntProperty(POWER_STATE_REQ_CONFIG_PROPERTY, /*default_value=*/0);\n            cfg.configArray[0] = config;\n        } \n        // \u5982\u679c\u5c5e\u6027\u662f OBD2_FREEZE_FRAME\n        else if (cfg.prop == OBD2_FREEZE_FRAME) {\n            // \u8bbe\u7f6e tokenFunction \u4e3a\u4e00\u4e2a lambda \u51fd\u6570\uff0c\u8fd4\u56de propValue \u7684\u65f6\u95f4\u6233\n            tokenFunction = [](const VehiclePropValue&amp; propValue) { return propValue.timestamp; };\n        }\n\n        // \u6ce8\u518c\u5c5e\u6027\u5230 mServerSidePropStore\n        mServerSidePropStore-&gt;registerProperty(cfg, tokenFunction);\n\n        // \u5982\u679c\u662f\u8bca\u65ad\u5c5e\u6027\uff0c\u5219\u5ffd\u7565\u5b58\u50a8\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u7279\u6b8a\u7684get/set\u903b\u8f91\n        if (obd2frame::FakeObd2Frame::isDiagnosticProperty(cfg)) {\n            continue;\n        }\n\n        // \u5b58\u50a8\u5c5e\u6027\u7684\u521d\u59cb\u503c\n        storePropInitialValue(configDeclaration);\n    }\n\n    // OBD2_LIVE_FRAME \u548c OBD2_FREEZE_FRAME \u5fc5\u987b\u5728\u9ed8\u8ba4\u914d\u7f6e\u4e2d\u8fdb\u884c\u914d\u7f6e\n    auto maybeObd2LiveFrame = mServerSidePropStore-&gt;getConfig(OBD2_LIVE_FRAME);\n    if (maybeObd2LiveFrame.has_value()) {\n        // \u521d\u59cb\u5316mFakeObd2Frame \u7684O BD2_LIVE_FRAME\n        mFakeObd2Frame-&gt;initObd2LiveFrame(*maybeObd2LiveFrame.value());\n    }\n    auto maybeObd2FreezeFrame = mServerSidePropStore-&gt;getConfig(OBD2_FREEZE_FRAME);\n    if (maybeObd2FreezeFrame.has_value()) {\n        // \u521d\u59cb\u5316 mFakeObd2Frame \u7684 OBD2_FREEZE_FRAME\n        mFakeObd2Frame-&gt;initObd2FreezeFrame(*maybeObd2FreezeFrame.value());\n    }\n\n    // \u8bbe\u7f6e mServerSidePropStore \u7684\u503c\u6539\u53d8\u56de\u8c03\u51fd\u6570\n    mServerSidePropStore-&gt;setOnValueChangeCallback(\n            [this](const VehiclePropValue&amp; value) { return onValueChangeCallback(value); });\n}\n</code></pre> <ul> <li> <p>\u4ece\u76ee\u5f55 mDefaultConfigDir \uff08\u6216\u8005 mOverrideConfigDir \uff09\u8bfb\u53d6 json \u914d\u7f6e\u6587\u4ef6\uff0c\u89e3\u6790\u540e\u5b58\u5728 configsByPropId \u3002</p> </li> <li> <p>\u904d\u5386 configsByPropId </p> </li> <li> <p>\u9488\u5bf9 AP_POWER_STATE_REQ \u3001OBD2_FREEZE_FRAME \u505a\u4e00\u4e9b\u7279\u6b8a\u5904\u7406</p> </li> <li> <p>\u6ce8\u518c\u5c5e\u6027\u5230 mServerSidePropStore\uff08\u4e5f\u5c31\u662f VehiclePropertyStore \uff09</p> </li> </ul> <pre><code>void VehiclePropertyStore::registerProperty(const VehiclePropConfig&amp; config,\n                                            VehiclePropertyStore::TokenFunction tokenFunc) {\n    std::scoped_lock&lt;std::mutex&gt; g(mLock);\n\n    mRecordsByPropId[config.prop] = Record{\n            .propConfig = config,\n            .tokenFunction = tokenFunc,\n    };\n}\n</code></pre> <ul> <li> <p>\u5982\u679c\u662f OBD-II\uff08On-Board Diagnostics\uff09\uff0c\u5219\u5ffd\u7565\u5b58\u50a8\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u7279\u6b8a\u7684get/set\u903b\u8f91</p> </li> <li> <p>OBD2_LIVE_FRAME \u3001OBD2_FREEZE_FRAME \u5fc5\u987b\u5728\u9ed8\u8ba4\u914d\u7f6e\u4e2d\u8fdb\u884c\u914d\u7f6e</p> </li> <li> <p>\u5b58\u50a8\u5c5e\u6027\u7684\u521d\u59cb\u503c     storePropInitialValue() \u51fd\u6570\u505a\u5173\u952e\u7684\u90e8\u5206\u5176\u5b9e\u5c31\u662f\u8c03 mServerSidePropStore-&gt;writeValue(mValuePool-&gt;obtain(prop), true) \u3002</p> </li> <li> <p>\u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\uff0c\u5982\u679c VehiclePropertyStore \u503c\u53d8\u5316\uff0c\u56de\u8c03\u5230  FakeVehicleHardware::onValueChangeCallback() \u3002</p> </li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehal","title":"DefaultVehicleHal","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\nclass DefaultVehicleHal final : public aidl::android::hardware::automotive::vehicle::BnVehicle {\n  public:\n    // \u5b9a\u4e49\u56de\u8c03\u7c7b\u578b\n    using CallbackType =\n            std::shared_ptr&lt;aidl::android::hardware::automotive::vehicle::IVehicleCallback&gt;;\n\n    // \u6784\u9020\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u6307\u5411IVehicleHardware\u5bf9\u8c61\u7684unique_ptr\n    explicit DefaultVehicleHal(std::unique_ptr&lt;IVehicleHardware&gt; hardware);\n\n\n    // \u83b7\u53d6\u6240\u6709\u5c5e\u6027\u914d\u7f6e\u7684\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2aVehiclePropConfigs\u5bf9\u8c61\n    ndk::ScopedAStatus getAllPropConfigs(\n            aidl::android::hardware::automotive::vehicle::VehiclePropConfigs* returnConfigs)\n            override;\n\n    // \u83b7\u53d6\u5c5e\u6027\u503c\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u548cGetValueRequests\u5bf9\u8c61\n    ndk::ScopedAStatus getValues(\n            const CallbackType&amp; callback,\n            const aidl::android::hardware::automotive::vehicle::GetValueRequests&amp; requests)\n            override;\n\n    // \u8bbe\u7f6e\u5c5e\u6027\u503c\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u548cSetValueRequests\u5bf9\u8c61\n    ndk::ScopedAStatus setValues(\n            const CallbackType&amp; callback,\n            const aidl::android::hardware::automotive::vehicle::SetValueRequests&amp; requests)\n            override;\n\n    // \u83b7\u53d6\u6307\u5b9a\u5c5e\u6027\u914d\u7f6e\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u5c5e\u6027ID\u7684vector\u548c\u4e00\u4e2aVehiclePropConfigs\u5bf9\u8c61\n    ndk::ScopedAStatus getPropConfigs(\n            const std::vector&lt;int32_t&gt;&amp; props,\n            aidl::android::hardware::automotive::vehicle::VehiclePropConfigs* returnConfigs)\n            override;\n\n    // \u8ba2\u9605\u5c5e\u6027\u503c\u53d8\u5316\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3001SubscribeOptions\u5bf9\u8c61\u7684vector\u548c\u6700\u5927\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6570\n    ndk::ScopedAStatus subscribe(\n            const CallbackType&amp; callback,\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::SubscribeOptions&gt;&amp;\n                    options,\n            int32_t maxSharedMemoryFileCount) override;\n\n    // \u53d6\u6d88\u8ba2\u9605\u5c5e\u6027\u503c\u53d8\u5316\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u548c\u5c5e\u6027ID\u7684vector\n    ndk::ScopedAStatus unsubscribe(const CallbackType&amp; callback,\n                                   const std::vector&lt;int32_t&gt;&amp; propIds) override;\n\n    // \u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u548c\u5171\u4eab\u5185\u5b58ID\n    ndk::ScopedAStatus returnSharedMemory(const CallbackType&amp; callback,\n                                          int64_t sharedMemoryId) override;\n\n    // \u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u53c2\u6570\u6570\u7ec4\u548c\u53c2\u6570\u6570\u91cf\n    binder_status_t dump(int fd, const char** args, uint32_t numArgs) override;\n\n    // \u83b7\u53d6IVehicleHardware\u5bf9\u8c61\u7684\u65b9\u6cd5\n    IVehicleHardware* getHardware();\n};\n</code></pre> <p>\u4e0b\u9762\u6211\u4eec\u6765\u770b DefaultVehicleHal \u7684\u6784\u9020\u51fd\u6570\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\n// DefaultVehicleHal\u7c7b\u7684\u6784\u9020\u51fd\u6570\nDefaultVehicleHal::DefaultVehicleHal(std::unique_ptr&lt;IVehicleHardware&gt; vehicleHardware)\n    : mVehicleHardware(std::move(vehicleHardware)),\n      mPendingRequestPool(std::make_shared&lt;PendingRequestPool&gt;(TIMEOUT_IN_NANO)) {\n\n    // \u4ece VehiclePropertyStore \u7684 mRecordsByPropId \u6210\u5458\u53d8\u91cf\u91cc\u83b7\u53d6\u5c5e\u6027\n    if (!getAllPropConfigsFromHardware()) {\n        return;\n    }\n\n    // \u521d\u59cb\u5316 mSubscriptionClients \u6210\u5458\u53d8\u91cf\n    mSubscriptionClients = std::make_shared&lt;SubscriptionClients&gt;(mPendingRequestPool);\n\n    // \u521b\u5efa subscribeIdByClient \u667a\u80fd\u6307\u9488\n    auto subscribeIdByClient = std::make_shared&lt;SubscribeIdByClient&gt;();\n    // \u83b7\u53d6 mVehicleHardware \u7684\u539f\u59cb\u6307\u9488\n    IVehicleHardware* vehicleHardwarePtr = mVehicleHardware.get();\n    // \u521d\u59cb\u5316 mSubscriptionManager \u6210\u5458\u53d8\u91cf\n    mSubscriptionManager = std::make_shared&lt;SubscriptionManager&gt;(vehicleHardwarePtr);\n\n    // \u521b\u5efa subscriptionManagerCopy \u5f31\u6307\u9488\uff0c\u6307\u5411 mSubscriptionManager\n    std::weak_ptr&lt;SubscriptionManager&gt; subscriptionManagerCopy = mSubscriptionManager;\n    // \u8c03\u7528 mVehicleHardware \u7684 registerOnPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a PropertyChangeCallback \u5bf9\u8c61\n    mVehicleHardware-&gt;registerOnPropertyChangeEvent(\n            std::make_unique&lt;IVehicleHardware::PropertyChangeCallback&gt;(\n                    [subscriptionManagerCopy](std::vector&lt;VehiclePropValue&gt; updatedValues) { // PropertyChangeCallback \u7684\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\n                        onPropertyChangeEvent(subscriptionManagerCopy, updatedValues); // \u8c03\u7528 onPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165 subscriptionManagerCopy \u548c updatedValues\n                    }));\n\n    // \u6ce8\u518c\u5fc3\u8df3\u4e8b\u4ef6\n    mRecurrentAction = std::make_shared&lt;std::function&lt;void()&gt;&gt;(\n            [vehicleHardwarePtr, subscriptionManagerCopy]() { // \u521b\u5efa\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a mRecurrentAction \u7684\u503c\n                checkHealth(vehicleHardwarePtr, subscriptionManagerCopy); // \u8c03\u7528 checkHealth \u51fd\u6570\uff0c\u4f20\u5165 vehicleHardwarePtr \u548c subscriptionManagerCopy\n            });\n    // \u6ce8\u518c\u5b9a\u65f6\u5668\u56de\u8c03\u51fd\u6570\n    mRecurrentTimer.registerTimerCallback(HEART_BEAT_INTERVAL_IN_NANO, mRecurrentAction);\n\n    // \u521b\u5efa mBinderLifecycleHandler\u5bf9\u8c61\n    mBinderLifecycleHandler = std::make_unique&lt;BinderLifecycleHandler&gt;();\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\uff0c\u8c03\u7528 onBinderDiedUnlinkedHandler \u51fd\u6570\n    mOnBinderDiedUnlinkedHandlerThread = std::thread([this] { onBinderDiedUnlinkedHandler(); });\n    mDeathRecipient = ScopedAIBinder_DeathRecipient(\n            // \u521b\u5efa mDeathRecipient \u5bf9\u8c61\uff0c\u5e76\u8bbe\u7f6e onBinderDied \u51fd\u6570\u4e3a\u56de\u8c03\u51fd\u6570\n            AIBinder_DeathRecipient_new(&amp;DefaultVehicleHal::onBinderDied));\n    // \u8bbe\u7f6e mDeathRecipient \u7684 onBinderUnlinked \u51fd\u6570\u4e3a\u56de\u8c03\u51fd\u6570\n    AIBinder_DeathRecipient_setOnUnlinked(mDeathRecipient.get(),\n                                          &amp;DefaultVehicleHal::onBinderUnlinked);\n}\n</code></pre> <ul> <li> <p>mVehicleHardware     \u5c31\u662f VehicleService::main() \u521b\u5efa\u7684 FakeVehicleHardware \u5bf9\u8c61\u3002</p> </li> <li> <p>mPendingRequestPool     \u7ebf\u7a0b\u5b89\u5168\u7684\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6bcf\u4e2a\u8bf7\u6c42\u662f\u5426\u8d85\u65f6\u3002</p> </li> <li> <p>mSubscriptionClients     \u7528\u4e8e\u5b58\u50a8\u6240\u6709\u8ba2\u9605\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>subscribeIdByClient     \u4e3a\u6bcf\u4e2a\u8ba2\u9605\u5ba2\u6237\u7aef\u7ef4\u62a4\u4e00\u4e2a\u9012\u589e\u7684\u8bf7\u6c42ID\u3002</p> </li> <li> <p>mSubscriptionManager     \u7ebf\u7a0b\u5b89\u5168\u7684\u8ba2\u9605\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u6240\u6709VHAL\u8ba2\u9605\u3002</p> </li> <li> <p>VehicleHardware::registerOnPropertyChangeEvent()     \u8c03\u7528 mVehicleHardware \u7684 registerOnPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a PropertyChangeCallback \u5bf9\u8c61\u3002     PropertyChangeCallback \u7684\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\uff0c\u8c03\u7528 onPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165 subscriptionManagerCopy \u548c updatedValues\u3002</p> </li> <li> <p>VehicleHardware::checkHealth()     \u901a\u8fc7 RecurrentTimer \u8ba1\u65f6\u5668\u6ce8\u518c 3S \u7684\u5fc3\u8df3\u4e8b\u4ef6\u3002</p> </li> <li> <p>\u6839\u636e Binder \u751f\u547d\u5468\u671f \u4ece mSubscriptionClients\u3001mSubscriptionManager\u3001mSetValuesClients\u3001mGetValuesClients \u79fb\u9664\u6389\u76f8\u5e94\u7684\u5ba2\u6237\u7aefid \u3002</p> </li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#pendingrequestpool","title":"PendingRequestPool","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/PendingRequestPool.h\n\n// \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6bcf\u4e2a\u8bf7\u6c42\u662f\u5426\u8d85\u65f6\u3002\nclass PendingRequestPool final {\n  public:\n    // \u5b9a\u4e49\u8d85\u65f6\u56de\u8c03\u51fd\u6570\u7c7b\u578b\n    using TimeoutCallbackFunc = std::function&lt;void(const std::unordered_set&lt;int64_t&gt;&amp;)&gt;;\n\n    // \u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165\u8d85\u65f6\u65f6\u95f4\uff08\u7eb3\u79d2\uff09\n    explicit PendingRequestPool(int64_t timeoutInNano);\n\n    // \u5c06\u4e00\u7ec4\u8bf7\u6c42\u6dfb\u52a0\u5230\u8bf7\u6c42\u6c60\u4e2d\u3002\n    // clientId\u662f\u6240\u6709\u8bf7\u6c42\u7684\u952e\u3002\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u5b57\u6216\u8868\u793a\u5ba2\u6237\u7aef\u7684\u6570\u636e\u7ed3\u6784\u7684\u5730\u5740\u3002\u8c03\u7528\u8005\u5fc5\u987b\u7ef4\u62a4\u6b64\u6570\u636e\u7ed3\u6784\u3002\n    // \u6240\u6709\u8bf7\u6c42\u7684requestId\u5fc5\u987b\u5bf9\u4e8e\u4e00\u4e2a\u5ba2\u6237\u7aef\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u4efb\u4f55\u4e00\u4e2arequestId\u4e0e\u5ba2\u6237\u7aef\u7684\u4efb\u4f55\u5f85\u5904\u7406\u8bf7\u6c42\u7684requestId\u91cd\u590d\uff0c\n    // \u5219\u6b64\u51fd\u6570\u8fd4\u56de\u9519\u8bef\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u8bf7\u6c42\u3002\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u88ab\u6dfb\u52a0\u5230\u8bf7\u6c42\u6c60\u4e2d\u3002\n    // \u5982\u679c\u8bf7\u6c42\u5728{@code mTimeoutInNano}\u79d2\u5185\u672a\u5b8c\u6210\uff0c\u5219\u4f1a\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\n    VhalResult&lt;void&gt; addRequests(const void* clientId,\n                                 const std::unordered_set&lt;int64_t&gt;&amp; requestIds,\n                                 std::shared_ptr&lt;const TimeoutCallbackFunc&gt; callback);\n\n    // \u68c0\u67e5\u8bf7\u6c42\u5f53\u524d\u662f\u5426\u5904\u4e8e\u5f85\u5904\u7406\u72b6\u6001\u3002\n    bool isRequestPending(const void* clientId, int64_t requestId) const;\n\n    // \u5c1d\u8bd5\u6807\u8bb0\u8bf7\u6c42\u4e3a\u5df2\u5b8c\u6210\u5e76\u4ece\u6c60\u4e2d\u5220\u9664\uff0c\u5982\u679c\u8bf7\u6c42\u5f53\u524d\u5904\u4e8e\u5f85\u5904\u7406\u72b6\u6001\u3002\u8fd4\u56de\u5df2\u6210\u529f\u5b8c\u6210\u7684\u5f85\u5904\u7406\u8bf7\u6c42\u5217\u8868\u3002\n    // \u5373\u4f7f\u4e00\u4e9brequestIds\u65e0\u6548\uff0c\u6b64\u51fd\u6570\u4e5f\u4f1a\u5c1d\u8bd5\u5b8c\u6210\u4efb\u4f55\u6709\u6548\u7684requestIds\u3002\n    std::unordered_set&lt;int64_t&gt; tryFinishRequests(const void* clientId,\n                                                  const std::unordered_set&lt;int64_t&gt;&amp; requestIds);\n\n    // \u8fd4\u56de\u6c60\u4e2d\u5f85\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u3002\n    size_t countPendingRequests(const void* clientId) const;\n\n    // \u8fd4\u56de\u6c60\u4e2d\u6240\u6709\u5f85\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u3002\n    size_t countPendingRequests() const;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscriptionclients","title":"SubscriptionClients","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\n// \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u7c7b\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u8ba2\u9605\u5ba2\u6237\u7aef\u3002\u8fd9\u4e2a\u7c7b\u5728\u5f02\u6b65\u56de\u8c03\u4e2d\u4f20\u9012\u662f\u5b89\u5168\u7684\u3002\nclass SubscriptionClients {\n  public:\n    // \u6784\u9020\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u5171\u4eab\u6307\u9488\u7c7b\u578b\u7684PendingRequestPool\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\n    SubscriptionClients(std::shared_ptr&lt;PendingRequestPool&gt; pool) : mPendingRequestPool(pool) {}\n\n    // \u53ef\u80fd\u6dfb\u52a0\u4e00\u4e2a\u5ba2\u6237\u7aef\u5230\u8ba2\u9605\u5217\u8868\u4e2d\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5171\u4eab\u6307\u9488\u7c7b\u578b\u7684SubscriptionClient\u5bf9\u8c61\n    std::shared_ptr&lt;SubscriptionClient&gt; maybeAddClient(const CallbackType&amp; callback);\n\n    // \u6839\u636e\u56de\u8c03\u51fd\u6570\u83b7\u53d6\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5171\u4eab\u6307\u9488\u7c7b\u578b\u7684SubscriptionClient\u5bf9\u8c61\n    std::shared_ptr&lt;SubscriptionClient&gt; getClient(const CallbackType&amp; callback);\n\n    // \u6839\u636e\u5ba2\u6237\u7aefID\u79fb\u9664\u4e00\u4e2a\u5ba2\u6237\u7aef\n    void removeClient(const AIBinder* clientId);\n\n    // \u8fd4\u56de\u5f53\u524d\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u6570\u91cf\n    size_t countClients();\n\n  ...\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscribeidbyclient","title":"SubscribeIdByClient","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\n// \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u7c7b\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u8ba2\u9605\u5ba2\u6237\u7aef\u7ef4\u62a4\u4e00\u4e2a\u9012\u589e\u7684\u8bf7\u6c42ID\u3002\u8be5\u7c7b\u53ef\u4ee5\u5b89\u5168\u5730\u4f20\u9012\u7ed9\u5f02\u6b65\u56de\u8c03\u51fd\u6570\u3002\nclass SubscribeIdByClient {\n  public:\n    // \u83b7\u53d6\u7ed9\u5b9a\u56de\u8c03\u51fd\u6570\u7684ID\n    int64_t getId(const CallbackType&amp; callback);\n\n  private:\n    // \u4e92\u65a5\u9501\uff0c\u7528\u4e8e\u4fdd\u62a4mIds\u7684\u5e76\u53d1\u8bbf\u95ee\n    std::mutex mLock;\n    // \u4f7f\u7528AIBinder\u6307\u9488\u4f5c\u4e3a\u952e\uff0c\u5c06\u56de\u8c03\u51fd\u6570\u7684ID\u5b58\u50a8\u5728unordered_map\u4e2d\n    std::unordered_map&lt;const AIBinder*, int64_t&gt; mIds GUARDED_BY(mLock);\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscriptionmanager","title":"SubscriptionManager","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/SubscriptionManager.h\n\n// \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u8ba2\u9605\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u6240\u6709VHAL\u8ba2\u9605\u3002\nclass SubscriptionManager final {\n  public:\n    // \u5b9a\u4e49ClientIdType\u4e3aconst AIBinder*\u7c7b\u578b\n    using ClientIdType = const AIBinder*;\n    using CallbackType =\n            std::shared_ptr&lt;aidl::android::hardware::automotive::vehicle::IVehicleCallback&gt;;\n\n    // \u6784\u9020\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2aIVehicleHardware\u6307\u9488\u53c2\u6570\n    explicit SubscriptionManager(IVehicleHardware* vehicleHardware);\n\n    // \u6839\u636e{@code SubscribeOptions}\u8ba2\u9605\u5c5e\u6027\u3002\u6ce8\u610f\uff0c\u6240\u6709\u9009\u9879\u5fc5\u987b\u5305\u542b\u975e\u7a7a\u7684areaIds\u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u8981\u8ba2\u9605\u7684\u6240\u6709\u533a\u57dfID\u3002\n    // \u56e0\u6b64\uff0c\u8fd9\u91cc\u7684\u9009\u9879\u4e0e\u4eceVHAL\u5ba2\u6237\u7aef\u4f20\u9012\u7684\u9009\u9879\u4e0d\u540c\u3002\n    // \u5982\u679c\u4efb\u4f55\u8ba2\u9605\u9009\u9879\u65e0\u6548\u6216\u4e00\u4e2a\u5c5e\u6027\u8ba2\u9605\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002\u5982\u679c\u6b64\u51fd\u6570\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u90e8\u5206\u5c5e\u6027\u53ef\u80fd\u5df2\u6210\u529f\u8ba2\u9605\u3002\n    // \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u8ba2\u9605\u5df2\u7ecf\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\u3002\n    // \u5982\u679c\u6240\u6709\u9009\u9879\u90fd\u6b63\u786e\u89e3\u6790\u5e76\u4e14\u6240\u6709\u5c5e\u6027\u90fd\u5df2\u8ba2\u9605\uff0c\u5219\u8fd4\u56deok\u3002\n    VhalResult&lt;void&gt; subscribe(\n            const CallbackType&amp; callback, // \u56de\u8c03\u51fd\u6570\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::SubscribeOptions&gt;&amp;\n                    options, // \u8ba2\u9605\u9009\u9879\n            bool isContinuousProperty); // \u662f\u5426\u662f\u8fde\u7eed\u5c5e\u6027\n\n    // \u53d6\u6d88\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u5c5e\u6027\u3002\n    // \u5982\u679c\u5ba2\u6237\u7aef\u4e4b\u524d\u672a\u8ba2\u9605\uff0c\u6216\u8005\u7ed9\u5b9a\u7684\u5c5e\u6027\u4e4b\u4e00\u672a\u8ba2\u9605\uff0c\u6216\u8005\u4e00\u4e2a\u5c5e\u6027\u53d6\u6d88\u8ba2\u9605\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002\n    // \u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\uff0c\u56e0\u4e3a\u53d6\u6d88\u8ba2\u9605\u5df2\u53d6\u6d88\u8ba2\u9605\u7684\u5c5e\u6027\u662f\u53ef\u4ee5\u7684\uff08\u5c06\u88ab\u5ffd\u7565\uff09\u3002\n    // \u5982\u679c\u5ba2\u6237\u7aef\u7684\u6240\u6709\u8bf7\u6c42\u5c5e\u6027\u90fd\u5df2\u53d6\u6d88\u8ba2\u9605\uff0c\u5219\u8fd4\u56deok\u3002\n    VhalResult&lt;void&gt; unsubscribe(ClientIdType client, const std::vector&lt;int32_t&gt;&amp; propIds);\n\n    // \u53d6\u6d88\u8ba2\u9605\u5ba2\u6237\u7aef\u7684\u6240\u6709\u5c5e\u6027\u3002\n    // \u5982\u679c\u5ba2\u6237\u7aef\u4e4b\u524d\u672a\u8ba2\u9605\uff0c\u6216\u8005\u5ba2\u6237\u7aef\u7684\u4e00\u4e2a\u5df2\u8ba2\u9605\u5c5e\u6027\u53d6\u6d88\u8ba2\u9605\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002\u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u91cd\u8bd5\u3002\n    // \u5982\u679c\u5ba2\u6237\u7aef\u7684\u6240\u6709\u5c5e\u6027\u90fd\u5df2\u53d6\u6d88\u8ba2\u9605\uff0c\u5219\u8fd4\u56deok\u3002\n    VhalResult&lt;void&gt; unsubscribe(ClientIdType client);\n\n    // \u5bf9\u4e8e\u66f4\u65b0\u7684\u5c5e\u6027\u5217\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u5c06\u8ba2\u9605\u66f4\u65b0\u7684\u5ba2\u6237\u7aef\u6620\u5c04\u5230\u66f4\u65b0\u503c\u5217\u8868\u7684\u6620\u5c04\u3002\n    // \u8fd9\u53ea\u4f1a\u8fd4\u56de\u5e94\u8be5\u901a\u77e5\u7ed9\u5b9a\u66f4\u65b0\u503c\u7684on-change\u5c5e\u6027\u5ba2\u6237\u7aef\u3002\n    std::unordered_map&lt;\n            CallbackType,\n            std::vector&lt;const aidl::android::hardware::automotive::vehicle::VehiclePropValue*&gt;&gt;\n    getSubscribedClients(\n            const std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropValue&gt;&amp;\n                    updatedValues);\n\n    // \u68c0\u67e5\u91c7\u6837\u7387\u662f\u5426\u6709\u6548\u3002\n    static bool checkSampleRateHz(float sampleRateHz);\n\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalonpropertychangeevent","title":"DefaultVehicleHal::onPropertyChangeEvent()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\n// \u8c03\u7528 mVehicleHardware \u7684 registerOnPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a PropertyChangeCallback \u5bf9\u8c61\nmVehicleHardware-&gt;registerOnPropertyChangeEvent(\n        std::make_unique&lt;IVehicleHardware::PropertyChangeCallback&gt;(\n                [subscriptionManagerCopy](std::vector&lt;VehiclePropValue&gt; updatedValues) { // PropertyChangeCallback \u7684\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\n                    onPropertyChangeEvent(subscriptionManagerCopy, updatedValues); // \u8c03\u7528 onPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165 subscriptionManagerCopy \u548c updatedValues\n                }));\n</code></pre> <p>\u5728 DefaultVehicleHal \u7684\u6784\u9020\u51fd\u6570\u91cc\u8c03\u7528 mVehicleHardware \u7684 registerOnPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a PropertyChangeCallback \u5bf9\u8c61\u3002PropertyChangeCallback \u7684\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\uff0c\u8c03\u7528 onPropertyChangeEvent \u51fd\u6570\uff0c\u4f20\u5165 subscriptionManagerCopy \u548c updatedValues \u3002</p> <p>mVehicleHardware \u5c31\u662f FakeVehicleHardware\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/include/FakeVehicleHardware.h\n\nusing PropertyChangeCallback = std::function&lt;void(\n        std::vector&lt;aidl::android::hardware::automotive::vehicle::VehiclePropValue&gt;)&gt;;\n\n// Only allowed to set once.\nstd::unique_ptr&lt;const PropertyChangeCallback&gt; mOnPropertyChangeCallback;\n\n\nhardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nvoid FakeVehicleHardware::registerOnPropertyChangeEvent(\n        std::unique_ptr&lt;const PropertyChangeCallback&gt; callback) {\n    if (mOnPropertyChangeCallback != nullptr) {\n        ALOGE(\"registerOnPropertyChangeEvent must only be called once\");\n        return;\n    }\n    mOnPropertyChangeCallback = std::move(callback);\n}\n</code></pre> <p>\u7ee7\u7eed\u5728 FakeVehicleHardware \u627e mOnPropertyChangeCallback  \u5728\u54ea\u91cc\u7528\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nvoid FakeVehicleHardware::onValueChangeCallback(const VehiclePropValue&amp; value) {\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u5c5e\u6027\u53d8\u5316\u56de\u8c03\u51fd\u6570\n    if (mOnPropertyChangeCallback == nullptr) {\n        return;\n    }\n\n    // \u521b\u5efa\u4e00\u4e2a\u5b58\u50a8 VehiclePropValue \u7c7b\u578b\u7684\u5411\u91cf updatedValues\n    std::vector&lt;VehiclePropValue&gt; updatedValues;\n    // \u5c06\u4f20\u5165\u7684 value \u6dfb\u52a0\u5230 updatedValues \u5411\u91cf\u4e2d\n    updatedValues.push_back(value);\n    // \u8c03\u7528 mOnPropertyChangeCallback \u51fd\u6570\uff0c\u5e76\u5c06 updatedValues \u5411\u91cf\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5b83\n    (*mOnPropertyChangeCallback)(std::move(updatedValues));\n}\n</code></pre> <p>\u524d\u9762\u5206\u6790\u5230 FakeVehicleHardware::init() \u7684\u65f6\u5019\uff0c\u6709\u8bf4\u5230\u8fc7\uff1a</p> <pre><code>// \u8bbe\u7f6e mServerSidePropStore \u7684\u503c\u6539\u53d8\u56de\u8c03\u51fd\u6570\nmServerSidePropStore-&gt;setOnValueChangeCallback(\n        [this](const VehiclePropValue&amp; value) { return onValueChangeCallback(value); });\n</code></pre> <p>mServerSidePropStore \u5c31\u662f VehiclePropertyStore \u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/VehiclePropertyStore.h\n\n// Callback when a property value has been updated or a new value added.\nusing OnValueChangeCallback = std::function&lt;void(\n        const aidl::android::hardware::automotive::vehicle::VehiclePropValue&amp;)&gt;;\n\nOnValueChangeCallback mOnValueChangeCallback GUARDED_BY(mLock);\n\n\n\nhardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/VehiclePropertyStore.cpp\n\nvoid VehiclePropertyStore::setOnValueChangeCallback(\n        const VehiclePropertyStore::OnValueChangeCallback&amp; callback) {\n    std::scoped_lock&lt;std::mutex&gt; g(mLock);\n\n    mOnValueChangeCallback = callback;\n}\n</code></pre> <p>\u7ee7\u7eed\u5728 VehiclePropertyStore \u627e mOnValueChangeCallback  \u5728\u54ea\u91cc\u7528\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/VehiclePropertyStore.cpp\n\nVhalResult&lt;void&gt; VehiclePropertyStore::writeValue(VehiclePropValuePool::RecyclableType propValue,\n                                                  bool updateStatus,\n                                                  VehiclePropertyStore::EventMode eventMode) {\n    ...\n\n    if ((eventMode == EventMode::ALWAYS || valueUpdated) &amp;&amp; mOnValueChangeCallback != nullptr) {\n        mOnValueChangeCallback(*(record-&gt;values[recId]));\n    }\n    return {};\n}\n</code></pre> <p>\u5f88\u6e05\u6670\u4e86\uff0c\u5c31\u662f\u5728\u5199\u5c5e\u6027\u7684\u65f6\u5019\u56de\u8c03\u56de\u53bb\u7684\u3002</p> <pre><code> VehiclePropertyStore::writeValue() ---&gt;\n     FakeVehicleHardware::onValueChangeCallback() ---&gt;\n         DefaultVehicleHal::onPropertyChangeEvent() \n</code></pre> <p>\u6211\u4eec\u8fd9\u8fb9\u6682\u4e14\u4e0d\u5206\u6790 DefaultVehicleHal::onPropertyChangeEvent() \u7684\u5177\u4f53\u529f\u80fd\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nvoid DefaultVehicleHal::onPropertyChangeEvent(\n        std::weak_ptr&lt;SubscriptionManager&gt; subscriptionManager,\n        const std::vector&lt;VehiclePropValue&gt;&amp; updatedValues) {\n    // subscriptionManager \u662f\u8ba2\u9605\u7ba1\u7406\u5668\u7684\u5f31\u5f15\u7528\n    // \u83b7\u53d6\u8ba2\u9605\u7ba1\u7406\u5668\u7684\u5f3a\u5f15\u7528\n    auto manager = subscriptionManager.lock();\n    if (manager == nullptr) {\n        ALOGW(\"the SubscriptionManager is destroyed, DefaultVehicleHal is ending\");\n        return;\n    }\n    // \u83b7\u53d6\u8ba2\u9605\u4e86\u66f4\u65b0\u5c5e\u6027\u503c\u7684\u5ba2\u6237\u7aef\n    auto updatedValuesByClients = manager-&gt;getSubscribedClients(updatedValues);\n    for (const auto&amp; [callback, valuePtrs] : updatedValuesByClients) {\n        std::vector&lt;VehiclePropValue&gt; values;\n        for (const VehiclePropValue* valuePtr : valuePtrs) {\n            values.push_back(*valuePtr);\n        }\n        // \u53d1\u9001\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7ed9\u5ba2\u6237\u7aef\n        SubscriptionClient::sendUpdatedValues(callback, std::move(values));\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#recurrenttimer","title":"RecurrentTimer","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/include/RecurrentTimer.h\n\n// \u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5faa\u73af\u5b9a\u65f6\u5668\u3002\nclass RecurrentTimer final {\n  public:\n    // \u7528\u4e8e\u5faa\u73af\u8c03\u7528\u7684\u51fd\u6570\u7684\u7c7b\u3002\n    using Callback = std::function&lt;void()&gt;;\n\n    // \u6ce8\u518c\u4e00\u4e2a\u5faa\u73af\u56de\u8c03\uff0c\u6307\u5b9a\u65f6\u95f4\u95f4\u9694\u3002\n    // \u91cd\u590d\u6ce8\u518c\u76f8\u540c\u7684\u56de\u8c03\u4f1a\u8986\u76d6\u4e4b\u524d\u63d0\u4f9b\u7684\u65f6\u95f4\u95f4\u9694\u3002\n    void registerTimerCallback(int64_t intervalInNano, std::shared_ptr&lt;Callback&gt; callback);\n\n    // \u53d6\u6d88\u4e4b\u524d\u6ce8\u518c\u7684\u5faa\u73af\u56de\u8c03\u3002\n    void unregisterTimerCallback(std::shared_ptr&lt;Callback&gt; callback);\n}\n</code></pre> <p>\u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003 hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/RecurrentTimer.cpp</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalcheckhealth","title":"DefaultVehicleHal::checkHealth()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\n// Only initialized once.\nstd::shared_ptr&lt;std::function&lt;void()&gt;&gt; mRecurrentAction;\n// RecurrentTimer is thread-safe.\nRecurrentTimer mRecurrentTimer;\n\n// heart beat event interval: 3s\nstatic constexpr int64_t HEART_BEAT_INTERVAL_IN_NANO = 3'000'000'000;\n\n\nhardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\n// \u6ce8\u518c\u5fc3\u8df3\u4e8b\u4ef6\nmRecurrentAction = std::make_shared&lt;std::function&lt;void()&gt;&gt;(\n        [vehicleHardwarePtr, subscriptionManagerCopy]() { // \u521b\u5efa\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a mRecurrentAction \u7684\u503c\n            checkHealth(vehicleHardwarePtr, subscriptionManagerCopy); // \u8c03\u7528 checkHealth \u51fd\u6570\uff0c\u4f20\u5165 vehicleHardwarePtr \u548c subscriptionManagerCopy\n        });\n// \u6ce8\u518c\u5b9a\u65f6\u5668\u56de\u8c03\u51fd\u6570\nmRecurrentTimer.registerTimerCallback(HEART_BEAT_INTERVAL_IN_NANO, mRecurrentAction);\n</code></pre> <p>\u7531\u524d\u9762\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u77e5\u9053\uff0c\u901a\u8fc7 RecurrentTimer \u8ba1\u65f6\u5668\u6ce8\u518c 3S \u7684\u5fc3\u8df3\u4e8b\u4ef6\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nvoid DefaultVehicleHal::checkHealth(IVehicleHardware* vehicleHardware,\n                                    std::weak_ptr&lt;SubscriptionManager&gt; subscriptionManager) {\n    // \u8c03\u7528\u8f66\u8f86\u786c\u4ef6\u63a5\u53e3\u7684checkHealth\u65b9\u6cd5\uff0c\u83b7\u53d6\u72b6\u6001\u7801\n    StatusCode status = vehicleHardware-&gt;checkHealth();    \n    if (status != StatusCode::OK) {\n        ALOGE(\"VHAL check health returns non-okay status\");\n        return;\n    }\n    // \u521b\u5efa\u4e00\u4e2a\u5305\u542b\u8f66\u8f86\u5c5e\u6027\u503c\u7684\u5411\u91cf\n    std::vector&lt;VehiclePropValue&gt; values = {{\n            .prop = toInt(VehicleProperty::VHAL_HEARTBEAT),\n            .areaId = 0,\n            .status = VehiclePropertyStatus::AVAILABLE,\n            .value.int64Values = {uptimeMillis()},\n    }};\n    // \u8c03\u7528onPropertyChangeEvent\u65b9\u6cd5\uff0c\u4f20\u5165\u8ba2\u9605\u7ba1\u7406\u5668\u548c\u5c5e\u6027\u503c\u5411\u91cf\n    onPropertyChangeEvent(subscriptionManager, values);\n    return;\n}\n</code></pre> <p>vehicleHardware \u5c31\u662f FakeVehicleHardware\u3002 \u6709\u8ddf\u524d\u9762\u7684\u4e00\u6837\u8c03\u5230\u4e86 onPropertyChangeEvent() \u51fd\u6570\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehal_1","title":"VehicleHal \u83b7\u53d6\uff08\u8bbe\u7f6e\uff09\u5c5e\u6027","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscribe","title":"subscribe \u8ba2\u9605\u5c5e\u6027","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carserviceoncreate","title":"CarService.onCreate()","text":"<pre><code>packages/services/Car/service-builtin/src/com/android/car/CarService.java\n\n/** Proxy service for CarServciceImpl */\npublic class CarService extends ServiceProxy {\n\n    ...\n\n    public CarService() {\n        super(UpdatablePackageDependency.CAR_SERVICE_IMPL_CLASS);\n        ...\n    }\n\n    ...\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carserviceoncreate_1","title":"CarService.onCreate()","text":"<pre><code>packages/services/Car/service-builtin/src/com/android/car/ServiceProxy.java\n\npublic class ServiceProxy extends Service {\n\n    private final String mRealServiceClassName;\n    private ProxiedService mRealService;\n\n    public ServiceProxy(String realServiceClassName) {\n        mRealServiceClassName = realServiceClassName;\n    }\n\n    @Override\n    public void onCreate() {\n        init();\n        mRealService.onCreate();\n    }\n\n    private void init() {\n        mUpdatablePackageContext = UpdatablePackageContext.create(this);\n        try {\n            mRealServiceClass = mUpdatablePackageContext.getClassLoader().loadClass(\n                    mRealServiceClassName);\n            // Use default constructor always\n            Constructor constructor = mRealServiceClass.getConstructor();\n            mRealService = (ProxiedService) constructor.newInstance();\n            mRealService.doAttachBaseContext(mUpdatablePackageContext);\n            mRealService.setBuiltinPackageContext(this);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Cannot load class:\" + mRealServiceClassName, e);\n        }\n    }\n}\n</code></pre> <p>mRealServiceClassName \u5c31\u662f UpdatablePackageDependency.CAR_SERVICE_IMPL_CLASS \uff0c\u4e5f\u5c31\u662f \"com.android.car.CarServiceImpl\" \u3002</p> <p>\u6240\u4ee5 mRealService \u5176\u5b9e\u4e5f\u5c31\u662f CarServiceImpl\uff1b\u90a3\u4e48 mRealService.onCreate() \u5c31\u662f  CarServiceImpl.onCreate()</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carserviceimploncreate","title":"CarServiceImpl.onCreate()","text":"<pre><code>packages/services/Car/service/src/com/android/car/CarServiceImpl.java\n\n@Keep\npublic class CarServiceImpl extends ProxiedService {\n\n    @Override\n    public void onCreate() {\n        LimitedTimingsTraceLog initTiming = new LimitedTimingsTraceLog(CAR_SERVICE_INIT_TIMING_TAG,\n                TraceHelper.TRACE_TAG_CAR_SERVICE, CAR_SERVICE_INIT_TIMING_MIN_DURATION_MS);\n        initTiming.traceBegin(\"CarService.onCreate\");\n\n        initTiming.traceBegin(\"getVehicle\");\n        mVehicle = VehicleStub.newVehicleStub();\n        initTiming.traceEnd(); // \"getVehicle\"\n\n        EventLogHelper.writeCarServiceCreate(/* hasVhal= */ mVehicle.isValid());\n\n        mVehicleInterfaceName = mVehicle.getInterfaceDescriptor();\n\n        Slogf.i(CarLog.TAG_SERVICE, \"Connected to \" + mVehicleInterfaceName);\n        EventLogHelper.writeCarServiceConnected(mVehicleInterfaceName);\n\n        mICarImpl = new ICarImpl(this,\n                getBuiltinPackageContext(),\n                mVehicle,\n                SystemInterface.Builder.defaultSystemInterface(this).build(),\n                mVehicleInterfaceName);\n        mICarImpl.init();\n\n        mVehicle.linkToDeath(mVehicleDeathRecipient);\n\n        ServiceManagerHelper.addService(\"car_service\", mICarImpl);\n        SystemPropertiesHelper.set(\"boot.car_service_created\", \"1\");\n\n        super.onCreate();\n\n        initTiming.traceEnd(); // \"CarService.onCreate\"\n    }\n}\n</code></pre> <p>CarServiceImpl.onCreate() \u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\uff1a - \u901a\u8fc7 VehicleStub \u83b7\u53d6\u5230 IVehicle - \u521b\u5efa SystemInterface \uff0c\u5b9e\u73b0\u4e86\u591a\u4e2a\u63a5\u53e3(ActivityManagerInterface, DisplayInterface, IOInterface, StorageMonitoringInterface, SystemStateInterface, TimeInterface, WakeLockInterface)\u3002 - \u521b\u5efa ICarImpl \uff0c\u5e76\u628a mVehicle \u4f20\u8fdb\u53bb\uff0c\u4e5f\u5c31\u662f IVehicle \u3002 - ICarImpl.init()</p> <p>\u4e0b\u9762\u6211\u4eec\u5148\u6765\u5206\u6790 VehicleStub.newVehicleStub() \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclestubnewvehiclestub","title":"VehicleStub.newVehicleStub()","text":"<pre><code>packages/services/Car/service/src/com/android/car/VehicleStub.java\n\n/**\n * \u521b\u5efa\u4e00\u4e2a\u65b0\u7684VehicleStub\u4ee5\u8fde\u63a5\u5230Vehicle HAL\u3002\n *\n * \u6839\u636e\u53ef\u7528\u7684\u540e\u7aef\uff08AIDL\u6216HIDL\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684VehicleStub\u4ee5\u8fde\u63a5\u5230Vehicle HAL\u3002\n * \u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684vehicle HAL\uff0c\u5219\u6b64\u51fd\u6570\u5c06\u629b\u51faIllegalStateException\u3002\n *\n * @return \u7528\u4e8e\u8fde\u63a5\u5230Vehicle HAL\u7684vehicle stub\u3002\n */\npublic static VehicleStub newVehicleStub() throws IllegalStateException {\n    VehicleStub stub = new AidlVehicleStub();\n    if (stub.isValid()) {\n        if ((BuildHelper.isUserDebugBuild() || BuildHelper.isEngBuild())\n                &amp;&amp; FakeVehicleStub.doesEnableFileExist()) {\n            try {\n                return new FakeVehicleStub(stub);\n            } catch (Exception e) {\n                Slogf.e(CarLog.TAG_SERVICE, e, \"Failed to create FakeVehicleStub. \"\n                        + \"Fallback to using real VehicleStub.\");\n            }\n        }\n        return stub;\n    }\n\n    Slogf.i(CarLog.TAG_SERVICE, \"No AIDL vehicle HAL found, fall back to HIDL version\");\n\n    stub = new HidlVehicleStub();\n\n    if (!stub.isValid()) {\n        throw new IllegalStateException(\"Vehicle HAL service is not available.\");\n    }\n\n    return stub;\n}\n</code></pre> <p>\u6839\u636e\u53ef\u7528\u7684\u540e\u7aef\uff08AIDL\u6216HIDL\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684VehicleStub\u4ee5\u8fde\u63a5\u5230Vehicle HAL\u3002</p> <p>\u5c5e\u6027 \"ro.build.type\" \u662f userdebug \u6216\u8005\u662f eng \uff1b\u5e76\u4e14 /data/system/car/fake_vhal_config/ENABLE \u5b58\u5728 \u5219\u4f7f\u7528 FakeVehicleStub \u53c2\u8003 packages/services/Car/service/src/com/android/car/hal/fakevhal/README.md</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestub","title":"AidlVehicleStub","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nfinal class AidlVehicleStub extends VehicleStub {\n\n    private static final String AIDL_VHAL_SERVICE =\n                \"android.hardware.automotive.vehicle.IVehicle/default\";\n\n    AidlVehicleStub() {\n        this(getAidlVehicle());\n    }\n\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle) {\n        this(aidlVehicle,\n                CarServiceUtils.getHandlerThread(AidlVehicleStub.class.getSimpleName()));\n    }\n\n    @VisibleForTesting\n    AidlVehicleStub(IVehicle aidlVehicle, HandlerThread handlerThread) {\n        mAidlVehicle = aidlVehicle;\n        mPropValueBuilder = new HalPropValueBuilder(/*isAidl=*/true);\n        mHandlerThread = handlerThread;\n        mHandler = new Handler(mHandlerThread.getLooper());\n        mGetSetValuesCallback = new GetSetValuesCallback();\n        mPendingAsyncRequestPool = new PendingAsyncRequestPool(mHandler.getLooper());\n    }\n\n\n    @Nullable\n    private static IVehicle getAidlVehicle() {\n        try {\n            return IVehicle.Stub.asInterface(\n                    ServiceManagerHelper.waitForDeclaredService(AIDL_VHAL_SERVICE));\n        } catch (RuntimeException e) {\n            Slogf.w(TAG, \"Failed to get \\\"\" + AIDL_VHAL_SERVICE + \"\\\" service\", e);\n        }\n        return null;\n    }\n\n}\n\n\n\npackages/services/Car/car-builtin-lib/src/android/car/builtin/os/ServiceManagerHelper.java\n\n@SystemApi(client = SystemApi.Client.MODULE_LIBRARIES)\npublic final class ServiceManagerHelper {\n\n    /** Check {@link ServiceManager#waitForDeclaredService(String)} */\n    @Nullable\n    @AddedIn(PlatformVersion.TIRAMISU_0)\n    public static IBinder waitForDeclaredService(@NonNull String name) {\n        return ServiceManager.waitForDeclaredService(name);\n    }\n\n}\n</code></pre> <ul> <li>\u901a\u8fc7 ServiceManager.waitForDeclaredService() \u83b7\u53d6\u5230\u670d\u52a1\u540d\u4e3a\uff1a\"android.hardware.automotive.vehicle.IVehicle/default\" \u7684\u4ee3\u7406\u5bf9\u8c61\u3002</li> <li>\u521b\u5efa\u7ebf\u7a0b\uff0c\u5e76\u4f7f\u7528\u7ebf\u7a0b\u5b89\u5168\u5904\u7406\u5f02\u6b65\u8bf7\u6c42\u6c60\u3002</li> <li>GetSetValuesCallback \u7ee7\u627f IVehicleCallback \uff0c\u7528\u6765\u76d1\u542c hal \u56de\u8c03\u4e8b\u4ef6\u3002</li> <li>\u521b\u5efa HalPropValueBuilder \uff0c\u5e76\u6807\u8bb0\u4e3a aidl</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#hidlvehiclestub","title":"HidlVehicleStub","text":"<pre><code>packages/services/Car/service/src/com/android/car/HidlVehicleStub.java\n\nfinal class HidlVehicleStub extends VehicleStub {\n\n    HidlVehicleStub() {\n        this(getHidlVehicle());\n    }\n\n    @VisibleForTesting\n    HidlVehicleStub(IVehicle hidlVehicle) {\n        mHidlVehicle = hidlVehicle;\n        mPropValueBuilder = new HalPropValueBuilder(/*isAidl=*/false);\n    }\n\n    @Nullable\n    private static IVehicle getHidlVehicle() {\n        String instanceName = SystemProperties.get(\"ro.vehicle.hal\", \"default\");\n\n        try {\n            return IVehicle.getService(instanceName);\n        } catch (RemoteException e) {\n            Slogf.e(TAG, e, \"Failed to get IVehicle/\" + instanceName + \" service\");\n        } catch (NoSuchElementException e) {\n            Slogf.e(TAG, \"IVehicle/\" + instanceName + \" service not registered yet\");\n        }\n        return null;\n    }\n}\n</code></pre> <p>\u901a\u8fc7 IVehicle.getService() \u56de\u53bb\u5230 hidl \u670d\u52a1\u7684\u4ee3\u7406\u5bf9\u8c61\u3002 \u73b0\u5728\u6211\u4eec\u8fd4\u56de\u5230 CarServiceImpl.onCreate() \u4e2d\uff0c\u62ff\u5230 IVehicle \u540e\uff0c\u63a5\u7740\u521b\u5efa ICarImpl\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#icarimpl","title":"ICarImpl\u6784\u9020\u51fd\u6570","text":"<pre><code>packages/services/Car/service/src/com/android/car/ICarImpl.java\n\npublic class ICarImpl extends ICar.Stub {\n\n    public ICarImpl(Context serviceContext, Context builtinContext, VehicleStub vehicle,\n            SystemInterface systemInterface, String vehicleInterfaceName) {\n        this(serviceContext, builtinContext, vehicle, systemInterface, vehicleInterfaceName,\n                /* carUserService= */ null, /* carWatchdogService= */ null,\n                /* carPerformanceService= */ null, /* garageModeService= */ null,\n                /* powerPolicyDaemon= */ null, /* carTelemetryService= */ null,\n                /* carRemoteAccessService= */ null, /* doPriorityInitInConstruction= */ true);\n    }\n\n    @VisibleForTesting\n    ICarImpl(Context serviceContext, @Nullable Context builtinContext, VehicleStub vehicle,\n            SystemInterface systemInterface, String vehicleInterfaceName,\n            @Nullable CarUserService carUserService,\n            @Nullable CarWatchdogService carWatchdogService,\n            @Nullable CarPerformanceService carPerformanceService,\n            @Nullable GarageModeService garageModeService,\n            @Nullable ICarPowerPolicySystemNotification powerPolicyDaemon,\n            @Nullable CarTelemetryService carTelemetryService,\n            @Nullable CarRemoteAccessService carRemoteAccessService,\n            boolean doPriorityInitInConstruction) {\n        ...\n\n        mContext = serviceContext;\n        if (builtinContext == null) {\n            mCarServiceBuiltinPackageContext = serviceContext;\n        } else {\n            mCarServiceBuiltinPackageContext = builtinContext;\n        }\n\n        mCarServiceHelperWrapper = CarServiceHelperWrapper.create();\n\n        // \u521b\u5efa\u4e00\u4e2a\u5bb9\u91cf\u4e3a40\u7684ArrayList\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u7684 CarSystemService\n        List&lt;CarSystemService&gt; allServices = new ArrayList&lt;&gt;(40);\n        // \u6784\u9020CarOemProxyService\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230allServices\u4e2d\n        mCarOemService = constructWithTrace(t, CarOemProxyService.class,\n                () -&gt; new CarOemProxyService(serviceContext), allServices);\n\n        mSystemInterface = systemInterface;\n        CarLocalServices.addService(SystemInterface.class, mSystemInterface);\n\n        // \u6784\u9020VehicleHal\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230allServices\u4e2d\n        mHal = constructWithTrace(t, VehicleHal.class,\n                () -&gt; new VehicleHal(serviceContext, vehicle), allServices);\n\n        ...\n\n        if (mDoPriorityInitInConstruction) {\n            Slogf.i(TAG, \"VHAL Priority Init Enabled\");\n            Slogf.i(TAG, \"Car User Service Priority Init Enabled\");\n            priorityInit();\n        }\n\n        ...\n\n        // \u6784\u9020 mCarPowerManagementService \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230allServices\n\n        mCarPowerManagementService = constructWithTrace(\n                    t, CarPowerManagementService.class,\n                    () -&gt; new CarPowerManagementService(mContext, mHal.getPowerHal(),\n                            systemInterface, mCarUserService, powerPolicyDaemon), allServices);\n\n        ...\n\n        mAllServices = allServices.toArray(new CarSystemService[allServices.size()]);\n\n            mICarSystemServerClientImpl = new ICarSystemServerClientImpl();\n\n            t.traceEnd(); // \"ICarImpl.constructor\"\n    }\n\n}\n\n/**\n * \u6784\u9020\u5e26\u6709\u8ddf\u8e2a\u65e5\u5fd7\u7684CarSystemService\u5bf9\u8c61\n * @param t \u8ddf\u8e2a\u65e5\u5fd7\u5bf9\u8c61\n * @param cls CarSystemService\u7684Class\u5bf9\u8c61\n * @param callable \u7528\u4e8e\u6784\u9020CarSystemService\u5bf9\u8c61\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\n * @param allServices \u6240\u6709CarSystemService\u5bf9\u8c61\u7684\u5217\u8868\n * @param &lt;T&gt; CarSystemService\u7684\u7c7b\u578b\u53c2\u6570\n * @return \u6784\u9020\u5b8c\u6210\u7684CarSystemService\u5bf9\u8c61\n */\nprivate &lt;T extends CarSystemService&gt; T constructWithTrace(LimitedTimingsTraceLog t,\n        Class&lt;T&gt; cls, Callable&lt;T&gt; callable, List&lt;CarSystemService&gt; allServices) {\n    t.traceBegin(cls.getSimpleName()); // \u5f00\u59cb\u8ddf\u8e2a\u65e5\u5fd7\n    T constructed;\n    try {\n        constructed = callable.call(); // \u8c03\u7528\u53ef\u8c03\u7528\u5bf9\u8c61\u6784\u9020CarSystemService\u5bf9\u8c61\n        CarLocalServices.addService(cls, constructed); // \u5c06\u6784\u9020\u7684CarSystemService\u5bf9\u8c61\u6dfb\u52a0\u5230CarLocalServices\u4e2d\n    } catch (Exception e) {\n        throw new RuntimeException(\"Crash while constructing:\" + cls.getSimpleName(), e); // \u6784\u9020\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\n    } finally {\n        t.traceEnd(); // \u7ed3\u675f\u8ddf\u8e2a\u65e5\u5fd7\n    }\n    allServices.add(constructed); // \u5c06\u6784\u9020\u7684CarSystemService\u5bf9\u8c61\u6dfb\u52a0\u5230\u6240\u6709\u670d\u52a1\u5217\u8868\u4e2d\n    return constructed; // \u8fd4\u56de\u6784\u9020\u5b8c\u6210\u7684CarSystemService\u5bf9\u8c61\n}\n\n\n/* package */ void priorityInit() {\n    mHal.priorityInit();\n    mCarUserService.priorityInit();\n}\n</code></pre> <p>ICarImpl\u6784\u9020\u51fd\u6570\u505a\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u4e24\u4ef6\u4e8b\uff1a - \u6784\u9020 VehicleHal \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 mAllServices \u4e2d\u3002 - \u521b\u5efa\u5404\u4e2a java Service\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 mAllServices \u4e2d\u3002</p> <p>\u6211\u4eec\u4ece constructWithTrace() \u51fd\u6570\u91cc\u770b\u5230\u4e00\u4e2a\u7ec6\u8282\uff0c\u6240\u6709\u52a0\u5230 mAllServices \u7684\u670d\u52a1\u90fd\u52a0\u5230 CarLocalServices \u4e2d\u4e86\u3002 \u719f\u6089 framework \u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0cframework \u91cc\u7684 LocalServices \u662f\u4ec0\u4e48\uff0c\u600e\u4e48\u7528\u3002\u5176\u5b9e CarLocalServices \u5c31\u662f\u628a LocalServices \u7684\u4ee3\u7801 copy \u8fc7\u6765\u4f7f\u7528\u7684\u3002 \u597d\u4e86\uff0c\u6709\u4e86 CarLocalServices \u4e4b\u540e\uff0c\u540e\u9762\u5728\u5404\u4e2a service \u4e4b\u95f4\u8c03\u7528\u65b9\u4fbf\u591a\u4e86\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehal_2","title":"VehicleHal\u6784\u9020\u51fd\u6570","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic VehicleHal(Context context, VehicleStub vehicle) {\n    this(context, /* powerHal= */ null, /* propertyHal= */ null,\n            /* inputHal= */ null, /* vmsHal= */ null, /* userHal= */ null,\n            /* diagnosticHal= */ null, /* clusterHalService= */ null,\n            /* timeHalService= */ null,\n            CarServiceUtils.getHandlerThread(VehicleHal.class.getSimpleName()), vehicle);\n}\n\n/**\n * Constructs a new {@link VehicleHal} object given the services passed as parameters.\n * This method must be used by tests only.\n */\n@VisibleForTesting\nVehicleHal(Context context,\n        PowerHalService powerHal,\n        PropertyHalService propertyHal,\n        InputHalService inputHal,\n        VmsHalService vmsHal,\n        UserHalService userHal,\n        DiagnosticHalService diagnosticHal,\n        ClusterHalService clusterHalService,\n        TimeHalService timeHalService,\n        HandlerThread handlerThread,\n        VehicleStub vehicle) {\n    // Must be initialized before HalService so that HalService could use this.\n    mPropValueBuilder = vehicle.getHalPropValueBuilder();\n    mHandlerThread = handlerThread;\n    mHandler = new Handler(mHandlerThread.getLooper());\n    mPowerHal = powerHal != null ? powerHal : new PowerHalService(context, this);\n    mPropertyHal = propertyHal != null ? propertyHal : new PropertyHalService(this);\n    mInputHal = inputHal != null ? inputHal : new InputHalService(this);\n    mVmsHal = vmsHal != null ? vmsHal : new VmsHalService(context, this);\n    mUserHal = userHal != null ? userHal :  new UserHalService(this);\n    mDiagnosticHal = diagnosticHal != null ? diagnosticHal : new DiagnosticHalService(this);\n    mClusterHalService = clusterHalService != null\n            ? clusterHalService : new ClusterHalService(this);\n    mEvsHal = new EvsHalService(this);\n    mTimeHalService = timeHalService != null\n            ? timeHalService : new TimeHalService(context, this);\n    mAllServices = List.of(\n            mPowerHal,\n            mInputHal,\n            mDiagnosticHal,\n            mVmsHal,\n            mUserHal,\n            mClusterHalService,\n            mEvsHal,\n            mTimeHalService,\n            // mPropertyHal must be the last so that on init/release it can be used for all\n            // other HAL services properties.\n            mPropertyHal);\n    mVehicleStub = vehicle;\n    mSubscriptionClient = vehicle.newSubscriptionClient(this);\n}\n</code></pre> <p>VehicleHal\u6784\u9020\u51fd\u6570\u91cc new\u5404\u4e2aHalService\uff08\u7ee7\u627f\u4e8e HalServiceBase \uff09\uff0c\u5e76\u4e14\u4fdd\u5b58\u5230 mAllServices \u6210\u5458\u53d8\u91cf\u4e2d\u3002 \u901a\u8fc7 VehicleStub \u83b7\u53d6\u5230 SubscriptionClient\uff0c\u4e3a\u540e\u9762\u7684\u6ce8\u518c\u76d1\u542c\u4e8b\u4ef6\u505a\u51c6\u5907\u3002</p> <p>\u5728 ICarImpl\u6784\u9020\u51fd\u6570\u4e2d\u8fd8\u8c03\u7528 mHal.priorityInit() \u521d\u59cb\u5316\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalpriorityinit","title":"VehicleHal.priorityInit()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void priorityInit() {\n    fetchAllPropConfigs();\n\n    // PropertyHalService will take most properties, so make it big enough.\n    ArrayMap&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; configsForAllServices;\n    synchronized (mLock) {\n        configsForAllServices = new ArrayMap&lt;&gt;(mAllServices.size());\n        for (int i = 0; i &lt; mAllServices.size(); i++) {\n            ArrayList&lt;HalPropConfig&gt; configsForService = new ArrayList();\n            HalServiceBase service = mAllServices.get(i);\n            configsForAllServices.put(service, configsForService);\n            int[] supportedProps = service.getAllSupportedProperties();\n            if (supportedProps.length == 0) {\n                for (int j = 0; j &lt; mAllProperties.size(); j++) {\n                    Integer propId = mAllProperties.keyAt(j);\n                    if (service.isSupportedProperty(propId)) {\n                        HalPropConfig config = mAllProperties.get(propId);\n                        mPropertyHandlers.append(propId, service);\n                        configsForService.add(config);\n                    }\n                }\n            } else {\n                for (int prop : supportedProps) {\n                    HalPropConfig config = mAllProperties.get(prop);\n                    if (config == null) {\n                        continue;\n                    }\n                    mPropertyHandlers.append(prop, service);\n                    configsForService.add(config);\n                }\n            }\n        }\n    }\n\n    for (Map.Entry&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; entry\n            : configsForAllServices.entrySet()) {\n        HalServiceBase service = entry.getKey();\n        ArrayList&lt;HalPropConfig&gt; configsForService = entry.getValue();\n        service.takeProperties(configsForService);\n        service.init();\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u4e3b\u8981\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a - \u83b7\u53d6\u6240\u6709\u7684\u5c5e\u6027\u3002 - \u7ed9\u6bcf\u4e2a\u670d\u52a1\u66f4\u65b0\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u5e76\u521d\u59cb\u5316\u670d\u52a1\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getallpropconfigs","title":"getAllPropConfigs()","text":"<p>mVehicleStub.getAllPropConfigs() \u4ece Vehicle HAL(IVehicle.aidl) \u83b7\u53d6\u6240\u6709\u7684\u5c5e\u6027\u3002 \u8c03\u7528\u5230 DefaultVehicleHal::getAllPropConfigs() \u51fd\u6570\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\nprivate void fetchAllPropConfigs() {\n    synchronized (mLock) {\n        if (mAllProperties.size() != 0) { // already set\n            Slogf.i(CarLog.TAG_HAL, \"fetchAllPropConfigs already fetched\");\n            return;\n        }\n    }\n    HalPropConfig[] configs;\n    try {\n        configs = mVehicleStub.getAllPropConfigs();\n        if (configs == null || configs.length == 0) {\n            Slogf.e(CarLog.TAG_HAL, \"getAllPropConfigs returned empty configs\");\n            return;\n        }\n    } catch (RemoteException | ServiceSpecificException e) {\n        throw new RuntimeException(\"Unable to retrieve vehicle property configuration\", e);\n    }\n\n    synchronized (mLock) {\n        // Create map of all properties\n        for (HalPropConfig p : configs) {\n            if (DBG) {\n                Slogf.i(CarLog.TAG_HAL, \"Add config for prop: 0x%x config: %s\", p.getPropId(),\n                        p.toString());\n            }\n            mAllProperties.put(p.getPropId(), p);\n        }\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#halservicebaseinti","title":"HalServiceBase.inti()","text":"<p>\u5728 init() \u4e2d\u8c03\u7528 fetchAllPropConfigs() \u83b7\u53d6\u5230\u6240\u6709\u7684\u5c5e\u6027\uff0c\u5e76\u4fdd\u5b58\u5728 mAllProperties \u53d8\u91cf\u4e2d\u3002 \u63a5\u7740\u8fd8\u6709\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\u662f\uff0c\u7ed9\u6bcf\u4e2a\u670d\u52a1\u66f4\u65b0\u5bf9\u5e94\u7684\u5c5e\u6027\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void priorityInit() {\n    fetchAllPropConfigs();\n\n    // PropertyHalService will take most properties, so make it big enough.\n    ArrayMap&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; configsForAllServices;\n    synchronized (mLock) {\n        configsForAllServices = new ArrayMap&lt;&gt;(mAllServices.size());\n        for (int i = 0; i &lt; mAllServices.size(); i++) {\n            ArrayList&lt;HalPropConfig&gt; configsForService = new ArrayList();\n            HalServiceBase service = mAllServices.get(i);\n            configsForAllServices.put(service, configsForService);\n            int[] supportedProps = service.getAllSupportedProperties();\n            if (supportedProps.length == 0) {\n                for (int j = 0; j &lt; mAllProperties.size(); j++) {\n                    Integer propId = mAllProperties.keyAt(j);\n                    if (service.isSupportedProperty(propId)) {\n                        HalPropConfig config = mAllProperties.get(propId);\n                        mPropertyHandlers.append(propId, service);\n                        configsForService.add(config);\n                    }\n                }\n            } else {\n                for (int prop : supportedProps) {\n                    HalPropConfig config = mAllProperties.get(prop);\n                    if (config == null) {\n                        continue;\n                    }\n                    mPropertyHandlers.append(prop, service);\n                    configsForService.add(config);\n                }\n            }\n        }\n    }\n\n    for (Map.Entry&lt;HalServiceBase, ArrayList&lt;HalPropConfig&gt;&gt; entry\n            : configsForAllServices.entrySet()) {\n        HalServiceBase service = entry.getKey();\n        ArrayList&lt;HalPropConfig&gt; configsForService = entry.getValue();\n        service.takeProperties(configsForService);\n        service.init();\n    }\n}\n</code></pre> <p>\u6839\u636e\u7b7e\u540d\u7684\u6784\u9020\u51fd\u6570\uff0c\u6211\u4eec\u77e5\u9053 mAllServices \u5c31\u662f\u5404\u4e2a HalServiceBase\uff0c\u8fd9\u91cc\u6211\u4eec\u62ff PowerHalService \u4e3e\u4f8b\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#powerhalservicegetallsupportedproperties","title":"PowerHalService.getAllSupportedProperties()","text":"<p>PowerHalService\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u662f\uff1a - AP_POWER_STATE_REQ - AP_POWER_STATE_REPORT - DISPLAY_BRIGHTNESS - PER_DISPLAY_BRIGHTNESS - VEHICLE_IN_USE</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {    \n\n    private static final int[] SUPPORTED_PROPERTIES = new int[]{\n            AP_POWER_STATE_REQ,\n            AP_POWER_STATE_REPORT,\n            DISPLAY_BRIGHTNESS,\n            PER_DISPLAY_BRIGHTNESS,\n            VEHICLE_IN_USE,\n    };\n\n    @Override\n    public int[] getAllSupportedProperties() {\n        return SUPPORTED_PROPERTIES;\n    }\n\n}\n</code></pre> <p>\u5728\u56de\u5230\u524d\u9762\u7684 priorityInit() \u51fd\u6570\uff0c\u4ece PowerHalService.getAllSupportedProperties() \u662f\u6709\u83b7\u53d6\u5230\u652f\u6301\u5c5e\u6027\u7684\uff1b\u6240\u4ee5\u63a5\u7740\u4ece mAllProperties \u53bb\u5bfb\u627e\u662f\u5426\u6709\u914d\u7f6e\uff0c\u6700\u540e\u8c03\u7528 PowerHalService.takeProperties(configsForService) \u66f4\u65b0\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#powerhalservicetakeproperties","title":"PowerHalService.takeProperties()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {\n\n    @GuardedBy(\"mLock\")\n    private final SparseArray&lt;HalPropConfig&gt; mProperties = new SparseArray&lt;&gt;();\n\n    @Override\n    public void takeProperties(Collection&lt;HalPropConfig&gt; properties) {\n        if (properties.isEmpty()) {\n            return;\n        }\n        synchronized (mLock) {\n            for (HalPropConfig config : properties) {\n                mProperties.put(config.getPropId(), config);\n            }\n        }\n    }\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#powerhalserviceinit","title":"PowerHalService.init()","text":"<p>\u8c03\u7528 mHal.subscribeProperty(this, config.getPropId()); \u8ba2\u9605\u5c5e\u6027\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\npublic class PowerHalService extends HalServiceBase {    \n\n    @Override\n    public void init() {\n        synchronized (mLock) {\n            for (int i = 0; i &lt; mProperties.size(); i++) {\n                HalPropConfig config = mProperties.valueAt(i);\n                if (VehicleHal.isPropertySubscribable(config)) {\n                    mHal.subscribeProperty(this, config.getPropId());\n                }\n            }\n            HalPropConfig brightnessProperty = mProperties.get(PER_DISPLAY_BRIGHTNESS);\n            mPerDisplayBrightnessSupported = brightnessProperty != null;\n            if (brightnessProperty == null) {\n                brightnessProperty = mProperties.get(DISPLAY_BRIGHTNESS);\n            }\n            if (brightnessProperty != null) {\n                HalAreaConfig[] areaConfigs = brightnessProperty.getAreaConfigs();\n                mMaxDisplayBrightness = areaConfigs.length &gt; 0\n                        ? areaConfigs[0].getMaxInt32Value() : 0;\n                if (mMaxDisplayBrightness &lt;= 0) {\n                    Slogf.w(CarLog.TAG_POWER, \"Max display brightness from vehicle HAL is invalid:\"\n                            + mMaxDisplayBrightness);\n                    mMaxDisplayBrightness = 1;\n                }\n            }\n        }\n    }\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalsubscribeproperty","title":"VehicleHal.subscribeProperty()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\n/**\n * Subscribes given properties with sampling rate defaults to 0 and no special flags provided.\n *\n * @throws IllegalArgumentException thrown if property is not supported by VHAL\n * @see #subscribeProperty(HalServiceBase, int, float)\n */\npublic void subscribeProperty(HalServiceBase service, int property)\n        throws IllegalArgumentException {\n    subscribeProperty(service, property, /* samplingRateHz= */ 0f);\n}\n\n/**\n * Subscribe given property. Only Hal service owning the property can subscribe it.\n *\n * @param service HalService that owns this property\n * @param property property id (VehicleProperty)\n * @param samplingRateHz sampling rate in Hz for continuous properties\n * @throws IllegalArgumentException thrown if property is not supported by VHAL\n */\npublic void subscribeProperty(HalServiceBase service, int property, float samplingRateHz)\n        throws IllegalArgumentException {\n    subscribeProperty(service, property, samplingRateHz, new int[0]);\n}\n\n/**\n * Subscribe given property. Only Hal service owning the property can subscribe it.\n *\n * @param service HalService that owns this property\n * @param property property id (VehicleProperty)\n * @param samplingRateHz sampling rate in Hz for continuous properties\n * @param areaIds The areaId that is being subscribed to, if empty subscribe to all areas\n * @throws IllegalArgumentException thrown if property is not supported by VHAL\n */\npublic void subscribeProperty(HalServiceBase service, int property, float samplingRateHz,\n        int[] areaIds) {\n    if (DBG) {\n        Slogf.d(CarLog.TAG_HAL, \"subscribeProperty, service, areaIds, SamplingRateHz:\"\n                + toCarPropertyLog(property) + \", \" + service + \", \"\n                + CarServiceUtils.asList(areaIds) + \", \" + samplingRateHz);\n    }\n    HalPropConfig config;\n    synchronized (mLock) {\n        config = mAllProperties.get(property);\n    }\n\n    if (config == null) {\n        throw new IllegalArgumentException(\n                String.format(\"subscribe error: config is null for property 0x%x\", property));\n    } else if (isPropertySubscribable(config)) {\n        if (areaIds.length == 0) {\n            areaIds = getAllAreaIdsFromPropertyId(config);\n        }\n        SubscribeOptions opts = new SubscribeOptions();\n        opts.propId = property;\n        opts.sampleRate = samplingRateHz;\n        int[] filteredAreaIds = checkAlreadySubscribed(property, areaIds, samplingRateHz);\n        opts.areaIds = filteredAreaIds;\n        if (opts.areaIds.length == 0) {\n            Slogf.w(CarLog.TAG_HAL, \"property: \" + VehiclePropertyIds.toString(property)\n                    + \" is already subscribed at rate: \" + samplingRateHz + \" hz\");\n            return;\n        }\n        synchronized (mLock) {\n            assertServiceOwnerLocked(service, property);\n            for (int i = 0; i &lt; filteredAreaIds.length; i++) {\n                mUpdateRateByPropIdAreadId.put(Pair.create(property,\n                                filteredAreaIds[i]), samplingRateHz);\n            }\n        }\n        try {\n            mSubscriptionClient.subscribe(new SubscribeOptions[]{opts});\n        } catch (RemoteException | ServiceSpecificException e) {\n            Slogf.w(CarLog.TAG_HAL, \"Failed to subscribe to \" + toCarPropertyLog(property),\n                    e);\n        }\n    } else {\n        Slogf.w(CarLog.TAG_HAL, \"Cannot subscribe to \" + toCarPropertyLog(property));\n    }\n}\n</code></pre> <p>\u524d\u9762\u5206\u6790 VehicleHal \u6784\u9020\u51fd\u6570\u63d0\u5230\u8fc7\uff1amSubscriptionClient = vehicle.newSubscriptionClient(this)\uff0c\u4e3a\u540e\u9762\u7684\u6ce8\u518c\u76d1\u542c\u4e8b\u4ef6\u505a\u51c6\u5907\u3002 \u8fd9\u91cc\u7684 this \u662f\u8c01\u5462\uff1f\u770b\u4e0b VehicleHal \u7c7b\uff1a</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n    ...\n}\n\n\n\npackages/services/Car/service/src/com/android/car/hal/VehicleHalCallback.java\n\npublic interface VehicleHalCallback {  \n    /**  \n    * Called when new property events happen.  \n    */  \n    void onPropertyEvent(ArrayList&lt;HalPropValue&gt; values);  \n\n    /**  \n    * Called when property set errors happen.  \n    */  \n    void onPropertySetError(ArrayList&lt;VehiclePropError&gt; errors);  \n}\n</code></pre> <p>\u90a3\u5c31\u662f VehicleHalCallback \u4e86\u3002\u6211\u4eec\u5148\u63a5\u7740\u770b mSubscriptionClient \u5230\u5e95\u662f\u5565\uff0c\u5230\u540e\u9762\u6211\u4eec\u518d\u5206\u6790 VehicleHal \u56de\u8c03\u51fd\u6570\u90fd\u5e72\u5565\u3002</p> <p>Android U \u4f7f\u7528\u7684\u662f Stable AIDL\uff0c\u4f7f\u7528\u6211\u4eec\u8fd9\u91cc\u7684 SubscriptionClient \u5176\u5b9e\u662f AidlSubscriptionClient\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n@Override  \npublic SubscriptionClient newSubscriptionClient(VehicleHalCallback callback) {  \n    return new AidlSubscriptionClient(callback, mPropValueBuilder);  \n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlsubscriptionclientsubscribe","title":"AidlSubscriptionClient.subscribe()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate class AidlSubscriptionClient extends IVehicleCallback.Stub\n        implements SubscriptionClient {\n\n\n        private final VehicleHalCallback mCallback;\n        private final HalPropValueBuilder mBuilder;\n\n        AidlSubscriptionClient(VehicleHalCallback callback, HalPropValueBuilder builder) {\n            mCallback = callback;\n            mBuilder = builder;\n        }\n\n        ...\n\n        @Override\n        public void onPropertyEvent(VehiclePropValues propValues, int sharedMemoryFileCount)\n                throws RemoteException {\n            VehiclePropValues origPropValues = (VehiclePropValues)\n                    LargeParcelable.reconstructStableAIDLParcelable(propValues,\n                            /* keepSharedMemory= */ false);\n            ArrayList&lt;HalPropValue&gt; values = new ArrayList&lt;&gt;(origPropValues.payloads.length);\n            for (VehiclePropValue value : origPropValues.payloads) {\n                values.add(mBuilder.build(value));\n            }\n            mCallback.onPropertyEvent(values);\n        }\n\n        @Override\n        public void onPropertySetError(VehiclePropErrors errors) throws RemoteException {\n            VehiclePropErrors origErrors = (VehiclePropErrors)\n                    LargeParcelable.reconstructStableAIDLParcelable(errors,\n                            /* keepSharedMemory= */ false);\n            ArrayList&lt;VehiclePropError&gt; errorList = new ArrayList&lt;&gt;(origErrors.payloads.length);\n            for (VehiclePropError error : origErrors.payloads) {\n                errorList.add(error);\n            }\n            mCallback.onPropertySetError(errorList);\n        }\n\n        @Override\n        public void subscribe(SubscribeOptions[] options)\n                throws RemoteException, ServiceSpecificException {\n            mAidlVehicle.subscribe(this, options, /* maxSharedMemoryFileCount= */ 2);\n        }\n\n        @Override\n        public void unsubscribe(int prop) throws RemoteException, ServiceSpecificException {\n            mAidlVehicle.unsubscribe(this, new int[]{prop});\n        }\n}\n</code></pre> <p>\u8c03\u7528 mAidlVehicle.subscribe() \uff0c\u76d1\u542c IVehicleCallback \u7684\u56de\u8c03\u3002 \u5728 IVehicleCallback \u7684\u56de\u8c03\u51fd\u6570 onPropertyEvent() \u7ee7\u7eed\u56de\u8c03 mCallback.onPropertyEvent() \uff0c\u800c mCallback \u5c31\u662f VehicleHal \u6784\u9020\u51fd\u6570 \u4f20\u8fdb\u6765\u7684 this\u3002</p> <p>\u6240\u4ee5 IVehicleCallback \u7684\u56de\u8c03\u4e8b\u4ef6\u4f1a\u4ece AidlSubscriptionClient \u5230 VehicleHal \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalonpropertyevent","title":"VehicleHal.onPropertyEvent()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic class VehicleHal implements VehicleHalCallback, CarSystemService {\n\n    @Override\n    public void onPropertyEvent(ArrayList&lt;HalPropValue&gt; propValues) {\n        mHandler.post(() -&gt; handleOnPropertyEvent(propValues));\n    }\n\n    @Override\n    public void onPropertySetError(ArrayList&lt;VehiclePropError&gt; errors) {\n        mHandler.post(() -&gt; handleOnPropertySetError(errors));\n    }\n\n    private void handleOnPropertyEvent(List&lt;HalPropValue&gt; propValues) {\n        synchronized (mLock) {\n            for (int i = 0; i &lt; propValues.size(); i++) {\n                HalPropValue v = propValues.get(i);\n                int propId = v.getPropId();\n                // \u5728\u524d\u9762\u7684 priorityInit() \u4f1a\u628a \u5c5e\u6027id \u8ddf service \u5173\u8054\u8d77\u6765\n                // mPropertyHandlers.append(propId, service);\n                HalServiceBase service = mPropertyHandlers.get(propId);\n                if (service == null) {\n                    Slogf.e(CarLog.TAG_HAL,\n                            \"handleOnPropertyEvent: HalService not found for prop: 0x%x\", propId);\n                    continue;\n                }\n                service.getDispatchList().add(v);\n                // \u628a\u9700\u8981\u901a\u77e5\u7684 service \u90fd\u6dfb\u52a0\u5230 mServicesToDispatch\n                mServicesToDispatch.add(service);\n                VehiclePropertyEventInfo info = mEventLog.get(propId);\n                if (info == null) {\n                    info = new VehiclePropertyEventInfo(v);\n                    mEventLog.put(propId, info);\n                } else {\n                    info.addNewEvent(v);\n                }\n            }\n        }\n        for (HalServiceBase s : mServicesToDispatch) {\n            s.onHalEvents(s.getDispatchList());\n            s.getDispatchList().clear();\n        }\n        mServicesToDispatch.clear();\n    }\n}\n</code></pre> <p>\u63a5\u5230\u56de\u8c03\u540e\uff0c\u8c03\u7528 handleOnPropertyEvent() \u51fd\u6570\u5904\u7406\uff1a - \u6839\u636e propId \u4ece mPropertyHandlers \u91cc\u83b7\u53d6\u5230 service\uff0c\u5e76\u628a HalPropValue \u6dfb\u52a0\u5230 service \u7684 mDispatchList \u4e2d\u3002 - \u628a\u83b7\u53d6\u5230\u7684 service \u6dfb\u52a0\u5230\u5c06\u8981\u6d3e\u53d1\u7684 mServicesToDispatch \u5217\u8868\u4e2d\u3002 - \u904d\u5386 mServicesToDispatch \u5217\u8868\uff0c\u8c03\u7528 service \u7684 onHalEvents() \u51fd\u6570\u3002 - \u6700\u540e\u6e05\u9664 mServicesToDispatch \u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u4f7f\u7528 PowerHalService \u6765\u4e3e\u4f8b\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#powerhalserviceonhalevents","title":"PowerHalService.onHalEvents()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PowerHalService.java\n\n@Override\npublic void onHalEvents(List&lt;HalPropValue&gt; values) {\n    PowerEventListener listener;\n    synchronized (mLock) {\n        if (mListener == null) {\n            if (mQueuedEvents == null) {\n                mQueuedEvents = new ArrayList&lt;&gt;(values.size());\n            }\n            mQueuedEvents.addAll(values);\n            return;\n        }\n        listener = mListener;\n    }\n    dispatchEvents(values, listener);\n}\n</code></pre> <p>\u5728 PowerHalService.onHalEvents() \u4e2d\uff0c\u8c03\u7528 dispatchEvents() \u5904\u7406\u4e8b\u4ef6\u3002</p> <p>java \u8fd9\u8fb9\u6d41\u7a0b\u6e05\u695a\u4e86\uff0c\u73b0\u5728\u518d\u56de\u5230 AidlSubscriptionClient.subscribe() \u4e2d\uff0c\u8c03\u4e86 mAidlVehicle.subscribe() \u3002\u5c31\u8d70\u5230 Vehicle Hal \u7aef\u4e86\u3002</p> <p>\u4ece\u524d\u9762 VehicleHal \u521d\u59cb\u5316\u6d41\u7a0b\u7684\u5206\u6790\u53ef\u77e5\uff0c\u6700\u7ec8\u4f1a\u8c03\u5230 DefaultVehicleHal::subscribe()\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalsubscribe","title":"DefaultVehicleHal::subscribe()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nScopedAStatus DefaultVehicleHal::subscribe(const CallbackType&amp; callback,\n                                           const std::vector&lt;SubscribeOptions&gt;&amp; options,\n                                           [[maybe_unused]] int32_t maxSharedMemoryFileCount) {    \n    if (callback == nullptr) {\n        return ScopedAStatus::fromExceptionCode(EX_NULL_POINTER);\n    }\n\n    // \u68c0\u67e5\u8ba2\u9605\u9009\u9879\u662f\u5426\u6709\u6548\uff0c\u5982\u679c\u65e0\u6548\u5219\u8fd4\u56de\u5f02\u5e38\u72b6\u6001\n    if (auto result = checkSubscribeOptions(options); !result.ok()) {\n        ALOGE(\"subscribe: invalid subscribe options: %s\", getErrorMsg(result).c_str());\n        return toScopedAStatus(result);\n    }\n    // \u5b58\u50a8\u9700\u8981\u8ba2\u9605\u7684\u5c5e\u6027\u53d8\u5316\u548c\u8fde\u7eed\u5c5e\u6027\u7684\u9009\u9879\n    std::vector&lt;SubscribeOptions&gt; onChangeSubscriptions;\n    std::vector&lt;SubscribeOptions&gt; continuousSubscriptions;\n    // \u904d\u5386\u6240\u6709\u9009\u9879\n    for (const auto&amp; option : options) {\n        int32_t propId = option.propId;\n        // \u5df2\u7ecf\u9a8c\u8bc1\u914d\u7f6e\u5b58\u5728\n        const VehiclePropConfig&amp; config = mConfigsByPropId[propId];\n\n        SubscribeOptions optionCopy = option;\n        // \u5982\u679careaIds\u4e3a\u7a7a\uff0c\u5219\u8ba2\u9605\u6240\u6709\u533a\u57df\n        if (optionCopy.areaIds.empty() &amp;&amp; !isGlobalProp(propId)) {\n            for (const auto&amp; areaConfig : config.areaConfigs) {\n                optionCopy.areaIds.push_back(areaConfig.areaId);\n            }\n        }\n\n        if (isGlobalProp(propId)) {\n            optionCopy.areaIds = {0};\n        }\n\n        // \u5982\u679c\u5c5e\u6027\u53d8\u5316\u6a21\u5f0f\u4e3a\u8fde\u7eed\u6a21\u5f0f\uff0c\u5219\u8bbe\u7f6e\u91c7\u6837\u7387\u4e3a\u9ed8\u8ba4\u91c7\u6837\u7387\uff0c\u5e76\u5c06\u9009\u9879\u6dfb\u52a0\u5230\u8fde\u7eed\u5c5e\u6027\u7684\u8ba2\u9605\u5217\u8868\u4e2d\n        if (config.changeMode == VehiclePropertyChangeMode::CONTINUOUS) {\n            optionCopy.sampleRate = getDefaultSampleRateHz(\n                    optionCopy.sampleRate, config.minSampleRate, config.maxSampleRate);\n            continuousSubscriptions.push_back(std::move(optionCopy));\n        } else {\n            // \u5426\u5219\u5c06\u9009\u9879\u6dfb\u52a0\u5230\u5c5e\u6027\u53d8\u5316\u7684\u8ba2\u9605\u5217\u8868\u4e2d\n            onChangeSubscriptions.push_back(std::move(optionCopy));\n        }\n    }\n\n    {\n        // \u52a0\u9501\u4ee5\u786e\u4fdd\u4e0d\u4f1a\u5e76\u53d1\u8c03\u7528onBinderDied\n        std::scoped_lock lockGuard(mLock);\n        // \u5982\u679c\u76d1\u89c6\u7684Binder\u751f\u547d\u5468\u671f\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u5f02\u5e38\u72b6\u6001\n        if (!monitorBinderLifeCycleLocked(callback-&gt;asBinder().get())) {\n            return ScopedAStatus::fromExceptionCodeWithMessage(EX_TRANSACTION_FAILED,\n                                                               \"client died\");\n        }\n\n        // \u5982\u679c\u4e0d\u5b58\u5728\u73b0\u6709\u7684SubscriptionClient\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684SubscriptionClient\n        mSubscriptionClients-&gt;maybeAddClient(callback);\n\n        // \u7531\u4e8e\u5df2\u7ecf\u68c0\u67e5\u4e86\u91c7\u6837\u7387\uff0c\u4ee5\u4e0b\u51fd\u6570\u5fc5\u987b\u6210\u529f\n        // \u5982\u679c\u5c5e\u6027\u53d8\u5316\u7684\u8ba2\u9605\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528\u8ba2\u9605\u7ba1\u7406\u5668\u7684subscribe\u51fd\u6570\u8fdb\u884c\u8ba2\u9605\n        if (!onChangeSubscriptions.empty()) {\n            return toScopedAStatus(mSubscriptionManager-&gt;subscribe(callback, onChangeSubscriptions,\n                                                                   /*isContinuousProperty=*/false));\n        }\n        // \u5982\u679c\u8fde\u7eed\u5c5e\u6027\u7684\u8ba2\u9605\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528\u8ba2\u9605\u7ba1\u7406\u5668\u7684subscribe\u51fd\u6570\u8fdb\u884c\u8ba2\u9605\n        if (!continuousSubscriptions.empty()) {\n            return toScopedAStatus(mSubscriptionManager-&gt;subscribe(callback,\n                                                                   continuousSubscriptions,\n                                                                   /*isContinuousProperty=*/true));\n        }\n    }\n    // \u8fd4\u56de\u6b63\u5e38\u72b6\u6001\n    return ScopedAStatus::ok();\n}\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u6700\u91cd\u8981\u7684\u4e00\u70b9\u5176\u5b9e\u5c31\u662f\u8c03\u7528 SubscriptionManager::subscribe() \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscriptionmanagersubscribe","title":"SubscriptionManager::subscribe()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/SubscriptionManager.cpp\n\nVhalResult&lt;void&gt; SubscriptionManager::subscribe(const std::shared_ptr&lt;IVehicleCallback&gt;&amp; callback,\n                                                const std::vector&lt;SubscribeOptions&gt;&amp; options,\n                                                bool isContinuousProperty) {\n    std::scoped_lock&lt;std::mutex&gt; lockGuard(mLock);\n\n    // \u904d\u5386options\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2aSubscribeOptions\u5bf9\u8c61\n    for (const auto&amp; option : options) {\n        // \u83b7\u53d6\u5f53\u524dSubscribeOptions\u5bf9\u8c61\u7684\u91c7\u6837\u7387\n        float sampleRateHz = option.sampleRate;\n\n        // \u5982\u679cisContinuousProperty\u4e3atrue\n        if (isContinuousProperty) {\n            // \u8c03\u7528getIntervalNanos\u51fd\u6570\u83b7\u53d6\u91c7\u6837\u95f4\u9694\u65f6\u95f4\n            if (auto result = getIntervalNanos(sampleRateHz); !result.ok()) {\n                return StatusError(StatusCode::INVALID_ARG) &lt;&lt; result.error().message();\n            }\n        }\n\n        // \u5982\u679c\u5f53\u524dSubscribeOptions\u5bf9\u8c61\u7684areaIds\u5411\u91cf\u4e3a\u7a7a\n        if (option.areaIds.empty()) {\n            ALOGE(\"area IDs to subscribe must not be empty\");\n            return StatusError(StatusCode::INVALID_ARG)\n                   &lt;&lt; \"area IDs to subscribe must not be empty\";\n        }\n    }\n\n    // \u83b7\u53d6callback\u5bf9\u8c61\u7684Binder ID\n    ClientIdType clientId = callback-&gt;asBinder().get();\n\n    // \u904d\u5386options\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2aSubscribeOptions\u5bf9\u8c61\n    for (const auto&amp; option : options) {\n        // \u83b7\u53d6\u5f53\u524dSubscribeOptions\u5bf9\u8c61\u7684\u5c5e\u6027ID\n        int32_t propId = option.propId;\n        // \u83b7\u53d6\u5f53\u524dSubscribeOptions\u5bf9\u8c61\u7684\u533a\u57dfID\u5411\u91cf\n        const std::vector&lt;int32_t&gt;&amp; areaIds = option.areaIds;\n        // \u904d\u5386\u533a\u57dfID\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u533a\u57dfID\n        for (int32_t areaId : areaIds) {\n            PropIdAreaId propIdAreaId = {\n                    .propId = propId,\n                    .areaId = areaId,\n            };\n            // \u5982\u679cisContinuousProperty\u4e3atrue\n            if (isContinuousProperty) {\n                // \u8c03\u7528addContinuousSubscriberLocked\u51fd\u6570\u6dfb\u52a0\u8fde\u7eed\u5c5e\u6027\u7684\u8ba2\u9605\u8005\n                if (auto result = addContinuousSubscriberLocked(clientId, propIdAreaId,\n                                                                option.sampleRate);\n                    !result.ok()) {\n                    return result;\n                }\n            }\n\n            // \u5c06propIdAreaId\u63d2\u5165\u5230mSubscribedPropsByClient\u7684clientId\u952e\u5bf9\u5e94\u7684\u96c6\u5408\u4e2d\n            mSubscribedPropsByClient[clientId].insert(propIdAreaId);\n            // \u5c06callback\u63d2\u5165\u5230mClientsByPropIdArea\u7684propIdAreaId\u952e\u5bf9\u5e94\u7684clientId\u952e\u5bf9\u5e94\u7684\u503c\u4e2d\n            mClientsByPropIdArea[propIdAreaId][clientId] = callback;\n        }\n    }\n    return {};\n}\n</code></pre> <p>\u770b\u5230\u4e86 callback \u5b58\u653e\u5728 mClientsByPropIdArea\uff0c\u6211\u4eec\u770b\u4e0b mClientsByPropIdArea \u662f\u4ec0\u4e48\uff1f</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/SubscriptionManager.h\n\nmutable std::mutex mLock;  \nstd::unordered_map&lt;PropIdAreaId, std::unordered_map&lt;ClientIdType, CallbackType&gt;,  \nPropIdAreaIdHash&gt; mClientsByPropIdArea GUARDED_BY(mLock);\n</code></pre> <p>\u4ece\u8fd9\u91cc\u6211\u4eec\u770b\u51fa\u6765\u4e86\uff0c\u5982\u679c\u77e5\u9053\u4e86 propIdAreaId \uff0c\u5c31\u53ef\u4ee5\u4ece mClientsByPropIdArea \u67e5\u5230 callback \u4e86\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscriptionmanagergetsubscribedclients","title":"SubscriptionManager::getSubscribedClients()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/SubscriptionManager.cpp\n\nstd::unordered_map&lt;std::shared_ptr&lt;IVehicleCallback&gt;, std::vector&lt;const VehiclePropValue*&gt;&gt;\nSubscriptionManager::getSubscribedClients(const std::vector&lt;VehiclePropValue&gt;&amp; updatedValues) {\n    std::scoped_lock&lt;std::mutex&gt; lockGuard(mLock);\n    std::unordered_map&lt;std::shared_ptr&lt;IVehicleCallback&gt;, std::vector&lt;const VehiclePropValue*&gt;&gt;\n            clients;\n\n    // \u904d\u5386updatedValues\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5143\u7d20\u7c7b\u578b\u4e3aVehiclePropValue\n    for (const auto&amp; value : updatedValues) {\n        PropIdAreaId propIdAreaId{\n                .propId = value.prop,\n                .areaId = value.areaId,\n        };\n        // \u5982\u679cmClientsByPropIdArea\u4e2d\u4e0d\u5b58\u5728propIdAreaId\u952e\n        if (mClientsByPropIdArea.find(propIdAreaId) == mClientsByPropIdArea.end()) {\n            continue;  // \u8df3\u8fc7\u5f53\u524d\u5faa\u73af\uff0c\u7ee7\u7eed\u4e0b\u4e00\u6b21\u5faa\u73af\n        }\n\n        // \u904d\u5386mClientsByPropIdArea[propIdAreaId]\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5143\u7d20\u7c7b\u578b\u4e3astd::pair&lt;const std::shared_ptr&lt;IVehicleCallback&gt;, bool&gt;\n        for (const auto&amp; [_, client] : mClientsByPropIdArea[propIdAreaId]) {\n            // \u5c06value\u7684\u5730\u5740\u6dfb\u52a0\u5230clients[client]\u7684\u672b\u5c3e\n            clients[client].push_back(&amp;value);\n        }\n    }\n    // \u8fd4\u56declients\n    return clients;\n}\n</code></pre> <p>\u8ddf\u6211\u4eec\u524d\u9762\u7684\u731c\u60f3\u662f\u4e00\u6837\u7684\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#subscriptionclientsendupdatedvalues","title":"SubscriptionClient::sendUpdatedValues()","text":"<p>\u5728\u4e4b\u524d\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u8bf4\u5148\u4e0d\u5206\u6790 DefaultVehicleHal::onPropertyChangeEvent() \u7684\u5177\u4f53\u529f\u80fd\u3002 \u73b0\u5728\u6211\u4eec\u62ff\u51fa\u6765\u7ee7\u7eed\u5206\u6790\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nvoid DefaultVehicleHal::onPropertyChangeEvent(\n        std::weak_ptr&lt;SubscriptionManager&gt; subscriptionManager,\n        const std::vector&lt;VehiclePropValue&gt;&amp; updatedValues) {\n    // subscriptionManager \u662f\u8ba2\u9605\u7ba1\u7406\u5668\u7684\u5f31\u5f15\u7528\n    // \u83b7\u53d6\u8ba2\u9605\u7ba1\u7406\u5668\u7684\u5f3a\u5f15\u7528\n    auto manager = subscriptionManager.lock();\n    if (manager == nullptr) {\n        ALOGW(\"the SubscriptionManager is destroyed, DefaultVehicleHal is ending\");\n        return;\n    }\n    // \u83b7\u53d6\u8ba2\u9605\u4e86\u66f4\u65b0\u5c5e\u6027\u503c\u7684\u5ba2\u6237\u7aef\n    auto updatedValuesByClients = manager-&gt;getSubscribedClients(updatedValues);\n    for (const auto&amp; [callback, valuePtrs] : updatedValuesByClients) {\n        std::vector&lt;VehiclePropValue&gt; values;\n        for (const VehiclePropValue* valuePtr : valuePtrs) {\n            values.push_back(*valuePtr);\n        }\n        // \u53d1\u9001\u66f4\u65b0\u7684\u5c5e\u6027\u503c\u7ed9\u5ba2\u6237\u7aef\n        SubscriptionClient::sendUpdatedValues(callback, std::move(values));\n    }\n}\n</code></pre> <p>manager \u5c31\u662f mSubscriptionManager\uff0c\u4e5f\u5c31\u662f SubscriptionManager::getSubscribedClients() \u3002\u4e5f\u5c31\u662f\u8bf4\u8981\u6ce8\u518c\u76d1\u542c\u7684\u5ba2\u6237\u7aef\u4e86\u3002 \u771f\u6b63\u53d1\u8d77 ipc \u56de\u8c03\u7684\u4e00\u4e2a\u5c31\u662f\u8fd9\u91cc\u4e86 SubscriptionClient::sendUpdatedValues(callback, std::move(values));</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nvoid SubscriptionClient::sendUpdatedValues(std::shared_ptr&lt;IVehicleCallback&gt; callback,\n                                           std::vector&lt;VehiclePropValue&gt;&amp;&amp; updatedValues) {\n    if (updatedValues.empty()) {\n        return;\n    }\n\n    // \u5728\u8fd9\u91cc\u4f7f\u7528\u5185\u5b58\u6c60\uff0c\u5e76\u586b\u5145sharedMemoryId\u3002\n    // \u521b\u5efa\u4e00\u4e2aVehiclePropValues\u5bf9\u8c61\n    VehiclePropValues vehiclePropValues;\n    // \u5171\u4eab\u5185\u5b58\u6587\u4ef6\u8ba1\u6570\u5668\u521d\u59cb\u5316\u4e3a0\n    int32_t sharedMemoryFileCount = 0;\n    // \u5c06\u66f4\u65b0\u7684\u503c\u8f6c\u6362\u4e3a\u7a33\u5b9a\u7684\u5927\u578b\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\n    ScopedAStatus status =\n            vectorToStableLargeParcelable(std::move(updatedValues), &amp;vehiclePropValues);\n    if (!status.isOk()) {\n        // \u5982\u679c\u8f6c\u6362\u5931\u8d25\uff0c\u5219\u6253\u5370\u9519\u8bef\u4fe1\u606f\u5e76\u8fd4\u56de\n        int statusCode = status.getServiceSpecificError();\n        ALOGE(\"subscribe: failed to marshal result into large parcelable, error: \"\n              \"%s, code: %d\",\n              status.getMessage(), statusCode);\n        return;\n    }\n\n    // \u8c03\u7528\u56de\u8c03\u51fd\u6570\uff0c\u5c06vehiclePropValues\u548csharedMemoryFileCount\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\n    if (ScopedAStatus callbackStatus =\n                callback-&gt;onPropertyEvent(vehiclePropValues, sharedMemoryFileCount);\n        !callbackStatus.isOk()) {\n        ALOGE(\"subscribe: failed to call UpdateValues callback, client ID: %p, error: %s, \"\n              \"exception: %d, service specific error: %d\",\n              callback-&gt;asBinder().get(), callbackStatus.getMessage(),\n              callbackStatus.getExceptionCode(), callbackStatus.getServiceSpecificError());\n    }\n}\n</code></pre> <p>\u4ee5\u4e0a\u6211\u4eec\u53ea\u662f\u62ff PowerHalService \uff0c\u5728 VehicleHal.priorityInit() \u4e2d\u4f1a\u904d\u5386\u6240\u4ee5\u7684 HalService \u53bb\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5 \u6240\u6709\u5c5e\u6027\u90fdsubscribe\uff0cCarService\u5c31\u53ef\u4ee5\u6240\u6709\u63a5\u6536\u5230Vehicle HAL\u53d1\u4e0a\u6765\u7684\u6240\u6709\u5c5e\u6027\u53d8\u5316</p> <p>\u540c\u7406\uff0cunsubscribe\u6ce8\u9500\u8ba2\u9605\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#set","title":"set \u8bbe\u7f6e\u5c5e\u6027","text":"<p>\u5728 Android S \u4e2d\uff0c\u6211\u4eec\u62ff CarHvacManager \u6765\u4e3e\u4f8b\uff0c\u800c\u5728 Android U ( \u6ca1\u770b\u8fc7 T \u7684\u4ee3\u7801\uff0c\u4e5f\u8bb8\u5728 T \u4e2d\u5df2\u7ecf\u662f\u8fd9\u6837\u5b50\u4e86 ) \u5efa\u8bae\u90fd\u4f7f\u7528 CarPropertyManager \u4e86\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertymanagersetproperty","title":"CarPropertyManager.setProperty()","text":"<pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\n@AddedInOrBefore(majorVersion = 33)\npublic &lt;E&gt; void setProperty(@NonNull Class&lt;E&gt; clazz, int propertyId, int areaId,\n        @NonNull E val) {\n    ...\n    try {\n        runSyncOperation(() -&gt; {\n            mService.setProperty(new CarPropertyValue&lt;&gt;(propertyId, areaId, val),\n                    mCarPropertyEventToService);\n            return null;\n        });\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mService \u5c31\u662f CarPropertyService \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertyservicesetproperty","title":"CarPropertyService.setProperty()","text":"<pre><code>packages/services/Car/service/src/com/android/car/CarPropertyService.java\n\n@Override\npublic void setProperty(CarPropertyValue carPropertyValue,\n        ICarPropertyEventListener iCarPropertyEventListener)\n        throws IllegalArgumentException, ServiceSpecificException {\n    requireNonNull(iCarPropertyEventListener);\n    validateSetParameters(carPropertyValue);\n\n    runSyncOperationCheckLimit(() -&gt; {\n        mPropertyHalService.setProperty(carPropertyValue);\n        return null;\n    });\n\n    IBinder listenerBinder = iCarPropertyEventListener.asBinder();\n    synchronized (mLock) {\n        Client client = mClientMap.get(listenerBinder);\n        if (client == null) {\n            client = new Client(iCarPropertyEventListener);\n        }\n        if (client.isDead()) {\n            Slogf.w(TAG, \"the ICarPropertyEventListener is already dead\");\n            return;\n        }\n        mClientMap.put(listenerBinder, client);\n        updateSetOperationRecorderLocked(carPropertyValue.getPropertyId(),\n                carPropertyValue.getAreaId(), client);\n    }\n}\n</code></pre> <p>mPropertyHalService \u5c31\u662f PropertyHalService\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#propertyhalservicesetproperty","title":"PropertyHalService.setProperty()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\npublic void setProperty(CarPropertyValue carPropertyValue)\n        throws IllegalArgumentException, ServiceSpecificException {\n    HalPropValue valueToSet;\n    synchronized (mLock) {\n        valueToSet = carPropertyValueToHalPropValueLocked(carPropertyValue);\n    }\n\n    // CarPropertyManager catches and rethrows exception, no need to handle here.\n    mVehicleHal.set(valueToSet);\n}\n</code></pre> <p>mVehicleHal \u5c31\u662f VehicleHal \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalset","title":"VehicleHal.set()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void set(HalPropValue propValue)\n        throws IllegalArgumentException, ServiceSpecificException {\n    setValueWithRetry(propValue);\n}\n\nprivate void setValueWithRetry(HalPropValue value)  {\n    invokeRetriable((requestValue) -&gt; {\n        Trace.traceBegin(TRACE_TAG, \"VehicleStub#set\");\n        mVehicleStub.set(requestValue);\n        Trace.traceEnd(TRACE_TAG);\n        return null;\n    }, \"set\", value, mMaxDurationForRetryMs, mSleepBetweenRetryMs, /* maxRetries= */ 0);\n}\n</code></pre> <p>mVehicleStub \u662f AidlVehicleStub\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubset","title":"AidlVehicleStub.set()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n@Override\npublic void set(HalPropValue requestedPropValue) throws RemoteException,\n        ServiceSpecificException {\n    getOrSetSync(requestedPropValue, mPendingSyncSetValueRequestPool,\n            new AsyncSetRequestsHandler(),\n            (result) -&gt; {\n                if (result.status != StatusCode.OK) {\n                    throw new ServiceSpecificException(result.status,\n                            \"failed to set value for \" + printPropIdAreaId(requestedPropValue));\n                }\n                return null;\n            });\n}\n\n\nprivate &lt;VhalResultType&gt; HalPropValue getOrSetSync(\n        HalPropValue requestedPropValue,\n        PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool,\n        AsyncRequestsHandler requestsHandler,\n        Function&lt;VhalResultType, HalPropValue&gt; resultHandler)\n        throws RemoteException, ServiceSpecificException {\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#getOrSetSync\");\n    long vhalRequestId = mRequestId.getAndIncrement();\n\n    AndroidFuture&lt;VhalResultType&gt; resultFuture = pendingSyncRequestPool.addRequest(\n            vhalRequestId);\n\n    requestsHandler.allocateVhalRequestSize(1);\n    requestsHandler.addVhalRequest(vhalRequestId, requestedPropValue);\n    requestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n\n    boolean gotResult = false;\n\n    try {\n        Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#waitingForSyncResult\");\n        VhalResultType result = resultFuture.get(mSyncOpTimeoutInMs,\n                TimeUnit.MILLISECONDS);\n        gotResult = true;\n        return resultHandler.apply(result);\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n        throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                \"thread interrupted, possibly exiting the thread\");\n    } catch (ExecutionException e) {\n        throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                \"failed to resolve future, error: \" + e);\n    } catch (TimeoutException e) {\n        throw new ServiceSpecificException(StatusCode.INTERNAL_ERROR,\n                \"get/set value request timeout for: \" + printPropIdAreaId(requestedPropValue));\n    } finally {\n        Trace.traceEnd(TRACE_TAG);\n        if (!gotResult) {\n            resultFuture = pendingSyncRequestPool.finishRequestIfFound(vhalRequestId);\n            // Something wrong happened, the future is guaranteed not to be used again.\n            resultFuture.cancel(/* mayInterruptIfRunning= */ false);\n        }\n        Trace.traceEnd(TRACE_TAG);\n    }\n}\n</code></pre> <p>\u9996\u5148\uff0c\u6211\u4eec\u5148\u4e86\u89e3 set() \u51fd\u6570\u8c03\u7528 getOrSetSync() \u4f20\u4e86\u4ec0\u4e48\u53c2\u6570\u3002</p> <ul> <li>requestsHandler \u662f new AsyncSetRequestsHandler()</li> <li>Function resultHandler \u662f \u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u91cc\u53ea\u662f\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u6210\u529f\u800c\u5df2\u3002 <p>\u8fd9\u91cc\u6bd4\u8f83\u5173\u952e\u7684\u4ee3\u7801\u662f\uff1a</p> <pre><code>requestsHandler.allocateVhalRequestSize(1);  \nrequestsHandler.addVhalRequest(vhalRequestId, requestedPropValue);  \nrequestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n</code></pre> <p>mGetSetValuesCallback \u662f AidlVehicleStub \u6784\u9020\u51fd\u6570\u91cc \u521b\u5efa\u7684\u3002</p> <pre><code>mGetSetValuesCallback = new GetSetValuesCallback();\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncsetrequestshandlersendrequeststovhal","title":"AsyncSetRequestsHandler.sendRequestsToVhal()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate static final class AsyncSetRequestsHandler\n        extends AsyncRequestsHandler&lt;SetValueRequest, SetValueRequests&gt; {\n    ...\n\n    @Override\n    public void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n            throws RemoteException, ServiceSpecificException {\n        SetValueRequests largeParcelableRequest = new SetValueRequests();\n        largeParcelableRequest.payloads = mVhalRequestItems;\n        largeParcelableRequest = (SetValueRequests) LargeParcelable.toLargeParcelable(\n                largeParcelableRequest, () -&gt; {\n                    SetValueRequests newRequests = new SetValueRequests();\n                    newRequests.payloads = new SetValueRequest[0];\n                    return newRequests;\n        });\n        iVehicle.setValues(callbackForVhal, largeParcelableRequest);\n    }\n\n    ...\n}\n</code></pre> <p>iVehicle \u662f VehicleHAL \u670d\u52a1\uff0c\u6240\u4ee5\u8c03\u5230\u5bf9\u7aef\u63a5\u53e3\u4e86\u3002 \u8fd9\u91cc\u7684 callbackForVhal \u662f GetSetValuesCallback \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluescallbackonsetvalues","title":"GetSetValuesCallback.onSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate final class GetSetValuesCallback extends IVehicleCallback.Stub {\n\n    @Override\n    public void onSetValues(SetValueResults responses) throws RemoteException {\n        AidlVehicleStub.this.onSetValues(responses);\n    }\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubonsetvalues","title":"AidlVehicleStub.onSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate void onSetValues(SetValueResults responses) {\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onSetValues\");\n    SetValueResults origResponses = (SetValueResults)\n            LargeParcelable.reconstructStableAIDLParcelable(responses,\n                    /* keepSharedMemory= */ false);\n    onGetSetValues(origResponses.payloads, new AsyncSetResultsHandler(),\n            mPendingSyncSetValueRequestPool);\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre> <p>\u8fd9\u91cc\u4f20\u8fdb\u53bb\u7684 AsyncResultsHandler \u662f AsyncSetResultsHandler \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubongetsetvalues","title":"AidlVehicleStub.onGetSetValues()","text":"<pre><code>/**\n * \u7528\u4e8e\u5904\u7406 onGetValues / onSetValues \u7684\u901a\u7528\u51fd\u6570\u3002\n */\nprivate &lt;VhalResultType&gt; void onGetSetValues(VhalResultType[] vhalResults,\n        AsyncResultsHandler asyncResultsHandler,\n        PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool) {\n    synchronized (mLock) {\n        for (VhalResultType result : vhalResults) {\n            long vhalRequestId = asyncResultsHandler.getVhalRequestId(result);\n            if (!mPendingAsyncRequestPool.contains(vhalRequestId)) {\n                // \u5982\u679c\u5728\u5f02\u6b65\u6620\u5c04\u4e2d\u627e\u4e0d\u5230\u8bf7\u6c42ID\uff0c\u5219\u5047\u8bbe\u5b83\u662f\u7528\u4e8e\u540c\u6b65\u8bf7\u6c42\u3002\n                completePendingSyncRequestLocked(pendingSyncRequestPool, vhalRequestId, result);\n                continue;\n            }\n\n            AsyncRequestInfo requestInfo = mPendingAsyncRequestPool.finishRequestIfFound(\n                    vhalRequestId);\n            if (requestInfo == null) {\n                Slogf.w(TAG,\n                        \"No pending request for ID: %s, possibly already timed out, \"\n                        + \"or cancelled, or the client already died\", vhalRequestId);\n                continue;\n            }\n            asyncResultsHandler.addVhalResult(requestInfo.getClientCallback(),\n                    requestInfo.getServiceRequestId(), result);\n        }\n    }\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub call async result callback\");\n    asyncResultsHandler.callVehicleStubCallback();\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre> <p>\u54c8\u54c8\uff0c\u5206\u6790\u5230\u8fd9\u91cc\u53d1\u73b0\u7528\u8fd9\u91cc\u4f8b\u5b50\u4e3e\u4f8b\u597d\u50cf\u4e0d\u592a\u597d\u3002\u56e0\u4e3a\u8fd9\u91cc\u662f \u540c\u6b65 \u8bbe\u7f6e\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u5206\u6790\u4e0d\u4e0b\u53bb\u4e86\uff0c\u6362\u4e2a\u4f8b\u5b50\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertymanagersetpropertiesasync","title":"[\u5f02\u6b65] CarPropertyManager.setPropertiesAsync()","text":"<pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\npublic void setPropertiesAsync(\n        @NonNull List&lt;SetPropertyRequest&lt;?&gt;&gt; setPropertyRequests,\n        long timeoutInMs,\n        @Nullable CancellationSignal cancellationSignal,\n        @Nullable Executor callbackExecutor,\n        @NonNull SetPropertyCallback setPropertyCallback) {\n    ...\n\n    try {\n        ..\n        mService.setPropertiesAsync(new AsyncPropertyServiceRequestList(\n                setPropertyServiceRequests), mAsyncPropertyResultCallback, timeoutInMs);\n        ...\n    ...\n}\n</code></pre> <p>mAsyncPropertyResultCallback \u662f </p> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\nprivate final AsyncPropertyResultCallback mAsyncPropertyResultCallback = new AsyncPropertyResultCallback();\n\nprivate class AsyncPropertyResultCallback extends IAsyncPropertyResultCallback.Stub {\n\n    @Override\n    public IBinder asBinder() {\n        return this;\n    }\n\n    @Override\n    public void onGetValueResults(GetSetValueResultList getValueResults) {\n        ...\n    }\n\n    @Override\n    public void onSetValueResults(GetSetValueResultList setValueResults) {\n        ...\n    }\n\n    @SuppressLint(\"WrongConstant\")\n    private &lt;RequestType extends AsyncPropertyRequest, CallbackType, ResultType&gt; void onResults(\n            List&lt;GetSetValueResult&gt; results,\n            PropertyResultCallback&lt;CallbackType, ResultType&gt; propertyResultCallback) {\n        ...\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertyservicesetpropertiesasync","title":"[\u5f02\u6b65] CarPropertyService.setPropertiesAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/CarPropertyService.java\n\npublic void setPropertiesAsync(AsyncPropertyServiceRequestList setPropertyServiceRequests,\n        IAsyncPropertyResultCallback asyncPropertyResultCallback,\n        long timeoutInMs) {\n    ...\n\n    mPropertyHalService.setCarPropertyValuesAsync(setPropertyServiceRequestList,\n            asyncPropertyResultCallback, timeoutInMs);\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#propertyhalservicesetcarpropertyvaluesasync","title":"[\u5f02\u6b65] PropertyHalService.setCarPropertyValuesAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n/**\n * Sets car property values asynchronously.\n */\npublic void setCarPropertyValuesAsync(\n        List&lt;AsyncPropertyServiceRequest&gt; serviceRequests,\n        IAsyncPropertyResultCallback asyncPropertyResultCallback,\n        long timeoutInMs) {\n    List&lt;AsyncPropRequestInfo&gt; pendingSetRequestInfo = new ArrayList&lt;&gt;();\n    VehicleStubCallback vehicleStubCallback = createVehicleStubCallback(\n            asyncPropertyResultCallback);\n    List&lt;AsyncGetSetRequest&gt; setValueRequests = prepareVehicleStubRequests(\n            SET, serviceRequests, timeoutInMs, vehicleStubCallback,\n             /* assocSetValueRequestInfo= */ null, /* outRequestInfo= */ pendingSetRequestInfo);\n    List&lt;AsyncPropRequestInfo&gt; waitForUpdateSetRequestInfo = filterWaitForUpdateRequests(\n            pendingSetRequestInfo, (request) -&gt; request.isWaitForPropertyUpdate());\n\n    if (waitForUpdateSetRequestInfo.size() != 0) {\n        List&lt;AsyncPropertyServiceRequest&gt; waitForUpdateServiceRequests =\n                filterWaitForUpdateRequests(serviceRequests,\n                        (request) -&gt; request.isWaitForPropertyUpdate());\n        sendGetInitialValueAndSubscribeUpdateEvent(waitForUpdateServiceRequests,\n                vehicleStubCallback, timeoutInMs, waitForUpdateSetRequestInfo);\n    }\n\n    sendVehicleStubRequests(SET, setValueRequests, vehicleStubCallback);\n}\n</code></pre> <p>IAsyncPropertyResultCallback asyncPropertyResultCallback \u662f CarPropertyManager \u7684 \u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \uff08 AsyncPropertyResultCallback \uff09\u3002</p> <p>\u518d\u627e\u4e0b vehicleStubCallback \u662f\u8c01\u3002</p> <pre><code>VehicleStubCallback vehicleStubCallback = createVehicleStubCallback(asyncPropertyResultCallback);\n</code></pre> <p>asyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n@GuardedBy(\"mLock\")  \nprivate final Map&lt;IBinder, VehicleStubCallback&gt; mResultBinderToVehicleStubCallback = new ArrayMap&lt;&gt;();\n\nVehicleStubCallback createVehicleStubCallback(\n        IAsyncPropertyResultCallback asyncPropertyResultCallback) {\n    IBinder asyncPropertyResultBinder = asyncPropertyResultCallback.asBinder();\n    VehicleStubCallback callback;\n    synchronized (mLock) {\n        if (mResultBinderToVehicleStubCallback.get(asyncPropertyResultBinder) == null) {\n            callback = new VehicleStubCallback(asyncPropertyResultCallback);\n            try {\n                callback.linkToDeath(() -&gt; onBinderDied(asyncPropertyResultBinder));\n            } catch (RemoteException e) {\n                throw new IllegalStateException(\"Linking to binder death recipient failed, \"\n                        + \"the client might already died\", e);\n            }\n            mResultBinderToVehicleStubCallback.put(asyncPropertyResultBinder, callback);\n        } else {\n            callback = mResultBinderToVehicleStubCallback.get(asyncPropertyResultBinder);\n        }\n    }\n    return callback;\n}\n\n\n\npackages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\nprivate class VehicleStubCallback extends VehicleStubCallbackInterface {\n    private final IAsyncPropertyResultCallback mAsyncPropertyResultCallback;\n    private final IBinder mClientBinder;\n\n    VehicleStubCallback(\n            IAsyncPropertyResultCallback asyncPropertyResultCallback) {\n        // mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback\n        mAsyncPropertyResultCallback = asyncPropertyResultCallback;\n        mClientBinder = asyncPropertyResultCallback.asBinder();\n    }\n\n    private void sendGetValueResults(List&lt;GetSetValueResult&gt; results) {\n        if (results.isEmpty()) {\n            return;\n        }\n        try {\n            mAsyncPropertyResultCallback.onGetValueResults(new GetSetValueResultList(results));\n        } catch (RemoteException e) {\n            Slogf.w(TAG, \"sendGetValueResults: Client might have died already\", e);\n        }\n    }\n\n    void sendSetValueResults(List&lt;GetSetValueResult&gt; results) {\n        if (results.isEmpty()) {\n            return;\n        }\n        try {\n            mAsyncPropertyResultCallback.onSetValueResults(new GetSetValueResultList(results));\n        } catch (RemoteException e) {\n            Slogf.w(TAG, \"sendSetValueResults: Client might have died already\", e);\n        }\n    }\n    ...\n}\n\n\n\npackages/services/Car/service/src/com/android/car/VehicleStub.java\n\npublic abstract static class VehicleStubCallbackInterface {\n    /**\n     * Method called when {@link getAsync} returns results.\n     */\n    public abstract void onGetAsyncResults(\n            List&lt;GetVehicleStubAsyncResult&gt; getVehicleStubAsyncResults);\n\n    /**\n     * Method called when {@link setAsync} returns results.\n     */\n    public abstract void onSetAsyncResults(\n            List&lt;SetVehicleStubAsyncResult&gt; setVehicleStubAsyncResults);\n\n    /**\n     * Register a callback that will be called when the callback binder died.\n     */\n    public abstract void linkToDeath(DeathRecipient recipient) throws RemoteException;\n\n    /**\n     * Method called when async requests timed-out.\n     *\n     * If the callback's binder is already dead, this function will not be called.\n     */\n    public abstract void onRequestsTimeout(List&lt;Integer&gt; serviceRequestIds);\n}\n</code></pre> <p>mResultBinderToVehicleStubCallback \u662f\u901a\u8fc7 IBinder \u548c VehicleStubCallback \u5173\u8054\u8d77\u6765\u3002\u6240\u4ee5\u53ea\u6709\u901a\u8fc7 CarPropertyManager \u62ff\u5230\u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \uff08 asBinder() \uff09\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5728 PropertyHalService \u91cc\u5176\u5bf9\u5e94\u7684 VehicleStubCallback\u3002</p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u70b9\uff1aVehicleStubCallback \u7684\u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002</p> <p>\u4e0d\u77e5\u9053 setValueRequests \u6709\u6ca1\u6709\u7528\uff0c\u5148\u4e0d\u5206\u6790\u3002sendVehicleStubRequests \u4f1a\u6839\u636e requestType \u6765\u8c03\u7528 VehicleHal \u63a5\u53e3\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\nprivate void sendVehicleStubRequests(@AsyncRequestType int requestType,\n        List&lt;AsyncGetSetRequest&gt; vehicleStubRequests, VehicleStubCallback callback) {\n    switch (requestType) {\n        case GET: // fallthrough\n        case GET_INITIAL_VALUE_FOR_SET:\n            mVehicleHal.getAsync(vehicleStubRequests, callback);\n            break;\n        case SET:\n            mVehicleHal.setAsync(vehicleStubRequests, callback);\n            break;\n    }\n}\n</code></pre> <p>\u6211\u4eec\u8fd9\u91cc\u4f8b\u5b50\u662f SET \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalsetasync","title":"[\u5f02\u6b65] VehicleHal.setAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void setAsync(List&lt;VehicleStub.AsyncGetSetRequest&gt; setVehicleStubAsyncRequests,\n        VehicleStub.VehicleStubCallbackInterface setVehicleStubAsyncCallback) {\n    mVehicleStub.setAsync(setVehicleStubAsyncRequests, setVehicleStubAsyncCallback);\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mVehicleStub \u4f9d\u7136\u662f AidlVehicleStub \u3002 setVehicleStubAsyncCallback \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubsetasync","title":"[\u5f02\u6b65] AidlVehicleStub.setAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n@Override\npublic void setAsync(List&lt;AsyncGetSetRequest&gt; setVehicleStubAsyncRequests,\n        VehicleStubCallbackInterface setCallback) {\n    getOrSetAsync(setVehicleStubAsyncRequests, setCallback, new AsyncSetRequestsHandler(),\n            new AsyncSetResultsHandler());\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubgetorsetasync","title":"[\u5f02\u6b65] AidlVehicleStub.getOrSetAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalRequestType, VhalRequestsType&gt; void getOrSetAsync(\n        List&lt;AsyncGetSetRequest&gt; vehicleStubAsyncRequests,\n        VehicleStubCallbackInterface vehicleStubCallback,\n        AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler,\n        AsyncResultsHandler asyncResultsHandler) {\n    prepareAndConvertAsyncRequests(vehicleStubAsyncRequests, vehicleStubCallback,\n            asyncRequestsHandler);\n\n    try {\n        asyncRequestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n\n    ...\n}\n</code></pre> <p>VehicleStubCallbackInterface vehicleStubCallback \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 asyncRequestsHandler \u5c31\u662f new AsyncSetRequestsHandler() \u3002 asyncResultsHandler \u5c31\u662f new AsyncSetResultsHandler() \u3002</p> <p>\u6211\u4eec\u5206\u6210\u4e24\u90e8\u5206\u6765\u770b\uff1a</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubprepareandconvertasyncrequests","title":"[\u5f02\u6b65] AidlVehicleStub.prepareAndConvertAsyncRequests()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalRequestType, VhalRequestsType&gt; void prepareAndConvertAsyncRequests(\n                List&lt;AsyncGetSetRequest&gt; vehicleStubRequests,\n                VehicleStubCallbackInterface clientCallback,\n                AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler) {\n    asyncRequestsHandler.allocateVhalRequestSize(vehicleStubRequests.size());\n    synchronized (mLock) {\n        try {\n            clientCallback.linkToDeath(() -&gt; {                \n                synchronized (mLock) {\n                    mPendingAsyncRequestPool.removeRequestsForCallback(clientCallback);\n                }\n            });\n        } catch (RemoteException e) {\n            // Binder\u5df2\u7ecf\u6b7b\u4ea1\u3002\n            throw new IllegalStateException(\"Failed to link callback to death recipient, the \"\n                    + \"client maybe already died\");\n        }\n\n        for (int i = 0; i &lt; vehicleStubRequests.size(); i++) {\n            AsyncGetSetRequest vehicleStubRequest = vehicleStubRequests.get(i);\n            long vhalRequestId = mRequestId.getAndIncrement();\n            AsyncRequestInfo requestInfo = new AsyncRequestInfo(\n                    vhalRequestId, vehicleStubRequest.getServiceRequestId(), clientCallback,\n                    vehicleStubRequest.getTimeoutUptimeMs());\n            mPendingAsyncRequestPool.addRequest(requestInfo);\n            asyncRequestsHandler.addVhalRequest(vhalRequestId,\n                    vehicleStubRequest.getHalPropValue());\n        }\n    }\n\n}\n</code></pre> <p>AsyncRequestInfo \u7684\u6210\u5458\u53d8\u91cf mClientCallback \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 \u800c AsyncRequestInfo \u53c8\u88ab\u6dfb\u52a0\u5230 mPendingRequestPool \u7684\u6210\u5458\u53d8\u91cf mPendingRequestPool \u4e2d \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate static class AsyncRequestInfo implements LongRequestIdWithTimeout {\n    private final int mServiceRequestId;\n    private final VehicleStubCallbackInterface mClientCallback;\n    private final long mTimeoutUptimeMs;\n    private final long mVhalRequestId;\n\n    private AsyncRequestInfo(\n            long vhalRequestId,\n            int serviceRequestId,\n            VehicleStubCallbackInterface clientCallback,\n            long timeoutUptimeMs) {\n        mVhalRequestId = vhalRequestId;\n        mServiceRequestId = serviceRequestId;\n        mClientCallback = clientCallback;\n        mTimeoutUptimeMs = timeoutUptimeMs;\n    }\n\n    @Override\n    public long getRequestId() {\n        return mVhalRequestId;\n    }\n\n    @Override\n    public long getTimeoutUptimeMs() {\n        return mTimeoutUptimeMs;\n    }\n\n    public int getServiceRequestId() {\n        return mServiceRequestId;\n    }\n\n    public VehicleStubCallbackInterface getClientCallback() {\n        return mClientCallback;\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncsetrequestshandlersendrequeststovhal_1","title":"[\u5f02\u6b65] AsyncSetRequestsHandler.sendRequestsToVhal()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\npublic void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n        throws RemoteException, ServiceSpecificException {\n    SetValueRequests largeParcelableRequest = new SetValueRequests();\n    largeParcelableRequest.payloads = mVhalRequestItems;\n    largeParcelableRequest = (SetValueRequests) LargeParcelable.toLargeParcelable(\n            largeParcelableRequest, () -&gt; {\n                SetValueRequests newRequests = new SetValueRequests();\n                newRequests.payloads = new SetValueRequest[0];\n                return newRequests;\n    });\n    iVehicle.setValues(callbackForVhal, largeParcelableRequest);\n}\n</code></pre> <p>iVehicle \u662f VehicleHAL \u670d\u52a1\uff0c\u6240\u4ee5\u8c03\u5230\u5bf9\u7aef\u63a5\u53e3\u4e86\u3002 \u8fd9\u91cc\u7684 callbackForVhal \u662f GetSetValuesCallback \u3002 \u6211\u4eec\u5148\u4e0d\u5206\u6790 VehicleHAL \u670d\u52a1 \uff0c\u5148\u628a car-service \u63a5\u5230\u56de\u8c03\u7684\u6d41\u7a0b\u770b\u5b8c\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluescallbackonsetvalues_1","title":"[\u5f02\u6b65] GetSetValuesCallback.onSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate final class GetSetValuesCallback extends IVehicleCallback.Stub {\n\n    ...\n\n    @Override\n    public void onSetValues(SetValueResults responses) throws RemoteException {\n        AidlVehicleStub.this.onSetValues(responses);\n    }\n\n    ...\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubonsetvalues_1","title":"[\u5f02\u6b65] AidlVehicleStub.onSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate void onSetValues(SetValueResults responses) {\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onSetValues\");\n    SetValueResults origResponses = (SetValueResults)\n            LargeParcelable.reconstructStableAIDLParcelable(responses,\n                    /* keepSharedMemory= */ false);\n    onGetSetValues(origResponses.payloads, new AsyncSetResultsHandler(),\n            mPendingSyncSetValueRequestPool);\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubongetsetvalues_1","title":"[\u5f02\u6b65] AidlVehicleStub.onGetSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalResultType&gt; void onGetSetValues(VhalResultType[] vhalResults,\n        AsyncResultsHandler asyncResultsHandler,\n        PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool) {\n    synchronized (mLock) {\n        for (VhalResultType result : vhalResults) {\n            long vhalRequestId = asyncResultsHandler.getVhalRequestId(result);\n            if (!mPendingAsyncRequestPool.contains(vhalRequestId)) {\n                // If we cannot find the request Id in the async map, we assume it is for a\n                // sync request.\n                completePendingSyncRequestLocked(pendingSyncRequestPool, vhalRequestId, result);\n                continue;\n            }\n\n            AsyncRequestInfo requestInfo = mPendingAsyncRequestPool.finishRequestIfFound(\n                    vhalRequestId);\n            if (requestInfo == null) {\n                Slogf.w(TAG,\n                        \"No pending request for ID: %s, possibly already timed out, \"\n                        + \"or cancelled, or the client already died\", vhalRequestId);\n                continue;\n            }\n            asyncResultsHandler.addVhalResult(requestInfo.getClientCallback(),\n                    requestInfo.getServiceRequestId(), result);\n        }\n    }\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub call async result callback\");\n    asyncResultsHandler.callVehicleStubCallback();\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre> <p>\u8fd9\u91cc\u8ddf\u524d\u63d0\u7684 \u540c\u6b65 \u4f8b\u5b50\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u56e0\u4e3a\u4ece mPendingAsyncRequestPool \u53ef\u4ee5\u627e\u5230 AsyncRequestInfo\u3002 requestInfo.getClientCallback() \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 \u518d\u628a\u90a3\u5230\u7684 AsyncRequestInfo \u6dfb\u52a0\u5230 AsyncResultsHandler \uff08\u5176\u5b9e\u662f AsyncSetResultsHandler \uff09\u3002 \u6700\u540e\u8c03\u7528 AsyncSetResultsHandler.callVehicleStubCallback() \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncsetresultshandleraddvhalresult","title":"[\u5f02\u6b65] AsyncSetResultsHandler.addVhalResult()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate static final class AsyncSetResultsHandler extends\n        AsyncResultsHandler&lt;SetValueResult, SetVehicleStubAsyncResult&gt; {\n    AsyncSetResultsHandler() {\n        mCallbackToResults = new ArrayMap&lt;VehicleStubCallbackInterface,\n                List&lt;SetVehicleStubAsyncResult&gt;&gt;();\n    }\n\n\n    @Override\n    void addVhalResult(VehicleStubCallbackInterface callback, int serviceRequestId,\n            SetValueResult result) {\n        addVehicleStubResult(callback, toVehicleStubResult(serviceRequestId, result));\n\n    }\n\n}\n\nprivate abstract static class AsyncResultsHandler&lt;VhalResultType, VehicleStubResultType&gt; {\n    protected Map&lt;VehicleStubCallbackInterface, List&lt;VehicleStubResultType&gt;&gt; mCallbackToResults;\n\n\n    protected void addVehicleStubResult(VehicleStubCallbackInterface callback,\n            VehicleStubResultType vehicleStubResult) {\n        if (mCallbackToResults.get(callback) == null) {\n            mCallbackToResults.put(callback, new ArrayList&lt;&gt;());\n        }\n        mCallbackToResults.get(callback).add(vehicleStubResult);\n    }\n}\n</code></pre> <p>\u628a callback \u548c result \u5173\u8054\u8d77\u6765\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncsetresultshandlercallvehiclestubcallback","title":"[\u5f02\u6b65] AsyncSetResultsHandler.callVehicleStubCallback()","text":"<pre><code>private static final class AsyncSetResultsHandler extends\n        AsyncResultsHandler&lt;SetValueResult, SetVehicleStubAsyncResult&gt; {\n    ...\n\n    @Override\n    void callVehicleStubCallback() {\n        for (Map.Entry&lt;VehicleStubCallbackInterface, List&lt;SetVehicleStubAsyncResult&gt;&gt; entry :\n                mCallbackToResults.entrySet()) {\n            entry.getKey().onSetAsyncResults(entry.getValue());\n        }\n    }\n\n    ...\n\n}\n</code></pre> <p>\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0cVehicleStubCallbackInterface \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u56de\u8c03\u5230\u4e86 PropertyHalService.onSetAsyncResults()</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#propertyhalserviceonsetasyncresults","title":"[\u5f02\u6b65] PropertyHalService.onSetAsyncResults()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n@Override\npublic void onSetAsyncResults(\n        List&lt;SetVehicleStubAsyncResult&gt; setVehicleStubAsyncResults) {\n\n    ...\n\n    sendSetValueResults(setValueResults);\n\n    if (!retryRequests.isEmpty()) {\n        mHandler.postDelayed(() -&gt; {\n            retryIfNotExpired(retryRequests);\n        }, ASYNC_RETRY_SLEEP_IN_MS);\n    }\n}\n\n\nvoid sendSetValueResults(List&lt;GetSetValueResult&gt; results) {\n    if (results.isEmpty()) {\n        return;\n    }\n    try {\n        mAsyncPropertyResultCallback.onSetValueResults(new GetSetValueResultList(results));\n    } catch (RemoteException e) {\n        Slogf.w(TAG, \"sendSetValueResults: Client might have died already\", e);\n    }\n}\n</code></pre> <p>\u524d\u9762\u5206\u6790\u5230\uff1aVehicleStubCallback \u7684\u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u4f1a\u56de\u8c03\u5230 CarPropertyManager \u7684 onSetValueResults()\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#iasyncpropertyresultcallbackonsetvalueresults","title":"[\u5f02\u6b65] IAsyncPropertyResultCallback.onSetValueResults()","text":"<pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\nprivate final AsyncPropertyResultCallback mAsyncPropertyResultCallback = new AsyncPropertyResultCallback();\n\nprivate class AsyncPropertyResultCallback extends IAsyncPropertyResultCallback.Stub {\n\n    @Override\n    public IBinder asBinder() {\n        return this;\n    }\n\n    @Override\n    public void onGetValueResults(GetSetValueResultList getValueResults) {\n        ...\n    }\n\n    @Override\n    public void onSetValueResults(GetSetValueResultList setValueResults) {\n        ...\n    }\n\n    @SuppressLint(\"WrongConstant\")\n    private &lt;RequestType extends AsyncPropertyRequest, CallbackType, ResultType&gt; void onResults(\n            List&lt;GetSetValueResult&gt; results,\n            PropertyResultCallback&lt;CallbackType, ResultType&gt; propertyResultCallback) {\n        ...\n    }\n}\n</code></pre> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5206\u6790\u5b8c\u4e86 car-service \u7aef set() \u540c\u6b65\u3001\u5f02\u6b65\u8bbe\u7f6e\u5c5e\u6027\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u540e\u56de\u8c03\u7684\u8fc7\u7a0b\u3002 \u4f46\u6211\u4eec\u8fd8\u672a\u5206\u6790 VehicleHAL \u7aef\u7684\u4ee3\u7801\u3002\u5728 AsyncSetRequestsHandler.sendRequestsToVhal() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\uff1a</p> <pre><code>iVehicle.setValues(callbackForVhal, largeParcelableRequest);\n</code></pre> <p>iVehicle \u662f VehicleHAL \u3002\u6839\u636e\u524d\u9762 VehicleHAL \u521d\u59cb\u5316\u6d41\u7a0b\u6211\u4eec\u77e5\u9053\uff0c\u8c03\u7528 setValues() \u51fd\u6570\u4f1a\u8c03\u5230 DefaultVehicleHal.cpp \u7684 setValues() \u51fd\u6570\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalsetvalues","title":"DefaultVehicleHal::setValues()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nScopedAStatus DefaultVehicleHal::setValues(const CallbackType&amp; callback,\n                                           const SetValueRequests&amp; requests) {\n    ATRACE_CALL();\n\n    if (callback == nullptr) {\n        return ScopedAStatus::fromExceptionCode(EX_NULL_POINTER);\n    }\n\n    // \u4ece\u7a33\u5b9a\u7684\u5927\u578b\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\u4e2d\u53cd\u5e8f\u5217\u5316\u7ed3\u679c\n    expected&lt;LargeParcelableBase::BorrowedOwnedObject&lt;SetValueRequests&gt;, ScopedAStatus&gt;\n                                                                         deserializedResults = fromStableLargeParcelable(requests);\n\n    if (!deserializedResults.ok()) {\n        ALOGE(\"setValues: failed to parse setValues requests\");\n        return std::move(deserializedResults.error());\n    }\n\n    // \u83b7\u53d6\u53cd\u5e8f\u5217\u5316\u7ed3\u679c\u4e2d\u7684\u8bf7\u6c42\u5217\u8868\n    const std::vector&lt;SetValueRequest&gt;&amp; setValueRequests =\n            deserializedResults.value().getObject()-&gt;payloads;\n\n    // \u5931\u8d25\u7684\u7ed3\u679c\u5217\u8868\n    std::vector&lt;SetValueResult&gt; failedResults;\n    // \u53d1\u9001\u5230\u786c\u4ef6\u7684\u8bf7\u6c42\u5217\u8868\n    std::vector&lt;SetValueRequest&gt; hardwareRequests;\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u7684\u8bf7\u6c42ID\n    auto maybeRequestIds = checkDuplicateRequests(setValueRequests);\n\n    if (!maybeRequestIds.ok()) {\n        ALOGE(\"setValues: duplicate request ID\");\n        return toScopedAStatus(maybeRequestIds, StatusCode::INVALID_ARG);\n    }\n\n    for (auto&amp; request : setValueRequests) {\n        int64_t requestId = request.requestId;\n\n        if (auto result = checkWritePermission(request.value); !result.ok()) {\n            ALOGW(\"property does not support writing: %s\", getErrorMsg(result).c_str());\n            // \u5c06\u5931\u8d25\u7684\u7ed3\u679c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            failedResults.push_back(SetValueResult{\n                    .requestId = requestId,\n                    .status = getErrorCode(result),\n            });\n            continue;\n        }\n\n        if (auto result = checkProperty(request.value); !result.ok()) {\n            ALOGW(\"setValues[%\" PRId64 \"]: property is not valid: %s\", requestId,\n                  getErrorMsg(result).c_str());\n            // \u5c06\u5931\u8d25\u7684\u7ed3\u679c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            failedResults.push_back(SetValueResult{\n                    .requestId = requestId,\n                    .status = StatusCode::INVALID_ARG,\n            });\n            continue;\n        }\n\n        // \u5c06\u8bf7\u6c42\u6dfb\u52a0\u5230\u53d1\u9001\u5230\u786c\u4ef6\u7684\u5217\u8868\u4e2d\n        hardwareRequests.push_back(request);\n    }\n\n    // \u786c\u4ef6\u8bf7\u6c42\u7684ID\u96c6\u5408\n    std::unordered_set&lt;int64_t&gt; hardwareRequestIds;\n\n    for (const auto&amp; request : hardwareRequests) {\n        // \u5c06\u786c\u4ef6\u8bf7\u6c42\u7684ID\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        hardwareRequestIds.insert(request.requestId);\n    }\n\n    std::shared_ptr&lt;SetValuesClient&gt; client;\n\n    {\n        // \u52a0\u9501\uff0c\u786e\u4fddonBinderDied\u4e0d\u4f1a\u5e76\u53d1\u8c03\u7528\n        std::scoped_lock lockGuard(mLock);\n        if (!monitorBinderLifeCycleLocked(callback-&gt;asBinder().get())) {\n            // \u8fd4\u56de\u5ba2\u6237\u7aef\u6b7b\u4ea1\u7684\u5f02\u5e38\u72b6\u6001\n            return ScopedAStatus::fromExceptionCodeWithMessage(EX_TRANSACTION_FAILED,\n                                                               \"client died\");\n        }\n        // \u83b7\u53d6\u6216\u521b\u5efa\u5ba2\u6237\u7aef\n        client = getOrCreateClient(&amp;mSetValuesClients, callback, mPendingRequestPool);\n    }\n\n    if (auto addRequestResult = client-&gt;addRequests(hardwareRequestIds); !addRequestResult.ok()) {\n        ALOGE(\"setValues[%s], failed to add pending requests, error: %s\",\n              toString(hardwareRequestIds).c_str(), getErrorMsg(addRequestResult).c_str());\n        return toScopedAStatus(addRequestResult);\n    }\n\n    if (!failedResults.empty()) {\n        // \u5c06\u5df2\u77e5\u7684\u5931\u8d25\u7ed3\u679c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n        client-&gt;sendResults(std::move(failedResults));\n    }\n\n    if (hardwareRequests.empty()) {\n        return ScopedAStatus::ok();\n    }\n\n    if (StatusCode status =\n                mVehicleHardware-&gt;setValues(client-&gt;getResultCallback(), hardwareRequests);\n            status != StatusCode::OK) {\n        // \u5c06\u5df2\u77e5\u7684\u5931\u8d25\u7ed3\u679c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n        client-&gt;tryFinishRequests(hardwareRequestIds);\n        ALOGE(\"setValues[%s], failed to set value to VehicleHardware, status: %d\",\n              toString(hardwareRequestIds).c_str(), toInt(status));\n        return ScopedAStatus::fromServiceSpecificErrorWithMessage(\n                toInt(status), \"failed to set value to VehicleHardware\");\n    }\n\n    return ScopedAStatus::ok();\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u6211\u4eec\u628a\u5173\u952e\u90e8\u5206\u6574\u7406\u51fa\u6765\uff1a</p> <ul> <li> <p>callback     java\u7aef\u4f20\u8fdb\u6765\u7684\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f IVehicleCallback.aidl</p> </li> <li> <p>mPendingRequestPool     mPendingRequestPool \u662f\u5728 DefaultVehicleHal \u6784\u9020\u51fd\u6570\u91cc\u521b\u5efa\u7684\u3002     PendingRequestPool \u7684\u529f\u80fd\u5728\u524d\u9762\u6709\u8be6\u7ec6\u4ecb\u7ecd\u3002</p> </li> <li> <p>mSetValuesClients     \u5148\u8bb0\u4f4f mSetValuesClients \u8fd9\u4e2a map \u7684 vaule \u7c7b\u578b\u3002</p> </li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\nusing SetValuesClient =  \nGetSetValuesClient&lt;aidl::android::hardware::automotive::vehicle::SetValueResult,  \naidl::android::hardware::automotive::vehicle::SetValueResults&gt;;\n\nstd::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;SetValuesClient&gt;&gt; mSetValuesClients  \nGUARDED_BY(mLock);\n</code></pre> <ul> <li>client</li> </ul> <pre><code>std::shared_ptr&lt;SetValuesClient&gt; client = getOrCreateClient(&amp;mSetValuesClients, callback, mPendingRequestPool);\n</code></pre> <ul> <li> <p>client-&gt;addRequests(hardwareRequestIds)     \u6dfb\u52a0\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002</p> </li> <li> <p>client-&gt;sendResults(std::move(failedResults));     \u5c06\u7ed3\u679c\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>client-&gt;tryFinishRequests(hardwareRequestIds);     \u6807\u8bb0\u8bf7\u6c42\u5df2\u5b8c\u6210\u3002</p> </li> <li> <p>mVehicleHardware-&gt;setValues()</p> </li> </ul> <pre><code>mVehicleHardware-&gt;setValues(client-&gt;getResultCallback(), hardwareRequests);\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u5173\u952e\u7684\u5c31\u662f\u8fd9\u4e24\u6b65\uff1a</p> <ul> <li>\u8c03\u7528 getOrCreateClient() \u83b7\u53d6\u6216\u521b\u5efa\u5ba2\u6237\u7aef\u3002</li> <li>\u8c03\u7528 FakeVehicleHardware::setValues() \u8bbe\u7f6e\u5c5e\u6027\u3002</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalgetorcreateclient","title":"DefaultVehicleHal::getOrCreateClient()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\n/**\n * @brief \u83b7\u53d6\u6216\u521b\u5efa\u5ba2\u6237\u7aef\u5bf9\u8c61\n * \n * @tparam T \u5ba2\u6237\u7aef\u5bf9\u8c61\u7c7b\u578b\n * @param clients \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u6620\u5c04\u8868\n * @param callback \u56de\u8c03\u51fd\u6570\n * @param pendingRequestPool \u6302\u8d77\u8bf7\u6c42\u6c60\n * @return std::shared_ptr&lt;T&gt; \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u5171\u4eab\u6307\u9488\n */\ntemplate &lt;class T&gt;\nstd::shared_ptr&lt;T&gt; DefaultVehicleHal::getOrCreateClient(\n        std::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;T&gt;&gt;* clients,\n        const CallbackType&amp; callback, std::shared_ptr&lt;PendingRequestPool&gt; pendingRequestPool) {\n    const AIBinder* clientId = callback-&gt;asBinder().get();\n    if (clients-&gt;find(clientId) == clients-&gt;end()) {\n        (*clients)[clientId] = std::make_shared&lt;T&gt;(pendingRequestPool, callback);\n    }\n    return (*clients)[clientId];\n}\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u6a21\u677f\u51fd\u6570\uff0c\u6839\u636e clients \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u77e5\u9053\uff0cT \u5c31\u662f GetSetValuesClient \u3002 \u6211\u4eec\u627e\u4e0b GetSetValuesClient \u662f\u5728\u54ea\u91cc\u5b9a\u4e49\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#connectedclient","title":"ConnectedClient","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\n// \u4e00\u4e2a\u8868\u793a\u5e26\u6709\u56de\u8c03\u63a5\u53e3\u7684\u7ed1\u5b9a\u5668\u5ba2\u6237\u7aef\u7684\u7c7b\u3002\u6bcf\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u4f8b\u5982GetValues\u6216SetValues\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed1\u5b9a\u5668\u5ba2\u6237\u7aef\u662f\u4e00\u4e2a\u72ec\u7acb\u7684ConnectedClient\u3002\n// \u5bf9\u4e8e\u4e00\u4e2aConnectedClient\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u6765\u7ba1\u7406\u6240\u6709\u5f85\u5904\u7406\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u8bf7\u6c42ID\u5fc5\u987b\u5bf9\u4e8e\u4e00\u4e2a\u5ba2\u6237\u7aef\u662f\u552f\u4e00\u7684\u3002\n// \u6211\u4eec\u8fd8\u7ba1\u7406\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u4e00\u7ec4\u56de\u8c03\u51fd\u6570\uff0c\u4f8b\u5982timeoutCallback\uff0c\u5b83\u53ef\u4ee5\u4f20\u9012\u7ed9\u786c\u4ef6\u3002\n// \u8fd9\u4e2a\u7c7b\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\nclass ConnectedClient {\n  public:\n    using CallbackType =\n            std::shared_ptr&lt;aidl::android::hardware::automotive::vehicle::IVehicleCallback&gt;;\n\n    ConnectedClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool, CallbackType callback);\n\n    // \u83b7\u53d6\u6b64\u5ba2\u6237\u7aef\u7684\u552f\u4e00ID\u3002\n    const void* id();\n\n    // \u6dfb\u52a0\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002\u8fd9\u4e9b\u8bf7\u6c42\u5c06\u88ab\u6ce8\u518c\u4e3a\u5f85\u5904\u7406\u8bf7\u6c42\uff0c\u76f4\u5230\u8c03\u7528tryFinishRequests\u4e3a\u6b62\u3002\n    // \u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u8bf7\u6c42ID\u4e0e\u5f85\u5904\u7406\u8bf7\u6c42ID\u4e4b\u4e00\u91cd\u590d\uff0c\u5219\u8fd4\u56deINVALID_ARG\u9519\u8bef\uff1b\n    // \u5982\u679c\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u5df2\u6ee1\u4e14\u65e0\u6cd5\u518d\u6dfb\u52a0\u8bf7\u6c42\uff0c\u5219\u8fd4\u56deTRY_AGAIN\u9519\u8bef\u3002\n    VhalResult&lt;void&gt; addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds);\n\n    // \u6807\u8bb0\u8bf7\u6c42\u5df2\u5b8c\u6210\u3002\u8fd4\u56de\u4e00\u4e2a\u5df2\u5b8c\u6210\u7684\u5f85\u5904\u7406\u8bf7\u6c42ID\u5217\u8868\u3002\u5b83\u5fc5\u987b\u662f\u8bf7\u6c42\u7684\u8bf7\u6c42ID\u7684\u96c6\u5408\u3002\n    std::unordered_set&lt;int64_t&gt; tryFinishRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds);\n\n  protected:\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8d85\u65f6\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    virtual std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; getTimeoutCallback() = 0;\n\n    const std::shared_ptr&lt;PendingRequestPool&gt; mRequestPool;\n    const CallbackType mCallback;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclient","title":"GetSetValuesClient","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\n// \u4e00\u4e2a\u8868\u793a\u8c03\u7528IVehicle.setValues\u6216IVehicle.getValues\u7684\u5ba2\u6237\u7aef\u7684\u7c7b\u3002\ntemplate &lt;class ResultType, class ResultsType&gt;\nclass GetSetValuesClient final : public ConnectedClient {\n  public:\n    GetSetValuesClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool, CallbackType callback);\n\n    // \u5c06\u7ed3\u679c\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002\n    void sendResults(std::vector&lt;ResultType&gt;&amp;&amp; results);\n\n    // \u5c06\u6bcf\u4e2a\u7ed3\u679c\u5206\u522b\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002\u6bcf\u4e2a\u7ed3\u679c\u5c06\u901a\u8fc7\u4e00\u4e2a\u56de\u8c03\u8c03\u7528\u53d1\u9001\u3002\n    void sendResultsSeparately(const std::vector&lt;ResultType&gt;&amp; results);\n\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5b8c\u6210\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    std::shared_ptr&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt; getResultCallback();\n\n  protected:\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8d85\u65f6\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; getTimeoutCallback() override;\n\n  private:\n    // \u4ee5\u4e0b\u6210\u5458\u4ec5\u5728\u6784\u9020\u671f\u95f4\u521d\u59cb\u5316\u3002\n    std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; mTimeoutCallback;\n    std::shared_ptr&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt; mResultCallback;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclientaddrequests","title":"GetSetValuesClient::addRequests()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nVhalResult&lt;void&gt; ConnectedClient::addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds) {\n    return mRequestPool-&gt;addRequests(id(), requestIds, getTimeoutCallback());\n}\n</code></pre> <p>\u5148\u6765\u770b\u8fd9\u4e2a mRequestPool \u5230\u5e95\u662f\u4ec0\u4e48\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\nconst std::shared_ptr&lt;PendingRequestPool&gt; mRequestPool;\n</code></pre> <p>mRequestPool \u662f\u5728 ConnectedClient \u6784\u9020\u51fd\u6570\u91cc\u521d\u59cb\u5316\u7684\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nConnectedClient::ConnectedClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool,\n                                 std::shared_ptr&lt;IVehicleCallback&gt; callback)\n    : mRequestPool(requestPool), mCallback(callback) {}\n</code></pre> <p>\u6839\u636e\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u8fd9\u4e2a\u6a21\u677f\u51fd\u6570\u8c03\u7528 ConnectedClient \u6784\u9020\u51fd\u6570\u3002</p> <pre><code>template &lt;class ResultType, class ResultsType&gt;\nGetSetValuesClient&lt;ResultType, ResultsType&gt;::GetSetValuesClient(\n        std::shared_ptr&lt;PendingRequestPool&gt; requestPool, std::shared_ptr&lt;IVehicleCallback&gt; callback)\n    : ConnectedClient(requestPool, callback) {\n    // \u521b\u5efa\u4e00\u4e2a\u6307\u5411PendingRequestPool::TimeoutCallbackFunc\u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488mTimeoutCallback\n    // \u8be5\u56de\u8c03\u51fd\u6570\u7528\u4e8e\u5904\u7406\u8d85\u65f6\u8bf7\u6c42\n    mTimeoutCallback = std::make_shared&lt;const PendingRequestPool::TimeoutCallbackFunc&gt;(\n            [callback](const std::unordered_set&lt;int64_t&gt;&amp; timeoutIds) {\n                return onTimeout&lt;ResultType, ResultsType&gt;(callback, timeoutIds);\n            });\n    // \u590d\u5236requestPool\u5230requestPoolCopy\n    auto requestPoolCopy = mRequestPool;\n    // \u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u7684id\uff0c\u5e76\u8d4b\u503c\u7ed9clientId\n    const void* clientId = id();\n    // \u521b\u5efa\u4e00\u4e2a\u6307\u5411std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;\u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488mResultCallback\n    // \u8be5\u56de\u8c03\u51fd\u6570\u7528\u4e8e\u5904\u7406\u83b7\u53d6\u6216\u8bbe\u7f6e\u503c\u7684\u56de\u8c03\n    mResultCallback = std::make_shared&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt;(\n            [clientId, callback, requestPoolCopy](std::vector&lt;ResultType&gt; results) {\n                return getOrSetValuesCallback&lt;ResultType, ResultsType&gt;(\n                        clientId, callback, std::move(results), requestPoolCopy);\n            });\n}\n</code></pre> <p>\u518d\u8fd4\u56de\u5230 DefaultVehicleHal::getOrCreateClient() \u4e2d\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\ntemplate &lt;class T&gt;\nstd::shared_ptr&lt;T&gt; DefaultVehicleHal::getOrCreateClient(\n        std::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;T&gt;&gt;* clients,\n        const CallbackType&amp; callback, std::shared_ptr&lt;PendingRequestPool&gt; pendingRequestPool) {\n    const AIBinder* clientId = callback-&gt;asBinder().get();\n    if (clients-&gt;find(clientId) == clients-&gt;end()) {\n        (*clients)[clientId] = std::make_shared&lt;T&gt;(pendingRequestPool, callback);\n    }\n    return (*clients)[clientId];\n}\n</code></pre> <p>\u770b\u5230\u4e86\u5427\uff1a</p> <pre><code>std::make_shared&lt;T&gt;(pendingRequestPool, callback)\n</code></pre> <p>\u5728\u8fd4\u56de\u5230 \u8c03\u7528 DefaultVehicleHal::getOrCreateClient() \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f DefaultVehicleHal::setValues() \uff0c\u6b64\u65f6\u53ef\u4ee5\u77e5\u9053\u4e24\u4ef6\u4e8b\uff1a</p> <ul> <li>\u8fd9\u91cc\u7684 pendingRequestPool \u5176\u5b9e\u5c31\u662f DefaultVehicleHal \u7684\u6210\u5458\u53d8\u91cf mPendingRequestPool\uff0c\u5176\u5728 DefaultVehicleHal \u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u3002\u4e5f\u5c31\u662f PendingRequestPool\u3002</li> <li>\u8fd9\u91cc\u7684 callback \u5c31\u662fjava\u7aef\u4f20\u8fdb\u6765\u7684\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f IVehicleCallback.aidl</li> </ul> <p>\u597d\u4e86\uff0c\u56de\u5230\u6211\u4eec\u7684 ConnectedClient::addRequests() \u51fd\u6570\u91cc\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nVhalResult&lt;void&gt; ConnectedClient::addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds) {\n    return mRequestPool-&gt;addRequests(id(), requestIds, getTimeoutCallback());\n}\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528\u7684\u662f PendingRequestPool::addRequests() \u51fd\u6570\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#pendingrequestpooladdrequests","title":"PendingRequestPool::addRequests()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/PendingRequestPool.cpp\n\nVhalResult&lt;void&gt; PendingRequestPool::addRequests(\n        const void* clientId, const std::unordered_set&lt;int64_t&gt;&amp; requestIds,\n        std::shared_ptr&lt;const TimeoutCallbackFunc&gt; callback) {\n    // \u5bf9\u4e92\u65a5\u9501\u8fdb\u884c\u52a0\u9501\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n    std::scoped_lock&lt;std::mutex&gt; lockGuard(mLock);\n    std::list&lt;PendingRequest&gt;* pendingRequests;\n    // \u521d\u59cb\u5316\u5f85\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\u4e3a0\n    size_t pendingRequestCount = 0;\n    // \u5982\u679c mPendingRequestsByClient \u4e2d\u5b58\u5728\u6307\u5b9a\u7684 clientId\n    if (mPendingRequestsByClient.find(clientId) != mPendingRequestsByClient.end()) {        \n        pendingRequests = &amp;mPendingRequestsByClient[clientId];\n        for (const auto&amp; pendingRequest : *pendingRequests) {\n            // \u83b7\u53d6\u5f53\u524dPendingRequest\u7684\u8bf7\u6c42ID\u96c6\u5408\n            const auto&amp; pendingRequestIds = pendingRequest.requestIds;\n            // \u904d\u5386\u4f20\u5165\u7684\u8bf7\u6c42ID\u96c6\u5408\n            for (int64_t requestId : requestIds) {\n                // \u5982\u679c\u5f53\u524dPendingRequest\u7684\u8bf7\u6c42ID\u96c6\u5408\u4e2d\u5b58\u5728\u91cd\u590d\u7684\u8bf7\u6c42ID\n                if (pendingRequestIds.find(requestId) != pendingRequestIds.end()) {\n                    return StatusError(StatusCode::INVALID_ARG)\n                           &lt;&lt; \"duplicate request ID: \" &lt;&lt; requestId;\n                }\n            }\n            // \u7d2f\u52a0\u5df2\u6709PendingRequest\u7684\u8bf7\u6c42ID\u6570\u91cf\n            pendingRequestCount += pendingRequestIds.size();\n        }\n    } else {\n        // \u4e3a\u8be5clientId\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u7684PendingRequest\u5217\u8868\n        pendingRequests = &amp;mPendingRequestsByClient[clientId];\n    }\n\n    // \u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42ID\u6570\u91cf\u8d85\u8fc7\u4e86\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5141\u8bb8\u7684\u6700\u5927\u5f85\u5904\u7406\u8bf7\u6c42\u6570\u91cf\n    if (requestIds.size() &gt; MAX_PENDING_REQUEST_PER_CLIENT - pendingRequestCount) {\n        return StatusError(StatusCode::TRY_AGAIN)\n               &lt;&lt; \"too many pending requests\";\n    }\n\n    int64_t currentTime = elapsedRealtimeNano();\n    // \u6839\u636e\u5f53\u524d\u65f6\u95f4\uff0c\u8ba1\u7b97\u8d85\u65f6\u65f6\u95f4\u6233\n    int64_t timeoutTimestamp = currentTime + mTimeoutInNano;\n\n    // \u5c06\u65b0\u7684PendingRequest\u6dfb\u52a0\u5230PendingRequest\u5217\u8868\u4e2d\n    pendingRequests-&gt;push_back({\n            .requestIds = std::unordered_set&lt;int64_t&gt;(requestIds.begin(), requestIds.end()),\n            .timeoutTimestamp = timeoutTimestamp,\n            .callback = callback,\n    });\n\n    return {};\n}\n</code></pre> <p>\u770b\u5230\u8fd9\u91cc\u6709\u70b9\u8ff7\u832b\uff0c\u5148\u4e0d\u7ba1\uff0c\u518d\u5c1d\u8bd5\u5f80\u4e0b\u770b\u770b\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclientsendresults","title":"GetSetValuesClient::sendResults()","text":"<p>\u5728\u524d\u9762 DefaultVehicleHal::setValues() \u4e2d\uff0c\u5982\u679c\u8bbe\u7f6e\u5c5e\u6027\u5931\u8d25\uff08\u6ca1\u6709\u6743\u9650\u3001\u5c5e\u6027ID\u4e0d\u5408\u6cd5\uff09\uff0c\u5219\u4e3b\u52a8\u8c03\u7528 client-&gt;sendResults(std::move(failedResults)) \u628a\u9519\u8bef\u4fe1\u606f\u56de\u8c03\u7ed9\u5ba2\u6237\u7aef\u3002</p> <pre><code>std::vector&lt;SetValueResult&gt; failedResults;\n...\n\nif (!failedResults.empty()) {\n    // \u5c06\u5df2\u77e5\u7684\u5931\u8d25\u7ed3\u679c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n    client-&gt;sendResults(std::move(failedResults));\n}\n</code></pre> <p>\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\ntemplate &lt;class ResultType, class ResultsType&gt;  \nvoid GetSetValuesClient&lt;ResultType, ResultsType&gt;::sendResults(std::vector&lt;ResultType&gt;&amp;&amp; results) {  \n    return sendGetOrSetValueResults&lt;ResultType, ResultsType&gt;(mCallback, std::move(results));  \n}\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u7684 ResultsType \u5c31\u662f SetValueResult \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#sendgetorsetvalueresults","title":"sendGetOrSetValueResults","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\n// \u5c06\u6240\u6709\u7684 GetValue/SetValue \u7ed3\u679c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u4e00\u6b21\u6027\u53d1\u9001\ntemplate &lt;class ResultType, class ResultsType&gt;\nvoid sendGetOrSetValueResults(std::shared_ptr&lt;IVehicleCallback&gt; callback,\n                              std::vector&lt;ResultType&gt;&amp;&amp; results) {\n    ResultsType parcelableResults;\n    ScopedAStatus status = vectorToStableLargeParcelable(std::move(results), &amp;parcelableResults);\n    // \u68c0\u67e5\u7ed3\u679c\u662f\u5426\u6210\u529f\u8f6c\u6362\u4e3aParcelable\n    if (status.isOk()) {\n        // \u8c03\u7528\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u68c0\u67e5\u56de\u8c03\u662f\u5426\u6210\u529f\n        if (ScopedAStatus callbackStatus = callCallback(callback, parcelableResults);\n            !callbackStatus.isOk()) {\n            // \u6253\u5370\u9519\u8bef\u4fe1\u606f\n            ALOGE(\"failed to call GetOrSetValueResults callback, client ID: %p, error: %s, \"\n                  \"exception: %d, service specific error: %d\",\n                  callback-&gt;asBinder().get(), callbackStatus.getMessage(),\n                  callbackStatus.getExceptionCode(), callbackStatus.getServiceSpecificError());\n        }\n        return;\n    }\n    int statusCode = status.getServiceSpecificError();\n    ALOGE(\"failed to marshal result into large parcelable, error: \"\n          \"%s, code: %d\",\n          status.getMessage(), statusCode);\n    // \u5206\u522b\u53d1\u9001GetOrSetValueResults\u7684\u7ed3\u679c\n    sendGetOrSetValueResultsSeparately&lt;ResultType, ResultsType&gt;(callback,\n                                                                parcelableResults.payloads);\n}\n</code></pre> <p>\u56e0\u4e3a\u6211\u4eec\u7684\u7c7b\u578b\u662f SetValueResult \uff0c\u6240\u4ee5\u8fd9\u91cc\u7684 callCallback \u5bf9\u5e94\u7684\u662f\u8fd9\u4e2a\u6a21\u677f\u663e\u5f0f\u5177\u4f53\u5316\u51fd\u6570\u3002</p> <pre><code>template &lt;&gt;\nScopedAStatus callCallback&lt;SetValueResults&gt;(std::shared_ptr&lt;IVehicleCallback&gt; callback,\n                                            const SetValueResults&amp; results) {\n    return callback-&gt;onSetValues(results);\n}\n</code></pre> <p>\u8fd9\u91cc\u6e05\u695a\u7684\u770b\u5230\uff0c\u8c03\u7528\u7684\u5c31\u662f IVehicleCallback \u7684 onSetValues() \u56de\u8c03\u51fd\u6570\u3002 \u6700\u7ec8\u5c31\u4f1a\u901a\u8fc7 IPC \u8d70\u5230 \u524d\u9762\u63d0\u5230\u7684 GetSetValuesCallback.onSetValues() \u51fd\u6570\u91cc\u3002 \u4f46\uff0c\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9\u3002\u8fd9\u91cc\u53ea\u662f\u9519\u8bef\u7684\u60c5\u51b5\u7684\u56de\u8c03\u3002\u6211\u4eec\u8fd8\u662f\u5f97\u56de\u5230 DefaultVehicleHal::setValues() \u91cc\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 FakeVehicleHardware::setValues() \u8bbe\u7f6e\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#fakevehiclehardwaresetvalues","title":"FakeVehicleHardware::setValues()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nStatusCode FakeVehicleHardware::setValues(std::shared_ptr&lt;const SetValuesCallback&gt; callback,\n                                          const std::vector&lt;SetValueRequest&gt;&amp; requests) {\n    for (auto&amp; request : requests) {\n        if (FAKE_VEHICLEHARDWARE_DEBUG) {\n            ALOGD(\"Set value for property ID: %d\", request.value.prop);\n        }\n\n        // \u5728\u771f\u5b9e\u7684VHAL\u5b9e\u73b0\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u8fd9\u91cc\u5c06setValue\u8bf7\u6c42\u53d1\u9001\u5230\u8f66\u8f86\u603b\u7ebf\uff0c\n        // \u6216\u8005\u4f60\u53ef\u4ee5\u5728setValue\u4e2d\u53d1\u9001\u8bf7\u6c42\uff0c\u8be5\u51fd\u6570\u5728\u5904\u7406\u7a0b\u5e8f\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002\n        // \u5982\u679c\u4f60\u51b3\u5b9a\u5728\u8fd9\u91cc\u53d1\u9001setValue\u8bf7\u6c42\uff0c\u4f60\u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u7b49\u5f85\u54cd\u5e94\uff0c\n        // \u5904\u7406\u7a0b\u5e8f\u7ebf\u7a0b\u5e94\u8be5\u5904\u7406setValue\u54cd\u5e94\u3002\n        mPendingSetValueRequests.addRequest(request, callback);\n    }\n\n    return StatusCode::OK;\n}\n</code></pre> <p>\u4ece\u8fd9\u91cc\u7684\u6ce8\u91ca\u53ef\u4ee5\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u91cc\u53ea\u662f\u7ed9\u51fa\u4e86\u4e00\u4e2ademo\u544a\u8bc9\u6211\u4eec\u600e\u4e48\u5199VehicleHardware\u3002\u6240\u4ee5\u8fd9\u91cc\u5982\u4f55\u56de\u8c03\u56de\u53bb\u4e5f\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\u3002 \u601d\u8def\u5c31\u662f\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5982\u679c\u6709\u4e8b\u4ef6\uff08set\u3001get\uff09\u8bf7\u6c42\uff0c\u5c31\u5728\u540e\u53f0\u7ebf\u7a0b\u5904\u7406\u597d\u4e8b\u4ef6\uff0c\u5e76\u901a\u8fc7 callback \u56de\u8c03\u5230\u5ba2\u6237\u7aef\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#get","title":"get \u83b7\u53d6\u5c5e\u6027","text":"","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertymanagersetpropertiesasync_1","title":"CarPropertyManager.setPropertiesAsync()","text":"<pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\n@ApiRequirements(minCarVersion = ApiRequirements.CarVersion.UPSIDE_DOWN_CAKE_0,\n        minPlatformVersion = ApiRequirements.PlatformVersion.TIRAMISU_0)\npublic void getPropertiesAsync(\n        @NonNull List&lt;GetPropertyRequest&gt; getPropertyRequests,\n        long timeoutInMs,\n        @Nullable CancellationSignal cancellationSignal,\n        @Nullable Executor callbackExecutor,\n        @NonNull GetPropertyCallback getPropertyCallback) {\n    ...\n\n    try {\n        if (DBG) {\n            Log.d(TAG, \"calling CarPropertyService.getPropertiesAsync\");\n        }\n        mService.getPropertiesAsync(new AsyncPropertyServiceRequestList(\n                getPropertyServiceRequests), mAsyncPropertyResultCallback, timeoutInMs);\n    ...\n}\n</code></pre> <p>mAsyncPropertyResultCallback \u662f </p> <pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\nprivate final AsyncPropertyResultCallback mAsyncPropertyResultCallback = new AsyncPropertyResultCallback();\n\nprivate class AsyncPropertyResultCallback extends IAsyncPropertyResultCallback.Stub {\n\n    @Override\n    public IBinder asBinder() {\n        return this;\n    }\n\n    @Override\n    public void onGetValueResults(GetSetValueResultList getValueResults) {\n        ...\n    }\n\n    @Override\n    public void onSetValueResults(GetSetValueResultList setValueResults) {\n        ...\n    }\n\n    @SuppressLint(\"WrongConstant\")\n    private &lt;RequestType extends AsyncPropertyRequest, CallbackType, ResultType&gt; void onResults(\n            List&lt;GetSetValueResult&gt; results,\n            PropertyResultCallback&lt;CallbackType, ResultType&gt; propertyResultCallback) {\n        ...\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#carpropertyservicegetpropertiesasync","title":"CarPropertyService.getPropertiesAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/CarPropertyService.java\n\npublic void getPropertiesAsync(\n        AsyncPropertyServiceRequestList getPropertyServiceRequestsParcelable,\n        IAsyncPropertyResultCallback asyncPropertyResultCallback, long timeoutInMs) {\n    ...\n\n    mPropertyHalService.getCarPropertyValuesAsync(getPropertyServiceRequests,\n            asyncPropertyResultCallback, timeoutInMs);\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#propertyhalservicegetcarpropertyvaluesasync","title":"[\u5f02\u6b65] PropertyHalService.getCarPropertyValuesAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\npublic void getCarPropertyValuesAsync(\n        List&lt;AsyncPropertyServiceRequest&gt; serviceRequests,\n        IAsyncPropertyResultCallback asyncPropertyResultCallback,\n        long timeoutInMs) {\n    VehicleStubCallback vehicleStubCallback = createVehicleStubCallback(\n            asyncPropertyResultCallback);\n    List&lt;AsyncGetSetRequest&gt; vehicleStubRequests = prepareVehicleStubRequests(\n            GET, serviceRequests, timeoutInMs, vehicleStubCallback,\n            /* assocSetValueRequestInfo= */ null, /* outRequestInfo= */ null);\n    sendVehicleStubRequests(GET, vehicleStubRequests, vehicleStubCallback);\n}\n</code></pre> <p>IAsyncPropertyResultCallback asyncPropertyResultCallback \u662f CarPropertyManager \u7684 \u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \uff08 AsyncPropertyResultCallback \uff09\u3002</p> <p>\u518d\u627e\u4e0b vehicleStubCallback \u662f\u8c01\u3002</p> <pre><code>VehicleStubCallback vehicleStubCallback = createVehicleStubCallback(asyncPropertyResultCallback);\n</code></pre> <p>asyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n@GuardedBy(\"mLock\")  \nprivate final Map&lt;IBinder, VehicleStubCallback&gt; mResultBinderToVehicleStubCallback = new ArrayMap&lt;&gt;();\n\nVehicleStubCallback createVehicleStubCallback(\n        IAsyncPropertyResultCallback asyncPropertyResultCallback) {\n    IBinder asyncPropertyResultBinder = asyncPropertyResultCallback.asBinder();\n    VehicleStubCallback callback;\n    synchronized (mLock) {\n        if (mResultBinderToVehicleStubCallback.get(asyncPropertyResultBinder) == null) {\n            callback = new VehicleStubCallback(asyncPropertyResultCallback);\n            try {\n                callback.linkToDeath(() -&gt; onBinderDied(asyncPropertyResultBinder));\n            } catch (RemoteException e) {\n                throw new IllegalStateException(\"Linking to binder death recipient failed, \"\n                        + \"the client might already died\", e);\n            }\n            mResultBinderToVehicleStubCallback.put(asyncPropertyResultBinder, callback);\n        } else {\n            callback = mResultBinderToVehicleStubCallback.get(asyncPropertyResultBinder);\n        }\n    }\n    return callback;\n}\n\n\n\npackages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\nprivate class VehicleStubCallback extends VehicleStubCallbackInterface {\n    private final IAsyncPropertyResultCallback mAsyncPropertyResultCallback;\n    private final IBinder mClientBinder;\n\n    VehicleStubCallback(\n            IAsyncPropertyResultCallback asyncPropertyResultCallback) {\n        // mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback\n        mAsyncPropertyResultCallback = asyncPropertyResultCallback;\n        mClientBinder = asyncPropertyResultCallback.asBinder();\n    }\n\n    private void sendGetValueResults(List&lt;GetSetValueResult&gt; results) {\n        if (results.isEmpty()) {\n            return;\n        }\n        try {\n            mAsyncPropertyResultCallback.onGetValueResults(new GetSetValueResultList(results));\n        } catch (RemoteException e) {\n            Slogf.w(TAG, \"sendGetValueResults: Client might have died already\", e);\n        }\n    }\n\n    void sendSetValueResults(List&lt;GetSetValueResult&gt; results) {\n        if (results.isEmpty()) {\n            return;\n        }\n        try {\n            mAsyncPropertyResultCallback.onSetValueResults(new GetSetValueResultList(results));\n        } catch (RemoteException e) {\n            Slogf.w(TAG, \"sendSetValueResults: Client might have died already\", e);\n        }\n    }\n    ...\n}\n\n\n\npackages/services/Car/service/src/com/android/car/VehicleStub.java\n\npublic abstract static class VehicleStubCallbackInterface {\n    /**\n     * Method called when {@link getAsync} returns results.\n     */\n    public abstract void onGetAsyncResults(\n            List&lt;GetVehicleStubAsyncResult&gt; getVehicleStubAsyncResults);\n\n    /**\n     * Method called when {@link setAsync} returns results.\n     */\n    public abstract void onSetAsyncResults(\n            List&lt;SetVehicleStubAsyncResult&gt; setVehicleStubAsyncResults);\n\n    /**\n     * Register a callback that will be called when the callback binder died.\n     */\n    public abstract void linkToDeath(DeathRecipient recipient) throws RemoteException;\n\n    /**\n     * Method called when async requests timed-out.\n     *\n     * If the callback's binder is already dead, this function will not be called.\n     */\n    public abstract void onRequestsTimeout(List&lt;Integer&gt; serviceRequestIds);\n}\n</code></pre> <p>mResultBinderToVehicleStubCallback \u662f\u901a\u8fc7 IBinder \u548c VehicleStubCallback \u5173\u8054\u8d77\u6765\u3002\u6240\u4ee5\u53ea\u6709\u901a\u8fc7 CarPropertyManager \u62ff\u5230\u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \uff08 asBinder() \uff09\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5728 PropertyHalService \u91cc\u5176\u5bf9\u5e94\u7684 VehicleStubCallback\u3002</p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u70b9\uff1aVehicleStubCallback \u7684\u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002</p> <p>sendVehicleStubRequests \u4f1a\u6839\u636e requestType \u6765\u8c03\u7528 VehicleHal \u63a5\u53e3\u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\nprivate void sendVehicleStubRequests(@AsyncRequestType int requestType,\n        List&lt;AsyncGetSetRequest&gt; vehicleStubRequests, VehicleStubCallback callback) {\n    switch (requestType) {\n        case GET: // fallthrough\n        case GET_INITIAL_VALUE_FOR_SET:\n            mVehicleHal.getAsync(vehicleStubRequests, callback);\n            break;\n        case SET:\n            mVehicleHal.setAsync(vehicleStubRequests, callback);\n            break;\n    }\n}\n</code></pre> <p>\u6211\u4eec\u8fd9\u91cc\u4f8b\u5b50\u662f GET \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#vehiclehalgetasync","title":"VehicleHal.getAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/VehicleHal.java\n\npublic void getAsync(List&lt;VehicleStub.AsyncGetSetRequest&gt; getVehicleStubAsyncRequests,\n        VehicleStub.VehicleStubCallbackInterface getVehicleStubAsyncCallback) {\n    mVehicleStub.getAsync(getVehicleStubAsyncRequests, getVehicleStubAsyncCallback);\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mVehicleStub \u4f9d\u7136\u662f AidlVehicleStub \u3002 getVehicleStubAsyncRequests \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubgetasync","title":"AidlVehicleStub.getAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n@Override\npublic void getAsync(List&lt;AsyncGetSetRequest&gt; getVehicleStubAsyncRequests,\n        VehicleStubCallbackInterface getCallback) {\n    getOrSetAsync(getVehicleStubAsyncRequests, getCallback, new AsyncGetRequestsHandler(),\n            new AsyncGetResultsHandler(mPropValueBuilder));\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u521b\u5efa\u7684\u4e24\u4e2a Handler \u8ddf\u524d\u9762\u5206\u6790\u7684 set \u6d41\u7a0b\u4e0d\u4e00\u6837\u4e86\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubgetorsetasync_1","title":"AidlVehicleStub.getOrSetAsync()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalRequestType, VhalRequestsType&gt; void getOrSetAsync(\n        List&lt;AsyncGetSetRequest&gt; vehicleStubAsyncRequests,\n        VehicleStubCallbackInterface vehicleStubCallback,\n        AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler,\n        AsyncResultsHandler asyncResultsHandler) {\n    prepareAndConvertAsyncRequests(vehicleStubAsyncRequests, vehicleStubCallback,\n            asyncRequestsHandler);\n\n    try {\n        asyncRequestsHandler.sendRequestsToVhal(mAidlVehicle, mGetSetValuesCallback);\n\n    ...\n}\n</code></pre> <p>VehicleStubCallbackInterface vehicleStubCallback \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 asyncRequestsHandler \u5c31\u662f new AsyncGetRequestsHandler() \u3002 asyncResultsHandler \u5c31\u662f new AsyncGetResultsHandler() \u3002</p> <p>\u6211\u4eec\u5206\u6210\u4e24\u90e8\u5206\u6765\u770b\uff1a</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubprepareandconvertasyncrequests_1","title":"AidlVehicleStub.prepareAndConvertAsyncRequests()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalRequestType, VhalRequestsType&gt; void prepareAndConvertAsyncRequests(\n                List&lt;AsyncGetSetRequest&gt; vehicleStubRequests,\n                VehicleStubCallbackInterface clientCallback,\n                AsyncRequestsHandler&lt;VhalRequestType, VhalRequestsType&gt; asyncRequestsHandler) {\n    asyncRequestsHandler.allocateVhalRequestSize(vehicleStubRequests.size());\n    synchronized (mLock) {\n        try {\n            clientCallback.linkToDeath(() -&gt; {                \n                synchronized (mLock) {\n                    mPendingAsyncRequestPool.removeRequestsForCallback(clientCallback);\n                }\n            });\n        } catch (RemoteException e) {\n            // Binder\u5df2\u7ecf\u6b7b\u4ea1\u3002\n            throw new IllegalStateException(\"Failed to link callback to death recipient, the \"\n                    + \"client maybe already died\");\n        }\n\n        for (int i = 0; i &lt; vehicleStubRequests.size(); i++) {\n            AsyncGetSetRequest vehicleStubRequest = vehicleStubRequests.get(i);\n            long vhalRequestId = mRequestId.getAndIncrement();\n            AsyncRequestInfo requestInfo = new AsyncRequestInfo(\n                    vhalRequestId, vehicleStubRequest.getServiceRequestId(), clientCallback,\n                    vehicleStubRequest.getTimeoutUptimeMs());\n            mPendingAsyncRequestPool.addRequest(requestInfo);\n            asyncRequestsHandler.addVhalRequest(vhalRequestId,\n                    vehicleStubRequest.getHalPropValue());\n        }\n    }\n\n}\n</code></pre> <p>AsyncRequestInfo \u7684\u6210\u5458\u53d8\u91cf mClientCallback \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 \u800c AsyncRequestInfo \u53c8\u88ab\u6dfb\u52a0\u5230 mPendingRequestPool \u7684\u6210\u5458\u53d8\u91cf mPendingRequestPool \u4e2d \u3002</p> <pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate static class AsyncRequestInfo implements LongRequestIdWithTimeout {\n    private final int mServiceRequestId;\n    private final VehicleStubCallbackInterface mClientCallback;\n    private final long mTimeoutUptimeMs;\n    private final long mVhalRequestId;\n\n    private AsyncRequestInfo(\n            long vhalRequestId,\n            int serviceRequestId,\n            VehicleStubCallbackInterface clientCallback,\n            long timeoutUptimeMs) {\n        mVhalRequestId = vhalRequestId;\n        mServiceRequestId = serviceRequestId;\n        mClientCallback = clientCallback;\n        mTimeoutUptimeMs = timeoutUptimeMs;\n    }\n\n    @Override\n    public long getRequestId() {\n        return mVhalRequestId;\n    }\n\n    @Override\n    public long getTimeoutUptimeMs() {\n        return mTimeoutUptimeMs;\n    }\n\n    public int getServiceRequestId() {\n        return mServiceRequestId;\n    }\n\n    public VehicleStubCallbackInterface getClientCallback() {\n        return mClientCallback;\n    }\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncgetrequestshandlersendrequeststovhal","title":"AsyncGetRequestsHandler.sendRequestsToVhal()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\n@Override\npublic void sendRequestsToVhal(IVehicle iVehicle, GetSetValuesCallback callbackForVhal)\n        throws RemoteException, ServiceSpecificException {\n    Trace.traceBegin(TRACE_TAG, \"Prepare LargeParcelable\");\n    GetValueRequests largeParcelableRequest = new GetValueRequests();\n    largeParcelableRequest.payloads = mVhalRequestItems;\n\n    // TODO(b/269669729): Don't try to use large parcelable if the request size is too\n    // small.\n    largeParcelableRequest = (GetValueRequests) LargeParcelable.toLargeParcelable(\n            largeParcelableRequest, () -&gt; {\n                GetValueRequests newRequests = new GetValueRequests();\n                newRequests.payloads = new GetValueRequest[0];\n                return newRequests;\n    });\n    Trace.traceEnd(TRACE_TAG);\n    Trace.traceBegin(TRACE_TAG, \"IVehicle#getValues\");\n    iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre> <p>iVehicle \u662f VehicleHAL \u670d\u52a1\uff0c\u6240\u4ee5\u8c03\u5230\u5bf9\u7aef\u63a5\u53e3\u4e86\u3002 \u8fd9\u91cc\u7684 callbackForVhal \u662f GetSetValuesCallback \u3002 \u6211\u4eec\u5148\u4e0d\u5206\u6790 VehicleHAL \u670d\u52a1 \uff0c\u5148\u628a car-service \u63a5\u5230\u56de\u8c03\u7684\u6d41\u7a0b\u770b\u5b8c\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluescallbackongetvalues","title":"GetSetValuesCallback.onGetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate final class GetSetValuesCallback extends IVehicleCallback.Stub {\n\n    ...\n\n    @Override\n    public void onGetValues(SetValueResults responses) throws RemoteException {\n        AidlVehicleStub.this.onGetValues(responses);\n    }\n\n    ...\n\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubongetvalues","title":"AidlVehicleStub.onGetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate void onGetValues(GetValueResults responses) {\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub#onGetValues\");\n    GetValueResults origResponses = (GetValueResults)\n            LargeParcelable.reconstructStableAIDLParcelable(responses,\n                    /* keepSharedMemory= */ false);\n    onGetSetValues(origResponses.payloads, new AsyncGetResultsHandler(mPropValueBuilder),\n            mPendingSyncGetValueRequestPool);\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#aidlvehiclestubongetsetvalues_2","title":"AidlVehicleStub.onGetSetValues()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate &lt;VhalResultType&gt; void onGetSetValues(VhalResultType[] vhalResults,\n        AsyncResultsHandler asyncResultsHandler,\n        PendingSyncRequestPool&lt;VhalResultType&gt; pendingSyncRequestPool) {\n    synchronized (mLock) {\n        for (VhalResultType result : vhalResults) {\n            long vhalRequestId = asyncResultsHandler.getVhalRequestId(result);\n            if (!mPendingAsyncRequestPool.contains(vhalRequestId)) {\n                // If we cannot find the request Id in the async map, we assume it is for a\n                // sync request.\n                completePendingSyncRequestLocked(pendingSyncRequestPool, vhalRequestId, result);\n                continue;\n            }\n\n            AsyncRequestInfo requestInfo = mPendingAsyncRequestPool.finishRequestIfFound(\n                    vhalRequestId);\n            if (requestInfo == null) {\n                Slogf.w(TAG,\n                        \"No pending request for ID: %s, possibly already timed out, \"\n                        + \"or cancelled, or the client already died\", vhalRequestId);\n                continue;\n            }\n            asyncResultsHandler.addVhalResult(requestInfo.getClientCallback(),\n                    requestInfo.getServiceRequestId(), result);\n        }\n    }\n    Trace.traceBegin(TRACE_TAG, \"AidlVehicleStub call async result callback\");\n    asyncResultsHandler.callVehicleStubCallback();\n    Trace.traceEnd(TRACE_TAG);\n}\n</code></pre> <p>\u4ece mPendingAsyncRequestPool \u53ef\u4ee5\u627e\u5230 AsyncRequestInfo\u3002requestInfo.getClientCallback() \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \u3002 \u518d\u628a\u90a3\u5230\u7684 AsyncRequestInfo \u6dfb\u52a0\u5230 AsyncResultsHandler \uff08\u5176\u5b9e\u662f AsyncGetResultsHandler \uff09\u3002 \u6700\u540e\u8c03\u7528 AsyncGetResultsHandler.callVehicleStubCallback() \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncgetresultshandleraddvhalresult","title":"AsyncGetResultsHandler.addVhalResult()","text":"<pre><code>packages/services/Car/service/src/com/android/car/AidlVehicleStub.java\n\nprivate static final class AsyncGetResultsHandler extends\n        AsyncResultsHandler&lt;GetValueResult, GetVehicleStubAsyncResult&gt; {\n    ...\n\n    AsyncGetResultsHandler(HalPropValueBuilder propValueBuilder) {\n        ...\n        mCallbackToResults = new ArrayMap&lt;VehicleStubCallbackInterface,\n                List&lt;GetVehicleStubAsyncResult&gt;&gt;();\n    }\n\n    ...\n\n    @Override\n    void addVhalResult(VehicleStubCallbackInterface callback, int serviceRequestId,\n            GetValueResult result) {\n        addVehicleStubResult(callback, toVehicleStubResult(serviceRequestId, result));\n    }\n\n    ...\n}\n\n\nprivate abstract static class AsyncResultsHandler&lt;VhalResultType, VehicleStubResultType&gt; {\n    protected Map&lt;VehicleStubCallbackInterface, List&lt;VehicleStubResultType&gt;&gt; mCallbackToResults;\n\n    ...\n\n    protected void addVehicleStubResult(VehicleStubCallbackInterface callback,\n            VehicleStubResultType vehicleStubResult) {\n        if (mCallbackToResults.get(callback) == null) {\n            mCallbackToResults.put(callback, new ArrayList&lt;&gt;());\n        }\n        mCallbackToResults.get(callback).add(vehicleStubResult);\n    }\n}\n</code></pre> <p>\u628a callback \u548c result \u5173\u8054\u8d77\u6765\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#asyncgetresultshandlercallvehiclestubcallback","title":"AsyncGetResultsHandler.callVehicleStubCallback()","text":"<pre><code>private static final class AsyncSetResultsHandler extends\n        AsyncResultsHandler&lt;SetValueResult, SetVehicleStubAsyncResult&gt; {\n    ...\n\n    @Override\n    void callVehicleStubCallback() {\n        for (Map.Entry&lt;VehicleStubCallbackInterface, List&lt;GetVehicleStubAsyncResult&gt;&gt; entry :\n                mCallbackToResults.entrySet()) {\n            entry.getKey().onGetAsyncResults(entry.getValue());\n        }\n    }\n    ...\n\n}\n</code></pre> <p>\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0cVehicleStubCallbackInterface \u5c31\u662f PropertyHalService \u7684 VehicleStubCallback \uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u56de\u8c03\u5230\u4e86 PropertyHalService.onGetAsyncResults()</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#propertyhalserviceongetasyncresults","title":"PropertyHalService.onGetAsyncResults()","text":"<pre><code>packages/services/Car/service/src/com/android/car/hal/PropertyHalService.java\n\n@Override\npublic void onGetAsyncResults(\n        List&lt;GetVehicleStubAsyncResult&gt; getVehicleStubAsyncResults) {\n    ...\n\n    sendGetValueResults(getValueResults);\n    ...\n\n    if (!retryRequests.isEmpty()) {\n        mHandler.postDelayed(() -&gt; {\n            retryIfNotExpired(retryRequests);\n        }, ASYNC_RETRY_SLEEP_IN_MS);\n    }\n}\n\nprivate void sendGetValueResults(List&lt;GetSetValueResult&gt; results) {\n    if (results.isEmpty()) {\n        return;\n    }\n    try {\n        mAsyncPropertyResultCallback.onGetValueResults(new GetSetValueResultList(results));\n    } catch (RemoteException e) {\n        Slogf.w(TAG, \"sendGetValueResults: Client might have died already\", e);\n    }\n}\n</code></pre> <p>\u524d\u9762\u5206\u6790\u5230\uff1aVehicleStubCallback \u7684\u6210\u5458\u53d8\u91cf mAsyncPropertyResultCallback \u5c31\u662f CarPropertyManager \u4f20\u8fdb\u6765\u7684 AsyncPropertyResultCallback \u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u4f1a\u56de\u8c03\u5230 CarPropertyManager \u7684 onGetValueResults()\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#iasyncpropertyresultcallbackongetvalueresults","title":"IAsyncPropertyResultCallback.onGetValueResults()","text":"<pre><code>packages/services/Car/car-lib/src/android/car/hardware/property/CarPropertyManager.java\n\nprivate final AsyncPropertyResultCallback mAsyncPropertyResultCallback = new AsyncPropertyResultCallback();\n\nprivate class AsyncPropertyResultCallback extends IAsyncPropertyResultCallback.Stub {\n\n    @Override\n    public IBinder asBinder() {\n        return this;\n    }\n\n    @Override\n    public void onGetValueResults(GetSetValueResultList getValueResults) {\n        ...\n    }\n\n    @Override\n    public void onSetValueResults(GetSetValueResultList setValueResults) {\n        ...\n    }\n\n    @SuppressLint(\"WrongConstant\")\n    private &lt;RequestType extends AsyncPropertyRequest, CallbackType, ResultType&gt; void onResults(\n            List&lt;GetSetValueResult&gt; results,\n            PropertyResultCallback&lt;CallbackType, ResultType&gt; propertyResultCallback) {\n        ...\n    }\n}\n</code></pre> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5206\u6790\u5b8c\u4e86 car-service \u7aef get() \u5f02\u6b65\u83b7\u53d6\u5c5e\u6027\uff0c\u53ca\u56de\u8c03\u7684\u8fc7\u7a0b\u3002 \u4f46\u6211\u4eec\u8fd8\u672a\u5206\u6790 VehicleHAL \u7aef\u7684\u4ee3\u7801\u3002\u5728 AsyncGetRequestsHandler.sendRequestsToVhal() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\uff1a</p> <pre><code>iVehicle.getValues(callbackForVhal, largeParcelableRequest);\n</code></pre> <p>iVehicle \u662f VehicleHAL \u3002\u6839\u636e\u524d\u9762 VehicleHAL \u521d\u59cb\u5316\u6d41\u7a0b\u6211\u4eec\u77e5\u9053\uff0c\u8c03\u7528 setValues() \u51fd\u6570\u4f1a\u8c03\u5230 DefaultVehicleHal.cpp \u7684 getValues() \u51fd\u6570\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalgetvalues","title":"DefaultVehicleHal::getValues()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\nScopedAStatus DefaultVehicleHal::getValues(const CallbackType&amp; callback,\n                                           const GetValueRequests&amp; requests) {\n    ATRACE_CALL();\n\n    // \u5982\u679c\u56de\u8c03\u51fd\u6570\u4e3a\u7a7a\u6307\u9488\uff0c\u5219\u8fd4\u56de\u5f02\u5e38\u72b6\u6001\u7801\n    if (callback == nullptr) {\n        return ScopedAStatus::fromExceptionCode(EX_NULL_POINTER);\n    }\n\n    expected&lt;LargeParcelableBase::BorrowedOwnedObject&lt;GetValueRequests&gt;, ScopedAStatus&gt;\n            deserializedResults = fromStableLargeParcelable(requests);\n    // \u53cd\u5e8f\u5217\u5316\u9519\u8bef\n    if (!deserializedResults.ok()) {\n        ALOGE(\"getValues: failed to parse getValues requests\");\n        return std::move(deserializedResults.error());\n    }\n\n    const std::vector&lt;GetValueRequest&gt;&amp; getValueRequests =\n            deserializedResults.value().getObject()-&gt;payloads;\n\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u91cd\u590d\u7684\u8bf7\u6c42ID\n    auto maybeRequestIds = checkDuplicateRequests(getValueRequests);\n\n    if (!maybeRequestIds.ok()) {\n        ALOGE(\"getValues: duplicate request ID\");\n        return toScopedAStatus(maybeRequestIds, StatusCode::INVALID_ARG);\n    }\n\n    // \u5b58\u50a8\u5df2\u77e5\u5931\u8d25\u7684\u7ed3\u679c\n    std::vector&lt;GetValueResult&gt; failedResults;\n    // \u5b58\u50a8\u5c06\u8981\u53d1\u9001\u7ed9\u786c\u4ef6\u7684\u8bf7\u6c42\n    std::vector&lt;GetValueRequest&gt; hardwareRequests;\n\n    for (const auto&amp; request : getValueRequests) {\n        if (auto result = checkReadPermission(request.prop); !result.ok()) {\n            ALOGW(\"property does not support reading: %s\", getErrorMsg(result).c_str());\n            // \u5c06\u5931\u8d25\u7684\u7ed3\u679c\u6dfb\u52a0\u5230failedResults\u5217\u8868\u4e2d\n            failedResults.push_back(GetValueResult{\n                    .requestId = request.requestId,\n                    .status = getErrorCode(result),\n                    .prop = {},\n            });\n        } else {\n            // \u5c06\u8bf7\u6c42\u6dfb\u52a0\u5230hardwareRequests\u5217\u8868\u4e2d\n            hardwareRequests.push_back(request);\n        }\n    }\n\n    std::unordered_set&lt;int64_t&gt; hardwareRequestIds;\n\n    for (const auto&amp; request : hardwareRequests) {\n        hardwareRequestIds.insert(request.requestId);\n    }\n\n    std::shared_ptr&lt;GetValuesClient&gt; client;\n\n    {\n        std::scoped_lock lockGuard(mLock);\n\n        if (!monitorBinderLifeCycleLocked(callback-&gt;asBinder().get())) {\n            return ScopedAStatus::fromExceptionCodeWithMessage(EX_TRANSACTION_FAILED,\n                                                               \"client died\"); \n        }\n\n        // \u83b7\u53d6\u6216\u521b\u5efaGetValuesClient\u5bf9\u8c61\n        client = getOrCreateClient(&amp;mGetValuesClients, callback, mPendingRequestPool);\n    }\n\n    if (auto addRequestResult = client-&gt;addRequests(hardwareRequestIds); !addRequestResult.ok()) {\n        ALOGE(\"getValues[%s]: failed to add pending requests, error: %s\",\n              toString(hardwareRequestIds).c_str(), getErrorMsg(addRequestResult).c_str());\n        return toScopedAStatus(addRequestResult);\n    }\n\n    if (!failedResults.empty()) {\n        // \u5c06\u5df2\u77e5\u5931\u8d25\u7684\u7ed3\u679c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n        client-&gt;sendResults(std::move(failedResults));\n    }\n\n    if (hardwareRequests.empty()) {\n        return ScopedAStatus::ok();\n    }\n\n    if (StatusCode status =\n                mVehicleHardware-&gt;getValues(client-&gt;getResultCallback(), hardwareRequests);\n        status != StatusCode::OK) {\n        // \u5982\u679c\u786c\u4ef6\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u5c1d\u8bd5\u5b8c\u6210\u8be5\u8bf7\u6c42\u7684\u6240\u6709\u5f85\u5904\u7406\u8bf7\u6c42\n        client-&gt;tryFinishRequests(hardwareRequestIds);\n        ALOGE(\"getValues[%s]: failed to get value from VehicleHardware, status: %d\",\n              toString(hardwareRequestIds).c_str(), toInt(status));\n        return ScopedAStatus::fromServiceSpecificErrorWithMessage(\n                toInt(status), \"failed to get value from VehicleHardware\");\n    }\n\n    return ScopedAStatus::ok();\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u6211\u4eec\u628a\u5173\u952e\u90e8\u5206\u6574\u7406\u51fa\u6765\uff1a</p> <ul> <li> <p>callback     java\u7aef\u4f20\u8fdb\u6765\u7684\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f IVehicleCallback.aidl</p> </li> <li> <p>mPendingRequestPool     mPendingRequestPool \u662f\u5728 DefaultVehicleHal \u6784\u9020\u51fd\u6570\u91cc\u521b\u5efa\u7684\u3002     PendingRequestPool \u7684\u529f\u80fd\u5728\u524d\u9762\u6709\u8be6\u7ec6\u4ecb\u7ecd\u3002</p> </li> <li> <p>mGetValuesClients     \u5148\u8bb0\u4f4f mGetValuesClients \u8fd9\u4e2a map \u7684 vaule \u7c7b\u578b\u3002</p> </li> </ul> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/DefaultVehicleHal.h\n\nusing GetValuesClient =  \nGetSetValuesClient&lt;aidl::android::hardware::automotive::vehicle::GetValueResult,  \naidl::android::hardware::automotive::vehicle::GetValueResults&gt;;\n\nstd::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;GetValuesClient&gt;&gt; mGetValuesClients  \nGUARDED_BY(mLock);\n</code></pre> <ul> <li>client</li> </ul> <pre><code>std::shared_ptr&lt;GetValuesClient&gt; client = getOrCreateClient(&amp;mGetValuesClients, callback, mPendingRequestPool);\n</code></pre> <ul> <li> <p>client-&gt;addRequests(hardwareRequestIds)     \u6dfb\u52a0\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002</p> </li> <li> <p>client-&gt;sendResults(std::move(failedResults));     \u5c06\u7ed3\u679c\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>client-&gt;tryFinishRequests(hardwareRequestIds);     \u6807\u8bb0\u8bf7\u6c42\u5df2\u5b8c\u6210\u3002</p> </li> <li> <p>mVehicleHardware-&gt;getValues()</p> </li> </ul> <pre><code>mVehicleHardware-&gt;getValues(client-&gt;getResultCallback(), hardwareRequests);\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u5173\u952e\u7684\u5c31\u662f\u8fd9\u4e24\u6b65\uff1a</p> <ul> <li>\u8c03\u7528 getOrCreateClient() \u83b7\u53d6\u6216\u521b\u5efa\u5ba2\u6237\u7aef\u3002</li> <li>\u8c03\u7528 FakeVehicleHardware::getValues() \u8bbe\u7f6e\u5c5e\u6027\u3002</li> </ul>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#defaultvehiclehalgetorcreateclient_1","title":"DefaultVehicleHal::getOrCreateClient()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\n/**\n * @brief \u83b7\u53d6\u6216\u521b\u5efa\u5ba2\u6237\u7aef\u5bf9\u8c61\n * \n * @tparam T \u5ba2\u6237\u7aef\u5bf9\u8c61\u7c7b\u578b\n * @param clients \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u6620\u5c04\u8868\n * @param callback \u56de\u8c03\u51fd\u6570\n * @param pendingRequestPool \u6302\u8d77\u8bf7\u6c42\u6c60\n * @return std::shared_ptr&lt;T&gt; \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u5171\u4eab\u6307\u9488\n */\ntemplate &lt;class T&gt;\nstd::shared_ptr&lt;T&gt; DefaultVehicleHal::getOrCreateClient(\n        std::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;T&gt;&gt;* clients,\n        const CallbackType&amp; callback, std::shared_ptr&lt;PendingRequestPool&gt; pendingRequestPool) {\n    const AIBinder* clientId = callback-&gt;asBinder().get();\n    if (clients-&gt;find(clientId) == clients-&gt;end()) {\n        (*clients)[clientId] = std::make_shared&lt;T&gt;(pendingRequestPool, callback);\n    }\n    return (*clients)[clientId];\n}\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u6a21\u677f\u51fd\u6570\uff0c\u6839\u636e clients \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u77e5\u9053\uff0cT \u5c31\u662f GetSetValuesClient \u3002GetValuesClient \u6211\u4eec\u627e\u4e0b GetSetValuesClient \u662f\u5728\u54ea\u91cc\u5b9a\u4e49\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#connectedclient_1","title":"ConnectedClient","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\n// \u4e00\u4e2a\u8868\u793a\u5e26\u6709\u56de\u8c03\u63a5\u53e3\u7684\u7ed1\u5b9a\u5668\u5ba2\u6237\u7aef\u7684\u7c7b\u3002\u6bcf\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u4f8b\u5982GetValues\u6216SetValues\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed1\u5b9a\u5668\u5ba2\u6237\u7aef\u662f\u4e00\u4e2a\u72ec\u7acb\u7684ConnectedClient\u3002\n// \u5bf9\u4e8e\u4e00\u4e2aConnectedClient\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u6765\u7ba1\u7406\u6240\u6709\u5f85\u5904\u7406\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u8bf7\u6c42ID\u5fc5\u987b\u5bf9\u4e8e\u4e00\u4e2a\u5ba2\u6237\u7aef\u662f\u552f\u4e00\u7684\u3002\n// \u6211\u4eec\u8fd8\u7ba1\u7406\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u4e00\u7ec4\u56de\u8c03\u51fd\u6570\uff0c\u4f8b\u5982timeoutCallback\uff0c\u5b83\u53ef\u4ee5\u4f20\u9012\u7ed9\u786c\u4ef6\u3002\n// \u8fd9\u4e2a\u7c7b\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\nclass ConnectedClient {\n  public:\n    using CallbackType =\n            std::shared_ptr&lt;aidl::android::hardware::automotive::vehicle::IVehicleCallback&gt;;\n\n    ConnectedClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool, CallbackType callback);\n\n    // \u83b7\u53d6\u6b64\u5ba2\u6237\u7aef\u7684\u552f\u4e00ID\u3002\n    const void* id();\n\n    // \u6dfb\u52a0\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002\u8fd9\u4e9b\u8bf7\u6c42\u5c06\u88ab\u6ce8\u518c\u4e3a\u5f85\u5904\u7406\u8bf7\u6c42\uff0c\u76f4\u5230\u8c03\u7528tryFinishRequests\u4e3a\u6b62\u3002\n    // \u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u8bf7\u6c42ID\u4e0e\u5f85\u5904\u7406\u8bf7\u6c42ID\u4e4b\u4e00\u91cd\u590d\uff0c\u5219\u8fd4\u56deINVALID_ARG\u9519\u8bef\uff1b\n    // \u5982\u679c\u5f85\u5904\u7406\u8bf7\u6c42\u6c60\u5df2\u6ee1\u4e14\u65e0\u6cd5\u518d\u6dfb\u52a0\u8bf7\u6c42\uff0c\u5219\u8fd4\u56deTRY_AGAIN\u9519\u8bef\u3002\n    VhalResult&lt;void&gt; addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds);\n\n    // \u6807\u8bb0\u8bf7\u6c42\u5df2\u5b8c\u6210\u3002\u8fd4\u56de\u4e00\u4e2a\u5df2\u5b8c\u6210\u7684\u5f85\u5904\u7406\u8bf7\u6c42ID\u5217\u8868\u3002\u5b83\u5fc5\u987b\u662f\u8bf7\u6c42\u7684\u8bf7\u6c42ID\u7684\u96c6\u5408\u3002\n    std::unordered_set&lt;int64_t&gt; tryFinishRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds);\n\n  protected:\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8d85\u65f6\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    virtual std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; getTimeoutCallback() = 0;\n\n    const std::shared_ptr&lt;PendingRequestPool&gt; mRequestPool;\n    const CallbackType mCallback;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclient_1","title":"GetSetValuesClient","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\n// \u4e00\u4e2a\u8868\u793a\u8c03\u7528IVehicle.setValues\u6216IVehicle.getValues\u7684\u5ba2\u6237\u7aef\u7684\u7c7b\u3002\ntemplate &lt;class ResultType, class ResultsType&gt;\nclass GetSetValuesClient final : public ConnectedClient {\n  public:\n    GetSetValuesClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool, CallbackType callback);\n\n    // \u5c06\u7ed3\u679c\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002\n    void sendResults(std::vector&lt;ResultType&gt;&amp;&amp; results);\n\n    // \u5c06\u6bcf\u4e2a\u7ed3\u679c\u5206\u522b\u53d1\u9001\u7ed9\u6b64\u5ba2\u6237\u7aef\u3002\u6bcf\u4e2a\u7ed3\u679c\u5c06\u901a\u8fc7\u4e00\u4e2a\u56de\u8c03\u8c03\u7528\u53d1\u9001\u3002\n    void sendResultsSeparately(const std::vector&lt;ResultType&gt;&amp; results);\n\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5b8c\u6210\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    std::shared_ptr&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt; getResultCallback();\n\n  protected:\n    // \u83b7\u53d6\u5728\u6b64\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8d85\u65f6\u65f6\u8981\u8c03\u7528\u7684\u56de\u8c03\u3002\n    std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; getTimeoutCallback() override;\n\n  private:\n    // \u4ee5\u4e0b\u6210\u5458\u4ec5\u5728\u6784\u9020\u671f\u95f4\u521d\u59cb\u5316\u3002\n    std::shared_ptr&lt;const PendingRequestPool::TimeoutCallbackFunc&gt; mTimeoutCallback;\n    std::shared_ptr&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt; mResultCallback;\n};\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclientaddrequests_1","title":"GetSetValuesClient::addRequests()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nVhalResult&lt;void&gt; ConnectedClient::addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds) {\n    return mRequestPool-&gt;addRequests(id(), requestIds, getTimeoutCallback());\n}\n</code></pre> <p>\u5148\u6765\u770b\u8fd9\u4e2a mRequestPool \u5230\u5e95\u662f\u4ec0\u4e48\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/include/ConnectedClient.h\n\nconst std::shared_ptr&lt;PendingRequestPool&gt; mRequestPool;\n</code></pre> <p>mRequestPool \u662f\u5728 ConnectedClient \u6784\u9020\u51fd\u6570\u91cc\u521d\u59cb\u5316\u7684\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nConnectedClient::ConnectedClient(std::shared_ptr&lt;PendingRequestPool&gt; requestPool,\n                                 std::shared_ptr&lt;IVehicleCallback&gt; callback)\n    : mRequestPool(requestPool), mCallback(callback) {}\n</code></pre> <p>\u6839\u636e\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u8fd9\u4e2a\u6a21\u677f\u51fd\u6570\u8c03\u7528 ConnectedClient \u6784\u9020\u51fd\u6570\u3002</p> <pre><code>template &lt;class ResultType, class ResultsType&gt;\nGetSetValuesClient&lt;ResultType, ResultsType&gt;::GetSetValuesClient(\n        std::shared_ptr&lt;PendingRequestPool&gt; requestPool, std::shared_ptr&lt;IVehicleCallback&gt; callback)\n    : ConnectedClient(requestPool, callback) {\n    // \u521b\u5efa\u4e00\u4e2a\u6307\u5411PendingRequestPool::TimeoutCallbackFunc\u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488mTimeoutCallback\n    // \u8be5\u56de\u8c03\u51fd\u6570\u7528\u4e8e\u5904\u7406\u8d85\u65f6\u8bf7\u6c42\n    mTimeoutCallback = std::make_shared&lt;const PendingRequestPool::TimeoutCallbackFunc&gt;(\n            [callback](const std::unordered_set&lt;int64_t&gt;&amp; timeoutIds) {\n                return onTimeout&lt;ResultType, ResultsType&gt;(callback, timeoutIds);\n            });\n    // \u590d\u5236requestPool\u5230requestPoolCopy\n    auto requestPoolCopy = mRequestPool;\n    // \u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u7684id\uff0c\u5e76\u8d4b\u503c\u7ed9clientId\n    const void* clientId = id();\n    // \u521b\u5efa\u4e00\u4e2a\u6307\u5411std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;\u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488mResultCallback\n    // \u8be5\u56de\u8c03\u51fd\u6570\u7528\u4e8e\u5904\u7406\u83b7\u53d6\u6216\u8bbe\u7f6e\u503c\u7684\u56de\u8c03\n    mResultCallback = std::make_shared&lt;const std::function&lt;void(std::vector&lt;ResultType&gt;)&gt;&gt;(\n            [clientId, callback, requestPoolCopy](std::vector&lt;ResultType&gt; results) {\n                return getOrSetValuesCallback&lt;ResultType, ResultsType&gt;(\n                        clientId, callback, std::move(results), requestPoolCopy);\n            });\n}\n</code></pre> <p>\u518d\u8fd4\u56de\u5230 DefaultVehicleHal::getOrCreateClient() \u4e2d\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/DefaultVehicleHal.cpp\n\ntemplate &lt;class T&gt;\nstd::shared_ptr&lt;T&gt; DefaultVehicleHal::getOrCreateClient(\n        std::unordered_map&lt;const AIBinder*, std::shared_ptr&lt;T&gt;&gt;* clients,\n        const CallbackType&amp; callback, std::shared_ptr&lt;PendingRequestPool&gt; pendingRequestPool) {\n    const AIBinder* clientId = callback-&gt;asBinder().get();\n    if (clients-&gt;find(clientId) == clients-&gt;end()) {\n        (*clients)[clientId] = std::make_shared&lt;T&gt;(pendingRequestPool, callback);\n    }\n    return (*clients)[clientId];\n}\n</code></pre> <p>\u770b\u5230\u4e86\u5427\uff1a</p> <pre><code>std::make_shared&lt;T&gt;(pendingRequestPool, callback)\n</code></pre> <p>\u5728\u8fd4\u56de\u5230 \u8c03\u7528 DefaultVehicleHal::getOrCreateClient() \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f DefaultVehicleHal::getValues() \uff0c\u6b64\u65f6\u53ef\u4ee5\u77e5\u9053\u4e24\u4ef6\u4e8b\uff1a</p> <ul> <li>\u8fd9\u91cc\u7684 pendingRequestPool \u5176\u5b9e\u5c31\u662f DefaultVehicleHal \u7684\u6210\u5458\u53d8\u91cf mPendingRequestPool\uff0c\u5176\u5728 DefaultVehicleHal \u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u3002\u4e5f\u5c31\u662f PendingRequestPool\u3002</li> <li>\u8fd9\u91cc\u7684 callback \u5c31\u662fjava\u7aef\u4f20\u8fdb\u6765\u7684\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f IVehicleCallback.aidl</li> </ul> <p>\u597d\u4e86\uff0c\u56de\u5230\u6211\u4eec\u7684 ConnectedClient::addRequests() \u51fd\u6570\u91cc\u3002</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\nVhalResult&lt;void&gt; ConnectedClient::addRequests(const std::unordered_set&lt;int64_t&gt;&amp; requestIds) {\n    return mRequestPool-&gt;addRequests(id(), requestIds, getTimeoutCallback());\n}\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528\u7684\u662f PendingRequestPool::addRequests() \u51fd\u6570\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#pendingrequestpooladdrequests_1","title":"PendingRequestPool::addRequests()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/utils/common/src/PendingRequestPool.cpp\n\nVhalResult&lt;void&gt; PendingRequestPool::addRequests(\n        const void* clientId, const std::unordered_set&lt;int64_t&gt;&amp; requestIds,\n        std::shared_ptr&lt;const TimeoutCallbackFunc&gt; callback) {\n    // \u5bf9\u4e92\u65a5\u9501\u8fdb\u884c\u52a0\u9501\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\n    std::scoped_lock&lt;std::mutex&gt; lockGuard(mLock);\n    std::list&lt;PendingRequest&gt;* pendingRequests;\n    // \u521d\u59cb\u5316\u5f85\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\u4e3a0\n    size_t pendingRequestCount = 0;\n    // \u5982\u679c mPendingRequestsByClient \u4e2d\u5b58\u5728\u6307\u5b9a\u7684 clientId\n    if (mPendingRequestsByClient.find(clientId) != mPendingRequestsByClient.end()) {        \n        pendingRequests = &amp;mPendingRequestsByClient[clientId];\n        for (const auto&amp; pendingRequest : *pendingRequests) {\n            // \u83b7\u53d6\u5f53\u524dPendingRequest\u7684\u8bf7\u6c42ID\u96c6\u5408\n            const auto&amp; pendingRequestIds = pendingRequest.requestIds;\n            // \u904d\u5386\u4f20\u5165\u7684\u8bf7\u6c42ID\u96c6\u5408\n            for (int64_t requestId : requestIds) {\n                // \u5982\u679c\u5f53\u524dPendingRequest\u7684\u8bf7\u6c42ID\u96c6\u5408\u4e2d\u5b58\u5728\u91cd\u590d\u7684\u8bf7\u6c42ID\n                if (pendingRequestIds.find(requestId) != pendingRequestIds.end()) {\n                    return StatusError(StatusCode::INVALID_ARG)\n                           &lt;&lt; \"duplicate request ID: \" &lt;&lt; requestId;\n                }\n            }\n            // \u7d2f\u52a0\u5df2\u6709PendingRequest\u7684\u8bf7\u6c42ID\u6570\u91cf\n            pendingRequestCount += pendingRequestIds.size();\n        }\n    } else {\n        // \u4e3a\u8be5clientId\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u7684PendingRequest\u5217\u8868\n        pendingRequests = &amp;mPendingRequestsByClient[clientId];\n    }\n\n    // \u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42ID\u6570\u91cf\u8d85\u8fc7\u4e86\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5141\u8bb8\u7684\u6700\u5927\u5f85\u5904\u7406\u8bf7\u6c42\u6570\u91cf\n    if (requestIds.size() &gt; MAX_PENDING_REQUEST_PER_CLIENT - pendingRequestCount) {\n        return StatusError(StatusCode::TRY_AGAIN)\n               &lt;&lt; \"too many pending requests\";\n    }\n\n    int64_t currentTime = elapsedRealtimeNano();\n    // \u6839\u636e\u5f53\u524d\u65f6\u95f4\uff0c\u8ba1\u7b97\u8d85\u65f6\u65f6\u95f4\u6233\n    int64_t timeoutTimestamp = currentTime + mTimeoutInNano;\n\n    // \u5c06\u65b0\u7684PendingRequest\u6dfb\u52a0\u5230PendingRequest\u5217\u8868\u4e2d\n    pendingRequests-&gt;push_back({\n            .requestIds = std::unordered_set&lt;int64_t&gt;(requestIds.begin(), requestIds.end()),\n            .timeoutTimestamp = timeoutTimestamp,\n            .callback = callback,\n    });\n\n    return {};\n}\n</code></pre> <p>\u770b\u5230\u8fd9\u91cc\u6709\u70b9\u8ff7\u832b\uff0c\u5148\u4e0d\u7ba1\uff0c\u518d\u5c1d\u8bd5\u5f80\u4e0b\u770b\u770b\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#getsetvaluesclientsendresults_1","title":"GetSetValuesClient::sendResults()","text":"<p>\u5728\u524d\u9762 DefaultVehicleHal::setValues() \u4e2d\uff0c\u5982\u679c\u8bbe\u7f6e\u5c5e\u6027\u5931\u8d25\uff08\u6ca1\u6709\u6743\u9650\u3001\u5c5e\u6027ID\u4e0d\u5408\u6cd5\uff09\uff0c\u5219\u4e3b\u52a8\u8c03\u7528 client-&gt;sendResults(std::move(failedResults)) \u628a\u9519\u8bef\u4fe1\u606f\u56de\u8c03\u7ed9\u5ba2\u6237\u7aef\u3002</p> <pre><code>std::vector&lt;GetValueResult&gt; failedResults;\n...\n\nif (!failedResults.empty()) {\n    // \u5c06\u5df2\u77e5\u7684\u5931\u8d25\u7ed3\u679c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n    client-&gt;sendResults(std::move(failedResults));\n}\n</code></pre> <p>\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\ntemplate &lt;class ResultType, class ResultsType&gt;  \nvoid GetSetValuesClient&lt;ResultType, ResultsType&gt;::sendResults(std::vector&lt;ResultType&gt;&amp;&amp; results) {  \n    return sendGetOrSetValueResults&lt;ResultType, ResultsType&gt;(mCallback, std::move(results));  \n}\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u7684 ResultsType \u5c31\u662f GetValueResult \u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#sendgetorsetvalueresults_1","title":"sendGetOrSetValueResults","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/vhal/src/ConnectedClient.cpp\n\n// \u5c06\u6240\u6709\u7684 GetValue/SetValue \u7ed3\u679c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u4e00\u6b21\u6027\u53d1\u9001\ntemplate &lt;class ResultType, class ResultsType&gt;\nvoid sendGetOrSetValueResults(std::shared_ptr&lt;IVehicleCallback&gt; callback,\n                              std::vector&lt;ResultType&gt;&amp;&amp; results) {\n    ResultsType parcelableResults;\n    ScopedAStatus status = vectorToStableLargeParcelable(std::move(results), &amp;parcelableResults);\n    // \u68c0\u67e5\u7ed3\u679c\u662f\u5426\u6210\u529f\u8f6c\u6362\u4e3aParcelable\n    if (status.isOk()) {\n        // \u8c03\u7528\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u68c0\u67e5\u56de\u8c03\u662f\u5426\u6210\u529f\n        if (ScopedAStatus callbackStatus = callCallback(callback, parcelableResults);\n            !callbackStatus.isOk()) {\n            // \u6253\u5370\u9519\u8bef\u4fe1\u606f\n            ALOGE(\"failed to call GetOrSetValueResults callback, client ID: %p, error: %s, \"\n                  \"exception: %d, service specific error: %d\",\n                  callback-&gt;asBinder().get(), callbackStatus.getMessage(),\n                  callbackStatus.getExceptionCode(), callbackStatus.getServiceSpecificError());\n        }\n        return;\n    }\n    int statusCode = status.getServiceSpecificError();\n    ALOGE(\"failed to marshal result into large parcelable, error: \"\n          \"%s, code: %d\",\n          status.getMessage(), statusCode);\n    // \u5206\u522b\u53d1\u9001GetOrSetValueResults\u7684\u7ed3\u679c\n    sendGetOrSetValueResultsSeparately&lt;ResultType, ResultsType&gt;(callback,\n                                                                parcelableResults.payloads);\n}\n</code></pre> <p>\u56e0\u4e3a\u6211\u4eec\u7684\u7c7b\u578b\u662f GetValueResult \uff0c\u6240\u4ee5\u8fd9\u91cc\u7684 callCallback \u5bf9\u5e94\u7684\u662f\u8fd9\u4e2a\u6a21\u677f\u663e\u5f0f\u5177\u4f53\u5316\u51fd\u6570\u3002</p> <pre><code>template &lt;&gt;  \nScopedAStatus callCallback&lt;GetValueResults&gt;(std::shared_ptr&lt;IVehicleCallback&gt; callback,  \n                                            const GetValueResults&amp; results) {  \n    return callback-&gt;onGetValues(results);  \n}\n</code></pre> <p>\u8fd9\u91cc\u6e05\u695a\u7684\u770b\u5230\uff0c\u8c03\u7528\u7684\u5c31\u662f IVehicleCallback \u7684 onGetValues() \u56de\u8c03\u51fd\u6570\u3002 \u6700\u7ec8\u5c31\u4f1a\u901a\u8fc7 IPC \u8d70\u5230 \u524d\u9762\u63d0\u5230\u7684 GetSetValuesCallback.onGetValues() \u51fd\u6570\u91cc\u3002 \u4f46\uff0c\u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9\u3002\u8fd9\u91cc\u53ea\u662f\u9519\u8bef\u7684\u60c5\u51b5\u7684\u56de\u8c03\u3002\u6211\u4eec\u8fd8\u662f\u5f97\u56de\u5230 DefaultVehicleHal::getValues() \u91cc\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 FakeVehicleHardware::getValues() \u8bbe\u7f6e\u5c5e\u6027\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#fakevehiclehardwaregetvalues","title":"FakeVehicleHardware::getValues()","text":"<pre><code>hardware/interfaces/automotive/vehicle/aidl/impl/fake_impl/hardware/src/FakeVehicleHardware.cpp\n\nStatusCode FakeVehicleHardware::getValues(std::shared_ptr&lt;const GetValuesCallback&gt; callback,\n                                          const std::vector&lt;GetValueRequest&gt;&amp; requests) const {\n    for (auto&amp; request : requests) {\n        if (FAKE_VEHICLEHARDWARE_DEBUG) {\n            ALOGD(\"getValues(%d)\", request.prop.prop);\n        }\n\n        // \u5728\u771f\u5b9e\u7684VHAL\u5b9e\u73b0\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728binder\u7ebf\u7a0b\u4e2d\u5c06getValue\u8bf7\u6c42\u53d1\u9001\u5230\u8f66\u8f86\u603b\u7ebf\uff0c\n        // \u6216\u8005\u4f60\u53ef\u4ee5\u5728getValue\u4e2d\u53d1\u9001\u8bf7\u6c42\uff0cgetValue\u5728\u5904\u7406\u7a0b\u5e8f\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002\n        // \u5982\u679c\u4f60\u51b3\u5b9a\u5728\u8fd9\u91cc\u53d1\u9001getValue\u8bf7\u6c42\uff0c\u4f60\u4e0d\u5e94\u8be5\u5728\u8fd9\u91cc\u7b49\u5f85\u54cd\u5e94\uff0c\u5904\u7406\u7a0b\u5e8f\u7ebf\u7a0b\u5e94\u8be5\u5904\u7406getValue\u54cd\u5e94\u3002\n        mPendingGetValueRequests.addRequest(request, callback);\n    }\n\n    return StatusCode::OK;\n}\n</code></pre> <p>\u4ece\u8fd9\u91cc\u7684\u6ce8\u91ca\u53ef\u4ee5\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u91cc\u53ea\u662f\u7ed9\u51fa\u4e86\u4e00\u4e2ademo\u544a\u8bc9\u6211\u4eec\u600e\u4e48\u5199VehicleHardware\u3002\u6240\u4ee5\u8fd9\u91cc\u5982\u4f55\u56de\u8c03\u56de\u53bb\u4e5f\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\u3002 \u601d\u8def\u5c31\u662f\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5982\u679c\u6709\u4e8b\u4ef6\uff08set\u3001get\uff09\u8bf7\u6c42\uff0c\u5c31\u5728\u540e\u53f0\u7ebf\u7a0b\u5904\u7406\u597d\u4e8b\u4ef6\uff0c\u5e76\u901a\u8fc7 callback \u56de\u8c03\u5230\u5ba2\u6237\u7aef\u3002</p>","tags":["Android","car","Vehicle"]},{"location":"android/car/vehicle/android-u-hal-intro/#_3","title":"\u9644\u5f55","text":"<p>\u6587\u4e2d\u63d0\u5230\u7684\u4e00\u4e2a\u63a5\u53e3\u6587\u4ef6\u4f1a\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u81ea\u52a8\u751f\u6210\uff0c\u4e3b\u8981\u76ee\u5f55\u662f\u5728\uff1a</p> <pre><code>out/soong/.intermediates/hardware/interfaces/automotive/vehicle/aidl/\n\nandroid.hardware.automotive.vehicle-V2-ndk-source\nandroid.hardware.automotive.vehicle-V2-java-source\n</code></pre> <pre><code>out/soong/.intermediates/hardware/interfaces/automotive/vehicle/aidl_property\n\nandroid.hardware.automotive.vehicle.property-V2-ndk-source\nandroid.hardware.automotive.vehicle.property-V2-java-source\n</code></pre>","tags":["Android","car","Vehicle"]},{"location":"android/input/focused-window/","title":"Android \u7a97\u53e3\u7126\u70b9\u4ecb\u7ecd","text":"","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#_1","title":"\u80cc\u666f","text":"<p>\u6211\u4eec\u7ecf\u5e38\u4f1a\u9047\u5230\u4e00\u79cdApplication does not hava focused window\u7684ANR\u5f02\u5e38\uff0c\u8fd9\u79cd\u5f02\u5e38\u4e00\u822c\u662f\u6ca1\u6709\u7126\u70b9\u7a97\u53e3FocusedWindow\u5bfc\u81f4,\u4e14\u8fd9\u7c7b\u5f02\u5e38\u53ea\u4f1a\u53d1\u751f\u5728key\u4e8b\u4ef6\u7684\u6d3e\u53d1\uff0c\u56e0\u4e3akey\u4e8b\u4ef6\u662f\u9700\u8981\u627e\u5230\u4e00\u4e2a\u7126\u70b9\u7a97\u53e3\u7136\u540e\u518d\u6d3e\u53d1\uff0c\u800c\u89e6\u6478\u4e8b\u4ef6\u53ea\u9700\u8981\u627e\u5230\u5f53\u524d\u663e\u793a\u7684\u7a97\u53e3\u5373\u53ef</p>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#_2","title":"\u7126\u70b9\u7a97\u53e3\u8bbe\u5b9a","text":"<p>WMS\u53ea\u7ba1\u7406\u7a97\u53e3\uff0c\u65e0\u6cd5\u786e\u5b9a\u662f\u5426\u6709\u7a97\u53e3\u76d6\u4f4f\u5f53\u524d\u753b\u9762\u3002 SurfaceFlinger\u7ba1\u7406\u663e\u793a\uff0c\u6700\u8d34\u8fd1\u4e8e\u7528\u6237\u770b\u5230\u7684\u753b\u9762\uff0c\u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6709\u7a97\u53e3\u76d6\u4f4f\u5f53\u524d\u753b\u9762\uff0c\u6839\u636e\u771f\u5b9e\u7684\u663e\u793a\u7a97\u53e3\u8bbe\u7f6e\u5bf9\u5e94\u7684window\u4fe1\u606f\u7ed9InputDispatcher\u3002</p>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#_3","title":"\u5173\u952e\u65e5\u5fd7","text":"","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#window","title":"window","text":"<p>\u5728dumpsys window\u4e2d\u67e5\u770bmCurrentFocus\u548cmFocusedApp</p> <pre><code>  mCurrentFocus=Window{f96644 u0 NotificationShade}\n  mFocusedApp=ActivityRecord{e9566ee u0 com.android.launcher3/.uioverrides.QuickstepLauncher} t12}\n</code></pre> <p>mCurrentFocus \u6307\u7684\u662f\u5f53\u524d\u7684\u7126\u70b9\u7a97\u53e3 mFocusedApp \u6307\u7684\u662f\u5f53\u524d\u7684\u7126\u70b9Activity</p> <p>\u67e5\u770b\u6709\u6ca1\u6709LAST\u00a0ANR</p> <pre><code>WINDOW MANAGER LAST ANR (dumpsys window lastanr)\n  &lt;no ANR has occurred since boot&gt;\n</code></pre> <p>\u8fd9\u91cc\u6ca1\u6709LAST ANR\uff0c\u5982\u679c\u6709\uff0cmCurrentFocus\u4f1a\u663e\u793anull</p>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#surfaceflinger","title":"SurfaceFlinger","text":"<p>\u5728dumpsys SurfaceFlinger\u4e2d\u67e5\u770b HWC layers</p> <pre><code>Display 4619827259835644672 (active) HWC layers:\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Layer name\n           Z |  Window Type |  Comp Type |  Transform |   Disp Frame (LTRB) |          Source Crop (LTRB) |     Frame Rate (Explicit) (Seamlessness) [Focused]\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n com.example.mysystemdialog/com.example.mysystemdialog.MainActivity#118\n  rel      0 |            1 |     CLIENT |          0 |    0    0 1440 2960 |    0.0    0.0 1440.0 2960.0 |                                              [*]\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n StatusBar#75\n  rel      0 |         2000 |     CLIENT |          0 |    0    0 1440   84 |    0.0    0.0 1440.0   84.0 |                                              [ ]\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n NavigationBar0#74\n  rel      0 |         2019 |     CLIENT |          0 |    0 2792 1440 2960 |    0.0    0.0 1440.0  168.0 |                                              [ ]\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre> <p>[Focused] \u8fd9\u4e00\u5217\u6709\u5e26[*]\u53f7\uff0c\u5219\u8bf4\u660e\u662f\u7126\u70b9\u7a97\u53e3</p>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#input","title":"input","text":"<p>\u5728dumpsys input\u4e2d\u67e5\u770bFocusedApplications\u548cFocusedWindows</p> <pre><code>  FocusedApplications:\n    displayId=0, name='ActivityRecord{e9566ee u0 com.android.launcher3/.uioverrides.QuickstepLauncher} t12}', dispatchingTimeout=5000ms\n  FocusedWindows:\n    displayId=0, name='f96644 NotificationShade'\n</code></pre> <p>\u5982\u679c\u53d1\u751fANR\uff0c\u7126\u70b9\u7a97\u53e3\u4ee5dumpsys input\u4e3a\u4e3b</p> <pre><code>Input Dispatcher State at time of last ANR:\n    ANR:\n        Time:......\n        Reason:......\n        Window:......\n    FocusedApplications:......\n    FocusedWindows: &lt;none&gt;\n</code></pre>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/focused-window/#event-log","title":"event\u00a0log","text":"<pre><code>05-18 19:22:55.806   580   607 I input_focus: [Focus request f96644 NotificationShade,reason=UpdateInputWindows]\n05-18 19:22:55.837   580   675 I input_focus: [Focus leaving e225d94 com.android.launcher3/com.android.launcher3.uioverrides.QuickstepLauncher (server),reason=Waiting for window because NO_WINDOW]\n05-18 19:22:55.855   580   675 I input_focus: [Focus entering f96644 NotificationShade (server),reason=Window became focusable. Previous reason: NOT_VISIBLE]\n</code></pre> <p>request \u548c entering\u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u4e00\u4e00\u5bf9\u5e94\uff0c\u6253\u5370\u4e86entering\u5219\u8868\u793a\u771f\u6b63\u7684\u7126\u70b9\u5df2\u7ecf\u8fdb\u5165\u5230\u5bf9\u5e94\u7684\u7a97\u53e3\u3002 \u53d1\u751fApplication does not hava focused window\u65f6\uff0c\u4e00\u822crequest \u6709\u6253\u5370\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u662f\u5426\u6709entering\u7684\u6253\u5370\u6765\u5206\u6790\u3002 - entering\u90e8\u5206\u6709\u6253\u5370\uff0c\u4ee3\u8868\u7126\u70b9\u5df2\u7ecf\u5728input\u91cc\u9762\uff0c\u4f46\u662f\u4ecd\u7136\u6709ANR\uff0c\u5c31\u9700\u8981\u4eceinput\u7b49\u65b9\u9762\u5206\u6790\u3002 - entering\u90e8\u5206\u672a\u6253\u5370\uff0c\u4ee3\u8868input\u6ca1\u6709\u88ab\u89e6\u53d1\u7126\u70b9\u7a97\u53e3\u8bbe\u7f6e\u5230input\uff0c\u9700\u6392\u67e5SurfaceFlinger\u6216WMS\u3002</p>","tags":["Android","Input","ANR","WMS"]},{"location":"android/input/inotify-epoll/","title":"INotify\u4e0eEpoll\u673a\u5236","text":"","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#inotify","title":"INotify\u673a\u5236","text":"<p>INotify \u662fLinux\u63d0\u4f9b\u7ed9\u7528\u6237\u6001\u76d1\u542c\u5185\u6838\u6587\u4ef6\u7cfb\u7edf\u53d8\u5316\u7684\u673a\u5236\uff0c\u53ef\u4ee5\u76d1\u542c\u6587\u4ef6/\u76ee\u5f55\u7684\u589e\u5220\u7b49\u3002INotify \u7684\u7528\u6cd5\u5f88\u7b80\u5355\uff0c\u9996\u5148\u9700\u8981\u8c03\u7528\u5982\u4e0b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a</p> <pre><code>int inotifyfd = inotify_init();\n</code></pre> <p>\u63a5\u7740\u9700\u8981\u901a\u8fc7 inotify_add_watch \u5c06\u6211\u4eec\u5173\u6ce8\u7684\u4e8b\u4ef6\u6dfb\u52a0\u5230\u76d1\u542c\uff1a</p> <pre><code>int wd = inotify_add_watch(inotifyfd, path, event_mask)\n</code></pre> <p>inotify_add_watch \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f inotify_init \u521b\u5efa\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u76d1\u542c\u7684\u8def\u5f84\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u4e8b\u4ef6\u7684\u7c7b\u578b\uff0c\u5982\u6587\u4ef6\u521b\u5efa IN_CREATE\uff0c\u6587\u4ef6\u5220\u9664 IN_DELETE \u7b49\u3002</p> <p>\u4e0a\u9762\u4e24\u6b65\u5b8c\u6210\u4e4b\u540e\u5f53\u6307\u5b9a\u8def\u5f84\u53d1\u751f\u4e86\u6211\u4eec\u60f3\u8981\u76d1\u542c\u7684\u4e8b\u4ef6\u5c31\u4f1a\u5199\u5230<code>inotifyfd</code>\u4e2d\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u5bf9<code>inotifyfd</code>\u8fdb\u884c\u8bfb\u53d6\uff1a</p> <pre><code>char event_buf[512];\nint ret;\nstruct inotify_event *event;\nret = read(inotifyfd, event_buf, sizeof(event_buf));\n</code></pre> <p>\u8bfb\u53d6\u5230\u7684\u4fe1\u606f\u5c01\u88c5\u4e3a inotify_event \u7ed3\u6784\u4f53\uff0c\u4f7f\u7528while\u5faa\u73af\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u4e8b\u4ef6\u8bfb\u53d6\u51fa\u6765\uff1a</p> <pre><code>while(ret &gt; (int)sizeof(struct inotify_event)) {\n    event = (struct inotify_event*)(event_buf + event_pos);\n    ......\n}\n</code></pre> <p>inotify_event \u7ed3\u6784\u4f53\u7684\u4fe1\u606f\u5982\u4e0b</p> <pre><code>struct inotify_event {\n    __s32       wd;     /* watch descriptor */\n    __u32       mask;       /* watch mask */\n    __u32       cookie;     /* cookie to synchronize two events */\n    __u32       len;        /* length (including nulls) of name */\n    char        name[0];    /* stub for possible name */\n};\n</code></pre> <p>\u5176\u5b9eINotify\u7684\u7528\u6cd5\u5c31\u4e09\u6b65\uff1a</p> <ul> <li>\u4f7f\u7528inotify_init\u521b\u5efa\u4e00\u4e2ainotify\u5bf9\u8c61</li> <li>\u4f7f\u7528inotify_add_watch\u5bf9\u6587\u4ef6\u8def\u5f84\u8fdb\u884c\u76d1\u542c</li> <li>\u4f7f\u7528read\u5bf9\u8bfb\u53d6\u76d1\u542c\u5230\u7684\u4e8b\u4ef6</li> <li>\u5176\u5b9eAndroid SDK\u5c31\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76d1\u542c\u6587\u4ef6\u7684\u7c7bFileObserver\uff0c\u5b83\u7684\u5e95\u5c42\u539f\u7406\u5c31\u662f\u4f7f\u7528\u7684INotify\u673a\u5236\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u770b\u770b\u5b83\u5185\u90e8\u7684\u51e0\u4e2anative\u51fd\u6570\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\u8fdb\u5165\u5b9e\u8df5\u73af\u8282\uff0c\u5199\u4e00\u4e2a\u7b80\u5355\u7684INotify\u6d4b\u8bd5\u7c7b\uff0c\u5982\u4e0b\u76ee\u5f55\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\uff1a</p>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_1","title":"\u5b9e\u8df5","text":"","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#androidbp","title":"Android.bp","text":"<pre><code>cc_binary {\n    name: \"inotify-demo\",\n    srcs: [\"INotifyDemo.cpp\"],\n    shared_libs: [\n        \"liblog\",\n    ],\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#inotifydemocpp","title":"INotifyDemo.cpp","text":"<pre><code>#include &lt;sys/inotify.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;log/log.h&gt;\n\n#define TAG_DEMO \"INotifyDemo\"\n\n#undef ALOGD\n#define ALOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG_DEMO, __VA_ARGS__)\n\n#undef ALOGE\n#define ALOGE(...) __android_log_print(ANDROID_LOG_ERROR, TAG_DEMO, __VA_ARGS__)\n\n\nint read_events(int fd) {\n    char event_buf[512];\n    int ret;\n    int event_pos = 0;\n    int event_size = 0;\n    struct inotify_event *event;\n\n    ALOGD(\"block read!\");\n\n    //\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u76ee\u6807\u6587\u4ef6\u8def\u5f84\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6ca1\u6709\u4e8b\u4ef6\u5219\u963b\u585e\n    ret = read(fd, event_buf, sizeof(event_buf));\n\n    //read\u7684\u8fd4\u56de\u503c\u8868\u793a\u5b9e\u9645\u8bfb\u53d6\u7684\u4e8b\u4ef6\u5927\u5c0f,\u5982\u679c\u5c0f\u4e8e\u4e00\u4e2a\u4e8b\u4ef6\u5927\u5c0f\u5219\u8bf4\u660e\u8bfb\u53d6\u4e8b\u4ef6\u5931\u8d25\n    if (ret &lt; (int) sizeof(struct inotify_event)) {\n        ALOGE(\"read error, could get event!\");\n        return -1;\n    }\n\n    //\u5c06\u6240\u6709\u4e8b\u4ef6\u5faa\u73af\u53d6\u51fa\u6765\n    while (ret &gt; (int) sizeof(struct inotify_event)) {\n        event = (struct inotify_event *) (event_buf + event_pos);\n        ALOGD(\"name = %s, len = %d\", event-&gt;name, event-&gt;len);\n        if (event-&gt;len) {\n            ALOGD(\"mask = %d\", event-&gt;mask);\n            if (event-&gt;mask &amp; IN_CREATE) {\n                //\u6587\u4ef6\u521b\u5efa\n                ALOGD(\"create file[%s] successfully\", event-&gt;name);\n            } else {\n                //\u6587\u4ef6\u5220\u9664\n                ALOGD(\"delete file[%s] successfully\", event-&gt;name);\n            }\n        }\n        event_size = sizeof(struct inotify_event) + event-&gt;len;\n        ret -= event_size;\n        event_pos += event_size;\n    }\n    return 0;\n}\n\nint main(int argc, char **argv) {\n    //inotify\u8bfb\u53d6\u5230\u4e00\u6b21\u4e8b\u4ef6\u5c31\u4f1a\u7ed3\u675f\uff0c\u8fd9\u91cc\u4f7f\u7528\u6b7b\u5faa\u73af\u8bfb\u53d6\n    while (true) {\n        int inotifyFd;\n        int ret;\n        const char *path = argv[1];\n        ALOGD(\"argc = %d\", argc);\n\n        //\u521d\u59cb\u5316inotify\n        inotifyFd = inotify_init();\n        if (inotifyFd == -1) {\n            ALOGD(\"inotify_init error!\\n\");\n            return -1;\n        }\n\n        ALOGD(\"listen target patch = [%s] \\n\", path);\n\n        //\u5bf9\u76ee\u6807\u6587\u4ef6\u8def\u5f84\u8fdb\u884c\u76d1\u542c\uff0c\u76d1\u542c\u7684\u4e8b\u4ef6\u662f\u6587\u4ef6\u521b\u5efaIN_CREATE\uff0c\u548c\u6587\u4ef6\u5220\u9664IN_DELETE\n        ret = inotify_add_watch(inotifyFd, path, IN_CREATE | IN_DELETE);\n\n        //\u7b49\u5f85\u76ee\u6807\u6587\u4ef6\u8def\u5f84\u7684\u4e8b\u4ef6\u53d1\u751f\n        read_events(inotifyFd);\n\n        //\u5220\u9664inotifyFd\n        if (inotify_rm_watch(inotifyFd, ret) == -1) {\n            ALOGD(\"notify_rm_watch error!\\n\");\n            return -1;\n        }\n\n        //\u5173\u95edinotifyFd\n        close(inotifyFd);\n    }\n\n    return 0;\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_2","title":"\u7f16\u8bd1","text":"<pre><code>make inotify-demo\n</code></pre> <ul> <li>\u7f16\u8bd1\u7ed3\u679c</li> </ul> <pre><code>[ 99% 322/323] target Prebuilt: inotify-demo (out/target/product/qssi_64/obj/EXECUTABLES/inotify-demo_intermediates/inotify-demo)\n[100% 323/323] Install: out/target/product/qssi_64/system/bin/inotify-demo\n\n##### build completed successfully (02:40 (mm:ss)) ####\n</code></pre> <ul> <li>push</li> </ul> <pre><code>adb push out/target/product/qssi_64/system/bin/inotify-demo /system/bin/inotify-demo\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_3","title":"\u8fd0\u884c","text":"<ul> <li>\u6293log\uff1a</li> </ul> <pre><code>adb logcat -v threadtime | grep -iE \"INotifyDemo\"\n</code></pre> <p>\u8fd0\u884c\u65f6\u7684log\uff1a</p> <pre><code>12-15 10:24:35.654 12746 12746 D INotifyDemo: argc = 2\n12-15 10:24:35.654 12746 12746 D INotifyDemo: listen target patch = [dev/input] \n12-15 10:24:35.654 12746 12746 D INotifyDemo: block read!\n</code></pre> <p>\u65b0\u589e\u6587\u4ef6\u7684log\uff1a</p> <pre><code>12-15 10:26:09.834 12746 12746 D INotifyDemo: name = inotify.txt, len = 16\n12-15 10:26:09.834 12746 12746 D INotifyDemo: mask = 256\n12-15 10:26:09.834 12746 12746 D INotifyDemo: create file[inotify.txt] successfully\n\n12-15 10:26:09.848 12746 12746 D INotifyDemo: argc = 2\n12-15 10:26:09.848 12746 12746 D INotifyDemo: listen target patch = [dev/input] \n12-15 10:26:09.848 12746 12746 D INotifyDemo: block read!\n</code></pre> <p>\u65b0\u589e\u6587\u4ef6\u65b9\u6cd5\uff1a aosp-phone:/dev/input ## touch inotify.txt</p> <p>\u5220\u9664\u6587\u4ef6\u7684log\uff1a</p> <pre><code>12-15 10:27:54.214 12746 12746 D INotifyDemo: name = inotify.txt, len = 16\n12-15 10:27:54.214 12746 12746 D INotifyDemo: mask = 512\n12-15 10:27:54.214 12746 12746 D INotifyDemo: delete file[inotify.txt] successfully\n\n12-15 10:27:54.228 12746 12746 D INotifyDemo: argc = 2\n12-15 10:27:54.228 12746 12746 D INotifyDemo: listen target patch = [dev/input] \n12-15 10:27:54.229 12746 12746 D INotifyDemo: block read!\n</code></pre> <p>\u5220\u9664\u6587\u4ef6\u65b9\u6cd5\uff1a aosp-phone:/dev/input ## rm -rf inotify.txt</p> <ul> <li>\u8fd0\u884c</li> </ul> <pre><code>adb shell /system/bin/inotify-demo dev/input\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#epoll","title":"Epoll\u673a\u5236","text":"<p>INotify \u6709\u4e2a\u95ee\u9898\u5c31\u662f\u9700\u8981\u4e3b\u52a8\u8c03\u7528 read \u51fd\u6570\u53bb\u8bfb\u53d6\u4e8b\u4ef6\uff0c\u8fd9\u5e76\u4e0d\u662f Input \u7cfb\u7edf\u60f3\u8981\u7684\uff0cInput \u7cfb\u7edf\u9700\u8981\u7684\u662f INotify \u76d1\u542c\u7684\u76ee\u6807\u8def\u5f84\u53d1\u751f\u53d8\u5316\u4e4b\u540e\u6765\u80fd\u901a\u77e5\u81ea\u5df1\u800c\u4e0d\u662f\u81ea\u5df1\u4e3b\u52a8\u53bb\u8bfb\uff0c\u8fd9\u5c31\u9700\u8981\u7ed3\u5408\u53e6\u4e00\u4e2a\u673a\u5236 Epoll \u6765\u5b9e\u73b0\uff0cEpoll \u662f\u4e00\u79cd I/O \u591a\u8def\u590d\u7528\u6280\u672f\uff0c\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u53bb\u76d1\u542c Linux \u4e0b\u7684 fd\uff0c\u5f53\u8fd9\u4e9b fd \u53d1\u751f\u4e8b\u4ef6\u4e4b\u540e\u4f1a\u901a\u8fc7\u56de\u8c03\u6765\u901a Epoll\u3002</p> <p>Epoll\u63d0\u4f9b\u4e09\u4e2a\u64cd\u4f5c\u51fd\u6570epoll_create\uff0cepoll_ctl\uff0cepoll_wait\u3002</p>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#epoll_create","title":"epoll_create","text":"<pre><code>int epoll_create(int size);\n</code></pre> <p>epoll_create \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a epoll \u5bf9\u8c61\uff0csize \u7528\u6765\u544a\u8bc9\u5185\u6838\u9700\u8981\u76d1\u542c\u7684fd\u6570\u91cf\u3002</p>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#epoll_ctl","title":"epoll_ctl","text":"<pre><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event* event)\n</code></pre> <p>epoll_ctl \u7528\u4e8e\u5bf9\u9700\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26(fd)\u6267\u884cop\u64cd\u4f5c\uff0cepoll_ctl \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 epfd \u5c31\u662f epoll_create \u7684\u8fd4\u56de\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570op\u8868\u793a\u5bf9fd\u7684\u64cd\u4f5c\u65b9\u5f0f\uff1a</p> <pre><code>EPOLL_CTL_ADD(\u6dfb\u52a0)\uff0c\nEPOLL_CTL_DEL(\u5220\u9664)\uff0c\nEPOLL_CTL_MOD\uff08\u4fee\u6539\uff09\n</code></pre> <p>\u6700\u540e\u4e00\u4e2a\u53c2\u6570 event \u8868\u793a\u8981\u76d1\u542c\u7684\u5177\u4f53\u4e8b\u4ef6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53 epoll_event \uff1a</p> <pre><code>typedef union epoll_data {\n    void *ptr;\n    int fd;\n    uint32_t u32;\n    uint64_t u64;\n} epoll_data_t;\n\nstruct epoll_event {\n    uint32_t events; /* Epoll\u4e8b\u4ef6\u7c7b\u578b */\n    epoll_data_t data;  /*\u7528\u6237\u6570\u636e\uff0c\u5305\u542b\u76d1\u542c\u7684fd*/\n}\n</code></pre> <p>Epoll \u4e8b\u4ef6\u7c7b\u578b\u901a\u5e38\u6709\u5982\u4e0b\uff1a</p> <pre><code>EPOLLIN \uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bfb\uff08\u5305\u62ec\u5bf9\u7aefSOCKET\u6b63\u5e38\u5173\u95ed\uff09\uff1b\nEPOLLOUT\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u5199\uff1b\nEPOLLPRI\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u7d27\u6025\u7684\u6570\u636e\u53ef\u8bfb\uff08\u8fd9\u91cc\u5e94\u8be5\u8868\u793a\u6709\u5e26\u5916\u6570\u636e\u5230\u6765\uff09\uff1b\nEPOLLERR\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u9519\u8bef\uff1b\nEPOLLHUP\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u88ab\u6302\u65ad\uff1b\nEPOLLET\uff1a \u5c06EPOLL\u8bbe\u4e3a\u8fb9\u7f18\u89e6\u53d1(Edge Triggered)\u6a21\u5f0f\uff0c\u8fd9\u662f\u76f8\u5bf9\u4e8e\u6c34\u5e73\u89e6\u53d1(Level Triggered)\u6765\u8bf4    \n\u7684\u3002\nEPOLLONESHOT\uff1a\u53ea\u76d1\u542c\u4e00\u6b21\u4e8b\u4ef6\uff0c\u5f53\u76d1\u542c\u5b8c\u8fd9\u6b21\u4e8b\u4ef6\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u9700\u8981\u7ee7\u7eed\u76d1\u542c\u8fd9\u4e2asocket\u7684\u8bdd\uff0c  \n\u9700\u8981\u518d\u6b21\u628a\u8fd9\u4e2asocket\u52a0\u5165\u5230EPOLL\u961f\u5217\u91cc\nEPOLLWAKEUP:\u7cfb\u7edf\u4f1a\u5728\u4e8b\u4ef6\u6392\u961f\u65f6\u5c31\u4fdd\u6301\u5524\u9192\uff0c\u4eceepoll_wait\u8c03\u7528\u5f00\u59cb\uff0c\u6301\u7eed\u8981\u4e0b\u4e00\u6b21epoll_wait\u8c03\u7528\n</code></pre> <p>\u901a\u5e38 epoll_ctl \u7684\u7528\u6cd5\u5c31\u662f\u8fd9\u6837\uff1a</p> <pre><code>struct epoll_event eventItem = {};\neventItem.events = EPOLLIN | EPOLLWAKEUP;\neventItem.data.fd = mINotifyFd;\nint result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, fd, &amp;eventItem);\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#epoll_wait","title":"epoll_wait","text":"<pre><code>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n</code></pre> <p>epoll_wait \u7528\u4e8e\u7b49\u5f85\u4e8b\u4ef6\u7684\u4e0a\u62a5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f epoll_create \u7684\u8fd4\u56de\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570events\u662f\u7528\u6765\u83b7\u53d6\u5185\u6838\u5f97\u5230\u4e8b\u4ef6\u7684\u96c6\u5408\uff0c\u901a\u5e38\u662f\u4e00\u4e2aepoll_event\u6570\u7ec4\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570maxevents\u662f\u6700\u5927\u4e8b\u4ef6\u7684\u6570\u91cf\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u8d85\u65f6\u8fd4\u56de\u65f6\u95f4\u3002</p> <p>Epoll\u7684\u4f7f\u7528\u6b65\u9aa4\u4e5f\u5f88\u7b80\u5355\uff1a</p> <ul> <li>\u901a\u8fc7epoll_create\u521b\u5efaepoll\u5bf9\u8c61\u3002</li> <li>\u4e3a\u9700\u8981\u76d1\u542c\u7684fd\u6784\u5efa\u4e00\u4e2aepoll_event\u7ed3\u6784\u4f53\uff0c\u5e76\u6ce8\u518c\u5230epoll_ctl\u8fdb\u884c\u76d1\u542c\u3002</li> <li>\u8c03\u7528epoll_wait\u8fdb\u5165\u76d1\u542c\u72b6\u6001\uff0c\u4f20\u5165\u4e00\u4e2aepoll_event\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u7528\u4e8e\u6536\u96c6\u76d1\u542c\u5230\u7684\u4e8b\u4ef6\u3002</li> <li>\u904d\u5386\u7b2c\u4e09\u6b65\u7684epoll_event\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u4f9d\u6b21\u53d6\u51fa\u4e8b\u4ef6\u5904\u7406\u3002</li> </ul>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_4","title":"\u5b9e\u8df5","text":"<p>\u63a5\u7740\u8fdb\u5165\u5b9e\u8df5\u73af\u8282\uff0c\u6211\u4eec\u7ed3\u5408 INotify \u548c Epoll \u4e00\u8d77\u6765\u4f7f\u7528\uff1a</p>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#androidbp_1","title":"Android.bp","text":"<pre><code>cc_binary {\n    name: \"inotify-epoll-demo\",\n    srcs: [\"INotifyEpollDemo.cpp\"],\n    shared_libs: [\n        \"liblog\",\n    ],\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#inotifyepolldemocpp","title":"INotifyEpollDemo.cpp","text":"<pre><code>#include &lt;sys/inotify.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/epoll.h&gt;\n#include &lt;sys/ioctl.h&gt;\n#include &lt;log/log.h&gt;\n\n#define TAG_DEMO \"INotifyEpollDemo\"\n\n#undef ALOGD\n#define ALOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG_DEMO, __VA_ARGS__)\n\n#undef ALOGE\n#define ALOGE(...) __android_log_print(ANDROID_LOG_ERROR, TAG_DEMO, __VA_ARGS__)\n\nint read_events(int fd) {\n    char event_buf[512];\n    int ret;\n    int event_pos = 0;\n    int event_size = 0;\n    struct inotify_event *event;\n\n    ALOGD(\"block read!\");\n    //\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u76ee\u6807\u6587\u4ef6\u8def\u5f84\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6ca1\u6709\u4e8b\u4ef6\u5219\u963b\u585e\n    ret = read(fd, event_buf, sizeof(event_buf));\n\n    //read\u7684\u8fd4\u56de\u503c\u8868\u793a\u5b9e\u9645\u8bfb\u53d6\u7684\u4e8b\u4ef6\u5927\u5c0f,\u5982\u679c\u5c0f\u4e8e\u4e00\u4e2a\u4e8b\u4ef6\u5927\u5c0f\u5219\u8bf4\u660e\u8bfb\u53d6\u4e8b\u4ef6\u5931\u8d25\n    if (ret &lt; (int) sizeof(struct inotify_event)) {\n        ALOGE(\"read error, could get event\");\n        return -1;\n    }\n\n    //\u5c06\u6240\u6709\u4e8b\u4ef6\u5faa\u73af\u53d6\u51fa\u6765\n    while (ret &gt; (int) sizeof(struct inotify_event)) {\n        event = (struct inotify_event *) (event_buf + event_pos);\n        ALOGD(\"name = %s, len = %d\", event-&gt;name, event-&gt;len);\n        if (event-&gt;len) {\n            ALOGD(\"mask = %d\", event-&gt;mask);\n            if (event-&gt;mask &amp; IN_CREATE) {\n                //\u6587\u4ef6\u521b\u5efa\n                ALOGD(\"create file[%s] successfully\", event-&gt;name);\n            } else {\n                //\u6587\u4ef6\u5220\u9664\n                ALOGD(\"delete file[%s] successfully\", event-&gt;name);\n            }\n        }\n        event_size = sizeof(struct inotify_event) + event-&gt;len;\n        ret -= event_size;\n        event_pos += event_size;\n    }\n    return 0;\n}\n\nint main(int argc, char **argv) {\n    //inotify\u8bfb\u53d6\u5230\u4e00\u6b21\u4e8b\u4ef6\u5c31\u4f1a\u7ed3\u675f\uff0c\u8fd9\u91cc\u4f7f\u7528\u6b7b\u5faa\u73af\u8bfb\u53d6\n    while (true) {\n        int inotifyFd;\n        int ret;\n        int mEpollFd;\n        int result;\n        int EPOLL_MAX_EVENTS = 16;\n        struct epoll_event mPendingEventItems[EPOLL_MAX_EVENTS];\n        const char *path = argv[1];\n        ALOGD(\"argc = %d\", argc);\n\n        //\u521d\u59cb\u5316inotify\n        inotifyFd = inotify_init();\n\n        //\u521d\u59cb\u5316epoll\n        mEpollFd = epoll_create1(EPOLL_CLOEXEC);\n\n        //\u521b\u5efa\u5c01\u88c5inotifyFd\u7684\u7ed3\u6784\u4f53epoll_event\n        struct epoll_event eventItem = {};\n        eventItem.events = EPOLLIN | EPOLLWAKEUP;\n        eventItem.data.fd = inotifyFd;\n        //\u5c06inotifyFd\u6dfb\u52a0\u5230epoll\u8fdb\u884c\u76d1\u542c\n        result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, inotifyFd, &amp;eventItem);\n\n        if (inotifyFd == -1) {\n            ALOGD(\"inotify_init error!\\n\");\n            return -1;\n        }\n        ALOGD(\"listen target patch = [%s] \\n\", path);\n        //\u5bf9\u76ee\u6807\u6587\u4ef6\u8def\u5f84\u8fdb\u884c\u76d1\u542c\uff0c\u76d1\u542c\u7684\u4e8b\u4ef6\u662f\u6587\u4ef6\u521b\u5efaIN_CREATE\uff0c\u548c\u6587\u4ef6\u5220\u9664IN_DELETE\n        ret = inotify_add_watch(inotifyFd, path, IN_CREATE | IN_DELETE);\n\n\n        ALOGD(\"epoll_wait.....\");\n        //\u7b49\u5f85\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u4f1a\u963b\u585e\n        int pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, -1);\n        ALOGD(\"epoll event happened pollResult = %d\", pollResult);\n\n        for (auto &amp;event: mPendingEventItems) {\n            if (event.data.fd == inotifyFd) {\n                //\u5f53inotifyFd\u4e0a\u6709\u4e8b\u4ef6\u53d1\u751f\uff0c\u5219\u8bfb\u53d6\u4e8b\u4ef6\n                read_events(inotifyFd);\n            }\n        }\n\n        //\u5220\u9664inotifyFd\n        if (inotify_rm_watch(inotifyFd, ret) == -1) {\n            ALOGD(\"notify_rm_watch error!\\n\");\n            return -1;\n        }\n\n        //\u5173\u95edinotifyFd\n        close(inotifyFd);\n    }\n\n    return 0;\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_5","title":"\u7f16\u8bd1","text":"<pre><code>make inotify-epoll-demo\n</code></pre> <ul> <li>\u7f16\u8bd1\u7ed3\u679c</li> </ul> <pre><code>[ 99% 322/323] target Prebuilt: inotify-epoll-demo (out/target/product/qssi_64/obj/EXECUTABLES/inotify-epoll-demo_intermediates/inotify-epoll-demo)\n[100% 323/323] Install: out/target/product/qssi_64/system/bin/inotify-epoll-demo\n\n##### build completed successfully (02:24 (mm:ss)) ####\n</code></pre> <ul> <li>push</li> </ul> <pre><code>adb push out/target/product/qssi_64/system/bin/inotify-epoll-demo /system/bin/inotify-epoll-demo\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inotify-epoll/#_6","title":"\u8fd0\u884c","text":"<ul> <li>\u6293log\uff1a</li> </ul> <pre><code>adb logcat -v threadtime | grep -iE \"INotifyEpollDemo\"\n</code></pre> <p>\u8fd0\u884c\u65f6\u7684log\uff1a</p> <pre><code>12-15 09:44:45.868  9945  9945 D INotifyEpollDemo: argc = 2\n12-15 09:44:45.870  9945  9945 D INotifyEpollDemo: listen target patch = [dev/input] \n12-15 09:44:45.870  9945  9945 D INotifyEpollDemo: epoll_wait.....\n</code></pre> <p>\u65b0\u589e\u6587\u4ef6\u7684log\uff1a</p> <pre><code>12-15 09:45:28.266  9945  9945 D INotifyEpollDemo: epoll event happened pollResult = 1\n12-15 09:45:28.266  9945  9945 D INotifyEpollDemo: block read!\n12-15 09:45:28.266  9945  9945 D INotifyEpollDemo: name = epoll.txt, len = 16\n12-15 09:45:28.266  9945  9945 D INotifyEpollDemo: mask = 256\n12-15 09:45:28.266  9945  9945 D INotifyEpollDemo: create file[epoll.txt] successfully\n\n12-15 09:45:28.268  9945  9945 D INotifyEpollDemo: argc = 2\n12-15 09:45:28.269  9945  9945 D INotifyEpollDemo: listen target patch = [dev/input] \n12-15 09:45:28.269  9945  9945 D INotifyEpollDemo: epoll_wait.....\n</code></pre> <p>\u65b0\u589e\u6587\u4ef6\u65b9\u6cd5\uff1a aosp-phone:/dev/input ## touch epoll.txt</p> <p>\u5220\u9664\u6587\u4ef6\u7684log\uff1a</p> <pre><code>12-15 09:46:32.554  9945  9945 D INotifyEpollDemo: epoll event happened pollResult = 1\n12-15 09:46:32.554  9945  9945 D INotifyEpollDemo: block read!\n12-15 09:46:32.554  9945  9945 D INotifyEpollDemo: name = epoll.txt, len = 16\n12-15 09:46:32.554  9945  9945 D INotifyEpollDemo: mask = 512\n12-15 09:46:32.554  9945  9945 D INotifyEpollDemo: delete file[epoll.txt] successfully\n\n12-15 09:46:32.555  9945  9945 D INotifyEpollDemo: argc = 2\n12-15 09:46:32.556  9945  9945 D INotifyEpollDemo: listen target patch = [dev/input] \n12-15 09:46:32.556  9945  9945 D INotifyEpollDemo: epoll_wait.....\n</code></pre> <p>\u5220\u9664\u6587\u4ef6\u65b9\u6cd5\uff1a aosp-phone:/dev/input ## rm -rf epoll.txt</p> <ul> <li>\u8fd0\u884c</li> </ul> <pre><code>adb shell /system/bin/inotify-epoll-demo dev/input\n</code></pre> <p>epoll \u76d1\u542c\u5230 inotifyFd \u4e0a\u6709\u4e8b\u4ef6\u53d1\u751f\u4e4b\u540e\uff0c\u4fbf\u4f1a\u4ece\u963b\u585e\u4e2d\u9192\u6765\uff0c\u6211\u4eec\u6b64\u65f6\u5224\u5b9a\u5f53\u524d fd \u7c7b\u578b\u4e3a event.data.fd == inotifyFd \u4fbf\u53ef\u4ee5\u53bb\u8bfb\u53d6\u5bf9\u5e94\u4e8b\u4ef6\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u7ed3\u5408 INotify \u4e0e Epoll \u673a\u5236\u5b9e\u73b0\u4e86\u88ab\u52a8\u76d1\u542c\u6587\u4ef6\u4e8b\u4ef6\u7684\u529f\u80fd\uff0c\u5176\u5b9e Android \u7684 Input \u5b50\u7cfb\u7edf\u5c31\u662f\u8fd9\u4e48\u5e72\u7684\uff0c\u6211\u5199\u7684\u6d4b\u8bd5\u4ee3\u7801\u5c31\u662f\u53c2\u8003 Input \u7684\u76f8\u5173\u5b9e\u73b0\uff0c\u6709\u4e86\u8fd9\u4e2a\u57fa\u7840\u540e\u9762\u518d\u5206\u6790 Input \u7cfb\u7edf\u8fd9\u90e8\u5206\u4ee3\u7801\u65f6\u5c31\u975e\u5e38\u5bb9\u6613\u4e86\u3002</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/","title":"InputDispatcher\u4e0eInputChannel","text":"<p>InputDispatcher\u63a5\u6536InputReader\u8bfb\u53d6\u5230\u7684\u4e8b\u4ef6\uff0c\u5206\u53d1\u7ed9\u5bf9\u5e94\u7a97\u53e3\uff0cInputDispatcher\u5c5e\u4e8esystem_server\u8fdb\u7a0b\u548c\u5404\u4e2a\u5e94\u7528\u4e0d\u5728\u540c\u4e00\u8fdb\u7a0b\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8054\u7cfb\u9760\u7684\u5c31\u662fInputChannel\u3002</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#handleresumeactivity","title":"handleResumeActivity","text":"<p>\u76f4\u63a5\u4eceActivityThread\u7684handleResumeActivity\u5f00\u59cb\uff0cActivity\u7684DecorView\u4f1a\u88ab\u6dfb\u52a0\u5230Window</p> <pre><code>@Override\npublic void handleResumeActivity(IBinder token, boolean finalStateRequest, boolean isForward,\n        String reason) {\n        ......\n        if (a.mVisibleFromClient) {\n            if (!a.mWindowAdded) {\n                a.mWindowAdded = true;\n                wm.addView(decor, l);\n            } else { \n                ......\n                a.onWindowAttributesChanged(l);\n            }\n        }\n      ......\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#addview","title":"addView","text":"<p>frameworks/base/core/java/android/view/WindowManagerImpl.java</p> <pre><code>@Override\npublic void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n    applyDefaultToken(params);\n    mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\n}\n</code></pre> <p>frameworks/base/core/java/android/view/WindowManagerGlobal.java</p> <pre><code>public void addView(View view, ViewGroup.LayoutParams params,\n    Display display, Window parentWindow) {\n    ......\n\n    root = new ViewRootImpl(view.getContext(), display);\n    ......\n    root.setView(view, wparams, panelParentView);\n    ......\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#setview","title":"setView","text":"<p>frameworks/base/core/java/android/view/ViewRootImpl.java \u521b\u5efamInputChannel\uff0c\u5e76\u4f20\u9012\u7ed9WMS</p> <pre><code>/**\n * We have one child\n */\npublic void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n    synchronized (this) {\n    ......\n    if ((mWindowAttributes.inputFeatures\n                    &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {\n                mInputChannel = new InputChannel();\n           }\n           res = mWindowSession.addToDisplay(mWindow, mSeq,mWindowAttributes,getHostVisibility(), mDisplay.getDisplayId(), mTmpFrame,mAttachInfo.mContentInsets,\n           mAttachInfo.mStableInsets,mAttachInfo.mOutsets,\n           mAttachInfo.mDisplayCutout, mInputChannel,\n           mTempInsets);\n     ......\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#addtodisplay","title":"addToDisplay","text":"<p>frameworks/base/services/core/java/com/android/server/wm/Session.java</p> <pre><code>@Override\npublic int addToDisplay(IWindow window, int seq, WindowManager.LayoutParams attrs,\n      int viewVisibility, int displayId, Rect outFrame, Rect outContentInsets,\n      Rect outStableInsets, Rect outOutsets,\n      DisplayCutout.ParcelableWrapper outDisplayCutout, InputChannel outInputChannel,\n      InsetsState outInsetsState) {\n      return mService.addWindow(this, window, seq, attrs, viewVisibility, displayId, outFrame,\n              outContentInsets, outStableInsets, outOutsets, outDisplayCutout, outInputChannel,\n              outInsetsState);\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#addwindow","title":"addWindow","text":"<p>frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java</p> <pre><code>public int addWindow(Session session, IWindow client, int seq,\n        LayoutParams attrs, int viewVisibility, int displayId, Rect outFrame,\n        Rect outContentInsets, Rect outStableInsets, Rect outOutsets,\n        DisplayCutout.ParcelableWrapper outDisplayCutout, InputChannel outInputChannel,\n        InsetsState outInsetsState) {\n       ......\n       final WindowState win = new WindowState(this, session, client, token, parentWindow,\n                appOp[0], seq, attrs, viewVisibility, session.mUid,\n                session.mCanAddInternalSystemWindow);\n       final boolean openInputChannels = (outInputChannel != null\n                &amp;&amp; (attrs.inputFeatures &amp; INPUT_FEATURE_NO_INPUT_CHANNEL) == 0);\n        if  (openInputChannels) {\n            win.openInputChannel(outInputChannel);\n        }\n       ......\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#winopeninputchannel","title":"win.openInputChannel","text":"<pre><code>void openInputChannel(InputChannel outInputChannel) {\n    if (mInputChannel != null) {\n        throw new IllegalStateException(\"Window already has an input channel.\");\n    }\n    String name = getName();\n    //\u521b\u5efaInputChannelPair\n    InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);\n    //\u670d\u52a1\u7aefInputChannel\n    mInputChannel = inputChannels[0];\n    //\u5ba2\u6237\u7aefInputChannel\n    mClientChannel = inputChannels[1];\n    mInputWindowHandle.token = mClient.asBinder();\n    if (outInputChannel != null) {\n        //\u5c06\u5ba2\u6237\u7aefInputChannel\u53d1\u9001\u56deViewRootImpl\n        mClientChannel.transferTo(outInputChannel);\n        mClientChannel.dispose();\n        mClientChannel = null;\n    } else {\n        // If the window died visible, we setup a dummy input channel, so that taps\n        // can still detected by input monitor channel, and we can relaunch the app.\n        // Create dummy event receiver that simply reports all events as handled.\n        mDeadWindowEventReceiver = new DeadWindowEventReceiver(mClientChannel);\n    }\n    //\u5c06\u670d\u52a1\u7aefInputChannel\u6ce8\u518c\u5230InputDispatcher\n    mWmService.mInputManager.registerInputChannel(mInputChannel, mClient.asBinder());\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#openinputchannelpair","title":"openInputChannelPair","text":"<pre><code>/**\n * Creates a new input channel pair.  One channel should be provided to the input\n * dispatcher and the other to the application's input queue.\n * @param name The descriptive (non-unique) name of the channel pair.\n * @return A pair of input channels.  The first channel is designated as the\n * server channel and should be used to publish input events.  The second channel\n * is designated as the client channel and should be used to consume input events.\n */\npublic static InputChannel[] openInputChannelPair(String name) {\n    if (name == null) {\n        throw new IllegalArgumentException(\"name must not be null\");\n    }\n\n    if (DEBUG) {\n        Slog.d(TAG, \"Opening input channel pair '\" + name + \"'\");\n    }\n    return nativeOpenInputChannelPair(name);\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#nativeopeninputchannelpair","title":"nativeOpenInputChannelPair","text":"<p>frameworks/base/core/jni/android_view_InputChannel.cpp</p> <pre><code>static jobjectArray android_view_InputChannel_nativeOpenInputChannelPair(JNIEnv* env,\n        jclass clazz, jstring nameObj) {\n    ScopedUtfChars nameChars(env, nameObj);\n    std::string name = nameChars.c_str();\n\n    sp&lt;InputChannel&gt; serverChannel;\n    sp&lt;InputChannel&gt; clientChannel;\n    //\u521b\u5efaNative\u5c42serverChannel\u548cclientChannel\n    status_t result = InputChannel::openInputChannelPair(name, serverChannel, clientChannel);\n    .......\n    //\u521b\u5efajava\u5c42\u6570\u7ec4\uff0c\u7528\u5728\u540e\u9762\u5b58\u653ejava\u5c42InputChannel\uff0c\u5e76\u8fd4\u56de\n    jobjectArray channelPair = env-&gt;NewObjectArray(2, gInputChannelClassInfo.clazz, NULL);\n    ......\n    //\u521b\u5efajava\u5c42\u7684server\u7aef\u7684InputChannel\u5bf9\u8c61\n    jobject serverChannelObj = android_view_InputChannel_createInputChannel(env,\n            std::make_unique&lt;NativeInputChannel&gt;(serverChannel));\n    ......\n    //\u521b\u5efajava\u5c42\u7684clien\u7aef\u7684InputChannel\u5bf9\u8c61\n    jobject clientChannelObj = android_view_InputChannel_createInputChannel(env,\n            std::make_unique&lt;NativeInputChannel&gt;(clientChannel));\n    ......\n    env-&gt;SetObjectArrayElement(channelPair, 0, serverChannelObj);\n    env-&gt;SetObjectArrayElement(channelPair, 1, clientChannelObj);\n    return channelPair;\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#inputchannelopeninputchannelpair","title":"InputChannel::openInputChannelPair","text":"<p>\u6b64\u65b9\u6cd5\u4e2d\u521b\u5efa\u4e86\u4e00\u5bf9NativeInputChannel\u548c\u4e00\u5bf9socket\uff0c\u5728InputChannel\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7setFd\u5c06\u4e24\u4e2aInputChanne\u548c\u4e24\u4e2asocket\u4e00\u4e00\u5173\u8054\u4e0a,\u540e\u53bb\u53ef\u4ee5\u901a\u8fc7getFd\u62ff\u5230\u5bf9\u4e8eInputChannel\u7684socket\u8fde\u63a5</p> <p>frameworks/native/libs/input/InputTransport.cpp</p> <pre><code>status_t InputChannel::openInputChannelPair(const std::string&amp; name,\n        sp&lt;InputChannel&gt;&amp; outServerChannel, sp&lt;InputChannel&gt;&amp; outClientChannel) {\n    //\u4e00\u5bf9socket\u6570\u7ec4\n    int sockets[2];\n    if (socketpair(AF_UNIX, SOCK_SEQPACKET, 0, sockets)) {\n        status_t result = -errno;\n        ALOGE(\"channel '%s' ~ Could not create socket pair.  errno=%d\",\n                name.c_str(), errno);\n        outServerChannel.clear();\n        outClientChannel.clear();\n        return result;\n    }\n\n    int bufferSize = SOCKET_BUFFER_SIZE;\n    //\u5bf9\u4e24\u4e2asocker\u5206\u522b\u8bbe\u7f6e\n    setsockopt(sockets[0], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, sizeof(bufferSize));\n    setsockopt(sockets[0], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, sizeof(bufferSize));\n    setsockopt(sockets[1], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, sizeof(bufferSize));\n    setsockopt(sockets[1], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, sizeof(bufferSize));\n\n    std::string serverChannelName = name;\n    //\u521b\u5efaServerChannel\uff0c\u540e\u7f00\u540d+server\n    serverChannelName += \" (server)\";\n    //\u901a\u8fc7setFd\u5c06sockets[0]\u548cServerChannel\u5173\u8054\u4e0a\n    outServerChannel = new InputChannel(serverChannelName, sockets[0]);\n\n    std::string clientChannelName = name;\n    //\u521b\u5efaClientChannel\uff0c\u540e\u7f00\u540d+client\n    clientChannelName += \" (client)\";\n    //\u901a\u8fc7setFd\u5c06sockets[1]\u548cClientChannel\u5173\u8054\u4e0a\n    outClientChannel = new InputChannel(clientChannelName, sockets[1]);\n    return OK;\n}\nInputChannel::InputChannel(const std::string&amp; name, int fd) :\n          mName(name) {\n          ......\n          setFd(fd);\n  }\n</code></pre> <p>\u7ee7\u7eed\u770bnativeOpenInputChannelPair\u65b9\u6cd5\u540e\u534a\u90e8\u5206 android_view_InputChannel_createInputChannel \u6b64\u65b9\u6cd5\u4f1a\u521b\u5efa\u4e00\u4e2ajava\u6570\u7ec4\uff0c\u4e00\u5bf9java\u5c42InputChannel,\u5e76\u5c06\u4e00\u5bf9NativeInputChannel\u8d4b\u503c\u7ed9java\u5c42InputChannel\u7684mPtr\u5c5e\u6027\uff0c\u5e76\u5c06server\u7aefInputChannel\u8d4b\u503c\u7ed9\u6570\u7ec40\uff0c\u5c06client\u7aefInputChannel\u8d4b\u503c\u7ed9\u6570\u7ec41,\u6700\u540e\u5c06\u6570\u7ec4\u8fd4\u56de\u7ed9java\u5c42</p> <pre><code>//\u6307\u5411java\u5c42InputChannel\u7684mPtr\u5c5e\u6027\ngInputChannelClassInfo.mPtr = GetFieldIDOrDie(env, gInputChannelClassInfo.clazz, \"mPtr\", \"J\");\nstatic jobjectArray android_view_InputChannel_nativeOpenInputChannelPair(JNIEnv* env,\n        jclass clazz, jstring nameObj) {\n   //\u521b\u5efa\u4e00\u4e2ajava\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a2,\u7c7b\u578b\u4e3aInputChannel\n   jobjectArray channelPair = env-&gt;NewObjectArray(2, gInputChannelClassInfo.clazz, NULL);\n   ......\n   //\u5c06server\u7aef\u7684NativeInputChannel\u8d4b\u503c\u7ed9java\u5c42\u7684server\u7aef\u7684InputChannel\n   jobject serverChannelObj = android_view_InputChannel_createInputChannel(env,\n            std::make_unique&lt;NativeInputChannel&gt;(serverChannel));\n    ......\n    //\u5c06client\u7aef\u7684NativeInputChannel\u8d4b\u503c\u7ed9java\u5c42\u7684client\u7aef\u7684InputChannel\n    jobject clientChannelObj = android_view_InputChannel_createInputChannel(env,\n            std::make_unique&lt;NativeInputChannel&gt;(clientChannel));\n    ......\n    static jobject android_view_InputChannel_createInputChannel(JNIEnv* env,\n        std::unique_ptr&lt;NativeInputChannel&gt; nativeInputChannel) {\n        //\u521b\u5efajava\u5c42inputChannel\u5bf9\u8c61\n    jobject inputChannelObj = env-&gt;NewObject(gInputChannelClassInfo.clazz,\n            gInputChannelClassInfo.ctor);\n       //\u5f53inputChannel\u4e0d\u4e3a\u7a7a\n    if (inputChannelObj) {\n        //\u7ed9InputChannel\u7684mPtr\u5c5e\u6027\u8d4b\u503c\u4e3aNativeInputChannel\n        android_view_InputChannel_setNativeInputChannel(env, inputChannelObj,\n                 nativeInputChannel.release());\n    }\n    return inputChannelObj;\n}\nstatic void android_view_InputChannel_setNativeInputChannel(JNIEnv* env, jobject inputChannelObj,\n        NativeInputChannel* nativeInputChannel) {\n    //jni\u65b9\u6cd5\uff0c\u7ed9inputChannelObj\u5bf9\u8c61\u7684gInputChannelClassInfo.mPtr\u5c5e\u6027\u8d4b\u503c\u4e3areinterpret_cast&lt;jlong&gt;(nativeInputChannel)\n    env-&gt;SetLongField(inputChannelObj, gInputChannelClassInfo.mPtr,\n             reinterpret_cast&lt;jlong&gt;(nativeInputChannel));\n}\n    //\u5c06server\u7aefInputChannel\u8d4b\u503c\u7ed9\u6570\u7ec40\u7684\u4f4d\u7f6e\n    env-&gt;SetObjectArrayElement(channelPair, 0, serverChannelObj);\n    //\u5c06client\u7aefInputChannel\u8d4b\u503c\u7ed9\u6570\u7ec40\u7684\u4f4d\u7f6e\n    env-&gt;SetObjectArrayElement(channelPair, 1, clientChannelObj);\n    //\u5c06InputChannel\u6570\u7ec4\u8fd4\u56de\u7ed9java\u5c42\n    return channelPair;\n    }\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#windowstate","title":"\u56de\u5230WindowState","text":"<p>\u901a\u8fc7openInputChannelPair\u65b9\u6cd5\u5df2\u7ecf\u83b7\u53d6\u5f97\u5230\u4e86InputChannel\u6570\u7ec4\uff0c\u5e76\u4e14\u6570\u7ec40\u7684\u4f4d\u7f6e\u662fserver\u7aef\u7684InputChannel\uff0c\u6570\u7ec41\u7684\u4f4d\u7f6e\u662fclient\u7aef\u7684InputChannel</p> <p>frameworks/base/services/core/java/com/android/server/wm/WindowState.java</p> <pre><code>void openInputChannel(InputChannel outInputChannel) {\n    if (mInputChannel != null) {\n        throw new IllegalStateException(\"Window already has an input channel.\");\n    }\n    String name = getName();\n    //native\u5c42\u8fd4\u56de\u7684InputChannel\u6570\u7ec4\uff0cserver\u7aef\u548ccilent\u7aef\n    InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);\n    //server\u7aefInputChannel\n    mInputChannel = inputChannels[0];\n    //client\u7aefInputChannel\n    mClientChannel = inputChannels[1];\n    mInputWindowHandle.token = mClient.asBinder();\n    if (outInputChannel != null) {\n        //\u5c06client\u7aefInputChannel\u4f20\u56de\u5230ViewRootImpl\n        mClientChannel.transferTo(outInputChannel);\n        mClientChannel.dispose();\n        mClientChannel = null;\n    } else {\n        // If the window died visible, we setup a dummy input channel, so that taps\n        // can still detected by input monitor channel, and we can relaunch the app.\n        // Create dummy event receiver that simply reports all events as handled.\n        mDeadWindowEventReceiver = new DeadWindowEventReceiver(mClientChannel);\n    }\n    //server\u7aefInputChannel\u6ce8\u518c\u5230native\u5c42InputDispatcher\n    mWmService.mInputManager.registerInputChannel(mInputChannel, mClient.asBinder());\n}\n</code></pre> <p>\u5c06client\u7aefInputChannel\u4f20\u56de\u5230ViewRootImpl transferTo</p> <p>frameworks/base/core/java/android/view/InputChannel.java</p> <pre><code>/**\n * Transfers ownership of the internal state of the input channel to another\n * instance and invalidates this instance.  This is used to pass an input channel\n * as an out parameter in a binder call.\n * @param other The other input channel instance.\n */\npublic void transferTo(InputChannel outParameter) {\n    if (outParameter == null) {\n        throw new IllegalArgumentException(\"outParameter must not be null\");\n    }\n\n    nativeTransferTo(outParameter);\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#android_view_inputchannel_nativetransferto","title":"android_view_InputChannel_nativeTransferTo","text":"<p>frameworks/base/core/jni/android_view_InputChannel.cpp</p> <pre><code>/*\nmClientChannel.transferTo(outInputChannel);\n*/\n//\u6ce8\u610f\u8be5\u65b9\u6cd5\u53c2\u6570\u4e2d\u7684otherObj\u548cobj\uff0cotherObj\u4ee3\u8868\u4f20\u9012\u4e0b\u6765\u7684\u53c2\u6570outInputChannel\uff0cobj\u4ee3\u8868\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u5bf9\u8c61mClientChannel\nstatic void android_view_InputChannel_nativeTransferTo(JNIEnv* env, jobject obj,\n        jobject otherObj) {\n        //\u5f53java\u5c42\u7684outInputChannel\u7684mPtr\u5df2\u7ecf\u6307\u5411\u4e86\u4e00\u4e2aNativeInputChannel\u65f6\u629b\u4e00\u4e2a\u5f02\u5e38\u8fd4\u56de\n    if (android_view_InputChannel_getNativeInputChannel(env, otherObj) != NULL) {\n        jniThrowException(env, \"java/lang/IllegalStateException\",\n                \"Other object already has a native input channel.\");\n        return;\n    }\n    //\u83b7\u53d6java\u5c42mClientChannel\u7684mPtr\u5c5e\u6027\uff0cmPtr\u5c5e\u6027\u4f1a\u6307\u5411\u4e00\u4e2aNativeInputChannel\u5bf9\u8c61\uff0c\u6839\u636e\u524d\u9762\u5206\u6790\u6b64\u65f6mClientChannel\u7684mPtr\u6307\u5411client\u7aef\u7684NativeInputChannel\n    NativeInputChannel* nativeInputChannel =\n            android_view_InputChannel_getNativeInputChannel(env, obj);\n    android_view_InputChannel_setNativeInputChannel(env, otherObj, nativeInputChannel);\n    android_view_InputChannel_setNativeInputChannel(env, obj, NULL);\n}\nstatic NativeInputChannel* android_view_InputChannel_getNativeInputChannel(JNIEnv* env,\n        jobject inputChannelObj) {\n    //jni\u65b9\u6cd5\uff0c\u83b7\u53d6inputChannelObj\u5bf9\u8c61\u7684gInputChannelClassInfo.mPtr\u5c5e\u6027\n    jlong longPtr = env-&gt;GetLongField(inputChannelObj, gInputChannelClassInfo.mPtr);\n    return reinterpret_cast&lt;NativeInputChannel*&gt;(longPtr);\n}\nstatic void android_view_InputChannel_setNativeInputChannel(JNIEnv* env, jobject inputChannelObj,\n        NativeInputChannel* nativeInputChannel) {\n        //jni\u65b9\u6cd5\uff0c\u5c06inputChannelObj\u7684gInputChannelClassInfo.mPtr\u5c5e\u6027\u8d4b\u503c\u4e3anativeInputChannel\n    env-&gt;SetLongField(inputChannelObj, gInputChannelClassInfo.mPtr,\n             reinterpret_cast&lt;jlong&gt;(nativeInputChannel));\n}\n</code></pre> <p>\u603b\u7ed3\uff1a\u4e0a\u9762\u7684\u65b9\u6cd5\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u5c06mClientChannel\u7684mPtr\u5c5e\u6027\u8d4b\u503c\u7ed9outInputChannel\uff0c\u5e76\u5c06mClientChannel\u7684mPtr\u8d4b\u503c\u4e3aNULL\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5c06mClientChannel\u4e0eoutInputChannel\u4e92\u6362\uff0coutInputChannel\u662fViewRootImpl\u7684\u4f20\u9012\u8fc7\u6765\u7684mInputChannel\uff0c\u8fbe\u5230\u4e86\u5c06mClientChannel\u4f20\u9012\u4e2a\u5e94\u7528\u5ba2\u6237\u7aef\u7684\u76ee\u7684\u3002</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#windowstate_1","title":"\u7ee7\u7eed\u56de\u5230WindowState","text":"<p>/frameworks/base/services/core/java/com/android/server/wm/WindowState.java</p> <pre><code>void openInputChannel(InputChannel outInputChannel) {\n    if (mInputChannel != null) {\n        throw new IllegalStateException(\"Window already has an input channel.\");\n    }\n    String name = getName();\n    //native\u5c42\u8fd4\u56de\u7684InputChannel\u6570\u7ec4\uff0cserver\u7aef\u548ccilent\u7aef\n    InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);\n    //server\u7aefInputChannel\n    mInputChannel = inputChannels[0];\n    //client\u7aefInputChannel\n    mClientChannel = inputChannels[1];\n    mInputWindowHandle.token = mClient.asBinder();\n    if (outInputChannel != null) {\n        //\u5c06client\u7aefInputChannel\u4f20\u56de\u5230ViewRootImpl\n        mClientChannel.transferTo(outInputChannel);\n        mClientChannel.dispose();\n        mClientChannel = null;\n    } else {\n        // If the window died visible, we setup a dummy input channel, so that taps\n        // can still detected by input monitor channel, and we can relaunch the app.\n        // Create dummy event receiver that simply reports all events as handled.\n        mDeadWindowEventReceiver = new DeadWindowEventReceiver(mClientChannel);\n    }\n    //server\u7aefInputChannel\u6ce8\u518c\u5230native\u5c42InputDispatcher\n    mWmService.mInputManager.registerInputChannel(mInputChannel, mClient.asBinder());\n}\n</code></pre> <p>client\u7aef\u7684InputChannel\u5df2\u7ecf\u4f20\u9012\u56de\u4e86ViewRootImpl\uff0c\u63a5\u7740\u770bserver\u7aef\u7684InputChannel\u5982\u4f55\u6ce8\u518c\u5230InputDispatcher\u7684 //server\u7aefInputChannel\u6ce8\u518c\u5230native\u5c42InputDispatcher mWmService.mInputManager.registerInputChannel(mInputChannel, mClient.asBinder());</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#registerinputchannel","title":"registerInputChannel","text":"<p>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java</p> <pre><code>/**\n * Registers an input channel so that it can be used as an input event target.\n * @param inputChannel The input channel to register.\n * @param inputWindowHandle The handle of the input window associated with the\n * input channel, or null if none.\n */\npublic void registerInputChannel(InputChannel inputChannel, IBinder token) {\n    if (inputChannel == null) {\n        throw new IllegalArgumentException(\"inputChannel must not be null.\");\n    }\n    if (token == null) {\n        token = new Binder();\n    }\n    inputChannel.setToken(token);\n    //native\u65b9\u6cd5\n    nativeRegisterInputChannel(mPtr, inputChannel, Display.INVALID_DISPLAY);\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#nativeregisterinputchannel","title":"nativeRegisterInputChannel","text":"<p>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp</p> <pre><code>static void nativeRegisterInputChannel(JNIEnv* env, jclass /* clazz */,\n        jlong ptr, jobject inputChannelObj, jint displayId) {\n    //ptr\u662fjava\u5c42InputManagerService\u4e2d\u7684mPtr\u5c5e\u6027\uff0c\u5728InputManagerService\u521d\u59cb\u5316\u65f6\u6307\u5411\u4e86NativeInputManager\n    NativeInputManager* im = reinterpret_cast&lt;NativeInputManager*&gt;(ptr);\n    //\u901a\u8fc7java\u5c42\u4f20\u4e0b\u6765\u7684inputChannels[0]\u83b7\u53d6\u5230Native\u5c42\u7684server\u7aefInputChannel\n    sp&lt;InputChannel&gt; inputChannel = android_view_InputChannel_getInputChannel(env,\n            inputChannelObj);\n    if (inputChannel == nullptr) {\n        throwInputChannelNotInitialized(env);\n        return;\n    }\n    //\u6ce8\u518cinputChannel\n    status_t status = im-&gt;registerInputChannel(env, inputChannel, displayId);\n    if (status) {\n        std::string message;\n        message += StringPrintf(\"Failed to register input channel.  status=%d\", status);\n        jniThrowRuntimeException(env, message.c_str());\n        return;\n    }\n    //\u8bbe\u7f6ehandleInputChannelDisposed\u56de\u8c03\n    android_view_InputChannel_setDisposeCallback(env, inputChannelObj,\n            handleInputChannelDisposed, im);\n }\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#android_view_inputchannel_getinputchannel","title":"android_view_InputChannel_getInputChannel","text":"<p>frameworks/base/core/jni/android_view_InputChannel.cpp</p> <pre><code>sp&lt;InputChannel&gt; android_view_InputChannel_getInputChannel(JNIEnv* env, jobject inputChannelObj) {\n    NativeInputChannel* nativeInputChannel =\n            android_view_InputChannel_getNativeInputChannel(env, inputChannelObj);\n    //inline sp&lt;InputChannel&gt; getInputChannel() { return mInputChannel; },\u8fd4\u56deserver\u7aef\u7684Nativa\u5c42\u7684InputChannel\n    return nativeInputChannel != NULL ? nativeInputChannel-&gt;getInputChannel() : NULL;\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#inputchannelregisterinputchannel","title":"\u6ce8\u518cinputChannel\uff0cregisterInputChannel","text":"<p>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp</p> <pre><code>status_t NativeInputManager::registerInputChannel(JNIEnv* /* env */,\n        const sp&lt;InputChannel&gt;&amp; inputChannel, int32_t displayId) {\n    ATRACE_CALL();\n    return mInputManager-&gt;getDispatcher()-&gt;registerInputChannel(\n            inputChannel, displayId);\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#registerinputchannel_1","title":"registerInputChannel","text":"<p>\u8c03\u5230InputDispatcher\u7684registerInputChannel\u65b9\u6cd5\uff0c 1.\u6b64\u65b9\u6cd5\u4f1a\u521b\u5efaConnection\uff0c\u5c06server\u7aefInputChannel\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u53bb\uff0c 2.\u83b7\u53d6\u4e4b\u524dInputChannel\u7684Fd\u5373socket[0]\uff0c\u5c06fd\u548cconnection\u5173\u8054\uff0c\u540e\u7eedInputDispatch\u901a\u8fc7fd\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94connection\uff0c\u901a\u8fc7connection\u83b7\u53d6server InputChannel\u548cclient InputChannel\u901a\u4fe1\u4ece\u800c\u5c06\u4e8b\u4ef6\u5206\u53d1\u5230\u5bf9\u5e94\u7684\u5e94\u7528\u7a97\u53e3 3.\u5c06fd\u6dfb\u52a0\u5230Looper\u7ebf\u7a0b\u8fdb\u884c\u76d1\u542c</p> <pre><code>//InputDispatcher.h\n// All registered connections mapped by channel file descriptor.\nKeyedVector&lt;int, sp&lt;Connection&gt; &gt; mConnectionsByFd GUARDED_BY(mLock);\nstatus_t InputDispatcher::registerInputChannel(const sp&lt;InputChannel&gt;&amp; inputChannel,\n        int32_t displayId) {\n    { // acquire lock\n        ......\n        //\u521b\u5efaConnection\u5bf9\u8c61\n        sp&lt;Connection&gt; connection = new Connection(inputChannel, false /*monitor*/);\n        //\u83b7\u53d6\u4e4b\u524d\u901a\u8fc7setFd\u5b58\u5165\u7684socket[0]\n        int fd = inputChannel-&gt;getFd();\n        //\u5c06fd\u548cconnection\u5173\u8054,\u540e\u7eedInputDispatch\u901a\u8fc7fd\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94connection\uff0c\u901a\u8fc7connection\u83b7\u53d6server InputChannel\u548cclient InputChannel\u901a\u4fe1\u4ece\u800c\u5c06\u4e8b\u4ef6\u5206\u53d1\u5230\u5bf9\u5e94\u7684\u5e94\u7528\u7a97\u53e3\n        mConnectionsByFd.add(fd, connection);\n        mInputChannelsByToken[inputChannel-&gt;getToken()] = inputChannel;\n        //\u5c06fd\u6dfb\u52a0\u5230Looper\u7ebf\u7a0b\u8fdb\u884c\u76d1\u542c\uff0c\u5728\u6536\u5230\u5bf9\u7aef\u76f8\u5e94\u4e8b\u4ef6\u4e4b\u540e\u56de\u8c03handleReceiveCallback\n        mLooper-&gt;addFd(fd, 0, ALOOPER_EVENT_INPUT, handleReceiveCallback, this);\n    } // release lock\n    // Wake the looper because some connections have changed.\n    mLooper-&gt;wake();\n    return OK;\n}\n</code></pre> <p>\u5728\u521b\u5efaConnection\u65f6\u5c06server\u7aef\u7684inputChannel\u540c\u6b65\u4f20\u7ed9InputPublisher\u7684mChannel</p> <p>frameworks/native/services/inputflinger/InputDispatcher.cpp <pre><code>// --- InputDispatcher::Connection ---\nInputDispatcher::Connection::Connection(const sp&lt;InputChannel&gt;&amp; inputChannel, bool monitor) :\n        status(STATUS_NORMAL), inputChannel(inputChannel),\n        monitor(monitor),\n        inputPublisher(inputChannel), inputPublisherBlocked(false) {\n}\n</code></pre></p> <p>frameworks/native/libs/input/InputTransport.cpp</p> <pre><code>InputPublisher::InputPublisher(const sp&lt;InputChannel&gt;&amp; channel) :\n        mChannel(channel) {\n}\n</code></pre> <p>\u597d\u4e86\uff0c\u4ecejava\u5c42\u4f20\u4e0b\u6765\u7684inputChannels[0]\u5c31\u5df2\u7ecf\u6ce8\u518c\u5230\u4e86InputDispatcher\u5e76\u4e14\u5c06\u5bf9\u5e94\u7684Fd\u6dfb\u52a0\u5230\u4e86InputDispatcher\u7684Loop\u8fdb\u884c\u76d1\u542c\uff0c\u5e76\u4e14\u4f20\u8fdb\u53bb\u4e86\u4e00\u4e2a\u56de\u8c03handleReceiveCallback\uff0c\u5e94\u7528\u7aef\u7a97\u53e3\u5904\u7406\u5b8c\u8f93\u5165\u4e8b\u4ef6\u4e4b\u540e\u56de\u8c03\u6b64\u65b9\u6cd5</p> <p>\u63a5\u7740\u9700\u8981\u770binputChannels[1]\u7684Fd\u662f\u5982\u4f55\u6dfb\u52a0\u5230\u5e94\u7528\u7aef\u8fdb\u884c\u76d1\u542c\u7684</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#viewrootimpl","title":"\u56de\u5230ViewRootImpl","text":"<p>\u5728\u4e0a\u9762\u6d41\u7a0baddToDisplay\u65b9\u6cd5\u6267\u884c\u5b8c\u4e4b\u540eViewRootImpl\u4e2d\u7684mInputChannel\u5df2\u7ecf\u53d8\u6210\u4e86client\u7aef\u7684InputChannel\u5373inputChannels[1]</p> <p>frameworks/base/core/java/android/view/ViewRootImpl.java</p> <pre><code>public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n      ......\n      mInputChannel = new InputChannel();\n      res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,\n                            getHostVisibility(), mDisplay.getDisplayId(), mTmpFrame,\n                            mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,\n                            mAttachInfo.mOutsets, mAttachInfo.mDisplayCutout, mInputChannel,\n                            mTempInsets);\n                            ......\n        if (mInputChannel != null) {\n                    if (mInputQueueCallback != null) {\n                        mInputQueue = new InputQueue();\n                        mInputQueueCallback.onInputQueueCreated(mInputQueue);\n                    }\n                    mInputEventReceiver = new WindowInputEventReceiver(mInputChannel,\n                            Looper.myLooper());\n                }       \n      ......\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#windowinputeventreceiver","title":"\u770bWindowInputEventReceiver\u7684\u521b\u5efa","text":"<pre><code>final class WindowInputEventReceiver extends InputEventReceiver {\n    public WindowInputEventReceiver(InputChannel inputChannel, Looper looper) {\n        //client\u7aefInputChannel\uff0cUI\u7ebf\u7a0b\u7684looper\n        super(inputChannel, looper);\n    }\n</code></pre> <p>\u8c03\u7236\u7c7bInputEventReceiver\u6784\u9020\u51fd\u6570</p> <pre><code>    /**\n     * Creates an input event receiver bound to the specified input channel.\n     *\n     * @param inputChannel The input channel.\n     * @param looper The looper to use when invoking callbacks.\n     */\n    public InputEventReceiver(InputChannel inputChannel, Looper looper) {\n        if (inputChannel == null) {\n            throw new IllegalArgumentException(\"inputChannel must not be null\");\n        }\n        if (looper == null) {\n            throw new IllegalArgumentException(\"looper must not be null\");\n        }\n        mInputChannel = inputChannel;\n        //UI\u7ebf\u7a0b\u7684messagequeue\n        mMessageQueue = looper.getQueue();\n        //native\u65b9\u6cd5\uff0c\u5c06\u81ea\u5df1\uff0cclient\u7aef\u7684InputChannel\u548cUI\u7ebf\u7a0b\u7684messagequeue\u4f20\u8fdb\u53bb\n        mReceiverPtr = nativeInit(new WeakReference&lt;InputEventReceiver&gt;(this),\n                inputChannel, mMessageQueue);\n\n        mCloseGuard.open(\"dispose\");\n    }\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#nativeinit","title":"nativeInit","text":"<p>frameworks/base/core/jni/android_view_InputEventReceiver.cpp</p> <pre><code>static jlong nativeInit(JNIEnv* env, jclass clazz, jobject receiverWeak,\n        jobject inputChannelObj, jobject messageQueueObj) {\n    //\u89c1\u8fc7\u5f88\u591a\u6b21\u4e86\u8be5\u65b9\u6cd5\uff0c\u901a\u8fc7\u4f20\u4e0b\u6765\u7684cilent\u7aef\u7684InputChannel\u83b7\u53d6\u5bf9\u5e94\u7684native\u5c42InputChannel\n    sp&lt;InputChannel&gt; inputChannel = android_view_InputChannel_getInputChannel(env,\n            inputChannelObj);\n    if (inputChannel == NULL) {\n        jniThrowRuntimeException(env, \"InputChannel is not initialized.\");\n        return 0;\n    }\n    //\u901a\u8fc7\u4f20\u4e0b\u6765\u7684messagequeue\u83b7\u53d6\u5bf9\u4e8enative\u5c42\u7684messagequeue\n    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);\n    if (messageQueue == NULL) {\n        jniThrowRuntimeException(env, \"MessageQueue is not initialized.\");\n        return 0;\n    }\n    //\u521b\u5efaNativeInputEventReceiver\n    sp&lt;NativeInputEventReceiver&gt; receiver = new NativeInputEventReceiver(env,\n            receiverWeak, inputChannel, messageQueue);\n    status_t status = receiver-&gt;initialize();\n    if (status) {\n        String8 message;\n        message.appendFormat(\"Failed to initialize input event receiver.  status=%d\", status);\n        jniThrowRuntimeException(env, message.string());\n        return 0;\n    }\n    receiver-&gt;incStrong(gInputEventReceiverClassInfo.clazz); // retain a reference for the object\n    return reinterpret_cast&lt;jlong&gt;(receiver.get());\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#nativeinputeventreceiver","title":"\u521b\u5efaNativeInputEventReceiver","text":"<p>frameworks/base/core/jni/android_view_InputEventReceiver.cpp</p> <pre><code>//\u7ed9NativeInputEventReceiver\u6210\u5458\u53d8\u91cf\u8d4b\u503c\nNativeInputEventReceiver::NativeInputEventReceiver(JNIEnv* env,\n        jobject receiverWeak, const sp&lt;InputChannel&gt;&amp; inputChannel,\n        const sp&lt;MessageQueue&gt;&amp; messageQueue) :\n        mReceiverWeakGlobal(env-&gt;NewGlobalRef(receiverWeak)),\n        mInputConsumer(inputChannel), mMessageQueue(messageQueue),\n        mBatchedInputEventPending(false), mFdEvents(0) {\n    }\n}\n</code></pre>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#initialize","title":"initialize","text":"<p>frameworks/base/core/jni/android_view_InputEventReceiver.cpp</p> <pre><code>status_t NativeInputEventReceiver::initialize() {\n    setFdEvents(ALOOPER_EVENT_INPUT);\n    return OK;\n}\nvoid NativeInputEventReceiver::setFdEvents(int events) {\n    if (mFdEvents != events) {\n        mFdEvents = events;\n        //\u83b7\u53d6client\u7aefInputChannel\u7684Fd\u5373socket[1]\n        int fd = mInputConsumer.getChannel()-&gt;getFd();\n        if (events) {\n            //\u5c06fd\u6dfb\u52a0\u5230UI\u7ebf\u7a0b\u8fdb\u884c\u76d1\u542c,\u56de\u8c03\u4f20\u7684this\n            mMessageQueue-&gt;getLooper()-&gt;addFd(fd, 0, events, this, NULL);\n        } else {\n            mMessageQueue-&gt;getLooper()-&gt;removeFd(fd);\n        }\n    }\n}\n</code></pre> <p>\u5230\u6b64client\u7aef\u7684Fd\u4e5f\u5df2\u7ecf\u4f20\u9012\u5230\u4e86UI\u7ebf\u7a0b\u8fdb\u884c\u76d1\u542c\uff0cInputDispatch\u4e0eViewRootImpl\u7684socket\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb</p>","tags":["Android","Input"]},{"location":"android/input/inputDispatcher-inputChannel/#_1","title":"\u603b\u7ed3\uff1a","text":"<p>\u5f53\u5e94\u7528\u7a97\u53e3\u6dfb\u52a0\u5230WMS\u4f1a\u521b\u5efa\u4e00\u4e2aWindowState\u63cf\u8ff0\u6b64\u7a97\u53e3\uff0c\u63a5\u7740\u521b\u5efa\u4e00\u5bf9java\u5c42InputChannel\u5bf9\u5e94\u521b\u5efa\u4e00\u5bf9socket\uff0c\u5bf9\u5e94\u521b\u5efa\u4e00\u5bf9native\u5c42InputChannel\uff0c\u8fd8\u6709\u4e00\u4e2aserver\u7aef\u7684connection\uff0cconnection\uff0cinputChannel\uff0csocket\u521b\u5efa\u5b8c\u6210\u540e\u901a\u9053\u5c31\u5df2\u7ecf\u5efa\u7acb\uff0cInputDispatcher\u5c31\u53ef\u4ee5\u5c06\u4e8b\u4ef6\u53d1\u9001\u7ed9\u5bf9\u5e94\u7a97\u53e3\u4e86 \u5b83\u4eec\u7684\u8054\u7cfb\u5982\u4e0b: server\u7aef\uff1a 1.java\u5c42\u7684server\u7aefInputChannel\u7684mPtr\u5c5e\u6027\u6307\u5411native\u5c42\u7684server\u7aefInputChannel 2.native\u5c42\u7684server\u7aefInputChannel\u521b\u5efa\u65f6\u4f1a\u521b\u5efaserver\u7aefsocket\uff0c\u5e76\u5728\u81ea\u5df1\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\u901a\u8fc7setFd\u5c06\u6b64socket\u5b58\u5728mFd\u53d8\u91cf 3.\u5c06server\u7aefInputChannel\u5411InputDispatch\u6ce8\u518c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2aconnection\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7getFd\u65b9\u6cd5\u83b7\u53d6\u5230socket\uff0c\u4ee5fd\u4e3akey\uff0cconnection\u4e3a\u503c\u653e\u5165\u4e00\u4e2a\u7c7b\u4f3cmap\u7684\u6570\u636e\u7ed3\u6784mConnectionsByFd</p> <p>client\u7aef\u548cserver\u4e00\u6837\u53ea\u662f\u5c11\u4e86\u521b\u5efaconnection</p>","tags":["Android","Input"]},{"location":"android/input/intro/","title":"Input\u6982\u8ff0","text":"","tags":["Android","Input"]},{"location":"android/input/intro/#input","title":"Input\u6587\u7ae0\u5217\u8868","text":"<p>Input\u6982\u8ff0</p> <p>...</p>","tags":["Android","Input"]},{"location":"android/input/intro/#_1","title":"\u7b80\u4ecb","text":"<p>Android\u6700\u5e38\u89c1\u7684\u8f93\u5165\u8bbe\u5907\u662f\u89e6\u6478\u5c4f\uff0c\u7136\u800c\u9664\u4e86\u89e6\u6478\u5c4f\uff0c\u5b89\u5353\u8fd8\u652f\u6301\u5176\u4ed6\u8f93\u5165\u8bbe\u5907\u5982\u9f20\u6807\u3001\u6e38\u620f\u624b\u67c4\u3001\u952e\u76d8\u7b49\u3002 \u5f53\u8f93\u5165\u8bbe\u5907\u53ef\u7528\u65f6\uff0cLinux\u5185\u6838\u4f1a\u5728/dev/input/\u4e0b\u521b\u5efa\u5bf9\u5e94\u7684\u540d\u4e3aevent0~n\u6216\u5176\u4ed6\u540d\u79f0\u7684\u8bbe\u5907\u8282\u70b9\u3002\u800c\u5f53\u8f93\u5165\u8bbe\u5907\u4e0d\u53ef\u7528\u65f6\uff0c\u5219\u4f1a\u5c06\u5bf9\u5e94\u7684\u8282\u70b9\u5220\u9664\u3002 \u5728\u7528\u6237\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7ioctl\u7684\u65b9\u5f0f\u4ece\u8fd9\u4e9b\u8bbe\u5907\u8282\u70b9\u4e2d\u83b7\u53d6\u5176\u5bf9\u5e94\u7684\u8f93\u5165\u8bbe\u5907\u7684\u7c7b\u578b\u3001\u5382\u5546\u3001\u63cf\u8ff0\u7b49\u4fe1\u606f\u3002</p> <p>\u5f53\u7528\u6237\u64cd\u4f5c\u8f93\u5165\u8bbe\u5907\u65f6\uff0cLinux\u5185\u6838\u63a5\u6536\u5230\u76f8\u5e94\u7684\u786c\u4ef6\u4e2d\u65ad\uff0c\u7136\u540e\u5c06\u4e2d\u65ad\u52a0\u5de5\u6210\u539f\u59cb\u7684\u8f93\u5165\u4e8b\u4ef6\u6570\u636e\u5e76\u5199\u5165\u5176\u5bf9\u5e94\u7684\u8bbe\u5907\u8282\u70b9\u4e2d\uff0c\u5728\u7528\u6237\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7read()\u51fd\u6570\u5c06\u4e8b\u4ef6\u6570\u636e\u8bfb\u51fa\u3002Android\u8f93\u5165\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u6982\u62ec\u6765\u8bf4\uff0c\u5c31\u662f\u76d1\u63a7/dev/input/\u4e0b\u7684\u6240\u6709\u8bbe\u5907\u8282\u70b9\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u6709\u6570\u636e\u53ef\u8bfb\u65f6\uff0c\u5c06\u6570\u636e\u8bfb\u51fa\u5e76\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u7ffb\u8bd1\u52a0\u5de5\uff0c\u7136\u540e\u5728\u6240\u6709\u7684\u7a97\u53e3\u4e2d\u5bfb\u627e\u5408\u9002\u7684\u4e8b\u4ef6\u63a5\u6536\u8005\uff0c\u5e76\u6d3e\u53d1\u7ed9\u5b83\u3002</p>","tags":["Android","Input"]},{"location":"android/input/intro/#_2","title":"\u4e3b\u8981\u6a21\u5757","text":"<ul> <li> <p>InputManagerService  \u4f4d\u4e8e frameworks/base/services/core/java/com/android/server/input/ \u76ee\u5f55\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 jni \u8ddf inputflinger \u4ea4\u4e92\uff1b\u8fd8\u6709\u5c31\u662f\u8ddf wms \u4ea4\u4e92\u3002</p> </li> <li> <p>JNI  \u4f4d\u4e8e frameworks/base/services/core/jni/ \u76ee\u5f55\uff0c\u5982 com_android_server_input_InputManagerService.cpp </p> </li> <li> <p>WMS-PhoneWindowManager  \u4f4d\u4e8e frameworks/base/services/core/java/com/android/server/policy/ \u76ee\u5f55\u3002DispatcherPolicy \u5bf9\u4e8b\u4ef6\u7684\u62e6\u622a\u4e3b\u8981\u5c31\u662f\u5728 PhoneWindowManager \u505a\u7684\u7b56\u7565\u3002</p> </li> <li> <p>InputReader \u4f4d\u4e8e frameworks/native/services/inputflinger/reader/ \u76ee\u5f55\u3002\u5b83\u8fd0\u884c\u4e8e\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u4e2d\uff0c\u8d1f\u8d23\u7ba1\u7406\u8f93\u5165\u8bbe\u5907\u7684\u5217\u8868\u4e0e\u914d\u7f6e\uff0c\u4ee5\u53ca\u8fdb\u884c\u8f93\u5165\u4e8b\u4ef6\u7684\u52a0\u5de5\u5904\u7406\u3002</p> </li> <li> <p>InputDispatcher  \u4f4d\u4e8e frameworks/native/services/inputflinger/dispatcher/ \u76ee\u5f55\u3002\u5b83\u4e5f\u8fd0\u884c\u4e8e\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u4e2d\u3002InputDispatcher\u4e2d\u4fdd\u7ba1\u4e86\u6765\u81eaWMS\u7684\u6240\u6709\u7a97\u53e3\u7684\u4fe1\u606f\uff0c\u5176\u6536\u5230\u6765\u81eaInputReader\u7684\u8f93\u5165\u4e8b\u4ef6\u540e\uff0c\u4f1a\u5728\u5176\u4fdd\u7ba1\u7684\u7a97\u53e3\u4e2d\u5bfb\u627e\u5408\u9002\u7684\u7a97\u53e3\uff0c\u5e76\u5c06\u4e8b\u4ef6\u6d3e\u53d1\u7ed9\u6b64\u7a97\u53e3\u3002</p> </li> </ul>","tags":["Android","Input"]},{"location":"android/input/intro/#_3","title":"\u76f8\u5173\u52a8\u6001\u5e93","text":"<ul> <li> <p>libinputreader.so     frameworks/native/services/inputflinger/reader/</p> </li> <li> <p>libinputflinger.so     frameworks/native/services/inputflinger/     frameworks/native/services/inputflinger/dispatcher/</p> <p>\u4fee\u6539 frameworks/native/services/inputflinger/dispatcher/ \u76ee\u5f55\u662f\u4f1a\u7f16\u8bd1\u5230 libinputflinger.so\uff0c\u800c\u4e0d\u662f libinputdispatcher.so</p> </li> <li> <p>libinputservice.so     frameworks/base/libs/input/</p> </li> <li> <p>libinput.so     frameworks/native/libs/input/</p> </li> </ul>","tags":["Android","Input"]},{"location":"android/input/intro/#_4","title":"\u67b6\u6784","text":"<p>Android input \u4e8b\u4ef6\u7684\u6574\u4f53\u4f20\u9012\u6d41\u7a0b\u5982\u56fe\u3002</p> <p>\u8bbe\u5907\u8282\u70b9 -&gt; EventHub -&gt; InputReader -&gt; InputDispatcher -&gt; APP</p>","tags":["Android","Input"]},{"location":"android/input/start/","title":"Input\u7cfb\u7edf01-Input\u542f\u52a8\u8fc7\u7a0b","text":"","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_1","title":"\u524d\u8a00","text":"<p>Input \u7cfb\u7edf\u662f\u7531\u4e0a\u5c42\u7684 InputManagerSerice \u542f\u52a8\u7684\uff0c\u800c\u4e0a\u5c42\u7684 InputManagerService \u53ea\u662f Input \u7cfb\u7edf\u4e00\u5c0f\u90e8\u5206\uff0c\u800c\u4e3b\u8981\u7684\u529f\u80fd\u662f\u96c6\u4e2d\u5728 native \u5c42\uff0c\u56e0\u6b64 InuptManagerService \u8fd9\u4e2a\u7cfb\u7edf\u670d\u52a1\u5e76\u4e0d\u80fd\u4ee3\u8868\u6574\u4e2a Input \u7cfb\u7edf\u3002 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd InputManagerSerice \u542f\u52a8\u8fc7\u7a0b\uff0c\u4ee5\u53ca InputFlinger \u542f\u52a8\u8fc7\u7a0b\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_2","title":"\u542f\u52a8\u6d41\u7a0b","text":"<p>system_server\u8fdb\u7a0b\u8d77\u6765\u4e4b\u540e\uff0c\u4f1a\u5728 SystemServer.startOtherServices() \u542f\u52a8 InputManagerService\u3002</p> <pre><code>frameworks/base/services/java/com/android/server/SystemServer.java\n\nprivate void startOtherServices(@NonNull TimingsTraceAndSlog t) {\n    t.traceBegin(\"startOtherServices\");\n\n    ...\n    InputManagerService inputManager = null;\n    ...\n\n    t.traceBegin(\"StartInputManagerService\");\n    inputManager = new InputManagerService(context);\n    t.traceEnd();\n\n    ...\n\n    ServiceManager.addService(Context.INPUT_SERVICE, inputManager,\n            /* allowIsolated= */ false, DUMP_FLAG_PRIORITY_CRITICAL);\n\n    ...\n\n    t.traceBegin(\"StartInputManager\");  \n    inputManager.setWindowManagerCallbacks(wm.getInputManagerCallback());\n    inputManager.start();\n    t.traceEnd();\n\n    ...\n\n    t.traceEnd(); // startOtherServices\n}\n</code></pre> <p>\u8fd9\u91cc\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\uff1a</p> <ul> <li>\u521d\u59cb\u5316 InputManagerService \u5e76\u6dfb\u52a0\u670d\u52a1\u5230 ServiceManager<ul> <li>new InputManagerService(context) </li> <li>ServiceManager.addService(Context.INPUT_SERVICE, inputManager)</li> </ul> </li> <li>inputManager.setWindowManagerCallbacks(wm.getInputManagerCallback());</li> <li>inputManager.start();</li> </ul> <p>\u6211\u4eec\u4ece\u8fd9\u4e09\u4e2a\u65b9\u9762\u6765\u5206\u6790\u4e00\u70b9\u4e00\u70b9\u5206\u6790\uff1a</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_3","title":"\u521d\u59cb\u5316","text":"","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanagerservice","title":"InputManagerService","text":"<pre><code>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java\n\npublic InputManagerService(Context context) {  \n    this(new Injector(context, DisplayThread.get().getLooper()));  \n}\n\n@VisibleForTesting\nstatic class Injector {\n    private final Context mContext;\n    private final Looper mLooper;\n\n    Injector(Context context, Looper looper) {\n        mContext = context;\n        mLooper = looper;\n    }\n\n    Context getContext() {\n        return mContext;\n    }\n\n    Looper getLooper() {\n        return mLooper;\n    }\n\n    NativeInputManagerService getNativeService(InputManagerService service) {\n        return new NativeInputManagerService.NativeImpl(service, mLooper.getQueue());\n    }\n\n    void registerLocalService(InputManagerInternal localService) {\n        LocalServices.addService(InputManagerInternal.class, localService);\n    }\n}\n\n@VisibleForTesting\nInputManagerService(Injector injector) {\n    // The static association map is accessed by both java and native code, so it must be\n    // initialized before initializing the native service.\n    mStaticAssociations = loadStaticInputPortAssociations();\n\n    mContext = injector.getContext();\n    mHandler = new InputManagerHandler(injector.getLooper());\n    mNative = injector.getNativeService(this);\n    mSettingsObserver = new InputSettingsObserver(mContext, mHandler, this, mNative);\n    mKeyboardLayoutManager = new KeyboardLayoutManager(mContext, mNative, mDataStore,\n            injector.getLooper());\n    mBatteryController = new BatteryController(mContext, mNative, injector.getLooper());\n    mKeyboardBacklightController =\n            KEYBOARD_BACKLIGHT_CONTROL_ENABLED ? new KeyboardBacklightController(mContext,\n                    mNative, mDataStore, injector.getLooper())\n                    : new KeyboardBacklightControllerInterface() {};\n    mKeyRemapper = new KeyRemapper(mContext, mNative, mDataStore, injector.getLooper());\n\n    mUseDevInputEventForAudioJack =\n            mContext.getResources().getBoolean(R.bool.config_useDevInputEventForAudioJack);\n    Slog.i(TAG, \"Initializing input manager, mUseDevInputEventForAudioJack=\"\n            + mUseDevInputEventForAudioJack);\n\n    String doubleTouchGestureEnablePath = mContext.getResources().getString(\n            R.string.config_doubleTouchGestureEnableFile);\n    mDoubleTouchGestureEnableFile = TextUtils.isEmpty(doubleTouchGestureEnablePath) ? null :\n        new File(doubleTouchGestureEnablePath);\n\n    mVelocityTrackerStrategy = DeviceConfig.getProperty(\n            NAMESPACE_INPUT_NATIVE_BOOT, VELOCITYTRACKER_STRATEGY_PROPERTY);\n\n    injector.registerLocalService(new LocalService());\n}\n</code></pre> <ul> <li>mLooper     mLooper \u662f DisplayThread.get().getLooper()\uff0c\u4e5f\u5c31\u662f \u201candroid.display\u201d \u7ebf\u7a0b\u7684 Looper\u3002</li> <li>mNative     mNative \u662f new NativeInputManagerService.NativeImpl(service, mLooper.getQueue());</li> </ul> <p>\u7528\u5230 android.display \u7ebf\u7a0b\u662f\u4e3a\u4e86\u663e\u793a\u5c0f\u767d\u70b9\uff0c\u9f20\u6807\u6307\u9488\u7b49\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#nativeinputmanagerservice","title":"\u521d\u59cb\u5316 NativeInputManagerService","text":"<pre><code>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java\n\nclass NativeImpl implements NativeInputManagerService {\n    /** Pointer to native input manager service object, used by native code. */\n    @SuppressWarnings({\"unused\", \"FieldCanBeLocal\"})\n    private final long mPtr;\n\n    NativeImpl(InputManagerService service, MessageQueue messageQueue) {\n        mPtr = init(service, messageQueue);\n    }\n\n    private native long init(InputManagerService service, MessageQueue messageQueue);\n\n}\n</code></pre> <p>\u8fd9\u91cc\u5c31\u4f1a\u8c03\u5230 jni \u7684 com_android_server_input_InputManagerService.cpp</p> <ul> <li>mPtr \u662f Native\u5c42\u7684NativeInputManager\u5bf9\u8c61</li> </ul>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#nativeinit","title":"nativeInit","text":"<pre><code>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp\n\nstatic const JNINativeMethod gInputManagerMethods[] = {\n    /* name, signature, funcPtr */\n    {\"init\",\n     \"(Lcom/android/server/input/InputManagerService;Landroid/os/\"\n     \"MessageQueue;)J\",\n     (void*)nativeInit},\n};\n\nstatic jlong nativeInit(JNIEnv* env, jclass /* clazz */, jobject serviceObj,\n                        jobject messageQueueObj) {\n    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);\n    if (messageQueue == nullptr) {\n        jniThrowRuntimeException(env, \"MessageQueue is not initialized.\");\n        return 0;\n    }\n\n    static std::once_flag nativeInitialize;\n    NativeInputManager* im = nullptr;\n    std::call_once(nativeInitialize, [&amp;]() {\n        // Create the NativeInputManager, which should not be destroyed or deallocated for the\n        // lifetime of the process.\n        im = new NativeInputManager(serviceObj, messageQueue-&gt;getLooper());\n    });\n    LOG_ALWAYS_FATAL_IF(im == nullptr, \"NativeInputManager was already initialized.\");\n    return reinterpret_cast&lt;jlong&gt;(im);\n}\n</code></pre> <ul> <li>serviceObj     \u5c31\u662f\u5c31\u662f java \u5c42\u7684 InputManagerService</li> <li>messageQueueObj     \u5c31\u662f \u201candroid.display\u201d \u7ebf\u7a0b Looper \u7684 MessageQueue\u3002</li> <li>mPtr     \u6307\u5411Native\u5c42\u7684NativeInputManager\u5bf9\u8c61</li> </ul>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#nativeinputmanager","title":"NativeInputManager","text":"<pre><code>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp\n\nclass NativeInputManager : public virtual InputReaderPolicyInterface,  \n                           public virtual InputDispatcherPolicyInterface,  \n                           public virtual PointerControllerPolicyInterface {  \n    ...  \n};\n\nNativeInputManager::NativeInputManager(jobject serviceObj, const sp&lt;Looper&gt;&amp; looper)  \n    : mLooper(looper), mInteractive(true) {  \n    JNIEnv* env = jniEnv();  \n\n    mServiceObj = env-&gt;NewGlobalRef(serviceObj);  \n    //\u6ce8\u610f\u4f20\u8fdb\u53bb\u7684 this \u5c31\u662f NativeInputManager \u5bf9\u8c61\n    InputManager* im = new InputManager(this, *this);  \n    mInputManager = im;  \n    defaultServiceManager()-&gt;addService(String16(\"inputflinger\"), im);  \n}\n</code></pre> <ul> <li> <p>mServiceObj     \u6307\u5411Java\u5c42\u7684IMS\u5bf9\u8c61</p> </li> <li> <p>mInputManager     \u5c31\u662finputflinger\u7684InputManager\uff0c\u6587\u4ef6\u4f4d\u7f6e frameworks/native/services/inputflinger/InputManager.cpp</p> </li> </ul> <p>\u5728 ServiceManager \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u53eb\u505a inputflinger \u7684\u670d\u52a1\uff0c\u5176\u4ee3\u7406\u5bf9\u8c61\u662f BnInputFlinger\uff1b\u4e5f\u5c31\u662fframeworks/native/libs/input/android/os/IInputFlinger.aidl \u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_4","title":"\u6ce8\u610f","text":"<p>\u521b\u5efa InputManager \u4f7f\u7528\u4e86\u4e24\u4e2a this \u53c2\u6570\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e0b NativeInputManager \u548c InputManager \u7684\u7ed3\u6784\u56fe\u3002</p> <pre><code>classDiagram\n\nclass InputReaderPolicyInterface {\n    &lt;&lt;interface&gt;&gt;\n}\n\nclass InputDispatcherPolicyInterface {\n    &lt;&lt;interface&gt;&gt;\n}\n\nclass PointerControllerPolicyInterface {\n    &lt;&lt;interface&gt;&gt;\n}\n\nclass NativeInputManager {\n    -jobject mServiceObj\n    -sp&lt;InputManager&gt; mInputManager\n}\n\nInputReaderPolicyInterface &lt;|.. NativeInputManager\nInputDispatcherPolicyInterface &lt;|.. NativeInputManager\nPointerControllerPolicyInterface &lt;|.. NativeInputManager\n</code></pre> <p>InputManager \u6784\u9020\u51fd\u6570\u9700\u8981\u7684\u4e24\u4e2a\u63a5\u53e3\u6b63\u597d\u662f\u7531 NativeInputManager \u5b9e\u73b0\u7684\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanager","title":"\u521d\u59cb\u5316 InputManager","text":"<pre><code>frameworks/native/services/inputflinger/InputManager.cpp\n\n/**  \n* The event flow is via the \"InputListener\" interface, as follows:  \n* InputReader -&gt; UnwantedInteractionBlocker -&gt; InputProcessor -&gt; InputDispatcher  \n*/  \nInputManager::InputManager(const sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy,  \n    InputDispatcherPolicyInterface&amp; dispatcherPolicy) {  \n    mDispatcher = createInputDispatcher(dispatcherPolicy);  \n    mProcessor = std::make_unique&lt;InputProcessor&gt;(*mDispatcher);  \n    mBlocker = std::make_unique&lt;UnwantedInteractionBlocker&gt;(*mProcessor);  \n    mReader = createInputReader(readerPolicy, *mBlocker);  \n}\n</code></pre> <ul> <li> <p>\u521b\u5efa InputDispatcher \u5bf9\u8c61\uff0c\u4f7f\u7528 InputDispatcherPolicyInterface \u63a5\u53e3</p> <ul> <li>mPolicy: InputDispatcherPolicyInterface \uff0c\u4e5f\u5c31\u662f com_android_server_input_InputManagerService \u91cc\u7684 NativeInputManager</li> <li>InputDispatcher \u7684 .h \"class InputDispatcher : public android::InputDispatcherInterface\"</li> </ul> </li> <li> <p>\u521b\u5efa InputReader \u5bf9\u8c61\uff0c\u4f7f\u7528 InputReaderPolicyInterface \u3001InputListenerInterface</p> <ul> <li>mPolicy: InputReaderPolicyInterface \uff0c\u4e5f\u5c31\u662f com_android_server_input_InputManagerService \u91cc\u7684 NativeInputManager</li> <li>mQueuedListener\uff1a\u8ddf InputDispatcher \u5173\u8054</li> </ul> </li> </ul> <pre><code>classDiagram\n\nclass InputManagerInterface {\n    &lt;&lt;interface&gt;&gt;\n}\n\nclass BnInputFlinger {\n    &lt;&lt;interface&gt;&gt;\n}\n\nclass InputManager {\n\n    InputManager(const sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy, InputDispatcherPolicyInterface&amp; dispatcherPolicy)\n}\n\nInputManagerInterface &lt;|.. InputManager\nBnInputFlinger &lt;|.. InputManager\n</code></pre> <p>\u4ece\u524d\u9762\u53ef\u77e5\uff0cInputManager \u6784\u9020\u51fd\u6570\u9700\u8981\u7684\u4e24\u4e2a\u63a5\u53e3\u6b63\u597d\u662f\u7531 NativeInputManager \u5b9e\u73b0\u7684\u3002\u800c\u5177\u4f53\u4f7f\u7528\u8fd9\u4e24\u4e2a\u63a5\u53e3\u7684\u4e0d\u662f InputManager\uff0c\u800c\u662f\u5b83\u7684\u5b50\u6a21\u5757\u3002\u8fd9\u4e9b\u5b50\u6a21\u5757\u90fd\u662f\u5728 InputManager \u7684\u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u7684\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputflinger-ipc","title":"inputflinger \u670d\u52a1ipc\u63a5\u53e3","text":"<p>\u901a\u8fc7 adb shell service list | grep inputflinger \u547d\u4ee4\u53ef\u4ee5\u770b\u5230\uff0c\u5728 ServiceManager \u4e2d\u5b58\u5728\u540d\u4e3a inputflinger \u7684\u670d\u52a1\uff0c\u5176\u63a5\u53e3\u4e3a android.os.IInputFlinger \u3002</p> <pre><code>151     inputflinger: [android.os.IInputFlinger]\n</code></pre> <p>android.os.IInputFlinger \u7684\u539f\u6587\u4ef6\u662f frameworks/native/libs/input/android/os/IInputFlinger.aidl  \u3002</p> <pre><code>frameworks/native/services/inputflinger/InputManager.h\n\n#include &lt;android/os/BnInputFlinger.h&gt;\nusing android::os::BnInputFlinger;\n\nclass InputManager : public InputManagerInterface, public BnInputFlinger {\n...\n\npublic:\n    ...\n\n    binder::Status createInputChannel(const std::string&amp; name, InputChannel* outChannel) override;\n    binder::Status removeInputChannel(const sp&lt;IBinder&gt;&amp; connectionToken) override;\n    binder::Status setFocusedWindow(const gui::FocusRequest&amp;) override;\n\n...\n};\n</code></pre> <p>\u4ece\u4ee3\u7801\u91cc\u770b\u5230\u7684\u662f BnInputFlinger \uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\u5728\u7cfb\u7edf\u7f16\u8bd1\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u901a\u8fc7 system/tools/aidl/build/aidl_gen_rule.go \u91cc\u7684\u89c4\u5219 aidlCppRule \u628a aidl \u7f16\u8bd1\u6210 .h</p> <p>\u7f16\u8bd1\u51fa\u6765\u7684 BnInputFlinger.h \u6587\u4ef6\u5982\u4e0b\uff1a</p> <pre><code>#pragma once                                                                                                                                                                                                                                                   \n\n#include &lt;binder/IInterface.h&gt;\n#include &lt;android/os/IInputFlinger.h&gt;\n#include &lt;android/os/BnInputFlinger.h&gt;\n#include &lt;binder/Delegate.h&gt;\n\n\nnamespace android {\nnamespace os {\nclass BnInputFlinger : public ::android::BnInterface&lt;IInputFlinger&gt; {\npublic:\n  static constexpr uint32_t TRANSACTION_createInputChannel = ::android::IBinder::FIRST_CALL_TRANSACTION + 0;\n  static constexpr uint32_t TRANSACTION_removeInputChannel = ::android::IBinder::FIRST_CALL_TRANSACTION + 1;\n  static constexpr uint32_t TRANSACTION_setFocusedWindow = ::android::IBinder::FIRST_CALL_TRANSACTION + 2;\n  explicit BnInputFlinger();\n  ::android::status_t onTransact(uint32_t _aidl_code, const ::android::Parcel&amp; _aidl_data, ::android::Parcel* _aidl_reply, uint32_t _aidl_flags) override;\n};  // class BnInputFlinger\n\nclass IInputFlingerDelegator : public BnInputFlinger {\npublic:\n  explicit IInputFlingerDelegator(const ::android::sp&lt;IInputFlinger&gt; &amp;impl) : _aidl_delegate(impl) {}\n\n  ::android::sp&lt;IInputFlinger&gt; getImpl() { return _aidl_delegate; }\n  ::android::binder::Status createInputChannel(const ::std::string&amp; name, ::android::InputChannel* _aidl_return) override {\n    return _aidl_delegate-&gt;createInputChannel(name, _aidl_return);\n  }\n  ::android::binder::Status removeInputChannel(const ::android::sp&lt;::android::IBinder&gt;&amp; connectionToken) override {\n    return _aidl_delegate-&gt;removeInputChannel(connectionToken);\n  }\n  ::android::binder::Status setFocusedWindow(const ::android::gui::FocusRequest&amp; request) override {\n    return _aidl_delegate-&gt;setFocusedWindow(request);\n  }\nprivate:\n  ::android::sp&lt;IInputFlinger&gt; _aidl_delegate;\n};  // class IInputFlingerDelegator\n}  // namespace os\n}  // namespace android\n</code></pre>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_5","title":"\u542f\u52a8\u7ebf\u7a0b","text":"","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanagerservicestart","title":"InputManagerService.start()","text":"<pre><code>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java\n\npublic void start() {  \n    Slog.i(TAG, \"Starting input manager\");  \n    mNative.start();  \n\n    // Add ourselves to the Watchdog monitors.  \n    Watchdog.getInstance().addMonitor(this);  \n}\n</code></pre> <p>\u6839\u636e\u4e0a\u6587\u53ef\u77e5\uff0c\u8fd9\u91cc\u4f1a\u8c03\u5230 JNI \uff0c\u4e5f\u5c31\u662f com_android_server_input_InputManagerService.cpp</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#nativestart","title":"nativeStart()","text":"<pre><code>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp\n\nstatic const JNINativeMethod gInputManagerMethods[] = {  \n    /* name, signature, funcPtr */  \n    {\"init\",  \n    \"(Lcom/android/server/input/InputManagerService;Landroid/os/\"  \n    \"MessageQueue;)J\",  \n    (void*)nativeInit},  \n    {\"start\", \"()V\", (void*)nativeStart},\n}\n\n\nint register_android_server_InputManager(JNIEnv* env) {\n    int res = jniRegisterNativeMethods(env,\n                                       \"com/android/server/input/\"\n                                       \"NativeInputManagerService$NativeImpl\",\n                                       gInputManagerMethods, NELEM(gInputManagerMethods));\n    (void)res; // Faked use when LOG_NDEBUG.\n    LOG_FATAL_IF(res &lt; 0, \"Unable to register native methods.\");\n\n    FIND_CLASS(gNativeInputManagerServiceImpl.clazz,\n               \"com/android/server/input/\"\n               \"NativeInputManagerService$NativeImpl\");\n    gNativeInputManagerServiceImpl.clazz =\n            jclass(env-&gt;NewGlobalRef(gNativeInputManagerServiceImpl.clazz));\n    gNativeInputManagerServiceImpl.mPtr =\n            env-&gt;GetFieldID(gNativeInputManagerServiceImpl.clazz, \"mPtr\", \"J\");\n    ...\n}            \n\nstatic void nativeStart(JNIEnv* env, jobject nativeImplObj) {  \n    NativeInputManager* im = getNativeInputManager(env, nativeImplObj);  \n\n    status_t result = im-&gt;getInputManager()-&gt;start();  \n    if (result) {  \n    jniThrowRuntimeException(env, \"Input manager could not be started.\");  \n    }  \n}\n\nstatic NativeInputManager* getNativeInputManager(JNIEnv* env, jobject clazz) {  \n    return reinterpret_cast&lt;NativeInputManager*&gt;(  \n    env-&gt;GetLongField(clazz, gNativeInputManagerServiceImpl.mPtr));  \n}\n</code></pre> <p>\u8fd9\u91cc\u7684 mPtr \u5c31\u662f IMS \u7684 mPtr\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d JNI \u8fd4\u56de\u7684 Native\u5c42\u7684 NativeInputManager \u5bf9\u8c61\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanagerstart","title":"InputManager.start();","text":"<pre><code>frameworks/native/services/inputflinger/InputManager.cpp\n\nstatus_t InputManager::start() {\n    status_t result = mDispatcher-&gt;start();\n    if (result) {\n        ALOGE(\"Could not start InputDispatcher thread due to error %d.\", result);\n        return result;\n    }\n\n    result = mReader-&gt;start();\n    if (result) {\n        ALOGE(\"Could not start InputReader due to error %d.\", result);\n\n        mDispatcher-&gt;stop();\n        return result;\n    }\n\n    return OK;\n}\n</code></pre> <p>\u5148\u540e\u542f\u52a8 \u201cInputDispatcher\u201d \u7ebf\u7a0b \u548c \u201cInputReader\u201d \u7ebf\u7a0b\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputdispatcherstart","title":"InputDispatcher.start()","text":"<pre><code>frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp\n\nstatus_t InputDispatcher::start() {\n    if (mThread) {\n        return ALREADY_EXISTS;\n    }\n\n\n    mThread = std::make_unique&lt;InputThread&gt;(\n            \"InputDispatcher\", [this]() { dispatchOnce(); }, [this]() { mLooper-&gt;wake(); });\n    return OK;\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u5faa\u73af\u8c03\u7528 dispatchOnce()\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputreaderstart","title":"InputReader.start()","text":"<pre><code>frameworks/native/services/inputflinger/reader/InputReader.cpp\n\nstatus_t InputReader::start() {\n    if (mThread) {\n        return ALREADY_EXISTS;\n    }\n\n    mThread = std::make_unique&lt;InputThread&gt;(\n            \"InputReader\", [this]() { loopOnce(); }, [this]() { mEventHub-&gt;wake(); });\n    return OK;\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u5faa\u73af\u8c03\u7528 loopOnce() \u51fd\u6570\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_6","title":"\u7ebf\u7a0b\u4f18\u5148\u7ea7","text":"<p>\u6709\u4e9b\u5382\u5546\u4f1a\u6539\u53d8 \u201cInputDispatcher\u201d \u7ebf\u7a0b \u548c \u201cInputReader\u201d \u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\uff0c\u5982\uff1a</p> <pre><code>struct sched_param param = {0};  \nint sched_policy = SCHED_FIFO;  \nparam.sched_priority = 1;  \nsched_setscheduler(0, sched_policy, &amp;param); \n</code></pre>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#imswms","title":"IMS\u548cWMS","text":"","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanagerservicesetwindowmanagercallbacks","title":"InputManagerService.setWindowManagerCallbacks()","text":"<p>\u5728  SystemServer.startOtherServices() \u65f6\uff0c\u6211\u4eec\u63d0\u5230\u8fc7</p> <pre><code>inputManager.setWindowManagerCallbacks(wm.getInputManagerCallback());\n</code></pre> <ul> <li>WindowManagerCallbacks \u662f wm.getInputManagerCallback()</li> </ul> <p>\u6211\u4eec\u7ee7\u7eed\u770b InputManagerService \u62ff\u5230 WindowManagerCallbacks \u540e\uff0c\u90fd\u505a\u4e86\u4ec0\u4e48\u3002</p> <pre><code>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java\n\npublic class InputManagerService extends IInputManager.Stub\n        implements Watchdog.Monitor {\n\n    private WindowManagerCallbacks mWindowManagerCallbacks;\n\n    public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks) {\n        if (mWindowManagerCallbacks != null) {\n            unregisterLidSwitchCallbackInternal(mWindowManagerCallbacks);\n        }\n        mWindowManagerCallbacks = callbacks;\n        registerLidSwitchCallbackInternal(mWindowManagerCallbacks);\n    }\n\n    @SuppressWarnings(\"unused\")\n    private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags) {\n        synchronized (mFocusEventDebugViewLock) {\n            if (mFocusEventDebugView != null) {\n                mFocusEventDebugView.reportEvent(event);\n            }\n        }\n        return mWindowManagerCallbacks.interceptKeyBeforeQueueing(event, policyFlags);\n    }\n\n    // Native callback.\n    @SuppressWarnings(\"unused\")\n    private int interceptMotionBeforeQueueingNonInteractive(int displayId,\n            long whenNanos, int policyFlags) {\n        return mWindowManagerCallbacks.interceptMotionBeforeQueueingNonInteractive(\n                displayId, whenNanos, policyFlags);\n    }\n\n    // Native callback.\n    @SuppressWarnings(\"unused\")\n    private long interceptKeyBeforeDispatching(IBinder focus, KeyEvent event, int policyFlags) {\n        return mWindowManagerCallbacks.interceptKeyBeforeDispatching(focus, event, policyFlags);\n    }\n\n    // Native callback.\n    @SuppressWarnings(\"unused\")\n    private KeyEvent dispatchUnhandledKey(IBinder focus, KeyEvent event, int policyFlags) {\n        return mWindowManagerCallbacks.dispatchUnhandledKey(focus, event, policyFlags);\n    }\n\n}\n</code></pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 Native \u8c03\u5230 InputManagerService.interceptKeyBeforeQueueing() \u540e\uff0c\u4f1a\u901a\u8fc7 mWindowManagerCallbacks.interceptKeyBeforeQueueing() \u56de\u8c03\u56de\u53bb\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#windowmanagerservice","title":"\u521d\u59cb\u5316 WindowManagerService","text":"<p>\u8fd9 system_server \u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u5176\u8ddfWMS\u5173\u952e\u90e8\u5206\u8f83\u5b8c\u6574\u4ee3\u7801\u5982\uff1a</p> <pre><code>frameworks/base/services/java/com/android/server/SystemServer.java\n\nprivate void startOtherServices(@NonNull TimingsTraceAndSlog t) {\n    t.traceBegin(\"startOtherServices\");\n\n    ...\n    WindowManagerService wm = null;\n    ...\n\n    wm = WindowManagerService.main(context, inputManager, !mFirstBoot,\n            new PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);\n    ...\n\n    t.traceBegin(\"StartInputManager\");  \n    inputManager.setWindowManagerCallbacks(wm.getInputManagerCallback());\n    inputManager.start();\n    t.traceEnd();\n\n    ...\n\n    t.traceEnd(); // startOtherServices\n}\n</code></pre> <ul> <li>wm \u662f WindowManagerService</li> </ul> <pre><code>frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java\n\npublic class WindowManagerService extends IWindowManager.Stub\n        implements Watchdog.Monitor, WindowManagerPolicy.WindowManagerFuncs {\n\n    private WindowManagerService(Context context, InputManagerService inputManager,\n            boolean showBootMsgs, WindowManagerPolicy policy, ActivityTaskManagerService atm,\n            DisplayWindowSettingsProvider displayWindowSettingsProvider,\n            Supplier&lt;SurfaceControl.Transaction&gt; transactionFactory,\n            Function&lt;SurfaceSession, SurfaceControl.Builder&gt; surfaceControlFactory) {\n\n        mInputManager = inputManager; // Must be before createDisplayContentLocked.\n        ...\n\n        mPolicy = policy;\n        ...\n    }\n\n    public static WindowManagerService main(final Context context, final InputManagerService im,\n            final boolean showBootMsgs, WindowManagerPolicy policy,\n            ActivityTaskManagerService atm) {\n        return main(context, im, showBootMsgs, policy, atm, new DisplayWindowSettingsProvider(),\n                SurfaceControl.Transaction::new, SurfaceControl.Builder::new);\n    }\n\n    @VisibleForTesting\n    public static WindowManagerService main(final Context context, final InputManagerService im,\n            final boolean showBootMsgs, WindowManagerPolicy policy, ActivityTaskManagerService atm,\n            DisplayWindowSettingsProvider displayWindowSettingsProvider,\n            Supplier&lt;SurfaceControl.Transaction&gt; transactionFactory,\n            Function&lt;SurfaceSession, SurfaceControl.Builder&gt; surfaceControlFactory) {\n        final WindowManagerService[] wms = new WindowManagerService[1];\n        DisplayThread.getHandler().runWithScissors(() -&gt;\n                wms[0] = new WindowManagerService(context, im, showBootMsgs, policy, atm,\n                        displayWindowSettingsProvider, transactionFactory,\n                        surfaceControlFactory), 0);\n        return wms[0];\n    }\n\n\n\n    public InputManagerCallback getInputManagerCallback() {\n        return mInputManagerCallback;\n    }\n\n    final InputManagerCallback mInputManagerCallback = new InputManagerCallback(this);\n}\n</code></pre> <ul> <li>mPolicy \u662f PhoneWindowManager</li> <li>mInputManager \u662f InputManagerService</li> <li>new InputManagerCallback(this) \u4f20\u7684 this \u662f WindowManagerService</li> </ul>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputmanagercallback","title":"InputManagerCallback","text":"<pre><code>frameworks/base/services/core/java/com/android/server/wm/InputManagerCallback.java\n\nfinal class InputManagerCallback implements InputManagerService.WindowManagerCallbacks {\n    private static final String TAG = TAG_WITH_CLASS_NAME ? \"InputManagerCallback\" : TAG_WM;\n\n    private final WindowManagerService mService;\n\n    public InputManagerCallback(WindowManagerService service) {\n        mService = service;\n    }\n\n    ...\n\n    /**\n     * Provides an opportunity for the window manager policy to intercept early key\n     * processing as soon as the key has been read from the device.\n     */\n    @Override\n    public int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags) {\n        return mService.mPolicy.interceptKeyBeforeQueueing(event, policyFlags);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int interceptMotionBeforeQueueingNonInteractive(int displayId, long whenNanos,\n            int policyFlags) {\n        return mService.mPolicy.interceptMotionBeforeQueueingNonInteractive(\n                displayId, whenNanos, policyFlags);\n    }\n\n    /**\n     * Provides an opportunity for the window manager policy to process a key before\n     * ordinary dispatch.\n     */\n    @Override\n    public long interceptKeyBeforeDispatching(\n            IBinder focusedToken, KeyEvent event, int policyFlags) {\n        return mService.mPolicy.interceptKeyBeforeDispatching(focusedToken, event, policyFlags);\n    }\n\n    /**\n     * Provides an opportunity for the window manager policy to process a key that\n     * the application did not handle.\n     */\n    @Override\n    public KeyEvent dispatchUnhandledKey(\n            IBinder focusedToken, KeyEvent event, int policyFlags) {\n        return mService.mPolicy.dispatchUnhandledKey(focusedToken, event, policyFlags);\n    }\n\n    /** Callback to get pointer layer. */\n    @Override\n    public int getPointerLayer() {\n        return mService.mPolicy.getWindowLayerFromTypeLw(WindowManager.LayoutParams.TYPE_POINTER)\n                * WindowManagerPolicyConstants.TYPE_LAYER_MULTIPLIER\n                + WindowManagerPolicyConstants.TYPE_LAYER_OFFSET;\n    }\n\n    ...\n}\n</code></pre> <ul> <li>mService \u662fWindowManagerService</li> <li>mService.mPolicy \u5c31\u662f PhoneWindowManager</li> </ul>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#phonewindowmanager","title":"PhoneWindowManager","text":"<pre><code>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\n\npublic class PhoneWindowManager implements WindowManagerPolicy {\n\n    @Override\n    public int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags) {\n        ...\n    }\n\n    @Override\n    public int interceptMotionBeforeQueueingNonInteractive(int displayId, long whenNanos,\n            int policyFlags) {\n        ...\n    }\n\n    @Override\n    public long interceptKeyBeforeDispatching(IBinder focusedToken, KeyEvent event,\n            int policyFlags) {\n        ...\n    }\n\n    @Override\n    public KeyEvent dispatchUnhandledKey(IBinder focusedToken, KeyEvent event, int policyFlags) {\n        ...\n    }       \n}\n</code></pre> <p>\u5206\u6790\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86 IMS \u600e\u4e48\u548c WMS \u4ea4\u4e92\u4e86\uff0c\u5176\u5b9e\u4e3b\u8981\u5c31\u662f IMS \u8ddf WMS \u7684 PhoneWindowManager \u4ea4\u4e92\u3002</p> <p>\u6bd4\u5982 PhoneWindowManager.interceptKeyBeforeQueueing() \u5c31\u662f\u5728\u4e8b\u4ef6\u5165\u961f\u5217\u524d\u62e6\u622a\u6309\u952e\u4e8b\u4ef6\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u8fd9\u4e2a\u9636\u6bb5\u88ab\u62e6\u622a\uff0c\u4e8b\u4ef6\u5c06\u4e0d\u4f1a\u518d\u88ab\u5206\u53d1\u3002\u6bd4\u5982 POWER \u6309\u952e\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_7","title":"\u9644","text":"<p>\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053 InputManagerService -&gt; InputManagerCallback(WindowManagerCallbacks) -&gt; PhoneWindowManager\u3002 \u90a3 native \u5c42\u7684 InputFlinger \u662f\u5982\u4f55\u8c03\u5230 InputManagerService \u7684\u5462\u3002\u6211\u4eec\u5c31\u4ee5 interceptKeyBeforeQueueing() \u63a5\u53e3\u4e3a\u4f8b\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#inputdispatchernotifykey","title":"InputDispatcher::notifyKey","text":"<pre><code>frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp\n\nvoid InputDispatcher::notifyKey(const NotifyKeyArgs&amp; args) {\n\n    ...\n    uint32_t policyFlags = args.policyFlags;\n    ...\n\n    KeyEvent event;  \n    event.initialize(args.id, args.deviceId, args.source, args.displayId, INVALID_HMAC, args.action,  \n    flags, keyCode, args.scanCode, metaState, repeatCount, args.downTime,  \n    args.eventTime);  \n\n    mPolicy.interceptKeyBeforeQueueing(event, /*byref*/ policyFlags);\n}\n</code></pre> <p>\u524d\u9762\u63d0\u5230\u8fc7 mPolicy \u662f InputDispatcherPolicyInterface \uff0c\u4e5f\u5c31\u662f com_android_server_input_InputManagerService \u91cc\u7684 NativeInputManager</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#nativeinputmanagerinterceptkeybeforequeueing","title":"NativeInputManager::interceptKeyBeforeQueueing","text":"<pre><code>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp\n\nvoid NativeInputManager::interceptKeyBeforeQueueing(const KeyEvent&amp; keyEvent,\n                                                    uint32_t&amp; policyFlags) {\n    ATRACE_CALL();\n    // Policy:\n    // - Ignore untrusted events and pass them along.\n    // - Ask the window manager what to do with normal events and trusted injected events.\n    // - For normal events wake and brighten the screen if currently off or dim.\n    const bool interactive = mInteractive.load();\n    if (interactive) {\n        policyFlags |= POLICY_FLAG_INTERACTIVE;\n    }\n\n    if ((policyFlags &amp; POLICY_FLAG_TRUSTED) == 0) {\n        if (interactive) {\n            policyFlags |= POLICY_FLAG_PASS_TO_USER;\n        }\n        return;\n    }\n\n    const nsecs_t when = keyEvent.getEventTime();\n    JNIEnv* env = jniEnv();\n    ScopedLocalRef&lt;jobject&gt; keyEventObj(env, android_view_KeyEvent_fromNative(env, keyEvent));\n    if (!keyEventObj.get()) {\n        ALOGE(\"Failed to obtain key event object for interceptKeyBeforeQueueing.\");\n        return;\n    }\n\n    jint wmActions = env-&gt;CallIntMethod(mServiceObj, gServiceClassInfo.interceptKeyBeforeQueueing,\n                                        keyEventObj.get(), policyFlags);\n    if (checkAndClearExceptionFromCallback(env, \"interceptKeyBeforeQueueing\")) {\n        wmActions = 0;\n    }\n    android_view_KeyEvent_recycle(env, keyEventObj.get());\n    handleInterceptActions(wmActions, when, /*byref*/ policyFlags);\n}\n</code></pre> <p>\u524d\u9762\u63d0\u5230\u8fc7\uff1amServiceObj \u6307\u5411Java\u5c42\u7684IMS\u5bf9\u8c61\u3002</p> <p>\u63a5\u7740\u770b gServiceClassInfo.interceptKeyBeforeQueueing \uff0c\u5982\u4e0b\uff1a</p> <pre><code>#define GET_METHOD_ID(var, clazz, methodName, methodDescriptor) \\  \nvar = env-&gt;GetMethodID(clazz, methodName, methodDescriptor); \\  \nLOG_FATAL_IF(! (var), \"Unable to find method \" methodName);\n\njclass clazz;  \nFIND_CLASS(clazz, \"com/android/server/input/InputManagerService\");  \ngServiceClassInfo.clazz = reinterpret_cast&lt;jclass&gt;(env-&gt;NewGlobalRef(clazz));\n\nGET_METHOD_ID(gServiceClassInfo.interceptKeyBeforeQueueing, clazz,  \n\"interceptKeyBeforeQueueing\", \"(Landroid/view/KeyEvent;I)I\");\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa gServiceClassInfo.interceptKeyBeforeQueueing \u5176\u5b9e\u5c31\u662f InputManagerService.interceptKeyBeforeQueueing()\u3002</p> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 cpp \u8c03\u5230\u4e86 Java \u5c42\u3002</p> <p>\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 input \u7cfb\u7edf\u4e2d\uff0cJava \u662f\u5982\u4f55\u8c03\u5230 cpp\uff0c\u4e5f\u77e5\u9053\u4e86 cpp \u662f\u5982\u4f55\u8c03\u5230 Java \u5c42\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/start/#_8","title":"\u603b\u7ed3","text":"<ul> <li>InputManagerService     \u4f4d\u4e8e Java \u5c42\u7684 InputManagerService.java \u6587\u4ef6\u3002<ul> <li>\u5176\u6210\u5458 mPtr \u6307\u5411 Native \u5c42\u7684 NativeInputManager \u5bf9\u8c61\u3002</li> </ul> </li> <li>NativeInputManager     \u4f4d\u4e8eNative\u5c42\u7684com_android_server_input_InputManagerService.cpp\u6587\u4ef6\u3002<ul> <li>\u5176\u6210\u5458 mServiceObj \u6307\u5411 Java \u5c42\u7684 InputManagerService \u5bf9\u8c61\uff1b</li> <li>\u5176\u6210\u5458 mLooper \u662f\u6307 android.display \u7ebf\u7a0b\u7684 Looper\u3002</li> </ul> </li> <li>InputManager     \u4f4d\u4e8e InputFlinger \u4e2d\u7684 InputManager.cpp \u6587\u4ef6\u3002<ul> <li>InputDispatcher \u548c InputReader \u7684\u6210\u5458\u53d8\u91cf mPolicy \u90fd\u662f\u6307 NativeInputManager \u5bf9\u8c61\uff1b</li> <li>InputReader \u7684\u6210\u5458 mQueuedListener \uff0c\u6570\u636e\u7c7b\u578b\u4e3a QueuedInputListener\uff1b\u901a\u8fc7\u5176\u5185\u90e8\u6210\u5458\u53d8\u91cfmInnerListener\u6307\u5411InputDispatcher\u5bf9\u8c61\u3002\u8fd9\u4fbf\u662fInputReader\u8ddfInputDispatcher\u4ea4\u4e92\u7684\u4e2d\u95f4\u67a2\u7ebd\u3002</li> </ul> </li> </ul>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/input-reader/","title":"Input\u7cfb\u7edf02-InputReader\u7ebf\u7a0b","text":"<p>\u6700\u8fd1\u5728\u5fd9\u522b\u7684\u4e8b\u60c5\uff0c\u8fd8\u6ca1\u65f6\u95f4\u5199\u3002</p>","tags":["Android","Input","InputReader\u7ebf\u7a0b"]},{"location":"android/input/scancode-keycode/","title":"Scancode\u5230Keycode\u7684\u6620\u5c04","text":"<p>\u4e4b\u524d\u5206\u6790\u7684InputReader\u8bfb\u53d6\u5e95\u5c42\u4e8b\u4ef6\u53ef\u4ee5\u5f97\u77e5 InputReaderThead\u542f\u52a8\u4e4b\u540e\u4f1a\u901a\u8fc7mEventHub-&gt;getEvents\u8bfb\u53d6\u8bbe\u5907\u8282\u70b9\u7684\u6240\u6709\u4e8b\u4ef6,\u901a\u8fc7parsekey\u65b9\u6cd5\u89e3\u6790kl\u6587\u4ef6\u5b58\u5165\u6570\u636e\u7ed3\u6784map,\u5728\u8bfb\u53d6\u8282\u70b9\u4e8b\u4ef6\u4e4b\u524d\u5148\u626b\u63cf\u8bbe\u5907\uff0c\u5982\u679c\u6ca1\u6709\u6253\u5f00\u5219\u6253\u5f00\u8bbe\u5907\uff0c\u5728\u6253\u5f00\u8bbe\u5907\u65f6\u4f1a\u5c06scancode\u548ckeycode\u4e00\u4e00\u6620\u5c04\uff0c\u6b64\u7bc7\u6587\u7ae0\u8bb0\u5f55\u4ed6\u4eec\u662f\u5982\u4f55\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u7684\u8d77\u6765\u7684 /frameworks/native/services/inputflinger/InputReader.cpp</p> <pre><code>void InputReader::loopOnce() {\n         ......\n343      size_t count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);\n344  \n345      { // acquire lock\n346          AutoMutex _l(mLock);\n347          mReaderIsAliveCondition.broadcast();\n348  \n349          if (count) {\n350              processEventsLocked(mEventBuffer, count);\n351          }\n352  \n</code></pre> <p>/frameworks/native/services/inputflinger/EventHub.cpp mEventHub-&gt;getEvents</p> <pre><code>851  size_t EventHub::getEvents(int timeoutMillis, RawEvent* buffer, size_t bufferSize) {\n852          ......\n860      bool awoken = false;\n861      for (;;) {\n862          nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);\n             ......\n875          // Report any devices that had last been added/removed.\n876          while (mClosingDevices) {\n877              Device* device = mClosingDevices;\n878              ALOGV(\"Reporting device closed: id=%d, name=%s\\n\",\n879                   device-&gt;id, device-&gt;path.c_str());\n880          ......\n891          }\n892  \n893          if (mNeedToScanDevices) {\n894              mNeedToScanDevices = false;\n895              scanDevicesLocked();\n896              mNeedToSendFinishedDeviceScan = true;\n897          }\n             ......\n   }\n</code></pre> <p>/frameworks/native/services/inputflinger/EventHub.cpp \u626b\u63cf\u8bbe\u5907\"/dev/input\"</p> <pre><code>static const char *DEVICE_PATH = \"/dev/input\";\n1130  void EventHub::scanDevicesLocked() {\n          //DEVICE_PATH = \"/dev/input\"\n1131      status_t result = scanDirLocked(DEVICE_PATH);\n1132      ......\n1144  }\n</code></pre> <pre><code>1908  status_t EventHub::scanDirLocked(const char *dirname)\n1909  {\n1910      ......\n          //\u626b\u63cf/dev/input/\u4e0b\u7684\u6240\u6709\u8bbe\u5907\n1920      while((de = readdir(dir))) {\n1921          if(de-&gt;d_name[0] == '.' &amp;&amp;\n1922             (de-&gt;d_name[1] == '\\0' ||\n1923              (de-&gt;d_name[1] == '.' &amp;&amp; de-&gt;d_name[2] == '\\0')))\n1924              continue;\n1925          strcpy(filename, de-&gt;d_name);\n              //\u6253\u5f00\u8bbe\u5907\n1926          openDeviceLocked(devname);\n1927      }\n1928      closedir(dir);\n1929      return 0;\n1930  }\n</code></pre> <p>\u6253\u5f00\u8bbe\u5907</p> <pre><code>1237  status_t EventHub::openDeviceLocked(const char* devicePath) {\n1238        //\u7701\u7565\u4e86\u5f88\u591a\u4ee3\u7801\uff0c\u4e3b\u8981\u770bloadKeyMapLocked\n1258        ......\n1350        ......\n1429      // Load the key map.\n1430      // We need to do this for joysticks too because the key layout may specify axes.\n1431      status_t keyMapStatus = NAME_NOT_FOUND;\n1432      if (device-&gt;classes &amp; (INPUT_DEVICE_CLASS_KEYBOARD | INPUT_DEVICE_CLASS_JOYSTICK)) {\n1433          // Load the keymap for the device.\n1434          keyMapStatus = loadKeyMapLocked(device);\n1435      }\n}\n</code></pre> <p>\u4e3b\u8981\u770bscancode\u548ckeycode\u5982\u4f55\u4e00\u4e00\u6620\u5c04\u7684</p> <pre><code>1685  status_t EventHub::loadKeyMapLocked(Device* device) {\n1686      return device-&gt;keyMap.load(device-&gt;identifier, device-&gt;configuration);\n1687  }\n</code></pre> <p>\u7ee7\u7eed\u8c03\u5230Device\u7684keyMap\u7684load\u51fd\u6570,Device\u662fEventHub\u5185\u90e8\u7684\u7ed3\u6784\u4f53 /frameworks/native/services/inputflinger/EventHub.h</p> <pre><code>325  private:\n326      struct Device {\n327          Device* next;\n             .......\n328          KeyMap keyMap;\n             .......\n      }\n</code></pre> <p>\u7ee7\u7eed\u770bKeyMap\u7684load\u51fd\u6570 /frameworks/native/libs/input/Keyboard.cpp</p> <pre><code>41  status_t KeyMap::load(const InputDeviceIdentifier&amp; deviceIdenfifier,\n42          const PropertyMap* deviceConfiguration) {\n43      // Use the configured key layout if available.\n44      if (deviceConfiguration) {\n45          String8 keyLayoutName;\n            //\u901a\u8fc7\u8bbe\u5907\u7684\u914d\u7f6e\u6587\u4ef6\u53bb\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u5185\u5236\u5b9a\u597d\u7684\u6620\u5c04\u8868\n46          if (deviceConfiguration-&gt;tryGetProperty(String8(\"keyboard.layout\"),\n47                  keyLayoutName)) {\n48              status_t status = loadKeyLayout(deviceIdenfifier, keyLayoutName.c_str());\n49           if (status == NAME_NOT_FOUND) {\n52                deviceIdenfifier.name.c_str(), keyLayoutName.string());\n53              }\n54          }\n55  \n56          String8 keyCharacterMapName;\n57          if (deviceConfiguration-&gt;tryGetProperty(String8(\"keyboard.characterMap\"),\n58                  keyCharacterMapName)) {\n59              status_t status = loadKeyCharacterMap(deviceIdenfifier, keyCharacterMapName.c_str());\n60              if (status == NAME_NOT_FOUND) {\n61                  ALOGE(\"Configuration for keyboard device '%s' requested keyboard character \"\n62                          \"map '%s' but it was not found.\",\n63                          deviceIdenfifier.name.c_str(), keyLayoutName.string());\n64              }\n65          }\n67          if (isComplete()) {\n68              return OK;\n69          }\n70      }\n72      // Try searching by device identifier.\u901a\u8fc7\u8bbe\u5907\u4fe1\u606f\u67e5\u627e\u5bf9\u5e94\u7684\u6620\u5c04\u8868\n73      if (probeKeyMap(deviceIdenfifier, \"\")) {\n74          return OK;\n75      }\n77      // Fall back on the Generic key map.\n78      // TODO Apply some additional heuristics here to figure out what kind of\n79      //      generic key map to use (US English, etc.) for typical external keyboards.\u67e5\u627e\u901a\u7528\u7684\u6620\u5c04\u8868\n80      if (probeKeyMap(deviceIdenfifier, \"Generic\")) {\n81          return OK;\n82      }\n83  \n84      // Try the Virtual key map as a last resort.\u67e5\u627e\u865a\u62df\u6620\u5c04\u8868\n85      if (probeKeyMap(deviceIdenfifier, \"Virtual\")) {\n86          return OK;\n87      }\n88  \n89      // Give up!\n90      ALOGE(\"Could not determine key map for device '%s' and no default key maps were found!\",\n91              deviceIdenfifier.name.c_str());\n92      return NAME_NOT_FOUND;\n93  }\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u6211\u8fd9\u4e2a\u8bbe\u5907\u6709\u56db\u4e2a\u8bbe\u5907\u8282\u70b9\uff0c\u6240\u4ee5 mtk-tpd\uff0cACCDET\uff0cfts_ts\uff0cmtk-kpd\u4ee5\u53ca\u901a\u7528\u8868\u90fd\u4f1a\u89e3\u6790\u7684</p> <pre><code>Tokyo_TF:/system/usr $ getevent\nadd device 1: /dev/input/event3\n  name:     \"mtk-tpd\"\nadd device 2: /dev/input/event0\n  name:     \"ACCDET\"\nadd device 3: /dev/input/event1\n  name:     \"mtk-kpd\"\nadd device 4: /dev/input/event2\n  name:     \"fts_ts\"\n/dev/input/event1: 0001 0074 00000001\n/dev/input/event1: 0000 0000 00000000\n/dev/input/event1: 0001 0074 00000000\n/dev/input/event1: 0000 0000 00000000\nTokyo_TF:/system/usr $ \nTokyo_TF:/system/usr $ find -name \"mtk-kpd*\"                                                                                             \n./keylayout/mtk-kpd.kl\nTokyo_TF:/system/usr $ \n</code></pre> <p>probeKeyMap\u51fd\u6570</p> <pre><code>95  bool KeyMap::probeKeyMap(const InputDeviceIdentifier&amp; deviceIdentifier,\n96          const std::string&amp; keyMapName) {\n97      if (!haveKeyLayout()) {\n98          loadKeyLayout(deviceIdentifier, keyMapName);\n99      }\n100      if (!haveKeyCharacterMap()) {\n101          loadKeyCharacterMap(deviceIdentifier, keyMapName);\n102      }\n103      return isComplete();\n104  }\n</code></pre> <p>loadKeyLayout()\u51fd\u6570</p> <pre><code>106  status_t KeyMap::loadKeyLayout(const InputDeviceIdentifier&amp; deviceIdentifier,\n107          const std::string&amp; name) {\n108      std::string path(getPath(deviceIdentifier, name,\n109              INPUT_DEVICE_CONFIGURATION_FILE_TYPE_KEY_LAYOUT));\n110      if (path.empty()) {\n111          return NAME_NOT_FOUND;\n112      }\n113  \n114      status_t status = KeyLayoutMap::load(path, &amp;keyLayoutMap);\n115      if (status) {\n116          return status;\n117      }\n118  \n119      keyLayoutFile = path;\n120      return OK;\n121  }\n</code></pre> <p>\u7ee7\u7eedKeyLayoutMap::load /frameworks/native/libs/input/KeyLayoutMap.cpp</p> <pre><code>52  status_t KeyLayoutMap::load(const std::string&amp; filename, sp&lt;KeyLayoutMap&gt;* outMap) {\n54        ......\n55      Tokenizer* tokenizer;\n56      status_t status = Tokenizer::open(String8(filename.c_str()), &amp;tokenizer);\n57      if (status) {\n58        ......\n59      } else {\n60          sp&lt;KeyLayoutMap&gt; map = new KeyLayoutMap();\n61          if (!map.get()) {\n62              ......\n64          } else {\n68              Parser parser(map.get(), tokenizer);\n                //\u89e3\u6790map\n69              status = parser.parse();\n70              ......\n82      return status;\n83  }\n</code></pre> <p>\u7ee7\u7eedparser.parse()\uff0c\u5f00\u59cb\u89e3\u6790\u6620\u5c04\u8868</p> <pre><code>199  status_t KeyLayoutMap::Parser::parse() {\n     //while\u5faa\u73af\uff0c\u4e00\u884c\u4e00\u884c\u5730\u89e3\u6790\u6620\u5c04\u8868\u9879\n200  while (!mTokenizer-&gt;isEof()) {\n201  #if DEBUG_PARSER\n      /*\n 11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:160: '## key 138 \"KEY_HELP\"'.\n11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:161: 'key 139   MENU'.\n11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:151: '## key 129 \"KEY_AGAIN\"'.\n11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:152: '## key 130 \"KEY_PROPS\"'.\n11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:153: '## key 131 \"KEY_UNDO\"'.\n11-22 04:27:06.719   908  1162 D KeyLayoutMap: Parsing /system/usr/keylayout/Generic.kl:154: '## key 132 \"KEY_FRONT\"'.\n    */\n    //\u8fd9\u6761log\u7684\u8f93\u5165\uff0c\u90e8\u5206\n202          ALOGD(\"Parsing %s: '%s'.\", mTokenizer-&gt;getLocation().string(),\n203                  mTokenizer-&gt;peekRemainderOfLine().string());\n204  #endif\n206          mTokenizer-&gt;skipDelimiters(WHITESPACE);\n208          if (!mTokenizer-&gt;isEol() &amp;&amp; mTokenizer-&gt;peekChar() != '#') {\n209              String8 keywordToken = mTokenizer-&gt;nextToken(WHITESPACE);\n210              if (keywordToken == \"key\") {\n211                  mTokenizer-&gt;skipDelimiters(WHITESPACE);\n212                  status_t status = parseKey();\n213                  if (status) return status;\n214              } else if (keywordToken == \"axis\") {\n215                  mTokenizer-&gt;skipDelimiters(WHITESPACE);\n216                  status_t status = parseAxis();\n217                  if (status) return status;\n218              } else if (keywordToken == \"led\") {\n219                  mTokenizer-&gt;skipDelimiters(WHITESPACE);\n220                  status_t status = parseLed();\n221                  if (status) return status;\n222              } else {\n223                  ALOGE(\"%s: Expected keyword, got '%s'.\", mTokenizer-&gt;getLocation().string(),\n224                          keywordToken.string());\n225                  return BAD_VALUE;\n226              }\n227  \n228              mTokenizer-&gt;skipDelimiters(WHITESPACE);\n229              if (!mTokenizer-&gt;isEol() &amp;&amp; mTokenizer-&gt;peekChar() != '#') {\n230                  ALOGE(\"%s: Expected end of line or trailing comment, got '%s'.\",\n231                          mTokenizer-&gt;getLocation().string(),\n232                          mTokenizer-&gt;peekRemainderOfLine().string());\n233                  return BAD_VALUE;\n234              }\n235          }\n237          mTokenizer-&gt;nextLine();\n238      }\n239      return NO_ERROR;\n240  }\n</code></pre> <p>mTokenizer-&gt;getLocation()\u8fd9\u4ee3\u8868\u54ea\u4e00\u5f20\u6620\u5c04\u8868\uff0cmTokenizer-&gt;peekRemainderOfLine()\u4ee3\u8868\u6620\u5c04\u8868\u4e2d\u7684scancode\uff0c \u89e3\u6790\u7684\u89c4\u5219\u5982\u4e0b\uff1a keyword\u662f\"key\"\uff0c\u8c03\u7528parseKey\u89e3\u6790\uff0c\u5982\u679c\u89e3\u6790\u51fa\u9519\u5219\u8fd4\u56de\u9519\u8bef keyword\u662f\"axis\"\uff0c\u8c03\u7528parseAxis\u89e3\u6790\uff0c\u5982\u679c\u89e3\u6790\u51fa\u9519\u5219\u8fd4\u56de\u9519\u8bef keyword\u662f\"led\"\uff0c\u8c03\u7528parseAxis\u89e3\u6790\uff0c\u5982\u679c\u89e3\u6790\u51fa\u9519\u5219\u8fd4\u56de\u9519\u8bef \u5982\u679c\u8fd8\u6709\u5176\u4ed6\u4e0d\u6309\u89c4\u5219\u7684\u7b26\u53f7\u5219\u8fd4\u56deBAD_VALUE</p> <p>\u7ee7\u7eedparseKey()\u51fd\u6570</p> <pre><code>242  status_t KeyLayoutMap::Parser::parseKey() {\n243      ......\n256      //\u6b64\u51fd\u6570\u89e3\u6790\u5f97\u5230keycode         \n267      int32_t keyCode = getKeyCodeByLabel(keyCodeToken.string());\n268      ......\n     //11-22 04:55:50.301   852  1162 D KeyLayoutMap: Parsed key scan code: code=85, keyCode=211, flags=0x00000000.\n294  #if DEBUG_PARSER\n295      ALOGD(\"Parsed key %s: code=%d, keyCode=%d, flags=0x%08x.\",\n296              mapUsage ? \"usage\" : \"scan code\", code, keyCode, flags);\n297  #endif\n298      Key key;\n299      key.keyCode = keyCode;\n300      key.flags = flags;\n301      map.add(code, key);\n302      return NO_ERROR;\n303  }\n</code></pre> <p>\u6253\u5f00\u4e0a\u9762\u7684log\u5f00\u5173\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1ascancode\u548ckeycode\u7684\u6620\u5c04\u7ec8\u4e8e\u5f97\u5230\u4e86\uff0c\u7ee7\u7eed\u770b\u51fd\u6570getKeyCodeByLabel</p> <pre><code>11-22 04:55:50.301   852  1162 D KeyLayoutMap: Parsed key scan code: code=83, keyCode=158, flags=0x00000000.\n11-22 04:55:50.301   852  1162 D KeyLayoutMap: Parsed key scan code: code=85, keyCode=211, flags=0x00000000.\n11-22 04:55:50.306   852  1162 D KeyLayoutMap: Parsed key scan code: code=173, keyCode=285, flags=0x00000000.\n11-22 04:55:50.316   852  1162 D KeyLayoutMap: Parsed key scan code: code=483, keyCode=47, flags=0x00000004.\n</code></pre> <p>/frameworks/native/include/input/InputEventLabels.h</p> <pre><code>434  static inline int32_t getKeyCodeByLabel(const char* label) {\n435      return int32_t(lookupValueByLabel(label, KEYCODES));\n436  }\n</code></pre> <p>\u8c03\u7528\u4e86lookupValueByLabel\u51fd\u6570\uff0c\u6211\u4eec\u6765\u770b KEYCODES\u662f\u4ec0\u4e48\uff0c\u91cc\u9762\u662f\u6240\u6709\u7684\u952e</p> <pre><code>23  #define DEFINE_KEYCODE(key) { #key, AKEYCODE_##key }\n39  static const InputEventLabel KEYCODES[] = {\n40      // NOTE: If you add a new keycode here you must also add it to several other files.\n41      //       Refer to frameworks/base/core/java/android/view/KeyEvent.java for the full list.\n44      ......  \n45      DEFINE_KEYCODE(HOME),\n46      DEFINE_KEYCODE(BACK),\n47      DEFINE_KEYCODE(CALL),\n48      DEFINE_KEYCODE(ENDCALL),\n49      DEFINE_KEYCODE(0),\n50      DEFINE_KEYCODE(1),\n51      DEFINE_KEYCODE(2),\n52      DEFINE_KEYCODE(3),\n53      DEFINE_KEYCODE(4),\n54      DEFINE_KEYCODE(5),\n55      DEFINE_KEYCODE(6),\n56      DEFINE_KEYCODE(7),\n57      DEFINE_KEYCODE(8),\n58      DEFINE_KEYCODE(9),\n59      DEFINE_KEYCODE(STAR),\n60      DEFINE_KEYCODE(POUND),\n61      DEFINE_KEYCODE(DPAD_UP),\n62      DEFINE_KEYCODE(DPAD_DOWN),\n63      DEFINE_KEYCODE(DPAD_LEFT),\n64      DEFINE_KEYCODE(DPAD_RIGHT),\n65      DEFINE_KEYCODE(DPAD_CENTER),\n66      DEFINE_KEYCODE(VOLUME_UP),\n67      DEFINE_KEYCODE(VOLUME_DOWN),\n68      DEFINE_KEYCODE(POWER),\n69      DEFINE_KEYCODE(CAMERA),\n70      DEFINE_KEYCODE(CLEAR),\n        ......\n</code></pre> <p>DEFINE_KEYCODE\u8fd9\u4e2a\u5b8f\u5b9a\u4e49\u4f5c\u7528\u662f\u5c06\u4f20\u8fdb\u53bb\u7684\u952e\u540d\u79f0\u62fc\u63a5\u4e3aAKEYCODE_XXX\uff0c\u6bd4\u5982\u6211\u4eec\u4f20\u4e00\u4e2aPOWER\u8fdb\u53bb\u5f97\u5230\u7684\u5c31\u662f{ \u201cPOWER\u201d, AKEYCODE_POWER }</p> <p>\u800cAKEYCODE_POWER\uff0c\u6211\u4eec\u5168\u5c40\u641c\u7d22\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b9a\u4e49\u5728 /frameworks/native/include/android/keycodes.h</p> <pre><code>51  /**\n52   * Key codes.\n53   */\n54  enum {\n55      /** Unknown key code. */\n56      AKEYCODE_UNKNOWN         = 0,\n57      /** Soft Left key.\n58       * Usually situated below the display on phones and used as a multi-function\n59       * feature key for selecting a software defined function shown on the bottom left\n60       * of the display. */\n61      AKEYCODE_SOFT_LEFT       = 1,\n62      /** Soft Right key.\n63       * Usually situated below the display on phones and used as a multi-function\n64       * feature key for selecting a software defined function shown on the bottom right\n65       * of the display. */\n66      AKEYCODE_SOFT_RIGHT      = 2,\n67      /** Home key.\n68       * This key is handled by the framework and is never delivered to applications. */\n69      AKEYCODE_HOME            = 3,\n70      /** Back key. */\n71      AKEYCODE_BACK            = 4,\n72      /** Call key. */\n73      AKEYCODE_CALL            = 5,\n74      /** End Call key. */\n75      AKEYCODE_ENDCALL         = 6,\n76      /** '0' key. */\n77      AKEYCODE_0               = 7,\n78      /** '1' key. */\n79      AKEYCODE_1               = 8,\n80      /** '2' key. */\n81      AKEYCODE_2               = 9,\n82      /** '3' key. */\n83      AKEYCODE_3               = 10,\n84      /** '4' key. */\n85      AKEYCODE_4               = 11,\n86      /** '5' key. */\n87      AKEYCODE_5               = 12,\n88      /** '6' key. */\n89      AKEYCODE_6               = 13,\n90      /** '7' key. */\n91      AKEYCODE_7               = 14,\n92      /** '8' key. */\n93      AKEYCODE_8               = 15,\n94      /** '9' key. */\n95      AKEYCODE_9               = 16,\n96      /** '*' key. */\n97      AKEYCODE_STAR            = 17,\n98      /** '#' key. */\n99      AKEYCODE_POUND           = 18,\n100      /** Directional Pad Up key.\n101       * May also be synthesized from trackball motions. */\n102      AKEYCODE_DPAD_UP         = 19,\n103      /** Directional Pad Down key.\n104       * May also be synthesized from trackball motions. */\n105      AKEYCODE_DPAD_DOWN       = 20,\n106      /** Directional Pad Left key.\n107       * May also be synthesized from trackball motions. */\n108      AKEYCODE_DPAD_LEFT       = 21,\n109      /** Directional Pad Right key.\n110       * May also be synthesized from trackball motions. */\n111      AKEYCODE_DPAD_RIGHT      = 22,\n112      /** Directional Pad Center key.\n113       * May also be synthesized from trackball motions. */\n114      AKEYCODE_DPAD_CENTER     = 23,\n115      /** Volume Up key.\n116       * Adjusts the speaker volume up. */\n117      AKEYCODE_VOLUME_UP       = 24,\n118      /** Volume Down key.\n119       * Adjusts the speaker volume down. */\n120      AKEYCODE_VOLUME_DOWN     = 25,\n121      /** Power key. */\n122      AKEYCODE_POWER           = 26,\n         ......\n  }\n</code></pre> <p>\u5e76\u4e14\u5728java\u5c42\u4e5f\u662f\u7528\u7684\u6620\u5c04\u7684keycode\uff0c\u8fd9\u90fd\u662f\u548cnative\u5c42\u4e00\u81f4\u7684 frameworks/base/core/java/android/view/KeyEvent.java</p> <pre><code>88  public class KeyEvent extends InputEvent implements Parcelable {\n89      /** Key code constant: Unknown key code. */\n90      public static final int KEYCODE_UNKNOWN         = 0;\n91      /** Key code constant: Soft Left key.\n92       * Usually situated below the display on phones and used as a multi-function\n93       * feature key for selecting a software defined function shown on the bottom left\n94       * of the display. */\n95      public static final int KEYCODE_SOFT_LEFT       = 1;\n96      /** Key code constant: Soft Right key.\n97       * Usually situated below the display on phones and used as a multi-function\n98       * feature key for selecting a software defined function shown on the bottom right\n99       * of the display. */\n100      public static final int KEYCODE_SOFT_RIGHT      = 2;\n101      /** Key code constant: Home key.\n102       * This key is handled by the framework and is never delivered to applications. */\n103      public static final int KEYCODE_HOME            = 3;\n104      /** Key code constant: Back key. */\n105      public static final int KEYCODE_BACK            = 4;\n106      /** Key code constant: Call key. */\n107      public static final int KEYCODE_CALL            = 5;\n108      /** Key code constant: End Call key. */\n109      public static final int KEYCODE_ENDCALL         = 6;\n110      /** Key code constant: '0' key. */\n111      public static final int KEYCODE_0               = 7;\n112      /** Key code constant: '1' key. */\n113      public static final int KEYCODE_1               = 8;\n114      /** Key code constant: '2' key. */\n115      public static final int KEYCODE_2               = 9;\n116      /** Key code constant: '3' key. */\n117      public static final int KEYCODE_3               = 10;\n118      /** Key code constant: '4' key. */\n119      public static final int KEYCODE_4               = 11;\n120      /** Key code constant: '5' key. */\n121      public static final int KEYCODE_5               = 12;\n122      /** Key code constant: '6' key. */\n123      public static final int KEYCODE_6               = 13;\n124      /** Key code constant: '7' key. */\n125      public static final int KEYCODE_7               = 14;\n126      /** Key code constant: '8' key. */\n127      public static final int KEYCODE_8               = 15;\n128      /** Key code constant: '9' key. */\n129      public static final int KEYCODE_9               = 16;\n130      /** Key code constant: '*' key. */\n131      public static final int KEYCODE_STAR            = 17;\n132      /** Key code constant: '#' key. */\n133      public static final int KEYCODE_POUND           = 18;\n134      /** Key code constant: Directional Pad Up key.\n135       * May also be synthesized from trackball motions. */\n136      public static final int KEYCODE_DPAD_UP         = 19;\n137      /** Key code constant: Directional Pad Down key.\n138       * May also be synthesized from trackball motions. */\n139      public static final int KEYCODE_DPAD_DOWN       = 20;\n140      /** Key code constant: Directional Pad Left key.\n141       * May also be synthesized from trackball motions. */\n142      public static final int KEYCODE_DPAD_LEFT       = 21;\n143      /** Key code constant: Directional Pad Right key.\n144       * May also be synthesized from trackball motions. */\n145      public static final int KEYCODE_DPAD_RIGHT      = 22;\n146      /** Key code constant: Directional Pad Center key.\n147       * May also be synthesized from trackball motions. */\n148      public static final int KEYCODE_DPAD_CENTER     = 23;\n149      /** Key code constant: Volume Up key.\n150       * Adjusts the speaker volume up. */\n151      public static final int KEYCODE_VOLUME_UP       = 24;\n152      /** Key code constant: Volume Down key.\n153       * Adjusts the speaker volume down. */\n154      public static final int KEYCODE_VOLUME_DOWN     = 25;\n155      /** Key code constant: Power key. */\n156      public static final int KEYCODE_POWER           = 26;\n         ......\n}\n</code></pre> <p>\u5230\u8fd9\u91ccscancode\u4e0ekeycode\u7684\u6620\u5c04\u5c31\u521b\u5efa\u5b8c\u6210, \u7528\u4e00\u4e2a\u5b9e\u9645\u4f8b\u5b50\u6765\u603b\u7ed3\u4e00\u4e0b\u6620\u5c04\u5173\u7cfb</p> <pre><code>Tokyo_TF:/ $ getevent\nadd device 1: /dev/input/event3\n  name:     \"mtk-tpd\"\nadd device 2: /dev/input/event0\n  name:     \"ACCDET\"\nadd device 3: /dev/input/event1\n  name:     \"mtk-kpd\"\nadd device 4: /dev/input/event2\n  name:     \"fts_ts\"\n/dev/input/event1: 0001 0074 00000001\n/dev/input/event1: 0000 0000 00000000\n/dev/input/event1: 0001 0074 00000000\n/dev/input/event1: 0000 0000 00000000\nTokyo_TF:/ $ cat system/usr/keylayout/mtk-kpd.kl |grep -i POWER                                                                      \nkey 116   POWER\n</code></pre> <p>16\u8fdb\u523674\u5bf9\u5e9410\u8fdb\u5236116\uff0c\u6309\u952e\u540d\u79f0POWER\uff0c\u7ecf\u8fc7scancode\u5230keycode\u7684\u6620\u5c04\uff0cPOWER\u4e8b\u4ef6\u4f20\u5230native\u5c42\u53d8\u4e3a\u4e86AKEYCODE_POWER\uff0c\u5230java\u5c42\u53d8\u4e3a\u4e86KEYCODE_POWER,keycode\u90fd\u4e00\u6837\u7b49\u4e8e26\uff0c\u5230\u6b64\u5e95\u5c42\u5bf9\u4e0a\u5c42\u4e8b\u4ef6\u7684\u6620\u5c04\u5c31\u5df2\u7ecf\u5b8c\u6210\uff0c\u4e4b\u540e\u4f1a\u63a5\u7740InputReader\u8bfb\u53d6\u8bbe\u5907\u4e8b\u4ef6\uff0c\u5206\u6790InputDispatcher\u662f\u5982\u4f55\u5c06\u4e8b\u4ef6\u7ed9\u5230\u5e94\u7528\u7a97\u53e3\u7684\u3002</p>","tags":["Android","Input"]},{"location":"android/input/add-new-key/","title":"\u65b0\u589e\u7269\u7406\u6309\u952e\u5904\u7406\u6d41\u7a0b","text":"<p>\u6700\u8fd1\u9879\u76ee\u65b0\u589e\u4e86\u4e00\u4e2a\u7269\u7406\u6309\u952e\uff0c\u5f53system\u6dfb\u52a0\u597dscancode\u4e4b\u540e\uff0c\u8bb0\u5f55\u4e00\u4e0b\u4e0a\u5c42\u7684\u5904\u7406\u6d41\u7a0b\u3002</p> <pre><code>djtang:/data1/localProject/Tokyo_TF$adb shell\nSeoul_TF:/ $ \nSeoul_TF:/ $ getevent\nadd device 1: /dev/input/event2\n  name:     \"mtk-tpd\"\nadd device 2: /dev/input/event0\n  name:     \"ACCDET\"\nadd device 3: /dev/input/event1\n  name:     \"mtk-kpd\"\n/dev/input/event1: 0001 00f9 00000001\n/dev/input/event1: 0000 0000 00000000\n/dev/input/event1: 0001 00f9 00000000\n/dev/input/event1: 0000 0000 00000000\n</code></pre> <p>\u6b64\u6309\u952escancode\u662f00f9\uff0c10\u8fdb\u5236249\uff0c\u540d\u79f0AI\uff0c\u9996\u5148\u9700\u8981\u5728/system/usr/keylayout/mtk-kpd.kl\u6dfb\u52a0:</p> <pre><code>key 164   MEDIA_PLAY_PAUSE\nkey 128   MEDIA_STOP\nkey 163   MEDIA_NEXT\nkey 165   MEDIA_PREVIOUS\nkey 168   MEDIA_REWIND\nkey 159   MEDIA_FAST_FORWARD\nkey 249   AI\n</code></pre> <p>\u5728keycodes.h\u91cc\u9762\u6309\u987a\u5e8f\u6dfb\u52a0\u5230\u6700\u540e frameworks/native/include/android/keycodes.h</p> <pre><code>......\nAKEYCODE_THUMBS_UP = 286,\n/** Thumbs down key. Apps can use this to let user downvote content. */\nAKEYCODE_THUMBS_DOWN = 287,\n/** Used to switch current account that is consuming content.\n * May be consumed by system to switch current viewer profile. */\nAKEYCODE_PROFILE_SWITCH = 288,\n/* AI Key */\nAKEYCODE_AI = 289\n</code></pre> <p>\u5728InputEventLabels.h\u91cc\u9762\u4e5f\u6309\u987a\u5e8f\u6dfb\u52a0\u5728\u6700\u540e\u9762 frameworks/native/include/input/InputEventLabels.h</p> <p><pre><code>    ......\n    DEFINE_KEYCODE(ALL_APPS),\n    DEFINE_KEYCODE(REFRESH),\n    DEFINE_KEYCODE(THUMBS_UP),\n    DEFINE_KEYCODE(THUMBS_DOWN),\n    DEFINE_KEYCODE(PROFILE_SWITCH),\n    DEFINE_KEYCODE(AI),\n    { nullptr, 0 }\n};\n</code></pre> \u5728KeyEvent.java\u91cc\u9762\u6700\u540e\u4f9d\u6b21\u6dfb\u52a0\uff0c\u5e76\u628aLAST_KEYCODE\u6539\u4e3a\u624d\u6dfb\u52a0\u7684KEYCODE_AI</p> <pre><code>    public static final int KEYCODE_THUMBS_DOWN = 287;\n    /**\n     * Key code constant: Used to switch current {@link android.accounts.Account} that is\n     * consuming content. May be consumed by system to set account globally.\n     */\n    public static final int KEYCODE_PROFILE_SWITCH = 288;\n    /**\n     * @hide\n     */\n    public static final int KEYCODE_AI = 289;\n     @TestApi\n    public static final int LAST_KEYCODE = KEYCODE_AI;\n</code></pre> <p>test-current.txt\u8fd9\u4e2aAPI\u6587\u6863\u4e5f\u9700\u8981\u540c\u6b65\u4fee\u6539LAST_KEYCODE frameworks/base/api/test-current.txt</p> <pre><code>  public class KeyEvent extends android.view.InputEvent implements android.os.Parcelable {\n    method public static String actionToString(int);\n    method public final void setDisplayId(int);\n    field public static final int LAST_KEYCODE = 289; // 0x121\n  }\n</code></pre> <p>attrs.xml\u6700\u540e\u9762\u540c\u6b65\u6dfb\u52a0 frameworks/base/core/res/res/values/attrs.xml</p> <pre><code>    &lt;enum name=\"KEYCODE_REFRESH\" value=\"285\" /&gt;\n    &lt;enum name=\"KEYCODE_THUMBS_UP\" value=\"286\" /&gt;\n    &lt;enum name=\"KEYCODE_THUMBS_DOWN\" value=\"287\" /&gt;\n    &lt;enum name=\"KEYCODE_PROFILE_SWITCH\" value=\"288\" /&gt;\n    &lt;enum name=\"KEYCODE_AI\" value=\"289\" /&gt;\n&lt;/attr&gt;\n</code></pre> <p>\u90fd\u6dfb\u52a0\u597d\u4e86PhoneWindowManager.java\u91cc\u5c31\u80fd\u6536\u5230\u6b64\u6309\u952e\u70b9\u51fb\u4e8b\u4ef6\u4e86\uff0c\u5bf9\u4e8b\u4ef6\u505a\u5bf9\u5e94\u5904\u7406\u5373\u53ef</p> <pre><code>@Override\npublic int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags) {\n.......\n // Handle special keys.\n    switch (keyCode) {\n        case KeyEvent.KEYCODE_AI:{\n            .......\n            break;\n        }\n        case KeyEvent.KEYCODE_BACK:{\n        }\n.......\n}\n</code></pre> <p>\u6dfb\u52a0\u65b0\u7684\u7269\u7406\u6309\u952e\uff0c\u8981\u4e0a\u5c42\u6536\u5230\u5bf9\u5e94\u4e8b\u4ef6\uff0c\u53ea\u9700\u8981\u6309\u90e8\u5c31\u73ed\u53c2\u7167\u7cfb\u7edf\u6309\u952e\u5b9e\u73b0\u5373\u53ef\uff0csystem\u63d0\u4f9bscancode\uff0c\u4e0a\u5c42\u8f6c\u6362\u4e3akeycode\u4f7f\u7528\u3002</p>","tags":["Android","Input"]},{"location":"android/base-tools/adb/","title":"ADB","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#commonds","title":"Commonds","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_1","title":"\u57fa\u7840\u547d\u4ee4","text":"\u547d\u4ee4 \u542b\u4e49 adb devices \u67e5\u770b\u8bbe\u5907\u8fde\u63a5\u60c5\u51b5 adb version \u67e5\u770b\u7248\u672c adb help \u67e5\u770b\u5e2e\u52a9 adb shell \u8fdb\u5165adb sehll\u547d\u4ee4 adb shell top \u67e5\u770b\u624b\u673a\u5f53\u524d\u8fdb\u7a0b\u5360\u7528\u624b\u673a\u5185\u5b58\u60c5\u51b5 adb shell kill -3 pid \u6740\u6389\u8fdb\u7a0b adb logcat -v process | grep 8607 8607\u662f\u8fdb\u7a0b PID adb shell reboot -p \u5173\u673a adb reboot \u91cd\u542f adb shutdown \u5173\u673a adb root root adb remount \u83b7\u53d6\u8bfb\u5199\u6743\u9650 adb kill-server \u5173\u95edadb\u670d\u52a1 adb start-server \u542f\u52a8adb\u670d\u52a1 adb shell stop \u5173\u95ed\u8bbe\u5907\u8bf7\u6c42 adb shell start \u542f\u52a8\u8bbe\u5907\u8bf7\u6c42 adb shell su root setenforce 0 \u5173\u95edseLinux\u6a21\u5f0f","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_2","title":"\u7f51\u7edc\u76f8\u5173\u8bbe\u7f6e","text":"\u547d\u4ee4 \u542b\u4e49 adb shell ifconfig \u67e5\u770b\u624b\u673aIP adb tcpip 5555 \u8bbe\u7f6e\u624b\u673atcpip adb connect IP \u8fde\u63a5IP","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#display","title":"\u5c4f\u5e55display\u4fe1\u606f","text":"\u547d\u4ee4 \u542b\u4e49 adb shell wm size \u67e5\u770b\u5206\u8fa8\u7387 adb shell set wm size \u8bbe\u7f6e\u5206\u8fa8\u7387 adb shell wm density \u67e5\u770b\u5c4f\u5e55\u5bc6\u5ea6 adb shell wm density xxx \u8bbe\u7f6e\u5c4f\u5e55\u5bc6\u5ea6","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_3","title":"\u5e94\u7528\u7ba1\u7406","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_4","title":"\u67e5\u770b\u5e94\u7528\u5217\u8868","text":"\u547d\u4ee4 \u542b\u4e49 adb shell pm list packages \u6240\u6709\u5e94\u7528 adb shell pm list packages -f \u663e\u793a\u5e94\u7528\u5173\u8054\u7684 apk \u6587\u4ef6 adb shell pm list packages -d \u53ea\u663e\u793a disabled \u7684\u5e94\u7528 adb shell pm list packages -e \u53ea\u663e\u793a enabled \u7684\u5e94\u7528 adb shell pm list packages -s \u53ea\u663e\u793a\u7cfb\u7edf\u5e94\u7528 adb shell pm list packages -3 \u53ea\u663e\u793a\u7b2c\u4e09\u65b9\u5e94\u7528 adb shell pm list packages -i \u663e\u793a\u5e94\u7528\u7684 installer adb shell pm list packages -u \u5305\u542b\u5df2\u5378\u8f7d\u5e94\u7528 <code>&lt;FILTER&gt;</code> \u5305\u540d\u5305\u542b\u00a0<code>&lt;FILTER&gt;</code>\u00a0\u5b57\u7b26\u4e32","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#apk","title":"\u5b89\u88c5\u4e0e\u5378\u8f7dAPK","text":"<p>\u5b89\u88c5</p> \u547d\u4ee4 \u542b\u4e49 adb install -l xxx.apk \u5c06\u5e94\u7528\u5b89\u88c5\u5230\u4fdd\u62a4\u76ee\u5f55 /mnt/asec adb install -r xxx.apk \u5141\u8bb8\u8986\u76d6\u5b89\u88c5 adb install -t xxx.apk \u5141\u8bb8\u5b89\u88c5 AndroidManifest.xml \u91cc application \u6307\u5b9a\u00a0<code>android:testOnly=\"true\"</code>\u00a0\u7684\u5e94\u7528 adb install -s xxx.apk \u5c06\u5e94\u7528\u5b89\u88c5\u5230 sdcard adb install -d xxx.apk \u5141\u8bb8\u964d\u7ea7\u8986\u76d6\u5b89\u88c5 adb install -g xxx.apk \u6388\u4e88\u6240\u6709\u8fd0\u884c\u65f6\u6743\u9650 adb install --abi abi-identifier xxx.apk \u4e3a\u7279\u5b9a ABI \u5f3a\u5236\u5b89\u88c5 apk\uff0cabi-identifier \u53ef\u4ee5\u662f armeabi-v7a\u3001arm64-v8a\u3001v86\u3001x86_64 \u7b49 <p>\u5378\u8f7d</p> \u547d\u4ee4 \u542b\u4e49 adb uninstall [-k] \\ <code>&lt;packagename&gt;</code>\u00a0\u8868\u793a\u5e94\u7528\u7684\u5305\u540d\uff0c<code>-k</code>\u00a0\u53c2\u6570\u53ef\u9009\uff0c\u8868\u793a\u5378\u8f7d\u5e94\u7528\u4f46\u4fdd\u7559\u6570\u636e\u548c\u7f13\u5b58\u76ee\u5f55\u3002","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_5","title":"\u67e5\u770b\u65e5\u5fd7","text":"<p>Android \u7cfb\u7edf\u7684\u65e5\u5fd7\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5e95\u5c42\u7684 Linux \u5185\u6838\u65e5\u5fd7\u8f93\u51fa\u5230 /proc/kmsg\uff0cAndroid \u7684\u65e5\u5fd7\u8f93\u51fa\u5230 /dev/log\u3002</p>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#android","title":"Android \u65e5\u5fd7","text":"<p>\u547d\u4ee4\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_6","title":"\u65e5\u5fd7\u7b49\u7ea7","text":"<p>Android \u7684\u65e5\u5fd7\u5206\u4e3a\u5982\u4e0b\u51e0\u4e2a\u4f18\u5148\u7ea7\uff08priority\uff09\uff0c\u7531\u4e0a\u5f80\u4e0b\u7ea7\u522b\u9012\u589e\u3002</p> \u7b49\u7ea7 \u82f1\u6587 \u542b\u4e49 V verbase \u7ea7\u522b\u6700\u4f4e\uff0c\u7410\u788e\u3001\u4e0d\u91cd\u8981\u7684\u65e5\u5fd7\u4fe1\u606f D debug \u8c03\u8bd5\u4fe1\u606f I info \u91cd\u8981\u4fe1\u606f W warning \u8b66\u544a\u4fe1\u606f E error \u9519\u8bef\u4fe1\u606f F fatal \u4e25\u91cd\u9519\u8bef\u4fe1\u606f S slient \u65e0\u8bb0\u8f7d <p>\u6309\u67d0\u7ea7\u522b\u8fc7\u6ee4\u65e5\u5fd7\u5219\u4f1a\u5c06\u8be5\u7ea7\u522b\u53ca\u4ee5\u4e0a\u7684\u65e5\u5fd7\u8f93\u51fa\u3002\u6bd4\u5982\uff0c\u547d\u4ee4\uff1a</p> <pre><code>adb logcat \"*:W\"\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_7","title":"\u65e5\u5fd7\u7f13\u51b2\u533a","text":"<p>\u57fa\u672c\u547d\u4ee4 <pre><code>adb logcat -b &lt;buffer&gt; \n</code></pre></p> <p>buffer\u9009\u9879\u53ef\u4ee5\u586b\u4e3a\uff1a</p> \u547d\u4ee4 \u542b\u4e49 radio \u901a\u4fe1\u7cfb\u7edf system \u7cfb\u7edf\u7ec4\u4ef6 event event\u4e8b\u4ef6\u6a21\u5757 main java\u5c42 kernel linux\u5185\u6838 all \u6240\u6709","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_8","title":"\u5185\u6838 \u65e5\u5fd7","text":"<p>\u547d\u4ee4\uff1a</p> <pre><code>adb shell dmesg\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a</p> <pre><code>[34096.252006] init: Control message: Could not find 'aidl/vendor.qti.qhcp.IQHDC/default' for ctl.interface_start from pid: 423 (/system/bin/servicemanager)                                                                                                  \n[34097.245918] init: Control message: Could not find 'aidl/vendor.qti.qhcp.IQHDC/default' for ctl.interface_start from pid: 423 (/system/bin/servicemanager)                                                                                                  \n[34097.254912] init: Control message: Could not find 'aidl/vendor.qti.qhcp.IQHDC/default' for ctl.interface_start from pid: 423 (/system/bin/servicemanager)                                                                                                  \n[34098.246388] init: Control message: Could not find 'aidl/vendor.qti.qhcp.IQHDC/default' for ctl.interface_start from pid: 423 (/system/bin/servicemanager)                                                                                                  \n[34098.254246] init: Control message: Could not find 'aidl/vendor.qti.qhcp.IQHDC/default' for ctl.interface_start from pid: 423 (/system/bin/servicemanager)\n</code></pre> <p>\u4e2d\u62ec\u53f7\u91cc\u7684\u00a0<code>[34098.254246]</code>\u00a0\u4ee3\u8868\u5185\u6838\u5f00\u59cb\u542f\u52a8\u540e\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\u3002</p> <p>\u901a\u8fc7\u5185\u6838\u65e5\u5fd7\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982\u8861\u91cf\u5185\u6838\u542f\u52a8\u65f6\u95f4\uff0c\u5728\u7cfb\u7edf\u542f\u52a8\u5b8c\u6bd5\u540e\u7684\u5185\u6838\u65e5\u5fd7\u91cc\u627e\u5230\u00a0<code>Freeing init memory</code>\u00a0\u90a3\u4e00\u884c\u524d\u9762\u7684\u65f6\u95f4\u5c31\u662f\u3002</p>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#apk_1","title":"APK\u5305\u76f8\u5173\u547d\u4ee4","text":"<p>adb shell pm\u547d\u4ee4</p> <pre><code>adb shell pm -l \u5217\u51fa\u5305\u5217\u8868\nadb shell pm list packages  \u67e5\u770b\u5305\u540d(\u540c\u4e0a)\n\nadb shell pm path \"PackageName\"  \u83b7\u53d6\u5305\u7684\u8def\u5f84(\u53ef\u4ee5\u901a\u8fc7dump SF\u83b7\u53d6\u5f53\u524d\u7684\u6d3b\u52a8\u5305\u540d)\nadb shell pm list  packages  -f \u67e5\u770b\u5305\u540d\u5bf9\u5e94\u7684apk\u8def\u5f84\u53ca\u540d\u79f0\nadb shell dumpsys\u3000\u3000\u5217\u51fa\u624b\u673a\u6240\u6709apk\u7684\u8be6\u7ec6\u4fe1\u606f\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#dumpsys","title":"Dumpsys\u4fe1\u606f","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_9","title":"\u670d\u52a1\u5217\u8868\u4fe1\u606f","text":"<pre><code>adb shell service list\n</code></pre> <p>\u6216\u8005</p> <pre><code>adb shell dumpsys -l\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_10","title":"\u5e38\u89c1\u670d\u52a1\u4fe1\u606f\u5217\u8868","text":"\u670d\u52a1\u540d \u7c7b\u540d \u529f\u80fd gfxinfo GraphicsBinder \u56fe\u50cf SurfaceFlinger \u56fe\u50cf\u76f8\u5173 activity ActivityManagerService AMS\u76f8\u5173\u4fe1\u606f package PackageManagerService PMS\u76f8\u5173\u4fe1\u606f window WindowManagerService WMS\u76f8\u5173\u4fe1\u606f input InputManagerService IMS\u76f8\u5173\u4fe1\u606f power PowerManagerService PMS\u76f8\u5173\u4fe1\u606f batterystats BatterystatsService \u7535\u6c60\u7edf\u8ba1\u4fe1\u606f battery BatteryService \u7535\u6c60\u4fe1\u606f alarm AlarmManagerService \u95f9\u949f\u4fe1\u606f dropbox DropboxManagerService \u8c03\u8bd5\u76f8\u5173 procstats ProcessStatsService \u8fdb\u7a0b\u7edf\u8ba1 cpuinfo CpuBinder CPU meminfo MemBinder \u5185\u5b58 dbinfo DbBinder \u6570\u636e\u5e93 appops app\u4f7f\u7528\u60c5\u51b5 permission \u6743\u9650 processinfo \u8fdb\u7a0b\u670d\u52a1 batteryproperties \u7535\u6c60\u76f8\u5173 audio \u67e5\u770b\u58f0\u97f3\u4fe1\u606f netstats \u67e5\u770b\u7f51\u7edc\u7edf\u8ba1\u4fe1\u606f diskstats \u67e5\u770b\u7a7a\u95f4free\u72b6\u6001 jobscheduler \u67e5\u770b\u4efb\u52a1\u8ba1\u5212 wifi wifi\u4fe1\u606f diskstats \u78c1\u76d8\u60c5\u51b5 usagestats \u7528\u6237\u4f7f\u7528\u60c5\u51b5 devicestoragemonitor \u8bbe\u5907\u4fe1\u606f","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#dump","title":"dump\u65b9\u6cd5","text":"<pre><code>dumpsys &lt;service&gt;\u3000\u3000\u3000\u3000\u6253\u5370\u5177\u4f53\u67d0\u4e00\u9879\u670d\u52a1\uff08service\u5c31\u662f\u524d\u9762\u8868\u683c\u4e2d\u7684\u670d\u52a1\u540d\uff09\n\n\u4f8b\u5982\uff1a \uff08adb shell\uff09\ndumpsys cpuinfo //\u6253\u5370\u4e00\u6bb5\u65f6\u95f4\u8fdb\u7a0b\u7684CPU\u4f7f\u7528\u767e\u5206\u6bd4\u6392\u884c\u699c\ndumpsys meminfo -h  //\u67e5\u770bdump\u5185\u5b58\u7684\u5e2e\u52a9\u4fe1\u606f\ndumpsys package &lt;packagename&gt; //\u67e5\u770b\u6307\u5b9a\u5305\u7684\u4fe1\u606f\ndumpsys SurfaceFLinger    //\u67e5\u770bSF\u670d\u52a1\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#dump-surfaceflinger","title":"dump SurfaceFlinger\u4fe1\u606f","text":"<pre><code>adb shell dumpsys SurfaceFlinger\n\n\u4e00\u822c\u5305\u542b\uff1a\n1\u3001layer\u7684\u4fe1\u606f\uff0clayer\u4e00\u822c\u5bf9\u5e94\u4e8e\u4e00\u4e2asurface;\n2\u3001opengl\u7684\u4fe1\u606f\u3002\u4e00\u822c\u662f\u8ddfgpu\u6bd4\u8f83\u76f8\u5173\u7684\u53c2\u6570\uff0copengl\u662f\u6807\u51c6\u7684\u63a5\u53e3;\n3\u3001display\u3002\u5b89\u5353\u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684display\uff0c\u53ef\u4ee5\u5bfc\u51fadisplay\u5f53\u524d\u7684\u663e\u793a\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u5404\u4e2asurface(layer)\u5728\u5404\u4e2adisplay\u7684\u663e\u793a\u5c5e\u6027;\n4\u3001surfaceflinger\u7ba1\u7406graphis buffer\u7684\u4fe1\u606f\u3002\u4e3b\u8981\u662flayer\u7533\u8bf7\u7684\u5e27\u6570\u636e\u5185\u5b58;\n5\u3001hwcomopser\u7684\u5982\u679c\u5b9e\u73b0dump\u63a5\u53e3\u4e5f\u80fd\u77e5\u9053hwcomposer\u7684\u4e00\u4e9b\u53c2\u6570;\n6\u3001gralloc\u7684\u5185\u5b58\u5206\u914d\u4fe1\u606f\u3002\u5982\u679cgralloc\u6709\u5b9e\u73b0dump\u63a5\u53e3\u7684\u8bdd;\n7\u3001\u5408\u6210\u65b9\u5f0f\u3001BufferLayer\u7684\u6811\u5f62\u7ed3\u6784\u4fe1\u606f\n</code></pre> <p>\u8fde\u63a5DP \u7136\u540e\u7ee7\u7eeddump SurfaceFlinger\u4fe1\u606f</p> <pre><code>\u8fde\u63a5\u4e4b\u524d\u542f\u52a8: adb shell dumpsys SurfaceFlinger --file --no-limit \n\u65ad\u5f00\u540e\u518d\u6b21\u6267\u884c adb shell dumpsys SurfaceFlinger --file --no-limit \n\u5e76pull\u51fa\u6765 adb pull /data/misc/wmtrace/dumpsys.txt\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#gpu","title":"GPU\u5e27\u6e32\u67d3\u6570\u636e","text":"<pre><code>adb shell dumpsys gfxinfo \n\n\u4f8b\u5982\u67e5\u770bcamera\u529f\u80fd\u7684\u6e32\u67d3\u4e00\u5e27\u6240\u7ecf\u8fc7\u7684\u5404\u4e2a\u9636\u6bb5\u7684\u8017\u65f6\u60c5\u51b5\uff08\u5355\u4f4d\u6beb\u79d2\uff09\ndumpsys gfxinfo **.camera \n\n\u5e26\u4e0a framestats \u53c2\u6570\u53ef\u4ee5\u83b7\u53d6\u6700\u8fd1\u7684 120 \u5e27\u6570\u636e\uff1a\nadb shell dumpsys gfxinfo **.camera framestats\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#_11","title":"\u9ad8\u7ea7\u547d\u4ee4","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#selinux","title":"\u542f\u7528/\u7981\u7528 SELinux","text":"<ul> <li> <p>\u7981\u7528 <pre><code>adb root\nadb shell setenforce 0\n</code></pre></p> </li> <li> <p>\u542f\u7528 <pre><code>adb root\nadb shell setenforce 1\n</code></pre></p> </li> </ul>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#dm_verity","title":"\u542f\u7528/\u7981\u7528 dm_verity","text":"<ul> <li> <p>\u7981\u7528 <pre><code>adb root\nadb disable-verity\n</code></pre></p> </li> <li> <p>\u542f\u7528 <pre><code>adb root\nadb enable-verity\n</code></pre></p> </li> </ul>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#hidden-api","title":"\u542f\u7528/\u7981\u7528 hidden api","text":"<ul> <li> <p>\u7981\u7528 <pre><code>adb shell settings delete global hidden_api_policy_pre_p_apps  \nadb shell settings delete global hidden_api_policy_p_apps\n</code></pre></p> </li> <li> <p>\u542f\u7528</p> </li> </ul> <p>\u53ef\u4ee5\u8bbf\u95ee hide api</p> <pre><code>adb shell settings put global hidden_api_policy_pre_p_apps 1  \nadb shell settings put global hidden_api_policy_p_apps 1\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#android-binary-xml","title":"Android binary XML","text":"<p>Android12\u4e4b\u540e\uff0c\u5f15\u5165\u4e00\u79cd\u81ea\u5b9a\u4e49\u7684\u5199XML\u7684\u534f\u8bae\uff0c\u8fd9\u6837\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u53eb\u4e8c\u8fdb\u5236XML\u3002 \u5982\u679c\u6211\u4eec\u76f4\u63a5 cat /data/system/packages.xml \uff0c\u663e\u793a\u51fa\u6765\u7684\u662f\u4e71\u7801\u7684\uff0c\u9700\u8981\u4f7f\u7528 abx2xml \u5de5\u5177\u8fdb\u884c\u8f6c\u6362\u3002</p> <pre><code>adb shell cat /data/system/packages.xml | adb shell abx2xml - -\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#fastboot","title":"fastboot","text":"","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/adb/#gsi","title":"gsi","text":"<p>\u53ea\u5237Android\u4e0a\u5c42\uff0c\u4e0d\u5305\u542bvendor\u90e8\u5206\u3002 qssi\u540c\u6837\u9002\u7528\u3002</p> <pre><code>adb reboot fastboot\n\nfastboot flash system system.img  \nfastboot flash system_ext system_ext.img  \nfastboot flash product product.img  \nfastboot flash vbmeta_system vbmeta_system.img  \nfastboot -w  \nfastboot reboot\n</code></pre>","tags":["Android","\u5de5\u5177","ADB"]},{"location":"android/base-tools/api-levels/","title":"Android API Levels","text":"<p>apilevels</p> <p>github</p>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/as-shortcut-keys/","title":"Android Studio \u5feb\u6377\u952e","text":"","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#ide","title":"IDE","text":"\u6309\u952e \u8bf4\u660e F1 \u5e2e\u52a9 Alt(Option)+F1 \u67e5\u627e\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u4f4d\u7f6e Alt(Option)+1 \u5feb\u901f\u6253\u5f00\u6216\u9690\u85cf\u5de5\u7a0b\u9762\u677f Ctrl(Command)+Alt(Option)+ \u6253\u5f00\u8bbe\u7f6e\u5bf9\u8bdd\u6846 Alt(Option)+Home \u8df3\u8f6c\u5230\u5bfc\u822a\u680f Esc \u5149\u6807\u8fd4\u56de\u7f16\u8f91\u6846 Shift+Esc \u5149\u6807\u8fd4\u56de\u7f16\u8f91\u6846,\u5173\u95ed\u65e0\u7528\u7684\u7a97\u53e3 Shift+Click \u5173\u95ed\u6807\u7b7e\u9875 F12 \u628a\u7126\u70b9\u4ece\u7f16\u8f91\u5668\u79fb\u5230\u6700\u8fd1\u4f7f\u7528\u7684\u5de5\u5177\u7a97\u53e3 Ctrl(Command)+Alt(Option)+Y \u540c\u6b65 Ctrl(Command)+Alt(Option)+S \u6253\u5f00\u8bbe\u7f6e\u5bf9\u8bdd\u6846 Alt(Option)+Shift+Inert \u5f00\u542f/\u5173\u95ed\u5217\u9009\u62e9\u6a21\u5f0f Ctrl(Command)+Alt(Option)+Shift+S \u6253\u5f00\u5f53\u524d\u9879\u76ee/\u6a21\u5757\u5c5e\u6027 Alt(Option)+Shift+C \u67e5\u770b\u6587\u4ef6\u7684\u53d8\u66f4\u5386\u53f2 Ctrl(Command)+Shift+F10 \u8fd0\u884c Ctrl(Command)+Shift+F9 debug\u8fd0\u884c Ctrl(Command)+Alt(Option)+F12 \u8d44\u6e90\u7ba1\u7406\u5668\u6253\u5f00\u6587\u4ef6\u5939","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#_1","title":"\u7f16\u8f91","text":"\u6309\u952e \u8bf4\u660e Ctrl(Command)+C \u590d\u5236\u5f53\u524d\u884c\u6216\u9009\u4e2d\u7684\u5185\u5bb9 Ctrl(Command)+D \u7c98\u8d34\u5f53\u524d\u884c\u6216\u9009\u4e2d\u7684\u5185\u5bb9 Ctrl(Command)+X \u526a\u5207\u5f53\u524d\u884c\u6216\u9009\u4e2d\u7684\u5185\u5bb9 Ctrl(Command)+Y \u5220\u9664\u884c Ctrl(Command)+Z \u5012\u9000 Ctrl(Command)+Shift+Z \u5411\u524d Alt(Option)+Enter \u81ea\u52a8\u4fee\u6b63 Ctrl(Command)+Alt(Option)+L \u683c\u5f0f\u5316\u4ee3\u7801 Ctrl(Command)+Alt(Option)+I \u5c06\u9009\u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u81ea\u52a8\u7f29\u8fdb\u7f16\u6392 Ctrl(Command)+Alt(Option)+O \u4f18\u5316\u5bfc\u5165\u7684\u7c7b\u548c\u5305 Alt(Option)+Insert \u5f97\u5230\u4e00\u4e9bIntention Action\uff0c\u53ef\u4ee5\u751f\u6210\u6784\u9020\u5668\u3001Getter\u3001Setter\u3001\u5c06 == \u6539\u4e3a equals() \u7b49 Ctrl(Command)+Shift+V \u9009\u6700\u8fd1\u4f7f\u7528\u7684\u526a\u8d34\u677f\u5185\u5bb9\u5e76\u63d2\u5165 Ctrl(Command)+Alt(Option)+Shift+V \u7b80\u5355\u7c98\u8d34 Ctrl(Command)+Shift+Insert \u9009\u6700\u8fd1\u4f7f\u7528\u7684\u526a\u8d34\u677f\u5185\u5bb9\u5e76\u63d2\u5165\uff08\u540cCtrl(Command)+Shift+V\uff09 Ctrl(Command)+Enter \u5728\u5f53\u524d\u884c\u7684\u4e0a\u9762\u63d2\u5165\u65b0\u884c\uff0c\u5e76\u79fb\u52a8\u5149\u6807\u5230\u65b0\u884c\uff08\u6b64\u529f\u80fd\u5149\u6807\u5728\u884c\u9996\u65f6\u6709\u6548\uff09 Shift+Enter \u5728\u5f53\u524d\u884c\u7684\u4e0b\u9762\u63d2\u5165\u65b0\u884c\uff0c\u5e76\u79fb\u52a8\u5149\u6807\u5230\u65b0\u884c Ctrl(Command)+J \u81ea\u52a8\u4ee3\u7801 Ctrl(Command)+Alt(Option)+T \u628a\u9009\u4e2d\u7684\u4ee3\u7801\u653e\u5728 try{} \u3001if{} \u3001 else{} \u91cc Shift+Alt(Option)+Insert \u7ad6\u7f16\u8f91\u6a21\u5f0f Ctrl(Command)+ / \u6ce8\u91ca // Ctrl(Command)+Shift+ / \u6ce8\u91ca /\u2026/ Ctrl(Command)+Shift+J \u5408\u5e76\u6210\u4e00\u884c F2/Shift+F2 \u8df3\u8f6c\u5230\u4e0b/\u4e0a\u4e00\u4e2a\u9519\u8bef\u8bed\u53e5\u5904 Ctrl(Command)+Shift+Back \u8df3\u8f6c\u5230\u4e0a\u6b21\u7f16\u8f91\u7684\u5730\u65b9 Ctrl(Command)+Alt(Option)+Space \u7c7b\u540d\u81ea\u52a8\u5b8c\u6210 Shift+Alt(Option)+Up/Down \u5185\u5bb9\u5411\u4e0a/\u4e0b\u79fb\u52a8 Ctrl(Command)+Shift+Up/Down \u8bed\u53e5\u5411\u4e0a/\u4e0b\u79fb\u52a8 Ctrl(Command)+Shift+U \u5927\u5c0f\u5199\u5207\u6362 Tab \u4ee3\u7801\u6807\u7b7e\u8f93\u5165\u5b8c\u6210\u540e\uff0c\u6309 Tab\uff0c\u751f\u6210\u4ee3\u7801 Ctrl(Command)+Backspace \u6309\u5355\u8bcd\u5220\u9664 Ctrl(Command)+Shift+Enter \u8bed\u53e5\u5b8c\u6210 Ctrl(Command)+Alt(Option)+J \u7528\u52a8\u6001\u6a21\u677f\u73af\u7ed5","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#_2","title":"\u6587\u4ef6","text":"\u6309\u952e \u8bf4\u660e Ctrl(Command)+F12 \u663e\u793a\u5f53\u524d\u6587\u4ef6\u7684\u7ed3\u6784 Ctrl(Command)+H \u663e\u793a\u7c7b\u7ee7\u627f\u7ed3\u6784\u56fe Ctrl(Command)+Q \u663e\u793a\u6ce8\u91ca\u6587\u6863 Ctrl(Command)+P \u65b9\u6cd5\u53c2\u6570\u63d0\u793a Ctrl(Command)+U \u6253\u5f00\u5f53\u524d\u7c7b\u7684\u7236\u7c7b\u6216\u8005\u5b9e\u73b0\u7684\u63a5\u53e3 Alt(Option)+Left/Right \u5207\u6362\u4ee3\u7801\u89c6\u56fe Ctrl(Command)+Alt(Option)+Left/Right \u8fd4\u56de\u4e0a\u6b21\u7f16\u8f91\u7684\u4f4d\u7f6e Alt(Option)+Up/Down \u5728\u65b9\u6cd5\u95f4\u5feb\u901f\u79fb\u52a8\u5b9a\u4f4d Ctrl(Command)+B \u5feb\u901f\u6253\u5f00\u5149\u6807\u5904\u7684\u7c7b\u6216\u65b9\u6cd5 Ctrl(Command)+W \u9009\u4e2d\u4ee3\u7801\uff0c\u8fde\u7eed\u6309\u4f1a\u6709\u5176\u4ed6\u6548\u679c Ctrl(Command)+Shift+W \u53d6\u6d88\u9009\u62e9\u5149\u6807\u6240\u5728\u8bcd Ctrl(Command)+ - / + \u6298\u53e0/\u5c55\u5f00\u4ee3\u7801 Ctrl(Command)+Shift+ - / + \u6298\u53e0/\u5c55\u5f00\u5168\u90e8\u4ee3\u7801 Ctrl(Command)+Shift+. \u6298\u53e0/\u5c55\u5f00\u5f53\u524d\u82b1\u62ec\u53f7\u4e2d\u7684\u4ee3\u7801 Ctrl(Command)+ ] \u8df3\u8f6c\u5230\u4ee3\u7801\u5757\u7ed3\u675f F2 \u6216 Shift+F2 \u9ad8\u4eae\u9519\u8bef\u6216\u8b66\u544a\u5feb\u901f\u5b9a\u4f4d Ctrl(Command)+Shift+C \u590d\u5236\u8def\u5f84 Ctrl(Command)+Alt(Option)+Shift+C \u590d\u5236\u5f15\u7528\uff0c\u5fc5\u987b\u9009\u62e9\u7c7b\u540d Alt(Option)+Up/Down \u5728\u65b9\u6cd5\u95f4\u5feb\u901f\u79fb\u52a8\u5b9a\u4f4d Shift+F1 \u8981\u6253\u5f00\u7f16\u8f91\u5668\u5149\u6807\u5b57\u7b26\u5904\u4f7f\u7528\u7684\u7c7b\u6216\u8005\u65b9\u6cd5 Java \u6587\u6863\u7684\u6d4f\u89c8\u5668 Ctrl(Command)+G \u5b9a\u4f4d\u884c","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#_3","title":"\u67e5\u627e","text":"\u6309\u952e \u8bf4\u660e Ctrl(Command)+F \u5728\u5f53\u524d\u7a97\u53e3\u67e5\u627e\u6587\u672c Ctrl(Command)+Shift+F \u5728\u6307\u5b9a\u73af\u5883\u4e0b\u67e5\u627e\u6587\u672c F3 \u5411\u4e0b\u67e5\u627e\u5173\u952e\u5b57\u51fa\u73b0\u4f4d\u7f6e Shift+F3 \u5411\u4e0a\u4e00\u4e2a\u5173\u952e\u5b57\u51fa\u73b0\u4f4d\u7f6e Ctrl(Command)+R \u5728\u5f53\u524d\u7a97\u53e3\u66ff\u6362\u6587\u672c Ctrl(Command)+Shift+R \u5728\u6307\u5b9a\u7a97\u53e3\u66ff\u6362\u6587\u672c Ctrl(Command)+N \u67e5\u627e\u7c7b Ctrl(Command)+Shift+N \u67e5\u627e\u6587\u4ef6 Ctrl(Command)+Shift+Alt(Option)+N \u67e5\u627e\u9879\u76ee\u4e2d\u7684\u65b9\u6cd5\u6216\u53d8\u91cf Ctrl(Command)+B \u67e5\u627e\u53d8\u91cf\u7684\u6765\u6e90 Ctrl(Command)+Alt(Option)+B \u5feb\u901f\u6253\u5f00\u5149\u6807\u5904\u7684\u7c7b\u6216\u65b9\u6cd5 Ctrl(Command)+Shift+B \u8df3\u8f6c\u5230\u7c7b\u6216\u65b9\u6cd5\u5b9e\u73b0\u5904 Ctrl(Command)+E \u6700\u8fd1\u6253\u5f00\u7684\u6587\u4ef6 Alt(Option)+F3 \u5feb\u901f\u67e5\u627e\uff0c\u6548\u679c\u548cCtrl(Command)+F\u76f8\u540c F4 \u8df3\u8f6c\u81f3\u5b9a\u4e49\u53d8\u91cf\u7684\u4f4d\u7f6e Alt(Option)+F7 \u67e5\u8be2\u5f53\u524d\u5143\u7d20\u5728\u5de5\u7a0b\u4e2d\u7684\u5f15\u7528 Ctrl(Command)+F7 \u67e5\u8be2\u5f53\u524d\u5143\u7d20\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u5f15\u7528\uff0c\u7136\u540e\u6309 F3 \u53ef\u4ee5\u9009\u62e9 Ctrl(Command)+Alt(Option)+F7 \u9009\u4e2d\u67e5\u8be2\u5f53\u524d\u5143\u7d20\u5728\u5de5\u7a0b\u4e2d\u7684\u5f15\u7528 Ctrl(Command)+Shift+F7 \u9ad8\u4eae\u663e\u793a\u5339\u914d\u7684\u5b57\u7b26\uff0c\u6309 Esc \u9ad8\u4eae\u6d88\u5931 Ctrl(Command)+Alt(Option)+F7 \u67e5\u627e\u67d0\u4e2a\u65b9\u6cd5\u7684\u6240\u6709\u8c03\u7528\u5730\u65b9 Ctrl(Command)+Shift+Alt(Option)+N \u67e5\u627e\u7c7b\u4e2d\u7684\u65b9\u6cd5\u6216\u53d8\u91cf Ctrl(Command)+Shift+O \u5f39\u51fa\u663e\u793a\u67e5\u627e\u5185\u5bb9 Ctrl(Command)+Alt(Option)+Up/Down \u5feb\u901f\u8df3\u8f6c\u641c\u7d22\u7ed3\u679c Ctrl(Command)+Shift+S \u9ad8\u7ea7\u641c\u7d22\u3001\u641c\u7d22\u7ed3\u6784","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#_4","title":"\u91cd\u6784","text":"\u6309\u952e \u8bf4\u660e F5 \u590d\u5236 F6 \u79fb\u52a8 Alt(Option)+Delete \u5b89\u5168\u5220\u9664 Ctrl(Command)+U \u8f6c\u5230\u7236\u7c7b Ctrl(Command)+O \u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5 Ctrl(Command)+I \u5b9e\u73b0\u65b9\u6cd5 Ctrl(Command)+Alt(Option)+N \u5185\u8054 Ctrl(Command)+Alt(Option)+Shift+T \u5f39\u51fa\u91cd\u6784\u83dc\u5355 Shift+F6 \u91cd\u6784-\u91cd\u547d\u540d Ctrl(Command)+Alt(Option)+M \u63d0\u53d6\u4ee3\u7801\u7ec4\u6210\u65b9\u6cd5 Ctrl(Command)+Alt(Option)+C \u5c06\u53d8\u91cf\u66f4\u6539\u4e3a\u5e38\u91cf Ctrl(Command)+Alt(Option)+V \u5b9a\u4e49\u53d8\u91cf\u5f15\u7528\u5f53\u524d\u5bf9\u8c61\u6216\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u503c Ctrl(Command)+Alt(Option)+F \u5c06\u5c40\u90e8\u53d8\u91cf\u66f4\u6539\u4e3a\u7c7b\u7684\u6210\u5458\u53d8\u91cf Ctrl(Command)+Alt(Option)+P \u5c06\u53d8\u91cf\u66f4\u6539\u4e3a\u65b9\u6cd5\u7684\u53c2\u6570","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-shortcut-keys/#_5","title":"\u8c03\u8bd5","text":"\u6309\u952e \u8bf4\u660e F8 \u8df3\u5230\u4e0b\u4e00\u6b65 Shift+F8 \u8df3\u51fa\u51fd\u6570\u3001\u8df3\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9 Alt(Option)+Shift+F8 \u5f3a\u5236\u8df3\u51fa\u51fd\u6570 F7 \u8fdb\u5165\u4ee3\u7801 Shift+F7 \u667a\u80fd\u8fdb\u5165\u4ee3\u7801 Alt(Option)+Shift+F7 \u5f3a\u5236\u8fdb\u5165\u4ee3\u7801 Alt(Option)+F9 \u8fd0\u884c\u81f3\u5149\u6807\u5904 Ctrl(Command)+Alt(Option)+F9 \u5f3a\u5236\u8fd0\u884c\u81f3\u5149\u6807\u5904 Ctrl(Command)+F2 \u505c\u6b62\u8fd0\u884c Alt(Option)+F8 \u8ba1\u7b97\u53d8\u91cf\u503c","tags":["\u5feb\u6377\u952e","tools","IDE"]},{"location":"android/base-tools/as-compdb/","title":"Compdb","text":"<p>Soong can generate compdb files. This is intended for use with editing tools such as YouCompleteMe and other libclang based completers.</p> <p>compdb file generation is enabled via environment variable:</p> <pre><code>$ export SOONG_GEN_COMPDB=1\n$ export SOONG_GEN_COMPDB_DEBUG=1\n</code></pre> <p>One can make soong generate a symlink to the compdb file using an environment variable:</p> <pre><code>$ export SOONG_LINK_COMPDB_TO=$ANDROID_HOST_OUT\n</code></pre> <p>You can then trigger an empty build:</p> <pre><code>$ make nothing\n</code></pre> <p>Note that if you build using mm or other limited makes with these environment variables set the compdb will only include files in included modules.</p> <p>vscode\u57fa\u4e8eclangd\u5b9e\u73b0Android/Linux\u4ee3\u7801\u8df3\u8f6c</p>","tags":["Android","ide","vscode"]},{"location":"android/base-tools/c-ifdef/","title":"c\u4ee3\u7801\u4e2d ifdef \u591a\u6761\u4ef6\u5224\u65ad","text":"<p>\u5728c\u4e2d\u6211\u4eec\u5224\u65ad LINUX \u662f\u5426\u5b9a\u4e49\uff0c\u7528 #ifdef \u5982\u4e0b\uff1a</p> <pre><code>#ifdef LINUX  \n...\n#endif\n</code></pre> <p>\u4f46\u5982\u679c\u591a\u6761\u4ef6\u5224\u65ad\uff0c\u8be5\u600e\u4e48\u7528\uff1f</p> <pre><code>#ifdef LINUX | ANDROID\n...\n#endif \n</code></pre> <p>\u5f88\u663e\u7136\u8fd9\u6837\u7528\u662f\u4e0d\u5bf9\u5728\uff0c\u6b63\u786e\u7684\u7528\u6cd5\u662f\uff1a</p> <pre><code>#if defined(LINUX) || defined(ANDROID)\n...\n#endif \n</code></pre>","tags":["Android","Linux","ifdef"]},{"location":"android/base-tools/repo/","title":"repo\u5e38\u7528\u64cd\u4f5c","text":"","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo","title":"repo\u7b80\u4ecb","text":"<p>repo\u662fGoogle\u5f00\u53d1\u7684\u7528\u4e8e\u7ba1\u7406Android\u7248\u672c\u5e93\u7684\u4e00\u4e2a\u5de5\u5177\uff0crepo\u662f\u4f7f\u7528Python\u5bf9git\u8fdb\u884c\u4e86\u4e00\u5b9a\u7684\u5c01\u88c5\uff0c\u5e76\u4e0d\u662f\u7528\u4e8e\u53d6\u4ee3git\uff0c\u5b83\u7b80\u5316\u4e86\u5bf9\u591a\u4e2aGit\u7248\u672c\u5e93\u7684\u7ba1\u7406\u3002\u7528repo\u7ba1\u7406\u7684\u7248\u672c\u5e93\u90fd\u9700\u8981\u4f7f\u7528git\u547d\u4ee4\u6765\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u5728\u6211\u4eec\u521d\u59cb\u5316 Repo \u4ed3\u5e93\u4e4b\u540e\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a. repo \u7684\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u6709\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>$ tree .repo -L 1\n.repo\n\u251c\u2500\u2500 manifests\n\u251c\u2500\u2500 manifests.git\n\u251c\u2500\u2500 manifest.xml\n\u251c\u2500\u2500 repo\n\u2514\u2500\u2500 TRACE_FILE\n</code></pre> <p>\u5f53\u6267\u884c**repo init**\u00a0\u547d\u4ee4\u6765\u521d\u59cb\u5316\u4ed3\u5e93\uff0c\u8be5\u811a\u672c\u4f1a\u5230\u6211\u4eec\u6307\u5b9a\u7684\u5730\u65b9\u53bb\u4e0b\u8f7d manifest \u4ed3\u5e93\uff0c\u4ee5\u53ca repo \u547d\u4ee4\u4e3b\u4f53\u90e8\u5206\u3002\u4e0b\u8f7d\u597d\u4e4b\u540e\u5c31\u653e\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u9762\u7684**.repo**\u76ee\u5f55\u4e0b\uff0c\u5176\u4e2d\uff1a</p> \u6587\u4ef6\u5939 \u7528\u9014 manifests \u6e05\u5355\u6587\u4ef6\u7684\u4ed3\u5e93 manifests.git \u6e05\u5355\u6587\u4ef6\u7684 Git \u88f8\u4ed3\u5e93\uff0c\u4e0d\u5e26\u5de5\u4f5c\u533a manifest.xml \u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5\u6587\u4ef6\uff0c\u6307\u5411\u4f60\u7684\u7528\u4e8e\u521d\u59cb\u5316\u5de5\u4f5c\u533a\u7684\u6e05\u5355\u6587\u4ef6\uff0c\u5373manifests/default.xml project.list \u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u91cc\u9762\u5305\u542b\u6240\u6709\u9879\u76ee\u540d\u5b57\u7684\u5217\u8868 projects \u8be5\u6587\u4ef6\u5939\u4e0b\u5305\u542b\u6240\u6709 git project \u7684\u88f8\u4ed3\u5e93\uff0c\u6587\u4ef6\u5939\u7684\u5c42\u6b21\u7ed3\u6784\u8ddf\u5de5\u4f5c\u533a\u7684\u5e03\u5c40\u4e00\u6837 repo \u8fd9\u662f repo \u547d\u4ee4\u7684\u4e3b\u4f53\uff0c\u5176\u4e2d\u4e5f\u5305\u542b\u6700\u65b0\u7684 repo \u547d\u4ee4\uff0c\u63a8\u8350\u4f7f\u7528\u8fd9\u91cc\u9762\u7684 repo \u547d\u4ee4","tags":["Android","repo"]},{"location":"android/base-tools/repo/#manifest","title":"manifest \u5143\u7d20","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;manifest&gt;\n\n    &lt;remote name=\"aosp\"\n            fetch=\"https://mirrors.tuna.tsinghua.edu.cn/git/AOSP\"\n            review=\"https://android-review.googlesource.com/\"/&gt;\n    &lt;default revision=\"main\"\n             remote=\"aosp\"\n             sync-j=\"4\"/&gt;\n\n    ...\n\n    &lt;project path=\"build/release\" name=\"platform/build/release\" groups=\"pdk,tradefed\"/&gt;\n    &lt;project path=\"build/soong\" name=\"platform/build/soong\" groups=\"pdk,tradefed\"&gt;\n        &lt;linkfile src=\"root.bp\" dest=\"Android.bp\"/&gt;\n        &lt;linkfile src=\"bootstrap.bash\" dest=\"bootstrap.bash\"/&gt;\n    &lt;/project&gt;\n\n    &lt;remove-project name=\"platform/build/release\"/&gt;    \n    &lt;include name=\"rtfsc-override.xml\"/&gt;\n\n&lt;/manifest&gt;\n</code></pre> <p>\u6e05\u5355\u6587\u4ef6\u662fxml\u7684\u683c\u5f0f\uff0c\u4e00\u4e2a\u6e05\u5355\u5e93\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6e05\u5355\u6587\u4ef6\u548c\u591a\u4e2a\u5206\u652f\uff0c\u6bcf\u4e2a\u6e05\u5355\u6587\u4ef6\u548c\u5206\u652f\u90fd\u6709\u5bf9\u5e94\u7684\u7248\u672c\u3002</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#remote","title":"remote \u5143\u7d20","text":"<p>\u53ef\u4ee5\u5b58\u5728\u4e00\u4e2a\u6216\u8005\u591a\u4e2a remote \u5143\u7d20\uff0cremote \u5143\u7d20\u6307\u5b9a\u4e86\u4f7f\u7528 repo upload \u547d\u4ee4\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u6539\u53d8\u63d0\u4ea4\u5230\u54ea\u4e2a\u670d\u52a1\u5668\u3002</p> <ul> <li> <p>name: \u8fdc\u7a0bgit\u670d\u52a1\u5668\u7684\u540d\u5b57\uff0c\u76f4\u63a5\u7528\u4e8egit fetch, git remote \u7b49\u64cd\u4f5c</p> </li> <li> <p>alias: \u8fdc\u7a0bgit\u670d\u52a1\u5668\u7684\u522b\u540d\uff0c\u5982\u679c\u6307\u5b9a\u4e86\uff0c\u5219\u4f1a\u8986\u76d6name\u7684\u8bbe\u5b9a\u3002\u5728\u4e00\u4e2amanifest\uff08\u53ef\u4ee5\u7406\u89e3\u4e3adefault.xml\uff09\u4e2d\uff0c name\u4e0d\u80fd\u91cd\u540d\uff0c\u4f46alias\u53ef\u4ee5\u91cd\u540d\u3002</p> </li> <li> <p>fetch: \u6240\u6709projects\u7684git URL \u524d\u7f00</p> </li> <li> <p>review: \u6307\u5b9aGerrit\u7684\u670d\u52a1\u5668\u540d\uff0c\u7528\u4e8erepo upload\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219repo upload\u6ca1\u6709\u6548\u679c\u3002</p> </li> </ul>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#default","title":"default \u5143\u7d20","text":"<p>default \u5143\u7d20\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u90fd\u662f\u4e00\u4e9b\u7f3a\u7701\u7684\u5c5e\u6027\u3002\u5373\u5982\u679c project \u5143\u7d20\u4e2d\u4e0d\u5b58\u5728\u8be5\u5c5e\u6027\uff0c\u5219\u4f7f\u7528\u5728 default \u5143\u7d20\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u3002</p> <ul> <li> <p>revision\uff1aGit \u5206\u652f\u7684\u540d\u5b57\u3002\u5982\u679c project \u5143\u7d20\u6ca1\u6709\u6307\u5b9a revision \u5c5e\u6027\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528 default \u5143\u7d20\u7684\u8be5\u5c5e\u6027\u3002revision \u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a git branch\uff0cgit tag\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a commit id\u3002</p> </li> <li> <p>sync-j\uff1async \u7684\u65f6\u5019\uff0c\u5e76\u884c\u5de5\u4f5c\u7684\u4efb\u52a1\u6570\u3002</p> </li> <li> <p>sync-c\uff1a\u5982\u679c\u8bbe\u7f6e\u4e3a true\uff0c\u5219\u5728\u540c\u6b65\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5c06\u53ea\u4f1a\u540c\u6b65 project \u5143\u7d20\u4e2d revision \u5c5e\u6027\u4e2d\u6307\u5b9a\u7684\u5206\u652f\u3002\u5982\u679c project \u5143\u7d20\u6ca1\u6709\u6307\u5b9a revision \u5c5e\u6027\uff0c\u5219\u4f7f\u7528 default \u5143\u7d20\u7684 revision \u5c5e\u6027\u3002</p> </li> <li> <p>sync_s: \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u4f1a\u540c\u6b65git\u7684\u5b50\u9879\u76ee</p> </li> <li> <p>remote: \u4e4b\u524d\u5b9a\u4e49\u7684\u67d0\u4e00\u4e2aremote\u5143\u7d20\u4e2dname\u5c5e\u6027\u503c\uff0c\u7528\u4e8e\u6307\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u8fdc\u7a0bgit\u670d\u52a1\u5668\u3002</p> </li> </ul>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#project","title":"project \u5143\u7d20","text":"<p>xml \u6587\u4ef6\u4e2d\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a project \u5143\u7d20\u3002 \u6bcf\u4e00\u4e2a project \u5143\u7d20\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u9700\u8981 pull \u5230\u672c\u5730\u7684 git \u4ed3\u5e93\u3002 project \u5143\u7d20\u4e2d\u6709\u5f88\u591a\u53ef\u4ee5\u4f7f\u7528\u7684\u5c5e\u6027\uff0c\u5728\u6b64\u53ea\u4ecb\u7ecd\u51e0\u4e2a\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684\u5c5e\u6027\u3002</p> <ul> <li> <p>name\uff1a \u552f\u4e00\u7684\u540d\u5b57\u6807\u8bc6project\uff0c\u540c\u65f6\u4e5f\u7528\u4e8e\u751f\u6210git\u4ed3\u5e93\u7684URL\u3002\u683c\u5f0f\u5982\u4e0b\uff1a</p> </li> <li> <p>path\uff1a\u53ef\u9009\u7684\u8def\u5f84,\u8be5 \u6307\u5b9agit clone\u51fa\u6765\u7684\u4ee3\u7801\u5b58\u653e\u5728\u672c\u5730\u7684\u5b50\u76ee\u5f55\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u4ee5name\u4f5c\u4e3a\u5b50\u76ee\u5f55\u540d\u3002</p> </li> <li> <p>remote: \u6307\u5b9a\u4e4b\u524d\u5728\u67d0\u4e2aremote\u5143\u7d20\u4e2d\u7684name\u3002</p> </li> <li> <p>revision\uff1a\u6307\u5b9a\u9700\u8981\u83b7\u53d6\u7684git\u63d0\u4ea4\u70b9\uff0c\u53ef\u4ee5\u662fmaster, refs/heads/master, tag\u6216\u8005SHA-1\u503c\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u7684\u8bdd\uff0c\u9ed8\u8ba4\u4e0b\u8f7d\u5f53\u524dproject\uff0c\u5f53\u524d\u5206\u652f\u4e0a\u7684\u6700\u65b0\u4ee3\u7801\u3002</p> </li> <li> <p>sync_c: \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u53ea\u540c\u6b65\u6307\u5b9a\u7684\u5206\u652f(revision \u5c5e\u6027\u6307\u5b9a)\uff0c\u800c\u4e0d\u662f\u6240\u6709\u7684ref\u5185\u5bb9\u3002</p> </li> <li> <p>sync_s: \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u4f1a\u540c\u6b65git\u7684\u5b50\u9879\u76ee\u3002</p> </li> <li> <p>groups: \u5217\u51faproject\u6240\u5c5e\u7684\u7ec4\uff0c\u4ee5\u7a7a\u683c\u6216\u8005\u9017\u53f7\u5206\u9694\u591a\u4e2a\u7ec4\u540d\u3002</p> </li> <li> <p>upstream: \u5728\u54ea\u4e2agit\u5206\u652f\u53ef\u4ee5\u627e\u5230\u4e00\u4e2aSHA1\u3002\u7528\u4e8e\u540c\u6b65revision\u9501\u5b9a\u7684manifest(-c \u6a21\u5f0f)\u3002\u8be5\u6a21\u5f0f\u53ef\u4ee5\u907f\u514d\u540c\u6b65\u6574\u4e2aref\u7a7a\u95f4\u3002</p> </li> <li> <p>annotation: \u53ef\u4ee5\u6709\u591a\u4e2aannotation\uff0c\u683c\u5f0f\u4e3aname-value pair\u3002\u5728repo forall \u547d\u4ee4\u4e2d\u8fd9\u4e9b\u503c\u4f1a\u5bfc\u5165\u5230\u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> </li> </ul>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#remove-project","title":"remove-project","text":"<p>\u4ece\u5185\u90e8\u7684manifest\u8868\u4e2d\u5220\u9664\u6307\u5b9a\u7684project\u3002\u7ecf\u5e38\u7528\u4e8e\u672c\u5730\u7684manifest\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u66ff\u6362\u4e00\u4e2aproject\u7684\u5b9a\u4e49</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#include","title":"include\u5143\u7d20","text":"<p>\u901a\u8fc7name\u5c5e\u6027\u53ef\u4ee5\u5f15\u5165\u53e6\u5916\u4e00\u4e2amanifest\u6587\u4ef6(\u8def\u5f84\u76f8\u5bf9\u4e0emanifest repository\u2019s root)\u3002</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_1","title":"\u5e38\u7528\u547d\u4ee4","text":"","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-init","title":"repo init","text":"<pre><code>repo init -u manifest_git_path -m manifest_file_name -b branch_name --repo-url=repo_url --no-repo-verify\n</code></pre> <p>\u9009\u9879\uff1a</p> <ul> <li> <p>-u\uff1a\u6307\u5b9amanifest\u9879\u76ee\u6e05\u5355\u5e93\u5730\u5740\u3002</p> </li> <li> <p>-m\uff1a\u6307\u5b9amanifests\u5e93\u4e2d\u7684\u6e05\u5355\u6587\u4ef6\uff0c\u9ed8\u8ba4\u4e3amaniftests/default.xml\u3002</p> </li> <li> <p>-b\uff1a\u6307\u5b9amanifest\u4ed3\u7684\u5206\u652f\uff0c\u9ed8\u8ba4\u4e3amaster\u5206\u652f\u3002</p> </li> </ul> <p>\u4e0d\u5e38\u7528\u53c2\u6570\uff1a</p> <ul> <li> <p>\u2013-repo-url\uff1a\u6307\u5b9a\u8fdc\u7a0brepo\u5e93\u5730\u5740\uff0c\u5f53\u5f15\u5bfc\u811a\u672c\u4e2d\u7684\u5730\u5740\u4e0d\u53ef\u8bbf\u95ee\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u53c2\u6570\u6307\u5b9a\u53ef\u8bbf\u95ee\u7684repo\u5730\u5740\u3002</p> </li> <li> <p>\u2013-repo-branch\uff1a\u540cmanifest\u8fd9\u4e2agit\u5e93\u4e00\u6837\uff0crepo\u8fd9\u4e2agit\u5e93\u4e5f\u662f\u6709\u7248\u672c\u5dee\u5f02\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u53c2\u6570\u6765\u6307\u5b9a\u4e0b\u8f7drepo\u8fd9\u4e2a\u8fdc\u7a0bgit\u5e93\u7684\u7279\u5b9a\u5206\u652f\u3002</p> </li> <li> <p>\u2013-no-repo-verify\uff1a\u5728\u4e0b\u8f7drepo\u5e93\u65f6\uff0c\u4f1a\u5bf9repo\u7684\u6e90\u7801\u8fdb\u884c\u68c0\u67e5\u3002\u901a\u8fc7\u2013repo-url\u6307\u5b9a\u7b2c\u4e09\u65b9repo\u5e93\u65f6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u6240\u4ee5\u53ef\u4ee5\u914d\u5957\u4f7f\u7528\u8be5\u53c2\u6570\uff0c\u5f3a\u5236\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002</p> </li> <li> <p>--depth {number}\uff1a\u9650\u5236\u4e0b\u8f7d\u8bb0\u5f55\u6b21\u6570\uff0c\u52a0\u901f\u4ee3\u7801\u4e0b\u8f7d\u3002</p> </li> </ul>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-sync","title":"repo sync","text":"<pre><code>repo sync [project_name]\n</code></pre> <p>\u6267\u884c\u4e86repo init \u547d\u4ee4\u540e\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c repo sync \u547d\u4ee4\u540c\u6b65\u4ee3\u7801\u3002</p> <p>\u5e38\u7528\u53c2\u6570\uff1a - -j\uff1a\u5f00\u542f\u591a\u7ebf\u7a0b\u540c\u6b65\u64cd\u4f5c\uff0c\u8fd9\u4f1a\u52a0\u5febsync\u547d\u4ee4\u7684\u6267\u884c\u901f\u5ea6\u3002\u8be5\u53c2\u6570\u5728default.xml\u4e2d\u6709\u9ed8\u8ba4\u8bbe\u7f6e\u3002</p> <ul> <li>-c, \u2013current-branch\uff1a\u53ea\u540c\u6b65\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0csync\u4f1a\u540c\u6b65\u6240\u6709\u7684\u8fdc\u7a0b\u5206\u652f\u3002</li> </ul> <p>\u4e0d\u5e38\u7528\u53c2\u6570\uff1a</p> <ul> <li>-d, \u2013detach\uff1a\u8131\u79bb\u5f53\u524d\u7684\u672c\u5730\u5206\u652f\uff0c\u5207\u6362\u5230manifest.xml\u4e2d\u8bbe\u5b9a\u7684\u5206\u652f\u3002</li> <li>-f, \u2013force-broken\uff1a\u5f53\u6709git\u5e93sync\u5931\u8d25\u4e86\uff0c\u4e0d\u4e2d\u65ad\u6574\u4e2a\u540c\u6b65\u64cd\u4f5c\uff0c\u7ee7\u7eed\u540c\u6b65\u5176\u4ed6\u7684git\u5e93\u3002</li> <li>\u2013no-clone-bundle\uff1a\u5728\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u4e3a\u4e86\u505a\u5230\u5c3d\u5feb\u7684\u54cd\u5e94\u901f\u5ea6\uff0c\u4f1a\u7528\u5230\u5185\u5bb9\u5206\u53d1\u7f51\u7edc(CDN, Content Delivery Network)\u3002</li> <li>-q\uff1a\u9047\u5230\u9519\u8bef\u53ea\u663e\u793a\uff0c\u4e0d\u9000\u51fa</li> </ul> <p>\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>repo sync -c -q -j16\n</code></pre> <p>\u53ea\u540c\u6b65frameworks/base\u5e93\u3002</p> <pre><code>repo sync platform/frameworks/base -c -j16\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-start","title":"repo start","text":"<pre><code>repo start &lt;newbranchname&gt; [--all|&lt;project&gt;...]\n</code></pre> <p>\u521b\u5efa\u5e76\u5207\u6362\u5206\u652f\u3002\u521a\u514b\u9686\u4e0b\u6765\u7684\u4ee3\u7801\u662f\u6ca1\u6709\u5206\u652f\u7684\uff0crepo start\u5b9e\u9645\u662f\u5bf9git checkout -b\u547d\u4ee4\u7684\u5c01\u88c5\u3002 \u4e3a\u6307\u5b9a\u7684\u9879\u76ee\u6216\u6240\u6709\u7684\u9879\u76ee\uff08\u82e5\u4f7f\u7528-all\uff09\uff0c\u4ee5\u6e05\u5355\u6587\u4ef6\u4e2d\u4e3a\u8bbe\u5b9a\u7684\u5206\u652f\uff0c\u521b\u5efa\u7279\u5b9a\u7684\u5206\u652f\u3002 \u8fd9\u6761\u6307\u4ee4\u4e0egit checkout -b \u8fd8\u662f\u6709\u5f88\u5927\u533a\u522b\u7684\u3002 - git checkout -b \u662f\u5728\u5f53\u524d\u6240\u5728\u7684\u5206\u652f\u7684\u57fa\u7840\u4e0a\u521b\u5efa\u7279\u6027\u5206\u652f\u3002 - \u800crepo start \u662f\u5728\u6e05\u5355\u6587\u4ef6\u8bbe\u5b9a\u7684\u5206\u652f\u7684\u57fa\u7840\u4e0a\u521b\u5efa\u7279\u6027\u5206\u652f\u3002</p> <pre><code># \u6574\u4e2aandroid\u90fd\u5728 android-14.0.0_r30 \u7684\u57fa\u7840\u4e0a\u521b\u5efa\u5206\u652f dev\u3002\nrepo start dev --all\n\n# \u9488\u5bf9 platform/build\u3001platform/bionic \u4ed3\uff0c\u5728 android-14.0.0_r30 \u7684\u57fa\u7840\u4e0a\u521b\u5efa\u5206\u652f dev\u3002\nrepo start dev platform/build platform/bionic\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-checkout","title":"repo checkout","text":"<pre><code>repo checkout &lt;branchname&gt; [&lt;project&gt;...]\n</code></pre> <p>\u5207\u6362\u5206\u652f\u3002 \u5b9e\u9645\u4e0a\u662f\u5bf9git checkout\u547d\u4ee4\u7684\u5c01\u88c5\uff0c\u4f46\u4e0d\u80fd\u5e26-b\u53c2\u6570\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u6b64\u547d\u4ee4\u6765\u521b\u5efa\u7279\u6027\u5206\u652f\u3002</p> <pre><code># \u6574\u4e2aandroid\u90fd\u5207\u6362\u5230\u5206\u652f dev\u3002\nrepo checkout dev\n# \u9488\u5bf9 platform/build platform/bionic \u4ed3\u5207\u6362\u5230\u5206\u652f dev\u3002\nrepo checkout dev platform/build platform/bionic\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-branches","title":"repo branches","text":"<pre><code>repo branches [&lt;project&gt;...]\n</code></pre> <p>\u67e5\u770b\u5206\u652f\u3002</p> <pre><code>repo branches\nrepo branches platform/build platform/bionic\n</code></pre> <p>\u67e5\u770b\u53ef\u5207\u6362\u7684\u5206\u652f\uff1a</p> <pre><code>cd .repo/manifests\ngit branch -a | cut -d / -f 3\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-diff","title":"repo diff","text":"<pre><code>repo diff [&lt;project&gt;...]\n</code></pre> <p>\u67e5\u770b\u5de5\u4f5c\u533a\u6587\u4ef6\u5dee\u5f02\u3002\u5b9e\u9645\u662f\u5bf9git diff\u547d\u4ee4\u7684\u5c01\u88c5\uff0c\u7528\u4e8e\u5206\u522b\u663e\u793a\u5404\u4e2a\u9879\u76ee\u5de5\u4f5c\u533a\u4e0b\u7684\u6587\u4ef6\u5dee\u5f02\u3002\u5728 commit \u548c\u5de5\u4f5c\u76ee\u5f55\u4e4b\u95f4\u4f7f\u7528 git diff \u663e\u793a\u660e\u663e\u5dee\u5f02\u7684\u66f4\u6539\u3002</p> <pre><code>#\u67e5\u770b\u6240\u6709\u9879\u76ee\nrepo diff\n\n#\u53ea\u67e5\u6307\u5b9a\u7684\u4ed3\nrepo diff platform/build platform/bionic\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-status","title":"repo status","text":"<pre><code>repo status [&lt;project&gt;...]\n</code></pre> <p>\u793a\u4f8b\uff1a</p> <pre><code>#\u67e5\u770b\u6240\u6709\u9879\u76ee\u7684\u4fee\u6539\u72b6\u6001\nrepo status\n\n#\u53ea\u67e5\u6307\u5b9a\u7684\u4ed3\u7684\u4fee\u6539\u72b6\u6001\nrepo status platform/build platform/bionic\n</code></pre> <p>\u6bcf\u4e2a\u5c0f\u8282\u7684\u9996\u884c\u663e\u793a\u9879\u76ee\u540d\u79f0\uff0c\u4ee5\u53ca\u6240\u5728\u7684\u5206\u652f\u7684\u540d\u79f0\u3002 \u6bcf\u4e2a\u5b57\u6bcd\u8868\u793a\u6682\u5b58\u533a\u7684\u6587\u4ef6\u4fee\u6539\u72b6\u6001\u3002</p> \u5b57\u6bcd \u542b\u4e49 \u63cf\u8ff0 - \u65e0\u53d8\u5316 \u6ca1\u6709\u4fee\u6539\uff0c\u5728 HEAD \u548c\u5728\u7d22\u5f15\u4e2d\u662f\u4e00\u6837\u7684 A \u6dfb\u52a0 \u4e0d\u5728HEAD\u4e2d\uff0c\u5728\u6682\u5b58\u533a\u4e2d M \u4fee\u6539 \u5728HEAD\u4e2d\uff0c \u5728\u6682\u5b58\u533a\u4e2d\uff0c\u5185\u5bb9\u4e0d\u540c D \u5220\u9664 \u5728HEAD\u4e2d\uff0c\u4e0d\u5728\u6682\u5b58\u533a R \u91cd\u547d\u540d \u4e0d\u5728HEAD\u4e2d\uff0c\u5728\u6682\u5b58\u533a\u4e2d C \u62f7\u8d1d \u4e0d\u5728HEAD\u4e2d\uff0c\u5728\u6682\u5b58\u533a\uff0c\u4ece\u5176\u4ed6\u6587\u4ef6\u62f7\u8d1d T \u6587\u4ef6\u72b6\u6001\u6539\u53d8 \u5728HEAD\u4e2d\uff0c\u5728\u6682\u5b58\u533a\uff0c\u5185\u5bb9\u76f8\u540c U \u672a\u5408\u5e76 \u9700\u8981\u51b2\u7a81\u89e3\u51b3 <p>\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u8868\u793a\u5de5\u4f5c\u533a\u6587\u4ef6\u7684\u66f4\u6539\u72b6\u6001\u3002</p> \u5b57\u6bcd \u542b\u4e49 \u63cf\u8ff0 - \u65b0/\u672a\u77e5 \u4e0d\u5728\u6682\u5b58\u533a\uff0c\u5728\u5de5\u4f5c\u533a m \u4fee\u6539 \u5728\u6682\u5b58\u533a\uff0c\u5728\u5de5\u4f5c\u533a\uff0c\u88ab\u4fee\u6539 d \u5220\u9664 \u5728\u6682\u5b58\u533a\uff0c\u4e0d\u5728\u5de5\u4f5c\u533a <p>\u4e24\u4e2a\u8868\u793a\u72b6\u6001\u7684\u5b57\u6bcd\u540e\u9762\uff0c\u663e\u793a\u6587\u4ef6\u540d\u4fe1\u606f\u3002\u5982\u679c\u6709\u6587\u4ef6\u91cd\u540d\u8fd8\u4f1a\u663e\u793a\u6539\u53d8\u524d\u540e\u7684\u6587\u4ef6\u540d\u53ca\u6587\u4ef6\u7684\u76f8\u4f3c\u5ea6\u3002</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-forall","title":"repo forall","text":"<pre><code>repo forall [&lt;project&gt;...] -c &lt;command&gt;\n</code></pre> <p>\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u5728\u6240\u6709\u6307\u5b9a\u7684\u9879\u76ee\u4e2d\u6267\u884c\u540c\u4e00\u4e2ashell\u6307\u4ee4\u3002</p> <p>\u9009\u9879\uff1a - -c \u540e\u9762\u6240\u5e26\u7684\u53c2\u6570\u662fshell\u6307\u4ee4\uff0c\u5373\u6267\u884c\u547d\u4ee4\u548c\u53c2\u6570\u3002\u547d\u4ee4\u662f\u901a\u8fc7 /bin/sh \u8bc4\u4f30\u7684\u5e76\u4e14\u540e\u9762\u7684\u4efb\u4f55\u53c2\u6570\u5c31\u5982 shell \u4f4d\u7f6e\u7684\u53c2\u6570\u901a\u8fc7\u3002 - -p \u5728shell\u6307\u4ee4\u8f93\u51fa\u4e4b\u524d\u5217\u51fa\u9879\u76ee\u540d\u79f0\uff0c\u5373\u5728\u6307\u5b9a\u547d\u4ee4\u7684\u8f93\u51fa\u524d\u663e\u793a\u9879\u76ee\u6807\u9898\u3002\u8fd9\u662f\u901a\u8fc7\u7ed1\u5b9a\u7ba1\u9053\u5230\u547d\u4ee4\u7684stdin\uff0cstdout\uff0c\u548c sterr \u6d41\uff0c\u5e76\u4e14\u7528\u7ba1\u9053\u8f93\u9001\u6240\u6709\u8f93\u51fa\u91cf\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u6d41\uff0c\u663e\u793a\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u9875\u9762\u8c03\u5ea6\u4f1a\u8bdd\u4e2d\u3002 - -v \u5217\u51fa\u6267\u884cshell\u6307\u4ee4\u8f93\u51fa\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u5373\u663e\u793a\u547d\u4ee4\u5199\u5230 sterr \u7684\u4fe1\u606f\u3002</p> <p>\u9644\u52a0\u73af\u5883\u53d8\u91cf\uff1a - REPO_PROJECT\uff1a \u6307\u5b9a\u9879\u76ee\u7684\u540d\u79f0 - REPO_PATH\uff1a \u6307\u5b9a\u9879\u76ee\u5728\u5de5\u4f5c\u533a\u7684\u76f8\u5bf9\u8def\u5f84 - REPO_REMOTE\uff1a \u6307\u5b9a\u9879\u76ee\u8fdc\u7a0b\u4ed3\u5e93\u7684\u540d\u79f0 - REPO_LREV\uff1a \u6307\u5b9a\u9879\u76ee\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u670d\u52a1\u5668\u4ed3\u5e93\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c - REPO_RREV\uff1a \u6307\u5b9a\u9879\u76ee\u5728\u514b\u9686\u65f6\u7684\u6307\u5b9a\u5206\u652f\uff0cmanifest\u91cc\u7684revision\u5c5e\u6027</p> <p>\u5982\u679c-c\u540e\u9762\u6240\u5e26\u7684shell\u6307\u4ee4\u4e2d\u6709\u4e0a\u8ff0\u73af\u5883\u53d8\u91cf\uff0c\u5219\u9700\u8981\u7528\u5355\u5f15\u53f7\u628ashell\u6307\u4ee4\u62ec\u8d77\u6765\u3002</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_2","title":"\u6dfb\u52a0\u73af\u5883\u53d8\u91cf","text":"<pre><code>repo forall -c 'echo $REPO_PROJECT'\nrepo forall -c 'echo $REPO_PATH'\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_3","title":"\u5408\u5e76\u591a\u4e2a\u5206\u652f","text":"<pre><code># \u5c06topic\u5206\u652f\u5408\u5e76\u5230master\u5206\u652f\u3002\nrepo forall -p -c git merge topic\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_4","title":"\u6253\u6807\u7b7e","text":"<pre><code>repo forall -c git tag dev-1.6\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_5","title":"\u8bbe\u7f6e\u8fdc\u7a0b\u4ed3\u5e93","text":"<pre><code># \u5f15\u7528\u73af\u5883\u53d8\u91cfREPO_PROJECT\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93\u3002\nrepo forall -c 'git remote add asop ssh://solo@10.0.12.8/$REPO_PROJECT.git'\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_6","title":"\u7279\u6027\u5206\u652f","text":"<pre><code>repo forall -c git branch dev\nrepo forall -c git checkout -b dev\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-upload","title":"repo upload","text":"<pre><code>repo upload [--re --cc] [&lt;project&gt;]...\n</code></pre> <p>repo upload \u76f8\u5f53\u4e8egit push\uff0c\u4f46\u662f\u53c8\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u5b83\u4e0d\u662f\u5c06\u7248\u672c\u5e93\u6539\u52a8\u63a8\u9001\u5230\u4ee3\u7801\u5ba1\u6838\u670d\u52a1\u5668\uff08Gerrit\u8f6f\u4ef6\u67b6\u8bbe\uff09\u7684\u7279\u6b8a\u5f15\u7528\u4e0a\uff0c\u4f7f\u7528SSH\u534f\u8bae\u3002\u4ee3\u7801\u5ba1\u6838\u670d\u52a1\u5668\u4f1a\u5bf9\u63a8\u9001\u7684\u63d0\u4ea4\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff0c\u5c06\u65b0\u7684\u63d0\u4ea4\u663e\u793a\u4e3a\u4e00\u4e2a\u5f85\u5ba1\u6838\u7684\u4fee\u6539\u96c6\uff0c\u5e76\u8fdb\u5165\u4ee3\u7801\u5ba1\u6838\u6d41\u7a0b\uff0c\u53ea\u6709\u5f53\u5ba1\u6838\u901a\u8fc7\u540e\uff0c\u624d\u4f1a\u5408\u5e76\u5230\u5b98\u65b9\u6b63\u5f0f\u7684\u7248\u672c\u5e93\u4e2d\u3002</p> <p>repo upload \u76f8\u5f53\u4e8egit push\uff0c\u4f46\u662f\u53c8\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u5b83\u4e0d\u662f\u5c06\u7248\u672c\u5e93\u6539\u52a8\u63a8\u9001\u5230\u4ee3\u7801\u5ba1\u6838\u670d\u52a1\u5668\uff08Gerrit\u8f6f\u4ef6\u67b6\u8bbe\uff09\u7684\u7279\u6b8a\u5f15\u7528\u4e0a\uff0c\u4f7f\u7528SSH\u534f\u8bae\u3002\u4ee3\u7801\u5ba1\u6838\u670d\u52a1\u5668\u4f1a\u5bf9\u63a8\u9001\u7684\u63d0\u4ea4\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff0c\u5c06\u65b0\u7684\u63d0\u4ea4\u663e\u793a\u4e3a\u4e00\u4e2a\u5f85\u5ba1\u6838\u7684\u4fee\u6539\u96c6\uff0c\u5e76\u8fdb\u5165\u4ee3\u7801\u5ba1\u6838\u6d41\u7a0b\uff0c\u53ea\u6709\u5f53\u5ba1\u6838\u901a\u8fc7\u540e\uff0c\u624d\u4f1a\u5408\u5e76\u5230\u5b98\u65b9\u6b63\u5f0f\u7684\u7248\u672c\u5e93\u4e2d\u3002</p>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-download","title":"repo download","text":"<pre><code>repo download {project change[/patchset]}\n</code></pre> <ul> <li>project\uff1agit\u4ed3</li> <li>change[/patchset]\uff1acommit id</li> </ul>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_7","title":"\u5f00\u53d1\u4e2d\u5e38\u7528\u547d\u4ee4","text":"","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repourl","title":"repo\u6307\u5b9aurl","text":"<ul> <li>google\uff1ahttps://gerrit.googlesource.com/git-repo</li> <li>\u6e05\u534e\u6e90\uff1ahttps://mirrors.tuna.tsinghua.edu.cn/git/git-repo</li> </ul> <p>\u5982\u6307\u5b9a\u6e05\u534e\u6e90\uff1a</p> <pre><code>repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-14.0.0_r30 --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#repo-depth1","title":"repo --depth=1","text":"<p>\u6709\u65f6\u5019\u62c9\u4e00\u5957Android\u4ee3\u7801\u975e\u5e38\u5927\uff0c\u53ef\u4ee5\u52a0\u53c2\u6570 --depth\uff0c\u76f8\u5f53\u4e8e\u53ea\u62c9 git log -1 \u8fd9\u5c42\u4ee3\u7801\uff0c\u8282\u7701\u65f6\u95f4\u7a7a\u95f4\u3002</p> <pre><code>repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-14.0.0_r30 --depth=1\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_8","title":"\u5207\u6362\u5206\u652f","text":"<p>\u5230manifests\u76ee\u5f55\u4e0b\u627e\u5230\u5206\u652f\u540d\u5b57</p> <pre><code>cd .repo/manifests\ngit branch -av\n</code></pre> <p>\u6839\u636e\u5206\u652f\u540d\u5b57\u5207\u6362</p> <pre><code>repo init -b android-13.0.0_r9\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#_9","title":"\u540c\u6b65\u5e76\u6e05\u9664\u672c\u5730\u4fee\u6539","text":"<pre><code>repo forall -c 'git clean -dfx &amp;&amp; git reset --hard' &amp;&amp; repo sync -c -q -j16\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/repo/#depth1log","title":"depth=1\u540e\uff0c\u67e5\u770b\u5168log","text":"<p>\u5e73\u65f6\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u52a0\u5feb\u62c9\u4ee3\u7801\u901f\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a</p> <pre><code>--depth=1\n</code></pre> <p>\u5982\u679c\u9700\u8981\u67e5\u770b\u67d0\u4e2a\u4ed3\u7684\u5168\u90e8 git log \u4fe1\u606f\uff0c\u9700\u8981 unshallow :</p> <pre><code>git fetch --unshallow origin \u5206\u652f\u540d\u5b57\n</code></pre>","tags":["Android","repo"]},{"location":"android/base-tools/ccache/","title":"\u4f7f\u7528ccache\u52a0\u5feb\u7f16\u8bd1\u901f\u5ea6","text":"","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_1","title":"\u80cc\u666f","text":"<p>ccache\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u7f13\u5b58\uff0c\u53ef\u4ee5\u5c06\u7f16\u8bd1\u7684\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\u3002\u8fd9\u6837\u5c3d\u7ba1\u7b2c\u4e00\u6b21\u7f16\u8bd1\u4f1a\u82b1\u8d39\u957f\u4e00\u70b9\u7684\u65f6\u95f4\uff0c\u4e0d\u8fc7\u4e4b\u540e\u518d\u6b21\u7f16\u8bd1\u5c06\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5feb\u3002</p>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_2","title":"\u5b89\u88c5","text":"<pre><code>sudo apt-get install ccache\n</code></pre>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_3","title":"\u4f7f\u7528","text":"<p>\u5b89\u88c5\u4e4b\u540e\u57fa\u672c\u4e0d\u7528\u8fdb\u884c\u4ec0\u4e48\u914d\u7f6e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002\u4f8b\u5982\u4e4b\u524d\u8981\u7f16\u8bd1\u4e00\u4e2atest.c\u6587\u4ef6\u8981\u6267\u884c\u547d\u4ee4\uff1a</p> <pre><code>gcc test.c -o test\n</code></pre> <p>\u6539\u6210</p> <pre><code>ccache gcc test.c -o test\n</code></pre> <p>ccache\u9ed8\u8ba4\u662f\u5c06\u7ed3\u679c\u7f13\u5b58\u4fdd\u5b58\u5230 $HOME/.ccache \u76ee\u5f55\u4e0b\u3002\u5982\u679c\u60f3\u8981\u4fee\u6539\u8fd9\u4e2a\u76ee\u5f55\uff0c\u53ef\u4ee5\u4fee\u6539 CCACHE_DIR \u73af\u5883\u53d8\u91cf\u3002\u4f8b\u5982\uff1a</p> <pre><code>export CCACHE_DIR=/home/solo/ext-data/.ccache\n</code></pre> <p>\u4f46\u662f\u5982\u679c\u53ea\u662f\u8fd9\u6837\u4fee\u6539\uff0c\u4f7f\u7528ccache -s\u547d\u4ee4\u770b\u662f\u6ca1\u6709\u770b\u5230\u6548\u679c\u7684\u3002</p> <p>\u6240\u4ee5\u6211\u4eecccache -h\u770b\u4e0b\u547d\u4ee4\u4ecb\u7ecd\uff1a</p> <pre><code>\u2514\u2500[$] &lt;&gt; ccache -h\nUsage:\n    ccache [options]\n    ccache compiler [compiler options]\n    compiler [compiler options]          (via symbolic link)\n\nOptions:\n    -c, --cleanup         delete old files and recalculate size counters\n                          (normally not needed as this is done automatically)\n    -C, --clear           clear the cache completely (except configuration)\n    -F, --max-files=N     set maximum number of files in cache to N (use 0 for\n                          no limit)\n    -k, --get-config=K    get the value of the configuration key K\n    -M, --max-size=SIZE   set maximum size of cache to SIZE (use 0 for no\n                          limit); available suffixes: k, M, G, T (decimal) and\n                          Ki, Mi, Gi, Ti (binary); default suffix: G\n    -o, --set-config=K=V  set configuration key K to value V\n    -p, --print-config    print current configuration options\n    -s, --show-stats      show statistics summary\n    -z, --zero-stats      zero statistics counters\n\n    -h, --help            print this help text\n    -V, --version         print version and copyright information\n\nSee also &lt;https://ccache.samba.org&gt;.\n</code></pre> <p>\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7--set-config=K=V\u8bbe\u7f6e\uff0c\u4f46K\u662f\u6211\u4eec\u6211\u4eec\u4e0d\u77e5\u9053\uff0c\u5148\u7528ccache -p\u627e\u5230K\uff0c\u6700\u7ec8\u6211\u4eec\u8bbe\u7f6e\u4e3a\uff1a</p> <pre><code>ccache --set-config=cache_dir=/home/solo/ext-data/.ccache\n</code></pre> <p>\u770b\u4e0bccache -s\uff0c\u53d1\u73b0\u6210\u529f\u4e86\u3002</p> <pre><code>\u2514\u2500[$] &lt;&gt; ccache -s\ncache directory                     /home/solo/ext-data/.ccache\nprimary config                      /home/solo/.ccache/ccache.conf\nsecondary config      (readonly)    /etc/ccache.conf\nstats updated                       Wed Feb 23 11:18:44 2022\ncache hit (direct)                 57342\ncache hit (preprocessed)             441\ncache miss                         59571\ncache hit rate                     49.24 %\ncalled for link                        2\ncalled for preprocessing            3326\nunsupported code directive            15\nno input file                       1197\ncleanups performed                     0\nfiles in cache                    178520\ncache size                          27.4 GB\nmax cache size                      50.0 GB\n</code></pre>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_4","title":"\u603b\u7ed3","text":"","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_5","title":"\u5b89\u88c5","text":"<pre><code>sudo apt-get install ccache\n</code></pre>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_6","title":"\u9ed8\u8ba4\u914d\u7f6e","text":"<p>\u9ed8\u8ba4\u7f13\u5b58\u76ee\u5f55\u4e3a$HOME/.ccache\uff0c\u5982\u679c\u9700\u8981\u66f4\u65b0\u9ed8\u8ba4\u7f13\u5b58\u76ee\u5f55\uff0c\u5219\u5728~/.ccache/ccache.conf \u4e2d\u914d\u7f6ecache_dir = /home/solo/ext-data/.ccache</p> <pre><code>\u2514\u2500[$] &lt;&gt; cat ~/.ccache/ccache.conf \nmax_size = 50G\ncache_dir = /home/solo/ext-data/.ccache\n</code></pre>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/ccache/#_7","title":"\u7f16\u8bd1\u811a\u672c","text":"<pre><code>export USE_CCACHE=1\nexport CCACHE_EXEC=/usr/bin/ccache\nccache -M 50G\n</code></pre>","tags":["Android","\u5de5\u5177","ccache"]},{"location":"android/base-tools/winscope/","title":"\u7f16\u8bd1winscope","text":"<p>Android WinScope \u5de5\u5177\u53ef\u4ee5\u901a\u8fc7\u6e90\u7801\u7f16\u8bd1\u83b7\u5f97\uff0c\u5177\u4f53\u4e5f\u53ef\u4ee5\u67e5\u9605\u00a0development/tools/winscope\u00a0\u76ee\u5f55\u4e0b\u7684 README.md \u6587\u6863\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a Ubuntu \u5e73\u53f0\u7684\u7f16\u8bd1\u6b65\u9aa4\uff1a</p> <pre><code>cd development/tools/winscope\nsudo apt install nodejs npm\nsudo npm install -g yarn\nyarn install\nyarn build\n</code></pre> <p>\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u770b\u4e0a\u53bb\u662f\u5728\u6267\u884c kotlin \u4f18\u5316\u7684\u65f6\u5019\uff0c\u62a5\u4e86\u4e2a\u5185\u5b58\u4e0d\u8db3\u7684\u95ee\u9898\uff1a</p> <pre><code>Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded\n    at com.google.gwt.dev.js.ScopeContext.referenceFor(ScopeContext.kt:68)\n    at com.google.gwt.dev.js.JsAstMapper.mapAsPropertyNameRef(JsAstMapper.java:247)\n    at com.google.gwt.dev.js.JsAstMapper.mapGetProp(JsAstMapper.java:608)\n    at com.google.gwt.dev.js.JsAstMapper.mapWithoutLocation(JsAstMapper.java:138)\n    at com.google.gwt.dev.js.JsAstMapper.map(JsAstMapper.java:47)\n    at com.google.gwt.dev.js.JsAstMapper.mapExpression(JsAstMapper.java:466)\n    at com.google.gwt.dev.js.JsAstMapper.mapBinaryOperation(JsAstMapper.java:304)\n    at com.google.gwt.dev.js.JsAstMapper.mapAssignmentVariant(JsAstMapper.java:258)\n    at com.google.gwt.dev.js.JsAstMapper.mapWithoutLocation(JsAstMapper.java:102)\n    at com.google.gwt.dev.js.JsAstMapper.map(JsAstMapper.java:47)\n</code></pre> <p>\u53ef\u4ee5\u5728\u6267\u884c yarn build \u524d\u901a\u8fc7 export JAVA_OPTS=\"-XX:-UseGCOverheadLimit\" \u7981\u7528\u6389 GC overhead limit exceeded \u68c0\u6d4b</p> <p>\u7f16\u8bd1\u5b8c\u4e4b\u540e\uff0c\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u4f1a\u4e00\u4e2a dist \u76ee\u5f55\uff0c\u518d\u628a adb_proxy/winscope_proxy.py (\u4e00\u4e2a\u5e2e\u6211\u4eec\u5f00\u542f trace \u6293\u53d6\u547d\u4ee4\u7684\u811a\u672c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u544a\u522b\u7e41\u7410\u7684\u547d\u4ee4\u5566)\uff0c\u6587\u4ef6\u4e5f\u62f7\u8d1d\u8fdb dist \u76ee\u5f55\u65b9\u4fbf\u6211\u4eec\u540e\u9762\u4f7f\u7528\u3002</p>","tags":["Android","wms","winscope"]},{"location":"android/divine-skill/android-bp-if-else/","title":"Android.bp \u6dfb\u52a0\u5b8f\u63a7","text":"","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidmk","title":"Android.mk \u6dfb\u52a0\u5b8f\u63a7","text":"<pre><code>ifeq ($(TARGET_PRODUCT), \"you target product name\")\nLOCAL_CFLAGS += -DRTFSC_SUPPORT_LTPO\nendif\n</code></pre> <p>\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5224\u65ad\u662f\u67d0\u4e2a\u8bbe\u5907\u5c31\u6dfb\u52a0 cflags \uff0c\u5728c\u4ee3\u7801\u4e2d\u5c31\u53ef\u4ee5\u6839\u636e RTFSC_SUPPORT_LTPO \u662f\u5426\u5b9a\u4e49\u6765\u6267\u884c\u67d0\u6bb5\u4ee3\u7801\u3002</p> <pre><code>#ifdef RTFSC_SUPPORT_LTPO  \n...\n#endif\n</code></pre>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidbp_1","title":"Android.bp \u6dfb\u52a0\u5b8f\u63a7","text":"<p>Android.bp \u53ea\u662f\u7eaf\u7cb9\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u5206\u652f\u3001\u5faa\u73af\u7b49\u6d41\u7a0b\u63a7\u5236\u3002\u5982\u679c\u60f3\u8981\u5728Android.bp \u4e2d\u6dfb\u52a0\u5b8f\u63a7\uff0c\u4e5f\u662f\u53ef\u4ee5\u505a\u5230\u7684\u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#mkbp","title":"mk+bp \u65b9\u6848","text":"","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidmk_1","title":"Android.mk","text":"<p>\u5728 Android.bp \u4e2d\u914d\u7f6e\u524d\u9700\u8981\u901a\u8fc7 mk \u7684\u65b9\u5f0f\u6ce8\u518c\u5230build/make/core/main.mk\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u65b0\u589e\u4e00\u4e2a rtfsc_feature.mk\u6587\u4ef6\uff0c\u5e76\u5728 build/make/core/main.mk \u4e2d include \u8fd9\u4e2a\u6587\u4ef6\u3002</p> <pre><code>//\u5b9a\u4e49namespace\nSOONG_CONFIG_NAMESPACES += rtfsc\n\n//\u58f0\u660e\u4f7f\u7528\u7684\u53d8\u91cf\nSOONG_CONFIG_rtfsc := \\\n    rtfsc_product \\\n    rtfsc_water_mark\n\n//\u53d8\u91cf\u8d4b\u503c\nSOONG_CONFIG_rtfsc_rtfsc_product := $(TARGET_PRODUCT)\n\n//\u53d8\u91cf\u8d4b\u503c\nSOONG_CONFIG_rtfsc_rtfsc_water_mark := true\n</code></pre> <ul> <li> <p>SOONG_CONFIG_NAMESPACES     \u662f bp \u8fdb\u884c config \u914d\u7f6e\u65f6\u9700\u8981\u6307\u5b9a\u3002</p> </li> <li> <p>\u6ce8\u518c\u53d8\u91cf\u540d <pre><code>\u4e0a\u9762\u6307\u5b9a\u7684 namespace \u540d\u79f0\u52a0\u4e0a\u00a0**SOONG_CONFIG_**\u00a0\u524d\u7f00\uff0c\u7528\u4ee5\u6ce8\u518c\u6240\u6709\u7684\u53d8\u91cf\u540d\uff1b\u5982\u4e0b\u4f8b\u5b50\uff1a\n\nSOONG_CONFIG_[namespace] := \\\n    \u53d8\u91cf\u540d1 \\\n    \u53d8\u91cf\u540d2 \\\n    ...     \n</code></pre></p> </li> <li> <p>\u5b9a\u4e49\u53d8\u91cf\u540d\u7684\u503c <pre><code>\u5728\u53d8\u91cf\u540d\u524d\u52a0\u4e0a\u524d\u7f00\u00a0**SOONG_CONFIG_[namespaces]_[\u53d8\u91cf\u540d]**\u00a0\u7528\u4ee5\u5b9a\u4e49\u53d8\u91cf\u7684\u503c\uff1b\u5982\u4e0b\u4f8b\u5b50\uff1a\n\nSOONG_CONFIG_rtfsc_rtfsc_product := $(TARGET_PRODUCT)\n</code></pre></p> </li> </ul>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidbp_2","title":"Android.bp","text":"<pre><code>soong_config_module_type {\n    name: \"rtfsc_cc_defaults\",\n    module_type: \"cc_defaults\",\n    config_namespace: \"rtfsc\",\n    variables: [\n        \"rtfsc_product\",\n    ],\n    bool_variables: [\n        \"rtfsc_water_mark\",\n    ],\n    properties: [\n        \"cflags\",\n        \"shared_libs\",\n    ],\n}\n\nsoong_config_string_variable {\n    name: \"rtfsc_product\",  \n    values: [  \n        \"device_name_1\",  \n        \"device_name_2\",\n    ],\n}\n\n//\u6838\u5fc3\u90e8\u5206\uff0c\u82e5\u9700\u8981\u5728\u6bcf\u4e2a\u5916\u90e8\u7684 Android.bp \u4f7f\u7528\uff0c\u8fd9\u91cc\u4e0d\u58f0\u660e\uff0c\u6539\u6210\u5728\u7528\u7684\u5916\u90e8 Android.bp \u4e2d\u58f0\u660e\nrtfsc_cc_defaults {\n    name: \"rtfsc_inputflinger_defaults\",\n\n    target: {  \n        android: {  \n            shared_libs: [\n                \"libpackagelistparser\",\n            ],  \n            cflags: [  \n                \"-DRTFSC_INPUT_EXTEND\",  \n            ],  \n        },  \n    },  \n    soong_config_variables: {\n        rtfsc_water_mark: {  \n            cflags: [  \n                \"-DRTFSC_WATER_MARK\",  \n            ],\n        },\n        rtfsc_product: {  \n            device_name_1: {  \n                cflags: [  \n                    \"-DRTFSC_SUPPORT_LTPO\",  \n                ],  \n            },  \n        }  \n    },\n}\n</code></pre> <ul> <li> <p>soong_config_module_type     \u8fd9\u4e2a\u662fbp \u914d\u7f6econfig \u7684\u6838\u5fc3\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e0d\u540c\u7684\u914d\u7f6e\u7c7b\u522b\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff08soong_config_modules.go \u4e2d\u89e3\u6790\uff09\u4f1a\u7edf\u8ba1\u6240\u6709\u7684soong_config_module_type\u3002</p> <ul> <li> <p>name     \u6307\u5b9aconfig \u914d\u7f6e\uff0c\u4f8b\u5982\u8fd9\u91cc\u7684 rtfsc_cc_defaults</p> </li> <li> <p>config_namespace     config \u914d\u7f6e\u7684namespace\uff0c\u5fc5\u987b\u8981\u6307\u5b9a\u3002</p> </li> <li> <p>variables     \u6ce8\u518c\u6240\u6709\u7684\u53d8\u91cf\u3002</p> </li> <li> <p>properties     \u53d8\u91cf\u9700\u8981\u6d89\u53ca\u7684property\uff0c\u5982\uff1a\"include_dirs\", \"static_libs\", \"shared_libs\", \"cflags\", \"srcs\" \u7b49\u7b49\u3002</p> </li> </ul> </li> <li> <p>soong_config_string_variable     \u5b9a\u4e49 rtfsc_cc_defaults \u4e2d\u4f9d\u8d56\u7684 string \u53d8\u91cf\uff0c\u8fd9\u91cc\u7684\u53d8\u91cf\u7684\u503c\u5728\u524d\u9762\u7684 mk \u4e2d\u5df2\u7ecf\u5b9a\u4e49\u3002</p> </li> <li> <p>soong_config_bool_variable     \u5b9a\u4e49 rtfsc_cc_defaults \u4e2d\u4f9d\u8d56\u7684 bool \u53d8\u91cf\uff0c\u8fd9\u91cc\u7684\u53d8\u91cf\u7684\u503c\u5728\u524d\u9762\u7684 mk \u4e2d\u5df2\u7ecf\u5b9a\u4e49\u3002</p> </li> <li> <p>rtfsc_cc_defaults     \u771f\u6b63\u533a\u5206\u6bcf\u4e2a\u53d8\u91cf\u7684\u5730\u65b9\uff0c\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684 cflags \u7b49\u7b49\u3002     \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4e0d\u58f0\u660e rtfsc_cc_defaults\uff0c\u800c\u662f\u5728\u9700\u8981\u7528\u5230\u7684 Android.bp \u624d\u53bb\u7528\u3002\u6bd4\u5982\u5728 frameworks/native/services/inputflinger/Android.bp \u4e2d\u9700\u8981\u533a\u5206\u8bbe\u5907\uff1a</p> </li> </ul> <p>\u5047\u8bbe\u8fd9\u91cc\u7684 Android.bp \u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u662f device/rtfsc/common/feature/Android.bp </p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidbp_3","title":"\u5916\u90e8 Android.bp \u4f7f\u7528","text":"<p>\u6bd4\u5982 device/rtfsc/common/feature/Android.bp \u6587\u4ef6\u6ca1\u6709\u5b9a\u4e49 rtfsc_cc_defaults \uff1b\u90a3\u4e48\u5728 frameworks/native/services/inputflinger/Android.bp \u4e2d\u53ef\u4ee5\u8fd9\u6837\u7528\uff1a</p> <pre><code>soong_config_module_type_import {  \n    from: \"device/rtfsc/common/feature/Android.bp\",\n    module_types: [\"rtfsc_cc_defaults\"],  \n}  \n\nrtfsc_cc_defaults {\n    name: \"rtfsc_inputflinger_defaults\",\n\n    target: {  \n        android: {  \n            shared_libs: [\n                \"libpackagelistparser\",\n            ],  \n            cflags: [  \n                \"-DRTFSC_INPUT_EXTEND\",  \n            ],  \n        },  \n    },  \n    soong_config_variables: {\n        rtfsc_water_mark: {  \n            cflags: [  \n                \"-DRTFSC_WATER_MARK\",  \n            ],\n        },\n        rtfsc_product: {  \n            device_name_1: {  \n                cflags: [  \n                    \"-DRTFSC_SUPPORT_LTPO\",  \n                ],  \n            },  \n        }  \n    },\n}\n</code></pre> <p>\u7136\u540e\u5728 inputflinger_defaults \u4e2d\u6dfb\u52a0 <pre><code>cc_defaults {  \n    name: \"inputflinger_defaults\",\n\n    //\u6dfb\u52a0\u90e8\u5206\n    defaults: [  \n        \"rtfsc_inputflinger_defaults\",  \n    ],\n    //\u6dfb\u52a0\u90e8\u5206\n\n    ...\n}\n</code></pre></p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#_1","title":"\u5c0f\u7ed3","text":"<p>mk \u65b9\u6848\u53ef\u4ee5\u914d\u5408 lunch \u8bbe\u5907\u65f6\uff0c\u6839\u636e target \u627e\u5230\u5bf9\u5e94\u8bbe\u5907\u7684 \u914d\u7f6e\u6587\u4ef6\u81ea\u52a8\u751f\u6210 mk \u6587\u4ef6\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u505a\u5230 feature \u5b8f\u7684\u76ee\u7684\u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#gobp","title":"go+bp \u65b9\u6848","text":"<p>\u6b64\u65b9\u6848\u6211\u4eec\u7528 inputflinger \u6765\u4e3e\u4f8b\uff0c\u5728\u5176 c \u4ee3\u7801\u4e2d\u83b7\u53d6\u5230\u5f53\u524d lunch \u7684\u8bbe\u5907\u540d\u5b57\uff0c\u4e5f\u5c31\u662f $TARGET_PRODUCT\u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidbp_4","title":"Android.bp","text":"<p>\u5728 frameworks/native/services/inputflinger/Android.bp \u4e2d\u6dfb\u52a0\uff1a</p> <pre><code>bootstrap_go_package {  \n    name: \"soong-rtfsc_inputflinger\",  \n    pkgPath: \"android/soong/rtfsc_inputflinger\",  \n    deps: [  \n        \"soong-android\",  \n        \"soong-cc\",  \n    ],  \n    srcs: [  \n          \"rtfsc_inputflinger.go\",  \n    ],  \n    pluginFor: [\"soong_build\"],  \n}  \n\nrtfsc_inputflinger_cc_defaults {  \n    name: \"rtfsc_inputflinger_defaults\",  \n}\n</code></pre> <p>\u8fd9\u91cc\u4e3b\u8981\u662f\u6dfb\u52a0\u4e00\u4e2a bootstrap_go_package \u6a21\u5757\uff0c - \u540d\u5b57\uff1asoong-rtfsc_inputflinger - \u6e90\u6587\u4ef6\uff1artfsc_inputflinger.go</p> <p>\u518d\u5b9a\u4e49\u4e00\u4e2a rtfsc_inputflinger_cc_defaults \u6a21\u5757\uff0c\u540d\u5b57\u53eb\u505a rtfsc_inputflinger_defaults \u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#go","title":"go\u6587\u4ef6","text":"<p>\u5728\u89e3\u6790\u5230\u8fd9\u4e2a\u6a21\u5757\u7684 Android.bp \u65f6\uff0c\u4f1a\u5bf9 rtfsc_inputflinger.go \u8fdb\u884c\u7f16\u8bd1\u3002</p> <pre><code>package rtfsc_inputflinger  \n\nimport (  \n        \"android/soong/android\"  \n        \"android/soong/cc\"  \n        \"fmt\"  \n)  \n\nfunc init() {  \n    android.RegisterModuleType(\"rtfsc_inputflinger_cc_defaults\", inputflingerDefaultsFactory)  \n}  \n\nfunc inputflingerDefaultsFactory() (android.Module) {  \n    module := cc.DefaultsFactory()  \n    android.AddLoadHook(module, inputflingerHook)  \n    return module  \n}  \n\nfunc inputflingerHook(ctx android.LoadHookContext) {  \n    type props struct {  \n        Cflags []string  \n    }  \n    p := &amp;props{}  \n\n    //AConfig() function is at build/soong/android/config.go  \n    device_name := ctx.AConfig().DeviceName()  \n    fmt.Println(\"DeviceName = \", device_name)  \n    p.Cflags = append(p.Cflags, \"-DPLATFORM_DEVICE_NAME=\" + \"\\\"\" + device_name + \"\\\"\")  \n\n    ctx.AppendProperties(p)  \n}\n</code></pre> <ul> <li> <p>init()     \u9996\u5148init\u51fd\u6570\u5148\u4f1a\u88ab\u6267\u884c\uff0c\u5728 init \u91cc\u9762\u6ce8\u518c\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u5757\u7c7b\u578b rtfsc_inputflinger_cc_defaults\uff0c \u5bf9\u5e94\u7684\u51fd\u6570\u662f inputflingerDefaultsFactory \u3002</p> </li> <li> <p>inputflingerDefaultsFactory     \u9700\u8981\u6ce8\u610f\u7684\u662f\u5176\u4e2d\u00a0cc.DefaultsFactory\u00a0\u8981\u6839\u636e\u6a21\u5757\u7c7b\u578b\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002</p> <ul> <li>cc_binary \u2013&gt; cc.DefaultsFactory</li> <li>cc_library_shared \u2013&gt; cc.LibrarySharedFactory()</li> <li>java_library \u2013&gt; java.LibraryFactory()</li> </ul> <p>\u8fd9\u4e2a\u53ef\u4ee5\u5728 build/soong/cc/library.go \u548c java.go \u4e2d\u67e5\u770b, \u5982 library.go</p> </li> </ul> <pre><code>func RegisterLibraryBuildComponents(ctx android.RegistrationContext) {\n    ctx.RegisterModuleType(\"cc_library_static\", LibraryStaticFactory)\n    ctx.RegisterModuleType(\"cc_library_shared\", LibrarySharedFactory)\n    ctx.RegisterModuleType(\"cc_library\", LibraryFactory)\n    ctx.RegisterModuleType(\"cc_library_host_static\", LibraryHostStaticFactory)\n    ctx.RegisterModuleType(\"cc_library_host_shared\", LibraryHostSharedFactory)\n}   \n</code></pre> <p>\u8fd9\u4f8b\u4e2d\uff0crtfsc_inputflinger_defaults \u662f\u88ab cc_library_shared \u4f7f\u7528\uff0c \u4f46 go \u6587\u4ef6\u4e2d\u6539\u6210cc.LibrarySharedFactory()\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u4e0d\u901a\u8fc7 \u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\uff01</p> <ul> <li> <p>inputflingerHook     \u7136\u540e\u6211\u4eec\u7ed9 rtfsc_inputflinger_cc_defaults \u6a21\u5757\u7c7b\u578b\u6dfb\u52a0\u4e86\u4e00\u4e2a hook\uff1ainputflingerHook\uff0c\u5f53\u6709 rtfsc_inputflinger_cc_defaults \u7c7b\u578b\u7684\u6a21\u5757\u5b9a\u4e49\u65f6 inputflingerHook \u5c31\u4f1a\u88ab\u89e6\u53d1\u6267\u884c\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u7684\u6761\u4ef6\u7f16\u8bd1\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a hook \u91cc\u9762\u8fdb\u884c\u64cd\u4f5c\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 ctx \u6765\u83b7\u53d6\u5404\u79cd\u7f16\u8bd1\u4fe1\u606f\uff0c \u6bd4\u5982 PlatformSdkVersion\uff0c DeviceName\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 ctx.AppendProperties \u6765\u6dfb\u52a0\u5404\u79cd\u914d\u7f6e\uff0c\u53ef\u4ee5\u914d\u7f6e\u7684\u4e1c\u897f\u5982\u4e0b\uff1a</p> </li> </ul> <pre><code>type props struct {  \n\u00a0\u00a0\u00a0\u00a0// \u5b9a\u4e49Android.bp\u4e2d\u7684\u5404\u4e2a\u5b57\u6bb5  \n\u00a0\u00a0\u00a0\u00a0Cflags []string  \n\u00a0\u00a0\u00a0\u00a0Srcs []string  \n\u00a0\u00a0\u00a0\u00a0Include_dirs []string  \n\u00a0\u00a0\u00a0\u00a0Shared_libs []string  \n\u00a0\u00a0\u00a0\u00a0Local_include_dirs []string  \n\u00a0\u00a0\u00a0\u00a0Static_libs []string  \n\u00a0\u00a0\u00a0\u00a0Export_shared_lib_headers []string  \n}\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u53ea\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a cflags \u800c\u5df2\uff0c \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u6e90\u7801\u6587\u4ef6\u53ca\u5934\u6587\u4ef6\u76ee\u5f55\uff0c\u53ca\u4f9d\u8d56\u7b49\u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#androidbp_5","title":"Android.bp \u4f7f\u7528","text":"<pre><code>cc_library_shared {  \n    name: \"libinputflinger\",  \n    defaults: [  \n        ...\n        \"rtfsc_inputflinger_defaults\"  \n    ],\n\n    ...\n</code></pre>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#c","title":"c\u4ee3\u7801\u4e2d\u4f7f\u7528","text":"<pre><code>ALOGI(\"PLATFORM_DEVICE_NAME = %s\\n\", PLATFORM_DEVICE_NAME);\n</code></pre>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#_2","title":"\u5c0f\u7ed3","text":"<p>\u5728 Android.bp \u4e2d\u6dfb\u52a0 bootstrap_go_package \u6a21\u5757 soong-rtfsc_inputflinger \uff0c\u5e76\u6dfb\u52a0go\u6e90\u7801\u6587\u4ef6\u3002 \u5728 go \u6e90\u7801\u4e2d\u914d\u7f6e cflags \u3001srcs \u7b49\u7b49\u3002</p> <p>\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u6848\u6bd4\u8f83\u9002\u5408\u67d0\u4e2a\u6a21\u5757\u505a\u4e00\u4e9b\u5b8f\u63a7\u3002</p> <p>\u8fd8\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5728 InputDispatcher.cpp \u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u62a5\u9519\u3002\u5373\u4f7f\u5728 libinputdispatcher_defaults \u52a0\u4e0a\u4e86 rtfsc_inputflinger_defaults \u4e5f\u4e0d\u884c\u3002 \u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u5bf9 Android.bp  \u8fd8\u4e0d\u591f\u4e86\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u8fd8\u4e0d\u77e5\u9053\u600e\u4e48\u7528\u3002</p>","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/android-bp-if-else/#_3","title":"\u603b\u7ed3","text":"mk\u65b9\u6848 go\u65b9\u6848 \u4f18\u70b9 \u5408\u9002\u5168\u5c40feature\u4f7f\u7528 \u9002\u5408\u5355\u6a21\u5757\u4f7f\u7528 \u7f3a\u70b9 \u5f53\u505a\u5168\u5c40feature\u4f7f\u7528\u65f6\uff0c\u8fd8\u9700\u8981\u7528shell\u6216\u8005python\u81ea\u52a8\u751f\u6210mk\u6587\u4ef6 \u4e0d\u50cfmk\u6587\u4ef6\u90a3\u4e48\u76f4\u89c2","tags":["Android","Android.bp","feature","\u5b8f\u63a7"]},{"location":"android/divine-skill/service-extra-func-without-aidl/","title":"aosp\u539f\u751fService\u5feb\u6377\u6269\u5c55\u63a5\u53e3","text":"","tags":["Android","Service","AIDL","\u65b0\u589e\u63a5\u53e3"]},{"location":"android/divine-skill/service-extra-func-without-aidl/#_1","title":"\u80cc\u666f","text":"<p>\u60f3\u5728 aosp \u539f\u751f Service \u63d0\u4f9b\u65b0\u7684\u529f\u80fd\u7ed9 APP \u4f7f\u7528\uff0c\u4f46\u53c8\u4e0d\u60f3\u6539\u52a8 aidl \u6587\u4ef6\u4ee5\u53ca manager \u6587\u4ef6\u3002 \u4e5f\u5c31\u662f\u8bf4\u60f3\u5c3d\u91cf\u5c11\u6539\u4ee3\u7801\u7684\u65b9\u5f0f\u5b9e\u73b0\u65b0\u529f\u80fd\u3002\u57fa\u4e8e\u8fd9\u6837\u7684\u5927\u524d\u63d0\u4e0b\u53ef\u4ee5\u901a\u8fc7 onTransact() \u63a5\u53e3\u53bb\u5b9e\u73b0\u3002 \u5bf9 binder \u4e86\u89e3\u7684\u90fd\u77e5\u9053\uff0c\u6bcf\u4e2a binder \u5bf9\u8c61\u91cc\u7684 Stub \u4f1a\u6709\u4e00\u4e2a onTransact() \u63a5\u53e3\u7528\u6765 ipc \u7684\uff1b\u5e76\u4e14\u533a\u5206\u6bcf\u4e2a\u63a5\u53e3\u662f\u901a\u8fc7 transact code \u6765\u533a\u5206\u3002</p> <p>\u6211\u4eec\u4ee5 WindowManagerService \u4e3a\u4f8b\u3002</p>","tags":["Android","Service","AIDL","\u65b0\u589e\u63a5\u53e3"]},{"location":"android/divine-skill/service-extra-func-without-aidl/#service","title":"Service","text":"<p>\u5728 WindowManagerService \u4e2d\uff1a</p> <pre><code>public boolean onTransact(int code, Parcel data, Parcel reply, int flags)  \n        throws RemoteException {  \n    try {  \n        if (code == 100001) {\n            Log.d(TAG, \"onTransact(solo-debug) called with: code = [\" + code + \"], data = [\" + data + \"], reply = [\" + reply + \"], flags = [\" + flags + \"]\");  \n            return true;  \n        }  \n\n        return super.onTransact(code, data, reply, flags);  \n    } catch (RuntimeException e) {  \n        // The window manager only throws security exceptions, so let's  \n        // log all others.        if (!(e instanceof SecurityException)) {  \n            ProtoLog.wtf(WM_ERROR, \"Window Manager Crash %s\", e);  \n        }  \n        throw e;  \n    }  \n}\n</code></pre>","tags":["Android","Service","AIDL","\u65b0\u589e\u63a5\u53e3"]},{"location":"android/divine-skill/service-extra-func-without-aidl/#app","title":"APP","text":"<pre><code>Parcel data = Parcel.obtain();  \nParcel reply = Parcel.obtain();  \ntry {  \n    IBinder binder = ServiceManager.getService(Context.WINDOW_SERVICE);  \n    if (binder != null) {  \n        data.writeInterfaceToken(\"android.view.IWindowManager\");  \n        data.writeInt(11);  \n        data.writeInt(22);  \n        data.writeString(\"test\");  \n        binder.transact(100001, data, reply, 0);  \n    }  \n} catch (Exception e) {  \n    Log.e(TAG, \"solo-debug transact failed = \"+ e);  \n} finally {  \n    data.recycle();  \n    reply.recycle();  \n}\n</code></pre> <p>\u6267\u884c\u540e\u8f93\u51fa\u7684log\u5982\u4e0b\uff0c\u8bf4\u660e\u8fd9\u4e2a\u65b9\u6848\u662f\u53ef\u884c\u7684\u3002</p> <pre><code>11-29 08:27:07.139  2414  4145 D WindowManager: onTransact(solo-debug) called with: code = [100001], data = [android.os.Parcel@cc9491b], reply = [android.os.Parcel@bdc8ab8], flags = [0]                            \n</code></pre> <p>\u8fd9\u4e2a\u65b9\u6848\u5728 SurfaceFlinger \u4e2d\u7ecf\u5e38\u7528\u5230\u3002</p>","tags":["Android","Service","AIDL","\u65b0\u589e\u63a5\u53e3"]},{"location":"android/divine-skill/mem-pressure/","title":"\u5185\u5b58\u52a0\u538b","text":"","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#mem-pressure","title":"\u5185\u5b58\u52a0\u538b | mem-pressure","text":"<p>\u4ecb\u7ecd\u5185\u5b58\u52a0\u538b\u5c0f\u5de5\u5177\uff1amem-pressure</p> <p>\u672c\u6587\u4ee3\u7801\u57fa\u4e8e\uff1aAndroid 12</p>","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#_2","title":"\u4f7f\u7528","text":"<p>usage \u4fe1\u606f\u3002</p> <pre><code>emulator_x86_64:/ ## mem-pressure  -h                                                                                                                                                                      \nUsage: [OPTIONS]\n\n  -d N: Duration in microsecond to sleep between each allocation.\n  -i N: Number of iterations to run the alloc process.\n  -o N: The oom_score to set the child process to before alloc.\n  -s N: Number of bytes to allocate in an alloc process loop.\nAborted \n</code></pre> <p>\u5176\u5b9e\u4e0d\u9700\u8981\u914d\u7f6e\u53c2\u6570\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u540c\u6837\u8fd0\u884c\u7684\u5f88\u597d\uff0c\u6709\u914d\u7f6e\u9ed8\u8ba4\u53c2\u6570\u53ea\u662f\u6ca1\u653e\u5728\u00a0<code>help</code>\u00a0\u4e2d\uff0c\u4ee3\u7801\u5206\u6790\u65f6\u4ecb\u7ecd\u3002\u76f4\u63a5\u8fd0\u884c\u00a0<code>mem-pressure</code>\u00a0\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u7ec8\u7aef\u8f93\u51fa\u548c logcat \u65e5\u5fd7\u3002</p> <ul> <li>\u7ec8\u7aef\u8f93\u51fa</li> </ul> <pre><code>130|emulator_x86_64:/ ## mem-pressure                                                                                                                                                                      \nChild 0 allocated 2654 MB\nChild 1 allocated 3985 MB\nChild 2 allocated 4614 MB\nChild 3 allocated 4907 MB\nChild 4 allocated 5097 MB\nChild 5 allocated 5140 MB\n......\n\u63a5\u6536 Ctrl + C \u4fe1\u53f7\u9000\u51fa\n</code></pre> <ul> <li>logcat</li> </ul> <pre><code>04-04 20:16:24.229   174   174 I lowmemorykiller: Kill 'com.android.inputmethod.latin' (3294), uid 10086, oom_score_adj 200 to free 13172kB rss, 31664kB swap; reason: device is low on swap (0kB &lt; 151184kB) and thrashing (134%)\n04-04 20:16:24.431   174   174 I lowmemorykiller: Kill 'android.ext.services' (3275), uid 10100, oom_score_adj 100 to free 11536kB rss, 33032kB swap; reason: device is low on swap (0kB &lt; 151184kB) and thrashing (220%)\n04-04 20:16:24.497   174   174 I lowmemorykiller: Kill 'com.android.launcher3' (3244), uid 10090, oom_score_adj 0 to free 22360kB rss, 49604kB swap; reason: device is low on swap (0kB &lt; 151184kB) and thrashing (273%)\n04-04 20:16:30.117   174   174 I lowmemorykiller: Kill 'android.process.acore' (3395), uid 10039, oom_score_adj 200 to free 22840kB rss, 33072kB swap; reason: device is low on swap (2372kB &lt; 151184kB) and thrashing (208%)\n04-04 20:16:30.324   174   174 I lowmemorykiller: Kill 'com.android.inputmethod.latin' (3376), uid 10086, oom_score_adj 200 to free 13412kB rss, 31656kB swap; reason: device is low on swap (0kB &lt; 151184kB) and thrashing (152%)\n04-04 20:16:30.546   174   174 I lowmemorykiller: Kill 'com.android.launcher3' (3339), uid 10090, oom_score_adj 0 to free 22880kB rss, 49428kB swap; reason: device is low on swap (0kB &lt; 151184kB) and thrashing (200%)\n</code></pre> <p>\u4ece\u4e0a\u9762\u7684\u8fd0\u884c\u53cd\u9988\u6765\u770b\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u7406\u89e3\u7a0b\u5e8f\u7684\u76ee\u7684\uff1a fork \u5b50\u8fdb\u7a0b\u7533\u8bf7\u5c3d\u53ef\u80fd\u591a\u7684\u5185\u5b58\u3002\u7531\u6b64\u4f1a\u89e6\u53d1\u00a0<code>lowmemorykiller</code>\u00a0\u6309\u00a0<code>oom_adj_score</code>\u00a0\u6740\u8fdb\u7a0b\u7684\u52a8\u4f5c\u3002</p>","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#_3","title":"\u4ee3\u7801\u5206\u6790","text":"","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#_4","title":"\u5173\u952e\u53c2\u6570","text":"<p>system/extras/alloc-stress/mem-pressure.cpp</p> <pre><code>int main(int argc, char* argv[]) {\n    pid_t pid;\n    size_t* shared;\n    int c, i = 0;\n\n    size_t duration = 1000; //\u6ce8\u91ca 1\uff1a\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5185\u5b58\u7684\u65f6\u95f4\u95f4\u9694\n    int iterations = 0; //\u6ce8\u91ca 2\uff1a\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5185\u5b58\u4ea4\u4e92\u6b21\u6570\n    const char* oom_score = \"899\"; //\u6ce8\u91ca 3\uff1a\u5b50\u8fdb\u7a0b oom_score_adj \u7684\u6570\u503c\n    size_t step_size = 2 * 1024 * 1024;  // 2 MB //\u6ce8\u91ca 4\uff1a\u5b50\u8fdb\u7a0b\u6bcf\u6b21\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\n    size_t size = step_size; //\u6ce8\u91ca 5\uff1a\u5b50\u8fdb\u7a0b\u57fa\u7840\u5185\u5b58\u7533\u8bf7\u5927\u5c0f\n\n    while ((c = getopt(argc, argv, \"hi:d:o:s:\")) != -1) {\n        switch (c) {\n            case 'i':\n                iterations = atoi(optarg);\n                break;\n            case 'd':\n                duration = atoi(optarg);\n                break;\n            case 'o':\n                oom_score = optarg;\n                break;\n            case 's':\n                step_size = atoi(optarg);\n                break;\n            case 'h':\n                usage();\n                abort();\n            default:\n                abort();\n        }\n    }\n</code></pre> <p>\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u6709\u8fd9\u6837\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\uff0c\u89c1\u00a0<code>//\u6ce8\u91ca 1 - 5</code>\u3002\u7136\u540e\u662f\u5165\u53c2\u7684\u89e3\u6790\u8d4b\u503c\u3002</p>","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#_5","title":"\u4e3b\u5faa\u73af","text":"<p>system/extras/alloc-stress/mem-pressure.cpp</p> <pre><code>    //\u6ce8\u91ca 1\uff1a\u4e00\u4e2a\u901a\u9053\uff0c\u7528\u4e8e\u83b7\u53d6\u5b50\u8fdb\u7a0b\u6240\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\n    shared = (size_t*)mmap(NULL, sizeof(size_t), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED,\n                           0, 0);\n\n    while (iterations == 0 || i &lt; iterations) {//\u6ce8\u91ca 2\uff1a\u9ed8\u8ba4\u65e0\u9650\u5faa\u73af\n        *shared = 0;\n        pid = fork();\n        if (!pid) {\n            /* Child *///\u6ce8\u91ca 3\uff1a\u5b50\u8fdb\u7a0b\u5f00\u59cb\u5185\u5b58\u52a0\u538b\n            add_pressure(shared, size, step_size, duration, oom_score);\n            /* Shoud not get here */\n            exit(0);\n        } else {\n            wait(NULL);\n            //\u6ce8\u91ca 4\uff1a\u6253\u5370\u5b50\u8fdb\u7a0b\u7684\u5185\u5b58\u5206\u914d\u5927\u5c0f\n            printf(\"Child %d allocated %zd MB\\n\", i, *shared / 1024 / 1024);\n            //\u6ce8\u91ca 5\uff1a\u66f4\u65b0\u57fa\u7840\u5206\u914d\u503c\uff0c\u7528\u4e8e\u52a0\u901f\u63a5\u8fd1\u5185\u5b58\u8fb9\u754c\u3002\n            size = *shared / 2;\n        }\n        i++;\n    }\n</code></pre> <p>\u6ce8\u91ca 2\uff0c\u9ed8\u8ba4\u53c2\u6570\u4e0b\uff0c<code>iterations == 0</code>\u00a0\u6240\u4ee5\u4f1a\u6301\u7eed fork \u5e76\u7533\u8bf7\u5185\u5b58\u3002</p> <p>\u6ce8\u91ca 3\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u7533\u8bf7\u5185\u5b58\uff0c\u5f00\u59cb\u52a0\u538b\u3002</p> <p>\u6ce8\u91ca 4\uff1a\u538b\u529b\u7206\u8868\u540e\u5c55\u793a\u7533\u8bf7\u7684\u5927\u5c0f\u3002</p> <p>\u6ce8\u91ca 5\uff1a\u7528\u4e8e\u52a0\u901f\u4e0b\u4e00\u6b21\u7684\u5185\u5b58\u7533\u8bf7\u3002</p> <p>\u4e0b\u9762\u770b\u6ce8\u91ca 3 \u7684 add_pressure \u65b9\u6cd5\u3002</p> <p>system/extras/alloc-stress/mem-pressure.cpp</p> <pre><code>void* alloc_set(size_t size) {\n    void* addr = NULL;\n\n    addr = malloc(size);\n    if (!addr) {\n        printf(\"Allocating %zd MB failed\\n\", size / 1024 / 1024);\n    } else {\n        memset(addr, 0, size);\n    }\n    return addr;\n}\n\nvoid add_pressure(size_t* shared, size_t size, size_t step_size, size_t duration,\n                  const char* oom_score) {\n    int fd, ret;\n    //\u6ce8\u91ca 1\uff1a\u8bbe\u7f6e\u4f18\u5148\u7ea7\n    fd = open(\"/proc/self/oom_score_adj\", O_WRONLY);\n    ret = write(fd, oom_score, strlen(oom_score));\n    if (ret &lt; 0) {\n        printf(\"Writing oom_score_adj failed with err %s\\n\", strerror(errno));\n    }\n    close(fd);\n    //\u6ce8\u91ca 2\uff1a\u7533\u8bf7\u57fa\u7840\u5185\u5b58\n    if (alloc_set(size)) {\n        *shared = size;\n    }\n    //\u6ce8\u91ca 3\uff1a\u6301\u7eed\u7533\u8bf7\u5185\u5b58\n    while (alloc_set(step_size)) {\n        size += step_size;\n        *shared = size;\n        usleep(duration);\n    }\n}\n</code></pre> <p>\u4eba\u5982\u5176\u540d\uff0c\u6709\u4e09\u6b65\u52a8\u4f5c\uff0c\u89c1\u6ce8\u91ca 1 - 3\u3002\u6301\u7eed\u52a0\u538b\u7684\u540e\u679c\u5c31\u662f\u5185\u5b58\u538b\u529b\u7206\u70b8\uff0c\u89e6\u53d1 lmk \u6740\u8fdb\u7a0b\uff0c\u6740\u5230\u591a\u5c11\u5462\uff1f\uff08\u7406\u8bba\u4e0a\uff09\u6740\u5230\u5b50\u8fdb\u7a0b\u7684\u00a0<code>oom_score_adj</code>\u00a0\u5373\u9ed8\u8ba4\u503c 899 \u4f7f\u5f97\u5185\u5b58\u5f97\u5230\u91ca\u653e\u3002</p>","tags":["Android","Binder"]},{"location":"android/divine-skill/mem-pressure/#_6","title":"\u603b\u7ed3","text":"<p>\u8fd9\u4e2a\u5de5\u5177\u6709\u4ec0\u4e48\u7528\uff1f</p> <p>\u5c31\u8fd9\u4e2a\u5de5\u5177\u672c\u8eab\u6765\u8bf4\uff0c\u662f\u901a\u8fc7\u4e0d\u65ad\u7533\u8bf7\u5185\u5b58\uff0c\u76f4\u81f3\u5f00\u59cb lmk \u6740\u8fdb\u7a0b\uff0c\u6740\u7684\u4f18\u5148\u7ea7\u6781\u9650\uff08\u7406\u8bba\u4e0a\uff09\u662f\u6211\u4eec\u8bbe\u7f6e\u7684 -o \u53c2\u6570\u3002\u5176\u4ef7\u503c\u66f4\u591a\u5728\u4e8e\u63d0\u4f9b\u4e86\u4e00\u79cd\u601d\u8def\uff0c\u5982\u4f55\u6a21\u62df Android \u7cfb\u7edf\u5185\u5b58\u538b\u529b\u573a\u666f\u3002\u6bd4\u5982\u8bf4\uff0c\u60f3\u5f97\u77e5 launcher \u8fdb\u7a0b\u5728\u5927\u7ea6\u591a\u5c11\u7684\u5185\u5b58\u538b\u529b\u4e0b\u4f1a\u88ab\u6740\uff1f\u8bbe\u7f6e -o \u53c2\u6570\u4e3a launcher \u4f18\u5148\u7ea7</p> <pre><code>emulator_x86_64:/ ## cat /proc/`pidof com.android.launcher3`/oom_score_adj\n0\n</code></pre> <p>\u53c8\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u60f3\u6307\u5b9a\u6d88\u8017\u6389\u591a\u5c11\u5185\u5b58\u540e\uff0c\u505a\u67d0\u79cd\u6d4b\u8bd5\u7b49\u7b49\u3002</p>","tags":["Android","Binder"]},{"location":"android/divine-skill/log-to-line-chart/","title":"\u901a\u8fc7log\u4e2d\u7684\u5750\u6807\u8f6c\u6210\u6298\u7ebf\u56fe","text":"","tags":["Android","log","debug"]},{"location":"android/divine-skill/log-to-line-chart/#_1","title":"\u80cc\u666f","text":"<p>\u7ecf\u5e38\u6709\u7528\u6237\u62a5\u4e00\u4e9b\u6ed1\u52a8\u5361\u987f\u3001\u6296\u52a8\u7684\u95ee\u9898\uff1b\u5982\u679csf\u5206\u6790\u4e0b\u6765\u53d1\u73b0\u6ca1\u6709\u6389\u5e27\uff0c\u5e94\u7528\u63a5\u4e0b\u6765\u5f80\u5f80\u90fd\u4f1a\u6000\u7591input\u6709\u95ee\u9898\u3002\u800cinput\u9047\u5230\u8fd9\u79cd\u95ee\u9898\u6700\u96be\u5206\u6790\u7684\u539f\u56e0\u662f\uff1a - input log\u975e\u5e38\u5c11 - input \u5750\u6807log\u5373\u4f7f\u6709\u6253\u5370\uff0c\u4e5f\u4e0d\u76f4\u89c2</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u60f3\u529e\u6cd5\u4ecelog\u4e2d\u83b7\u53d6\u5230x,y\u6570\u636e\uff0c\u5e76\u8f6c\u6362\u6210\u6298\u7ebf\u56fe\u3002</p>","tags":["Android","log","debug"]},{"location":"android/divine-skill/log-to-line-chart/#inputdispatcherlogoutboundmotiondetails","title":"InputDispatcher::logOutboundMotionDetails","text":"<p>\u5728logOutboundMotionDetails()\u91cc\u4f1a\u6253\u5370\u51fa x\uff0cy \u5750\u6807\uff0c\u4f46\u524d\u63d0\u662f\u6253\u5f00\u4e86 DEBUG_OUTBOUND_EVENT_DETAILS</p> <p>\u6253\u5370\u7684log\u5982\u4e0b\uff1a</p> <pre><code>11-24 15:54:55.297  2690  3885 D InputDispatcher:   Pointer 0: id=0, toolType=FINGER, x=1159.152710, y=1975.381226, pressure=1.000000, size=0.486275, touchMajor=123.935303, touchMinor=123.935303, toolMajor=123.935303, toolMinor=123.935303, orientation=0.000000\n</code></pre> <p>\u90a3\u6211\u4eec\u901a\u8fc7\u811a\u672c\u53bb\u8fc7\u6ee4\u6389 x,y \u5750\u6807\uff0c\u653e\u5230 excel \u4e2d\u5c31\u53ef\u4ee5\u751f\u6210\u6298\u7ebf\u56fe\u4e86\u3002</p> <pre><code>file = \"/home/solo/bug/log/InputDispatcher.txt\"  \nwith open(file, 'r') as f:  \n    for line in f.readlines():  \n        if \"InputDispatcher\" in line and \"x=\" in line and \"y=\" in line:  \n            array = line.split(\",\")  \n            x_str = array[2]  \n            y_str = array[3]  \n\n            x = x_str.replace(\"x=\", \"\").strip()  \n            y = y_str.replace(\"y=\", \"\").strip()  \n\n            print(x, y)\n</code></pre> <p>\u6839\u636e\u6253\u5370\u51fa\u6765\u7684 x\uff0cy \u653e\u5230 excel \u4e2d\u5373\u53ef\u3002</p>","tags":["Android","log","debug"]},{"location":"android/divine-skill/log-to-line-chart/#input-swipe","title":"input \u547d\u4ee4\u6a21\u62df swipe","text":"<p>\u5982\u811a\u672c\uff0c\u6a21\u62df\u5de6\u53f3\u6ed1\u52a8\uff1a\uff08y\u5750\u6807\u4e0d\u53d8\uff09</p> <pre><code>while (true)  \ndo  \n    adb shell input swipe 800 1000 200 1000 1000;  \n    sleep 1.5;  \n    adb shell input swipe 200 1000 800 1000 1000;  \n    sleep 1.5;  \ndone\n</code></pre> <p>win\u7cfb\u7edf\u811a\u672c\u5982\u4e0b\uff1a</p> <pre><code>:loop\n    adb shell input swipe 800 1000 200 1000 1000;\n    TIMEOUT /T 1 /NOBREAK\n    adb shell input swipe 200 1000 800 1000 1000;\n    TIMEOUT /T 1 /NOBREAK\ngoto loop\n:end\n</code></pre> <p>\u7136\u540e\u5f97\u51fa\u7684\u6298\u7ebf\u56fe\uff1a</p> <p></p>","tags":["Android","log","debug"]},{"location":"android/divine-skill/log-to-line-chart/#_2","title":"\u4eba\u4e3a\u6ed1\u52a8","text":"<p>\u4eba\u4e3a\u5728\u5c4f\u5e55\u4e0a\u6ed1\u52a8\u4e5f\u662f\u901a\u8fc7\u811a\u672c\u83b7\u53d6\u5230x\uff0cy \u5750\u6807\u653e\u5230 excel \u4e2d\uff0c\u5f97\u5230\u7684\u6298\u7ebf\u56fe\uff1a</p> <p></p> <p>\u8fd9\u6837\u5bf9\u6bd4\u4e0b\u6765\u6709\u5f88\u660e\u663e\u7684\u4e0d\u5e73\u6ed1\uff0c\u5219\u53ef\u4ee5\u8bf4\u660e inputflinger \u672c\u8eab\u5e76\u6ca1\u95ee\u9898\u3002 \u800c\u662fbsp\u62a5\u70b9\u53ef\u80fd\u6709\u95ee\u9898\u4e86\uff0c\u9700\u8981bsp\u5206\u6790\u3002</p>","tags":["Android","log","debug"]},{"location":"android/debug-skill/tomestone-stack/","title":"Android Native crash tomestone trace tools","text":"","tags":["Android","\u5de5\u5177","dump"]},{"location":"android/debug-skill/tomestone-stack/#_1","title":"\u5de5\u5177\u76ee\u5f55","text":"<p>\u6e90\u4ee3\u7801\u4e0b\u6709\u6279\u91cf\u8f6c\u6362 Native trace \u5de5\u5177 development/scripts\u3002</p>","tags":["Android","\u5de5\u5177","dump"]},{"location":"android/debug-skill/tomestone-stack/#_2","title":"\u524d\u63d0","text":"<ul> <li>python\u7248\u672c\u8981\u5927\u4e8e3.6</li> <li>\u5fc5\u987blunch target</li> </ul>","tags":["Android","\u5de5\u5177","dump"]},{"location":"android/debug-skill/tomestone-stack/#_3","title":"\u4ecb\u7ecd","text":"<p>\u6267\u884c\u547d\u4ee4 ./development/scripts/stack -h \u67e5\u770b\u5e2e\u52a9</p> <pre><code>usage: stack [-h] [--arch ARCH] [--symbols-dir SYMBOLS_DIR | --symbols-zip SYMBOLS_ZIP] [-v] [FILE]\n\nParse and symbolize crashes\n\npositional arguments:\n  FILE                  should contain a stack trace in it somewhere the tool will find that and re-print it with source files and line numbers. If you don't pass FILE, or if file is -, it reads from stdin.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --arch ARCH           the target architecture\n  --symbols-dir SYMBOLS_DIR, --syms SYMBOLS_DIR, --symdir SYMBOLS_DIR\n                        the symbols directory\n  --symbols-zip SYMBOLS_ZIP\n                        the symbols.zip file from a build\n  -v, --verbose         include function parameters\n</code></pre> <p>\u5e38\u7528\u5230\u7684\u5c31\u662f --symbols-dir \u6307\u5b9asymbols\u76ee\u5f55\u3002</p> <p>\u5c06\u4ee5\u4e0btrace\u4fdd\u5b58\u4e3a\u6587\u4ef6crash.txt\u3002</p> <pre><code>07-10 14:43:05.333  5628  5628 F DEBUG   : backtrace:\n07-10 14:43:05.333  5628  5628 F DEBUG   :       #00 pc 0000000000054f50  /apex/com.android.runtime/lib64/bionic/libc.so (__strlen_aarch64+16) (BuildId: bed176195375c12bbf636f129939f1e0)\n07-10 14:43:05.333  5628  5628 F DEBUG   :       #01 pc 0000000000087eec  /apex/com.android.runtime/lib64/bionic/libc.so (__strcpy_chk+36) (BuildId: bed176195375c12bbf636f129939f1e0)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #02 pc 00000000000a280c  /system/lib64/libinputflinger.so (android::inputdispatcher::InputDispatcher::findTouchedWindowTargetsLocked(long, android::inputdispatcher::MotionEntry const&amp;, bool*, android::os::InputEventInjectionResult&amp;)+1456) (BuildId: 2fcc309ec38481b32c1e81dc0b7ecc64)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #03 pc 000000000009cebc  /system/lib64/libinputflinger.so (android::inputdispatcher::InputDispatcher::dispatchMotionLocked(long, std::__1::shared_ptr&lt;android::inputdispatcher::MotionEntry&gt;, android::inputdispatcher::InputDispatcher::DropReason*, long*)+280) (BuildId: 2fcc309ec38481b32c1e81dc0b7ecc64)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #04 pc 0000000000099dcc  /system/lib64/libinputflinger.so (android::inputdispatcher::InputDispatcher::dispatchOnceInnerLocked(long*)+2056) (BuildId: 2fcc309ec38481b32c1e81dc0b7ecc64)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #05 pc 0000000000099098  /system/lib64/libinputflinger.so (android::inputdispatcher::InputDispatcher::dispatchOnce()+92) (BuildId: 2fcc309ec38481b32c1e81dc0b7ecc64)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #06 pc 000000000000aed0  /system/lib64/libinputflinger_base.so (android::(anonymous namespace)::InputThreadImpl::threadLoop()+28) (BuildId: bd72f4f9ad9381770dd946bc3c6438bc)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #07 pc 00000000000142f8  /system/lib64/libutils.so (android::Thread::_threadLoop(void*)+288) (BuildId: 2e18a478e616c2b0c1d5cd6c93f03877)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #08 pc 00000000000ebcb0  /system/lib64/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+144) (BuildId: 8ade5e301ae1a90d6a5fd890c586f86b)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #09 pc 00000000000c34f8  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+208) (BuildId: bed176195375c12bbf636f129939f1e0)\n07-10 14:43:05.334  5628  5628 F DEBUG   :       #10 pc 000000000005ccb0  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+68) (BuildId: bed176195375c12bbf636f129939f1e0)\n</code></pre> <p>\u6267\u884c\uff1a./development/scripts/stack --symbols-dir out/target/product/qssi_64/symbols/ crash.txt</p> <p>\u53ef\u4ee5\u975e\u5e38\u6e05\u6670\u7684\u770b\u89c1\u8c03\u7528\u6d41\u7a0b\u548c\u6587\u4ef6\u884c\u53f7\uff0c\u4f7f\u7528\u8d77\u6765\u6bd4addrline2\u65b9\u4fbf\u5f88\u591a\u3002</p> <pre><code>Searching for native crashes in trace.log\nReading symbols from out/target/product/qssi_64/symbols/\n\nStack Trace:\n  RELADDR           FUNCTION                                                                        FILE:LINE\n  0000000000054f50  __strlen_aarch64+16                                                             external/arm-optimized-routines/string/aarch64/strlen.S:84\n  0000000000087eec  __strcpy_chk+36                                                                 bionic/libc/bionic/fortify.cpp:487\n  v--------------&gt;  strcpy                                                                          bionic/libc/include/bits/fortify/string.h:99\n  v--------------&gt;  android::inputdispatcher::::uidToName                                           frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp:618\n  00000000000a280c  android::inputdispatcher::InputDispatcher::findTouchedWindowTargetsLocked+1456  frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp:2427 (discriminator 2)\n  000000000009cebc  android::inputdispatcher::InputDispatcher::dispatchMotionLocked+280             frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp:1949 (discriminator 2)\n  0000000000099dcc  android::inputdispatcher::InputDispatcher::dispatchOnceInnerLocked+2056         frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp:1132 (discriminator 2)\n  0000000000099098  android::inputdispatcher::InputDispatcher::dispatchOnce()+92                    frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp:842\n  v--------------&gt;  std::__1::__function::__value_func&lt;void ()&gt;::operator()()                       external/libcxx/include/functional:1799\n  v--------------&gt;  std::__1::function&lt;void ()&gt;::operator()()                                       external/libcxx/include/functional:2347\n  000000000000aed0  android::::InputThreadImpl::threadLoop()+28                                     frameworks/native/services/inputflinger/InputThread.cpp:35\n  00000000000142f8  android::Thread::_threadLoop+288                                                system/core/libutils/Threads.cpp:0\n  00000000000ebcb0  android::AndroidRuntime::javaThreadShell+144                                    frameworks/base/core/jni/AndroidRuntime.cpp:1412\n  00000000000c34f8  __pthread_start+208                                                             bionic/libc/bionic/pthread_create.cpp:382\n  000000000005ccb0  __start_thread+68                                                               bionic/libc/bionic/clone.cpp:53\n</code></pre>","tags":["Android","\u5de5\u5177","dump"]},{"location":"android/debug-skill/call-stack/","title":"Android\u6253\u5370\u51fd\u6570\u8c03\u7528\u6d41\u7a0b","text":"","tags":["Android","\u5de5\u5177","CallStack"]},{"location":"android/debug-skill/call-stack/#java","title":"java","text":"<pre><code>Exception e = new Exception(\"solo-debug\");  \ne.printStackTrace();\n</code></pre>","tags":["Android","\u5de5\u5177","CallStack"]},{"location":"android/debug-skill/call-stack/#nativeccpp","title":"native(c/cpp)","text":"<pre><code>Android.bp\uff1a\ncc_defaults {\n    name: \"xxxxxxxxxxx\",\n\n    shared_libs: [\n        \"xxxxx\",\n        \"libutils\",\n        \"libutilscallstack\",\n    ],\n}\n\n\nAndroid.mk\uff1a\nLOCAL_SHARED_LIBRARIES := \\\n   xxxxx\n   libutils\\\n   libutilscallstack \\\n</code></pre> <p>\u5982\u679c\u8fd9\u4e2a cc_defaults \u53c8\u88ab cc_library_shared \u5f15\u7528\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u5728 cc_library_shared \u7684 shared_libs \u91cc\u6dfb\u52a0\u3002</p> <pre><code>#include &lt;utils/CallStack.h&gt;\n\n## system/core/libutils/include/utils/CallStack.h\nandroid::CallStack cs;  \ncs.update();\ncs.log(\"solo-debug\");\n</code></pre>","tags":["Android","\u5de5\u5177","CallStack"]},{"location":"android/debug-skill/am-set-debug-app/","title":"am set-debug-app \u4ecb\u7ecd","text":"","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_1","title":"\u4e00\u3001\u6e90\u7801\u5206\u6790","text":"<p>\u4ee3\u7801\u57fa\u4e8eandroid11\u3002am\u547d\u4ee4\u7684\u5b9e\u73b0\u89c1debug\uff1aam\u3001cmd\u547d\u4ee4\u3002\u4e66\u63a5\u4e0a\u6587\uff0c</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#11","title":"1.1\u3001\u547d\u4ee4\u884c\u53c2\u6570\u8bbe\u7f6e","text":"","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitymanagershellcommandoncommand","title":"ActivityManagerShellCommand#onCommand","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand.java</p> <pre><code> 176     @Override\n 177     public int onCommand(String cmd) {      \n 183             switch (cmd) {\n 184                 case \"start\":\n 185                 case \"start-activity\":\n 186                     return runStartActivity(pw);\n......\n 209                 case \"set-debug-app\":                                                   \n 210                     return runSetDebugApp(pw);\n 213                 case \"clear-debug-app\":\n 214                     return runClearDebugApp(pw);\n</code></pre> <p>209\u884c\u8bbe\u7f6edebug\uff0c\u5bf9\u5e94\u7684214\u884c\u53bb\u6389debug</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitymanagershellcommandrunsetdebugapp","title":"ActivityManagerShellCommand#runSetDebugApp","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerShellCommand.java</p> <pre><code> 980     int runSetDebugApp(PrintWriter pw) throws RemoteException {\n 981         boolean wait = false;\n 982         boolean persistent = false;\n 983 \n 984         String opt;\n 985         while ((opt=getNextOption()) != null) {\n 986             if (opt.equals(\"-w\")) {\n 987                 wait = true;\n 988             } else if (opt.equals(\"--persistent\")) {\n 989                 persistent = true;\n 990             } else {                                                                   \n 991                 getErrPrintWriter().println(\"Error: Unknown option: \" + opt);\n 992                 return -1;\n 993             }\n 994         }\n 995 \n 996         String pkg = getNextArgRequired();\n 997         mInterface.setDebugApp(pkg, wait, persistent);\n 998         return 0;\n 999     }\n-------------------------------------------------------------------------\n1008     int runClearDebugApp(PrintWriter pw) throws RemoteException {\n1009         mInterface.setDebugApp(null, false, true);\n1010         return 0;\n1011     }\n</code></pre> <p>runSetDebugApp\u4ec5\u8bb0\u5f55\u4e86\u4fe9\u53c2\u6570\uff0c<code>-w</code>\u3001<code>--persistent</code>\u3002\u5206\u522b\u4ee3\u8868\uff1a\u4e0b\u6b21\u7b49\u5f85app\u542f\u52a8\u3001\u603b\u662f\u7b49\u5f85app\u542f\u52a8</p> <p>997\u884c\uff0c\u5b9e\u73b0\u4e0e\u4e4b\u524d\u5206\u6790\u7684am\u547d\u4ee4\u4e00\u6837\uff0c\u8f6c\u5230ams\u5904\u7406</p> <p>1009\u884c\uff0c\u53bb\u6389debug\u3002\u8c03\u7528\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u5165\u53c2\u4e0d\u4e00\u81f4\u3002\u7ee7\u7eed\u8ddf\u8e2a</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitymanagerservicejavasetdebugapp","title":"ActivityManagerService.java#setDebugApp","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p> <pre><code> 8391     public void setDebugApp(String packageName, boolean waitForDebugger,\n 8392             boolean persistent) {\n 8393         enforceCallingPermission(android.Manifest.permission.SET_DEBUG_APP,\n 8394                 \"setDebugApp()\");\n 8396         long ident = Binder.clearCallingIdentity();\n 8397         try {\n 8401             if (persistent) {\n 8402                 final ContentResolver resolver = mContext.getContentResolver();\n 8403                 Settings.Global.putString(\n 8404                     resolver, Settings.Global.DEBUG_APP,\n 8405                     packageName);\n 8406                 Settings.Global.putInt(\n 8407                     resolver, Settings.Global.WAIT_FOR_DEBUGGER,\n 8408                     waitForDebugger ? 1 : 0);\n 8409             }\n 8410 \n 8411             synchronized (this) {\n 8412                 if (!persistent) {\n 8413                     mOrigDebugApp = mDebugApp;\n 8414                     mOrigWaitForDebugger = mWaitForDebugger;\n 8415                 }\n 8416                 mDebugApp = packageName;\n 8417                 mWaitForDebugger = waitForDebugger;\n 8418                 mDebugTransient = !persistent;\n 8419                 if (packageName != null) {\n 8420                     forceStopPackageLocked(packageName, -1, false, false, true, true,\n 8421                             false, UserHandle.USER_ALL, \"set debug app\");\n</code></pre> <p>\u547d\u4ee4\u7684\u8bbe\u7f6e\u4ec5\u6709\u4e09\u70b9\u5185\u5bb9\uff1asettings\u6570\u636e\u5e93\u3001\u5168\u5c40\u53d8\u91cf\u3001\u505c\u6b62app\u8fdb\u7a0b</p> <p>\u53c2\u6570\u7684\u7ec4\u5408\u6709\u70b9\u4e71\uff0c\u4f7f\u7528\u65f6\u4e00\u822c<code>-w --persistent</code>\u4e00\u8d77\u7528\uff0c\u8fd9\u6837\u6bcf\u6b21app\u542f\u52a8\u90fd\u4f1a\u7b49\u5f85AS\u7684debug\u4e86\u3002</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#12settingdebug","title":"1.2\u3001Setting\u4e2d\u7684debug\u8bbe\u7f6e","text":"<p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u5c0f\u8282\u8bbe\u7f6e\u7684\u6570\u636e\u5e93\u4ec5\u4ec5\u662f\u4e3a\u4e86\u540c\u6b65\u4fe1\u606f\u3002\u3002\u3002\uff0c\u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u4efb\u4f55\u7528\u5904</p> <p>\u6ca1\u6709\u4eba\u76d1\u542c\u8fd9\u4e2a\u6570\u636e\u5e93\uff0c\u53ea\u662f\u5728\u8bbe\u7f6e\u91cc\u68c0\u67e5\u8be5\u503c\uff0c\u51b3\u5b9a\u8bbe\u7f6e\u91cc\u5f00\u53d1\u8005\u9009\u9879\u7684UI\uff0c\u5982\u4f55\u663e\u793a\u3002</p> <p></p> <p>\u53e6\u5916\u8bf4\u4e0b\u8bbe\u7f6e\u91cc\u7684\u5b9e\u73b0\uff0c\u5982\u4f55\u8bbe\u7f6edebug app \u548cdebugger\u7684\uff0c\u7b54\u6848\uff1a\u540c\u547d\u4ee4\u884c\u4e00\u6837\u8c03\u7528\u63a5\u53e3<code>ActivityManagerService.java#setDebugApp</code></p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#waitfordebuggerpreferencecontrollerjavawritedebuggerappoptions","title":"WaitForDebuggerPreferenceController.java#writeDebuggerAppOptions","text":"<p>packages/apps/Settings/src/com/android/settings/development/WaitForDebuggerPreferenceController.java</p> <pre><code>103     private void writeDebuggerAppOptions(String packageName, boolean waitForDebugger,\n104             boolean persistent) {\n105         try {\n106             getActivityManagerService().setDebugApp(packageName, waitForDebugger, persistent);\n</code></pre> <p>\u6240\u4ee5\u5bf9\u6d41\u7a0b\u6709\u5f71\u54cd\u7684\u662fAMS\u91cc\u7684\u51e0\u4e2a\u5168\u5c40\u53d8\u91cf\u3002\u770b\u4e0b\u9762</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#13","title":"1.3\u3001\u8fdb\u5165\u7b49\u5f85","text":"","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitymanagerservicejavaattachapplicationlocked","title":"ActivityManagerService.java#attachApplicationLocked","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p> <pre><code> 5011     private boolean attachApplicationLocked(@NonNull IApplicationThread thread,\n 5012             int pid, int callingUid, long startSeq) {\n 5144         try {\n 5145             int testMode = ApplicationThreadConstants.DEBUG_OFF;\n 5146             if (mDebugApp != null &amp;&amp; mDebugApp.equals(processName)) {\n 5147                 testMode = mWaitForDebugger\n 5148                     ? ApplicationThreadConstants.DEBUG_WAIT\n 5149                     : ApplicationThreadConstants.DEBUG_ON;\n 5150                 app.setDebugging(true);\n 5151                 if (mDebugTransient) {\n 5152                     mDebugApp = mOrigDebugApp;\n 5153                     mWaitForDebugger = mOrigWaitForDebugger;\n ......\n 5318                 thread.bindApplication(processName, appInfo, providerList, null, profilerInfo,\n 5319                         null, null, null, testMode,\n</code></pre> <p>\u5047\u8bbe\u5f53\u524d\u662f<code>-w --persistent</code>\uff0c5147\u884c\uff0ctestMode\u4e3aDEBUG_WAIT</p> <p>5150\u7ed9ProcessRecord\u8bbe\u7f6e\u6807\u5fd7\u4f4d<code>mDebugging = ture</code></p> <p>5318\u884c\uff0cbinder\u8c03\u7528\u5230app\u8fdb\u7a0bbindApplication\u9636\u6bb5</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitythreadjavaapplicationthreadbindapplication","title":"ActivityThread.java$ApplicationThread#bindApplication","text":"<p>frameworks/base/core/java/android/app/ActivityThread.java</p> <pre><code>         private class ApplicationThread extends IApplicationThread.Stub {    \n1036         public final void bindApplication(String processName, ApplicationInfo appInfo, \n1040                 IUiAutomationConnection instrumentationUiConnection, int debugMode,\n1074             AppBindData data = new AppBindData();\n1082             data.debugMode = debugMode;\n1094             sendMessage(H.BIND_APPLICATION, data);\n</code></pre> <p>1094\u884c\uff0c\u8f6c\u5230\u4e3b\u7ebf\u7a0b</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#activitythreadjavahandlebindapplication","title":"ActivityThread.java#handleBindApplication","text":"<p>frameworks/base/core/java/android/app/ActivityThread.java</p> <pre><code>1907         public void handleMessage(Message msg) {\n1909             switch (msg.what) {\n1910                 case BIND_APPLICATION:\n1911                     Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n1912                     AppBindData data = (AppBindData)msg.obj;\n1913                     handleBindApplication(data);\n------------------------------------------------------------------\n6500         if (data.debugMode != ApplicationThreadConstants.DEBUG_OFF) {\n6501             // XXX should have option to change the port.\n6502             Debug.changeDebugPort(8100);\n6503             if (data.debugMode == ApplicationThreadConstants.DEBUG_WAIT) {\n6504                 Slog.w(TAG, \"Application \" + data.info.getPackageName()\n6505                       + \" is waiting for the debugger on port 8100...\");\n6506 \n6507                 IActivityManager mgr = ActivityManager.getService();\n6508                 try {\n6509                     mgr.showWaitingForDebugger(mAppThread, true);\n6510                 } catch (RemoteException ex) {\n6511                     throw ex.rethrowFromSystemServer();\n6512                 }\n6513 \n6514                 Debug.waitForDebugger();\n6515 \n6516                 try {\n6517                     mgr.showWaitingForDebugger(mAppThread, false);\n6518                 } catch (RemoteException ex) {\n6519                     throw ex.rethrowFromSystemServer();\n6520                 }\n6521 \n6522             } else {\n6523                 Slog.w(TAG, \"Application \" + data.info.getPackageName()\n6524                       + \" can be debugged on port 8100...\");\n</code></pre> <p>\u6709\u4e24\u79cddebug\u94fe\u63a5\u65b9\u5f0f\uff0c\u4e00\u662f6514\u884cDEBUG_WAIT\uff0c\u4e8c\u662f\u901a\u8fc76502\u884c\u8bbe\u7f6e\u7684\u7aef\u53e3\u3002\u6211\u4eec\u4e00\u822c\u901a\u8fc7\u7b2c\u4e00\u79cd\u3002</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_2","title":"\u4e8c\u3001\u4f7f\u7528","text":"","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_3","title":"\u547d\u4ee4\u63d0\u793a","text":"<pre><code>generic_x86_64:/ # am\nActivity manager (activity) commands:\n  set-debug-app [-w] [--persistent] &lt;PACKAGE&gt;\n      Set application &lt;PACKAGE&gt; to debug.  Options are:\n      -w: wait for debugger when application starts\n      --persistent: retain this value\n  clear-debug-app\n      Clear the previously set-debug-app.\n</code></pre>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_4","title":"\u5b98\u65b9\u6307\u5bfc","text":"<p>\u89c1\u94fe\u63a5Debug your app</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_5","title":"\u793a\u4f8b","text":"<ul> <li>\u6572\u547d\u4ee4</li> </ul> <pre><code>generic_x86_64:/ # am set-debug-app -w --persistent com.example.myapplication\n</code></pre> <ul> <li>\u7136\u540e\u70b9\u51fb\u542f\u52a8app\u3002\u6b64\u65f6\u4f1a\u51fa\u73b0\u5f39\u7a97\u7b49\u5f85AS\u4e0a\u7684\u64cd\u4f5c</li> </ul> <ul> <li> <p>AS\u4e0a**Attach Debugger to Android Process**</p> <p>\u5728AndroidStudio\u4e2d\u7684\u64cd\u4f5c\u8def\u5f84\u4e3aAttach Debugger to Android Process \u2192 \u9009\u62e9\u94fe\u63a5\u8bbe\u5907\u4e0a\u7684\u8fdb\u7a0b\u3002\u5982\u4e0b\u56fe</p> </li> </ul> <p></p> <p>\u9009\u4e2d\u6211\u4eec\u7684\u8fdb\u7a0b\uff0c\u70b9ok\u5c31\u597d\u4e86\u3002\u5982\u679c\u6709\u6b63\u786e\u65ad\u70b9\uff0c\u5219\u4ee3\u7801\u4f1a\u8d70\u5230\u65ad\u70b9\u5904\u3002</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/am-set-debug-app/#_6","title":"\u4e09\u3001\u603b\u7ed3","text":"<p>1\u3001\u8bbe\u7f6e\u5f00\u53d1\u8005\u9009\u9879\u548c\u547d\u4ee4\u884c\u5b9e\u73b0\u5b8c\u5168\u4e00\u81f4</p> <p>2\u3001\u7b49\u5f85debugger\u7684\u70b9\u5728Activity\u51b7\u542f\u52a8bindeApplication\u9636\u6bb5\u3002</p> <p>\u6211\u4eec\u77e5\u9053\uff0capp\u8fdb\u7a0b\u542f\u52a8\u540e\u7ecf\u5386\u521d\u59cb\u5316\u2192attach\u5230AMS\uff0c\u7136\u540e\u624d\u662fAMS\u56de\u6765bindeApplication\u9636\u6bb5\u3002\u6240\u4ee5\u4e4b\u524d\u7684\u4ee3\u7801\u6d41\u7a0b\u7528\u8fd9\u4e2a\u5de5\u5177\u662f\u65ad\u70b9\u4e0d\u5230\u7684\uff0c\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\uff0c\u5c06<code>Debug.waitForDebugger();</code>\u653e\u5728\u4f60\u5e0c\u671b\u7684\u5730\u65b9\u3002 \u6bd4\u5982\u65ad\u70b9\u8c03\u8bd5SystemServer\u65f6\u53ef\u4ee5\u8fd9\u6837\u5199</p> <p>frameworks/base/services/java/com/android/server/SystemServer.java</p> <pre><code> 413     public static void main(String[] args) {\n 414         boolean bootDebug = \"1\".equals(SystemProperties.get(\"persist.boot.debug\"));\n 415         if(bootDebug){\n 416             android.ddm.DdmHandleAppName.setAppName(\"system_process\",\n 417                     UserHandle.myUserId());\n 418             android.os.Debug.waitForDebugger();                                         \n 419         }\n 420         new SystemServer().run();\n 421     }\n</code></pre> <p>3\u3001\u5173\u4e8eAS\u8c03\u8bd5app\u7684\u5176\u4ed6\u8d44\u6599\uff0c\u53ef\u4ee5\u770b\u5b98\u7f51Debug your app</p>","tags":["Android","Binder"]},{"location":"android/debug-skill/privapp-permissions/","title":"privapp permissions\u68c0\u67e5","text":"<p>privapp permissions\u7684\u6743\u9650\u4e0d\u5bb9\u6613\u590d\u73b0\u51fa\u6765\uff0c\u53ea\u6709\u91cd\u542f\u624b\u673a\u540e\u624d\u4f1a\u89e6\u53d1\u3002</p> <p>\u5f88\u591a\u5f00\u53d1\u8005\u6bcf\u6b21push apk\u90fd\u53ea\u662f\u91cd\u542fapk\u8fdb\u7a0b\u800c\u5df2\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5bfc\u81f4apk\u5408\u5165\u7248\u672c\u540e\uff0c\u7b2c\u4e8c\u5929\u7684daily\u5f00\u4e0d\u4e86\u673a\u3002</p> <p>\u5176\u5b9egoogle\u662f\u6709\u4e00\u4e2a\u4e13\u95e8\u68c0\u67e5\u8fd9\u7c7b\u6743\u9650\u7684\u811a\u672c\u7684\uff0c\u653e\u5728 development/tools/privapp_permissions/privapp_permissions.py </p> <p>\u53ea\u9700\u8981\u6267\u884c\uff1a</p> <pre><code>python development/tools/privapp_permissions/privapp_permissions.py XXXX.apk \n</code></pre> <p>\u5982\u679c\u6709\u7279\u6b8a\u7684\u6743\u9650\u8fd8\u672a\u914d\u7f6e\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code># Defaulting the target partition to \"system\". Use -p option to specify the target partition (must provide one target instead of a list).\n\n################################################################################\n#\n# system XML:\n#\n################################################################################\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!-- for the partition: /system --&gt;\n&lt;permissions&gt;\n    &lt;!-- Additional permissions on top of privapp-permissions-platform.xml --&gt;\n    &lt;privapp-permissions package=\"com.android.systemui\"&gt;\n        &lt;permission name=\"android.permission.SCHEDULE_EXACT_ALARM\"/&gt;\n    &lt;/privapp-permissions&gt;\n\n&lt;/permissions&gt;\n</code></pre>","tags":["Android","\u5de5\u5177","permissions","privapp"]},{"location":"android/debug-skill/event-log/","title":"\u501f\u52a9 event log \u6709\u6548\u6392\u67e5\u95ee\u9898","text":"","tags":["Android","event log"]},{"location":"android/debug-skill/event-log/#system-log","title":"system log","text":"<p>user\u7248\u672clog\u6709\u9650\uff0c\u770b\u5230\u5173\u952e\u7684\u4e00\u884clog\u3002\u5982\u4e0b\uff1a</p> <pre><code>11-15 15:39:34.053  2839  3519 I GestureLauncherService: Power button double tap gesture detected, launching camera. Interval=202ms\n</code></pre> <p>\u901a\u8fc7\u8fd9\u884clog\u6211\u4eec\u662f\u5c31\u6709\u786e\u5b9a BSP \u4e0a\u62a5\u4e86\u4e24\u6b21 power \u952e\u7684\u65f6\u95f4\u95f4\u9694\u662f 202 ms\u3002 GestureLauncherService\u68c0\u6d4b\u5230\u4e86\uff0c\u5e76\u4e14\u8c03\u4e86 handleCameraGesture() \u51fd\u6570\uff0c\u4f46 handleCameraGesture()  \u51fd\u6570\u91cc\u7684 log \u5728 user \u7248\u672c\u4e0d\u6253\u5370\uff0c\u6240\u4ee5\u4e0d\u80fd\u5b8c\u5168\u786e\u5b9a handleCameraGesture()  \u51fd\u6570\u662f\u8c03\u5230 StatusBarManagerService.onCameraLaunchGestureDetected() \u91cc\u3002 \u4e5f\u5c31\u662f \u73b0\u5728\u8981\u6392\u67e5 handleCameraGesture() \u8fd4\u56de\u7684\u662f true \u8fd8\u662f false \u3002</p> <pre><code>public class GestureLauncherService extends SystemService {\n\n    private static final boolean DBG = false;\n\n    /**\n     * Attempts to intercept power key down event by detecting certain gesture patterns\n     *\n     * @param interactive true if the event's policy contains {@code FLAG_INTERACTIVE}\n     * @param outLaunched true if some action is taken as part of the key intercept (eg, app launch)\n     * @return true if the key down event is intercepted\n     */\n    public boolean interceptPowerKeyDown(KeyEvent event, boolean interactive,\n            MutableBoolean outLaunched) {\n        ...\n\n        if (launchCamera) {\n            Slog.i(TAG, \"Power button double tap gesture detected, launching camera. Interval=\"\n                    + powerTapInterval + \"ms\");\n            launchCamera = handleCameraGesture(false /* useWakelock */,\n                    StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP);\n            if (launchCamera) {\n                mMetricsLogger.action(MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE,\n                        (int) powerTapInterval);\n                mUiEventLogger.log(GestureLauncherEvent.GESTURE_CAMERA_DOUBLE_TAP_POWER);\n            }\n        }\n\n        ...\n    }\n\n    /**\n     * @return true if camera was launched, false otherwise.\n     */\n    @VisibleForTesting\n    boolean handleCameraGesture(boolean useWakelock, int source) {\n        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"GestureLauncher:handleCameraGesture\");\n        try {\n            boolean userSetupComplete = isUserSetupComplete();\n            if (!userSetupComplete) {\n                if (DBG) {\n                    Slog.d(TAG, String.format(\n                            \"userSetupComplete = %s, ignoring camera gesture.\",\n                            userSetupComplete));\n                }\n                return false;\n            }\n            if (DBG) {\n                Slog.d(TAG, String.format(\n                        \"userSetupComplete = %s, performing camera gesture.\",\n                        userSetupComplete));\n            }\n\n            if (useWakelock) {\n                // Make sure we don't sleep too early\n                mWakeLock.acquire(500L);\n            }\n            StatusBarManagerInternal service = LocalServices.getService(\n                    StatusBarManagerInternal.class);\n            service.onCameraLaunchGestureDetected(source);\n            return true;\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n        }\n    }\n\n}\n</code></pre>","tags":["Android","event log"]},{"location":"android/debug-skill/event-log/#event-log_1","title":"event log","text":"<p>\u4ed4\u7ec6\u770b\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 handleCameraGesture() \u51fd\u6570\u540e\uff0c\u6839\u636e\u5176\u8fd4\u56de\u503c\u5224\u65ad\uff0c\u5982\u679c\u662f true \u5219\u6267\u884c\uff1a</p> <pre><code>launchCamera = handleCameraGesture(false /* useWakelock */,\n        StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP);\nif (launchCamera) {\n    // MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE = 255;\n    mMetricsLogger.action(MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE,\n            (int) powerTapInterval);\n    mUiEventLogger.log(GestureLauncherEvent.GESTURE_CAMERA_DOUBLE_TAP_POWER);\n}\n</code></pre> <p>\u8fd9\u5c31\u597d\u529e\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 event log \u786e\u5b9a\u5728\u540c\u4e00\u65f6\u95f4\u5185\u662f\u5426\u6709 MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE \u5c31\u597d\u4e86\u3002</p> <p>\u90a3\u6211\u4eec\u63a5\u7740\u770b MetricsLogger.action() \u90fd\u5728\u5e72\u561b\u3002</p> <pre><code>frameworks/base/proto/src/metrics_constants/metrics_constants.proto\n\npublic class MetricsLogger {\n\n    public void action(int category, int value) {\n        // MetricsEvent.TYPE_ACTION = 4;\n        saveLog(new LogMaker(category).setType(MetricsEvent.TYPE_ACTION).setSubtype(value));\n    }\n}\n\n\npublic class LogMaker {\n    public LogMaker(int category) {\n        setCategory(category);\n    }\n\n    public LogMaker setCategory(int category) {\n        // MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY = 575;\n        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY, category);\n        return this;\n    }\n\n     public LogMaker setType(int type) {\n        // MetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE = 758;\n        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE, type);\n        return this;\n    }\n\n    public LogMaker setSubtype(int subtype) {\n        // MetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE = 759;\n        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE, subtype);  \n        return this;  \n    }\n}\n</code></pre> <p>\u6240\u4ee5\uff0c\u8fd9\u91cc mMetricsLogger.action(MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE, (int) powerTapInterval); \u5e94\u8be5\u4fdd\u5b58\u8fd9\u6837\u7684log\uff1a</p> <pre><code>[MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY, MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE\nMetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE, MetricsEvent.TYPE_ACTION\nMetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE, powerTapInterval]\n</code></pre> <p>\u4e5f\u5c31\u662f\u67096\u4e2a\u6570\u5b57\uff0c[category, category_value, type, type_value, subtype, subtype-value]</p> <p>\u6700\u7ec8\u4e5f\u5c31\u662f\uff1a</p> <pre><code>[757,255,758,4,759,powerTapInterval]\n</code></pre> <p>\u5982\u679c\u901a\u8fc7\u67e5\u770b event log \u53ef\u4ee5\u770b\u5230\uff1a</p> <pre><code>11-15 15:39:34.053  2839  3519 I sysui_multi_action: [757,255,758,4,759,202]\n</code></pre> <p>nice\uff01\u8fd9\u91cc\u5df2\u7ecf\u53ef\u4ee5\u8bc1\u660e handleCameraGesture() \u51fd\u6570\u8fd4\u56de true \uff1b\u4e5f\u5c31\u662f\u8c03\u5230\u4e86 StatusBarManagerService.onCameraLaunchGestureDetected() \u3002</p>","tags":["Android","event log"]},{"location":"android/debug-skill/merge-sort-log/","title":"\u6309\u65f6\u95f4\u987a\u5e8f\u5408\u5e76log","text":"<pre><code>cat system.txt events.txt main.txt | sort -n | sort -u &gt; all.txt\n</code></pre>","tags":["Android","log","debug"]},{"location":"android/debug-skill/jdwp-enabled/","title":"\u65e0\u6cd5\u6253\u65ad\u70b9\u8c03\u8bd5","text":"<pre><code>adb root\nadb shell setprop persist.debug.dalvik.vm.jdwp.enabled 1 \nadb reboot\n</code></pre>","tags":["Android","\u65ad\u70b9","debug"]},{"location":"android/debug-skill/frequency/cpu/","title":"CPU\u63d0\u9891\u547d\u4ee4","text":"<p>CPU performance mode\uff1a </p> <pre><code>adb shell \"echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor\"\nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor\" \nadb shell \"echo performance &gt; /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor\"\n</code></pre> <p></p> <p>\u8bbe\u7f6e\u524d</p> <p></p>","tags":["Android","CPU","\u8c03\u9891"]},{"location":"android/debug-skill/frequency/gpu/","title":"GPU\u63d0\u9891\u547d\u4ee4","text":"<p>\u5728qcom\u5e73\u53f0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9GPU\u8fdb\u884c\u63d0\u9891\uff0c\u4eb2\u6d4b\u6709\u6548\uff1a</p> <p>GPU performance mode:</p> <pre><code>adb shell \"echo 1000000 &gt; /sys/class/kgsl/kgsl-3d0/idle_timer\" adb shell \"echo 0 &gt; /sys/class/kgsl/kgsl-3d0/min_pwrlevel\" adb shell \"echo performance &gt; /sys/class/kgsl/kgsl-3d0/devfreq/governor\"\n</code></pre> <p>\u8bbe\u7f6e\u524d\uff1a</p> <p></p> <p>\u63d0\u9891\u524d GPU\u8dd1\u6700\u4f4e\u9891</p> <p>\u8bbe\u7f6e\u540e\uff1a</p> <p></p> <p>\u63d0\u9891\u540e\uff0cGPU \u8dd1\u6700\u9ad8\u9891</p> <p>\u5e73\u53f0\u652f\u6301\u7684\u5404\u4e2a\u9891\u70b9\uff1a</p> <p></p>","tags":["Android","GPU","\u8c03\u9891"]},{"location":"android/issue-solution/set-affinity/","title":"Android\u8fdb\u7a0b\u7ed1\u6838\u65b9\u6848","text":"<p>\u5728Android\u7cfb\u7edf\u4e2d\uff0c\u7ed9\u8fdb\u7a0b\u7ed1\u6838\uff08\u5c06\u8fdb\u7a0b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684CPU\u6838\u5fc3\uff09\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u6027\u80fd\u4f18\u5316\u6280\u672f\u3002\u901a\u8fc7\u5408\u7406\u7684\u7ed1\u6838\u64cd\u4f5c\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u548c\u54cd\u5e94\u901f\u5ea6\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5728Android\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u8fdb\u7a0b\u7ed1\u6838\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_2","title":"\u4ec0\u4e48\u662f\u7ed1\u6838","text":"<p>\u7ed1\u6838\u662f\u6307\u5c06\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684CPU\u6838\u5fc3\u4e0a\uff0c\u4f7f\u5176\u53ea\u80fd\u5728\u6307\u5b9a\u7684\u6838\u5fc3\u4e0a\u8fd0\u884c\u3002\u8fd9\u53ef\u4ee5\u51cf\u5c11\u8fdb\u7a0b\u5728\u4e0d\u540c\u6838\u5fc3\u4e4b\u95f4\u5207\u6362\u7684\u5f00\u9500\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_3","title":"\u7ed1\u6838\u7684\u610f\u4e49","text":"<ul> <li>\u63d0\u9ad8\u6027\u80fd\uff1a\u51cf\u5c11\u8fdb\u7a0b\u5728\u4e0d\u540c\u6838\u5fc3\u4e4b\u95f4\u5207\u6362\u7684\u5f00\u9500\u3002</li> <li>\u4f18\u5316\u8d44\u6e90\u4f7f\u7528\uff1a\u5728\u591a\u6838\u7cfb\u7edf\u4e2d\uff0c\u5408\u7406\u5206\u914d\u8fdb\u7a0b\u5230\u4e0d\u540c\u7684\u6838\u5fc3\u53ef\u4ee5\u63d0\u9ad8\u6574\u4f53\u7cfb\u7edf\u7684\u8d44\u6e90\u5229\u7528\u7387\u3002</li> <li>\u964d\u4f4e\u5ef6\u8fdf\uff1a\u5bf9\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u5e94\u7528\uff0c\u7ed1\u6838\u53ef\u4ee5\u51cf\u5c11\u8c03\u5ea6\u5ef6\u8fdf\u3002</li> </ul>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_4","title":"\u7ed1\u6838\u65b9\u6848","text":"","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_5","title":"\u8fdb\u7a0b\u81ea\u5df1\u7ed1\u6838","text":"<p>\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u4e2d\uff0c\u901a\u8fc7JNI\u8c03\u7528\u672c\u5730\u65b9\u6cd5\u6765\u5b9e\u73b0\u7ed1\u6838\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u5f00\u53d1\u8005\u5e0c\u671b\u5728\u5e94\u7528\u5c42\u9762\u8fdb\u884c\u6027\u80fd\u4f18\u5316\u7684\u573a\u666f\u3002</p> <pre><code>public class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        bindProcessToCpu(0); // \u7ed1\u5b9a\u5230CPU 0\n    }\n\n    private void bindProcessToCpu(int cpuId) {\n        nativeBindProcessToCpu(cpuId);\n    }\n\n    static {\n        System.loadLibrary(\"native-lib\");\n    }\n\n    private native void nativeBindProcessToCpu(int cpuId);\n}\n</code></pre> <p>\u5bf9\u5e94\u7684JNI\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;jni.h&gt;\n#include &lt;sched.h&gt;\n#include &lt;unistd.h&gt;\n\nJNIEXPORT void JNICALL\nJava_com_example_myapplication_MyApplication_nativeBindProcessToCpu(JNIEnv *env, jobject thiz, jint cpu_id) {\n    cpu_set_t cpuset;\n    CPU_ZERO(&amp;cpuset);\n    CPU_SET(cpu_id, &amp;cpuset);\n    sched_setaffinity(getpid(), sizeof(cpu_set_t), &amp;cpuset);\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#zygote","title":"\u5728Zygote\u8fdb\u7a0b\u4e2d\u7ed1\u6838","text":"<p>\u5728Zygote\u8fdb\u7a0b\u7684<code>SpecializeCommon</code>\u51fd\u6570\u4e2d\u8fdb\u884c\u7ed1\u6838\u64cd\u4f5c\uff0c\u53ef\u4ee5\u786e\u4fdd\u6240\u6709\u4eceZygote fork\u51fa\u7684\u5b50\u8fdb\u7a0b\u90fd\u88ab\u7ed1\u5b9a\u5230\u6307\u5b9a\u7684CPU\u6838\u5fc3\u3002</p> <pre><code>// \u5728Zygote\u7684SpecializeCommon\u51fd\u6570\u4e2d\nvoid SpecializeCommon(...) {\n    // \u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801\n\n    // \u8fdb\u884c\u7ed1\u6838\u64cd\u4f5c\n    cpu_set_t cpuset;\n    CPU_ZERO(&amp;cpuset);\n    CPU_SET(target_cpu_id, &amp;cpuset); // target_cpu_id\u662f\u4f60\u5e0c\u671b\u7ed1\u5b9a\u7684CPU\n    sched_setaffinity(getpid(), sizeof(cpu_set_t), &amp;cpuset);\n\n    // \u7ee7\u7eed\u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#system_server","title":"system_server\u8fdb\u7a0b\u7684\u67d0\u4e2a\u670d\u52a1\u7ed1\u6838","text":"<p>\u5728 <code>ActivityManagerService</code> \u4e2d\u5b9e\u73b0\u5bf9\u7279\u5b9a\u5e94\u7528\u8fdb\u7a0b\u7684\u7ed1\u6838\u3002</p> <pre><code>// \u5728ActivityManagerService\u4e2d\nprivate void bindProcessToCpu(int pid, int cpuId) {\n    nativeBindProcessToCpu(pid, cpuId);\n}\n\nprivate native void nativeBindProcessToCpu(int pid, int cpuId);\n\n// \u5728\u5408\u9002\u7684\u5730\u65b9\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\nprivate void adjustAppThreadPriority() {\n    int pid = ...; // \u83b7\u53d6\u8fdb\u7a0bID\n    bindProcessToCpu(pid, 1); // \u7ed1\u5b9a\u5230CPU 1\n}\n</code></pre> <p>JNI\u7684\u4ee3\u7801\u8fd8\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>// frameworks/base/services/core/jni/com_android_server_am_ActivityManagerService.cpp\n\n#include &lt;jni.h&gt;\n#include &lt;sched.h&gt;\n#include &lt;unistd.h&gt;\n\nJNIEXPORT void JNICALL\nandroid_server_am__ActivityManagerService_nativeBindProcessToCpu(JNIEnv*, jobject , jint pid, jint cpu_id) {\n    cpu_set_t cpuset;\n    CPU_ZERO(&amp;cpuset);\n    CPU_SET(cpu_id, &amp;cpuset);\n    if (sched_setaffinity(pid, sizeof(cpu_set_t), &amp;cpuset) != 0) {\n        perror(\"sched_setaffinity\");\n    }\n}\n</code></pre> <p>\u6216\u8005\u662f\u5728\u8fdb\u7a0b\u542f\u52a8\u540e\uff0c\u53ef\u4ee5\u5728AMS\u4e2d\u627e\u5230\u5408\u9002\u7684\u65f6\u673a\u8fdb\u884c\u7ed1\u6838\u3002\u4f8b\u5982\uff0c\u5728\u5e94\u7528\u5207\u6362\u5230\u524d\u53f0\u65f6\u8fdb\u884c\u7ed1\u6838\u3002</p> <pre><code>// \u5728AMS\u4e2d\nprivate void onAppForeground(int pid) {\n    bindProcessToCpu(pid, 1); // \u7ed1\u5b9a\u5230CPU 1\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_6","title":"\u65b0\u589e\u670d\u52a1\u8fdb\u7a0b\u7ed1\u6838","text":"<p>\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u670d\u52a1\uff08Java\u670d\u52a1\u6216Native\u670d\u52a1\uff09\uff0c\u63a5\u6536\u5916\u90e8\u6d88\u606f\uff0c\u901a\u8fc7\u5305\u540d\u67e5\u8be2\u5f97\u5230pid_t\u540e\u518d\u8fdb\u884c\u7ed1\u6838\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#java","title":"Java\u670d\u52a1\u793a\u4f8b","text":"<pre><code>public class CpuBindService extends Service {\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        String packageName = intent.getStringExtra(\"packageName\");\n        int pid = getProcessIdByPackageName(packageName);\n        bindProcessToCpu(pid, 1);\n        return START_NOT_STICKY;\n    }\n\n    private int getProcessIdByPackageName(String packageName) {\n        // \u5b9e\u73b0\u83b7\u53d6\u8fdb\u7a0bID\u7684\u903b\u8f91\n    }\n\n    private void bindProcessToCpu(int pid, int cpuId) {\n        // \u7ed1\u5b9a\u903b\u8f91\u540c\u524d\u9762\u7684\u65b9\u6848\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u53ea\u662f\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6700\u597d\u662f\u7528AIDI\u7684\u65b9\u5f0f\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#native","title":"Native\u670d\u52a1\u793a\u4f8b","text":"<pre><code>#include &lt;sched.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;dirent.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid bindProcessToCpu(pid_t pid, int cpu_id) {\n    cpu_set_t cpuset;\n    CPU_ZERO(&amp;cpuset);\n    CPU_SET(cpu_id, &amp;cpuset);\n    sched_setaffinity(pid, sizeof(cpu_set_t), &amp;cpuset);\n}\n\npid_t getProcessIdByName(const char *processName) {\n    // \u5b9e\u73b0\u83b7\u53d6\u8fdb\u7a0bID\u7684\u903b\u8f91\n}\n\nint main() {\n    // \u63a5\u6536\u6d88\u606f\u903b\u8f91\n    const char *targetProcessName = \"com.example.targetapp\";\n    pid_t pid = getProcessIdByName(targetProcessName);\n    if (pid &gt; 0) {\n        bindProcessToCpu(pid, 1); // \u7ed1\u5b9a\u5230CPU 1\n    }\n    return 0;\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_7","title":"\u4f7f\u7528\u547d\u4ee4\u7ed1\u6838","text":"<p>\u5728\u8bbe\u5907\u5df2\u7ecfroot\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u6765\u8c03\u6574\u8fdb\u7a0b\u7684CPU\u4eb2\u548c\u6027\u3002</p> <pre><code>taskset -p 0x1 &lt;process_id&gt;\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_8","title":"\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7","text":"<p>\u9664\u4e86\u7ed1\u6838\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\u6765\u4f18\u5316\u6027\u80fd\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#java_1","title":"Java\u5c42\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7","text":"<pre><code>public class MyThread extends Thread {\n    @Override\n    public void run() {\n        // \u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5bb9\n    }\n}\n\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        MyThread thread = new MyThread();\n        thread.setPriority(Thread.MAX_PRIORITY); // \u8bbe\u7f6e\u6700\u9ad8\u4f18\u5148\u7ea7\n        thread.start();\n    }\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#native_1","title":"Native\u5c42\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7","text":"<pre><code>#include &lt;pthread.h&gt;\n#include &lt;sched.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid* threadFunction(void* arg) {\n    // \u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5bb9\n    return NULL;\n}\n\nint main() {\n    pthread_t thread;\n    pthread_create(&amp;thread, NULL, threadFunction, NULL);\n\n    struct sched_param param;\n    param.sched_priority = 20; // \u8bbe\u7f6e\u4f18\u5148\u7ea7\n\n    if (pthread_setschedparam(thread, SCHED_FIFO, &amp;param) != 0) {\n        perror(\"pthread_setschedparam\");\n    }\n\n    pthread_join(thread, NULL);\n    return 0;\n}\n</code></pre> <ul> <li> <p>sched_priority\u7684\u503c\u8d8a\u5927\uff0c\u7ebf\u7a0b\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002     POSIX\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\uff08\u5982SCHED_FIFO\u548cSCHED_RR\uff09\u4e2d\uff0c\u4f18\u5148\u7ea7\u662f\u901a\u8fc7<code>sched_priority</code>\u53c2\u6570\u6765\u8bbe\u7f6e\u7684\u3002\u7cfb\u7edf\u4e3a\u8fd9\u4e9b\u7b56\u7565\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u8303\u56f4\uff0c\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7<code>sched_get_priority_max</code>\u548c<code>sched_get_priority_min</code>\u6765\u83b7\u53d6\u8fd9\u4e2a\u8303\u56f4\u3002</p> </li> <li> <p>SCHED_FIFO**\u548c**SCHED_RR\uff1a\u8fd9\u4e9b\u662f\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\uff0c\u9002\u7528\u4e8e\u9700\u8981\u786e\u5b9a\u6027\u8c03\u5ea6\u7684\u4efb\u52a1\u3002\u4f18\u5148\u7ea7\u8d8a\u9ad8\u7684\u7ebf\u7a0b\u5728\u8c03\u5ea6\u65f6\u4f1a\u4f18\u5148\u4e8e\u4f18\u5148\u7ea7\u4f4e\u7684\u7ebf\u7a0b\u3002</p> </li> <li> <p>SCHED_OTHER\uff1a\u8fd9\u662f\u9ed8\u8ba4\u7684\u975e\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\uff0c\u901a\u5e38\u4e0d\u4f7f\u7528<code>sched_priority</code>\u6765\u8bbe\u7f6e\u4f18\u5148\u7ea7\uff0c\u800c\u662f\u4f7f\u7528nice\u503c\uff08\u8d8a\u5c0f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff09\u3002</p> </li> </ul>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_9","title":"\u7cfb\u7edf\u7ea7\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7","text":"<p>\u5728\u7cfb\u7edf\u670d\u52a1\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7Process.setThreadPriority\u6765\u8c03\u6574\u7279\u5b9a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\u3002</p> <pre><code>// \u5728ActivityManagerService\u4e2d\nprivate void setThreadPriority(int pid, int tid, int priority) {\n    try {\n        Process.setThreadPriority(tid, priority);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#cpu","title":"CPU\u6838\u5fc3\u6570\u53ca\u5927\u6838\u5c0f\u6838","text":"<p>\u5728\u79fb\u52a8\u8bbe\u5907\u4e2d\uff0cCPU\u901a\u5e38\u91c7\u7528\u5f02\u6784\u591a\u6838\u67b6\u6784\uff0c\u5305\u542b\u6027\u80fd\u6838\u5fc3\uff08\u5927\u6838\uff09\u548c\u6548\u7387\u6838\u5fc3\uff08\u5c0f\u6838\uff09\u3002\u4e0d\u540c\u5e73\u53f0\u7684\u5177\u4f53\u914d\u7f6e\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u901a\u5e38\u9075\u5faa\u4ee5\u4e0b\u6a21\u5f0f\uff1a</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#qualcomm-snapdragon","title":"\u9ad8\u901a\u5e73\u53f0\uff08Qualcomm Snapdragon\uff09","text":"<ul> <li>\u5927\u6838\uff1a\u901a\u5e38\u4f7f\u7528Cortex-A7x\u7cfb\u5217\uff08\u5982Cortex-A77\u3001Cortex-A78\uff09\uff0c\u8fd9\u4e9b\u6838\u5fc3\u5177\u6709\u8f83\u9ad8\u7684\u65f6\u949f\u9891\u7387\u548c\u6027\u80fd\uff0c\u9002\u5408\u5904\u7406\u9ad8\u8d1f\u8f7d\u4efb\u52a1\u3002</li> <li>\u5c0f\u6838\uff1a\u901a\u5e38\u4f7f\u7528Cortex-A5x\u7cfb\u5217\uff08\u5982Cortex-A55\uff09\uff0c\u8fd9\u4e9b\u6838\u5fc3\u529f\u8017\u8f83\u4f4e\uff0c\u9002\u5408\u5904\u7406\u65e5\u5e38\u4efb\u52a1\u4ee5\u8282\u7701\u7535\u91cf\u3002</li> <li>\u5178\u578b\u914d\u7f6e\uff1a\u4f8b\u5982\uff0cSnapdragon 888\u91c7\u75281\u4e2aCortex-X1\u5927\u6838\u30013\u4e2aCortex-A78\u4e2d\u6838\u548c4\u4e2aCortex-A55\u5c0f\u6838\u3002</li> </ul>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#mtkmediatek","title":"MTK\u5e73\u53f0\uff08MediaTek\uff09","text":"<ul> <li>\u5927\u6838\uff1a\u7c7b\u4f3c\u4e8e\u9ad8\u901a\u5e73\u53f0\uff0c\u901a\u5e38\u4f7f\u7528Cortex-A7x\u7cfb\u5217\u6838\u5fc3\u3002</li> <li>\u5c0f\u6838\uff1a\u4f7f\u7528Cortex-A5x\u7cfb\u5217\u6838\u5fc3\u3002</li> <li>\u5178\u578b\u914d\u7f6e\uff1a\u4f8b\u5982\uff0cMediaTek Dimensity 1200\u91c7\u75281\u4e2aCortex-A78\u5927\u6838\u30013\u4e2aCortex-A78\u4e2d\u6838\u548c4\u4e2aCortex-A55\u5c0f\u6838\u3002</li> </ul>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#cpu_1","title":"CPU\u6838\u5fc3\u7f16\u53f7\u4e0e\u5927\u6838\u5c0f\u6838\u7684\u5173\u7cfb","text":"<p>\u5728\u5f02\u6784\u591a\u6838\u67b6\u6784\u4e2d\uff0cCPU\u6838\u5fc3\u7684\u7f16\u53f7\u5e76\u4e0d\u56fa\u5b9a\u5730\u5bf9\u5e94\u4e8e\u5927\u6838\u6216\u5c0f\u6838\u3002\u5177\u4f53\u54ea\u4e2a\u7f16\u53f7\u5bf9\u5e94\u5927\u6838\u6216\u5c0f\u6838\uff0c\u53d6\u51b3\u4e8e\u82af\u7247\u5382\u5546\u7684\u8bbe\u8ba1\u548c\u914d\u7f6e\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u7cfb\u7edf\u6587\u4ef6\u6216\u4f7f\u7528\u5de5\u5177\u6765\u786e\u5b9a\u6bcf\u4e2a\u6838\u5fc3\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7<code>cat /proc/cpuinfo</code>\u67e5\u770b\u6bcf\u4e2a\u6838\u5fc3\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u5176\u67b6\u6784\u548c\u578b\u53f7\u3002</p> <pre><code>processor   : 0\nmodel name  : ARMv8 Processor rev 2 (v8l)\nBogoMIPS    : 38.40\nFeatures    : fp asimd evtstrm aes pmull sha1 sha2 crc32\nCPU implementer : 0x41\nCPU architecture: 8\nCPU variant : 0x0\nCPU part    : 0xd03\nCPU revision    : 2\n\nprocessor   : 1\nmodel name  : ARMv8 Processor rev 2 (v8l)\nBogoMIPS    : 38.40\nFeatures    : fp asimd evtstrm aes pmull sha1 sha2 crc32\nCPU implementer : 0x41\nCPU architecture: 8\nCPU variant : 0x0\nCPU part    : 0xd03\nCPU revision    : 2\n\nprocessor   : 2\nmodel name  : ARMv8 Processor rev 2 (v8l)\nBogoMIPS    : 38.40\nFeatures    : fp asimd evtstrm aes pmull sha1 sha2 crc32\nCPU implementer : 0x41\nCPU architecture: 8\nCPU variant : 0x0\nCPU part    : 0xd09\nCPU revision    : 2\n\nprocessor   : 3\nmodel name  : ARMv8 Processor rev 2 (v8l)\nBogoMIPS    : 38.40\nFeatures    : fp asimd evtstrm aes pmull sha1 sha2 crc32\nCPU implementer : 0x41\nCPU architecture: 8\nCPU variant : 0x0\nCPU part    : 0xd09\nCPU revision    : 2\n</code></pre> <ul> <li>CPU part\uff1a\u8fd9\u662f\u8bc6\u522bCPU\u6838\u5fc3\u578b\u53f7\u7684\u5173\u952e\u5b57\u6bb5\u3002\u4e0d\u540c\u7684CPU part\u503c\u5bf9\u5e94\u4e0d\u540c\u7684\u6838\u5fc3\u578b\u53f7\u3002</li> <li>ARM Cortex\u578b\u53f7\uff1a<ul> <li>\u5c0f\u6838\uff08\u8282\u80fd\u6838\u5fc3\uff09\uff1a\u901a\u5e38\u662fCortex-A5x\u7cfb\u5217\uff0c\u4f8b\u5982Cortex-A53\u3001Cortex-A55\u3002\u5bf9\u5e94\u7684<code>CPU part</code>\u503c\u53ef\u80fd\u662f<code>0xd03</code>\uff08Cortex-A53\uff09\u6216<code>0xd05</code>\uff08Cortex-A55\uff09\u3002</li> <li>\u5927\u6838\uff08\u6027\u80fd\u6838\u5fc3\uff09\uff1a\u901a\u5e38\u662fCortex-A7x\u7cfb\u5217\uff0c\u4f8b\u5982Cortex-A72\u3001Cortex-A73\u3001Cortex-A75\u3001Cortex-A76\u3002\u5bf9\u5e94\u7684<code>CPU part</code>\u503c\u53ef\u80fd\u662f<code>0xd09</code>\uff08Cortex-A73\uff09\u6216<code>0xd0a</code>\uff08Cortex-A75\uff09\u3002</li> </ul> </li> <li>\u5982\u4f55\u8bc6\u522b\uff1a<ul> <li>\u5728\u793a\u4f8b\u4e2d\uff0c<code>CPU part: 0xd03</code> \u901a\u5e38\u5bf9\u5e94Cortex-A53\uff0c\u8fd9\u662f\u4e00\u4e2a\u5c0f\u6838\u3002</li> <li><code>CPU part: 0xd09</code> \u901a\u5e38\u5bf9\u5e94Cortex-A73\uff0c\u8fd9\u662f\u4e00\u4e2a\u5927\u6838\u3002</li> </ul> </li> </ul>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue-solution/set-affinity/#_10","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u6743\u9650\u8981\u6c42\uff1a\u7ed1\u6838\u548c\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\u901a\u5e38\u9700\u8981root\u6743\u9650\u6216\u7cfb\u7edf\u6743\u9650\u3002</li> <li>\u7cfb\u7edf\u5f71\u54cd\uff1a\u7ed1\u6838\u548c\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\u53ef\u80fd\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u6574\u4f53\u6027\u80fd\u548c\u8d44\u6e90\u8c03\u5ea6\uff0c\u56e0\u6b64\u9700\u8981\u8c28\u614e\u4f7f\u7528\u3002</li> <li>\u8bbe\u5907\u5dee\u5f02\uff1a\u4e0d\u540c\u8bbe\u5907\u7684CPU\u67b6\u6784\u548c\u6838\u5fc3\u6570\u91cf\u53ef\u80fd\u4e0d\u540c\uff0c\u56e0\u6b64\u5728\u8fdb\u884c\u7ed1\u6838\u64cd\u4f5c\u65f6\u9700\u8981\u8003\u8651\u8bbe\u5907\u7684\u5177\u4f53\u7279\u6027\u3002</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728Android\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u8fdb\u7a0b\u7684\u7ed1\u6838\u548c\u7ebf\u7a0b\u4f18\u5148\u7ea7\u8c03\u6574\uff0c\u4ece\u800c\u4f18\u5316\u5e94\u7528\u7684\u6027\u80fd\u548c\u54cd\u5e94\u6027\u3002\u6839\u636e\u5177\u4f53\u7684\u9700\u6c42\u548c\u73af\u5883\u9009\u62e9\u5408\u9002\u7684\u65b9\u6848\uff0c\u786e\u4fdd\u64cd\u4f5c\u7684\u6709\u6548\u6027\u548c\u5b89\u5168\u6027\u3002</p>","tags":["Android","\u6027\u80fd","\u7ed1\u6838"]},{"location":"android/issue_solution/car-service-updatable-call-hide/","title":"CarServiceUpdatable\u5f15\u7528hide\u63a5\u53e3","text":"","tags":["Android","Android.bp"]},{"location":"android/issue_solution/car-service-updatable-call-hide/#carserviceupdatable","title":"CarServiceUpdatable","text":"<p>\u5148\u770b CarServiceUpdatable \u7684 bp \u6587\u4ef6\uff0c\u5728 packages/services/Car/service/Android.bp \u4e2d\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>// Added to car.framework module\nandroid_app {\n    name: \"CarServiceUpdatable\",\n\n    defaults: [\"carservice-updatable-java-defaults\"],\n    privileged: true,\n\n    apex_available: [\"com.android.car.framework\"],\n}\n</code></pre>","tags":["Android","Android.bp"]},{"location":"android/issue_solution/car-service-updatable-call-hide/#carservice-updatable-java-defaults","title":"carservice-updatable-java-defaults","text":"<pre><code>java_defaults {\n    name: \"carservice-updatable-java-defaults\",\n\n    visibility: [\n        \"//packages/services/Car:__subpackages__\",\n    ],\n\n    defaults: [ \"carservice-updatable-min-java-defaults\" ],\n\n    min_sdk_version: \"33\",\n}\n</code></pre>","tags":["Android","Android.bp"]},{"location":"android/issue_solution/car-service-updatable-call-hide/#carservice-updatable-min-java-defaults","title":"carservice-updatable-min-java-defaults","text":"<pre><code>java_defaults {\n    name: \"carservice-updatable-min-java-defaults\",\n\n    srcs: [\n        // add full source for all codes under p/s/Car to reduce unnecessary library allow listing.\n        \":IVehicleGeneratedJavaFiles\",\n        \":android.car.cluster.navigation-src\",\n        \":android.car.watchdoglib-src\",\n        \":cartelemetry-cardata-proto-srcs\",\n        \":cartelemetryservice-proto-srcs\",\n        \":com.android.car.procfsinspector-client-src\",\n        \":statslog-Car-java-gen\",\n        \":iscriptexecutor_aidl\",\n        \"proto/**/*.proto\",\n        \"src/**/*.java\",\n        ],\n\n    aidl: {\n        include_dirs: [\n            \"packages/services/Car/procfs-inspector/client/src\",\n        ],\n    },\n\n    resource_dirs: [\"res\"],\n\n    // Resource is still com.android.car.R\n    aaptflags: [\n        \"--custom-package com.android.car\",\n    ],\n\n    libs: [\n        \"android.car-module.impl\",\n        \"android.car.builtin\",\n        \"framework-annotations-lib\",\n        \"framework-bluetooth\",\n        \"framework-connectivity\",\n        \"framework-connectivity-t.stubs.module_lib\",\n        \"framework-statsd\",\n        \"framework-tethering\",\n        \"framework-wifi\",\n        \"modules-utils-os\",\n        \"modules-utils-preconditions\",\n        \"modules-utils-shell-command-handler\",\n    ],\n\n    static_libs: [\n        \"android.automotive.telemetry.internal-V2-java\",  // ICarTelemetryInternal\n        \"android.automotive.watchdog.internal-V3-java\",\n        \"android.frameworks.automotive.powerpolicy.internal-V1-java\",\n        \"android.frameworks.automotive.powerpolicy-V2-java\",\n        \"android.hidl.base-V1.0-java\",\n        \"android.hardware.automotive.audiocontrol-V1.0-java\",\n        \"android.hardware.automotive.audiocontrol-V2.0-java\",\n        \"android.hardware.automotive.audiocontrol-V3-java\",\n        \"android.hardware.automotive.remoteaccess-V1-java\",\n        \"android.hardware.automotive.vehicle-V2-java\",\n        \"android.hardware.automotive.vehicle.property-V2-java\",\n        \"android.hardware.automotive.vehicle-V2.0-java\",\n        \"android.hardware.health-V1.0-java\",\n        \"android.hardware.health-V2.0-java\",\n        \"android.hardware.automotive.occupant_awareness-V1-java\",\n    ],\n\n    proto: {\n        type: \"lite\",\n    },\n\n    optimize: {\n        proguard_flags_files: [\"proguard.flags\"],\n        enabled: false,\n    },\n\n    // Disable build in PDK, missing aidl import breaks build\n    product_variables: {\n        pdk: {\n            enabled: false,\n        },\n    },\n\n    sdk_version: \"module_current\",    \n\n    java_resources: [\n        \":VehicleHalDefaultProperties_JSON\",\n    ],\n}\n</code></pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 sdk_version \u8bbe\u7f6e\u4e86 module_current\uff0c\u8868\u660e\uff1a</p> <p>\u5141\u8bb8\u8bbf\u95ee\u5e73\u53f0API\uff0c\u5305\u62ec\u5f53\u524d\u5f00\u53d1\u7248\u672c\u4e2d\u672a\u53d1\u5e03\u7684API\uff1b\u4f46\u4e0d\u5305\u62ec \u9690\u85cf\u7684API\uff0c\u4e5f\u5c31\u662f hide \u63a5\u53e3\u3002 </p> <p>\u9700\u8981\u6539\u6210 platform_apis: true\uff0c\u5982\u4e0b\uff1a</p> <pre><code>//sdk_version: \"module_current\",\nplatform_apis: true,\n</code></pre> <p>\u8fd9\u6837\u6539\u4e4b\u540e\uff0c\u4f1a\u62a5\u4e00\u4e9b aidl \u9519\u8bef\uff0c\u8fd8\u9700\u8981\u5728 aidl \u7684 include_dirs \u91cc\u65b0\u589e\uff1a\"frameworks/native/aidl/binder\"</p> <p>\u6539\u52a8\u5982\u4e0b\uff1a</p> <pre><code>aidl: {\n    include_dirs: [\n        \"packages/services/Car/procfs-inspector/client/src\",\n        \"frameworks/native/aidl/binder\",\n    ],\n},\n</code></pre> <p>\u6539\u5b8c\u4e4b\u540e\uff0cCarServiceUpdatable \u6a21\u5757\u5c31\u53ef\u4ee5\u4f7f\u7528 hide \u63a5\u53e3\u4e86\u3002</p>","tags":["Android","Android.bp"]},{"location":"base/51-android-rules/","title":"\u80cc\u666f","text":"<p>\u6709\u4e9bUbuntu\u7248\u672c\u65e0\u6cd5\u8bc6\u522bAndroid\u8bbe\u5907\uff0c\u662f\u56e0\u4e3a/etc/udev/rules.d/\u6587\u4ef6\u5939\u4e0b\u7684.rules\u914d\u7f6e\u6587\u4ef6\u672a\u914d\u7f6e\u5bf9\u5e94\u7684Vendor ID\u548cProduct ID\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u914d\u7f6e\u4e00\u4efd\u5b8c\u6574\u7684rules\u914d\u7f6e\u6587\u4ef6\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","rules"]},{"location":"base/51-android-rules/#51-androidrules","title":"51-android.rules","text":"<pre><code># udev rule to detect android devices\n# These rules refer to http://developer.android.com/tools/device.html\n# Acer\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0502\", MODE=\"0666\", GROUP=\"plugdev\"\n# Archos\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0e79\", MODE=\"0666\", GROUP=\"plugdev\"\n# Asus\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0b05\", MODE=\"0666\", GROUP=\"plugdev\"\n# Azpen Onda\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1f3a\", MODE=\"0666\", GROUP=\"plugdev\"\n# BQ\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2a47\", MODE=\"0666\", GROUP=\"plugdev\"\n# Dell\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"413c\", MODE=\"0666\", GROUP=\"plugdev\"\n# Fairphone\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2ae5\", MODE=\"0666\", GROUP=\"plugdev\"\n# Foxconn\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0489\", MODE=\"0666\", GROUP=\"plugdev\"\n# Fujitsu Toshiba   \nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04c5\", MODE=\"0666\", GROUP=\"plugdev\"\n# Garmin-Asus\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"091e\", MODE=\"0666\", GROUP=\"plugdev\"\n# Genesys\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"d324\", MODE=\"0666\", GROUP=\"plugdev\"\n# Google\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"plugdev\"\n# Haier\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"201e\", MODE=\"0666\", GROUP=\"plugdev\"\n# Hisense\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"109b\", MODE=\"0666\", GROUP=\"plugdev\"\n# HTC, Wiko\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0bb4\", MODE=\"0666\", GROUP=\"plugdev\"\n# Huawei\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"12d1\", MODE=\"0666\", GROUP=\"plugdev\"\n# Intel\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"8087\", MODE=\"0666\", GROUP=\"plugdev\"\n# K-Touch\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"24e3\", MODE=\"0666\", GROUP=\"plugdev\"\n# KT Tech\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2116\", MODE=\"0666\", GROUP=\"plugdev\"\n# Kyocera\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0482\", MODE=\"0666\", GROUP=\"plugdev\"\n# Lab126\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1949\", MODE=\"0666\", GROUP=\"plugdev\"\n# Lenovo\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"17ef\", MODE=\"0666\", GROUP=\"plugdev\"\n# LG\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1004\", MODE=\"0666\", GROUP=\"plugdev\"\n# Mad Catz\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0738\", MODE=\"0666\", GROUP=\"plugdev\"\n# Meizu\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2a45\", MODE=\"0666\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\",ATTRS{idVendor}==\"2a45 \",ATTRS{idProduct}==\"0c01\",MODE=\"0666\",GROUP=\"plugdev\",SYMLINK+=\"android\",SYMLINK+=\"android_adb\"\n# Micromax\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1ebf\", MODE=\"0666\", GROUP=\"plugdev\"\n# Motorola\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"22b8\", MODE=\"0666\", GROUP=\"plugdev\"\n# MTK\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0e8d\", MODE=\"0666\", GROUP=\"plugdev\"\n# NEC\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0409\", MODE=\"0666\", GROUP=\"plugdev\"\n# Nokia\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0421\", MODE=\"0666\", GROUP=\"plugdev\"\n# Nook\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2080\", MODE=\"0666\", GROUP=\"plugdev\"\n# Nvidia\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0955\", MODE=\"0666\", GROUP=\"plugdev\"\n# OnePlus Two (unknown vendor's name)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2a70\", MODE=\"0666\", GROUP=\"plugdev\"\n# Oppo\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"22d9\", MODE=\"0666\", GROUP=\"plugdev\"\n# OTGV\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2257\", MODE=\"0666\", GROUP=\"plugdev\"\n# Pantech\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"10a9\", MODE=\"0666\", GROUP=\"plugdev\"\n# Pegatron\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1d4d\", MODE=\"0666\", GROUP=\"plugdev\"\n# Philips\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0471\", MODE=\"0666\", GROUP=\"plugdev\"\n# PMC-Sierra\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04da\", MODE=\"0666\", GROUP=\"plugdev\"\n# Qualcomm\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"05c6\", MODE=\"0666\", GROUP=\"plugdev\"\n# Rockcwell Electronics\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2207\", MODE=\"0666\", GROUP=\"plugdev\"\n# SK Telesys\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1f53\", MODE=\"0666\", GROUP=\"plugdev\"\n# Samsung\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04e8\", MODE=\"0666\", GROUP=\"plugdev\"\n# Sharp\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04dd\", MODE=\"0666\", GROUP=\"plugdev\"\n# Sony\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"054c\", MODE=\"0666\", GROUP=\"plugdev\"\n# Sony Ericsson\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0fce\", MODE=\"0666\", GROUP=\"plugdev\"\n# Spreadtrum\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1782\", MODE=\"0666\", GROUP=\"plugdev\"\n# T &amp; A Mobile Phones\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1bbb\", MODE=\"0666\", GROUP=\"plugdev\"\n# Teleepoch\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2340\", MODE=\"0666\", GROUP=\"plugdev\"\n# Texas Instruments UsbBoot\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", MODE=\"0666\", GROUP=\"plugdev\"\n# Toshiba\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0930\", MODE=\"0666\", GROUP=\"plugdev\"\n# Wearners\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"05c6\", MODE=\"0666\", GROUP=\"plugdev\"\n# Wileyfox\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2970\", MODE=\"0666\", GROUP=\"plugdev\"\n# XiaoMi\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2717\", MODE=\"0666\", GROUP=\"plugdev\"\n# YU\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"1ebf\", MODE=\"0666\", GROUP=\"plugdev\"\n# Zebra\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"05e0\", MODE=\"0666\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", MODE=\"0666\", GROUP=\"plugdev\"\n# ZTE\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"19d2\", MODE=\"0666\", GROUP=\"plugdev\"\n# ZUK\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"2b4c\", MODE=\"0666\", GROUP=\"plugdev\"\n</code></pre> <p>\u628a\u6587\u4ef6copy\u5230 /etc/udev/rules.d/ \u5e76\u91cd\u542fudev\u670d\u52a1</p> <pre><code>sudo cp 51-android.rules /etc/udev/rules.d/\nsudo service udev restart\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","rules"]},{"location":"base/jar-delete/","title":"Jar\u5305\u5220\u9664\u90e8\u5206\u5185\u5bb9","text":"<pre><code>1. xxx.jar \u91cd\u547d\u540d xxx.zip\n2. \u89e3\u538b\n3. \u5220\u9664\u91cd\u590d\u5305\n4. cd xxx\n5. jar cvf yyy.jar ./ (\u4f7f\u7528\u547d\u4ee4\u91cd\u65b0\u6253\u6210jar)\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","jar"]},{"location":"base/jetbrains_directories/","title":"JetBrains\u914d\u7f6e\u76ee\u5f55","text":"","tags":["\u57fa\u7840\u6280\u672f","JetBrains"]},{"location":"base/jetbrains_directories/#macos","title":"macOS","text":"<ul> <li>\u914d\u7f6e\uff08idea.config.path\uff09</li> </ul> <p>~/Library/Application Support/JetBrains/IntelliJIdea2022.2</p> <ul> <li>\u63d2\u4ef6\uff08idea.plugins.path\uff09</li> </ul> <p>~/Library/Application Support/JetBrains/IntelliJIdea2022.2/plugins</p> <ul> <li>\u7cfb\u7edf\uff08idea.system.path\uff09</li> </ul> <p>~/Library/Caches/JetBrains/IntelliJIdea2022.2</p> <ul> <li>\u65e5\u5fd7\uff08idea.log.path\uff09</li> </ul> <p>~/Library/Logs/JetBrains/IntelliJIdea2022.2</p>","tags":["\u57fa\u7840\u6280\u672f","JetBrains"]},{"location":"base/jetbrains_directories/#linux","title":"Linux","text":"<ul> <li>\u914d\u7f6e\uff08idea.config.path\uff09</li> </ul> <p>~/.config/JetBrains/IntelliJIdea2022.2</p> <ul> <li>\u63d2\u4ef6\uff08idea.plugins.path\uff09</li> </ul> <p>~/.local/share/JetBrains/IntelliJIdea2022.2</p> <ul> <li>\u7cfb\u7edf\uff08idea.system.path\uff09</li> </ul> <p>~/.cache/JetBrains/IntelliJIdea2022.2</p> <ul> <li>\u65e5\u5fd7\uff08idea.log.path\uff09</li> </ul> <p>~/.cache/JetBrains/IntelliJIdea2022.2/log</p>","tags":["\u57fa\u7840\u6280\u672f","JetBrains"]},{"location":"base/git_branch_commit_single/","title":"git\u5c0f\u6280\u5de7-commit single","text":"","tags":["\u57fa\u7840\u6280\u672f","git"]},{"location":"base/git_branch_commit_single/#_1","title":"\u80cc\u666f","text":"<p>github\u4e3b\u9875 \u6216\u8005 github pages \u6bcf\u5929\u90fd\u8dd1\u81ea\u52a8\u5316\u4efb\u52a1\uff0c\u7136\u540e\u81ea\u52a8\u63d0\u4ea4\u3002\u5982\u679c\u4e0d\u505a\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u5bf9\u5e94\u7684\u5206\u652f\u63d0\u4ea4\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002</p> <p>\u90a3\u4e48\u80fd\u4e0d\u80fd\u505a\u5230\uff0c\u4e0d\u7ba1\u4e4b\u524d\u63d0\u4ea4\u4e86\u591a\u5c11\u4e2acommit\uff0c\u8fd9\u6b21\u63d0\u4ea4\u540e\u901a\u8fc7git log\u770b\u5230\u53ea\u6709\u4e00\u4e2acommit\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","git"]},{"location":"base/git_branch_commit_single/#_2","title":"\u521b\u5efa\u5168\u65b0\u7684\u7a7a\u5206\u652f","text":"<pre><code>git checkout --orphan\n</code></pre> <p>\u5982\u4e0a\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\uff0c\u8be5\u5206\u652f\u6ca1\u6709\u5386\u53f2\u8bb0\u5f55\uff0c\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5168\u65b0\u7684\u7a7a\u5206\u652f\u3002\u8fd9\u4e2a\u547d\u4ee4\u7684\u4e3b\u8981\u7528\u9014\u662f\u5728\u9700\u8981\u4e00\u4e2a\u5e72\u51c0\u7684\u8d77\u70b9\u65f6\uff0c\u6bd4\u5982\u4e3a GitHub Pages \u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u5206\u652f\u3002</p> <p>\u5982\uff1a</p> <pre><code>git checkout --orphan new-branch-name\n</code></pre> <p>\u7136\u540e\u4fee\u6539 github\u4e3b\u9875\u7684readme.md \u6216\u8005\u66f4\u65b0 github pages \u5185\u5bb9\u540e\uff0c\u901a\u8fc7 commit \u63d0\u4ea4\u3002</p> <p>\u6b64\u65f6 git log \u53ef\u4ee5\u770b\u5230 new-branch-name \u5206\u652f\u53ea\u6709\u4e00\u4e2a\u63d0\u4ea4\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","git"]},{"location":"base/git_branch_commit_single/#_3","title":"\u5f3a\u884c\u63a8\u9001","text":"<pre><code>git push origin new-branch-name:gh-deploy --force\n</code></pre> <p>\u7528\u4e8e\u5c06\u672c\u5730\u5206\u652f new-branch-name \u7684\u5185\u5bb9\u5f3a\u5236\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93 origin \u7684\u5206\u652f gh-deploy \u3002</p> <p>\u5f3a\u884c\u63a8\u9001\u540e\uff0c\u518d\u5230\u5bf9\u5e94\u7684 git \u4ed3\u67e5\u770b\u5206\u652f\uff0c\u5c31\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a commit \u4e86\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","git"]},{"location":"base/hexo-next/","title":"hexo\u3001next\u4e3b\u9898\u7f8e\u5316","text":"","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_1","title":"\u5b89\u88c5","text":"","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#nodejs","title":"\u5b89\u88c5Node.js","text":"<p>\u5b98\u7f51 \u5b89\u88c5\u5373\u53ef\uff0c\u6211\u4eec\u7528\u5b83\u6765\u751f\u6210\u9759\u6001\u7f51\u9875\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#hexo","title":"hexo","text":"<pre><code>$ sudo npm install -g hexo\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_2","title":"\u521d\u59cb\u5316","text":"<pre><code>$ mkdir blog\n$ cd blog\n$ hexo init\n$ sudo npm install\n$ hexo generate\n$ hexo deploy\n</code></pre> <p>\u8fd9\u4e2ablog\u6587\u4ef6\u5939\u6211\u4eec\u5728github\u4e0a\u4e5f\u65b0\u5efa\u4e00\u4e2a\u4ed3\u6765\u7ba1\u7406\uff0c\u65b9\u4fbf\u540e\u7eed\u6362\u7535\u8111\u7b49\u60c5\u51b5\u7ef4\u62a4\uff08https://github.com/i-rtfsc/blog\uff09 blog\u4e0b\u653e\u7f6e\u7684\u5c31\u662f\u6211\u4eec\u535a\u5ba2\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u535a\u5ba2\u7684\u6e90md\u6587\u4ef6\u7b49\u7b49</p> <p>\u7136\u540e\u901a\u8fc7 http://localhost:4000 \u67e5\u770b\u672c\u5730\u535a\u5ba2\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#github","title":"\u5173\u8054GitHub","text":"<ul> <li>\u6ce8\u518c\u5e76\u767b\u9646GitHub\u8d26\u53f7\u540e\uff0c\u65b0\u5efa\u4ed3\u5e93\uff0c\u540d\u79f0\u5fc5\u987b\u4e3auser.github.io\uff0c\u5982i-rtfsc.github.io</li> <li>\u4fee\u6539_config.yml</li> </ul> <pre><code>deploy:\n  type: git\n  repository: https://github.com/i-rtfsc/i-rtfsc.github.io.git\n  branch: master\n</code></pre> <p>https://github.com/i-rtfsc/i-rtfsc.github.io.git\u653e\u7f6e\u7684\u662f\u751f\u6210html\u540e\u7684\u6587\u4ef6</p> <p>\u91cd\u65b0\u6267\u884c <pre><code>$ hexo generate\n$ hexo deploy\n</code></pre> \u82e5\u6267\u884chexo generate\u51fa\u9519\u5219\u6267\u884cnpm install hexo --save\uff0c\u82e5\u6267\u884chexo deploy\u51fa\u9519\u5219\u6267\u884cnpm install hexo-deployer-git --save\u3002\u9519\u8bef\u4fee\u6b63\u540e\u518d\u6b21\u6267\u884chexo generate\u548chexo deploy\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#node","title":"\u66f4\u65b0 node","text":"<p>\u9996\u5148\u66f4\u65b0 npm <pre><code>npm install -g npm\n</code></pre> \u6e05\u9664 npm \u7f13\u5b58 <pre><code>sudo npm cache clean -f\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#hexo_1","title":"\u66f4\u65b0 hexo","text":"<p>\u8fdb\u5165\u81ea\u5df1\u7684\u535a\u5ba2\u76ee\u5f55\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a</p> <ul> <li> <p>\u66f4\u65b0 package.json \u4e2d\u7684 hexo \u53ca\u4e2a\u63d2\u4ef6\u7248\u672c <pre><code>npm install -g npm-check\nnpm install -g npm-upgrade\nnpm-check\nnpm-upgrade\n</code></pre> \u5982\u679c\u6267\u884cnpm-check\u4e0d\u6210\u529f\uff0c\u53ef\u4ee5\u6362\u6210npm-check -u\uff0c\u6216\u8005\u5982\u4e0b\uff08\u7248\u672c\u53f7\u81ea\u5df1\u5b9a\uff09\uff1a <pre><code>npm install --save hexo@5.4.0\nnpm install --save hexo-deployer-git@3.0.0\nnpm install --save hexo-generator-archive@1.0.0\nnpm install --save hexo-generator-category@1.0.0\nnpm install --save hexo-generator-index@2.0.0\nnpm install --save hexo-generator-tag@1.0.0\nnpm install --save hexo-renderer-ejs@1.0.0\nnpm install --save hexo-renderer-marked@4.1.0\nnpm install --save hexo-renderer-stylus@2.0.1 \nnpm install --save hexo-server@2.0.0\n</code></pre></p> </li> <li> <p>\u66f4\u65b0 hexo \u53ca\u6240\u6709\u63d2\u4ef6 <pre><code>npm update\n</code></pre></p> </li> <li> <p>\u67e5\u770b\u7248\u672c\u53f7 <pre><code>hexo version\n</code></pre></p> </li> <li> <p>\u4e3b\u9898</p> </li> </ul> <p>\u4e3b\u9898\u53d8\u5316\u5f88\u5927\uff0cgithub\u4ed3\u90fd\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u4e4b\u524d\u6709\u914d\u7f6e\u8fc7\uff0c\u5219\u5148\u628athemes\u6587\u4ef6\u5939\u5220\u9664\uff0c\u7136\u540e\u901a\u8fc7git submodule\u65b9\u5f0f\u4e0b\u8f7d\u3002 \u4e0b\u8f7d\u5b8c\u6210\u540e\u5230\u6839\u76ee\u5f55\u4e0b\u7684_config.yml\u5728theme\uff1a\u540e\u6dfb\u52a0next\u5373\u53ef\u3002 <pre><code>git submodule add https://github.com/theme-next/hexo-theme-next themes/next\n</code></pre> \u200b</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_configyml","title":"\u6839\u76ee\u5f55\u4e0b_config.yml","text":"","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#site","title":"Site","text":"<pre><code>## Site\ntitle: Solo\nsubtitle: anqi.huang@outlook.com\ndescription: \u91cd\u5b66Android\u7cfb\u5217\nkeywords: Android\u3001Framework\nauthor: Solo\nlanguage: zh-CN\ntimezone: UTC\n</code></pre> <ul> <li>title: \u586b\u5199\u6807\u9898</li> <li>subtitle: \u586b\u5199\u526f\u6807\u9898</li> <li>description: \u7b80\u4ecb</li> <li>keywords: \u5173\u952e\u8bcd</li> <li>author: \u4f5c\u8005\uff0c\u6587\u7ae0\u4e2d\u663e\u793a\u7684\u4f5c\u8005\u540d\u79f0</li> <li>language: \u8bbe\u7f6e\u8bed\u8a00\uff0czh-CN\u662f\u7b80\u4f53\u4e2d\u6587\uff0cen\u662f\u82f1\u8bed\uff0c\u9ed8\u8ba4\u662f\u5fb7\u8bed</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#url","title":"URL","text":"<p>\u6587\u7ae0\u6c38\u4e45\u94fe\u63a5\u63d2\u4ef6\u5b89\u88c5\u547d\u4ee4\u5982\u4e0b\uff1a <pre><code>npm install hexo-abbrlink --save\n</code></pre> \u4fee\u6539\u914d\u7f6e\u6587\u4ef6_config.yml\u5982\u4e0b\uff1a <pre><code>url: http://i-rtfsc.com\nroot: /\npermalink: archives/:abbrlink.html\nabbrlink:\n  alg: crc32  ## \u7b97\u6cd5\uff1acrc16(default) and crc32\n  rep: hex    ## \u8fdb\u5236\uff1adec(default) and hex\npermalink_defaults:\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_3","title":"\u7ffb\u9875\u8bbe\u7f6e","text":"<p><pre><code>## Home page setting\n## path: Root path for your blogs index page. (default = '')\n## per_page: Posts displayed per page. (0 = disable pagination)\n## order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 12\n  order_by: -date\n\n## Pagination\n### Set per_page to 0 to disable pagination\nper_page: 12\npagination_dir: page\n</code></pre> \u5171\u6709\u4e24\u5904\uff0c\u7528\u4e8e\u63a7\u5236\u6bcf\u4e00\u9875\u663e\u793a\u591a\u5c11\u7bc7\u535a\u6587\uff0cper_page:\u540e\u8bbe\u7f6e\u535a\u6587\u6570\u91cf\uff0c0\u4ee3\u8868\u4e0d\u7ffb\u9875\u5168\u90e8\u5e73\u94fa\u663e\u793a\u3002 \u200b</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#deployment","title":"Deployment\u8bbe\u7f6e","text":"<pre><code>## Deployment\n### Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/i-rtfsc/i-rtfsc.github.io.git\n  branch: master\n</code></pre> <ul> <li>branch:\u5206\u652f\u586b\u5199master</li> <li>repo:\u540e\u628ausername\u6362\u6210\u81ea\u5df1\u7684\u7528\u6237\u540d</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_configyml_1","title":"\u4e3b\u9898\u76ee\u5f55\u4e0b_config.yml","text":"","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_4","title":"\u63a8\u8350\u6587\u7ae0\u63d2\u4ef6","text":"<p>\u5b89\u88c5\u63d2\u4ef6\u547d\u4ee4\u5982\u4e0b\uff1a <pre><code>npm install hexo-related-popular-posts --save\n</code></pre> \u4fee\u6539\u914d\u7f6e\u6587\u4ef6_config.yml\u5982\u4e0b\uff1a <pre><code>related_posts:\n  enable: true\n  title: \u63a8\u8350\u6587\u7ae0 ## Custom header, leave empty to use the default one\n  display_in_home: false\n  params:\n    maxCount: 5\n    PPMixingRate: 0.25\n    isDate: false\n    isImage: false\n    isExcerpt: false\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_5","title":"\u6587\u7ae0\u6392\u5e8f","text":"<p>\u5b89\u88c5\u63d2\u4ef6\u547d\u4ee4\u5982\u4e0b\uff1a <pre><code>npm install hexo-generator-index-pin-top --save\n</code></pre> \u7136\u540e\u6253\u5f00\u4efb\u4f55\u4e00\u7bc7\u535a\u5ba2,\u52a0\u4e0atop\u5c5e\u6027,top\u540e\u9762\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u5927\u3002 <pre><code>top: 01\n</code></pre> \u4fee\u6539node_modules/hexo-generator-index/lib/generator.js \u5c31\u53ef\u4ee5\u53d8\u6210\uff1a 1. \u9ed8\u8ba4\u6309\u7167\u53d1\u5e03\u65f6\u95f4\u6392\u5e8f 2. \u8bbe\u7f6etop\u53ef\u4ee5\u7f6e\u9876\uff0ctop\u7684\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u5927 <pre><code>//sort(posts.data, (a, b) =&gt; (b.sticky || 0) - (a.sticky || 0));\nposts.data = posts.data.sort(function(a, b) {\n    if(a.top &amp;&amp; b.top) { // \u4e24\u7bc7\u6587\u7ae0top\u90fd\u6709\u5b9a\u4e49\n        if(a.top == b.top) return b.date - a.date; // \u82e5top\u503c\u4e00\u6837\u5219\u6309\u7167\u6587\u7ae0\u65e5\u671f\u964d\u5e8f\u6392\n        else return b.top - a.top; // \u5426\u5219\u6309\u7167top\u503c\u964d\u5e8f\u6392\n    }\n    else if(a.top &amp;&amp; !b.top) { // \u4ee5\u4e0b\u662f\u53ea\u6709\u4e00\u7bc7\u6587\u7ae0top\u6709\u5b9a\u4e49\uff0c\u90a3\u4e48\u5c06\u6709top\u7684\u6392\u5728\u524d\u9762\uff08\u8fd9\u91cc\u7528\u5f02\u6216\u64cd\u4f5c\u5c45\u7136\u4e0d\u884c233\uff09\n        return -1;\n    }\n    else if(!a.top &amp;&amp; b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // \u90fd\u6ca1\u5b9a\u4e49\u6309\u7167\u6587\u7ae0\u65e5\u671f\u964d\u5e8f\u6392\n});\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_6","title":"\u672c\u5730\u641c\u7d22\u529f\u80fd","text":"<p>\u5b89\u88c5\u63d2\u4ef6\u547d\u4ee4\u5982\u4e0b\uff1a <pre><code>npm install hexo-generator-searchdb --save\n</code></pre> \u4fee\u6539\u914d\u7f6e\u6587\u4ef6_config.yml\u5982\u4e0b\uff1a <pre><code>## \u672c\u5730\u641c\u7d22\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 100\n</code></pre></p> <ul> <li>path\uff1a\u7d22\u5f15\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u76f8\u5bf9\u4e8e\u7ad9\u70b9\u6839\u76ee\u5f55</li> <li>field\uff1a\u641c\u7d22\u8303\u56f4\uff0c\u9ed8\u8ba4\u662f post\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9 page\u3001all\uff0c\u8bbe\u7f6e\u6210 all \u8868\u793a\u641c\u7d22\u6240\u6709\u9875\u9762</li> <li>limit\uff1a\u9650\u5236\u641c\u7d22\u7684\u6761\u76ee\u6570</li> </ul> <p>\u7136\u540e\u4fee\u6539\u4e3b\u9898\u914d\u7f6e\u6587\u4ef6_config.yml\u5982\u4e0b\uff1a <pre><code>## Local Search\n## Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: true\n  ## If auto, trigger search by changing input.\n  ## If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  ## Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  ## Unescape html strings to the readable one.\n  unescape: false\n  ## Preload the search data when the page loads.\n  preload: false\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#logo","title":"\u7f51\u7ad9Logo\u8bbe\u7f6e","text":"<p>\u628a\u9009\u597d\u7684\u56fe\u6807\u653e\u5165\\themes\\next\\source\\images\u76ee\u5f55\u4e2d\u5e76\u6539\u6210\u4e0a\u9762\u7684\u6587\u4ef6\u540d\u5373\u53ef\uff0c\u6ce8\u610f\u56fe\u7247\u5c3a\u5bf8\u3002 <pre><code>favicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_7","title":"\u9875\u811a\u8bbe\u7f6e","text":"<pre><code>footer:\n  ## Specify the date when the site was setup. If not defined, current year will be used.\n  since: 2018\n\n  ## Icon between year and copyright info.\n  icon:\n    ## Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/\n    ## `heart` is recommended with animation in red (#ff0000).\n    name: heart\n    ## If you want to animate the icon, set it to true.\n    animated: true\n    ## Change the color of icon, using Hex Code.\n    color: \"#f08080\"\n\n  ## If not defined, `author` from Hexo main config will be used.\n  copyright: Solo\n\n  powered:\n    ## Hexo link (Powered by Hexo).\n    enable: true\n    ## Version info of Hexo after Hexo link (vX.X.X).\n    version: true\n\n  theme:\n    ## Theme &amp; scheme info link (Theme - NexT.scheme).\n    enable: true\n    ## Version info of NexT after scheme info (vX.X.X).\n    version: true\n</code></pre> <ul> <li>since: \u8868\u793a\u7f51\u7ad9\u6210\u7acb\u7684\u5e74\u4efd\uff0c\u4e0d\u8bbe\u7f6e\u7684\u8bdd\u9ed8\u8ba4\u662f\u5f53\u524d\u5e74\u4efd\uff0c\u663e\u793a\u4e3a\u00a9 2021</li> <li>icon: \u4e2d\u8bbe\u7f6e\u5e74\u4efd\u540e\u9762\u7684\u56fe\u6807\uff0c\u9ed8\u8ba4\u662f\u5fc3\u5f62\uff0c\u60f3\u4fee\u6539\u7684\u8bdd\u53bbFontawesome\u9009\u62e9\u56fe\u6807\uff0c\u7136\u540e\u518dname\u680f\u4fee\u6539</li> <li>animated: \u7528\u4e8e\u8bbe\u7f6e\u5fc3\u5f62\u662f\u5426\u8df3\u52a8</li> <li>color: \u7528\u4e8e\u8bbe\u7f6e\u56fe\u6807\u989c\u8272\uff0c\u767e\u5ea6\u5bf9\u7167\u8272\u8868\u67e5\u5c31\u597d</li> <li>copyright: \u663e\u793a\u56fe\u6807\u540e\u9762\u7684\u7248\u6743\u6240\u5c5e\uff0c\u4e5f\u5c31\u662f\u4f5c\u8005\u540d\uff0c\u4e0d\u8bbe\u7f6e\u7684\u8bdd\u9ed8\u8ba4\u663e\u793a\u6839\u76ee\u5f55\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u4f5c\u8005\u540d</li> <li>powered: \u540e\u9762\u7684\u680f\u76ee\u7528\u4e8e\u8bbe\u5b9a\u662f\u5426\u663e\u793aPowered by Hexo\u4ee5\u53ca\u5f53\u524d\u4e3b\u9898\u7684\u7248\u672c\u4fe1\u606f\uff0c\u663e\u793a\u7684\u8bdd\u8bbe\u4e3atrue</li> <li>theme: \u540e\u9762\u7684\u680f\u76ee\u7528\u4e8e\u8bbe\u5b9a\u662f\u5426\u663e\u793a\u5f53\u524d\u4e3b\u9898\u7684\u7248\u672c\u4fe1\u606f\uff0c\u663e\u793a\u7684\u8bdd\u5c06\u8bbe\u4e3atrue</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#github_1","title":"Github\u89d2\u6807","text":"<pre><code>## Github\u89d2\u6807\ngithub_banner:\n  enable: true\n  permalink: https://github.com/i-rtfsc\n  title: Follow me on GitHub\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_8","title":"\u793e\u4ea4\u7f51\u7ad9\u94fe\u63a5\u8bbe\u7f6e","text":"<pre><code>social:\n  GitHub: https://github.com/i-rtfsc || github\n  E-Mail: mailto:anqi.huang@outlook.com || envelope\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_9","title":"\u5934\u50cf\u8bbe\u7f6e","text":"<p>\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5728\u4fa7\u8fb9\u680f\u663e\u793a\u5934\u50cf <pre><code>avatar:\n  ## In theme directory (source/images): /images/avatar.gif\n  ## In site directory (source/uploads): /uploads/avatar.gif\n  ## You can also use other linking images.\n  url: /images/avatar.gif\n  ## If true, the avatar would be dispalyed in circle.\n  rounded: true\n  ## The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.\n  opacity: 1\n  ## If true, the avatar would be rotated with the cursor.\n  rotated: true\n</code></pre></p> <ul> <li>url:\u540e\u586b\u5199\u5934\u50cf\u56fe\u7247\u7684\u8def\u5f84\uff0c\u9ed8\u8ba4\u5728\\themes\\next\\source\\images\u4e2d</li> <li>rounded:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u663e\u793a\u5706\u5f62\u5934\u50cf</li> <li>opacity:\u7528\u4e8e\u8bbe\u7f6e\u5934\u50cf\u900f\u660e\u5ea6\uff0c1\u4e3a\u4e0d\u900f\u660e</li> <li>rotated:\u7528\u4e8e\u8bbe\u7f6e\u5934\u50cf\u9f20\u6807\u79fb\u52a8\u5230\u5934\u50cf\u4e0a\u65f6\u5934\u50cf\u662f\u5426\u65cb\u8f6c</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_10","title":"\u4fa7\u8fb9\u680f\u76ee\u5f55\u8bbe\u7f6e","text":"<pre><code>toc:\n  enable: true\n  ## Automatically add list number to toc.\n  number: true\n  ## If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  ## If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: true\n  ## Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front Matter.\n  max_depth: 6\n</code></pre> <ul> <li>enable:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u4fa7\u8fb9\u680f\u76ee\u5f55</li> <li>number:\u7528\u4e8e\u8bbe\u7f6e\u81ea\u52a8\u7f16\u53f7</li> <li>wrap:\u7528\u4e8e\u8bbe\u7f6e\u5f53\u6807\u9898\u957f\u5ea6\u8d85\u8fc7\u4fa7\u8fb9\u680f\u957f\u5ea6\u65f6\u662f\u5426\u81ea\u52a8\u6362\u884c</li> <li>expand_all:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5c55\u5f00\u5168\u90e8\u76ee\u5f55\uff0c\u5426\u7684\u8bdd\u4f1a\u81ea\u52a8\u5c55\u5f00\u6b63\u5728\u770b\u7684\u90a3\u90e8\u5206</li> <li>max_depth:\u7528\u4e8e\u8bbe\u7f6e\u81ea\u52a8\u751f\u6210\u76ee\u5f55\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u751f\u6210\u5230\u51e0\u7ea7\u6807\u9898</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_11","title":"\u4fa7\u8fb9\u680f\u663e\u793a\u8bbe\u7f6e","text":"<pre><code>sidebar:\n  ## Sidebar Position, available values: left | right (only for Pisces | Gemini).\n  #position: left\n  position: right\n\n  ## Manual define the sidebar width. If commented, will be default for:\n  ## Muse | Mist: 320\n  ## Pisces | Gemini: 240\n  width: 320\n\n  ## Sidebar Display, available values (only for Muse | Mist):\n  ##  - post    expand on posts automatically. Default.\n  ##  - always  expand for all pages automatically.\n  ##  - hide    expand only when click on the sidebar toggle icon.\n  ##  - remove  totally remove sidebar including sidebar toggle.\n  display: post\n\n  ## Sidebar offset from top menubar in pixels (only for Pisces | Gemini).\n  offset: 12\n  ## Enable sidebar on narrow view (only for Muse | Mist).\n  onmobile: false\n  ## Click any blank part of the page to close sidebar (only for Muse | Mist).\n  dimmer: false\n</code></pre> <ul> <li>position:\u7528\u4e8e\u8bbe\u7f6e\u4fa7\u8fb9\u680f\u5728\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff0c\u628a\u8981\u9009\u62e9\u7684\u4f4d\u7f6e\u524d\u9762\u7684#\u53bb\u6389\u518d\u628a\u53e6\u4e00\u4e2a\u524d\u9762\u52a0\u4e0a#\u5373\u53ef\uff0c\u8fd9\u4e2a\u9009\u9879\u53ea\u5bf9Pisces\u548cGemini\u4e24\u4e2a\u4e3b\u9898\u8d77\u4f5c\u7528</li> <li>width:\u7528\u4e8e\u8bbe\u7f6e\u4fa7\u8fb9\u680f\u7684\u5bbd\u5ea6\uff0c\u9ed8\u8ba4Muse\u548cMist\u662f320,Pisces\u548cGemini\u662f240</li> <li>display:\u7528\u4e8e\u8bbe\u7f6e\u4fa7\u8fb9\u680f\u7684\u663e\u793a\u65b9\u5f0f\uff0c\u53ea\u5bf9Muse\u548cMist\u4e24\u4e2a\u4e3b\u9898\u8d77\u4f5c\u7528\uff0c\u53ef\u4ee5\u6328\u4e2a\u8bd5\u4e00\u4e0b</li> <li>offset:\u7528\u4e8e\u8bbe\u7f6e\u4fa7\u8fb9\u680f\u8ddd\u79bb\u9876\u90e8\u4ecb\u7ecd\u7684\u8ddd\u79bb\uff0c\u53ea\u5bf9Pisces\u548cGemini\u4e24\u4e2a\u4e3b\u9898\u8d77\u4f5c\u7528</li> <li>onmobile:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5728\u624b\u673a\u7b49\u5bbd\u5ea6\u8f83\u5c0f\u7684\u8bbe\u5907\u4e0a\u663e\u793a\u4fa7\u8fb9\u680f\uff0c\u53ea\u5bf9Muse\u548cMist\u4e24\u4e2a\u4e3b\u9898\u8d77\u4f5c\u7528</li> <li>dimmer:\u7528\u4e8e\u8bbe\u7f6e\u70b9\u51fb\u5c4f\u5e55\u7a7a\u767d\u5904\u662f\u5426\u5173\u95ed\u4fa7\u8fb9\u680f\uff0c\u540c\u6837\u53ea\u5bf9Muse\u548cMist\u4e24\u4e2a\u4e3b\u9898\u8d77\u4f5c\u7528</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_12","title":"\u8fd4\u56de\u9876\u90e8\u6309\u94ae","text":"<pre><code>back2top:\n  enable: true\n  ## Back to top in sidebar.\n  sidebar: true\n  ## Scroll percent label in b2t button.\n  scrollpercent: true\n</code></pre> <ul> <li>enable:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u56de\u5230\u9876\u90e8\u6309\u94ae</li> <li>sidebar:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u5c06\u6309\u94ae\u653e\u5230\u4fa7\u8fb9\u680f\u4e2d</li> <li>scrollpercent:\u7528\u4e8e\u8bbe\u7f6e\u662f\u5426\u663e\u793a\u9605\u8bfb\u8fdb\u5ea6\u767e\u5206\u6bd4</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_13","title":"\u4ee3\u7801\u5757\u9ad8\u4eae\u4e3b\u9898","text":"<p>Next\u4e3b\u9898\u5185\u7f6e\u4e86tomorrow\u4ee3\u7801\u9ad8\u4eae\u4e3b\u9898\uff0c\u4e00\u5171\u6709\u4e94\u4e2a\uff0c\u53ef\u4ee5\u53bbTomorrow\u67e5\u770b\u9884\u89c8\u6548\u679c\uff0c\u5728\u4e0b\u9762\u7684highlight_theme:\u4e2d\u6539\u6210\u81ea\u5df1\u60f3\u8981\u7684\u5373\u53ef\u3002 <pre><code>## \u4ee3\u7801\u5757\u9ad8\u4eae\u4e3b\u9898\ncodeblock:\n  ## Code Highlight theme\n  ## Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic\n  ## See: https://github.com/chriskempson/tomorrow-theme\n  highlight_theme: night\n  ## Add copy button on codeblock\n  copy_button:\n    enable: true\n    ## Show text copy result.\n    show_result: false\n    ## Available values: default | flat | mac\n    style: mac\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#mermaid","title":"Mermaid","text":"<p>\u8fd1\u6765\u7528Markdown\u5199\u6587\u7ae0\uff0c\u8d8a\u6765\u8d8a\u4e0d\u559c\u6b22\u63d2\u5165\u56fe\u7247\u4e86\uff0c\u4e00\u5207\u80fd\u7528\u8bed\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u575a\u51b3\u4e0d\u653e\u56fe\uff0c\u539f\u56e0\u6709\u4e8c\uff1a</p> <ul> <li>\u5982\u679c\u628a\u6d41\u7a0b\u56fe\u548c\u6570\u5b66\u516c\u5f0f\u90fd\u4ee5\u56fe\u7247\u65b9\u5f0f\u653e\u5230\u6587\u7ae0\u5185\uff0c\u5f53\u90e8\u7f72\u5230Github\u4e0a\u540e\uff0c\u8bbf\u95ee\u535a\u5ba2\u65f6\u56fe\u7247\u52a0\u8f7d\u5b9e\u5728\u592a\u6162\uff0c\u6709\u65f6\u4e00\u7bc7\u6587\u7ae0\u9700\u8981\u753b10\u6765\u4e2a\u6d41\u7a0b\u56fe\uff0c\u90a3\u4f60\u5c31\u5f97\u622a\u56fe10\u6765\u591a\u6b21\uff0c\u8fd8\u5f97\u7ed9\u8fd9\u4e9b\u56fe\u7247\u60f3\u4e00\u4e2a\u5408\u9002\u7684\u540d\u5b57\uff0c\u540c\u65f6\u63d2\u5165\u56fe\u7247\u7684\u65f6\u5019\u8fd8\u8981\u6ce8\u610f\u56fe\u7247\u7684\u63d2\u5165\u4f4d\u7f6e\u548c\u987a\u5e8f\uff1b</li> <li>\u5982\u679c\u4f60\u8981\u628a\u6587\u7ae0\u53d1\u5e03\u5230\u5176\u4ed6\u535a\u5ba2\u5e73\u53f0\uff0c\u5982CSDN\u3001\u535a\u5ba2\u56ed\uff0c\u5728\u6bcf\u4e00\u4e2a\u5e73\u53f0\u4e0a\u4f60\u90fd\u8981\u63d2\u516510\u6765\u591a\u6b21\u56fe\u7247\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u8fd9\u79cd\u7b28\u62d9\u53c8\u8017\u65f6\u7684\u65b9\u6cd5\uff0c\u6211\u5b9e\u5728\u4e0d\u80fd\u5fcd\u3002</li> </ul> <p>\u8fd9\u4e5f\u662f\u6211\u4e3a\u4ec0\u4e48\u653e\u5f03\u5370\u8c61\u7b14\u8bb0\u6539\u7528\u8bed\u96c0\u7684\u4e00\u5927\u4e3b\u8981\u539f\u56e0\u3002\u8bed\u96c0\u91cc\u6709\u4e00\u4e2a\u529f\u80fd\u201c\u6587\u672c\u7ed8\u56fe\u201d\u53ef\u4ee5\u7528PlantUML\u3001Mermaid\u3001Flowchart\u3001Graphviz\u7b49\u3002\u5982\u4e0b\u5982\u5c31\u662f\u7528Mermaid\u7ed8\u5236\u7684\u3002 <pre><code>sequenceDiagram\nActivity -&gt;&gt; Activity:startActivity\nActivity -&gt;&gt; Activity:startActivityForResult()\nActivity -&gt;&gt; Instrumentation:execStartActivity()\nInstrumentation -&gt;&gt;+ ActivityTaskManager:getService()\nActivityTaskManager -&gt;&gt;+ ServiceManager:getService()\nServiceManager -&gt;&gt;+ BinderInternal:getContextObject()\nBinderInternal -&gt;&gt;- ServiceManager:IServiceManager\nServiceManager -&gt;&gt;- ActivityTaskManager:IBinder\nActivityTaskManager -&gt;&gt;- Instrumentation:IActivityTaskManager\nInstrumentation -&gt;&gt; ActivityTaskManagerService:startActivity()</code></pre> \u6211\u4eec\u73b0\u5728\u60f3\u529e\u6cd5\u5728hexo\u4e0a\u4e5f\u80fd\u7528\u4e0a\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u9996\u5148\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u63d2\u4ef6\uff1a\uff08\u6700\u65b0\u7248\u672chexo\u5c31\u81ea\u5e26\u4e86\uff0c\u65e0\u9700\u5b89\u88c5\uff09 <pre><code>npm install hexo-filter-mermaid-diagrams --save\n</code></pre> \u4fee\u6539 <pre><code>## Mermaid tag\nmermaid:\n  enable: true\n  ## Available themes: default | dark | forest | neutral\n  theme: neutral\n</code></pre> \u5e76\u5728themes/next/source/css/_common/components/components.styl\u6dfb\u52a0\uff1a <pre><code>.mermaid {\n background: transparent;\n}\n</code></pre> \u6dfb\u52a0\u8fd9\u4e2a\u76ee\u524d\u662f\u4e3a\u4e86\u907f\u514d\u4f60\u8bbe\u7f6e\u9ed1\u8272\u4e3b\u9898\u65f6\u80cc\u666f\u4e3a\u9ed1\u8272\u5bfc\u81f4\u770b\u4e0d\u5230\u6d41\u7a0b\uff0c\u4e0d\u4e00\u5b9a\u662f\u52a0\u5728components.styl\uff0c\u4f60\u53ef\u4ee5\u627e\u4e2a\u5408\u9002\u7684\u5730\u65b9\u3002 \u200b</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_14","title":"\u6df1\u5ea6\u7f8e\u5316","text":"","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_15","title":"\u5b57\u6570\u548c\u9605\u8bfb\u65f6\u95f4\u7edf\u8ba1\u63d2\u4ef6","text":"<p>\u5b89\u88c5\u63d2\u4ef6\u547d\u4ee4\u5982\u4e0b\uff1a <pre><code>npm install hexo-symbols-count-time --save\n</code></pre> \u4fee\u6539\u914d\u7f6e\u6587\u4ef6_config.yml\u5982\u4e0b\uff1a <pre><code>symbols_count_time:\n  symbols: true ## \u6587\u7ae0\u5b57\u6570\n  time: true ## \u9605\u8bfb\u65f6\u957f\n  total_symbols: true ## \u6240\u6709\u6587\u7ae0\u603b\u5b57\u6570\n  total_time: true ## \u6240\u6709\u6587\u7ae0\u9605\u8bfb\u4e2d\u65f6\u957f\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_16","title":"\u9f20\u6807\u70b9\u51fb\u7279\u6548","text":"<p>\u5728\u7f51\u9875\u4e2d\u52a0\u5165\u9f20\u6807\u70b9\u51fb\u7279\u6548\uff0c\u76ee\u524d\u6709\u5fc3\u5f62\u548c\u7206\u70b8\u4e24\u79cd\u7279\u6548\uff0c\u4e24\u8005\u53ef\u4ee5\u53e0\u52a0\uff0c\u7279\u6548\u5bf9\u6027\u80fd\u8f83\u4f4e\u7684\u8bbe\u5907\u975e\u5e38\u4e0d\u53cb\u597d\uff0c\u5c24\u5176\u662f\u7206\u70b8\u7279\u6548\uff0c\u5728\u5e73\u677f\u4e0a\u5361\u6210PPT\uff0c\u614e\u7528\u2026\u2026</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_17","title":"\u5fc3\u5f62\u7279\u6548","text":"<ul> <li>\u521b\u5efajs\u6587\u4ef6</li> </ul> <p>\u5728./themes/next/source/js\u4e2d\u65b0\u5efaclicklove.js\uff0c\u5e76\u5c06\u7c98\u8d34\u4e0b\u5217\u4ee3\u7801\u3002 <pre><code>!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n</code></pre></p> <ul> <li>\u4fee\u6539layout\u6587\u4ef6</li> </ul> <p>\u6253\u5f00./themes/next/layout/_layout.swig\u5e76\u5728\u672b\u5c3e\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u3002 <pre><code>&lt;!-- \u9875\u9762\u70b9\u51fb\u5fc3\u5f62 --&gt;\n&lt;script type=\"text/javascript\" src=\"/js/clicklove.js\"&gt;&lt;/script&gt;\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_18","title":"\u7206\u70b8\u7279\u6548","text":"<ul> <li>\u521b\u5efajs\u6587\u4ef6</li> </ul> <p>\u5728./themes/next/source/js\u4e2d\u65b0\u5efafirework.js\uff0c\u5e76\u5c06\u7c98\u8d34\u4e0b\u5217\u4ee3\u7801\u3002 <pre><code>\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t&lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)}\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t&lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)};\n</code></pre></p> <ul> <li>\u4fee\u6539layout\u6587\u4ef6</li> </ul> <p>\u6253\u5f00./themes/next/layout/_layout.swig\u5e76\u5728[head]\u4e2d\u95f4\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u3002 <pre><code>  &lt;!-- \u7206\u70b8\u6548\u679c --&gt;\n&lt;canvas class=\"fireworks\" style=\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\" &gt;&lt;/canvas&gt; \n&lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"&gt;&lt;/script&gt; \n&lt;script type=\"text/javascript\" src=\"/js/firework.js\"&gt;&lt;/script&gt;\n</code></pre></p> <ul> <li>\u914d\u7f6e\u4e3b\u9898\u6587\u4ef6</li> </ul> <p>\u6253\u5f00./themes/next\u8def\u5f84\u4e0b\u7684_config.yml\u6587\u4ef6\u5e76\u5728\u672b\u5c3e\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u3002 <pre><code>## Fireworks\nfireworks: true\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_19","title":"\u535a\u6587\u538b\u7f29","text":"<p>md\u6587\u4ef6\u8f6c\u5316\u4e3ahtml\u540e\u4f1a\u6709\u5f88\u591a\u7a7a\u683c\uff0cjs\u548ccss\u6587\u4ef6\u4e2d\u4e5f\u4f1a\u6709\u8bb8\u591a\u7a7a\u683c\uff0cjs\u4e2d\u7684\u7a7a\u683c\u4f1a\u5f71\u54cd\u6027\u80fd\u3002</p> <ul> <li> <p>\u5b89\u88c5 <pre><code>npm install hexo-neat --save\n</code></pre></p> </li> <li> <p>\u914d\u7f6e</p> </li> </ul> <p>\u6253\u5f00\u535a\u5ba2\u6839\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6_config.yml\u5e76\u5728\u672b\u5c3e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a <pre><code>## hexo-neat\n## \u535a\u6587\u538b\u7f29\nneat_enable: true\n## \u538b\u7f29html\nneat_html:\n  enable: true\n  exclude:\n## \u538b\u7f29css\nneat_css:\n  enable: true\n  exclude:\n    - '**/*.min.css'\n## \u538b\u7f29js\nneat_js:\n  enable: true\n  mangle: true\n  output:\n  compress:\n  exclude:\n    - '**/*.min.js'\n    - '**/jquery.fancybox.pack.js'\n    - '**/index.js'\n    - '**/clicklove.js'\n    - '**/firework.js'\n</code></pre></p> <p>\u53ef\u80fd\u4f1a\u6709\u90e8\u5206\u63d2\u4ef6\u538b\u7f29\u540e\u62a5\u9519\uff0c\u5728exclude\u91cc\u9762\u6dfb\u52a0\u5bf9\u5e94\u7684\u6587\u4ef6\u5c31\u53ef\u4ee5\u53d6\u6d88\u538b\u7f29\u4e86</p> <p>\u200b</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_20","title":"\u8bbf\u5ba2\u7edf\u8ba1","text":"<p>Next\u4e3b\u9898\u5df2\u7ecf\u5185\u7f6e\u4e86\u4e0d\u7edf\u8ba1\uff0c\u5728Next\u4e3b\u9898\u7684\u914d\u7f6e\u6587\u4ef6_config.yml\u4e2d\u641c\u7d22busuanzi_count\u5e76\u5c06enable\u8bbe\u7f6e\u4e3atrue\uff0cicon\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8bbe\u7f6e\uff0c\u4e0b\u9762\u662f\u6211\u7684\u914d\u7f6e\uff1a <pre><code>busuanzi_count:\n  enable: true\n  total_visitors: true ## \u603b\u8bbf\u5ba2\u6570\u91cf\uff0c\u5728\u9875\u811a\u663e\u793a\n  total_visitors_icon: user\n  total_views: true ## \u603b\u9605\u8bfb\u6570\u91cf\uff0c\u5728\u9875\u811a\u663e\u793a\n  total_views_icon: eye\n  post_views: true ## \u5355\u7bc7\u6587\u7ae0\u9605\u8bfb\u6570\u91cf\uff0c\u5728\u6807\u9898\u4e0b\u663e\u793a\n  post_views_icon: eye\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_21","title":"\u6dfb\u52a0\u8bc4\u8bba\u7cfb\u7edf","text":"<p>\u8bc4\u8bba\u7cfb\u7edf\u91c7\u7528\u7684\u662fGitalk\uff0c\u4e0e\u539f\u6765\u7684Gitment\u5dee\u4e0d\u591a(Gitment\u5df2\u7ecf\u51c9\u4e86)\u3002\u65b0\u7248\u672c\u7684Next\u4e3b\u9898\u5df2\u7ecf\u81ea\u5e26Gitalk\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5f00\u542f\u5373\u53ef\uff0c\u4e0b\u9762\u7684\u5b89\u88c5\u8fc7\u7a0b\u8bf7\u5ffd\u7565\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#oauth-application","title":"\u6ce8\u518cOAuth application","text":"<p>\u70b9\u51fb\u8fd9\u91cc\u6ce8\u518c\u65b0\u7684OAuth application</p> <ul> <li>\u5176\u4e2dApplication name\u968f\u4fbf\u586b\u5c31\u597d</li> <li>Homepage URL\u548cAuthorization callback URL\u586b\u5199\u81ea\u5df1\u7684\u7f51\u7ad9\u9996\u9875\u5730\u5740\u5373\u53ef</li> <li>Application description\u9009\u586b\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u4e1c\u897f\u662f\u5e72\u4ec0\u4e48\u7684</li> </ul> <p>\u586b\u5199\u5b8c\u6210\u540e\u70b9\u51fbRegister application\uff0c\u8df3\u8f6c\u9875\u9762\u4f1a\u663e\u793aClient ID\u548cClient Secret\u7528\u4e8e\u4ee5\u540e\u767b\u5f55\u3002 \u200b</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_22","title":"\u914d\u7f6e","text":"<p>\u6253\u5f00Next\u4e3b\u9898\u7684\u914d\u7f6e\u6587\u4ef6.\\themes\\next_config.yml\u5e76\u641c\u7d22gitalk\uff0c\u5c06enable\u8bbe\u7f6e\u4e3atrue,\u5e76\u914d\u7f6e\u76f8\u5173\u9009\u9879\u3002 <pre><code>## Gitalk\n## For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id: i-rtfsc ## \u4f60\u7684github\u7528\u6237\u540d(GitHub repo owner)\n  repo: i-rtfsc.github.io ## Repository name to store issues\n  client_id: fe0e1f117dc426e14e98 ## GitHub Application Client ID\n  client_secret: b5e4d8cb3d52a38ce7bb19f2894fbc6d7248b8d4 ## GitHub Application Client Secret\n  admin_user: i-rtfsc ## GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true ## Facebook-like distraction free mode\n  ## Gitalk's display language depends on user's browser or system environment\n  ## If you want everyone visiting your site to see a uniform language, you can set a force language value\n  ## Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_23","title":"\u80cc\u666f\u53ca\u534a\u900f\u660e\u6548\u679c","text":"<p>\u5c06\u9009\u597d\u7684\u80cc\u666f\u56fe\u7247\u653e\u5728\u535a\u5ba2\u6839\u76ee\u5f55/themes/next/source/images\u4e2d\u3002\u6253\u5f00\u6839\u76ee\u5f55/themes/next/source/css/_common/components/components.styl\u6587\u4ef6\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\u3002 <pre><code>body {\n    background:url(/images/background.jpeg);//\u56fe\u7247\u8def\u5f84\n    background-repeat: no-repeat;//\u662f\u5426\u91cd\u590d\u5e73\u94fa\n    background-attachment:fixed;//\u662f\u5426\u968f\u7740\u7f51\u9875\u4e0a\u4e0b\u6eda\u52a8\u800c\u6eda\u52a8\uff0cfixed\u4e3a\u56fa\u5b9a\n    background-position:50% 50%;//\u56fe\u7247\u4f4d\u7f6e\n    background-size: cover;//\u56fe\u7247\u5c55\u793a\u5927\u5c0f\n    -webkit-background-size: cover;\n    -o-background-size: cover;\n    -moz-background-size: cover;\n    -ms-background-size: cover;\n\n     #footer &gt; div &gt; div {\n        color:#000000;//\u5e95\u90e8\u6587\u5b57\u989c\u8272\n    }\n}\n\n.header-inner {\n    background: #ffffffe8;//\u8bbe\u7f6e\u4fa7\u8fb9\u680f\u900f\u660e\n    opacity: 1;//\u8fd9\u91cc\u8bbe\u7f6e\u4e3a1\uff0c\u5426\u5219\u641c\u7d22\u680f\u4f1a\u6d88\u5931\n}\n.main-inner {\n        background: #fff;\n        opacity: 0.9;//\u8bbe\u7f6e\u6587\u7ae0\u4e3b\u4f53\u900f\u660e\u5ea6\n}\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_24","title":"\u6587\u7ae0\u5bbd\u5ea6\u8fc7\u5c0f","text":"<p>\u6211\u4eec\u914d\u7f6e\u7684scheme\u662fMist\uff0c\u8fd0\u884c\u540e\u53d1\u73b0\u6587\u7ae0\u5bbd\u5ea6\u8fc7\u5c0f\uff0c\u9700\u8981\u4fee\u6539themes/next/source/css/_schemes/Mist/_layout.styl\u914d\u7f6e\u5982\u4e0b\uff1a <pre><code>.main-inner {\n  padding: 20px;\n  width: 85%;\n  +mobile() {\n    +tablet() {\n        width: 100%;\n    }\n    +mobile() {\n        width: 100%;\n    }\n  }\n}\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_25","title":"\u7f51\u7ad9\u5e95\u90e8\u52a0\u4e0a\u8bbf\u95ee\u91cf","text":"<p>\u5728themes\\next\\layout_partials\\footer.swig\u6dfb\u52a0\uff1a <pre><code>&lt;div class=\"powered-by\"&gt;\n&lt;i class=\"fa fa-user-md\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_container_site_uv\"&gt;\n  \u672c\u7ad9\u603b\u8bbf\u95ee\u91cf&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;\u6b21\n&lt;/span&gt;\n&lt;/div&gt;\n</code></pre></p> <ul> <li> <p>pv\u7684\u65b9\u5f0f\uff0c\u5355\u4e2a\u7528\u6237\u8fde\u7eed\u70b9\u51fbn\u7bc7\u6587\u7ae0\uff0c\u8bb0\u5f55n\u6b21\u8bbf\u95ee\u91cf <pre><code>&lt;span id=\"busuanzi_container_site_pv\"&gt;\n    \u672c\u7ad9\u603b\u8bbf\u95ee\u91cf&lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt;\u6b21\n&lt;/span&gt;\n</code></pre></p> </li> <li> <p>uv\u7684\u65b9\u5f0f\uff0c\u5355\u4e2a\u7528\u6237\u8fde\u7eed\u70b9\u51fbn\u7bc7\u6587\u7ae0\uff0c\u53ea\u8bb0\u5f551\u6b21\u8bbf\u5ba2\u6570 <pre><code>&lt;span id=\"busuanzi_container_site_uv\"&gt;\n  \u672c\u7ad9\u603b\u8bbf\u95ee\u91cf&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;\u6b21\n&lt;/span&gt;\n</code></pre> \u200b</p> </li> </ul>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_26","title":"\u6587\u7ae0\u663e\u793a\u56fe\u7247","text":"<p>\u5728\u6587\u7ae0\u5934\u90e8\u6dfb\u52a0\uff1a <pre><code>&lt;meta name=\"referrer\" content=\"no-referrer\"/&gt;\n</code></pre> \u5f15\u7528\u56fe\u7247\u65b9\u5f0f\u5982\u4e0b\uff1a <pre><code>![avatar](https://cdn.nlark.com/yuque/0/2020/png/1759879/1601210476189-c4fc849a-1c9e-44f6-bdb9-248960ed5209.png)\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_27","title":"\u9996\u9875\u6587\u7ae0\u533a\u57df\u6dfb\u52a0\u9634\u5f71","text":"<p>\u5728\u76ee\u5f55/themes/next/source/css/_common/components/components.styl\u6587\u4ef6\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\u3002 <pre><code>.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n  -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n }\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_28","title":"\u6253\u5f00\u201c\u5173\u4e8e\u201d\u3001\u201c\u5206\u7c7b\u201d\u3001\u201c\u6807\u7b7e\u201d","text":"<pre><code>hexo new page \"about\"\n\u751f\u6210source/about/index.md\n---\ntitle: about\ndate: 2021-10-07 18:14:14\n---\n\u6dfb\u52a0type: \"about\"\n\n\nhexo new page \"tags\"\n\u751f\u6210source/tags/index.md\n---\ntitle: tags\ndate: 2021-10-07 18:14:14\n---\n\u6dfb\u52a0type: \"tags\"\n\n\nhexo new page \"categories\"\n\u751f\u6210source/tags/index.md\n---\ntitle: categories\ndate: 2021-10-07 18:14:14\n---\n\u6dfb\u52a0type: \"categories\"\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_29","title":"\u9644","text":"\u547d\u4ee4 \u542b\u4e49 \u7b80\u5199 npm install hexo -g \u5b89\u88c5 \u65e0 npm update hexo -g \u5347\u7ea7 \u65e0 hexo init \u521d\u59cb\u5316 \u65e0 hexo new hexo new \"new article\"  //\u65b0\u5efa\u6587\u7ae0\u2018new article\u2019hexo new page \"about\"  //\u65b0\u5efa\u9875\u9762 \u2018about\u2019 hexo n hexo generate \u4f7f\u7528 Hexo \u751f\u6210\u9759\u6001\u6587\u4ef6\u5feb\u901f\u800c\u4e14\u7b80\u5355hexo generate --watch #\u76d1\u89c6\u6587\u4ef6\u53d8\u52a8 hexo g hexo server \u542f\u52a8\u670d\u52a1\u9884\u89c8hexo server -s #\u9759\u6001\u6a21\u5f0fhexo server -p 5000 #\u66f4\u6539\u7aef\u53e3hexo server -i 192.168.1.1 #\u81ea\u5b9a\u4e49 IP hexo s hexo deploy \u90e8\u7f72(\u81ea\u52a8\u4e0a\u4f20\u4ee3\u7801\u5230github) hexo d","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/hexo-next/#_30","title":"\u53c2\u8003","text":"<p>Next\u4e3b\u9898\u7f8e\u5316 Next\u5347\u7ea7-Mac\u8fc1\u79fb Hexo-NexT \u4e3b\u9898\u4f7f\u7528\u603b\u7ed3</p>","tags":["\u57fa\u7840\u6280\u672f","blog","hexo"]},{"location":"base/linux-service/","title":"linux service","text":"","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_1","title":"\u80cc\u666f","text":"<p>liunx\u4e0a\u8981\u7528\u7ffb\u5899\u8fd8\u662f\u6bd4\u8f83\u8d39\u52b2\u7684\uff0c\u5f53\u7136\u5982\u679c\u4f60\u80fd\u5fcd\u53d7\u84dd\u706f\u8fd9\u79cd\u9f9f\u901f\u7684\u7f51\u7edc\u5c31\u5f53\u6211\u6ca1\u8bf4\u3002\u56e0\u4e3a\u6211\u7528\u7684\u670d\u52a1\u5546\u63a8\u8350\u7528clash\uff0c\u5f53\u7136\u7528ssr\u8fd9\u4e9b\u4e5f\u884c\u3002\u4f46\u65e2\u7136\u63a8\u8350\u662fclash\uff0c\u54b1\u8fd8\u662f\u5c1d\u8bd5\u7740linux\u4e0a\u88c5clash\uff0c\u603b\u7684\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\u3002\u4e3a\u4e86\u9632\u6b62\u540e\u7eed\u6362\u7cfb\u7edf\u5fd8\u8bb0\u4e5f\u597d\uff0c\u6216\u8005\u662f\u5206\u4eab\u7ed9\u9700\u8981\u7684\u670b\u53cb\u4e5f\u597d\uff0c\u8fd9\u91cc\u8fd8\u662f\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u8bb0\u5f55\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_2","title":"\u4e0b\u8f7d","text":"<p>clash\u6b63\u5f0f\u7684\u53d1\u884c\u7248\uff0c\u662f\u901a\u8fc7github\u4e0a\u4e0b\u8f7d\u7684\u3002\u5bf9\u5e94\u7684\u5730\u5740\uff1ahttps://github.com/Dreamacro/clash/releases</p> <p>\u76ee\u524d\u6700\u65b0\u7248\u672c\u662f1.9.1\uff0c\u4e0b\u8f7d\u4e4b\u540e\u8fd0\u884cbin\u6587\u4ef6\u662f\u4f1a\u53d1\u751f\u6bb5\u9519\u8bef\u7684\u3002\u6211\u4e00\u8def\u964d\u7ea7\u52301.6.0\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u8fd9\u662f\u771f\u5751\u554a\uff0c\u5dee\u70b9\u653e\u5f03\u4e86\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_3","title":"\u8fd0\u884c","text":"<p>\u5982\u679c\u53ea\u662f\u7b80\u5355\u7684\u4f7f\u7528\uff0c\u4e0b\u8f7d\u4e4b\u540e\u8fd0\u884cbin\u6587\u4ef6\uff0c\u7136\u540e\u518d\u628a\u914d\u7f6e\u6587\u4ef6\u6539\u6210\u81ea\u5df1\u670d\u52a1\u5546\u7684\u914d\u7f6e\u5373\u53ef\u3002\u9ed8\u8ba4\u7684\u914d\u7f6e\u76ee\u5f55\u5728home\u76ee\u5f55\u4e0b\u7684~/.config/clash/</p> <pre><code>drwxr-xr-x  2 solo solo 4.0K 1\u6708  20 15:16 .\ndrwxr-xr-x 30 solo solo 4.0K 1\u6708  20 15:07 ..\n-rw-r--r--  1 solo solo  16K 1\u6708  19 10:12 cache.db\n-rw-r--r--  1 solo solo  57K 1\u6708  20 15:15 config.yaml\n-rw-r--r--  1 solo solo 4.0M 1\u6708  20 15:18 Country.mmdb\n</code></pre> <p>\u66f4\u65b0\u597d\u81ea\u5df1\u7684config.yaml\u4e4b\u540e\u518d\u6253\u5f00http://clash.razord.top/#/settings\u66f4\u6539\u914d\u7f6e\u3002</p> <p></p>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#linux","title":"linux\u7cfb\u7edf\u914d\u7f6e","text":"<p>\u7aef\u53e3\u53f7\u5bf9\u5e94\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_4","title":"\u5f00\u673a\u81ea\u542f\u52a8","text":"<p>\u914d\u7f6e\u4e00\u4e2a\u670d\u52a1\uff0c\u5728/etc/systemd/system/\u4e0b\u521b\u5efaclash.service\u6587\u4ef6</p> <pre><code>sudo vim /etc/systemd/system/clash.service\n</code></pre> <p>\u628a\u4ee5\u4e0b\u5185\u5bb9\u590d\u5236\u5230clash.service</p> <pre><code>[Unit] \nDescription=clash daemon\n[Service] \nType=simple \nUser=root \nExecStart=/home/solo/bin/clash -d /home/solo/bin/clash/config/\nRestart=on-failure  \n[Install] \nWantedBy=multi-user.target\n</code></pre> <p>\u5176\u4e2d\uff1aExecStart\u540e\u9762\u5e26\u4e0a\u9700\u8981\u6267\u884c\u7684\u811a\u672c\u6216\u8005bin\u6587\u4ef6\uff0c\u8fd9\u91cc\u591a\u52a0-d /home/solo/bin/clash/config\u662f\u56e0\u4e3a\u6211\u6307\u5b9a\u5176\u914d\u7f6e\u6587\u4ef6\u5728/home/solo/bin/clash/config\u76ee\u5f55\u3002</p> <p>\u6700\u540e\u901a\u8fc7systemctl\u547d\u4ee4reload\u670d\u52a1\uff0c\u542f\u7528\u670d\u52a1\uff0c\u542f\u52a8\u670d\u52a1\u5373\u53ef\u3002</p> <pre><code>sudo systemctl daemon-reload \nsudo systemctl enable clash\nsudo systemctl start clash\nsudo systemctl status clash\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_5","title":"\u7ec8\u7aef\u4ee3\u7406\u547d\u4ee4","text":"<p>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7891</p>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/linux-service/#_6","title":"\u673a\u5668\u4eba\u670d\u52a1","text":"<ul> <li>sudo vim /etc/systemd/system/bot.service</li> </ul> <pre><code>[Unit] \nDescription=bot daemon\n[Service] \nType=simple \nUser=root \nExecStart=/home/solo/miniconda3/envs/py36tf1.15/bin/python /home/solo/ext-data/code/github/global_scripts/bot_gerrit_review_schedule.py\nRestart=on-failure  \n[Install] \nWantedBy=multi-user.target\n</code></pre> <ul> <li>sudo systemctl daemon-reload &amp; sudo systemctl enable bot</li> <li>sudo systemctl restart bot</li> <li>sudo systemctl status bot</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","linux"]},{"location":"base/mkdocs/","title":"mkdocs\u535a\u5ba2\u642d\u5efa","text":"","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#conda","title":"conda\u73af\u5883","text":"<pre><code>conda create -n py3.10mkdocs python=3.10  \nconda activate py3.10mkdocs\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#mkdocs_1","title":"\u5b89\u88c5MkDocs","text":"<pre><code>pip install mkdocs\n</code></pre> <p>\u5982\u679c\u56fd\u5185\u7f51\u7edc\u73af\u5883\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u5927\u5b66\u7684\u955c\u50cf\u6e90\u3002</p> <pre><code>pip install mkdocs -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#_1","title":"\u5b89\u88c5\u4e3b\u9898","text":"<pre><code>pip install mkdocs-material\n</code></pre> <p>\u5982\u679c\u56fd\u5185\u7f51\u7edc\u73af\u5883\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u5927\u5b66\u7684\u955c\u50cf\u6e90\u3002</p> <pre><code>pip install mkdocs-material -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre> <p>\u65b0\u5efa\u6587\u4ef6\u540d requirements.txt \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>jinja2~=3.0\nmarkdown~=3.2\nmkdocs~=1.5.3\nmkdocs-material-extensions~=1.3\npygments~=2.16\npymdown-extensions~=10.2\n\n# Requirements for plugins\nbabel~=2.10\ncolorama~=0.4\npaginate~=0.5\nregex&gt;=2022.4\nrequests~=2.26\n</code></pre> <p>\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\u9700\u8981\u7684\u914d\u7f6e\uff1a</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>\u5982\u679c\u56fd\u5185\u7f51\u7edc\u73af\u5883\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u5927\u5b66\u7684\u955c\u50cf\u6e90\u3002</p> <pre><code>pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre> <p>\u5982\u7528\u5230 rss, minify, i18n \u5219\u9700\u8981\u5b89\u88c5\uff1a</p> <pre><code>pip install mkdocs-minify-plugin\npip install mkdocs-rss-plugin\npip install mkdocs-static-i18n\n</code></pre> <p>\u5982\u679c\u56fd\u5185\u7f51\u7edc\u73af\u5883\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u5927\u5b66\u7684\u955c\u50cf\u6e90\u3002</p> <pre><code>pip install mkdocs-minify-plugin -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install mkdocs-rss-plugin -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install mkdocs-static-i18n -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre> <p>\u672c\u5730\u8c03\u8bd5</p> <pre><code>mkdocs serve --dev-addr=127.0.0.1:8009\n</code></pre> <p>\u5982\u9700\u751f\u6210\u9759\u6001\u7f51\u9875\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>mkdocs build\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#_2","title":"\u9690\u85cf\u6587\u7ae0","text":"","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#_3","title":"\u9690\u85cf\u6574\u4e2a\u76ee\u5f55\u63d2\u4ef6","text":"<pre><code>pip install mkdocs-exclude\n</code></pre> <pre><code>plugins:\n  - exclude:\n      glob:\n        - private/*\n</code></pre> <p>\u66f4\u591a\u7528\u6cd5\u53ef\u53c2\u8003\uff1a mkdocs-exclude</p>","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/mkdocs/#_4","title":"\u90e8\u7f72\u6587\u6863","text":"<p>\u7ad9\u70b9\u6587\u4ef6\u90e8\u7f72\u5230\u4ee5\u201cGitHub\u201d\u5e10\u6237\u540d\u547d\u540d\u7684\u4e13\u7528\u5b58\u50a8\u5e93\u4e2d\u7684\u201cmaster\u201d\u5206\u652f\u3002 \u56e0\u6b64\uff0c\u9700\u8981\u5728\u672c\u5730\u7cfb\u7edf\u4e0a\u4f7f\u7528\u4e24\u4e2a\u5b58\u50a8\u5e93\u7684\u5de5\u4f5c\u526f\u672c\u3002 \u4f8b\u5982\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u6587\u4ef6\u7ed3\u6784\uff1a</p> <pre><code>note/                     &lt;--- \u6e90mkdocs\u7b14\u8bb0\u76ee\u5f55\n    mkdocs.yml\n    docs/\ni-rtfsc.github.io/        &lt;--- orgname.github.io\uff0c\u5b58\u653ehtml\u7684\u7ad9\u70b9\n</code></pre> <p>\u5728\u5236\u4f5c\u5e76\u9a8c\u8bc1\u9879\u76ee\u66f4\u65b0\u540e\uff0c\u9700\u8981\u5c06\u76ee\u5f55\u66f4\u6539\u4e3a i-rtfsc.github.io \u5b58\u50a8\u5e93\u5e76\u4ece\u90a3\u91cc\u8c03\u7528 mkdocs gh-deploy \u547d\u4ee4\uff1a</p> <pre><code>cd ../i-rtfsc.github.io\n\nmkdocs gh-deploy --config-file ../note/mkdocs.yml --remote-branch master\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","blog"]},{"location":"base/sshfs/","title":"sshfs\u547d\u4ee4","text":"","tags":["\u57fa\u7840\u6280\u672f","sshfs"]},{"location":"base/sshfs/#_1","title":"\u8fdc\u7a0b","text":"<pre><code>ssh -R 22222:localhost:22 solo@10.0.60.29\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","sshfs"]},{"location":"base/sshfs/#_2","title":"\u672c\u5730","text":"<pre><code>ssh -p 22222 localhost\n\nsudo sshfs -o allow_other,port=22222 solo@localhost:/work/solo/ /Users/solo/vm/\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","sshfs"]},{"location":"base/sshfs/#_3","title":"\u6620\u5c04","text":"<p>\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u91cd\u65b0\u6620\u5c04\u53ef\u80fd\u4f1a\u6709\u5982\u4e0b\u9519\u8bef\u63d0\u793a\u3002\u8fd9\u79cd\u60c5\u51b5\u662f\u56e0\u4e3a\u8fdb\u7a0b\u8fd8\u5728\uff0c\u6309\u5982\u4e0b\u547d\u4ee4\u6740\u6389\u8fdb\u7a0b\u5373\u53ef\u91cd\u73b0\u6620\u5c04\u3002</p> <pre><code>mount_osxfuse: /Users/solo/vm: Input/output error\n</code></pre> <pre><code>sudo kill `ps aux |grep sshfs`\n\u6216\u8005\nsudo pkill -9 sshfs\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","sshfs"]},{"location":"base/tmux/","title":"tmux","text":"","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_1","title":"\u80cc\u666f","text":"<p>tmux \u662f\u4e00\u4e2a\u7ec8\u7aef\u590d\u7528\u5668\uff08terminal multiplexer\uff09\uff0c\u975e\u5e38\u6709\u7528\uff0c\u5c5e\u4e8e\u5e38\u7528\u7684\u5f00\u53d1\u5de5\u5177\u3002</p> <p>\u6211\u4eec\u5728linux\u670d\u52a1\u5668\u4e0a\u7684\u5de5\u4f5c\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u4e00\u4e2a\u8fdc\u7a0b\u7684\u7ec8\u7aef\u8fde\u63a5\u8f6f\u4ef6\u8fde\u63a5\u5230\u8fdc\u7aef\u7cfb\u7edf\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\u4f7f\u7528xshell\u7b49\u5de5\u5177\u901a\u8fc7ssh\u8fdb\u884c\u8fdc\u7a0b\u8fde\u63a5\u3002\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u8981\u505a\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6709\u65f6\u5019\u8fdb\u884c\u7f16\u8bd1\uff0c\u6216\u8005\u4e0b\u8f7d\u5927\u6587\u4ef6\u9700\u8981\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u4e0b\u73ed\u4e4b\u540e\u76f4\u63a5\u8fd0\u884c\u5e0c\u671b\u7b2c\u4e8c\u5929\u65e9\u4e0a\u8fc7\u6765\u8fd0\u884c\u5b8c\u6210\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u803d\u8bef\u5de5\u4f5c\u65f6\u95f4\u3002\u4f46\u662f\u7f51\u7edc\u6709\u65f6\u5019\u4e0d\u7a33\u5b9a\uff0c\u53ef\u80fd\u5728\u534a\u591c\u4f1a\u51fa\u73b0\u8fde\u63a5\u65ad\u6389\u7684\u60c5\u51b5\uff0c\u4e00\u65e6\u8fde\u63a5\u65ad\u6389\uff0c\u6211\u4eec\u6240\u6267\u884c\u7684\u7a0b\u5e8f\u4e5f\u5c31\u4e2d\u65ad\uff0c\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u5199\u4e00\u4e2a\u811a\u672c\u540e\u53f0\u8fd0\u884c\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u65b9\u4fbf\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_2","title":"\u4f1a\u8bdd\u4e0e\u8fdb\u7a0b","text":"<p>\u7528\u6237\u4e0e\u8ba1\u7b97\u673a\u7684\u8fd9\u79cd\u4e34\u65f6\u7684\u4ea4\u4e92\uff0c\u79f0\u4e3a\u4e00\u6b21\"\u4f1a\u8bdd\"\uff08session\uff09\u3002\u4f1a\u8bdd\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\u662f\uff0c\u7a97\u53e3\u4e0e\u5176\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\u662f\u8fde\u5728\u4e00\u8d77\u7684\u3002\u6253\u5f00\u7a97\u53e3\uff0c\u4f1a\u8bdd\u5f00\u59cb\uff1b\u5173\u95ed\u7a97\u53e3\uff0c\u4f1a\u8bdd\u7ed3\u675f\uff0c\u4f1a\u8bdd\u5185\u90e8\u7684\u8fdb\u7a0b\u4e5f\u4f1a\u968f\u4e4b\u7ec8\u6b62\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u8fd0\u884c\u5b8c\u3002\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\uff0cSSH \u767b\u5f55\u8fdc\u7a0b\u8ba1\u7b97\u673a\uff0c\u6253\u5f00\u4e00\u4e2a\u8fdc\u7a0b\u7a97\u53e3\u6267\u884c\u547d\u4ee4\u3002\u8fd9\u65f6\uff0c\u7f51\u7edc\u7a81\u7136\u65ad\u7ebf\uff0c\u518d\u6b21\u767b\u5f55\u7684\u65f6\u5019\uff0c\u662f\u627e\u4e0d\u56de\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u547d\u4ee4\u7684\u3002\u56e0\u4e3a\u4e0a\u4e00\u6b21 SSH \u4f1a\u8bdd\u5df2\u7ecf\u7ec8\u6b62\u4e86\uff0c\u91cc\u9762\u7684\u8fdb\u7a0b\u4e5f\u968f\u4e4b\u6d88\u5931\u4e86\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f1a\u8bdd\u4e0e\u7a97\u53e3\u53ef\u4ee5\"\u89e3\u7ed1\"\uff1a\u7a97\u53e3\u5173\u95ed\u65f6\uff0c\u4f1a\u8bdd\u5e76\u4e0d\u7ec8\u6b62\uff0c\u800c\u662f\u7ee7\u7eed\u8fd0\u884c\uff0c\u7b49\u5230\u4ee5\u540e\u9700\u8981\u7684\u65f6\u5019\uff0c\u518d\u8ba9\u4f1a\u8bdd\"\u7ed1\u5b9a\"\u5176\u4ed6\u7a97\u53e3\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#tmux","title":"tmux","text":"","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_3","title":"\u4f18\u52bf","text":"<ul> <li>\u5b83\u5141\u8bb8\u5728\u5355\u4e2a\u7a97\u53e3\u4e2d\uff0c\u540c\u65f6\u8bbf\u95ee\u591a\u4e2a\u4f1a\u8bdd\u3002\u8fd9\u5bf9\u4e8e\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u5f88\u6709\u7528\u3002</li> <li>\u5b83\u53ef\u4ee5\u8ba9\u65b0\u7a97\u53e3\"\u63a5\u5165\"\u5df2\u7ecf\u5b58\u5728\u7684\u4f1a\u8bdd\u3002</li> <li>\u5b83\u5141\u8bb8\u6bcf\u4e2a\u4f1a\u8bdd\u6709\u591a\u4e2a\u8fde\u63a5\u7a97\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u591a\u4eba\u5b9e\u65f6\u5171\u4eab\u4f1a\u8bdd\u3002</li> <li>\u5b83\u8fd8\u652f\u6301\u7a97\u53e3\u4efb\u610f\u7684\u5782\u76f4\u548c\u6c34\u5e73\u62c6\u5206\u3002</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_4","title":"\u6982\u5ff5","text":"<p>\u5728tmux\u903b\u8f91\u4e2d\uff0c\u9700\u8981\u5206\u6e05\u695a session &gt; window &gt; pane\u8fd9\u4e2a\u5927\u5c0f\u548c\u5c42\u7ea7\u987a\u5e8f\u662f\u6781\u5176\u91cd\u8981\u7684\uff0c\u76f4\u63a5\u5173\u7cfb\u5230\u5de5\u4f5c\u6548\u7387\u3002</p> <ul> <li>session</li> </ul> <p>\u662ftmux\u7684\u4f1a\u8bdd\u3002\u6211\u4e4b\u524d\u5c31\u9519\u628a\u8fd9\u4e2asession\u5f53\u6210\u7a97\u53e3\u7528\uff0c\u9020\u6210\u4e86\u5f88\u591a\u4e0d\u4fbf\u3002\u4e00\u822c\u53ea\u8981\u4fdd\u5b58\u4e00\u4e2asession\u5c31\u8db3\u591f\u4e86\u3002</p> <ul> <li>window</li> </ul> <p>\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5de5\u4f5c\u533a\uff0c\u5305\u542b\u5f88\u591a\u5206\u5c4f\uff0c\u53ef\u4ee5\u9488\u5bf9\u6bcf\u79cd\u4efb\u52a1\u5206\u4e00\u4e2awindow\u3002\u5982\u4e0b\u8f7d\u4e00\u4e2awindow\uff0c\u7f16\u7a0b\u4e00\u4e2awindow\u3002</p> <ul> <li>pane</li> </ul> <p>\u662f\u5728window\u91cc\u9762\u7684\u5c0f\u5206\u5c4f\uff0c\u6700\u5e38\u7528\u4e5f\u6700\u597d\u7528\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_5","title":"\u5b89\u88c5","text":"<pre><code>## Ubuntu \u6216 Debian\n$ sudo apt-get install tmux\n\n## CentOS \u6216 Fedora\n$ sudo yum install tmux\n\n## Mac\n$ brew install tmux\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_7","title":"\u542f\u52a8","text":"<pre><code>tmux\n</code></pre> <p>\u8f93\u5165tmux\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2asession\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2awindow\uff0c\u8be5window\u4e2d\u5305\u542b\u4e00\u4e2apane\uff0cpane\u91cc\u6253\u5f00\u4e86\u4e00\u4e2ashell\u5bf9\u8bdd\u6846\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u5e95\u90e8\u6709\u4e00\u4e2a\u72b6\u6001\u680f\u3002\u72b6\u6001\u680f\u7684\u5de6\u4fa7\u662f\u7a97\u53e3\u4fe1\u606f\uff08\u7f16\u53f7\u548c\u540d\u79f0\uff09\uff0c\u53f3\u4fa7\u662f\u7cfb\u7edf\u4fe1\u606f\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_8","title":"\u9000\u51fa","text":"<p>\u6309\u4e0bCtrl+d\u6216\u8005\u663e\u5f0f\u8f93\u5165exit\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u9000\u51fa Tmux \u7a97\u53e3(\u5373:\u8be5\u4f1a\u8bdd\u7ed3\u675f)\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_9","title":"\u524d\u7f00\u952e","text":"<p>tmux \u7a97\u53e3\u6709\u5927\u91cf\u7684\u5feb\u6377\u952e\u3002\u6240\u6709\u5feb\u6377\u952e\u90fd\u8981\u901a\u8fc7\u524d\u7f00\u952e\u5524\u8d77\u3002\u9ed8\u8ba4\u7684\u524d\u7f00\u952e\u662fCtrl+b\uff0c\u5373\u5148\u6309\u4e0bCtrl+b\uff0c\u5feb\u6377\u952e\u624d\u4f1a\u751f\u6548\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5e2e\u52a9\u547d\u4ee4\u7684\u5feb\u6377\u952e\u662fCtrl+b ?\u3002\u5b83\u7684\u7528\u6cd5\u662f\uff0c\u5728tmux\u7a97\u53e3\u4e2d\uff0c\u5148\u6309\u4e0bCtrl+b\uff0c\u518d\u6309\u4e0b?\uff0c\u5c31\u4f1a\u663e\u793a\u5e2e\u52a9\u4fe1\u606f\u3002\u7136\u540e\uff0c\u6309\u4e0b ESC \u952e\u6216q\u952e\uff0c\u5c31\u53ef\u4ee5\u9000\u51fa\u5e2e\u52a9\u3002</p> <ol> <li>\u6309\u4e0bCtrl + b\u540e\u624b\u6307\u677e\u5f00</li> <li>\u7136\u540e\u518d\u6309\u5176\u4ed6\u952e\u3002</li> </ol>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#session","title":"session(\u4f1a\u8bdd)\u7ba1\u7406","text":"","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_10","title":"\u65b0\u5efa\u4f1a\u8bdd","text":"<p>tmux\u521b\u5efa\u7684session\u7684\u540d\u5b57\u9ed8\u8ba4\u90fd\u662f\u6309\u6570\u5b57\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u4e2a\u542f\u52a8\u7684tmux\u7a97\u53e3\uff0c\u7f16\u53f7\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u7a97\u53e3\u7684\u7f16\u53f7\u662f1\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f7f\u7528\u7f16\u53f7\u533a\u5206\u4f1a\u8bdd\uff0c\u4e0d\u592a\u76f4\u89c2\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u4e3a\u4f1a\u8bdd\u8d77\u540d\u3002</p> <pre><code>tmux new -s &lt;session-name&gt;\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u65b0\u5efa\u4e00\u4e2a\u6307\u5b9a\u540d\u79f0\u7684\u4f1a\u8bdd\uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_11","title":"\u9000\u51fa\u4f1a\u8bdd","text":"<p>\u5728tmux\u91cc\uff0c\u5982\u679c\u9700\u8981\u91cd\u65b0\u9000\u56determinal\uff0c\u53ef\u8f93\u5165Ctrl + b d \u547d\u4ee4\uff08\u6216\u8005\u8f93\u5165\uff1atmux detach\u547d\u4ee4\uff09\u3002\u5176\u4e2dd\u8868\u793adetaching\u3002\u8fd0\u884c\u8be5\u547d\u4ee4\u540e\u540e\u5e76\u4e0d\u4f1a\u771f\u6b63\u5173\u95edsession\uff0c\u800c\u662f\u5c06session\u6302\u8d77\uff0c\u5728tmux session\u91cc\u9762\u7684\u7a0b\u5e8f\u8fd8\u662f\u4f1a\u5728\u540e\u53f0\u7ee7\u7eed\u8fd0\u884c\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_12","title":"\u67e5\u770b\u4f1a\u8bdd","text":"<p>tmux ls\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6240\u6709\u7684 Tmux \u4f1a\u8bdd\u3002</p> <pre><code>$ tmux ls\n## or\n$ tmux list-session\n</code></pre> <p></p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_13","title":"\u8fdb\u5165\u4f1a\u8bdd","text":"<p>tmux attach\u547d\u4ee4\u7528\u4e8e\u91cd\u65b0\u63a5\u5165\u67d0\u4e2a\u5df2\u5b58\u5728\u7684\u4f1a\u8bdd\u3002</p> <pre><code>## \u4f7f\u7528\u4f1a\u8bdd\u7f16\u53f7\n$ tmux attach -t 0\n\n## \u4f7f\u7528\u4f1a\u8bdd\u540d\u79f0\n$ tmux attach -t &lt;session-name&gt;\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u5c06attach\u7b80\u5199\u6210a</p> <p>$ tmux a -t","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_14","title":"\u5207\u6362\u4f1a\u8bdd","text":"<p>tmux switch\u547d\u4ee4\u7528\u4e8e\u5207\u6362\u4f1a\u8bdd\u3002</p> <pre><code>## \u4f7f\u7528\u4f1a\u8bdd\u7f16\u53f7\n$ tmux switch -t 0\n\n## \u4f7f\u7528\u4f1a\u8bdd\u540d\u79f0\n$ tmux switch -t &lt;session-name&gt;\n</code></pre> <p>\u4f7f\u7528\u5feb\u6377\u952eCtrl+b s\u5feb\u901f\u67e5\u770bsession\uff0c\u5e76\u4f7f\u7528\u65b9\u5411\u952e\u5207\u6362\u4f1a\u8bdd\uff0c\u975e\u5e38\u65b9\u4fbf\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_15","title":"\u91cd\u547d\u540d\u4f1a\u8bdd","text":"<p>tmux rename-session\u547d\u4ee4\u7528\u4e8e\u91cd\u547d\u540d\u4f1a\u8bdd\u3002</p> <pre><code>tmux rename-session -t 0 &lt;new-name&gt;\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528Ctrl+b $\uff1a\u5feb\u901f\u91cd\u547d\u540d\u5f53\u524d\u4f1a\u8bdd\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_16","title":"\u6740\u6b7b\u4f1a\u8bdd","text":"<p>tmux kill-session\u547d\u4ee4\u7528\u4e8e\u6740\u6b7b\u67d0\u4e2a\u4f1a\u8bdd\u3002</p> <pre><code>## \u4f7f\u7528\u4f1a\u8bdd\u7f16\u53f7\ntmux kill-session -t 0\n## \u4f7f\u7528\u4f1a\u8bdd\u540d\u79f0\ntmux kill-session -t &lt;session-name&gt;\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#window","title":"window(\u7a97\u53e3)\u7ba1\u7406","text":"","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_17","title":"\u65b0\u5efa\u7a97\u53e3","text":"<p>tmux new-window\u547d\u4ee4\u7528\u6765\u521b\u5efa\u65b0\u7a97\u53e3\u3002</p> <pre><code>$ tmux new-window\n\n## \u65b0\u5efa\u4e00\u4e2a\u6307\u5b9a\u540d\u79f0\u7684\u7a97\u53e3\n$ tmux new-window -n &lt;window-name&gt;\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e Ctrl+b c</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_18","title":"\u5207\u6362\u7a97\u53e3","text":"<p>tmux select-window\u547d\u4ee4\u7528\u6765\u5207\u6362\u7a97\u53e3\u3002</p> <pre><code>## \u5207\u6362\u5230\u6307\u5b9a\u7f16\u53f7\u7684\u7a97\u53e3\n$ tmux select-window -t &lt;window-number&gt;\n\n## \u5207\u6362\u5230\u6307\u5b9a\u540d\u79f0\u7684\u7a97\u53e3\n$ tmux select-window -t &lt;window-name&gt;\n</code></pre> <p>\u5feb\u6377\u952e Ctrl+b  \u5207\u6362\u5230\u6307\u5b9a\u7f16\u53f7\u7684\u7a97\u53e3\uff0c\u5176\u4e2d\u7684\u662f\u72b6\u6001\u680f\u4e0a\u7684\u7a97\u53e3\u7f16\u53f7\u3002 <p>\u4ece\u5217\u8868\u4e2d\u9009\u62e9\u7a97\u53e3\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_19","title":"\u91cd\u547d\u540d\u7a97\u53e3","text":"<p>tmux rename-window\u547d\u4ee4\u7528\u4e8e\u4e3a\u5f53\u524d\u7a97\u53e3\u8d77\u540d\uff08\u6216\u91cd\u547d\u540d\uff09\u3002</p> <pre><code>tmux rename-window &lt;window-name&gt;\n</code></pre> <p>\u5feb\u6377\u952e Ctrl+b ,</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_20","title":"\u6740\u6b7b\u7a97\u53e3","text":"<p>tmux kill-window\u547d\u4ee4\u7528\u4e8e\u6740\u6b7b\u7a97\u53e3\u3002</p> <pre><code>tmux kill-window -t &lt;window-name&gt;\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_21","title":"\u5feb\u6377\u952e","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e9b\u4f1a\u8bdd\u76f8\u5173\u7684\u5feb\u6377\u952e\u3002</p> <ul> <li>Ctrl+b c</li> </ul> <p>\u53ef\u4ee5\u521b\u5efa\u65b0\u7684window\u3002</p> <ul> <li>Ctrl+b 0</li> </ul> <p>\u53ef\u4ee5\u5207\u6362\u52300\u53f7window\u3002</p> <ul> <li>Ctrl+b p</li> </ul> <p>\u5207\u6362\u5230\u4e0a\u4e00\u4e2awindow\u3002</p> <ul> <li>Ctrl+b n</li> </ul> <p>\u5207\u6362\u5230\u4e0b\u4e00\u4e2awindow\u3002</p> <ul> <li>Ctrl+b ,</li> </ul> <p>\u5bf9\u5f53\u524dwindow\u8fdb\u884c\u91cd\u547d\u540d\u3002</p> <ul> <li>Ctrl+b w</li> </ul> <p>\u53ef\u4ee5\u4ecewindow\u5217\u8868\u91cc\u9009\u62e9window\uff0c\u8be5\u663e\u793a\u7ed3\u679c\u4e0eCtrl + b + s \u4e00\u6837\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#pane","title":"pane(\u7a97\u683c)\u7ba1\u7406","text":"<p>tmux \u53ef\u4ee5\u5c06\u7a97\u53e3\u5206\u6210\u591a\u4e2a\u7a97\u683c\uff08pane\uff09\uff0c\u6bcf\u4e2a\u7a97\u683c\u8fd0\u884c\u4e0d\u540c\u7684\u547d\u4ee4\u3002\u4ee5\u4e0b\u547d\u4ee4\u90fd\u662f\u5728tmux\u7a97\u53e3\u4e2d\u6267\u884c\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_22","title":"\u5206\u5272\u7a97\u683c","text":"<p>tmux split-window\u547d\u4ee4\u7528\u6765\u5206\u5272\u7a97\u683c\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_23","title":"\u5782\u76f4","text":"<pre><code>## \u5212\u5206\u4e0a\u4e0b\u4e24\u4e2a\u7a97\u683c\n$ tmux split-window\n</code></pre> <p>\u5feb\u6377\u952e Ctrl+b \"</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_24","title":"\u6c34\u5e73","text":"<pre><code>## \u5212\u5206\u5de6\u53f3\u4e24\u4e2a\u7a97\u683c\n$ tmux split-window -h\n</code></pre> <p>\u5feb\u6377\u952e Ctrl+b %</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_25","title":"\u5207\u6362\u7a97\u683c","text":"<p>tmux select-pane\u547d\u4ee4\u7528\u6765\u79fb\u52a8\u5149\u6807\u4f4d\u7f6e\u3002</p> <pre><code>## \u5149\u6807\u5207\u6362\u5230\u4e0a\u65b9\u7a97\u683c\n$ tmux select-pane -U\n\n## \u5149\u6807\u5207\u6362\u5230\u4e0a\u65b9\u7a97\u683c\n$ tmux select-pane -D\n\n## \u5149\u6807\u5207\u6362\u5230\u5de6\u8fb9\u7a97\u683c\n$ tmux select-pane -L\n\n## \u5149\u6807\u5207\u6362\u5230\u53f3\u8fb9\u7a97\u683c\n$ tmux select-pane -R\n</code></pre> <p>\u5feb\u6377\u952eCtrl+b \u952e\u76d8\u65b9\u5411\u952e(\u4e0a\u4e0b\u5de6\u53f3)</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_26","title":"\u8c03\u6574\u7a97\u683c\u5927\u5c0f","text":"<p>\u4f7f\u7528\u5feb\u6377\u952eCtrl+b Alt+\u65b9\u5411\u952e</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_27","title":"\u6740\u6b7b\u7a97\u683c","text":"<p>tmux kill-pane\u547d\u4ee4\u7528\u6765\u6740\u6b7b\u7a97\u683c\u3002</p> <pre><code>tmux kill-pane -t &lt;pane-name&gt;\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tmux/#_28","title":"\u5feb\u6377\u952e","text":"<ul> <li>Ctrl+b \"</li> </ul> <p>\u5212\u5206\u4e0a\u4e0b\u4e24\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b %</li> </ul> <p>\u5212\u5206\u5de6\u53f3\u4e24\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b  <p>\u5149\u6807\u5207\u6362\u5230\u5176\u4ed6\u7a97\u683c\u3002\u662f\u6307\u5411\u8981\u5207\u6362\u5230\u7684\u7a97\u683c\u7684\u65b9\u5411\u952e\uff0c\u6bd4\u5982\u5207\u6362\u5230\u4e0b\u65b9\u7a97 <p>\u683c\uff0c\u5c31\u6309\u65b9\u5411\u952e\u2193\u3002</p> <ul> <li>Ctrl+b ;</li> </ul> <p>\u5149\u6807\u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b o</li> </ul> <p>\u5149\u6807\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b {</li> </ul> <p>\u5f53\u524d\u7a97\u683c\u4e0e\u4e0a\u4e00\u4e2a\u7a97\u683c\u4ea4\u6362\u4f4d\u7f6e\u3002</p> <ul> <li>Ctrl+b }</li> </ul> <p>\u5f53\u524d\u7a97\u683c\u4e0e\u4e0b\u4e00\u4e2a\u7a97\u683c\u4ea4\u6362\u4f4d\u7f6e\u3002</p> <ul> <li>Ctrl+b Ctrl+o</li> </ul> <p>\u6240\u6709\u7a97\u683c\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e00\u4e2a\u7a97\u683c\u53d8\u6210\u6700\u540e\u4e00\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b Alt+o</li> </ul> <p>\u6240\u6709\u7a97\u683c\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6700\u540e\u4e00\u4e2a\u7a97\u683c\u53d8\u6210\u7b2c\u4e00\u4e2a\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b x</li> </ul> <p>\u5173\u95ed\u5f53\u524d\u7a97\u683c\u3002</p> <ul> <li>Ctrl+b !</li> </ul> <p>\u5c06\u5f53\u524d\u7a97\u683c\u62c6\u5206\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7a97\u53e3\u3002</p> <ul> <li>Ctrl+b z</li> </ul> <p>\u5f53\u524d\u7a97\u683c\u5168\u5c4f\u663e\u793a\uff0c\u518d\u4f7f\u7528\u4e00\u6b21\u4f1a\u53d8\u56de\u539f\u6765\u5927\u5c0f\u3002</p> <ul> <li>Ctrl+b Ctrl+ <p>\u6309\u7bad\u5934\u65b9\u5411\u8c03\u6574\u7a97\u683c\u5927\u5c0f\u3002</p> <ul> <li>Ctrl+b q</li> </ul> <p>\u663e\u793a\u7a97\u683c\u7f16\u53f7\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tmux"]},{"location":"base/tar/","title":"tar\u547d\u4ee4","text":"","tags":["\u57fa\u7840\u6280\u672f","tar"]},{"location":"base/tar/#_1","title":"\u538b\u7f29","text":"<ul> <li>\u591a\u7ebf\u7a0b</li> </ul> <pre><code>tar --use-compress-program=pigz -cpvf \u538b\u7f29\u5305\u540d\u5b57.tar.gz \u8981\u538b\u7f29\u7684\u6587\u4ef6\u5939\n</code></pre> <ul> <li>\u591a\u7ebf\u7a0b + \u5206\u5305</li> </ul> <pre><code>tar --use-compress-program=pigz -cpvf - \u8981\u538b\u7f29\u7684\u6587\u4ef6\u5939 | split -b 100m -d -a 3 - \u538b\u7f29\u5305\u540d\u5b57.tar.gz_\n</code></pre> <p>\uff08-b 100m\uff09\uff1a\u6bcf\u4e2a\u8f93\u51fa\u6587\u4ef6\u5927\u5c0f100m\uff0c\u5355\u4f4dm\u3001k\u3001bd\u7b49\u3002 \uff08-d\uff09\uff1a\u4f7f\u7528\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\u540e\u7f00\uff0c\u800c\u4e0d\u662f\u5b57\u6bcd\u540e\u7f00\u3002 \uff08-a 3\uff09\uff1a\u751f\u6210\u957f\u5ea6\u4e3a\u20183\u2019\u7684\u540e\u7f00\uff0c\u4e5f\u5c31\u662f000~999\uff0c\u9ed8\u8ba4\u503c\u20182\u2019\u3002 \u6700\u540e\u8981\u63d0\u9192\u90a3\u4e24\u4e2a\"-\"\u4e0d\u8981\u6f0f\u4e86\uff0c\u90a3\u662f\u201ctar\u201d\u7684 ouput \u548c\u201csplit\u201d\u7684 input \u7684\u53c2\u6570\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","tar"]},{"location":"base/tar/#_2","title":"\u89e3\u538b","text":"<ul> <li>\u591a\u7ebf\u7a0b</li> </ul> <pre><code>tar --use-compress-program=pigz -xvf \u538b\u7f29\u5305\u540d\u5b57.tar.gz\n</code></pre> <ul> <li>\u591a\u7ebf\u7a0b + \u5206\u5305</li> </ul> <pre><code>cat \u538b\u7f29\u5305\u540d\u5b57.tar.gz_* | tar --use-compress-program=pigz -xvf -\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","tar"]},{"location":"development-board/raspberry-pi/intro/","title":"\u6811\u8393\u6d3e\u57fa\u7840\u914d\u7f6e","text":"","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#_1","title":"\u7cfb\u7edf\u5b89\u88c5","text":"<p>\u6811\u8393\u6d3e Zero\u7cfb\u7edf\u5b98\u7f51\u4e0b\u8f7d\u5730\u5740 \uff0c\u4e0d\u652f\u6301\u5b89\u88c5\u5b89\u88c5Ubuntu\u7b49\u3002\u7cfb\u7edf\u5b89\u88c5\u4e5f\u5f88\u65b9\u4fbf\uff0c\u4e0b\u8f7d\u7cfb\u7edf\u540e\u5237\u5165sdcard\u5c31\u53ef\u4ee5\u4e86\u3002\u4e0d\u4f1a\u4e5f\u53ef\u4ee5\u770b\u5b98\u65b9\u6559\u7a0b\u6216\u8005\u767e\u5ea6\uff0c\u5c0f\u767d\u90fd\u4f1a\u5237\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#usb","title":"USB\u4e0a\u7f51","text":"<p>\u6811\u8393\u6d3e Zero \u4e4b\u6240\u4ee5\u6210\u4e3a\u4e00\u6b3e\u975e\u5e38\u68d2\u7684\u5355\u677f\u8ba1\u7b97\u673a\u5e76\u4e0d\u5168\u56e0\u4e3a\u5b83\u5c0f\u5de7\u7684\u5c3a\u5bf8\u548c\u4fbf\u5b9c\u7684\u4ef7\u683c\uff0c\u8fd8\u5f97\u76ca\u4e8e\u5b83\u4fbf\u6377\u3001\u6613\u7528\u7684\u7279\u6027\u3002\u901a\u8fc7USB\u5c06\u6811\u8393\u6d3e Zero \u548c\u7535\u8111\u8fde\u63a5\u8d77\u6765\u3002\u6811\u8393\u6d3e Zero \u5373\u53ef\u914d\u7f6e\u6210 USB/\u4ee5\u592a\u7f51\u8bbe\u5907\uff0c\u8fd9\u65f6\u4ec5\u9700\u8981\u4e00\u4e2a USB \u63a5\u53e3\u5c31\u5b9e\u73b0\u7ed9\u6811\u8393\u6d3e\u4f9b\u7535\u7684\u540c\u65f6\u5c06\u5b83\u63a5\u5165\u56e0\u7279\u7f51\u3002\u4e0d\u518d\u9700\u8981\u643a\u5e26\u989d\u5916\u7684\u7535\u6e90\u9002\u914d\u5668\u3001 USB HUB\u548c\u65e0\u7ebf\u7f51\u5361\u3002\u53ef\u4ee5\u8bf4\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u8fde\u63a5\u6811\u8393\u6d3e\u6700\u7b80\u5355\u3001\u65b9\u4fbf\u7684\u65b9\u5f0f\uff01</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#config","title":"config","text":"<p>\u5c06\u5237\u597d\u7cfb\u7edf\u7684 SD \u5361\u5728\u7535\u8111\u4e0a\u6253\u5f00\uff0c\u8fdb\u5165 SD \u5361\u6839\u76ee\u5f55\u5e76\u6253\u5f00 config.txt \u6587\u4ef6\u3002\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4e00\u884c\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>dtoverlay=dwc2\n</code></pre>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#cmdline","title":"cmdline","text":"<p>\u5c06\u5237\u597d\u7cfb\u7edf\u7684 SD \u5361\u5728\u7535\u8111\u4e0a\u6253\u5f00\uff0c\u8fdb\u5165 SD \u5361\u6839\u76ee\u5f55\u5e76\u6253\u5f00 cmdline.txt\u6587\u4ef6\u3002\u5728\u6587\u4ef6\u4e2d\u627e\u5230rootwait\uff0c\u5728\u5176\u540e\u52a0\uff1a  </p> <pre><code>modules-load=dwc2,g_ether\n</code></pre> <p>\u6700\u540ecmdline.txt\u6587\u4ef6\u5185\u5bb9\u5982\uff1a  </p> <pre><code>console=serial0,115200 console=tty1 root=PARTUUID=5e4241f7-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait modules-load=dwc2,g_ether quiet splash plymouth.ignore-serial-consoles\n</code></pre>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#ssh","title":"ssh","text":"<p>\u6700\u540e\u5728\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a ssh \u7684\u6587\u4ef6\u6216\u76ee\u5f55\u3002</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#_2","title":"\u4e92\u8054\u7f51\u5171\u4eab","text":"<p>\u7ecf\u8fc7\u524d\u9762\u4e09\u4e2a\u6b65\u9aa4\u4e4b\u540e\uff0c\u53ef\u4ee5\u4ece\u7535\u8111\u4e0a\u5f39\u51fa SD \u5361\u3002\u628a SD \u5361\u63d2\u5165\u6811\u8393\u6d3e Zero\u540e\u901a\u8fc7USB\u8fde\u4e0a\u7535\u8111\u5c82\u53ef\u3002\u7b49\u5f85\u4e00\u5206\u949f\u5de6\u53f3\u53ef\u4ee5\u5728\u7535\u8111\u7684\u7f51\u7edc\u8bbe\u5907\u5217\u8868\u770b\u5230\u4e86\u8bbe\u5907\u5df2\u5206\u914d\u597d IP \u5730\u5740\u3002</p> <p></p> <p>\u73b0\u5728\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7 SSH \u8fde\u63a5\u6811\u8393\u6d3e\uff0c\u901a\u8fc7\u5b98\u65b9\u8d44\u6599\u6211\u4eec\u77e5\u9053\u6811\u8393\u6d3e\u9ed8\u8ba4\u7528\u6237\u4e3api\uff0c\u9ed8\u8ba4\u5bc6\u7801\u662fraspberry\u3002\u6211\u4eec\u6839\u636e\u7f51\u7edc\u8bbe\u5907\u5217\u8868\u4e2d\u770b\u5230\u7684IP\u5c1d\u8bd5ssh pi@169.254.215.53\u8fde\u4e0a\u6811\u8393\u6d3e\uff0c\u53d1\u73b0\u5982\u4f55\u8f93\u5165\u5bc6\u7801\u90fd\u9700\u8981\u518d\u6b21\u8f93\u5165\uff0c\u5c31\u7c7b\u4f3c\u4e8e\u5bc6\u7801\u9519\u8bef\u7684\u60c5\u51b5\u3002\u4e00\u5f00\u59cb\u662f\u4ee5\u4e3a\u8f93\u5165\u9519\u8bef\uff0c\u751a\u81f3\u4e00\u6bb5\u8ba4\u4e3a\u5b98\u65b9\u9ed8\u8ba4\u5bc6\u7801\u4e0d\u662fraspberry\u3002</p> <p>\u540e\u6765\u6362\u4e86\u53e6\u5916\u4e00\u76f4\u65b9\u5f0fssh -l pi raspberrypi.local\u00a0\u7ec8\u4e8e\u53ef\u4ee5\u8fde\u4e0a\u4e86\uff0c\u8fde\u4e0a\u4e4b\u540e\u5728\u7ec8\u7aef\u7528hostname -I\u547d\u4ee4\u624d\u53d1\u73b0\u771f\u6b63\u7684IP\u5730\u5740\u4e3a192.168.2.4\u3002\u96be\u602a\u7528IP\u4e00\u76f4\u8fde\u4e0d\u4e0a\uff0c\u9000\u51fa\u540e\u5728\u7ec8\u7aef\u8f93\u5165ssh pi@192.168.2.4 \u679c\u7136\u53ef\u4ee5\u8fde\u4e0a\u3002\u81f3\u6b64\u6811\u8393\u6d3e\u8fd8\u672a\u80fd\u8fde\u4e0a\u5916\u7f51\uff0c\u8fd8\u9700\u8981\u5728\u7535\u8111\u4e0a\u751a\u81f3\u4e92\u8054\u7f51\u5171\u4eab\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>window\u5171\u4eab\u7f51\u7edc\u53ef\u4ee5\u53c2\u8003window\u6559\u7a0b</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#wi-fi","title":"WI-FI\u4e0a\u7f51","text":"<p>\u4f7f\u7528sudo raspi-config\u547d\u4ee4\u8f93\u5165\u8d26\u6237\u5bc6\u7801\u5373\u53ef\uff0c\u6216\u8005\u7528\u547d\u4ee4\u884c\u3002\u53c2\u8003\u5b98\u65b9\u6559\u7a0b</p> <p>\u4e0d\u77e5\u9053\u4e3a\u4f55\u6211\u6309\u5b98\u65b9\u6559\u7a0b\u8fde\u4e0d\u4e0aWI-FI\uff0c\u6309\u5982\u4e0b\u6b65\u9aa4\u4fee\u6539\u53ef\u8fdeWi-Fi\u4e0a\u7f51\uff1a</p> <ol> <li>\u4fee\u6539/etc/network/interfaces</li> </ol> <pre><code>auto lo\n\niface lo inet loopback\n\nauto eth0\niface eth0 inet dhcp\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-conf /etc/wpa.conf\n\niface default inet dhcp\n</code></pre> <ol> <li>\u65b0\u589e\u6587\u4ef6/etc/wpa.conf</li> </ol> <pre><code>network={\n    ssid=\"5GWifi\"\n    psk=\"*****\u5bc6\u7801*****\"\n    priority=10\n    id_str=\"5GWifi\"\n}\n\nnetwork={\n    ssid=\"2GWifi\"\n    psk=\"*****\u5bc6\u7801*****\"\n    priority=9\n    id_str=\"2GWifi\"\n}\n\nnetwork={\n    ssid=\"xxx\"\n    psk=\"*****\u5bc6\u7801*****\"\n    priority=8\n}\n</code></pre> <p>5GWifi\u662f\u4e00\u4e2a5G\u7f51\u7edc\uff0c\u91cd\u542f\u6811\u8393\u6d3e\u540e\u53d1\u73b0\u8fde\u4e0a\u4e862GWifi\u30025GWifi\u7684\u4f18\u5148\u7ea7\uff08priority\uff09\u6bd42GWifi\u8fd8\u9ad8\uff0c\u6811\u8393\u6d3e\u8fde\u4e0a2GWifi\u90a3\u53ef\u80fd\u662f\u56e0\u4e3a\u4e0d\u652f\u63015G\u7f51\u7edc\u5427\u3002</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#_3","title":"\u8f6f\u4ef6\u6e90","text":"<p>\u56e0\u4e3a\u5927\u5bb6\u90fd\u77e5\u9053\u90fd\u539f\u56e0\uff0c\u4f7f\u7528\u5b98\u65b9\u6e90\u5b89\u88c5\u8f6f\u4ef6\u6162\u8bbe\u7f6e\u5b89\u88c5\u4e0d\u4e86\uff0c\u9700\u8981\u6362\u6210\u56fd\u5185\u6e90\u3002\u53ef\u4ee5\u6362\u6210\u4e2d\u79d1\u5927\u6216\u6e05\u534e\u955c\u50cf\u6e90\u3002\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>sudo sed -i 's#://raspbian.raspberrypi.org#s://mirrors.ustc.edu.cn/raspbian#g' /etc/apt/sources.list \nsudo sed -i 's#://archive.raspberrypi.org/debian#s://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian#g' /etc/apt/sources.list.d/raspi.list\n\n\u6216\u8005\n\nsudo sed -i 's#://raspbian.raspberrypi.org#s://mirrors.tuna.tsinghua.edu.cn/raspbian#g' /etc/apt/sources.list\nsudo sed -i 's#://archive.raspberrypi.org/debian#s://mirrors.tuna.tsinghua.edu.cn/raspberrypi#g' /etc/apt/sources.list.d/raspi.list\n</code></pre> <p>\u8f6f\u4ef6\u6e90\uff08\u5168\uff09</p>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"development-board/raspberry-pi/intro/#_4","title":"\u65f6\u533a","text":"<p>\u521a\u5b89\u88c5\u597d\u6811\u8393\u6d3e\u540e\uff0c\u65f6\u95f4\u662f\u4e0d\u5bf9\u7684\uff0c\u5728\u5f00\u53d1\u9700\u8981\u4e4b\u540e\u624d\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002\u4fee\u6539\u65f6\u95f4\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u65e0\u975e\u5c31\u662f\u540c\u6b65\u7f51\u7edc\u65f6\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u542f\u7528\u7f51\u7edc\u65f6\u95f4\u534f\u8baentp\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u547d\u4ee4\uff1a</p> <pre><code>sudo timedatectl set-ntp true\n</code></pre> <p>\u542f\u7528NTP\u4ee5\u540e\uff0c\u901a\u8fc7date\u547d\u4ee4\u6765\u67e5\u770b\u5f53\u524d\u65f6\u95f4\u53d1\u73b0\u65f6\u95f4\u8ddf\u73b0\u5728\u76f8\u5dee8\u4e2a\u5c0f\u65f6\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u4fee\u6539\u65f6\u533a\uff1a  </p> <pre><code>sudo dpkg-reconfigure tzdata\n</code></pre>","tags":["\u5f00\u53d1\u677f","\u6811\u8393\u6d3e"]},{"location":"source-code/personal-source-code-intro/","title":"\u4e2a\u4eba\u6e90\u7801\u5de5\u7a0b\u7b80\u4ecb","text":"<p>Tip</p> <p>\u4e2a\u4eba\u6e90\u7801\u6db5\u76d6:</p> <ul> <li>aosp\u6e90\u7801java\u3001cpp \u4e1d\u6ed1\u8df3\u8f6c</li> <li>Android hal</li> <li>Android fwk</li> <li>Android app</li> <li>Android \u5404\u79cd\u8c03\u8bd5\u6280\u5de7</li> <li>\u7f51\u7edc\u722c\u866b</li> <li>AI\u7b97\u6cd5\u6a21\u578b</li> <li>AI\u5de5\u7a0b\u843d\u5730</li> <li>...</li> </ul> <p>Note</p> <p>\u66f4\u591a\u5de5\u7a0b\u8bf7\u81ea\u884c\u67e5\u9605 i-rtfsc</p> <ul> <li> <p> as-aosp</p> <p>\u5feb\u901f\u7684\u5bfc\u5165aosp framework(\u5305\u542bjava/native)\u3001 aosp \u7cfb\u7edfapp\u3001 \u56fd\u5185\u67d0\u4e9b\u5382\u5546\u6269\u5c55\u7684fwk\u4ee3\u7801\u3002</p> <p>\u6bd4 idegen(android.ipr\u548candroid.iml) \u65b9\u6848\u8fd8\u5feb\uff0c\u5e76\u4e14\u201c\u8054\u60f3\u201d\u4e5f\u5f88\u65b9\u4fbf\u3002</p> <p>\u8be6\u7ec6\u8bf7\u67e5\u9605 as-aosp\u5de5\u7a0b\u7b80\u4ecb</p> <p>\u5de5\u7a0b\u5730\u5740\uff1aas-aosp</p> </li> <li> <p> Android fwk\u89e3\u8026\u65b9\u6848</p> <p>\u4f7f\u7528\u5230\u4e86 \u5de5\u5382\u6a21\u5f0f\u3001\u5355\u4f8b\u6a21\u5f0f\u3001\u4ee3\u7406\u6a21\u5f0f\u3001\u4eab\u5143\u6a21\u5f0f\u7b49\uff0c\u5b9e\u73b0 android framework \u4ee3\u7801\u89e3\u8026\u3002</p> <p>\u8be6\u7ec6\u8bf7\u67e5\u9605 Android fwk\u89e3\u8026\u65b9\u6848</p> <p>\u5de5\u7a0b\u5730\u5740\uff1aExtFrameworks</p> </li> <li> <p> Android HIDL</p> <p>Android HIDL</p> <p>Android hidl demo\uff0c\u7528\u4e00\u4e2a\u5de5\u7a0b\u6559\u4f60\u5982\u4f55\u5728 aosp \u6e90\u7801\u4e0b\u6dfb\u52a0\u4e00\u4e2a hidl \u670d\u52a1\uff0c\u5e76\u4e14 app \u5982\u4f55\u8ddf hidl \u670d\u52a1\u901a\u4fe1\u7b49\u7b49\u3002</p> <p>\u5de5\u7a0b\u5730\u5740\uff1aI007Engine</p> </li> </ul> <ul> <li> <p> AndroidFeature</p> <p>\u7f16\u8bd1\u65f6\u901a\u8fc7\u811a\u672c\u751f\u6210\u5404\u79cd\u914d\u7f6e\u6587\u4ef6\u5982\uff1a</p> <ul> <li>.h</li> <li>.java</li> <li>.mk</li> <li>.bp</li> <li>.xml</li> </ul> <p>\u7b49\u7b49\u3002</p> <p>\u518d\u65b0\u589e\u4e00\u4e2a FeatureManagerService \u6dfb\u52a0\u5230 ServiceManager \u4e2d\uff0c\u5373\u53ef\u5b9e\u73b0\u5728\u7f16\u8bd1\u5668\u3001\u8fd0\u884c\u671f\u3001\u4ee5\u53ca\u901a\u8fc7\u914d\u7f6e\u5feb\u901f\u6253\u5f00\u5173\u95ed\u67d0\u4e9b\u529f\u80fd\u3002</p> <p>\u8be6\u7ec6\u8bf7\u67e5\u9605 AndroidFeature</p> <p>\u5de5\u7a0b\u5730\u5740\uff1aAndroidFeature</p> </li> <li> <p> watermark</p> <p>\u6700\u7b80\u5355\u7684SurfaceFlinger\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u624b\u673a\u5382\u5546\u7684\u6c34\u5370\u65b9\u6848\u3002</p> <p>\u5de5\u7a0b\u5730\u5740\uff1awatermark</p> </li> </ul> <ul> <li> <p> global scripts</p> <p>global scripts\u5de5\u7a0b\u662f\u6211\u5728\u5de5\u4f5c\u3001\u751f\u6d3b\u4e2d\u628a\u5e38\u7528\u5230\u7684\u547d\u4ee4\u3001\u811a\u672c\u7b49\u90fd\u96c6\u5408\u5230\u8fd9\u4e2a\u5de5\u7a0b\u4e2d\u3002\u4e3b\u8981\u7528\u7684\u80fd\u529b\u5982\uff1a</p> <ul> <li>zsh \u4e3b\u9898\u3001\u63d2\u4ef6</li> <li>tmux \u4e3b\u9898\u3001\u63d2\u4ef6</li> <li>vim \u4e3b\u9898\u3001\u914d\u7f6e</li> <li>aosp \u7f16\u8bd1\u811a\u672c\uff08\u8d85\u7ea7\u597d\u7528\uff0c\u7f16\u8bd1\u540e\u8fd8\u81ea\u52a8\u901a\u77e5\uff09</li> <li>adb push \u5feb\u6377\u547d\u4ee4\uff08\u914d\u5408\u670d\u52a1\u5668\u4e0a\u7684\u7f16\u8bd1\u7279\u522b\u597d\u7528\uff09</li> <li>adb \u547d\u4ee4</li> <li>aosp grep \u547d\u4ee4\uff08\u65e0\u9700lunch\uff09</li> <li>frida\uff08android \u76f8\u5173\uff09</li> <li>clash\uff08linux \u4e0b\u4f7f\u7528 vpn\uff09</li> <li>winscope\uff08android sf\u3001wms\u76f8\u5173\uff0c\u61c2\u7684\u90fd\u61c2\uff09</li> <li>code style</li> <li>git \u5feb\u6377\u952e</li> <li>im bot(\u4f01\u4e1a\u5fae\u4fe1\u3001\u9489\u9489\u3001\u98de\u4e66)</li> <li>\u5e38\u7528\u547d\u4ee4 alias</li> <li>...</li> </ul> <p>\u8be6\u7ec6\u8bf7\u67e5\u9605 global scripts \u5de5\u7a0b\u7b80\u4ecb</p> <p>\u5de5\u7a0b\u5730\u5740\uff1aglobal_scripts</p> </li> </ul> <ul> <li> <p> AI\u5de5\u7a0b\u843d\u5730</p> <p>\u5f88\u6709\u610f\u601d\u7684\u5de5\u7a0b\uff0cIPC\u7684\u8bbe\u8ba1\u601d\u8def\u662f\u501f\u9274 ServiceManager \u3002\u540e\u6765\u505a\u4e86 CarService \u4e4b\u540e\uff0c\u624d\u590d\u73b0\u8bbe\u8ba1\u601d\u8def\u8ddf CarService \u5982\u51fa\u4e00\u8f99\uff0c\u4f46\u6211\u4e4b\u524d\u771f\u6ca1\u770b\u8fc7 CarService \u7684\u4ee3\u7801\u3002</p> <p>\u8a00\u5f52\u6b63\u4f20\uff0c\u8fd9\u4e2a\u5de5\u7a0b\u4e3b\u8981\u662f\u4e3a\u4e86\u5b9e\u73b0AI\u5404\u79cd\u6a21\u578b\u8fd0\u884c\u5728\u624b\u673a\u4e0a\u7684\u65b9\u6848\uff1a</p> <ul> <li>snpe</li> <li>mace</li> <li>pytorch</li> <li>tflite</li> <li>...</li> </ul> <p>\u5de5\u7a0b\u5730\u5740\uff1aI007Service</p> </li> <li> <p> AI\u56fe\u50cf\u5206\u7c7b\u6a21\u578b</p> <p>\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\uff0c\u6709\u4e09\u79cd\u8bad\u7ec3\u65b9\u5f0f\uff1a</p> <ul> <li>tf2.5.0 + keras \u8bad\u7ec3</li> <li>tf1.15.0 + estimator \u8bad\u7ec3</li> <li>tf1.15.0 + keras\u7f51\u7edc\u8f6c\u6210estimator \u8bad\u7ec3</li> </ul> <p>\u5de5\u7a0b\u5730\u5740\uff1aimage_classifier</p> </li> </ul> <ul> <li> <p> \u722c\u866b</p> <p>\u901a\u8fc7\u7f51\u7edc\u722c\u866b\u83b7\u53d6 lianjia \u4e8c\u624b\u623f\u623f\u6e90\u3002\u9075\u5b88\u722c\u866b\u534f\u8bae\uff0c\u5e76\u4e14\u53ea\u4e00\u79d2\u722c\u4e00\u6b21\uff0c\u4e0d\u589e\u52a0\u522b\u4eba\u670d\u52a1\u5668\u8d1f\u62c5\u3002</p> <p>\u6c42\u751f\u6b32\u6ee1\u6ee1\uff01</p> <p>\u5de5\u7a0b\u5730\u5740\uff1ahouse</p> </li> </ul>","tags":["\u6e90\u7801","github"]},{"location":"source-code/aosp-ext/fwk-ext/","title":"aosp frameworks\u6269\u5c55\u65b9\u6848","text":"","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_1","title":"\u80cc\u666f","text":"<p>aosp\u6bcf\u5e74\u66f4\u65b0\u4e00\u4e2a\u5927\u7248\u672c\uff0c\u6709\u4e9b\u7248\u672c\u4ee3\u7801\u53d8\u5316\u975e\u5e38\u5927\u3002\u672c\u4eba\u6709\u5e78\u7ecf\u5386\u51e0\u5bb6\u624b\u673a\u516c\u53f8\uff0c\u4e00\u76f4\u594b\u6597\u5728\u4fee\u6539framework\u7684\u524d\u7ebf\u3002</p> <p>\u6709\u4e9b\u516c\u53f8\u4ee3\u7801\u89e3\u8026\u505a\u5f97\u6bd4\u8f83\u597d\uff0c\u6709\u4e9b\u516c\u53f8\u4ee3\u7801\u89e3\u8026\u505a\u5f97\u7a0d\u5fae\u5dee\u4e00\u70b9\u3002 \u5982\u679c\u4ee3\u7801\u5168\u90e8\u90fd\u52a0\u5230\u539f\u751fframework\u4ed3\uff0c\u57fa\u672c\u4e0a\u5230\u6bcf\u5e74\u7684android\u5927\u7248\u672c\u5347\u7ea7\u4f1a\u5f88\u52b3\u6c11\u4f24\u8d22\uff0c\u4e00\u8fb9\u505a\u65b0\u9879\u76ee\u4e00\u8fb9\u5347\u7ea7\u8001\u9879\u76ee\uff0c\u8f9b\u82e6\u7a0b\u5ea6\u53ef\u60f3\u800c\u77e5\u3002</p> <p>\u524d\u6bb5\u65f6\u95f4\u4e0a\u6d77\u75ab\u60c5\u5c45\u5bb6\u529e\u516c\uff0c\u4eab\u53d7\u5230\u4e86\u4e0d\u7528\u901a\u52e4\u591a\u83b7\u5f97\u51e0\u5c0f\u65f6\u7684\u65f6\u95f4\u3002\u4fbf\u7528\u4e86\u51e0\u5929\u7684\u65f6\u5019\u53bb\u4e86\u89e3\u5404\u5927\u624b\u673a\u5382\u7684framework\u89e3\u8026\u65b9\u6848\u3002</p> <p>\u7efc\u5408\u51e0\u5bb6\u7684\u4f18\u70b9\u5e76\u907f\u514d\u6284\u88ad\u7684\u5acc\u7591\uff0c\u5f97\u51fa\u4e86\u5982\u4e0b\u7684\u65b9\u6848\uff08\u56e0\u4e3a\u79cd\u79cd\u539f\u56e0\u5f53\u524d\u516c\u53f8\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6848\uff0c\u6240\u4ee5\u4e5f\u4e0d\u62c5\u5fc3\u4ee3\u7801\u6cc4\u9732\u7684\u95ee\u9898\uff09\u3002</p> <p>\u6b64\u5de5\u7a0b\u4ee3\u7801\u5df2\u7ecf\u63d0\u4ea4\u5230 ExtFrameworks</p>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_2","title":"\u7b80\u4ecb","text":"<pre><code>jos/frameworks\n\u251c\u2500\u2500 base\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 com\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 android\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 journeyOS\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 godeye\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 system\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 ext\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 hook\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 reflect\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 services\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 core\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 java\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0                 \u2514\u2500\u2500 android\n\u2502\u00a0\u00a0                     \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0                         \u2514\u2500\u2500 display\n\u2514\u2500\u2500 ext\n    \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 android\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 server\n    \u2514\u2500\u2500 services\n        \u2514\u2500\u2500 core\n            \u2514\u2500\u2500 java\n                \u2514\u2500\u2500 com\n                    \u251c\u2500\u2500 android\n                    \u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n                    \u2502\u00a0\u00a0     \u2514\u2500\u2500 display\n                    \u2514\u2500\u2500 journeyOS\n                        \u2514\u2500\u2500 server\n                            \u2514\u2500\u2500 godeye\n</code></pre> <p>\u5982\u4e0a\u4e3aframeworks\u7684\u57fa\u672c\u76ee\u5f55\u7ed3\u6784\u3002</p> <p>jos/frameworks/base\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784\u8ddfframeworks/base\u5b8c\u5168\u4e00\u81f4</p> <p>jos/frameworks/ext\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784\u8ddfframeworks/base\u57fa\u672c\u4e00\u81f4\u3002</p> <p>jos/frameworks/base\u4e3a\u63a5\u53e3\u7c7b\uff0cjos/frameworks/ext\u4e3a\u5b9e\u73b0\u7c7b\u3002</p> <ul> <li> <p>framework.jar     jos/frameworks/base/core\u4e0b\u6587\u4ef6\u7f16\u8bd1\u5230\u539f\u751fframework.jar\uff0c\u5e76\u4e14\u5168\u90e8\u4e3ainterface\u3002</p> </li> <li> <p>services.jar     jos/frameworks/base/services/core\u4e0b\u6587\u4ef6\u7f16\u8bd1\u5230\u539f\u751fservices.jar\uff0c\u5e76\u4e14\u5168\u90e8\u4e3ainterface\u3002</p> </li> <li> <p>jos-framework.jar     jos/frameworks/ext/core\u4e0b\u6587\u4ef6\u7f16\u8bd1\u5230jos-framework.jar\uff0c\u5e76\u4e14\u5168\u90e8\u4e3aimpl\u3002</p> </li> <li> <p>jos-services.jar     jos/frameworks/ext/services/core\u4e0b\u6587\u4ef6\u7f16\u8bd1\u5230jos-services.jar\uff0c\u5e76\u4e14\u5168\u90e8\u4e3aimpl\u3002</p> </li> </ul>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_3","title":"\u5b9a\u4e49","text":"<p>\u6587\u4ef6jos/frameworks/base/core/java/com/android/server/HookSystemConfig.java\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>package com.android.server;\n\nimport java.io.File;\n\nimport system.ext.hook.Inject;\n\npublic interface HookSystemConfig {\n\n    static HookSystemConfig get() {\n        return (HookSystemConfig) Inject.getInstance().getInject(HookSystemConfig.class);\n    }\n\n    void init(SystemConfig systemConfig);\n\n    default void readPermissionsFromXml(File file) {\n    }\n\n    default boolean isExtFile(File file) {\n        return false;\n    }\n\n    default boolean supportBackgroundService(String packageName) {\n        return false;\n    }\n}\n</code></pre> <p>\u6839\u636e\u524d\u9762\u6211\u4eec\u804a\u5230\u7684\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6587\u4ef6\u5c31\u662f\u7f16\u8bd1\u5230framework.jar\u4e2d\u3002\u539f\u751f\u4ee3\u7801\u901a\u8fc7\u5982\u4e0b\u8c03\u7528\uff1a</p> <pre><code>HookSystemConfig.get().supportBackgroundService(packageName);\n</code></pre> <p>\u5c31\u53ef\u4ee5\u8c03\u5230\u5176\u5b9e\u73b0\u7c7b\uff0c\u6211\u4eec\u8fd9\u8fb9\u6682\u4e0d\u8bf4\u660e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8c03\u8fc7\u53bb\uff0c\u5148\u6765\u770b\u770b\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\u3002</p>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_4","title":"\u5b9e\u73b0","text":"<p>\u6587\u4ef6jos/frameworks/ext/core/java/com/android/server/HookSystemConfigImpl.java</p> <pre><code>package com.android.server;\n\nimport android.text.TextUtils;\nimport android.util.ArraySet;\nimport android.util.Xml;\n\nimport com.android.internal.util.XmlUtils;\n\nimport org.xmlpull.v1.XmlPullParser;\nimport org.xmlpull.v1.XmlPullParserException;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport system.ext.utils.JosLog;\n\npublic class HookSystemConfigImpl implements HookSystemConfig {\n    private static final String TAG = HookSystemConfigImpl.class.getSimpleName();\n    private static final boolean DEBUG = true;\n    static HookSystemConfigImpl sInstance;\n\n    private SystemConfig mSystemConfig;\n\n    private final ArraySet&lt;String&gt; mBackgroundServices = new ArraySet&lt;&gt;();\n\n    public static HookSystemConfigImpl getInstance() {\n        synchronized (HookSystemConfigImpl.class) {\n            if (sInstance == null) {\n                sInstance = new HookSystemConfigImpl();\n            }\n            return sInstance;\n        }\n    }\n\n    public HookSystemConfigImpl() {\n    }\n\n    @Override\n    public void init(SystemConfig systemConfig) {\n        mSystemConfig = systemConfig;\n    }\n\n    @Override\n    public void readPermissionsFromXml(File file) {\n        FileInputStream stream;\n        synchronized (file) {\n            try {\n                stream = new FileInputStream(file);\n            } catch (FileNotFoundException e) {\n                JosLog.e(TAG, \"jos-feature.xml not found; Skipping.\");\n                return;\n            }\n            boolean success = false;\n            try {\n                XmlPullParser parser = Xml.newPullParser();\n                parser.setInput(stream, null);\n                int type;\n                success = true;\n                while ((type = parser.next()) != XmlPullParser.START_TAG\n                        &amp;&amp; type != XmlPullParser.END_DOCUMENT) {\n                    ;\n                }\n                if (type != XmlPullParser.START_TAG) {\n                    throw new IllegalStateException(\"no start tag found\");\n                }\n\n                int outerDepth = parser.getDepth();\n                while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n                        &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) {\n                    if (type == XmlPullParser.END_TAG\n                            || type == XmlPullParser.TEXT) {\n                        continue;\n                    }\n\n                    String name = parser.getName();\n                    switch (name) {\n                        case \"background-services\":\n                            String packageName = parser.getAttributeValue(null, \"package\");\n                            mBackgroundServices.add(packageName);\n                            break;\n                        default:\n                            JosLog.w(TAG, \"Tag \" + name + \" is unknown in \"\n                                    + file + \" at \" + parser.getPositionDescription());\n                            XmlUtils.skipCurrentTag(parser);\n                            break;\n                    }\n                }\n            } catch (IllegalStateException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } catch (NullPointerException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } catch (NumberFormatException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } catch (XmlPullParserException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } catch (IOException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } catch (IndexOutOfBoundsException e) {\n                JosLog.w(TAG, \"Failed parsing \" + e.toString());\n            } finally {\n                try {\n                    stream.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n\n    @Override\n    public boolean isExtFile(File file) {\n        boolean extFile = false;\n        if (file != null) {\n            extFile = file.getPath().endsWith(\"etc/permissions/jos-feature.xml\");\n        }\n\n        return extFile;\n    }\n\n    @Override\n    public boolean supportBackgroundService(String packageName) {\n        if (DEBUG) {\n            JosLog.d(TAG, \"query packageName = [\" + packageName + \"]\");\n        }\n        boolean support = false;\n        if (TextUtils.isEmpty(packageName)) {\n            JosLog.w(TAG, \"query packageName was null...\");\n            return support;\n        }\n        for (String backgroundService : mBackgroundServices) {\n            if (DEBUG) {\n                JosLog.d(TAG, \"background service = [\" + backgroundService + \"]\");\n            }\n\n            if (packageName.equals(backgroundService)) {\n                support = true;\n                break;\n            }\n        }\n\n        return support;\n    }\n\n}\n</code></pre> <p>\u6839\u636e\u524d\u9762\u6211\u4eec\u804a\u5230\u7684\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6587\u4ef6\u5c31\u662f\u7f16\u8bd1\u5230jos-framework.jar\u4e2d\u3002\u4ece\u8fd9\u4e2a\u4f9d\u7136\u770b\u4e0d\u51fa\u6765\u4ee3\u7801\u6709\u4f55\u7279\u522b\u4e4b\u5904\uff0c\u4e3a\u4f55\u8c03\u7528HookSystemConfig\u5c31\u53ef\u4ee5\u8c03\u5230HookSystemConfigImpl\u7684\u63a5\u53e3\u4e86\u5462\uff1f</p>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_5","title":"\u539f\u751f\u8c03\u7528","text":"<p>\u4e3a\u4e86\u65b9\u4fbf\u4ecb\u7ecd\u6574\u4f53\u7684\u65b9\u6848\uff0c\u6211\u8fd9\u91cc\u8fd8\u662f\u591a\u5570\u55e6\u4ecb\u7ecd\u539f\u751f\u4ee3\u7801\u5982\u4f55\u8c03\u7528\uff1a</p> <pre><code>HookSystemConfig.get().supportBackgroundService(packageName);\n</code></pre> <p>\u5c31\u53ef\u4ee5\u8c03\u5230\u5176\u5b9e\u73b0\u7c7b\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u6765\u5206\u6790\u5176\u539f\u7406\u3002</p>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_6","title":"\u539f\u7406","text":"<p>\u4ece\u524d\u9762\u7684\u8c03\u7528\u65b9\u5f0f\u4ee5\u53ca\u63a5\u53e3\u7c7b\u91cc\u7684\u4ee3\u7801\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5176\u5b9e\u505a\u6838\u5fc3\u7684\u4ee3\u7801\u662f\u5728get()\u51fd\u6570\u91cc\u3002</p> <pre><code>public interface HookSystemConfig {\n\n    static HookSystemConfig get() {\n        return (HookSystemConfig) Inject.getInstance().getInject(HookSystemConfig.class);\n    }\n\n}\n</code></pre> <p>\u8c03\u7528\u4e86Inject\u7c7b\u7684getInject()\u65b9\u6cd5\u3002\u8fd9\u91cc\u628aInject\u7c7b\u7684\u4ee3\u7801\u5217\u51fa\u6765\uff0c\u5f88\u7b80\u5355\uff0c\u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u53cd\u5c04\u7684\u65b9\u5f0f\u628ainterface\u548cImpl\u5173\u8054\u8d77\u6765\uff0c\u5e76\u4fdd\u5b58\u5230map\u91cc\u63d0\u4f9b\u4e0b\u6b21\u4f7f\u7528\u3002</p> <p>\u800c\u4e14Inject\u662f\u5355\u4f8b\uff0c\u5373\u4f7fimpl\u4e0d\u662f\u5355\u4f8b\uff0c\u901a\u8fc7map\u62ff\u5230\u7684\u8fd8\u662f\u539f\u6765\u7684impl\u5b9e\u4f8b\u3002\u5f53\u7136\u7b14\u8005\u5728\u8fd9\u4e4b\u524d\u4e5f\u591a\u9884\u7559\u4e86\u63a5\u53e3\uff0c\u5982\u679cimpl\u5199\u6210\u5355\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u5728\u8c03\u7528getInject\u9009\u62e9\u4f7f\u7528\u5355\u4f8b\u8fd8\u662f\u975e\u5355\u4f8b\u3002</p> <pre><code>public class Inject {\n    private static final String TAG = Inject.class.getSimpleName();\n    private static final boolean DEBUG = true;\n    private static final ArrayMap&lt;Class&lt;?&gt;, Object&gt; INJECT_MAPS = new ArrayMap&lt;&gt;();\n    private static Inject sInstance;\n\n    public Inject() {\n    }\n\n    public static Inject getInstance() {\n        synchronized (Inject.class) {\n            if (sInstance == null) {\n                sInstance = new Inject();\n            }\n            return sInstance;\n        }\n    }\n\n    private static Object create(String clsName, ClassLoader classLoader, boolean isSingleton) {\n        try {\n            Class&lt;?&gt; clazz;\n            if (classLoader != null) {\n                clazz = Class.forName(clsName, false, classLoader);\n            } else {\n                clazz = Class.forName(clsName);\n            }\n            if (clazz != null) {\n                if (isSingleton) {\n                    return MethodUtils.invokeStaticMethod(clazz, \"getInstance\");\n                } else {\n                    return MethodUtils.invokeConstructor(clazz);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public Object getInject(Class tClass) {\n        return getInject(tClass, null, false);\n    }\n\n    public Object getInject(Class tClass, String dClass) {\n        return getInject(tClass, dClass, false);\n    }\n\n    public Object getInject(Class tClass, String dClass, boolean isSingleton) {\n        if (DEBUG) {\n            JosLog.d(TAG, \"interface class = [\" + tClass + \"], is singleton = [\" + isSingleton + \"]\");\n        }\n\n        if (!INJECT_MAPS.containsKey(tClass)) {\n            String clsName = dClass;\n            if (TextUtils.isEmpty(clsName)) {\n                clsName = tClass.getCanonicalName() + \"Impl\";\n            }\n            if (DEBUG) {\n                JosLog.d(TAG, \"impl class = [\" + tClass + \"]\");\n            }\n\n            Object inject = create(clsName, tClass.getClassLoader(), isSingleton);\n            if (DEBUG) {\n                JosLog.d(TAG, \"constructor impl class = [\" + tClass + \"]\");\n            }\n\n            if (inject != null &amp;&amp; tClass.isAssignableFrom(inject.getClass())) {\n                INJECT_MAPS.put(tClass, inject);\n            } else {\n                INJECT_MAPS.put(tClass, null);\n            }\n        }\n        return INJECT_MAPS.get(tClass);\n    }\n}\n</code></pre>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#_7","title":"\u6ce8\u610f","text":"<p>\u56e0\u4e3a\u662f\u53cd\u5c04\u7684\u5173\u7cfb\uff0c\u800c\u4e14\u5728Inject.getInstance().getInject()\u51fd\u6570\u91cc\u5e76\u6ca1\u6709\u4f20\u4efb\u4f55\u8ddf\u9700\u8981\u53cd\u5c04\u7684impl\u7c7b\u76f8\u5173\u7684\u4ee3\u7801\u3002\u800c\u4e14\u5728\u4ee3\u7801\u91cc\u5199\u6b7b\u4e86\uff1a</p> <pre><code>String clsName = tClass.getCanonicalName() + \"Impl\";\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\u8fd9\u91cc\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u91cd\u8981\u89c4\u5219\uff1a</p> <ul> <li>Impl\u7c7b\u8ddfinterface\u8981\u540c\u5305\u540d</li> <li>Impl\u7c7b\u7684\u547d\u540d\u89c4\u8303\u662f\u5728interface\u7c7b\u540e\u52a0Impl\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679cinterface\u7c7b\u53ebXXX\uff0c\u90a3\u4e48Impl\u662fXXXImpl\u3002</li> <li>\u5982\u679cImpl\u7c7b\u5199\u6210\u5355\u4f8b\uff0c\u5355\u4f8b\u7684\u65b9\u6cd5\u5fc5\u987b\u5199\u6210getInstance()</li> </ul> <p>\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u51fd\u6570public Object getInject(Class tClass, String dClass, boolean isSingleton)\u53ef\u77e5\uff0c\u5982\u679c\u4f20\u5b9e\u73b0\u7c7b\u7684class\u8fdb\u6765\uff08\u7b49\u540c\u4e8e\u5b9e\u73b0\u7c7b\u7684getCanonicalName\uff09\u5c31\u53ef\u5ffd\u75651\u30012\u70b9\u7684\u9650\u5236\u3002 \u5982\uff1a</p> <p><pre><code>public interface HookSystemConfig {\n\n    static HookSystemConfig get() {\n        return (HookSystemConfig) Inject.getInstance().getInject(HookSystemConfig.class, \"com.journeyOS.server.ExtSystemConfig\");\n    }\n\n}\n</code></pre> \u7b14\u8005\u4e3a\u4e86\u7edf\u4e00\u4ee5\u53ca\u89c4\u8303\u6027\uff0c\u8fd8\u662f\u5efa\u8bae\u6309\u7167\u4ee5\u4e0a\u89c4\u5219\u3002</p> <p>\u4e3e\u4f8b\uff1a</p> <pre><code>package com.android.server;\n\npublic interface HookSystemConfig {\n}\n</code></pre> <pre><code>package com.android.server;\n\npublic class HookSystemConfigImpl implements HookSystemConfig {\n}\n</code></pre>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#rom","title":"\u7f16\u8bd1\u5230rom","text":"<pre><code>## \u5728\u5bf9\u5e94target\u91cc\u7684device.mk\n## \u5982 build/target/product/sdk_phone_x86_64.mk\n$(call inherit-product-if-exists, jos/frameworks/frameworks_ext.mk)\n</code></pre> <p>android 12\u4e4b\u540e SKIP_BOOT_JARS_CHECK = true \u4e0d\u751f\u6548\uff0c\u5728\u6587\u4ef6\u7684\u6700\u540e build/soong/scripts/check_boot_jars/package_allowed_list.txt\u52a0\u5982\u4e0b\uff1a</p> <pre><code>###################################################\n## Packages in the journeyOS namespace across all bootclasspath jars.\nsystem\\.ext.*\nsystem\\.ext\\..*\njourneyOS\\.os.*\njourneyOS\\.os\\..*\ncom\\.journeyOS.*\ncom\\.journeyOS\\..*\n</code></pre>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/aosp-ext/fwk-ext/#fwk-bp","title":"\u539f\u751ffwk bp","text":"<p>\u5728frameworks/base/Android.bp\u91ccfilegroup\u4e3aframework-non-updatable-sources\u5f15\u7528</p> <pre><code>//ext\n\":jos_framework_sources_aidl\",\n\":jos_framework_sources_java\",\n</code></pre> <p>\u5728frameworks/base/services/core/Android.bp\u91ccfilegroup\u4e3aservices.core.unboosted\u5f15\u7528</p> <pre><code>//jos\n\":jos_service_sources_aidl\",\n\":jos_service_sources_java\",\n</code></pre>","tags":["Android","\u6846\u67b6","\u89e3\u8026"]},{"location":"source-code/android-feature/intro/","title":"Android Device Feature","text":"","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_1","title":"\u80cc\u666f","text":"<p>\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u4ee3\u7801\u529f\u80fd\u6a21\u5757\u7684\u5b9a\u5236\uff0c\u65b0\u589efeature\u6a21\u5757\uff0c\u5176\u53ef\u4ee5\u65b9\u4fbf\u6a21\u5757\u5316\u529f\u80fd\u7684\u53bb\u4e0e\u7559\uff0c\u6d89\u53camakefile\uff0cc/c++\uff0cjava\u7b49\u4e09\u4e2a\u90e8\u5206\u3002\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u503c\uff0c\u5728\u7f16\u8bd1\u65f6\u4f1a\u81ea\u52a8\u751f\u6210\u4e09\u4e2a\u4ee3\u7801\u7a7a\u95f4\u7684\u63a7\u5236\u53d8\u91cf\uff0c\u4ee5\u6b64\u8fbe\u5230\u5b9a\u4e49\u529f\u80fd\u6a21\u5757\u7684\u76ee\u7684\u3002 feature\u5206\u4e3a\u4e24\u4e2a\u5c42\u7ea7\uff1a</p> <ul> <li>common</li> <li>\u5177\u4f53\u4ea7\u54c1\u540d\uff0c\u6bd4\u5982lemonadep</li> </ul> <p>\u4e00\u4e2afeature\u5f00\u5173\u53ef\u4ee5\u540c\u65f6\u5728common\u548c\u5177\u4f53\u4ea7\u54c1\u540d\u4e2d\u5b9a\u4e49\uff0c\u4ed6\u4eec\u7684\u5173\u7cfb\u662f\uff1a</p> <ul> <li>\u5f53\u53ea\u6709common\u4e2d\u6709\u5b9a\u4e49\u65f6\uff0c\u4ee5common\u4e3a\u51c6</li> <li>\u5f53\u53ea\u6709\u5177\u4f53\u4ea7\u54c1\u4e2d\u6709\u5b9a\u4e49\u65f6\uff0c\u4ee5\u4ea7\u54c1\u540d\u4e3a\u51c6</li> <li>\u5f53\u540c\u65f6\u5b9a\u4e49\u65f6\uff0c\u4ea7\u54c1\u540d\u4e2d\u7684\u5b9a\u4e49\u4f1aoverlay common\u4e2d\u7684\u5b9a\u4e49</li> </ul>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_2","title":"\u7ed3\u6784\u8bf4\u660e","text":"<p><pre><code>feature\n\u251c\u2500\u2500 Android.bp\n\u251c\u2500\u2500 build_out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 JosFeature.h\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 i-rtfsc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 JosFeature.java\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 makefile\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 JosFeature.mk\n\u251c\u2500\u2500 jos_feature.mk\n\u251c\u2500\u2500 common_feature.mk\n\u251c\u2500\u2500 device\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 features.cof\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lemonadep\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 features.cof\n\u2514\u2500\u2500 tools\n    \u251c\u2500\u2500 config_parse.py\n    \u251c\u2500\u2500 feature.py\n    \u251c\u2500\u2500 generator_header.py\n    \u251c\u2500\u2500 generator_java.py\n    \u251c\u2500\u2500 generator_makefile.py\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 utils.py\n</code></pre> \u5176\u4e2d\u76ee\u5f55\u5927\u81f4\u8bf4\u660e\u5982\u4e0b\uff1a</p> <ul> <li>tools\uff1a\u7f16\u8bd1\u5de5\u5177\uff0c\u7528\u4e8e\u751f\u6210\u5bf9\u5e94\u76ee\u6807\u4ee3\u7801\u6587\u4ef6</li> <li>device/common\uff1a\u901a\u7528\u63a7\u5236\u5b9a\u4e49\u6587\u4ef6</li> <li>device/lemonadep\uff1a\u4ea7\u54c1\u63a7\u5236\u5b9a\u4e49\u6587\u4ef6</li> <li>jos_feature.mk\uff1afeature\u5f15\u5165\u7f16\u8bd1\u7cfb\u7edfmakefile</li> <li>common_feature.mk\uff1a\u5b9a\u4e49\u4e00\u4e9baosp\u7684\u5b8f\uff0c\u5982 TARGET_EXCLUDES_AUDIOFX := true , \u5219\u8868\u793a\u4e0d\u7f16\u8bd1audiofx\u5230rom\u4e2d\u3002</li> </ul>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_3","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>feature\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>feature\u5b9a\u4e49</li> <li>\u4ee3\u7801\u4f7f\u7528</li> </ul>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#feature","title":"feature\u5b9a\u4e49","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0cfeature\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a <pre><code>device/common/features.cof\n\n## jos feature default\nJOS_FEATURE_DEFAULT = 1\n## jos ai service\nJOS_FEATURE_AI_SERVICE = false\n#jos device\nJOS_FEATURE_DEVICE = \"lemonadep\"\n</code></pre> \u8fd9\u7c7b\u4f3c\u4e8e.ini\u6587\u4ef6\uff0c\u662f\u952e\u503c\u5bf9\u7684\u5b9a\u4e49\u3002\u4e0b\u9762\u8bf4\u660e\u57fa\u672c\u8bed\u6cd5\u3002</p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_4","title":"\u6ce8\u91ca","text":"<p>feature\u5b9a\u4e49\u53ea\u652f\u6301\u5355\u884c\u6ce8\u91ca\uff0c\u6ce8\u91ca\u662f\u4ee5\"#\"\u5f00\u5934\u3002 <pre><code>## jos feature default\nJOS_FEATURE_DEFAULT = 1\n</code></pre></p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_5","title":"\u952e\u503c\u5bf9","text":"<p>\u952e\u503c\u5bf9\u5b9a\u4e49\u683c\u5f0f\u4e3a\uff1aKEY = VALUE\u3002\u5982\u4e0b\uff1a <pre><code>JOS_FEATURE_AI_SERVICE = false\n</code></pre> \u5176\u4e2dkey\u7684\u547d\u540d\u89c4\u8303\u4e3a\uff1aA-Z\uff0ca-z\uff0c0-9\uff0c_\uff0c\u8fd9\u4e9b\u5b57\u7b26\u7684\u7ec4\u6210\uff0c\u5f00\u5934\u9996\u5b57\u6bcd\u4e0d\u80fd\u662f\u6570\u5b57\u3002 value\u652f\u6301\u7684\u7c7b\u578b</p> \u7c7b\u578b \u89e3\u6790\u5668\u5b9a\u4e49 \u8bf4\u660e \u4e3e\u4f8b int TYPE_INT \u6574\u6570\u7c7b\u578b JOS_FEATURE_DEFAULT = 1 boolean TYPE_BOOLEAN \u5e03\u5c14\u7c7b\u578b JOS_FEATURE_AI_SERVICE = false String TYPE_STRING \u5b57\u7b26\u7c7b\u578b JOS_FEATURE_DEVICE = \"lemonadep\"","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_6","title":"\u4ee3\u7801\u4f7f\u7528","text":"<p>feature\u53ef\u4ee5\u5728\u4e09\u4e2a\u4ee3\u7801\u7a7a\u95f4\u4f7f\u7528\uff1a</p> <ul> <li>java</li> <li>c/cpp</li> <li>makefile</li> </ul> <p>\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u4e0a\u8ff0\u7684\u4ee3\u7801\u4f1a\u751f\u6210\u5230\uff1afeature/build_out/ \u76ee\u5f55\u4e0b\u3002</p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#java","title":"java","text":"<p>java\u4e2d\u4f7f\u7528feature\u65f6\uff0c\u5148import com.i-rtfsc.JosFeature\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u5e94\u7684\u53d8\u91cf\u4e86\u3002\u5982\u4e0b\uff1a <pre><code>import com.i-rtfsc.JosFeature\n\nif (JosFeature.JOS_FEATURE_AI_SERVICE) {\n    //TODO\n}\n</code></pre></p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#cc","title":"c/c++","text":"<p>C\u4e2d\u5b9a\u4e49\u7684\u90fd\u662f\u5b8f\u53d8\u91cf\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3e\u4f8b\u5982\u4e0b\uff1a <pre><code>#include &lt;product/JosFeature.h&gt;\n\n#if JOS_FEATURE_AI_SERVICE\n\n//TODO\n\n#endif\n</code></pre></p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#makefile","title":"Makefile","text":"<p>mk\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u6bd4\u5982\uff1a <pre><code>ifeq ($(JOS_FEATURE_AI_SERVICE),true)\n\n## TODO\n\nendif\n</code></pre></p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_7","title":"\u4ee3\u7801\u539f\u7406","text":"<p>features.cof\u662f\u7531python\u811a\u672c\u6765\u89e3\u91ca\u7684\uff0c\u89e3\u91ca\u7a0b\u5e8f\u7684\u8def\u5f84\u4e3a\uff1afeature/tools/\u3002\u6574\u4e2afeature\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u5904\u7406\u6d41\u7a0b\u5206\u5982\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u5c06jos_feature.mk\u6587\u4ef6\u6dfb\u52a0\u5230android\u7684\u7f16\u8bd1\u7cfb\u7edf\u4e2d\uff08build/core/product_config.mk\uff09\u3002</li> <li>\u5f53lunch\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u8fd0\u884cfeature.py\u89e3\u6790feature.def\u6587\u4ef6</li> <li>config_parse.py\u5148\u4f1a\u68c0\u67e5feature.def\u6587\u4ef6\u7684\u8bed\u6cd5\u9519\u8bef</li> <li>\u9519\u8bef\u68c0\u67e5\u901a\u8fc7\u540e\uff0cconfig_parse.py\u7ee7\u7eed\u5c06feature.def\u6587\u4ef6\u8f6c\u6362\u6210\u5b57\u5178</li> <li>\u5c06\u751f\u6210\u7684\u5b57\u5178\u5206\u522b\u63d0\u4ea4\u7ed9\u4e0d\u540ccode\u7684\u751f\u6210\u8005\u751f\u6210\u5bf9\u5e94\u7684\u4ee3\u7801\u3002</li> </ul>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_8","title":"\u603b\u7ed3","text":"<p>\u7efc\u4e0a\uff0cfeature\u529f\u80fd\u662f\u4e00\u4e2a\u5728\u7f16\u8bd1\u671f\u7528python\u811a\u672c\u89e3\u6790features.cof\u6587\u4ef6\uff0c\u751f\u6210\u4e09\u4e2a\u4ee3\u7801\u7a7a\u95f4\u7684\u63a7\u5236\u53d8\u91cf\u4ee3\u7801\u6587\u4ef6\uff0c\u6700\u7ec8\u88ab\u9759\u6001\u6dfb\u52a0\u5230\u76ee\u6807\u7a0b\u5e8f\u4e2d\u7684\u8fc7\u7a0b\u3002</p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_9","title":"\u9644\u52a0","text":"<p>\u751f\u6210\u7684com.i-rtfsc.JosFeature\u8fd8\u53ef\u4ee5\u7f16\u8bd1\u5230framework.jar\u4e2d</p>","tags":["Android","Feature"]},{"location":"source-code/android-feature/intro/#_10","title":"\u4ee3\u7801","text":"<p>feature</p>","tags":["Android","Feature"]},{"location":"source-code/as-aosp/intro/","title":"as-aosp \u5de5\u7a0b\u7b80\u4ecb","text":"<p>\u5de5\u7a0b\u5730\u5740\uff1aas-aosp </p> <p>\u6b64as\u5de5\u7a0b\u53ef\u4ee5\u5feb\u901f\u7684\u5bfc\u5165aosp framework(\u5305\u542bjava/native)\u3001 aosp \u7cfb\u7edfapp\u3001 \u56fd\u5185\u67d0\u4e9b\u5382\u5546\u6269\u5c55\u7684fwk\u4ee3\u7801\uff1b  </p> <p>\u6bd4 idegen(android.ipr\u548candroid.iml) \u65b9\u6848\u8fd8\u5feb\uff0c\u5e76\u4e14\u201c\u8054\u60f3\u201d\u4e5f\u5f88\u65b9\u4fbf\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#ide","title":"\u652f\u6301IDE","text":"<ul> <li>Android Studio  </li> <li>IntelliJ IDEA  </li> <li>CLion  </li> </ul> <p>IDEA \u53ea\u652f\u6301 java \u6a21\u5757\u3002  </p> <p>CLion \u53ea\u652f\u6301 native \u6a21\u5757\uff0c\u76f4\u63a5\u6253\u5f00 aosp-native \u540e\uff0c\u9700\u8981\u6539 aosp-native/CMakeLists.txt \u91cc set(ANDROID_ROOT ${BUILD_NATIVE_ROOT})  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#asfp","title":"\u5bf9\u6bd4 asfp \u4f18\u7f3a\u70b9","text":"as-asop asfp Author Solo Google \u53d1\u5e03\u65f6\u95f4 2022\u4e0b\u534a\u5e74 2023\u4e0b\u534a\u5e74 \u652f\u6301\u5e73\u53f0 linux\u3001macos\u3001win linux Android Studio \u7248\u672c \u4efb\u610f\u7248\u672c \u7279\u6b8a\u7248\u672c\uff0c\u5373asfp\u7248\u672c IDEA \u7248\u672c \u4efb\u610f\u7248\u672c\uff08\u4ec5Java\u6a21\u5757\uff09 \u4e0d\u652f\u6301IDEA CLion \u7248\u672c \u4efb\u610f\u7248\u672c\uff08\u4ec5native\u6a21\u5757\uff09 \u4e0d\u652f\u6301CLion \u4ee5\u4e0b\u4ee3\u7801\u652f\u6301\u8df3\u8f6c\u3001\u63d0\u793a java\u3001kotlin\u3001c\u3001c++ java\u3001kotlin\u3001c\u3001c++ \u9700\u8981\u7f16\u8bd1 \u5426 \u662f \u9700\u8981\u5b8c\u6574\u4ee3\u7801 \u5426 \u662f \u9996\u6b21\u52a0\u8f7d\u8017\u65f6 \u6839\u76ee\u5f55\u53ea\u6709\u90e8\u5206\u6a21\u5757\u4ee3\u7801\uff0c\u52a0\u8f7d\u51e0\u5206\u949f\uff1b\u6839\u76ee\u5f55\u5305\u542b\u6240\u6709aosp\u4ee3\u7801\uff0c\u52a0\u8f7d1.5h\u5de6\u53f3 \u4ee3\u7801\u5df2\u5168\u7f16\u8bd1\uff0c\u52a0\u8f7d1h\u5de6\u53f3\uff1b\u4ee3\u7801\u672a\u5168\u7f16\u8bd1\uff0c\u7f16\u8bd1\u65f6\u95f4+\u52a0\u8f7d1h\u5de6\u53f3 UI \u65e0UI\uff0c\u901a\u8fc7\u6539\u811a\u672c\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u81ea\u5b9a\u4e49\u5ea6\u9ad8 \u6709UI\uff0c\u53ef\u901a\u8fc7\u754c\u9762\u6dfb\u52a0\u6a21\u5757\uff08\u4f9d\u8d56\u6bcf\u4e2a\u6a21\u5757\u7684android.bp\uff0c\u65e0\u6cd5\u81ea\u5b9a\u4e49\uff09 <p>\u4e0b\u9762\u4ee5cpp\u4ee3\u7801\u4e3a\u4f8b\uff0c\u6f14\u793a\u4ee3\u7801\u7684\u8df3\u8f6c\u4ee5\u53ca\u63d0\u793a\u3001\u8865\u5168\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_1","title":"\u8df3\u8f6c","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_2","title":"\u63d0\u793a\u3001\u8865\u5168","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_3","title":"\u4f7f\u7528\u6559\u7a0b","text":"<p>\u6559\u7a0b001-\u9996\u6b21\u914d\u7f6e</p> <p>\u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def</p> <p>\u6559\u7a0b003-\u7b80\u5355\u6269\u5c55 </p> <p>\u6559\u7a0b004-\u63d2\u4ef6\u6269\u5c55</p> <p>\u6559\u7a0b005-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801</p> <p>\u66f4\u65b0\u5230 6.x \u7248\u672c\u9ed8\u8ba4\u5c31\u53ef\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801</p> <p>\u6559\u7a0b006-aidl\u8df3\u8f6c</p> <p>\u6559\u7a0b007-c++\u8df3\u8f6c</p> <p>\u6559\u7a0b008-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801\u8fdb\u9636\u7248</p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_4","title":"\u7f16\u8bd1","text":"<p>\u6b64\u5de5\u7a0b\u65e0\u6cd5\u7f16\u8bd1framework.jar\u6216\u8005services.jar\uff0c\u8bf7\u4f7f\u7528aosp\u63a8\u8350\u7684\u7f16\u8bd1\u65b9\u5f0f\u3002  </p> <p>global_scripts \u5de5\u7a0b\u91cc\u7684 gs_android_build.sh \u811a\u672c\u5b9e\u73b0\u4e86\u5f88\u591a\u6a21\u5757\u7f16\u8bd1\u7684\u5feb\u6377\u952e\u3002 \u53ef\u4ee5\u5355\u72ec\u4e0b\u8f7d\u8fd9\u4e2a\u811a\u672c\u5e76\u653e\u5230\u73af\u5883\u53d8\u91cf\u91cc\uff0c\u6216\u8005\u662f\u7528\u6574\u4e2a global_scripts \u5b9e\u73b0\u63d2\u4ef6\u5316\u7684\u65b9\u6848\u3010\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u8be5\u5de5\u7a0b\u7684README\u3011\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_5","title":"\u7248\u672c","text":"<p>as-aosp\u7ecf\u5386\u4e86\u4e24\u5e74\u591a\u7684\u66f4\u65b0\uff0c\u6bcf\u6b21\u66f4\u65b0\u90fd\u662f\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u3002 5.x.x \u6253\u7b97\u518d\u6b21\u5bf9 c/c++ \u6a21\u5757\u8fdb\u884c\u5927\u6539\uff0c\u81ea\u5df1\u672c\u5730\u9a8c\u8bc1\u5927\u6539\u540e vs \u4e5f\u80fd\u4e1d\u6ed1\u4f7f\u7528\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#6xx","title":"6.x.x","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_6","title":"\u4f18\u5316\u52a0\u8f7d\u901f\u5ea6","text":"<p>\u4e0d\u6253\u5f00c++\u6a21\u5757\u52a0\u8f7d\u65f6\u95f4\u4ece10\u5206\u949f\u53d8\u62102-3\u5206\u949f\uff08\u540c\u4e00\u53f0\u7535\u8111\uff0c\u540c\u4e00\u4efd\u5de5\u7a0b\u6d4b\u8bd5\uff09\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#java","title":"Java\u6a21\u5757","text":"<p>Android\u6a21\u5757\u6539\u6210Java\u6a21\u5757\uff0c\u52a0\u8f7d\u5b8c\u6210\u540e\u76f4\u63a5\u8df3\u8f6c\u6e90\u7801\uff0c\u65e0\u9700\u518d\u6267\u884c\u5220\u9664 sdk \u7684\u4efb\u52a1\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_7","title":"\u65b0\u589e\u7248\u672c\u53f7","text":"<p>\u5de5\u7a0b\u4e2d\u65b0\u589e\u4e00\u4e2a VERSION \u6587\u4ef6\u914d\u7f6e\u7248\u672c\u53f7\uff0c\u7528\u4f5c\u8c03\u8bd5\u4ee5\u53ca\u5347\u7ea7\u63d0\u793a\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#5xx","title":"5.x.x","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#scrjars","title":"scrjars","text":"<ul> <li> <p> aidl   \u652f\u6301 aidl \u8df3\u8f6c  </p> </li> <li> <p> R.java   \u652f\u6301 R \u8df3\u8f6c  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#android-sdk","title":"android sdk","text":"<p>\u9002\u914d\u65b0\u7248 android studio\uff0c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u6062\u590d android.jar \uff0c\u4e1d\u6ed1\u8c03\u6574\u6e90\u7801\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#platformbase","title":"PlatformBase","text":"<p>\u4e0d\u7279\u6307aosp\u4e2d\u7684\u54ea\u4e2a\u6a21\u5757\uff0c\u800c\u662fandroid \u5e73\u53f0\u4e00\u4e9b\u57fa\u7840\u7684\u4ee3\u7801\u90fd\u653e\u5728\u8fd9\u4e2a\u6a21\u5757\u91cc\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#car","title":"car","text":"<ul> <li> car   \u76f8\u5173\u6a21\u5757\u90fd\u653e\u5230 car \u6587\u4ef6\u5939\u4e0b  </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#aosp-cmake","title":"aosp-cmake","text":"<ul> <li> CMakeLists.txt   \u6839\u636e Android.bp/Android.mk \u751f\u6210 CMakeLists.txt  </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#ext","title":"ext","text":"<p>git \u5ffd\u7565 ext \uff0c\u65b9\u4fbf\u540c\u6b65\u4ee3\u7801\u7684\u540c\u65f6\u4e5f\u65b9\u4fbf\u4e2a\u4eba\u5b9a\u5236\u5316  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_8","title":"\u6587\u4ef6\u5939\u7ed3\u6784\u8c03\u6574","text":"<ul> <li> <p> aosp-modules   system server\u3001framework-res\u3001aosp \u5176\u4ed6\u6a21\u5757  </p> </li> <li> <p> aosp-car   aosp car \u6a21\u5757  </p> </li> <li> <p> aosp-cts   aosp cts \u6a21\u5757  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#400","title":"4.0.0","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#car_1","title":"Car","text":"<ul> <li> <p> \u65b0\u589e CarSystemUI  </p> </li> <li> <p> \u65b0\u589e CarSettings  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_9","title":"\u79fb\u9664/\u8c03\u6574","text":"<ul> <li> <p> \u79fb\u9664 Java \u6a21\u5757\u4e0b\u7684 JNI \u811a\u672c  </p> </li> <li> <p> \u79fb\u9664 Wifi  </p> </li> <li> <p> framework \u3001services \u5305\u542b Wifi \u76f8\u5173\uff08\u4fdd\u6301\u8ddf\u539f\u751f\u4e00\u81f4\uff09  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#cts","title":"CTS","text":"<ul> <li> CtsWindowManagerDeviceTestCases  </li> <li> CtsInputTestCases  </li> </ul> <p>CTS \u76f8\u5173\u7684\u6a21\u5757\u90fd\u653e\u5230 cts \u6587\u4ef6\u5939\u4e0b  </p> <p>4\u5f00\u5934\u7248\u672c\u4e3b\u8981\u662f\u63d0\u4f9b\u8f66\u673a\u7684\u4e24\u4e2a\u6a21\u5757\uff0c\u4f9b\u5176\u4ed6\u8f66\u673a\u6a21\u5757\u53c2\u8003\u3002  </p> <p>3.x \u7248\u672c\u60f3\u8981\u89e3\u51b3 \u3010\u89e3\u51b3 Java \u6a21\u5757 \u5305\u542b JNI \u65f6\uff0cJNI\u4ee3\u7801\u65e0\u6cd5\u8df3\u8f6c\u95ee\u9898\u3011\uff0c\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7814\u7a76\u540e\uff0c\u65e0\u6cd5\u89e3\u51b3\u3002 \u540e\u7eed\u6253\u7b97\u5927\u6539\u7248 native \u6a21\u5757\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u5728 Java \u6a21\u5757\u4e0b\u63d0\u4f9b JNI\uff0c\u800c\u662f\u6253\u7b97\u521a\u624d\u4f7f\u7528 native \u90fd\u5355\u72ec\u4e00\u4e2a\u6a21\u5757\u3002 \u57fa\u4e8e\u8fd9\u70b9\uff0c\u4e5f\u6ca1\u5fc5\u8981\u63d0\u4f9b\u8001\u7248\u672c\u7684 \u3010\u751f\u6210 cmakelist \u811a\u672c\u3011  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#321","title":"3.2.1","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_10","title":"\u79fb\u9664/\u8c03\u6574","text":"<ul> <li> <p> \u79fb\u9664 BUILD_APPLICATION  </p> </li> <li> <p> \u79fb\u9664\u6839\u76ee\u5f55\u4e0b\u7684 native \u6a21\u5757  </p> </li> <li> <p> \u628a\u6240\u6709 native \u6a21\u5757\u90fd\u653e\u5728 aosp-native \uff0c\u5e76\u901a\u8fc7 add_subdirectory() \u65b9\u5f0f\u6dfb\u52a0\u5b50\u6a21\u5757  </p> </li> <li> <p> \u89e3\u51b3 Java \u6a21\u5757 \u5305\u542b JNI \u65f6\uff0cJNI\u4ee3\u7801\u65e0\u6cd5\u8df3\u8f6c\u95ee\u9898  </p> </li> <li> <p> \u63d0\u4f9b \u751f\u6210 cmakelist \u811a\u672c</p> </li> </ul> <p>\u6700\u521d\u7684 BUILD_APPLICATION \u786e\u5b9e\u662f\u7528\u4e86\u7f16\u8bd1 test app\uff0c\u4f46\u76ee\u524d\u529f\u80fd\u5df2\u7ecf\u6539\u7248\uff1b\u4e0d\u9700\u8981\u7f16\u8bd1 test app \u4e86\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5de5\u7a0b\u65e0\u6cd5\u7f16\u8bd1 aosp \u6a21\u5757\uff0c\u4e3a\u4e86\u4e0d\u5f15\u8d77\u6b67\u4e49\uff0c\u6545\u5220\u9664\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#210","title":"2.1.0","text":"","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#java_1","title":"java\u6a21\u5757","text":"<ul> <li> <p> Framework: framework.jar  </p> </li> <li> <p> Services: services.jar  </p> </li> <li> <p> FrameworkRes: framework-res.apk  </p> </li> <li> <p> SystemUI: SystemUI.apk  </p> </li> <li> <p> SystemUIPluginLib: SystemUIPluginLib.jar  </p> </li> <li> <p> Settings: Settings.apk  </p> </li> <li> <p> SettingsLib: SettingsLib.aar  </p> </li> <li> <p> SettingsProvider: SettingsProvider.apk  </p> </li> <li> <p> CarFramework: CarFramework  </p> </li> <li> <p> CarServices: CarServices.apk  </p> </li> <li> <p> Connectivity: \u5305\u62ecTethering\u3001nearby\u3001netd\u76f8\u5173\u7684\u6e90\u7801  </p> </li> <li> <p> Wifi: wifi\u76f8\u5173\u7684\u6e90\u7801  </p> </li> <li> <p> ExtServices: ExtServices.apk  </p> </li> </ul> <p>\u5728 1.x.x \u7684\u57fa\u7840\u4e0a\u5b8c\u5584\u66f4\u591a\u529f\u80fd\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#native","title":"native\u6a21\u5757","text":"<ul> <li> <p> AndroidRuntime: libandroid_runtime.so  </p> </li> <li> <p> AndroidServices: libandroid_servers.so  </p> </li> <li> <p> InputFlinger: inputflinger\u6a21\u5757  </p> </li> <li> <p> SurfaceFlinger: surfaceflinger\u6a21\u5757  </p> </li> <li> <p> NeuralNetworks: \u5c01\u88c5tensorflow\u6e90\u7801  </p> </li> <li> <p> TensorFlow: google\u7684tensorflow\u6e90\u7801  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#aidl","title":"aidl","text":"<ul> <li> \u652f\u6301 aidl \u7f16\u8bd1\u6210 java  </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#1xx","title":"1.x.x","text":"<ul> <li> <p> Framework: framework.jar  </p> </li> <li> <p> Services: services.jar  </p> </li> <li> <p> FrameworkRes: framework-res.apk  </p> </li> <li> <p> SystemUI: SystemUI.apk  </p> </li> <li> <p> SystemUIPluginLib: SystemUIPluginLib.jar  </p> </li> <li> <p> Settings: Settings.apk  </p> </li> <li> <p> SettingsLib: SettingsLib.aar  </p> </li> <li> <p> SettingsProvider: SettingsProvider.apk  </p> </li> <li> <p> CarFramework: CarFramework  </p> </li> <li> <p> CarServices: CarServices.apk  </p> </li> <li> <p> Connectivity: \u5305\u62ecTethering\u3001nearby\u3001netd\u76f8\u5173\u7684\u6e90\u7801  </p> </li> <li> <p> Wifi: wifi\u76f8\u5173\u7684\u6e90\u7801  </p> </li> <li> <p> ExtServices: ExtServices.apk  </p> </li> <li> <p> \u591a\u4e2a\u624b\u673a\u5382\u5546\u7684 Framework \u3001Services\u3001Ext-Framework \u3001Ext-Services \u7b49  </p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_11","title":"\u540e\u8bdd","text":"<p>\u6b64\u5de5\u7a0b\u5305\u542b\u7684 miui\u3001flyme\u3001oppo\u3001vivo \u7b49\u914d\u7f6e \u4e0d\u6d89\u53ca\u4efb\u4f55\u8fd9\u51e0\u5bb6\u516c\u53f8\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u6cc4\u9732\u4efb\u4f55\u516c\u53f8\u7684\u4ee3\u7801\uff01  </p> <p>\u5206\u4eab\u6b64\u5de5\u7a0b\u7684\u76ee\u7684\u662f\u4e3a\u4e86android\u7cfb\u7edf\u5de5\u7a0b\u5e08\u80fd\u63d0\u9ad8\u5de5\u4f5c\u6548\u7387\uff01\u8bf7\u52ff\u5c0f\u4e8b\u5316\u5927\uff01  </p> <p>\u6b64\u5de5\u7a0b\u62c6\u5c01\u6210\u5f88\u591a\u5206\u652f\uff0c\u9ed8\u8ba4\u662f aosp \u5206\u652f\u3002\u5207\u5206\u652f\u6709\u60ca\u559c[\u72d7\u5934]\u3002  </p>","tags":["Android","as"]},{"location":"source-code/as-aosp/intro/#_12","title":"\u5373\u65f6\u8ba8\u8bba","text":"<ul> <li>\u6dfb\u52a0\u5fae\u4fe1\uff0c\u5165\u7fa4\u4e0e\u5c0f\u4f19\u4f34\u4ea4\u6d41\uff1a  </li> </ul> <ul> <li> <p>\u901a\u8fc7 issues \u53cd\u9988\u95ee\u9898  </p> </li> <li> <p>\u535a\u5ba2\u7559\u8a00\u8ba8\u8bba</p> </li> </ul>","tags":["Android","as"]},{"location":"source-code/as-aosp/first-configuration/","title":"\u6559\u7a0b001-\u9996\u6b21\u914d\u7f6e","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/first-configuration/#_1","title":"\u4e0b\u8f7d","text":"<pre><code>git clone https://github.com/i-rtfsc/as-aosp.git\n</code></pre> <p>\u63a8\u8350\u4f7f\u7528 git \u4e0b\u8f7d\uff0c\u65b9\u4fbf\u540e\u7eed\u540c\u6b65\u6700\u65b0\u529f\u80fd\u3002</p> <p>\u4e0b\u8f7d\u7684\u8def\u5f84\u4e0d\u4e00\u5b9a\u662f\u4f60 aosp \u6e90\u7801\u6839\u76ee\u5f55\u3002</p> <p>\u4e0d\u63a8\u8350\u4e0b\u8f7d\u5230 aosp \u6e90\u7801\u6839\u76ee\u5f55</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/first-configuration/#_2","title":"\u914d\u7f6e","text":"<p>Android Studio \u76f4\u63a5\u6253\u5f00 as-aosp \u6587\u4ef6\u5939\uff0c\u6253\u5f00\u4e4b\u540e\u9700\u8981\u914d\u7f6e\u3002</p> <p>\u5728 local.properties \u6587\u4ef6\u4e2d\u65b0\u589e\u4f60\u7684 aosp \u6e90\u7801\u8def\u5f84\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/code/aosp\n</code></pre> <p>\u5230\u8fd9\u91cc\u5df2\u7ecf\u80fd\u6b63\u5e38\u4f7f\u7528\u8be5\u5de5\u7a0b\u9605\u8bfb\u6e90\u7801\u4e86\uff0c\u4f46\u914d\u7f6e\u6574\u4e2a aosp \u6e90\u7801\u8def\u5f84\u52a0\u8f7d\u4f1a\u6bd4\u8f83\u6162\u3002</p> <p>\u7b14\u8005\u63d0\u4f9b\u4e86\u52a0\u5feb\u52a0\u8f7d\u7684\u65b9\u6848\uff0c\u4e5f\u5c31\u662f\u8f6f\u8fde\u63a5\u65b9\u6848\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/first-configuration/#_3","title":"\u8f6f\u8fde\u63a5","text":"<p>\u5047\u8bbe\u4f60\u7684 aosp \u6e90\u7801\u8def\u5f84\u5982\u4e0b\uff1a</p> <pre><code>/home/solo/workspace/code/aosp\n</code></pre> <p>\u8fd9\u4e2a\u8def\u5f84\u5305\u542b\u4e86\u6240\u6709\u7684 aosp \u6e90\u7801\u3002</p> <p>\u5982\u679c\u76f4\u63a5\u5728 local.properties \u91cc\u914d\u7f6e\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/workspace/code/aosp\n</code></pre> <p>\u52a0\u8f7d\u4f1a\u975e\u5e38\u6162\uff0c\u6240\u6709\u6211\u4eec\u6362\u4e00\u4e2a\u601d\u8def\u3002\u4f7f\u7528\u8f6f\u94fe\u63a5\u7684\u65b9\u6848\u3002</p> <p>\u6211\u4eec\u628a  local.properties \u91cc\u914d\u7f6e\u6539\u6210\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/code/aosp\n</code></pre> <p>\u7136\u540e\u6253\u5f00 as-aosp \u5de5\u7a0b\u91cc\u7684\u811a\u672c scripts/ln.sh \uff0c\u4fee\u6539\u811a\u672c\u5185\u5bb9\uff1a</p> <p>\u539f\u6765\u914d\u7f6e\u7684\uff1aSOURCE\u3001DEST\u5982\u4e0b\uff1a</p> <pre><code>SOURCE=\"/data/code/aosp\"  \nDEST=\"/home/solo/code/aosp\"\n</code></pre> <p>\u6539\u6210\uff1a</p> <pre><code>SOURCE=\"/home/solo/workspace/code/aosp\"  \nDEST=\"/home/solo/code/aosp\"\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0cSOURCE \u662f aosp \u6e90\u7801\u7684\u771f\u5b9e\u76ee\u5f55\uff0cDEST \u662f aosp \u6e90\u7801\u7684 \" \u6620\u5c04 \" \u76ee\u5f55\u3002</p> <p>\u6539\u5b8c\u4e4b\u540e\u6267\u884c\u8fd9\u4e2a\u811a\u672c\u5373\u53ef\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/","title":"\u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#_1","title":"\u80cc\u666f","text":"<p>as-aosp \u7684\u8bbe\u8ba1\u521d\u8877\u662f\u4e3a\u4e86\u65b9\u4fbf\u9605\u8bfb aosp \u6e90\u7801\uff0c\u53ef\u4ee5\u505a\u5230\u4e1d\u6ed1\u8df3\u8f6c\u3001\u8054\u60f3\u3002</p> <p>aosp \u7684 idegen(android.ipr\u548candroid.iml) \u65b9\u6848\u4e5f\u53ef\u4ee5\u52a0\u8f7d\u6e90\u7801\u5b9e\u73b0\u8df3\u8f6c\uff0c\u4f46\u4e0d\u5c3d\u4eba\u610f\u3002</p> <p>\u800c as-aosp \u5219\u501f\u9274\u4e86 app \u914d\u7f6e gradle \u7684\u601d\u8def\uff0c\u4e0b\u6765\u6211\u4eec\u6765\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u5176\u914d\u7f6e\u65b9\u6848\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#_2","title":"\u76ee\u5f55\u7ed3\u6784","text":"<pre><code>.\n\u251c\u2500\u2500 aosp-modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Framework\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 build.gradle\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Services\n\u2502\u00a0\u00a0 \u00a0\u00a0  \u2514\u2500\u2500 build.gradle\n\u251c\u2500\u2500 build.gradle\n\u251c\u2500\u2500 gradle.properties\n\u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 android-build.gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aosp_generator_out_code_linker.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 configs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 aosp.gradle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 car.gradle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 cts.gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 copy_aosp_scrjar.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core.gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 func.gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ln.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 settings\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 aosp-cmake.gradle\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 aosp.gradle\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 aosp-system-server.gradle\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 car.gradle\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 cts.gradle\n\u2514\u2500\u2500 settings.gradle\n</code></pre> <p>\u5f53\u524d\u7684 as-aosp \u76ee\u5f55\u6bd4\u4e0a\u9762\u7684\u590d\u6742\uff0c\u8fd9\u91cc\u53ea\u662f\u7cbe\u7b80\u540e\u5f53\u505a\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <ul> <li>\u6839\u76ee\u5f55\u6709 build.gradle \u3001settings.gradle</li> <li>\u6a21\u5757\u76ee\u5f55\u53ea\u5305\u542b\u4e00\u4e2a build.gradle \uff0c\u5982 aosp-modules/Framework/build.gradle</li> <li>scripts \u76ee\u5f55\u5305\u542b\u4e86\u5f88\u591a\u5173\u952e\u7684\u811a\u672c</li> </ul>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#coregradle","title":"core.gradle","text":"<p>core.gradle \u914d\u7f6e\u4e00\u4e9b\u6838\u5fc3\u7684\u5185\u5bb9\u3002</p> <p>\u5982 aospRoot \u5c31\u662f\u914d\u7f6e aosp \u6e90\u7801\u8def\u5f84\uff0candroidSdk \u5219\u662f\u914d\u7f6e sdk \u5f00\u53d1\u7248\u672c\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#funcgradle","title":"func.gradle","text":"<p>func.gradle \u5219\u662f\u653e\u4e00\u4e9b\u516c\u5171\u51fd\u6570\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u51fd\u6570\uff1agetRoot(properties) \u5c31\u662f\u89e3\u6790 local.properties \u662f\u5426\u5305\u542b EXT_AOSP_ROOT \u5c5e\u6027\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#configs","title":"configs","text":"<p>scripts/configs \u76ee\u5f55\u4e0b\u9762\u7684\u51e0\u4e2a gradle \u811a\u672c\u90fd\u662f\u914d\u7f6e\u6bcf\u4e2a\u6a21\u5757\u5177\u4f53\u6e90\u7801\u8def\u5f84\u3002</p> <p>\u5982\uff1ascripts/configs/aosp.gradle \u914d\u7f6e\u4e86 Framework \u6a21\u5757\u7684\u6e90\u7801\u8def\u5f84\u3002</p> <p>\u8fd9\u91cc\u6bcf\u4e2a\u6a21\u5757\u914d\u7f6e\u9879\u90fd\u6709\uff1amanifest\u3001res\u3001assets\u3001jni\u3001src\u3001srcjars\u3001aidl\u3002\u5982\u679c\u6ca1\u6709\u5219\u8bbe\u7f6e\u4e3a\u7a7a\u5373\u53ef\u3002</p> <p>\u5982\uff1a</p> <pre><code>Framework : [  \n        manifest: \"\",  \n        res     : [],  \n        assets  : [],  \n        jni     : \"\",  \n        src     : [],  \n        srcjars : [],  \n        aidl    : [],  \n],\n</code></pre>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#settings","title":"settings","text":"<p>scripts/settings \u76ee\u5f55\u4e0b\u9762\u7684\u51e0\u4e2a gradle \u811a\u672c\u5219\u662f\u914d\u7f6e\u5b50\u6a21\u5757\u3002</p> <p>\u5982\uff1ascripts/settings/aosp-system-server.gradle \u914d\u7f6e\u4e86 Framework \u6a21\u5757\u7b49\u7b49\u3002</p> <pre><code>include ':Framework'  \nproject(':Framework').projectDir = \"$rootDir/aosp-modules/Framework\" as File\n</code></pre> <p>\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u4e86:</p> <ul> <li>scripts/configs \u4e0b\u7684\u811a\u672c\u662f\u914d\u7f6e\u5404\u4e2a\u6a21\u5757\u4ee3\u7801\u7684\u5177\u4f53\u8def\u5f84</li> <li>scripts/settings \u5219\u662f\u914d\u7f6e\u5de5\u7a0b\u7684\u5b50\u6a21\u5757</li> </ul> <p>\u4f46\u6ca1\u6709\u770b\u5230\u52a0\u8f7d\u8fd9\u4e9b\u914d\u7f6e\u7684\u5730\u65b9\uff0c\u6211\u4eec\u518d\u56de\u5230\u5de5\u7a0b\u6839\u76ee\u5f55\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#buildgradle","title":"\u6839build.gradle","text":"<pre><code>apply from: \"${rootDir}/scripts/func.gradle\"  \n//\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u52a0\u8f7d  \napplyConfig('scripts/core.gradle')  \napplyConfig('scripts/configs/aosp.gradle')  \napplyConfig('scripts/configs/car.gradle')  \napplyConfig('scripts/configs/cts.gradle')\napplyConfig('ext/scripts/configs/ext.gradle')\n</code></pre> <p>\u5728\u5de5\u7a0b \u6839build.gradle \u4e2d\u52a0\u8f7d\u4e86 func.gradle\u3001core.gradle\u3001\u4ee5\u53ca scripts/configs \u4e0b\u7684\u5404\u4e2a\u914d\u7f6e\u3002</p> <p>\u8fd9\u6837\u505a\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u4e2a\u5de5\u7a0b\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 scripts/configs \u4e0b\u914d\u7f6e\u7684\u5185\u5bb9\u4e86\uff0c\u6bd4\u5982\uff1a</p> <p>\u6211\u5728\u4e00\u4e2a\u5b50\u6a21\u5757\u4e2d\uff1a</p> <pre><code>def androidRoot = rootProject.ext.aosp.Framework\n</code></pre> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 scripts/configs/aosp.gradle \u4e0b\u914d\u7f6e\u7684 Framework\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/design/#settingsgradle","title":"\u6839settings.gradle","text":"<pre><code>apply from: \"${rootDir}/scripts/func.gradle\"  \n\n//\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u52a0\u8f7d\uff1b\u6587\u4ef6\u4e2d\u914d\u7f6e\u5177\u4f53\u7684\u6a21\u5757  \napplyConfig('scripts/settings/aosp.gradle')  \n//applyConfig('scripts/settings/aosp-cmake.gradle')  \napplyConfig('scripts/settings/aosp-system-server.gradle')  \napplyConfig('scripts/settings/car.gradle')  \n//applyConfig('scripts/settings/cts.gradle')\napplyConfig('ext/scripts/settings/ext.gradle')\n</code></pre> <p>\u5728\u5de5\u7a0b \u6839settings.gradle \u4e2d\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u52a0\u8f7d scripts/settings \u4e2d\u914d\u7f6e\u7684\u5b50\u6a21\u5757\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/simple-extra/","title":"\u6559\u7a0b003-\u7b80\u5355\u6269\u5c55","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/simple-extra/#_1","title":"\u9700\u6c42","text":"<p>\u770b\u5b8c \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u4e4b\u540e\uff0c\u77e5\u9053\u57fa\u672c\u4e0a\u8bbe\u8ba1\u601d\u8def\u4e86\u3002\u4f46\u5982\u679c\u6269\u5c55\u5462\uff1f</p> <p>\u5047\u8bbe\u6211\u662f\u5c0f\u7c73\u5458\u5de5\uff0c\u6211\u53d1\u73b0\u914d\u7f6e scripts/configs/aosp.gradle \u4e2d SettingsProvider \u6a21\u5757\u914d\u7f6e\u7684\u6e90\u7801\u8def\u5f84\u7f3a\u5c11\u5c0f\u7c73\u81ea\u5b9a\u4e49\u7684\u4e00\u4e9b\u8def\u5f84\uff0c\u90a3\u6211\u5982\u4f55\u4fee\u6539\u5462\uff1f</p> <p>\u672c\u6587\u4e2d\u6211\u4eec\u90fd\u4ee5 \u5c0f\u7c73\u3001SettingsProvider \u6a21\u5757\u4e3e\u4f8b\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/simple-extra/#1","title":"\u65b9\u68481","text":"<p>\u76f4\u63a5\u5728 scripts/configs/aosp.gradle \u91cc\u5bf9\u5e94\u7684\u6a21\u5757\uff08SettingsProvider\uff09\u4fee\u6539\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/simple-extra/#2","title":"\u65b9\u68482","text":"<p>\u65b0\u589e\u81ea\u5df1\u7684 configs \u914d\u7f6e\u3002</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u5de5\u7a0b\u6709\u5f88\u591a\u5206\u652f\uff0c\u6211\u9884\u7559\u4e86\u56fd\u5185\u51e0\u5bb6\u4e3b\u6d41\u7684\u624b\u673a\u5382\u5206\u652f\u4ee5\u53ca lineage \u5206\u652f\u7b49\u3002 \u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u81ea\u884c\u914d\u7f6e\u3002</p> <p>\u5728  scripts/configs \u76ee\u5f55\u4e0b\u65b0\u589e miui.gradle \uff0c\u7136\u540e\u65b0\u589e\uff1a</p> <pre><code>ext {\n    miuiDir = rootProject.ext.aospRoot\n\n    miuiVendorDir = \"$miuiDir/miui\"\n\n    miui = [\n            root        : \"$miuiDir\",\n\n            SettingsProvider : [  \n                manifest: \"\",  \n                res     : [],  \n                assets  : [],  \n                jni     : \"\",  \n                src     : [],  \n                srcjars : [],  \n                aidl    : [],  \n            ],\n\n    ]\n\n}\n</code></pre> <p>\u6dfb\u52a0 SettingsProvider \u6a21\u5757\u7684\u6e90\u7801\u8def\u5f84\u3002</p> <p>\u627e\u5230 aosp-modules/SettingsProvider/build.gradle \u4fee\u6539\uff1a</p> <pre><code>def androidRoot = rootProject.ext.aosp.SettingsProvider\n</code></pre> <p>\u6539\u6210</p> <pre><code>def androidRoot = rootProject.ext.miui.SettingsProvider\n</code></pre> <p>\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f</p> <p>\u5f53\u7136\u8fd9\u9488\u5bf9\u4e8e\u6709\u73b0\u6210\u6a21\u5757\u7684\u57fa\u672c\u4e0a\uff08aosp-modules/SettingsProvider\uff09\uff0c\u5982\u679c\u662f\u65b0\u589e\u4e00\u4e2a\u6a21\u5757\u57fa\u672c\u4e0a\u4e5f\u662f\u8fd9\u4e2a\u601d\u8def\u3002</p> <p>\u8fd9\u4e2a\u6269\u5c55\u65b9\u6848\u5b58\u5728\u4e00\u5b9a\u7684\u7f3a\u9677\uff0c\u4e5f\u5c31\u662f\u4fee\u6539\u4e4b\u540e\uff0c\u4f1a\u6539\u6389 as-aosp \u4ed3\u7684\u4ee3\u7801\uff0c\u5c31\u4e0d\u65b9\u4fbf\u540c\u6b65\u6700\u65b0\u7684\u4ee3\u7801\u4e86\u3002</p> <p>\u5728\u540e\u9762\u7684 \u6559\u7a0b004-\u63d2\u4ef6\u6269\u5c55 \u65b9\u6848\u4e2d\uff0c\u53ef\u4ee5\u968f\u610f\u6269\u5c55\u4f60\u60f3\u8981\u6dfb\u52a0\u7684\u6a21\u5757\uff0c\u5e76\u4e14\u80fd\u968f\u7740\u540c\u6b65\u6700 as-aosp \u65b0\u4ee3\u7801\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/","title":"\u6559\u7a0b004-\u63d2\u4ef6\u6269\u5c55","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#_1","title":"\u8bf4\u660e","text":"<p>\u8fd9\u91cc\u8bf4\u7684 \"\u63d2\u4ef6\" \u5e76\u975e\u6211\u4eec\u5e38\u8ba4\u77e5\u7684\u63d2\u4ef6\uff0c\u800c\u662f \"\u65e0\u75db\" \u65b0\u589e\u6a21\u5757\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#_2","title":"\u9700\u6c42","text":"<p>\u770b\u5b8c \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u3001\u6559\u7a0b003-\u7b80\u5355\u6269\u5c55  \u4e4b\u540e\uff0c\u77e5\u9053\u5982\u4f55\u6269\u5c55\u4e00\u4e2a\u6a21\u5757\u4e86\u3002</p> <p>\u4f46\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u5462\uff0c\u4e5f\u5c31\u662f\u6211\u60f3\u65b0\u589e\u4e2a\u4eba\u914d\u7f6e\u7684\u540c\u65f6\uff0c\u4e5f\u80fd\u53ca\u65f6\u4eab\u53d7\u5230 as-aosp \u7684\u6700\u65b0\u4ee3\u7801\uff0c\u4e0d\u81f3\u4e8e pull \u4ee3\u7801\u65f6\u51b2\u7a81\u3002</p> <p>\u7b54\u6848\u662f\u6709\u7684\uff0c\u811a\u672c\u601d\u8def\u5c31\u662f as-aosp \u7684 .gitignore \u5df2\u7ecf\u914d\u7f6e\u4e86 ext \u76ee\u5f55\uff0c\u4e5f\u5c31\u662f\u8bf4 ext \u76ee\u5f55\u4e0b\u6539\u52a8\u4f1a\u88ab git \u5ffd\u7565\u6389\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#_3","title":"\u601d\u8def","text":"<p>\u5728\u524d\u9762 \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u5176\u5b9e\u6709\u4e00\u4e2a\u5173\u952e\u7684\u4fe1\u606f\u6211\u4eec\u5f53\u65f6\u6ca1\u70b9\u51fa\u6765\u3002</p> <ul> <li>\u6839build.gradle </li> </ul> <p>\u914d\u7f6e\u4e86\uff1a</p> <pre><code>applyConfig('ext/scripts/configs/ext.gradle')\n</code></pre> <ul> <li>\u6839settings.gradle</li> </ul> <p>\u914d\u7f6e\u4e86\uff1a</p> <pre><code>applyConfig('ext/scripts/settings/ext.gradle')\n</code></pre> <p>\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728 ext/scripts \u76ee\u5f55\u914d\u7f6e\u81ea\u5df1\u65b0\u589e\u7684\u6a21\u5757\u5c31\u597d\u4e86\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#ext","title":"\u63d2\u4ef6\uff08ext\uff09","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e0b\u6211\u4eec\u914d\u7f6e\u4e00\u4e2a ExtExampleUpgrade \u6a21\u5757\u9700\u8981\u7684\u76ee\u5f55\u4ee5\u53ca\u6587\u4ef6\u5982\u4e0b\uff1a</p> <pre><code>ext\n\u251c\u2500\u2500 ExtExampleUpgrade\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 build.gradle\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 configs\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ext.gradle\n    \u2514\u2500\u2500 settings\n        \u2514\u2500\u2500 ext.gradle\n</code></pre> <p>\u8fd9\u91cc\u80fd\u770b\u5230 ext/scripts/configs/ext.gradle\u3001ext/scripts/settings/ext.gradle \u8ddf \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u63d0\u5230\u7684\u601d\u8def\u662f\u4fdd\u6301\u4e00\u81f4\u7684\u3002</p> <p>configs \u91cc\u914d\u7f6e\u5177\u4f53\u7684\u6e90\u7801\u8def\u5f84\uff0csettings \u5219\u914d\u7f6e\u5b50\u6a21\u5757\u3002</p> <p>\u7136\u540e ExtExampleUpgrade \u5c31\u662f\u5b50\u6a21\u5757\uff0c\u4ee5\u53ca\u8be5\u5b50\u6a21\u5757\u7684 build.gradle \u6587\u4ef6\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#configsextgradle","title":"configs/ext.gradle","text":"<p>scripts/configs/ext.gradle \u4e3b\u8981\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u914d\u7f6e\u6a21\u5757\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u53c2\u8003 scripts/configs/aosp.gradle </p> <p>\u5728\u672c\u4f8b\u5b50\u4e2d\u914d\u7f6e\u5982\uff1a</p> <pre><code>ext {  \n    //\u901a\u8fc7scripts/config.gradle\u83b7\u53d6\u5230\u8bbe\u7f6e\u7684\u6e90\u7801\u8def\u5f84\uff0c  \n    //\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u6539\u6210\u81ea\u5df1\u5b9a\u4e49\u7684\u8def\u5f84  \n    aospDir = rootProject.ext.aospRoot  \n\n    ext_sample = [  \n            root   : \"$aospDir\",  \n\n            /*************** \u914d\u7f6e Upgrade \u8def\u5f84 ***************/            upgrade: [  \n                    manifest: \"device/sample/apps/upgrade/AndroidManifest.xml\",  \n                    res     : [  \n                    ],  \n                    assets  : [],  \n                    jni     : \"\",  \n                    src     : [  \n                            \"$aospDir/device/sample/apps/upgrade/src/\",  \n                    ],  \n                    srcjars : [],  \n                    aidl    : [],  \n            ],  \n    ]  \n\n}\n</code></pre>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#settingsextgradle","title":"settings/ext.gradle","text":"<p>scripts/settings/ext.gradle \u4e3b\u8981\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u52a0\u8f7d\u6a21\u5757\uff0c\u53ef\u4ee5\u53c2\u8003 scripts/settings/aosp.gradle</p> <p>\u5728\u672c\u4f8b\u5b50\u4e2d\u914d\u7f6e\u5982\uff1a</p> <pre><code>include ':ExtExampleUpgrade'  \nproject(':ExtExampleUpgrade').projectDir = \"$rootDir/ext/ExtExampleUpgrade\" as File\n</code></pre>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#extexampleupgrade","title":"ExtExampleUpgrade","text":"<p>ExtExampleUpgrade \u5c31\u662f\u6211\u4eec\u60f3\u8981\u65b0\u589e\u7684\u5b50\u6a21\u5757\u4e86\uff0c\u8fd9\u91cc\u4e5f\u8ddf  \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u63d0\u5230\u7684\u601d\u8def\u662f\u4fdd\u6301\u4e00\u81f4\u7684\uff0c\u53ea\u9700\u8981\u914d\u7f6e build.gradle \u6587\u4ef6\u5e76\u8bbe\u7f6e\u5982\u4e0b\u5373\u53ef\u3002</p> <pre><code>def androidRoot = rootProject.ext.ext_sample.upgrade  \n\next {  \n    BUILD_MANIFEST = androidRoot.manifest  \n    BUILD_RES = androidRoot.res  \n    BUILD_ASSETS = androidRoot.assets  \n    BUILD_SRC = androidRoot.src  \n    BUILD_SRC_JARS = \"\"  \n    BUILD_AIDL = [androidRoot.src + androidRoot.aidl]  \n    BUILD_NATIVE_ROOT = \"\"  \n}  \n\napply from: \"${rootDir}/scripts/android-build.gradle\"\n</code></pre> <p>\u5f88\u7b80\u5355\u5427\uff0c\u5982\u679c\u8fd8\u6709\u65b0\u589e\u6a21\u5757\uff0c\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u518d\u65b0\u589e\u5373\u53ef\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/plugin-extra/#demo","title":"Demo\u4e0b\u8f7d","text":"<p>Demo\u4e0b\u8f7d\u5730\u5740</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code/","title":"\u6559\u7a0b005-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801[6.x\u7248\u672c\u9ed8\u8ba4\u8df3\u8f6c]","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code/#_1","title":"\u80cc\u666f","text":"<p>Tip</p> <p>\u66f4\u65b0\u5230 6.x \u4ee5\u4e0a\u7248\u672c\uff0c\u5373\u53ef\u9ed8\u8ba4\u8df3\u8f6c\u3002</p> <p>\u4e0d\u63a8\u8350\u4f7f\u7528\u6b64\u6559\u7a0b[\u6559\u7a0b005-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801]\u65b9\u6848\uff0c\u8bf7\u66f4\u65b0\u81f3\u6700\u65b0\u7248\u672c\uff0c\u65e9\u66f4\u65b0\u65e9\u4eab\u53d7\u3002</p> <p>\u8be6\u7ec6\u53ef\u53c2\u8003 \u6559\u7a0b008-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801\u4e4b\u8fdb\u9636\u7248\u3002</p> <p>\u4e4b\u524d\u7684\u65b9\u6848\u662f\u5728 .iml \u6587\u4ef6\u4e2d\u91cd\u65b0\u7ed9 android sdk \u6392\u5e8f\uff0c\u8fd9\u4e2a\u65b9\u6848\u5176\u5b9e\u4e5f\u86ee\u597d\u7684\u3002</p> <p>\u4f46 Android Studio \u4f1a\u6709\u5404\u79cdbug\uff0c\u6709\u65f6\u5019\u662f\u4e0d\u751f\u6210 .iml \u6216\u8005\u6709\u65f6\u5019\u751f\u6210\u7684\u8def\u5f84\u5f88\u5947\u602a\u3002\u800c\u4e14\u91cd\u65b0\u6392\u5e8f\u4e4b\u540e\uff0c\u4e5f\u6709\u8df3\u8f6c\u4e0d\u6b63\u786e\u7684\u65f6\u5019\u3002</p> <p>\u6700\u8fd1\u5347\u7ea7\u4ee5\u4e0b\u7248\u672c\u4e4b\u540e\u5f7b\u5e95\u4e0d\u751f\u6210 .iml \u4e86\uff0c\u6240\u4ee5\u4e4b\u524d\u7684\u65b9\u6848\u5b8c\u5168\u4e0d\u80fd\u7528\u4e86\u3002</p> <pre><code>Android Studio Iguana | 2023.2.1 Patch 2\nBuild #AI-232.10300.40.2321.11668458, built on April 4, 2024\n</code></pre> <p>\u90a3\u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u4e0d\u80fd\u8df3\u8f6c framework \u6e90\u7801\uff0c\u53ea\u80fd\u8df3\u8f6c\u5230 android.jar \u5c31\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u4e86\u3002</p> <p>\u6240\u4ee5\u5c1d\u8bd5\u65b0\u7684\u65b9\u6848\uff0c\u6bd4\u5982\u6539 bootstrapClasspath  \u7b49\uff0c\u4f46\u8bd5\u4e0b\u6765\u7ed3\u679c\u4e0d\u5c3d\u4eba\u610f\u3002</p> <p>\u6700\u7ec8\u4f7f\u7528\u4e86\u975e\u5e38\u66b4\u529b\uff0c\u4f46\u5f88\u597d\u7528\u7684\u65b9\u6848\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u5982\u679c\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u8df3\u8f6c\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\u53ef\u4ee5\u89c1\u5230\uff0c\u8df3\u8f6c\u5230\u4e86 android.jar \u91cc\uff0c\u975e\u5e38\u7684\u4e0d\u53cb\u597d\uff01</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code/#androidjar","title":"\u5220\u9664 android.jar","text":"<p>\u6253\u5f00 scripts/android-build.gradle \uff0c\u6267\u884c\u4efb\u52a1 deleteAndroidSdk\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6267\u884c\u5b8c\u4efb\u52a1 deleteAndroidSdk \u4e4b\u540e\u5df2\u7ecf\u80fd\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u6e90\u7801\u4e86\u3002</p> <p>\u4f46\u662f\u8fd9\u4e00\u6b65\u6211\u4eec\u662f\u628a </p> <pre><code>~/Android/Sdk/platforms/android-34/android.jar\n</code></pre> <p>\u76f4\u63a5\u6539\u6210\uff1a</p> <pre><code>~/Android/Sdk/platforms/android-34/android.jar.backup\n</code></pre> <p>\u975e\u5e38\u5371\u9669\uff0c\u5982\u679c\u4f60\u5fd8\u8bb0\u8fd9\u4ef6\u4e8b\uff0c\u540e\u9762\u518d\u6253\u5f00\u4efb\u4f55\u4e00\u4e2a android \u5de5\u7a0b\u90fd\u4f1a\u62a5\u9519\u3002</p> <p>\u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6062\u590d android.jar \u7684\u4efb\u52a1\u3002\u5e76\u4e14\u6062\u590d\u540e\uff0c\u53ea\u8981\u4f60\u4e0d\u91cd\u542f android studio\uff0c\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8df3\u8f6c\u6e90\u7801\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code/#androidjar_1","title":"\u6062\u590d android.jar","text":"<p>\u6253\u5f00 scripts/android-build.gradle \uff0c\u6267\u884c\u4efb\u52a1 restoreAndroidSdk\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\uff0c\u6062\u590d android.jar \u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u8df3\u8f6c\u6e90\u7801\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code/#_2","title":"\u91cd\u8981","text":"<p>\u5220\u9664 android.jar \u662f\u975e\u5e38\u5371\u9669\u7684\u4e00\u4ef6\u4e8b\u60c5\uff0c\u6240\u4ee5\u5e0c\u671b\u6267\u884c deleteAndroidSdk \u4e4b\u540e\uff0c\u8981\u63a5\u7740\u6267\u884c restoreAndroidSdk \u3002 \u4fdd\u8bc1\u4f60\u540e\u7eed\u80fd\u6b63\u5e38\u4f7f\u7528\u522b\u7684 android \u5de5\u7a0b\u3002</p> <p>\u53ea\u8981\u4f60\u4e0d\u91cd\u542f android studio \uff0c\u53ea\u9700\u8981\u6267\u884c\u4e00\u4e2a deleteAndroidSdk \u548c restoreAndroidSdk \u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-aidl/","title":"\u6559\u7a0b006-aidl\u8df3\u8f6c","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-aidl/#_1","title":"\u65b9\u6848\u4e00","text":"<p>\u6253\u5f00\u5de5\u7a0b\uff0c\u4fee\u6539 scripts/core.gradle \u4e2d\uff1a</p> <pre><code>build_aidl = false\n</code></pre> <p>\u6539\u6210\uff1a</p> <pre><code>build_aidl = true\n</code></pre> <p>\u7136\u540e\u5728\u6267\u884c Android Studio \u6267\u884c Build \uff0c\u6267\u884c\u5b8c\u6210\u4e4b\u540e \u518d\u628a build_aidl \u6539\u56defalse\u5373\u53ef\u3002</p> <p>\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\uff0c\u6b64 as-aosp \u5de5\u7a0b\u4e0d\u652f\u6301\u7f16\u8bd1\u4efb\u4f55\u6a21\u5757\uff0c\u8fd9\u4e2a\u65b9\u6848\u8fd9\u4e48\u505a\u5176\u5b9e\u4e5f\u662f\u501f\u52a9\u4e86 Android Studio \u4f1a\u628a .aidl \u7f16\u8bd1\u6210 .java\u3002\u4f46\u662f\u7f16\u8bd1\u5f88\u5feb\u5c31\u4f1a\u62a5\u9519\u4e86\uff0c\u6240\u4ee5 .aidl \u80fd\u751f\u6210\u591a\u5c11 .java \u90fd\u662f\u968f\u7f18\u7684\u3002</p> <p>\u4e0d\u63a8\u8350\u6b64\u65b9\u6848\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-aidl/#_2","title":"\u65b9\u6848\u4e8c","text":"<p>\u6b64\u65b9\u6848\u5f25\u8865\u4e86\u65b9\u6848\u4e00\u7684\u7f3a\u9677\uff0c\u6240\u6709\u7684 .aidl \u90fd\u80fd\u627e\u5230\u5bf9\u5e94\u7684 .java \u6587\u4ef6\u3002\u5b9e\u73b0\u5b8c\u7f8e\u8df3\u8f6c\u3002</p> <p>\u4f46\u8be5\u65b9\u6848\u5fc5\u987b\u5728\u6574\u7f16\u6e90\u7801\u7684\u57fa\u7840\u4e0a\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-aidl/#copy","title":"\u8f6f\u8fde\u63a5\u6216\u8005copy","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528\u8f6f\u94fe\u63a5\u65b9\u6848\uff0c\u5177\u4f53\u53ef\u4ee5\u67e5\u770b \u6559\u7a0b001-\u9996\u6b21\u914d\u7f6e \uff1b\u90a3\u4e48\u4f60\u8fd8\u9700\u8981\u628a out \u8f6f\u94fe\u63a5\u6216\u8005 copy \u8fc7\u6765\u3002 \u4f46\u662f out \u7279\u522b\u5927\uff0c\u5982\u679c\u90fd copy \u6216\u8005\u8f6f\u94fe\u63a5\u8fc7\u6765\u53ef\u80fd\u4f1a\u5f71\u54cd\u52a0\u8f7d\u901f\u5ea6\uff1b\u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\uff0c\u53ea\u9700\u8981 copy \u6216\u8005\u8f6f\u94fe\u63a5\u6211\u4eec\u5173\u5fc3\u7684\u4ee3\u7801\u3002</p> <p>\u811a\u672c\u4f4d\u4e8e\uff1a</p> <pre><code>scripts/aosp_generator_out_code_linker.py\n</code></pre> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <pre><code>python aosp_generator_out_code_linker.py --aosp aosp\u6e90\u7801\u76ee\u5f55 --target as-aosp\u6307\u5b9a\u7684\u76ee\u5f55 --copy 1\u6216\u80050\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <ul> <li>--aosp</li> </ul> <p>\u6307\u7684\u662f aosp \u6e90\u7801\u76ee\u5f55\uff08\u6574\u7f16\u8fc7\u4e86\uff09</p> <ul> <li>--target</li> </ul> <p>as-aosp\u6307\u5b9a\u7684\u76ee\u5f55</p> <p>\u4e5f\u5c31\u662f \u6559\u7a0b001-\u9996\u6b21\u914d\u7f6e  \u63d0\u5230\u7684\u5728 local.properties \u6587\u4ef6\u4e2d\u65b0\u589e\u4f60\u7684 aosp \u6e90\u7801\u8def\u5f84\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/code/aosp\n</code></pre> <ul> <li>--copy</li> </ul> <p>1\u4e3acopy</p> <p>0\u4e3a\u8f6f\u8fde\u63a5</p> <p>\u6267\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u4e4b\u540e\uff0c\u518d sync \u5de5\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0 aidl \u7684\u8df3\u8f6c\u4e86\u3002</p> <p>\u5982\uff1a</p> <p></p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-aidl/#_3","title":"\u8fdb\u9636","text":"<p>\u6267\u884c aosp_generator_out_code_linker.py \u811a\u672c\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u8ddfas-aosp\u914d\u7f6e\u7684\u6e90\u7801\u76ee\u5f55\u4e0d\u4e00\u81f4\u3002</p> <p>\u6709\u70b9\u7ed5\u54c8\uff0c\u6bd4\u5982\uff1a</p> <p>\u5728 local.properties \u6587\u4ef6\u4e2d\u65b0\u589e\u4f60\u7684 aosp \u6e90\u7801\u8def\u5f84\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/code/aosp\n</code></pre> <p>\u800c\u4f60\u6267\u884c\uff1apython aosp_generator_out_code_linker.py --aosp aosp\u6e90\u7801\u76ee\u5f55 --target /home/solo/code/link-aosp-out</p> <p>\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5982\u679c\u4f60\u8fd9\u91cc\u914d\u7f6e\u7684\u4e24\u4e2a\u8def\u5f84\u4e0d\u4e00\u6837\uff0c\u5c31\u9700\u8981\u4f60\u5728 local.properties \u6587\u4ef6\u4e2d\u65b0\u589e\u4f60\u7684 aosp \u6e90\u7801\u8def\u5f84\uff1a</p> <pre><code>EXT_AOSP_ROOT=/home/solo/code/aosp\nEXT_AOSP_OUT_ROOT=/home/solo/code/link-aosp-out\n</code></pre> <p>\u4e5f\u5c31\u662f\u591a\u914d\u7f6e\u4e86 EXT_AOSP_OUT_ROOT \uff0c\u4f46\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c aosp_generator_out_code_linker.py \u811a\u672c\u5df2\u7ecf\u53ea\u8f6f\u8fde\u63a5\u4e86\u9700\u8981\u7684\u4ee3\u7801\uff0c\u4e0d\u4f1a\u5f88\u5927\u3002\u6240\u4ee5\u4e0d\u5efa\u8bae\u914d\u7f6e\u4e0d\u4e00\u6837\u7684\u8def\u5f84\u3002</p> <p>\u601d\u8003\uff1a</p> <p>Q1\uff1a\u90a3\u6211\u80fd\u4e0d\u80fd\u4e0d\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u76f4\u63a5 EXT_AOSP_OUT_ROOT \u914d\u7f6e\u6210\u6e90\u7801\u771f\u5b9e\u8def\u5f84\u5462\uff1f</p> <p>A1\uff1a\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u52a0\u8f7d\u53ef\u80fd\u4f1a\u6162\u3002</p> <p>Q2\uff1a\u6267\u884c aosp_generator_out_code_linker.py \u811a\u672c\u8bbe\u7f6e\u7684 --target \u8ddf EXT_AOSP_ROOT \u7684\u76ee\u5f55\u4e00\u81f4\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u591a\u6b64\u4e00\u4e3e\uff1f</p> <p>A2\uff1a\u55ef\uff0c\u6700\u597d\u662f\u8ddf EXT_AOSP_ROOT \u7684\u76ee\u5f55\u4e00\u81f4\uff0c\u65b0\u589e\u8fd9\u4e2a\u65b9\u6848\u662f\u4e3a\u4e86\u6ee1\u8db3\u6bcf\u4e2a\u4eba\u7684\u9700\u6c42\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/","title":"\u6559\u7a0b007-c++\u8df3\u8f6c","text":"","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#settingsgradle","title":"\u6839settings.gradle","text":"<p>\u5728  \u6559\u7a0b002-\u8bbe\u8ba1\u601d\u8def \u6211\u4eec\u63d0\u5230\u4e86 \u6839settings.gradle \u5176\u5b9e\u662f\u52a0\u8f7d scripts/settings \u4e2d\u914d\u7f6e\u7684\u5b50\u6a21\u5757\u3002</p> <pre><code>apply from: \"${rootDir}/scripts/func.gradle\"  \n\n//\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u52a0\u8f7d\uff1b\u6587\u4ef6\u4e2d\u914d\u7f6e\u5177\u4f53\u7684\u6a21\u5757  \napplyConfig('scripts/settings/aosp.gradle')  \n//applyConfig('scripts/settings/aosp-cmake.gradle')  \napplyConfig('scripts/settings/aosp-system-server.gradle')  \napplyConfig('scripts/settings/car.gradle')  \n//applyConfig('scripts/settings/cts.gradle')\napplyConfig('ext/scripts/settings/ext.gradle')\n</code></pre> <p>\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c\u9ed8\u8ba4\u662f\u6ce8\u91ca\u6389 scripts/settings/aosp-cmake.gradle \uff0c\u6240\u4ee5\u8981\u4f7f\u7528 native \u76f8\u5173\u6a21\u5757\uff0c\u89e3\u6ce8\u91ca\u8fd9\u884c\u4ee3\u7801\u5373\u53ef\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#6x","title":"\u3010\u91cd\u8981\u30116.x \u7248\u672c\u95ee\u9898","text":"<p>\u5728 aosp-cmake/build.gradle \u4e2d\u6709\u8fd9\u4e48\u4e00\u4e2a\u5224\u65ad\uff1a</p> <pre><code>// \u8fd9\u4e2a\u6a21\u5757\u662f\u4e00\u4e2ac/c++\u6a21\u5757\uff0c\n// \u76ee\u524d\u4e0d\u77e5\u9053\u600e\u4e48\u5728 java-library \u4e2d\u5f15\u7528 CmakeLists.txt\n// \u6240\u4ee5\u5224\u65ad\u662f idea \u5219\u52a0\u8f7d java-library\n// \u5426\u5219\u52a0\u8f7d android-library\nif (rootProject.ext.isRunningInIDEA) {\n    apply from: \"${rootDir}/scripts/java-build.gradle\"\n} else {\n    apply from: \"${rootDir}/scripts/android-build.gradle\"\n}\n</code></pre> <p>\u4e4b\u524d\u53d1\u73b0\u8fc7\u4e00\u4e2abug\uff0c\u5728 Mac\u3001Linux \u5e73\u53f0 isRunningInIDEA \u7684\u503c\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5728 Win \u4e0b\u8fd9\u4e2a\u503c\u662f\u9519\u8bef\u7684\u3002 \u5982\u679c\u53d1\u73b0 C++ \u4ee3\u7801\u6ca1\u52a0\u8f7d\u51fa\u6765\uff0c\u8981\u6ce8\u610f\u4e0b scripts/core.gradle \u6253\u5370\u51fa\u6765\u7684 isRunningInIDEA \u662f\u5426\u4e3a false \uff1a</p> <pre><code>// \u5982\u679c\u662f idea \u6253\u5f00\u8fd9\u4e2a\u5de5\u7a0b\uff0c\u9ed8\u8ba4\u662f\u6253\u5f00 Java \u6a21\u5757\uff08\u975eAndroid\u6a21\u5757\uff09\nisRunningInIDEA = getIdea()\nisRunningInAndroidStudio = getAndroidStudio()\nlogger.warn(\"Running on idea = \" + isRunningInIDEA + \", Android Studio = \" + isRunningInAndroidStudio)\n</code></pre>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#cmakeliststxt","title":"\u4e3bCMakeLists.txt","text":"<p>\u5728 aosp-cmake/CMakeLists.txt \u4e2d\u914d\u7f6e\u5f88\u591a subdirectory \uff0c\u8003\u8651\u5230\u5f88\u591a\u6a21\u5757\u5927\u5bb6\u90fd\u4e0d\u4f1a\u7528\uff1b\u6240\u4ee5\u6211\u9ed8\u8ba4\u6253\u5f00\u4e86\u4e00\u4e9b subdirectory \u3002</p> <p>\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u4e86\u6253\u5f00\u81ea\u5df1\u60f3\u8981\u770b\u7684\u6a21\u5757\uff0c\u6bd4\u5982\u4f60\u662f\u505a OTA \u5347\u7ea7\u6a21\u5757\uff0c\u4e5f\u5c31\u662f update_engine \u76f8\u5173\u7684\uff0c\u53ef\u4ee5\u6253\u5f00\uff1a</p> <pre><code>add_subdirectory_safe(system/update_engine)  \nadd_subdirectory_safe(system/update_engine/liburing_cpp)  \nadd_subdirectory_safe(system/update_engine/stable)\n</code></pre> <p>\u5982\u679c\u4f60\u6253\u5f00 update_engine \u4e4b\u540e\uff0c\u53d1\u73b0\u5728 update_engine \u91cc\u6709\u4f9d\u8d56 bootloader\uff0c\u6b64\u65f6\u8df3\u8f6c\u4e0d\u4e86 bootloader \u76f8\u5173\u4ee3\u7801\u3002</p> <p>\u8fd9\u65f6\u5c31\u9700\u8981\u4f60\u518d\u6253\u5f00\u5e94\u7528\u7684\u6a21\u5757\u4e86\uff0c\u90a3\u5982\u4f55\u786e\u8ba4\u8981\u5728 \u4e3bCMakeLists.txt \u91cc\u6253\u5f00\u54ea\u4e2a\u6a21\u5757\u5462\uff1f</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#target_link_libraries","title":"target_link_libraries","text":"<p>\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u4ee5 update_engine \u6a21\u5757\u4e3a\u4f8b\u3002</p> <p>\u67e5\u770b aosp-cmake/system/update_engine \u76ee\u5f55\u4e0b CMakeLists.txt \u4e2d\u7684 target_link_libraries\uff0c\u53d1\u73b0\u6709\u4f9d\u8d56 libbootloader_message\u3002</p> <p>\u770b\u5230\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u4e0d\u77e5\u9053\u8981\u5728 \u4e3bCMakeLists.txt \u6253\u5f00\u54ea\u4e2asubdirectory\uff0c\u4e0d\u7740\u6025\u3002\u6240\u4ee5\u8fd8\u5f97\u67e5\u627e library \u6240\u5728\u7684\u76ee\u5f55\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#projectsjson","title":"projects.json","text":"<p>\u6587\u4ef6 aosp-cmake/projects.json \u914d\u7f6e\u4e86 library \u5bf9\u5e94\u7684\u76ee\u5f55\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u524d\u9762\u4e00\u6b65\u67e5\u627e\u5230 update_engine \u6a21\u5757\u4e2d\u4f9d\u8d56 libbootloader_message \u5e93\uff0c\u5c31\u53ef\u4ee5\u5728 projects.json \u4e2d\u627e\u5230 libbootloader_message \u6240\u5728\u7684\u76ee\u5f55\u3002</p> <pre><code>\"libbootloader_message\": \"bootable/recovery/bootloader_message\",\n</code></pre> <p>\u627e\u5230\u4e4b\u540e\uff0c\u56de\u5230 \u4e3bCMakeLists.txt \uff0c\u6253\u5f00\u5982\u4e0b\uff1a</p> <pre><code>add_subdirectory_safe(bootable/recovery/bootloader_message)\n</code></pre> <p>\u662f\u4e0d\u662f\u5f88\u7b80\u5355\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#_1","title":"\u6e29\u99a8\u63d0\u793a","text":"<p>\u56e0\u4e3a CMake \u8bed\u6cd5\u7684\u539f\u56e0\uff0ctarget_link_libraries \u4f9d\u8d56\u7684\u5e93\u540d\u4e0d\u80fd\u5305\u542b @ \uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5728 target_link_libraries \u4e2d\u770b\u5230\u6709 - \uff0c\u518d\u5230 projects.json \u67e5\u627e\u5176\u6240\u5728\u7684\u76ee\u5f55\uff0c\u8bf7\u81ea\u884c\u628a  @  \u6362\u6210 - \u3002</p> <p>\u6bd4\u5982\uff0caosp-cmake/system/update_engine/CMakeLists.txt \u4e2d\u4f9d\u8d56\uff1aandroid.hardware.boot-1.2 \uff0c\u4f60\u5230 aosp-cmake/projects.json \u4e2d\u76f4\u63a5\u641c\u7d22 android.hardware.boot-1.2 \u662f\u641c\u4e0d\u5230\u7684\uff0c\u8981\u6362\u6210 android.hardware.boot@1.2 \u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-cpp/#_2","title":"\u518d\u6b21\u63d0\u793a","text":"<p>\u5982\u679c\u4f60\u5728 \u6559\u7a0b001-\u9996\u6b21\u914d\u7f6e \u4e2d\u4f7f\u7528\u7684\u662f\u8f6f\u94fe\u63a5\u65b9\u6848\uff0c\u4f60\u6309\u7167\u5982\u4e0a\u914d\u7f6e\u6253\u5f00\u540e\uff0c\u4f9d\u7136\u8df3\u8f6c\u4e0d\u4e86\u3002</p> <p>\u90a3\u4f60\u5c31\u5e94\u8be5\u68c0\u67e5\u4f60\u8981\u67e5\u770b\u7684\u6a21\u5757\u662f\u5426\u88ab\u8f6f\u94fe\u63a5\u8fc7\u6765\uff0c\u5982\u679c\u6ca1\u6709\u8bf7\u81ea\u884c\u8f6f\u94fe\u63a5\u5373\u53ef\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code-2/","title":"\u6559\u7a0b008-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801[\u8fdb\u9636\u7248]","text":"<p>Warning</p> <p>\u8fd9\u7bc7\u6587\u6863\u4ec5\u63d0\u4f9b\u89e3\u51b3\u8be5\u65b9\u6848\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u65e0\u9700\u6dfb\u52a0\u4efb\u4f55\u914d\u7f6e\u6216\u505a\u989d\u5916\u64cd\u4f5c\uff0c\u5373\u53ef\u4eab\u53d7\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code-2/#_1","title":"\u80cc\u666f","text":"<p>\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801\u4ece\u6700\u5f00\u59cb\u7684\u7ed9 .iml \u6587\u4ef6\u4e2d\u7684 android sdk \u6392\u5e8f\uff0c\u5230 \u6559\u7a0b005-\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801 \u63d0\u51fa\u7684\u5220\u9664\u3001\u6062\u590d android sdk \u65b9\u6848\uff1b\u603b\u662f\u89c9\u5f97\u64cd\u4f5c\u8d77\u6765\u5f88\u7e41\u7410\u3002</p> <p>\u6700\u8fd1\u5728 IntelliJ IDEA \u4e2d\u8c03\u8bd5 aosp_inject \u5de5\u7a0b\u53d1\u73b0\u4f7f\u7528 \u7eafjava\u6a21\u5757 \u6bd4 Android\u6a21\u5757 \u901f\u5ea6\u5feb\u4e86\u4e0d\u53ea5\u500d\u3002</p> <p>\u987f\u65f6\u6765\u4e86\u7075\u611f\uff1a\u628a as-aosp \u7684 Android\u6a21\u5757 \u6362\u6210 \u7eafjava\u6a21\u5757 \uff0c\u597d\u5904\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u52a0\u8f7d\u66f4\u5feb\uff0c\u66f4\u7701\u5185\u5b58\uff1b</p> </li> <li> <p>\u52a0\u8f7d\u540e\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u76f4\u63a5\u5c31\u80fd\u8df3\u8f6c\u7cfb\u7edf\u6e90\u7801\u3002</p> </li> </ul>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/as-aosp/jump-system-code-2/#_2","title":"\u65b9\u6848","text":"<p>\u67d0\u6a21\u5757\u7684build.gradle</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u65b9\u6848\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5728 build.gradle \u91cc\u52a0\u8f7d java-build.gradle \u8fd8\u662f android-build.gradle\uff0c\u5982\uff1a</p> <pre><code>if (rootProject.ext.isAndroid) {\n    apply from: \"${rootDir}/scripts/android-build.gradle\"\n} else {\n    apply from: \"${rootDir}/scripts/java-build.gradle\"\n}\n</code></pre> <p>core.gradle</p> <p>\u90a3\u4e48\u8fd9\u4e2a isAndroid \u662f\u5728 scripts/core.gradle \u4e2d\uff1a</p> <pre><code>isAndroid = getForceAndroidLibrary(properties)\nlogger.warn(\"Config Android module = \" + isAndroid)\n</code></pre> <p>func.gradle</p> <p>\u800c getForceAndroidLibrary() \u51fd\u6570\u662f\u5728 scripts/func.gradle \u91cc\u5b9a\u4e49\uff1a</p> <pre><code>ext.getForceAndroidLibrary = { properties -&gt;\n    // \u68c0\u67e5 ext/scripts/ext.properties or local.properties \u662f\u5426\u5b58\u5728 EXT_FORCE_ANDROID_LIBRARY\n    def forceAndroidLibrary = properties.getProperty('EXT_FORCE_ANDROID_LIBRARY')\n    if (isNotNull(forceAndroidLibrary)) {\n        logger.warn(\"set forceAndroidLibrary from ext/scripts/ext.properties or local.properties\")\n        forceAndroidLibrary = forceAndroidLibrary.toBoolean()\n    } else {\n        // \u7ecf\u8fc7\u6d4b\u8bd5\u53d1\u73b0\uff0c\u5728 as \u6216\u8005 idea \u4e2d\u4f7f\u7528 Java \u6a21\u5757\u4e5f\u90fd\u53ef\u4ee5\u65ad\u70b9\u8c03\u8bd5\n        // \u4f7f\u7528\u6539\u6210\u9ed8\u8ba4\u7528 Java \u6a21\u5757\n        if (false) {\n            // \u5224\u65ad\u662f\u5426\u5728\u4e2d as \u4e2d\u8fd0\u884c\uff0c\n            def isRunningInIDEA = System.getenv(\"IDEA_INITIAL_DIRECTORY\") != null\n            def isRunningInAndroidStudio = !isRunningInIDEA &amp;&amp; System.getProperty('idea.active') != null\n            logger.warn(\"Running on as = \" + isRunningInAndroidStudio)\n            forceAndroidLibrary = isRunningInAndroidStudio\n        } else {\n            forceAndroidLibrary = false\n        }\n    }\n\n    return forceAndroidLibrary\n}\n</code></pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f false \u3002\u6240\u4ee5\u73b0\u5728\u6240\u6709\u7684 module \u9ed8\u8ba4\u52a0\u8f7d\u7684\u662f Java \u6a21\u5757\u3002</p>","tags":["Android","Android Studio","as-aosp\u6559\u7a0b"]},{"location":"source-code/global-scripts/intro/","title":"global scripts \u5de5\u7a0b\u7b80\u4ecb","text":"<p>\u5de5\u7a0b\u5730\u5740\uff1aglobal_scripts</p> <p>global scripts\u5de5\u7a0b\u662f\u6211\u5728\u5de5\u4f5c\u3001\u751f\u6d3b\u4e2d\u628a\u5e38\u7528\u5230\u7684\u547d\u4ee4\u3001\u811a\u672c\u7b49\u90fd\u96c6\u5408\u5230\u8fd9\u4e2a\u5de5\u7a0b\u4e2d\u3002\u4e3b\u8981\u7528\u7684\u80fd\u529b\u5982\uff1a</p> <ul> <li> <p>zsh \u4e3b\u9898\u3001\u63d2\u4ef6</p> </li> <li> <p>tmux \u4e3b\u9898\u3001\u63d2\u4ef6</p> </li> <li> <p>vim \u4e3b\u9898\u3001\u914d\u7f6e</p> </li> <li> <p>aosp \u7f16\u8bd1\u811a\u672c\uff08\u8d85\u7ea7\u597d\u7528\uff0c\u7f16\u8bd1\u540e\u8fd8\u81ea\u52a8\u901a\u77e5\uff09</p> </li> <li> <p>adb push \u5feb\u6377\u547d\u4ee4\uff08\u914d\u5408\u670d\u52a1\u5668\u4e0a\u7684\u7f16\u8bd1\u7279\u522b\u597d\u7528\uff09</p> </li> <li> <p>adb \u547d\u4ee4</p> </li> <li> <p>aosp grep \u547d\u4ee4\uff08\u65e0\u9700lunch\uff09</p> </li> <li> <p>frida\uff08android \u76f8\u5173\uff09</p> </li> <li> <p>clash\uff08linux \u4e0b\u4f7f\u7528 vpn\uff09</p> </li> <li> <p>winscope\uff08android sf\u3001wms\u76f8\u5173\uff0c\u61c2\u7684\u90fd\u61c2\uff09</p> </li> <li> <p>code style</p> </li> <li> <p>git \u5feb\u6377\u952e</p> </li> <li> <p>im bot(\u4f01\u4e1a\u5fae\u4fe1\u3001\u9489\u9489\u3001\u98de\u4e66)</p> </li> <li> <p>\u5e38\u7528\u547d\u4ee4 alias</p> </li> <li> <p>...</p> </li> </ul>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_1","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u5728 ~/.bashrc \u91cc source gs_env.sh \u6587\u4ef6\u5373\u53ef\uff0c\u6bd4\u5982\u6211\u7684\u5de5\u7a0b\u76ee\u5f55\u5728/Users/solo/code/github/global_scripts</p> <pre><code>source $HOME/code/github/global_scripts/gs_env.sh\n</code></pre> <p>source gs_env.sh \u8981\u6539\u6210\u5176\u6240\u5728\u7684\u8def\u5f84</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#zshoyz","title":"\u914d\u5408zsh\u3001oyz\u4f7f\u7528","text":"<p>\u5982\u679c\u4e0d\u60f3\u7528zsh\uff0c\u5c31\u5982\u4e0a\u53ea\u5728 ~/.bashrc \u4e2d source gs_env.sh \u5373\u53ef\uff0c\u4f46\u5efa\u8bae\u914d\u5408zsh\u4f7f\u7528\u66f4\u4f73\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#zsh","title":"\u5b89\u88c5zsh","text":"<pre><code>sudo apt insall zsh\n\nor\n\nbrew install zsh\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#oyz","title":"\u5b89\u88c5oyz","text":"<pre><code>sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>https://github.com/ohmyzsh/ohmyzsh</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_2","title":"\u914d\u7f6e","text":"<p>\u5728 ~/.zshrc \u91ccsource gs_env.sh\u6587\u4ef6\u5373\u53ef\uff0c\u6bd4\u5982\u6211\u7684\u5de5\u7a0b\u76ee\u5f55\u5728/Users/solo/code/github/global_scripts <pre><code>source $HOME/code/github/global_scripts/gs_env.sh\n</code></pre></p> <p>source gs_env.sh \u8981\u6539\u6210\u5176\u6240\u5728\u7684\u8def\u5f84</p> <p>.zshrc\u91cc\u8fd8\u914d\u7f6ezsh-autosuggestions \u3001zsh-syntax-highlighting\u63d2\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u4e0b\u8f7d\u4ee5\u4e0b\u4e24\u4e2a\u5de5\u7a0b</p> <p>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</p> <p>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_3","title":"\u63d2\u4ef6[\u91cd\u8981]","text":"<p>\u5728\u52a0\u8f7d gs_env.sh \u65f6\uff0c\u9664\u4e86\u52a0\u8f7d\u4e00\u4e9b\u57fa\u672c\u7684\u914d\u7f6e\u4ee5\u5916\uff1b\u5927\u90e8\u5206\u7684\u914d\u7f6e\u90fd\u6539\u6210\u63d2\u4ef6\u7684\u65b9\u6848\u3002</p> <p>\u53ef\u4ee5\u5728 home \u76ee\u5f55\u4e0b\u914d\u7f6e .gsrc \u6587\u4ef6\uff0c\u6216\u8005\u76f4\u63a5\u5728\u672c\u5de5\u7a0b\u7684 conf/.gsrc \u6587\u4ef6\u4e0b\u4fee\u6539\u9700\u8981\u7528\u5230\u7684\u63d2\u4ef6\u3002</p> <p>\u76ee\u524d\u652f\u6301\u7684\u63d2\u4ef6\u5982\u4e0b\uff1a</p> <pre><code>## \u63d2\u4ef6\ngs_plugins=(\n         alias/common\n         alias/private\n         android/adb\n         android/build\n         android/frida\n         android/grep\n         android/perfetto\n         android/push\n         android/winscope\n         common\n         git\n         system/brew\n         system/clash\n         system/proxy\n         system/repo\n        )\n</code></pre> <p>\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7 gs_themes_prompt \u914d\u7f6e prompt \u4e3b\u9898\uff0c\u6216\u8005\u901a\u8fc7 gs_custom_plugins \u914d\u7f6e custom \u76ee\u5f55\u4e0b\u7684\u63d2\u4ef6\uff08\u7528\u6237\u81ea\u5df1\u6269\u5c55\u7684\u63d2\u4ef6\u76ee\u5f55\uff09\u3002</p> <p>\u751a\u81f3\u8fd8\u53ef\u4ee5 gs_env_debug \u6765\u6253\u5f00\u6216\u8005\u5173\u95ed\u8c03\u8bd5\u4fe1\u606f\u3002</p> <pre><code>## \u8c03\u8bd5\ngs_env_debug=0\n\n## prompt \u4e3b\u9898\ngs_themes_prompt=remote\n\n## custom \u76ee\u5f55\u4e0b\u7684\u63d2\u4ef6\ngs_custom_plugins=(\n    work\n    ...\n)\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_4","title":"\u811a\u672c\u80fd\u529b","text":"","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#gs_android_buildsh","title":"gs_android_build.sh","text":"<p>android\u6e90\u7801\u7f16\u8bd1\u5feb\u6377\u952e\u547d\u4ee4\uff0c\u5982\u5168\u7f16\u3001ninja\u5355\u7f16\u7b49\u3002</p> <pre><code>\u256d\u2500[solo@10.0.12.7] \u27a4 [/Users/solo/code/8450] \u27a4 [2023-09-10 14:16:22]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f gs_android_build6                         \ngs_android_build              gs_android_build_ninja        gs_android_build_vendor     \ngs_android_build_car          gs_android_build_ninja_clean                              \ngs_android_build_make         gs_android_build_qssi                                     \n</code></pre> <p>\u6682\u65f6\u7528\u5230\u8fd9\u4e9b\u547d\u4ee4\uff0c\u540e\u7eed\u6709\u5e38\u7528\u7684\u518d\u8865\u5145</p> <pre><code>\u256d\u2500[solo@10.0.12.7] \u27a4 [/Users/solo/code/8450] \u27a4 [2023-09-10 14:16:42]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f gs_android_build_ninja\nTrying dependencies-only mode on a non-existing device tree?\n\n1. framework\n2. framework-minus-apex\n3. services\n4. libandroid_servers\n5. libinputflinger\n6. libinputdispatcher\n7. libinputreader\n8. selinux_policy\n9. surfaceflinger\n10. update_engine\n11. android.hardware.power-service\n12. libresourcemanagerservice\n13. libaudioflinger\n14. libcameraservice\n15. com.journeyOS.J007engine.hidl@1.0-service\n16. com.journeyOS.J007engine.hidl@1.0\n17. J007Service\n18. jos-framework\n19. jos-services\n20. watermark\nWhich would you like? [ framework ]\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#gs_android_grepsh","title":"gs_android_grep.sh","text":"<p>android\u6e90\u7801\u76ee\u5f55\u4e0bgrep\u5feb\u901f\u67e5\u627e\u4ee3\u7801 <pre><code>\u256d\u2500[solo@10.0.12.7:/Users/solo/code/github/global_scripts] \u27a4 [2023-09-10 14:18:29]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f gs_aosp_help\n- gs_aosp_cgrep:      Greps on all local C/C++ files.\n- gs_aosp_ggrep:      Greps on all local Gradle files.\n- gs_aosp_gogrep:     Greps on all local Go files.\n- gs_aosp_jgrep:      Greps on all local Java files.\n- gs_aosp_ktgrep:     Greps on all local Kotlin files.\n- gs_aosp_resgrep:    Greps on all local res/*.xml files.\n- gs_aosp_mangrep:    Greps on all local AndroidManifest.xml files.\n- gs_aosp_mgrep:      Greps on all local Makefiles and *.bp files.\n- gs_aosp_owngrep:    Greps on all local OWNERS files.\n- gs_aosp_rsgrep:     Greps on all local Rust files.\n- gs_aosp_sepgrep:    Greps on all local sepolicy files.\n- gs_aosp_sgrep:      Greps on all local source files.\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#gs_adbsh","title":"gs_adb.sh","text":"<p>adb\u5feb\u6377\u952e\u547d\u4ee4</p> <p>\u6682\u65f6\u7528\u5230\u8fd9\u4e9b\u547d\u4ee4\uff0c\u540e\u7eed\u6709\u5e38\u7528\u7684\u518d\u8865\u5145 <pre><code>\u256d\u2500[solo@10.0.12.7:/Users/solo/code/github/global_scripts] \u27a4 [2023-09-10 14:18:29]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f gs_android_adb_\ngs_android_adb_abx2xml                gs_android_adb_j007engine_kill        gs_android_adb_rm_dex2oat           \ngs_android_adb_clear_package          gs_android_adb_j007engine_log         gs_android_adb_screencap            \ngs_android_adb_connect                gs_android_adb_j007service_clear      gs_android_adb_screenrecord         \ngs_android_adb_dump_version           gs_android_adb_j007service_kill       gs_android_adb_selinux_disable      \ngs_android_adb_dump_version_settings  gs_android_adb_j007service_log        gs_android_adb_settings_provider    \ngs_android_adb_hidden_api_disable     gs_android_adb_j007service_version    gs_android_adb_sf_dump_refresh_rate \ngs_android_adb_hidden_api_enable      gs_android_adb_key                    gs_android_adb_sf_set_refresh_rate  \ngs_android_adb_i007service_clear      gs_android_adb_key_back               gs_android_adb_sf_show_refresh_rate \ngs_android_adb_i007service_kill       gs_android_adb_key_home               gs_android_adb_show_3rd_app         \ngs_android_adb_i007service_log        gs_android_adb_key_menu               gs_android_adb_show_log             \ngs_android_adb_i007service_version    gs_android_adb_kill_grep              gs_android_adb_show_system_app      \ngs_android_adb_imei                   gs_android_adb_kill_package           gs_android_adb_shutdown_emulator    \ngs_android_adb_input_disable          gs_android_adb_log_grep               gs_android_adb_systrace             \ngs_android_adb_input_enable           gs_android_adb_ps_grep\n</code></pre></p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#gs_android_pushsh","title":"gs_android_push.sh","text":"<pre><code>\u256d\u2500[solo@10.0.12.7:/Users/solo/code/github/global_scripts] \u27a4 [2023-09-10 14:19:45]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f gs_android_push_\ngs_android_push_args            gs_android_push_framework_jni   gs_android_push_so            \ngs_android_push_ext_framework   gs_android_push_input           gs_android_push_surfaceflinger\ngs_android_push_ext_services    gs_android_push_mediaserver     gs_android_push_systemui      \ngs_android_push_flyme_services  gs_android_push_services                                      \ngs_android_push_framework       gs_android_push_settings\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#zsh_1","title":"zsh\u81ea\u5b9a\u4e49\u4e3b\u9898","text":"<ul> <li>\u7528\u6237\u540d</li> <li>ip\u5730\u5740</li> <li>\u5f53\u524d\u76ee\u5f55\u7edd\u5bf9\u8def\u5f84</li> <li>\u5f53\u524d\u65f6\u95f4</li> <li>git\u4fe1\u606f\uff08\u5206\u652f\u3001\u662f\u5426\u4fee\u6539\u7b49\uff09</li> <li>bash\u73af\u5883 \u8fd8\u662f zsh\u73af\u5883\uff1bpy\u73af\u5883</li> </ul> <pre><code>\u256d\u2500[solo@10.0.12.7:/home/solo/code/github/global_scripts] \u27ac [2023-09-10 14:19:41]\n\u2570\u2500(zsh-py39tf2.x) \u276f\u276f\u276f\u276f\u276f\u276f                                                                   git:(main)\n</code></pre> <p>zsh\u73af\u5883\u5e76\u4e14\u5f53\u524d\u76ee\u5f55\u662fgit\u4ed3\u624d\u663e\u793agit\u4fe1\u606f\u3002 \u4e3b\u9898\u662f\u6709\u989c\u8272\u7684\uff0c\u53ea\u662f\u8fd9\u91cc\u8d34\u4e0a\u6587\u672c\u770b\u4e0d\u51fa\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#gerrit","title":"gerrit\u63d0\u4ea4\u811a\u672c","text":"<p>\u5982\u679c\u662f\u63d0\u4ea4\u4ee3\u7801\u5230gerrit\uff0c\u5728\u7ec8\u7aef\u6267\u884cgerrit.py -b branch\u3002\u4e0d\u8f93\u5165\u5206\u652f\u4fe1\u606f\u5219\u9ed8\u8ba4master\u5206\u652f\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#frida","title":"frida","text":"<p>\u6700\u521d\u7684\u65f6\u5019\u6211\u662f\"\u4e0d\u5c51\u4e8e\"\u7528 frida \u7684\uff0c\u89c9\u5f97\u7cfb\u7edf\u5f00\u53d1\u4eba\u5458\u968f\u65f6\u53ef\u4ee5\u901a\u8fc7\u8be5\u4ee3\u7801\u9a8c\u8bc1\uff0c\u4f55\u5fc5\u7528 frida \u5462\u3002</p> <p>\u4e00\u6b21\u5076\u7136\u7684\u673a\u4f1a\uff0c\u4f7f\u7528 frida hook \u4e86\u67d0\u4e2a\u51fd\u6570\uff0c\u5c31\u559c\u6b22\u7528\u4e0a\u4e86\uff0c\u800c\u4e14\u4e00\u53d1\u4e0d\u53ef\u6536\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981\u7f16\u8bd1\u4ee3\u7801\uff0c\u7f16\u8bd1\u6162\u4e0d\u8bf4\uff0c\u4e0d\u540c\u7684\u4ea7\u54c1\u7684bug\u9700\u8981\u7f16\u8bd1\u7684jar\u3001apex\u90fd\u4e0d\u4e00\u6837\uff1b\u90a3\u4f60\u670d\u52a1\u5668\u662f\u4e0d\u662f\u5f97\u51c6\u5907\u5f88\u591a\u5957 android \u6e90\u7801\u3002\u8fd9\u5c31\u8981\u6c42\u4f60\u670d\u52a1\u5668\u5bb9\u91cf\u8981\u5927\u3002 \u6240\u4ee5 frida \u7684\u4f18\u52bf\u5c31\u6765\u4e86\uff0c\u65e0\u9700\u7f16\u8bd1\u4ee3\u7801\uff0chook \u5c31\u884c\u4e86\u3002</p> <p>\u5bf9\u4e8e\u8f85\u52a9 debug \u975e\u5e38\u6709\u7528\u3002</p> <p>frida \u5177\u4f53\u7684\u7528\u6cd5\u4ee5\u53ca\u80fd\u529b\u8bf7\u81ea\u884c\u67e5\u770b\u4ee3\u7801\u3002 </p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#clash","title":"clash","text":"<p>linux \u7cfb\u7edf\u4e0b\u4f7f\u7528\u547d\u4ee4\u542f\u7528 clash\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#codestyle","title":"codestyle","text":"<p>codestyle\u68c0\u67e5\uff0c\u652f\u6301Java\u4ee3\u7801\u6216\u8005kotlin\u4ee3\u7801\u3002 \u6267\u884c gs_check_style.py --style \"strict_mode\" \u5176\u4e2d strict_mode \u53ef\u4ee5\u4e3a <pre><code>alibaba\ngoogle\nstrict_mode\nsun\ntest\nwork\n</code></pre></p> <p>\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u4fee\u6539codestyle</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#tmux","title":"tmux \u4e3b\u9898\u3001\u63d2\u4ef6","text":"<p>\u81ea\u884c\u67e5\u770b\u4ee3\u7801\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#git","title":"git \u5feb\u6377\u547d\u4ee4","text":"<pre><code>a = add\nb = branch\nc = commit\nd = diff\nf = fetch\ng = grep\nl = log\nm = merge\no = checkout\np = pull\nr = remote\ns = status\nw = whatchanged\n\nap = add --patch\nbe = branch --edit-description\nci = commit --interactive\nds = diff --staged\nlg = log --graph\nss = status --short\n</code></pre>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#vim","title":"vim","text":"<p>\u8f7b\u91cf\u7ea7 Vim \u914d\u7f6e\u6846\u67b6\uff0c\u5168\u4e2d\u6587\u6ce8\u91ca\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_5","title":"\u57fa\u7840\u914d\u7f6e","text":"<ul> <li>init.vim: \u914d\u7f6e\u5165\u53e3\uff0c\u8bbe\u7f6e runtimepath \u68c0\u6d4b\u811a\u672c\u8def\u5f84\uff0c\u52a0\u8f7d\u5176\u4ed6\u811a\u672c\u3002</li> <li>tiny\u6587\u4ef6\u5939: \u6240\u6709\u4eba\u90fd\u80fd\u540c\u610f\u7684\u57fa\u7840\u914d\u7f6e\uff08\u65e0\u4efb\u4f55\u6309\u952e\u548c\u6837\u5f0f\u5b9a\u4e49\uff09\u3002</li> <li>fileconfig.vim: \u6587\u4ef6\u76f8\u5173\u7684\u914d\u7f6e\u3002</li> <li>keymaps.vim: \u5feb\u6377\u952e\u5b9a\u4e49\u3002</li> <li>style.vim: \u72b6\u6001\u680f\uff0c\u66f4\u7d27\u51d1\u7684\u6807\u7b7e\u680f\u6587\u5b57\u7b49\u548c\u663e\u793a\u76f8\u5173\u3002</li> <li>tabsize.vim: \u5236\u8868\u7b26\u5bbd\u5ea6\uff0c\u662f\u5426\u5c55\u5f00\u7a7a\u683c\u7b49\uff0c\u56e0\u4e3a\u4e2a\u4eba\u5dee\u5f02\u592a\u5927\uff0c\u5355\u72ec\u4e00\u4e2a\u6587\u4ef6\u597d\u66f4\u6539\u3002</li> <li>terminal.vim: \u7ec8\u7aef\u76f8\u5173\u914d\u7f6e\u3002</li> <li>theme.vim: \u8272\u5f69\u4e3b\u9898\uff0c\u9ad8\u4eae\u4f18\u5316(mac\u7cfb\u7edf\u4e0b\u6253\u5f00\u6b64\u529f\u80fd)\u3002</li> <li>tmux.vim: tmux\u76f8\u5173\u914d\u7f6e\u3002</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_6","title":"\u8272\u5f69\u914d\u7f6e","text":"<p>\u989c\u8272\u914d\u7f6e\uff1a\u5728colors\u76ee\u5f55\uff08\u90fd\u662f\u7f51\u4e0a\u4e0b\u8f7d\u7684\u914d\u7f6e\uff09\uff0c\u4e0b\u8f7d\u540e\u5728theme.vim\u66f4\u65b0\u989c\u8272\u4e3b\u9898\u5373\u53ef\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#other","title":"other","text":"<ul> <li>gs_common_alias.sh : \u5e38\u7528\u7684alias</li> <li>gs_private_alias.sh : \u79c1\u4eba\u7684\u4e00\u4e9balias</li> </ul>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]},{"location":"source-code/global-scripts/intro/#_7","title":"\u540e\u7eed","text":"<p>\u56e0\u4e3a\u8fd9\u4e2a\u5de5\u7a0b\u662f\u6211\u7528\u6765\u8f85\u52a9\u5de5\u4f5c\uff0c\u6240\u4ee5\u540e\u7eed\u7684\u4e00\u4e9b\u66f4\u65b0\u65b9\u5411\u4e5f\u662f\u56f4\u7ed5\u7740\u6211\u7684\u5de5\u4f5c\u5185\u5bb9\u6765\u66f4\u65b0\u3002\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u63d0\u4f9b\u5de5\u4f5c\u6548\u7387\uff0c\u51cf\u5c11\u91cd\u590d\u52b3\u52a8\u529b\uff08\u4e3b\u8981\u662f\u51cf\u5c11\u7ec8\u7aef\u8f93\u5165\u5404\u79cd\u547d\u4ee4\uff09\u3002</p> <p>\u56e0\u4e3a\u5de5\u7a0b\u5f15\u5165\u4e86\u63d2\u4ef6\u7684\u65b9\u6848\uff0c\u6240\u4ee5\u53ef\u73a9\u6027\u5c31\u5f88\u9ad8\u3002\u5176\u5b9e\u6211\u81ea\u5df1\u4e5f\u901a\u8fc7\u63d2\u4ef6\u7684\u65b9\u6848\u52a0\u4e86\u4e86\u4e00\u4e2a gs_work \u7684\u63d2\u4ef6\u5de5\u7a0b\uff0c\u4f46\u56e0\u4e3a\u6709\u4e9b\u5185\u5bb9\u6d89\u53ca\u5230\u5de5\u4f5c\u7684\u9690\u79c1\uff0c\u6240\u4ee5\u6ca1\u516c\u5f00\u3002</p>","tags":["\u57fa\u7840\u6280\u672f","\u811a\u672c"]}]}